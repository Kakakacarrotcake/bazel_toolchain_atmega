// Generated 05/12/2024 GMT

/*
 * Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
 * All rights reserved.
 * 
 * This software is developed by Microchip Technology Inc. and its subsidiaries ("Microchip").
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 *     1. Redistributions of source code must retain the above copyright notice, this list of
 *        conditions and the following disclaimer.
 * 
 *     2. Redistributions in binary form must reproduce the above copyright notice, this list
 *        of conditions and the following disclaimer in the documentation and/or other
 *        materials provided with the distribution. Publication is not required when
 *        this file is used in an embedded application.
 * 
 *     3. Microchip's name may not be used to endorse or promote products derived from this
 *        software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _PIC16F13124_H_
#define _PIC16F13124_H_

/*
 * C Header file for the Microchip PIC Microcontroller
 * PIC16F13124
 */
#ifndef _XC_H_
#warning Header file pic16f13124.h included directly. Use #include <xc.h> instead.
#endif

/*
 * Register Definitions
 */

// Register: INDF0
#define INDF0 INDF0
extern volatile unsigned char           INDF0               __at(0x000);
#ifndef _LIB_BUILD
asm("INDF0 equ 00h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF0                  :8;
    };
} INDF0bits_t;
extern volatile INDF0bits_t INDF0bits __at(0x000);
// bitfield macros
#define _INDF0_INDF0_POSN                                   0x0
#define _INDF0_INDF0_POSITION                               0x0
#define _INDF0_INDF0_SIZE                                   0x8
#define _INDF0_INDF0_LENGTH                                 0x8
#define _INDF0_INDF0_MASK                                   0xFF

// Register: INDF1
#define INDF1 INDF1
extern volatile unsigned char           INDF1               __at(0x001);
#ifndef _LIB_BUILD
asm("INDF1 equ 01h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF1                  :8;
    };
} INDF1bits_t;
extern volatile INDF1bits_t INDF1bits __at(0x001);
// bitfield macros
#define _INDF1_INDF1_POSN                                   0x0
#define _INDF1_INDF1_POSITION                               0x0
#define _INDF1_INDF1_SIZE                                   0x8
#define _INDF1_INDF1_LENGTH                                 0x8
#define _INDF1_INDF1_MASK                                   0xFF

// Register: PCL
#define PCL PCL
extern volatile unsigned char           PCL                 __at(0x002);
#ifndef _LIB_BUILD
asm("PCL equ 02h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCL                    :8;
    };
} PCLbits_t;
extern volatile PCLbits_t PCLbits __at(0x002);
// bitfield macros
#define _PCL_PCL_POSN                                       0x0
#define _PCL_PCL_POSITION                                   0x0
#define _PCL_PCL_SIZE                                       0x8
#define _PCL_PCL_LENGTH                                     0x8
#define _PCL_PCL_MASK                                       0xFF

// Register: STATUS
#define STATUS STATUS
extern volatile unsigned char           STATUS              __at(0x003);
#ifndef _LIB_BUILD
asm("STATUS equ 03h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C                      :1;
        unsigned DC                     :1;
        unsigned Z                      :1;
        unsigned nPD                    :1;
        unsigned nTO                    :1;
    };
    struct {
        unsigned CARRY                  :1;
        unsigned                        :1;
        unsigned ZERO                   :1;
    };
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits __at(0x003);
// bitfield macros
#define _STATUS_C_POSN                                      0x0
#define _STATUS_C_POSITION                                  0x0
#define _STATUS_C_SIZE                                      0x1
#define _STATUS_C_LENGTH                                    0x1
#define _STATUS_C_MASK                                      0x1
#define _STATUS_DC_POSN                                     0x1
#define _STATUS_DC_POSITION                                 0x1
#define _STATUS_DC_SIZE                                     0x1
#define _STATUS_DC_LENGTH                                   0x1
#define _STATUS_DC_MASK                                     0x2
#define _STATUS_Z_POSN                                      0x2
#define _STATUS_Z_POSITION                                  0x2
#define _STATUS_Z_SIZE                                      0x1
#define _STATUS_Z_LENGTH                                    0x1
#define _STATUS_Z_MASK                                      0x4
#define _STATUS_nPD_POSN                                    0x3
#define _STATUS_nPD_POSITION                                0x3
#define _STATUS_nPD_SIZE                                    0x1
#define _STATUS_nPD_LENGTH                                  0x1
#define _STATUS_nPD_MASK                                    0x8
#define _STATUS_nTO_POSN                                    0x4
#define _STATUS_nTO_POSITION                                0x4
#define _STATUS_nTO_SIZE                                    0x1
#define _STATUS_nTO_LENGTH                                  0x1
#define _STATUS_nTO_MASK                                    0x10
#define _STATUS_CARRY_POSN                                  0x0
#define _STATUS_CARRY_POSITION                              0x0
#define _STATUS_CARRY_SIZE                                  0x1
#define _STATUS_CARRY_LENGTH                                0x1
#define _STATUS_CARRY_MASK                                  0x1
#define _STATUS_ZERO_POSN                                   0x2
#define _STATUS_ZERO_POSITION                               0x2
#define _STATUS_ZERO_SIZE                                   0x1
#define _STATUS_ZERO_LENGTH                                 0x1
#define _STATUS_ZERO_MASK                                   0x4

// Register: FSR0
#define FSR0 FSR0
extern volatile unsigned short          FSR0                __at(0x004);

// Register: FSR0L
#define FSR0L FSR0L
extern volatile unsigned char           FSR0L               __at(0x004);
#ifndef _LIB_BUILD
asm("FSR0L equ 04h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L                  :8;
    };
} FSR0Lbits_t;
extern volatile FSR0Lbits_t FSR0Lbits __at(0x004);
// bitfield macros
#define _FSR0L_FSR0L_POSN                                   0x0
#define _FSR0L_FSR0L_POSITION                               0x0
#define _FSR0L_FSR0L_SIZE                                   0x8
#define _FSR0L_FSR0L_LENGTH                                 0x8
#define _FSR0L_FSR0L_MASK                                   0xFF

// Register: FSR0H
#define FSR0H FSR0H
extern volatile unsigned char           FSR0H               __at(0x005);
#ifndef _LIB_BUILD
asm("FSR0H equ 05h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0H                  :8;
    };
} FSR0Hbits_t;
extern volatile FSR0Hbits_t FSR0Hbits __at(0x005);
// bitfield macros
#define _FSR0H_FSR0H_POSN                                   0x0
#define _FSR0H_FSR0H_POSITION                               0x0
#define _FSR0H_FSR0H_SIZE                                   0x8
#define _FSR0H_FSR0H_LENGTH                                 0x8
#define _FSR0H_FSR0H_MASK                                   0xFF

// Register: FSR1
#define FSR1 FSR1
extern volatile unsigned short          FSR1                __at(0x006);

// Register: FSR1L
#define FSR1L FSR1L
extern volatile unsigned char           FSR1L               __at(0x006);
#ifndef _LIB_BUILD
asm("FSR1L equ 06h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L                  :8;
    };
} FSR1Lbits_t;
extern volatile FSR1Lbits_t FSR1Lbits __at(0x006);
// bitfield macros
#define _FSR1L_FSR1L_POSN                                   0x0
#define _FSR1L_FSR1L_POSITION                               0x0
#define _FSR1L_FSR1L_SIZE                                   0x8
#define _FSR1L_FSR1L_LENGTH                                 0x8
#define _FSR1L_FSR1L_MASK                                   0xFF

// Register: FSR1H
#define FSR1H FSR1H
extern volatile unsigned char           FSR1H               __at(0x007);
#ifndef _LIB_BUILD
asm("FSR1H equ 07h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1H                  :8;
    };
} FSR1Hbits_t;
extern volatile FSR1Hbits_t FSR1Hbits __at(0x007);
// bitfield macros
#define _FSR1H_FSR1H_POSN                                   0x0
#define _FSR1H_FSR1H_POSITION                               0x0
#define _FSR1H_FSR1H_SIZE                                   0x8
#define _FSR1H_FSR1H_LENGTH                                 0x8
#define _FSR1H_FSR1H_MASK                                   0xFF

// Register: BSR
#define BSR BSR
extern volatile unsigned char           BSR                 __at(0x008);
#ifndef _LIB_BUILD
asm("BSR equ 08h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BSR                    :6;
    };
    struct {
        unsigned BSR0                   :1;
        unsigned BSR1                   :1;
        unsigned BSR2                   :1;
        unsigned BSR3                   :1;
        unsigned BSR4                   :1;
        unsigned BSR5                   :1;
    };
} BSRbits_t;
extern volatile BSRbits_t BSRbits __at(0x008);
// bitfield macros
#define _BSR_BSR_POSN                                       0x0
#define _BSR_BSR_POSITION                                   0x0
#define _BSR_BSR_SIZE                                       0x6
#define _BSR_BSR_LENGTH                                     0x6
#define _BSR_BSR_MASK                                       0x3F
#define _BSR_BSR0_POSN                                      0x0
#define _BSR_BSR0_POSITION                                  0x0
#define _BSR_BSR0_SIZE                                      0x1
#define _BSR_BSR0_LENGTH                                    0x1
#define _BSR_BSR0_MASK                                      0x1
#define _BSR_BSR1_POSN                                      0x1
#define _BSR_BSR1_POSITION                                  0x1
#define _BSR_BSR1_SIZE                                      0x1
#define _BSR_BSR1_LENGTH                                    0x1
#define _BSR_BSR1_MASK                                      0x2
#define _BSR_BSR2_POSN                                      0x2
#define _BSR_BSR2_POSITION                                  0x2
#define _BSR_BSR2_SIZE                                      0x1
#define _BSR_BSR2_LENGTH                                    0x1
#define _BSR_BSR2_MASK                                      0x4
#define _BSR_BSR3_POSN                                      0x3
#define _BSR_BSR3_POSITION                                  0x3
#define _BSR_BSR3_SIZE                                      0x1
#define _BSR_BSR3_LENGTH                                    0x1
#define _BSR_BSR3_MASK                                      0x8
#define _BSR_BSR4_POSN                                      0x4
#define _BSR_BSR4_POSITION                                  0x4
#define _BSR_BSR4_SIZE                                      0x1
#define _BSR_BSR4_LENGTH                                    0x1
#define _BSR_BSR4_MASK                                      0x10
#define _BSR_BSR5_POSN                                      0x5
#define _BSR_BSR5_POSITION                                  0x5
#define _BSR_BSR5_SIZE                                      0x1
#define _BSR_BSR5_LENGTH                                    0x1
#define _BSR_BSR5_MASK                                      0x20

// Register: WREG
#define WREG WREG
extern volatile unsigned char           WREG                __at(0x009);
#ifndef _LIB_BUILD
asm("WREG equ 09h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG0                  :8;
    };
} WREGbits_t;
extern volatile WREGbits_t WREGbits __at(0x009);
// bitfield macros
#define _WREG_WREG0_POSN                                    0x0
#define _WREG_WREG0_POSITION                                0x0
#define _WREG_WREG0_SIZE                                    0x8
#define _WREG_WREG0_LENGTH                                  0x8
#define _WREG_WREG0_MASK                                    0xFF

// Register: PCLATH
#define PCLATH PCLATH
extern volatile unsigned char           PCLATH              __at(0x00A);
#ifndef _LIB_BUILD
asm("PCLATH equ 0Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCLATH                 :7;
    };
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits __at(0x00A);
// bitfield macros
#define _PCLATH_PCLATH_POSN                                 0x0
#define _PCLATH_PCLATH_POSITION                             0x0
#define _PCLATH_PCLATH_SIZE                                 0x7
#define _PCLATH_PCLATH_LENGTH                               0x7
#define _PCLATH_PCLATH_MASK                                 0x7F

// Register: INTCON
#define INTCON INTCON
extern volatile unsigned char           INTCON              __at(0x00B);
#ifndef _LIB_BUILD
asm("INTCON equ 0Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTEDG                 :1;
        unsigned                        :5;
        unsigned PEIE                   :1;
        unsigned GIE                    :1;
    };
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits __at(0x00B);
// bitfield macros
#define _INTCON_INTEDG_POSN                                 0x0
#define _INTCON_INTEDG_POSITION                             0x0
#define _INTCON_INTEDG_SIZE                                 0x1
#define _INTCON_INTEDG_LENGTH                               0x1
#define _INTCON_INTEDG_MASK                                 0x1
#define _INTCON_PEIE_POSN                                   0x6
#define _INTCON_PEIE_POSITION                               0x6
#define _INTCON_PEIE_SIZE                                   0x1
#define _INTCON_PEIE_LENGTH                                 0x1
#define _INTCON_PEIE_MASK                                   0x40
#define _INTCON_GIE_POSN                                    0x7
#define _INTCON_GIE_POSITION                                0x7
#define _INTCON_GIE_SIZE                                    0x1
#define _INTCON_GIE_LENGTH                                  0x1
#define _INTCON_GIE_MASK                                    0x80

// Register: PORTA
#define PORTA PORTA
extern volatile unsigned char           PORTA               __at(0x00C);
#ifndef _LIB_BUILD
asm("PORTA equ 0Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0                    :1;
        unsigned RA1                    :1;
        unsigned RA2                    :1;
        unsigned RA3                    :1;
        unsigned RA4                    :1;
        unsigned RA5                    :1;
    };
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits __at(0x00C);
// bitfield macros
#define _PORTA_RA0_POSN                                     0x0
#define _PORTA_RA0_POSITION                                 0x0
#define _PORTA_RA0_SIZE                                     0x1
#define _PORTA_RA0_LENGTH                                   0x1
#define _PORTA_RA0_MASK                                     0x1
#define _PORTA_RA1_POSN                                     0x1
#define _PORTA_RA1_POSITION                                 0x1
#define _PORTA_RA1_SIZE                                     0x1
#define _PORTA_RA1_LENGTH                                   0x1
#define _PORTA_RA1_MASK                                     0x2
#define _PORTA_RA2_POSN                                     0x2
#define _PORTA_RA2_POSITION                                 0x2
#define _PORTA_RA2_SIZE                                     0x1
#define _PORTA_RA2_LENGTH                                   0x1
#define _PORTA_RA2_MASK                                     0x4
#define _PORTA_RA3_POSN                                     0x3
#define _PORTA_RA3_POSITION                                 0x3
#define _PORTA_RA3_SIZE                                     0x1
#define _PORTA_RA3_LENGTH                                   0x1
#define _PORTA_RA3_MASK                                     0x8
#define _PORTA_RA4_POSN                                     0x4
#define _PORTA_RA4_POSITION                                 0x4
#define _PORTA_RA4_SIZE                                     0x1
#define _PORTA_RA4_LENGTH                                   0x1
#define _PORTA_RA4_MASK                                     0x10
#define _PORTA_RA5_POSN                                     0x5
#define _PORTA_RA5_POSITION                                 0x5
#define _PORTA_RA5_SIZE                                     0x1
#define _PORTA_RA5_LENGTH                                   0x1
#define _PORTA_RA5_MASK                                     0x20

// Register: PORTC
#define PORTC PORTC
extern volatile unsigned char           PORTC               __at(0x00E);
#ifndef _LIB_BUILD
asm("PORTC equ 0Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0                    :1;
        unsigned RC1                    :1;
        unsigned RC2                    :1;
        unsigned RC3                    :1;
        unsigned RC4                    :1;
        unsigned RC5                    :1;
    };
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits __at(0x00E);
// bitfield macros
#define _PORTC_RC0_POSN                                     0x0
#define _PORTC_RC0_POSITION                                 0x0
#define _PORTC_RC0_SIZE                                     0x1
#define _PORTC_RC0_LENGTH                                   0x1
#define _PORTC_RC0_MASK                                     0x1
#define _PORTC_RC1_POSN                                     0x1
#define _PORTC_RC1_POSITION                                 0x1
#define _PORTC_RC1_SIZE                                     0x1
#define _PORTC_RC1_LENGTH                                   0x1
#define _PORTC_RC1_MASK                                     0x2
#define _PORTC_RC2_POSN                                     0x2
#define _PORTC_RC2_POSITION                                 0x2
#define _PORTC_RC2_SIZE                                     0x1
#define _PORTC_RC2_LENGTH                                   0x1
#define _PORTC_RC2_MASK                                     0x4
#define _PORTC_RC3_POSN                                     0x3
#define _PORTC_RC3_POSITION                                 0x3
#define _PORTC_RC3_SIZE                                     0x1
#define _PORTC_RC3_LENGTH                                   0x1
#define _PORTC_RC3_MASK                                     0x8
#define _PORTC_RC4_POSN                                     0x4
#define _PORTC_RC4_POSITION                                 0x4
#define _PORTC_RC4_SIZE                                     0x1
#define _PORTC_RC4_LENGTH                                   0x1
#define _PORTC_RC4_MASK                                     0x10
#define _PORTC_RC5_POSN                                     0x5
#define _PORTC_RC5_POSITION                                 0x5
#define _PORTC_RC5_SIZE                                     0x1
#define _PORTC_RC5_LENGTH                                   0x1
#define _PORTC_RC5_MASK                                     0x20

// Register: TRISA
#define TRISA TRISA
extern volatile unsigned char           TRISA               __at(0x012);
#ifndef _LIB_BUILD
asm("TRISA equ 012h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISA0                 :1;
        unsigned TRISA1                 :1;
        unsigned TRISA2                 :1;
        unsigned                        :1;
        unsigned TRISA4                 :1;
        unsigned TRISA5                 :1;
    };
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits __at(0x012);
// bitfield macros
#define _TRISA_TRISA0_POSN                                  0x0
#define _TRISA_TRISA0_POSITION                              0x0
#define _TRISA_TRISA0_SIZE                                  0x1
#define _TRISA_TRISA0_LENGTH                                0x1
#define _TRISA_TRISA0_MASK                                  0x1
#define _TRISA_TRISA1_POSN                                  0x1
#define _TRISA_TRISA1_POSITION                              0x1
#define _TRISA_TRISA1_SIZE                                  0x1
#define _TRISA_TRISA1_LENGTH                                0x1
#define _TRISA_TRISA1_MASK                                  0x2
#define _TRISA_TRISA2_POSN                                  0x2
#define _TRISA_TRISA2_POSITION                              0x2
#define _TRISA_TRISA2_SIZE                                  0x1
#define _TRISA_TRISA2_LENGTH                                0x1
#define _TRISA_TRISA2_MASK                                  0x4
#define _TRISA_TRISA4_POSN                                  0x4
#define _TRISA_TRISA4_POSITION                              0x4
#define _TRISA_TRISA4_SIZE                                  0x1
#define _TRISA_TRISA4_LENGTH                                0x1
#define _TRISA_TRISA4_MASK                                  0x10
#define _TRISA_TRISA5_POSN                                  0x5
#define _TRISA_TRISA5_POSITION                              0x5
#define _TRISA_TRISA5_SIZE                                  0x1
#define _TRISA_TRISA5_LENGTH                                0x1
#define _TRISA_TRISA5_MASK                                  0x20

// Register: TRISC
#define TRISC TRISC
extern volatile unsigned char           TRISC               __at(0x014);
#ifndef _LIB_BUILD
asm("TRISC equ 014h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISC0                 :1;
        unsigned TRISC1                 :1;
        unsigned TRISC2                 :1;
        unsigned TRISC3                 :1;
        unsigned TRISC4                 :1;
        unsigned TRISC5                 :1;
    };
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits __at(0x014);
// bitfield macros
#define _TRISC_TRISC0_POSN                                  0x0
#define _TRISC_TRISC0_POSITION                              0x0
#define _TRISC_TRISC0_SIZE                                  0x1
#define _TRISC_TRISC0_LENGTH                                0x1
#define _TRISC_TRISC0_MASK                                  0x1
#define _TRISC_TRISC1_POSN                                  0x1
#define _TRISC_TRISC1_POSITION                              0x1
#define _TRISC_TRISC1_SIZE                                  0x1
#define _TRISC_TRISC1_LENGTH                                0x1
#define _TRISC_TRISC1_MASK                                  0x2
#define _TRISC_TRISC2_POSN                                  0x2
#define _TRISC_TRISC2_POSITION                              0x2
#define _TRISC_TRISC2_SIZE                                  0x1
#define _TRISC_TRISC2_LENGTH                                0x1
#define _TRISC_TRISC2_MASK                                  0x4
#define _TRISC_TRISC3_POSN                                  0x3
#define _TRISC_TRISC3_POSITION                              0x3
#define _TRISC_TRISC3_SIZE                                  0x1
#define _TRISC_TRISC3_LENGTH                                0x1
#define _TRISC_TRISC3_MASK                                  0x8
#define _TRISC_TRISC4_POSN                                  0x4
#define _TRISC_TRISC4_POSITION                              0x4
#define _TRISC_TRISC4_SIZE                                  0x1
#define _TRISC_TRISC4_LENGTH                                0x1
#define _TRISC_TRISC4_MASK                                  0x10
#define _TRISC_TRISC5_POSN                                  0x5
#define _TRISC_TRISC5_POSITION                              0x5
#define _TRISC_TRISC5_SIZE                                  0x1
#define _TRISC_TRISC5_LENGTH                                0x1
#define _TRISC_TRISC5_MASK                                  0x20

// Register: LATA
#define LATA LATA
extern volatile unsigned char           LATA                __at(0x018);
#ifndef _LIB_BUILD
asm("LATA equ 018h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATA0                  :1;
        unsigned LATA1                  :1;
        unsigned LATA2                  :1;
        unsigned                        :1;
        unsigned LATA4                  :1;
        unsigned LATA5                  :1;
    };
} LATAbits_t;
extern volatile LATAbits_t LATAbits __at(0x018);
// bitfield macros
#define _LATA_LATA0_POSN                                    0x0
#define _LATA_LATA0_POSITION                                0x0
#define _LATA_LATA0_SIZE                                    0x1
#define _LATA_LATA0_LENGTH                                  0x1
#define _LATA_LATA0_MASK                                    0x1
#define _LATA_LATA1_POSN                                    0x1
#define _LATA_LATA1_POSITION                                0x1
#define _LATA_LATA1_SIZE                                    0x1
#define _LATA_LATA1_LENGTH                                  0x1
#define _LATA_LATA1_MASK                                    0x2
#define _LATA_LATA2_POSN                                    0x2
#define _LATA_LATA2_POSITION                                0x2
#define _LATA_LATA2_SIZE                                    0x1
#define _LATA_LATA2_LENGTH                                  0x1
#define _LATA_LATA2_MASK                                    0x4
#define _LATA_LATA4_POSN                                    0x4
#define _LATA_LATA4_POSITION                                0x4
#define _LATA_LATA4_SIZE                                    0x1
#define _LATA_LATA4_LENGTH                                  0x1
#define _LATA_LATA4_MASK                                    0x10
#define _LATA_LATA5_POSN                                    0x5
#define _LATA_LATA5_POSITION                                0x5
#define _LATA_LATA5_SIZE                                    0x1
#define _LATA_LATA5_LENGTH                                  0x1
#define _LATA_LATA5_MASK                                    0x20

// Register: LATC
#define LATC LATC
extern volatile unsigned char           LATC                __at(0x01A);
#ifndef _LIB_BUILD
asm("LATC equ 01Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATC0                  :1;
        unsigned LATC1                  :1;
        unsigned LATC2                  :1;
        unsigned LATC3                  :1;
        unsigned LATC4                  :1;
        unsigned LATC5                  :1;
    };
} LATCbits_t;
extern volatile LATCbits_t LATCbits __at(0x01A);
// bitfield macros
#define _LATC_LATC0_POSN                                    0x0
#define _LATC_LATC0_POSITION                                0x0
#define _LATC_LATC0_SIZE                                    0x1
#define _LATC_LATC0_LENGTH                                  0x1
#define _LATC_LATC0_MASK                                    0x1
#define _LATC_LATC1_POSN                                    0x1
#define _LATC_LATC1_POSITION                                0x1
#define _LATC_LATC1_SIZE                                    0x1
#define _LATC_LATC1_LENGTH                                  0x1
#define _LATC_LATC1_MASK                                    0x2
#define _LATC_LATC2_POSN                                    0x2
#define _LATC_LATC2_POSITION                                0x2
#define _LATC_LATC2_SIZE                                    0x1
#define _LATC_LATC2_LENGTH                                  0x1
#define _LATC_LATC2_MASK                                    0x4
#define _LATC_LATC3_POSN                                    0x3
#define _LATC_LATC3_POSITION                                0x3
#define _LATC_LATC3_SIZE                                    0x1
#define _LATC_LATC3_LENGTH                                  0x1
#define _LATC_LATC3_MASK                                    0x8
#define _LATC_LATC4_POSN                                    0x4
#define _LATC_LATC4_POSITION                                0x4
#define _LATC_LATC4_SIZE                                    0x1
#define _LATC_LATC4_LENGTH                                  0x1
#define _LATC_LATC4_MASK                                    0x10
#define _LATC_LATC5_POSN                                    0x5
#define _LATC_LATC5_POSITION                                0x5
#define _LATC_LATC5_SIZE                                    0x1
#define _LATC_LATC5_LENGTH                                  0x1
#define _LATC_LATC5_MASK                                    0x20

// Register: PIR0
#define PIR0 PIR0
extern volatile unsigned char           PIR0                __at(0x08C);
#ifndef _LIB_BUILD
asm("PIR0 equ 08Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTF                   :1;
        unsigned                        :3;
        unsigned IOCIF                  :1;
        unsigned TMR0IF                 :1;
    };
} PIR0bits_t;
extern volatile PIR0bits_t PIR0bits __at(0x08C);
// bitfield macros
#define _PIR0_INTF_POSN                                     0x0
#define _PIR0_INTF_POSITION                                 0x0
#define _PIR0_INTF_SIZE                                     0x1
#define _PIR0_INTF_LENGTH                                   0x1
#define _PIR0_INTF_MASK                                     0x1
#define _PIR0_IOCIF_POSN                                    0x4
#define _PIR0_IOCIF_POSITION                                0x4
#define _PIR0_IOCIF_SIZE                                    0x1
#define _PIR0_IOCIF_LENGTH                                  0x1
#define _PIR0_IOCIF_MASK                                    0x10
#define _PIR0_TMR0IF_POSN                                   0x5
#define _PIR0_TMR0IF_POSITION                               0x5
#define _PIR0_TMR0IF_SIZE                                   0x1
#define _PIR0_TMR0IF_LENGTH                                 0x1
#define _PIR0_TMR0IF_MASK                                   0x20

// Register: PIR1
#define PIR1 PIR1
extern volatile unsigned char           PIR1                __at(0x08D);
#ifndef _LIB_BUILD
asm("PIR1 equ 08Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMIF                  :1;
        unsigned CRCIF                  :1;
        unsigned SCANIF                 :1;
        unsigned                        :1;
        unsigned CSWIF                  :1;
        unsigned OSFIF                  :1;
        unsigned TMR1IF                 :1;
        unsigned TMR1GIF                :1;
    };
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits __at(0x08D);
// bitfield macros
#define _PIR1_NVMIF_POSN                                    0x0
#define _PIR1_NVMIF_POSITION                                0x0
#define _PIR1_NVMIF_SIZE                                    0x1
#define _PIR1_NVMIF_LENGTH                                  0x1
#define _PIR1_NVMIF_MASK                                    0x1
#define _PIR1_CRCIF_POSN                                    0x1
#define _PIR1_CRCIF_POSITION                                0x1
#define _PIR1_CRCIF_SIZE                                    0x1
#define _PIR1_CRCIF_LENGTH                                  0x1
#define _PIR1_CRCIF_MASK                                    0x2
#define _PIR1_SCANIF_POSN                                   0x2
#define _PIR1_SCANIF_POSITION                               0x2
#define _PIR1_SCANIF_SIZE                                   0x1
#define _PIR1_SCANIF_LENGTH                                 0x1
#define _PIR1_SCANIF_MASK                                   0x4
#define _PIR1_CSWIF_POSN                                    0x4
#define _PIR1_CSWIF_POSITION                                0x4
#define _PIR1_CSWIF_SIZE                                    0x1
#define _PIR1_CSWIF_LENGTH                                  0x1
#define _PIR1_CSWIF_MASK                                    0x10
#define _PIR1_OSFIF_POSN                                    0x5
#define _PIR1_OSFIF_POSITION                                0x5
#define _PIR1_OSFIF_SIZE                                    0x1
#define _PIR1_OSFIF_LENGTH                                  0x1
#define _PIR1_OSFIF_MASK                                    0x20
#define _PIR1_TMR1IF_POSN                                   0x6
#define _PIR1_TMR1IF_POSITION                               0x6
#define _PIR1_TMR1IF_SIZE                                   0x1
#define _PIR1_TMR1IF_LENGTH                                 0x1
#define _PIR1_TMR1IF_MASK                                   0x40
#define _PIR1_TMR1GIF_POSN                                  0x7
#define _PIR1_TMR1GIF_POSITION                              0x7
#define _PIR1_TMR1GIF_SIZE                                  0x1
#define _PIR1_TMR1GIF_LENGTH                                0x1
#define _PIR1_TMR1GIF_MASK                                  0x80

// Register: PIR2
#define PIR2 PIR2
extern volatile unsigned char           PIR2                __at(0x08E);
#ifndef _LIB_BUILD
asm("PIR2 equ 08Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned TMR2IF                 :1;
        unsigned                        :2;
        unsigned CCP1IF                 :1;
        unsigned CCP2IF                 :1;
    };
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits __at(0x08E);
// bitfield macros
#define _PIR2_TMR2IF_POSN                                   0x2
#define _PIR2_TMR2IF_POSITION                               0x2
#define _PIR2_TMR2IF_SIZE                                   0x1
#define _PIR2_TMR2IF_LENGTH                                 0x1
#define _PIR2_TMR2IF_MASK                                   0x4
#define _PIR2_CCP1IF_POSN                                   0x5
#define _PIR2_CCP1IF_POSITION                               0x5
#define _PIR2_CCP1IF_SIZE                                   0x1
#define _PIR2_CCP1IF_LENGTH                                 0x1
#define _PIR2_CCP1IF_MASK                                   0x20
#define _PIR2_CCP2IF_POSN                                   0x6
#define _PIR2_CCP2IF_POSITION                               0x6
#define _PIR2_CCP2IF_SIZE                                   0x1
#define _PIR2_CCP2IF_LENGTH                                 0x1
#define _PIR2_CCP2IF_MASK                                   0x40

// Register: PIR3
#define PIR3 PIR3
extern volatile unsigned char           PIR3                __at(0x08F);
#ifndef _LIB_BUILD
asm("PIR3 equ 08Fh");
#endif

// Register: PIR4
#define PIR4 PIR4
extern volatile unsigned char           PIR4                __at(0x090);
#ifndef _LIB_BUILD
asm("PIR4 equ 090h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned CLC1IF                 :1;
        unsigned CLC2IF                 :1;
        unsigned CLC3IF                 :1;
        unsigned CLC4IF                 :1;
        unsigned TX1IF                  :1;
        unsigned RC1IF                  :1;
    };
} PIR4bits_t;
extern volatile PIR4bits_t PIR4bits __at(0x090);
// bitfield macros
#define _PIR4_CLC1IF_POSN                                   0x2
#define _PIR4_CLC1IF_POSITION                               0x2
#define _PIR4_CLC1IF_SIZE                                   0x1
#define _PIR4_CLC1IF_LENGTH                                 0x1
#define _PIR4_CLC1IF_MASK                                   0x4
#define _PIR4_CLC2IF_POSN                                   0x3
#define _PIR4_CLC2IF_POSITION                               0x3
#define _PIR4_CLC2IF_SIZE                                   0x1
#define _PIR4_CLC2IF_LENGTH                                 0x1
#define _PIR4_CLC2IF_MASK                                   0x8
#define _PIR4_CLC3IF_POSN                                   0x4
#define _PIR4_CLC3IF_POSITION                               0x4
#define _PIR4_CLC3IF_SIZE                                   0x1
#define _PIR4_CLC3IF_LENGTH                                 0x1
#define _PIR4_CLC3IF_MASK                                   0x10
#define _PIR4_CLC4IF_POSN                                   0x5
#define _PIR4_CLC4IF_POSITION                               0x5
#define _PIR4_CLC4IF_SIZE                                   0x1
#define _PIR4_CLC4IF_LENGTH                                 0x1
#define _PIR4_CLC4IF_MASK                                   0x20
#define _PIR4_TX1IF_POSN                                    0x6
#define _PIR4_TX1IF_POSITION                                0x6
#define _PIR4_TX1IF_SIZE                                    0x1
#define _PIR4_TX1IF_LENGTH                                  0x1
#define _PIR4_TX1IF_MASK                                    0x40
#define _PIR4_RC1IF_POSN                                    0x7
#define _PIR4_RC1IF_POSITION                                0x7
#define _PIR4_RC1IF_SIZE                                    0x1
#define _PIR4_RC1IF_LENGTH                                  0x1
#define _PIR4_RC1IF_MASK                                    0x80

// Register: PIR5
#define PIR5 PIR5
extern volatile unsigned char           PIR5                __at(0x091);
#ifndef _LIB_BUILD
asm("PIR5 equ 091h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned SSP1IF                 :1;
        unsigned BCL1IF                 :1;
        unsigned                        :2;
        unsigned CM1IF                  :1;
        unsigned CM2IF                  :1;
    };
} PIR5bits_t;
extern volatile PIR5bits_t PIR5bits __at(0x091);
// bitfield macros
#define _PIR5_SSP1IF_POSN                                   0x2
#define _PIR5_SSP1IF_POSITION                               0x2
#define _PIR5_SSP1IF_SIZE                                   0x1
#define _PIR5_SSP1IF_LENGTH                                 0x1
#define _PIR5_SSP1IF_MASK                                   0x4
#define _PIR5_BCL1IF_POSN                                   0x3
#define _PIR5_BCL1IF_POSITION                               0x3
#define _PIR5_BCL1IF_SIZE                                   0x1
#define _PIR5_BCL1IF_LENGTH                                 0x1
#define _PIR5_BCL1IF_MASK                                   0x8
#define _PIR5_CM1IF_POSN                                    0x6
#define _PIR5_CM1IF_POSITION                                0x6
#define _PIR5_CM1IF_SIZE                                    0x1
#define _PIR5_CM1IF_LENGTH                                  0x1
#define _PIR5_CM1IF_MASK                                    0x40
#define _PIR5_CM2IF_POSN                                    0x7
#define _PIR5_CM2IF_POSITION                                0x7
#define _PIR5_CM2IF_SIZE                                    0x1
#define _PIR5_CM2IF_LENGTH                                  0x1
#define _PIR5_CM2IF_MASK                                    0x80

// Register: PIR6
#define PIR6 PIR6
extern volatile unsigned char           PIR6                __at(0x092);
#ifndef _LIB_BUILD
asm("PIR6 equ 092h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADIF                   :1;
        unsigned ADTIF                  :1;
    };
} PIR6bits_t;
extern volatile PIR6bits_t PIR6bits __at(0x092);
// bitfield macros
#define _PIR6_ADIF_POSN                                     0x0
#define _PIR6_ADIF_POSITION                                 0x0
#define _PIR6_ADIF_SIZE                                     0x1
#define _PIR6_ADIF_LENGTH                                   0x1
#define _PIR6_ADIF_MASK                                     0x1
#define _PIR6_ADTIF_POSN                                    0x1
#define _PIR6_ADTIF_POSITION                                0x1
#define _PIR6_ADTIF_SIZE                                    0x1
#define _PIR6_ADTIF_LENGTH                                  0x1
#define _PIR6_ADTIF_MASK                                    0x2

// Register: PIR7
#define PIR7 PIR7
extern volatile unsigned char           PIR7                __at(0x093);
#ifndef _LIB_BUILD
asm("PIR7 equ 093h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLB1IF0                :1;
        unsigned CLB1IF1                :1;
        unsigned CLB1IF2                :1;
        unsigned CLB1IF3                :1;
    };
} PIR7bits_t;
extern volatile PIR7bits_t PIR7bits __at(0x093);
// bitfield macros
#define _PIR7_CLB1IF0_POSN                                  0x0
#define _PIR7_CLB1IF0_POSITION                              0x0
#define _PIR7_CLB1IF0_SIZE                                  0x1
#define _PIR7_CLB1IF0_LENGTH                                0x1
#define _PIR7_CLB1IF0_MASK                                  0x1
#define _PIR7_CLB1IF1_POSN                                  0x1
#define _PIR7_CLB1IF1_POSITION                              0x1
#define _PIR7_CLB1IF1_SIZE                                  0x1
#define _PIR7_CLB1IF1_LENGTH                                0x1
#define _PIR7_CLB1IF1_MASK                                  0x2
#define _PIR7_CLB1IF2_POSN                                  0x2
#define _PIR7_CLB1IF2_POSITION                              0x2
#define _PIR7_CLB1IF2_SIZE                                  0x1
#define _PIR7_CLB1IF2_LENGTH                                0x1
#define _PIR7_CLB1IF2_MASK                                  0x4
#define _PIR7_CLB1IF3_POSN                                  0x3
#define _PIR7_CLB1IF3_POSITION                              0x3
#define _PIR7_CLB1IF3_SIZE                                  0x1
#define _PIR7_CLB1IF3_LENGTH                                0x1
#define _PIR7_CLB1IF3_MASK                                  0x8

// Register: PIE0
#define PIE0 PIE0
extern volatile unsigned char           PIE0                __at(0x096);
#ifndef _LIB_BUILD
asm("PIE0 equ 096h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTE                   :1;
        unsigned                        :3;
        unsigned IOCIE                  :1;
        unsigned TMR0IE                 :1;
    };
} PIE0bits_t;
extern volatile PIE0bits_t PIE0bits __at(0x096);
// bitfield macros
#define _PIE0_INTE_POSN                                     0x0
#define _PIE0_INTE_POSITION                                 0x0
#define _PIE0_INTE_SIZE                                     0x1
#define _PIE0_INTE_LENGTH                                   0x1
#define _PIE0_INTE_MASK                                     0x1
#define _PIE0_IOCIE_POSN                                    0x4
#define _PIE0_IOCIE_POSITION                                0x4
#define _PIE0_IOCIE_SIZE                                    0x1
#define _PIE0_IOCIE_LENGTH                                  0x1
#define _PIE0_IOCIE_MASK                                    0x10
#define _PIE0_TMR0IE_POSN                                   0x5
#define _PIE0_TMR0IE_POSITION                               0x5
#define _PIE0_TMR0IE_SIZE                                   0x1
#define _PIE0_TMR0IE_LENGTH                                 0x1
#define _PIE0_TMR0IE_MASK                                   0x20

// Register: PIE1
#define PIE1 PIE1
extern volatile unsigned char           PIE1                __at(0x097);
#ifndef _LIB_BUILD
asm("PIE1 equ 097h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMIE                  :1;
        unsigned CRCIE                  :1;
        unsigned SCANIE                 :1;
        unsigned                        :1;
        unsigned CSWIE                  :1;
        unsigned OSFIE                  :1;
        unsigned TMR1IE                 :1;
        unsigned TMR1GIE                :1;
    };
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits __at(0x097);
// bitfield macros
#define _PIE1_NVMIE_POSN                                    0x0
#define _PIE1_NVMIE_POSITION                                0x0
#define _PIE1_NVMIE_SIZE                                    0x1
#define _PIE1_NVMIE_LENGTH                                  0x1
#define _PIE1_NVMIE_MASK                                    0x1
#define _PIE1_CRCIE_POSN                                    0x1
#define _PIE1_CRCIE_POSITION                                0x1
#define _PIE1_CRCIE_SIZE                                    0x1
#define _PIE1_CRCIE_LENGTH                                  0x1
#define _PIE1_CRCIE_MASK                                    0x2
#define _PIE1_SCANIE_POSN                                   0x2
#define _PIE1_SCANIE_POSITION                               0x2
#define _PIE1_SCANIE_SIZE                                   0x1
#define _PIE1_SCANIE_LENGTH                                 0x1
#define _PIE1_SCANIE_MASK                                   0x4
#define _PIE1_CSWIE_POSN                                    0x4
#define _PIE1_CSWIE_POSITION                                0x4
#define _PIE1_CSWIE_SIZE                                    0x1
#define _PIE1_CSWIE_LENGTH                                  0x1
#define _PIE1_CSWIE_MASK                                    0x10
#define _PIE1_OSFIE_POSN                                    0x5
#define _PIE1_OSFIE_POSITION                                0x5
#define _PIE1_OSFIE_SIZE                                    0x1
#define _PIE1_OSFIE_LENGTH                                  0x1
#define _PIE1_OSFIE_MASK                                    0x20
#define _PIE1_TMR1IE_POSN                                   0x6
#define _PIE1_TMR1IE_POSITION                               0x6
#define _PIE1_TMR1IE_SIZE                                   0x1
#define _PIE1_TMR1IE_LENGTH                                 0x1
#define _PIE1_TMR1IE_MASK                                   0x40
#define _PIE1_TMR1GIE_POSN                                  0x7
#define _PIE1_TMR1GIE_POSITION                              0x7
#define _PIE1_TMR1GIE_SIZE                                  0x1
#define _PIE1_TMR1GIE_LENGTH                                0x1
#define _PIE1_TMR1GIE_MASK                                  0x80

// Register: PIE2
#define PIE2 PIE2
extern volatile unsigned char           PIE2                __at(0x098);
#ifndef _LIB_BUILD
asm("PIE2 equ 098h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned TMR2IE                 :1;
        unsigned                        :2;
        unsigned CCP1IE                 :1;
        unsigned CCP2IE                 :1;
    };
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits __at(0x098);
// bitfield macros
#define _PIE2_TMR2IE_POSN                                   0x2
#define _PIE2_TMR2IE_POSITION                               0x2
#define _PIE2_TMR2IE_SIZE                                   0x1
#define _PIE2_TMR2IE_LENGTH                                 0x1
#define _PIE2_TMR2IE_MASK                                   0x4
#define _PIE2_CCP1IE_POSN                                   0x5
#define _PIE2_CCP1IE_POSITION                               0x5
#define _PIE2_CCP1IE_SIZE                                   0x1
#define _PIE2_CCP1IE_LENGTH                                 0x1
#define _PIE2_CCP1IE_MASK                                   0x20
#define _PIE2_CCP2IE_POSN                                   0x6
#define _PIE2_CCP2IE_POSITION                               0x6
#define _PIE2_CCP2IE_SIZE                                   0x1
#define _PIE2_CCP2IE_LENGTH                                 0x1
#define _PIE2_CCP2IE_MASK                                   0x40

// Register: PIE3
#define PIE3 PIE3
extern volatile unsigned char           PIE3                __at(0x099);
#ifndef _LIB_BUILD
asm("PIE3 equ 099h");
#endif

// Register: PIE4
#define PIE4 PIE4
extern volatile unsigned char           PIE4                __at(0x09A);
#ifndef _LIB_BUILD
asm("PIE4 equ 09Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned CLC1IE                 :1;
        unsigned CLC2IE                 :1;
        unsigned CLC3IE                 :1;
        unsigned CLC4IE                 :1;
        unsigned TX1IE                  :1;
        unsigned RC1IE                  :1;
    };
} PIE4bits_t;
extern volatile PIE4bits_t PIE4bits __at(0x09A);
// bitfield macros
#define _PIE4_CLC1IE_POSN                                   0x2
#define _PIE4_CLC1IE_POSITION                               0x2
#define _PIE4_CLC1IE_SIZE                                   0x1
#define _PIE4_CLC1IE_LENGTH                                 0x1
#define _PIE4_CLC1IE_MASK                                   0x4
#define _PIE4_CLC2IE_POSN                                   0x3
#define _PIE4_CLC2IE_POSITION                               0x3
#define _PIE4_CLC2IE_SIZE                                   0x1
#define _PIE4_CLC2IE_LENGTH                                 0x1
#define _PIE4_CLC2IE_MASK                                   0x8
#define _PIE4_CLC3IE_POSN                                   0x4
#define _PIE4_CLC3IE_POSITION                               0x4
#define _PIE4_CLC3IE_SIZE                                   0x1
#define _PIE4_CLC3IE_LENGTH                                 0x1
#define _PIE4_CLC3IE_MASK                                   0x10
#define _PIE4_CLC4IE_POSN                                   0x5
#define _PIE4_CLC4IE_POSITION                               0x5
#define _PIE4_CLC4IE_SIZE                                   0x1
#define _PIE4_CLC4IE_LENGTH                                 0x1
#define _PIE4_CLC4IE_MASK                                   0x20
#define _PIE4_TX1IE_POSN                                    0x6
#define _PIE4_TX1IE_POSITION                                0x6
#define _PIE4_TX1IE_SIZE                                    0x1
#define _PIE4_TX1IE_LENGTH                                  0x1
#define _PIE4_TX1IE_MASK                                    0x40
#define _PIE4_RC1IE_POSN                                    0x7
#define _PIE4_RC1IE_POSITION                                0x7
#define _PIE4_RC1IE_SIZE                                    0x1
#define _PIE4_RC1IE_LENGTH                                  0x1
#define _PIE4_RC1IE_MASK                                    0x80

// Register: PIE5
#define PIE5 PIE5
extern volatile unsigned char           PIE5                __at(0x09B);
#ifndef _LIB_BUILD
asm("PIE5 equ 09Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned SSP1IE                 :1;
        unsigned BCL1IE                 :1;
        unsigned                        :2;
        unsigned CM1IE                  :1;
        unsigned CM2IE                  :1;
    };
} PIE5bits_t;
extern volatile PIE5bits_t PIE5bits __at(0x09B);
// bitfield macros
#define _PIE5_SSP1IE_POSN                                   0x2
#define _PIE5_SSP1IE_POSITION                               0x2
#define _PIE5_SSP1IE_SIZE                                   0x1
#define _PIE5_SSP1IE_LENGTH                                 0x1
#define _PIE5_SSP1IE_MASK                                   0x4
#define _PIE5_BCL1IE_POSN                                   0x3
#define _PIE5_BCL1IE_POSITION                               0x3
#define _PIE5_BCL1IE_SIZE                                   0x1
#define _PIE5_BCL1IE_LENGTH                                 0x1
#define _PIE5_BCL1IE_MASK                                   0x8
#define _PIE5_CM1IE_POSN                                    0x6
#define _PIE5_CM1IE_POSITION                                0x6
#define _PIE5_CM1IE_SIZE                                    0x1
#define _PIE5_CM1IE_LENGTH                                  0x1
#define _PIE5_CM1IE_MASK                                    0x40
#define _PIE5_CM2IE_POSN                                    0x7
#define _PIE5_CM2IE_POSITION                                0x7
#define _PIE5_CM2IE_SIZE                                    0x1
#define _PIE5_CM2IE_LENGTH                                  0x1
#define _PIE5_CM2IE_MASK                                    0x80

// Register: PIE6
#define PIE6 PIE6
extern volatile unsigned char           PIE6                __at(0x09C);
#ifndef _LIB_BUILD
asm("PIE6 equ 09Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADIE                   :1;
        unsigned ADTIE                  :1;
    };
} PIE6bits_t;
extern volatile PIE6bits_t PIE6bits __at(0x09C);
// bitfield macros
#define _PIE6_ADIE_POSN                                     0x0
#define _PIE6_ADIE_POSITION                                 0x0
#define _PIE6_ADIE_SIZE                                     0x1
#define _PIE6_ADIE_LENGTH                                   0x1
#define _PIE6_ADIE_MASK                                     0x1
#define _PIE6_ADTIE_POSN                                    0x1
#define _PIE6_ADTIE_POSITION                                0x1
#define _PIE6_ADTIE_SIZE                                    0x1
#define _PIE6_ADTIE_LENGTH                                  0x1
#define _PIE6_ADTIE_MASK                                    0x2

// Register: PIE7
#define PIE7 PIE7
extern volatile unsigned char           PIE7                __at(0x09D);
#ifndef _LIB_BUILD
asm("PIE7 equ 09Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLB1IE0                :1;
        unsigned CLB1IE1                :1;
        unsigned CLB1IE2                :1;
        unsigned CLB1IE3                :1;
    };
} PIE7bits_t;
extern volatile PIE7bits_t PIE7bits __at(0x09D);
// bitfield macros
#define _PIE7_CLB1IE0_POSN                                  0x0
#define _PIE7_CLB1IE0_POSITION                              0x0
#define _PIE7_CLB1IE0_SIZE                                  0x1
#define _PIE7_CLB1IE0_LENGTH                                0x1
#define _PIE7_CLB1IE0_MASK                                  0x1
#define _PIE7_CLB1IE1_POSN                                  0x1
#define _PIE7_CLB1IE1_POSITION                              0x1
#define _PIE7_CLB1IE1_SIZE                                  0x1
#define _PIE7_CLB1IE1_LENGTH                                0x1
#define _PIE7_CLB1IE1_MASK                                  0x2
#define _PIE7_CLB1IE2_POSN                                  0x2
#define _PIE7_CLB1IE2_POSITION                              0x2
#define _PIE7_CLB1IE2_SIZE                                  0x1
#define _PIE7_CLB1IE2_LENGTH                                0x1
#define _PIE7_CLB1IE2_MASK                                  0x4
#define _PIE7_CLB1IE3_POSN                                  0x3
#define _PIE7_CLB1IE3_POSITION                              0x3
#define _PIE7_CLB1IE3_SIZE                                  0x1
#define _PIE7_CLB1IE3_LENGTH                                0x1
#define _PIE7_CLB1IE3_MASK                                  0x8

// Register: PMD0
#define PMD0 PMD0
extern volatile unsigned char           PMD0                __at(0x10C);
#ifndef _LIB_BUILD
asm("PMD0 equ 010Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMMD                  :1;
        unsigned CRCMD                  :1;
        unsigned SCANMD                 :1;
        unsigned SYSCMD                 :1;
        unsigned                        :1;
        unsigned IOCMD                  :1;
        unsigned                        :1;
        unsigned TMR0MD                 :1;
    };
} PMD0bits_t;
extern volatile PMD0bits_t PMD0bits __at(0x10C);
// bitfield macros
#define _PMD0_NVMMD_POSN                                    0x0
#define _PMD0_NVMMD_POSITION                                0x0
#define _PMD0_NVMMD_SIZE                                    0x1
#define _PMD0_NVMMD_LENGTH                                  0x1
#define _PMD0_NVMMD_MASK                                    0x1
#define _PMD0_CRCMD_POSN                                    0x1
#define _PMD0_CRCMD_POSITION                                0x1
#define _PMD0_CRCMD_SIZE                                    0x1
#define _PMD0_CRCMD_LENGTH                                  0x1
#define _PMD0_CRCMD_MASK                                    0x2
#define _PMD0_SCANMD_POSN                                   0x2
#define _PMD0_SCANMD_POSITION                               0x2
#define _PMD0_SCANMD_SIZE                                   0x1
#define _PMD0_SCANMD_LENGTH                                 0x1
#define _PMD0_SCANMD_MASK                                   0x4
#define _PMD0_SYSCMD_POSN                                   0x3
#define _PMD0_SYSCMD_POSITION                               0x3
#define _PMD0_SYSCMD_SIZE                                   0x1
#define _PMD0_SYSCMD_LENGTH                                 0x1
#define _PMD0_SYSCMD_MASK                                   0x8
#define _PMD0_IOCMD_POSN                                    0x5
#define _PMD0_IOCMD_POSITION                                0x5
#define _PMD0_IOCMD_SIZE                                    0x1
#define _PMD0_IOCMD_LENGTH                                  0x1
#define _PMD0_IOCMD_MASK                                    0x20
#define _PMD0_TMR0MD_POSN                                   0x7
#define _PMD0_TMR0MD_POSITION                               0x7
#define _PMD0_TMR0MD_SIZE                                   0x1
#define _PMD0_TMR0MD_LENGTH                                 0x1
#define _PMD0_TMR0MD_MASK                                   0x80

// Register: PMD1
#define PMD1 PMD1
extern volatile unsigned char           PMD1                __at(0x10D);
#ifndef _LIB_BUILD
asm("PMD1 equ 010Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1MD                 :1;
        unsigned                        :1;
        unsigned TMR2MD                 :1;
        unsigned                        :2;
        unsigned CCP1MD                 :1;
        unsigned CCP2MD                 :1;
    };
} PMD1bits_t;
extern volatile PMD1bits_t PMD1bits __at(0x10D);
// bitfield macros
#define _PMD1_TMR1MD_POSN                                   0x0
#define _PMD1_TMR1MD_POSITION                               0x0
#define _PMD1_TMR1MD_SIZE                                   0x1
#define _PMD1_TMR1MD_LENGTH                                 0x1
#define _PMD1_TMR1MD_MASK                                   0x1
#define _PMD1_TMR2MD_POSN                                   0x2
#define _PMD1_TMR2MD_POSITION                               0x2
#define _PMD1_TMR2MD_SIZE                                   0x1
#define _PMD1_TMR2MD_LENGTH                                 0x1
#define _PMD1_TMR2MD_MASK                                   0x4
#define _PMD1_CCP1MD_POSN                                   0x5
#define _PMD1_CCP1MD_POSITION                               0x5
#define _PMD1_CCP1MD_SIZE                                   0x1
#define _PMD1_CCP1MD_LENGTH                                 0x1
#define _PMD1_CCP1MD_MASK                                   0x20
#define _PMD1_CCP2MD_POSN                                   0x6
#define _PMD1_CCP2MD_POSITION                               0x6
#define _PMD1_CCP2MD_SIZE                                   0x1
#define _PMD1_CCP2MD_LENGTH                                 0x1
#define _PMD1_CCP2MD_MASK                                   0x40

// Register: PMD2
#define PMD2 PMD2
extern volatile unsigned char           PMD2                __at(0x10E);
#ifndef _LIB_BUILD
asm("PMD2 equ 010Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned CLC1MD                 :1;
        unsigned CLC2MD                 :1;
        unsigned CLC3MD                 :1;
    };
} PMD2bits_t;
extern volatile PMD2bits_t PMD2bits __at(0x10E);
// bitfield macros
#define _PMD2_CLC1MD_POSN                                   0x5
#define _PMD2_CLC1MD_POSITION                               0x5
#define _PMD2_CLC1MD_SIZE                                   0x1
#define _PMD2_CLC1MD_LENGTH                                 0x1
#define _PMD2_CLC1MD_MASK                                   0x20
#define _PMD2_CLC2MD_POSN                                   0x6
#define _PMD2_CLC2MD_POSITION                               0x6
#define _PMD2_CLC2MD_SIZE                                   0x1
#define _PMD2_CLC2MD_LENGTH                                 0x1
#define _PMD2_CLC2MD_MASK                                   0x40
#define _PMD2_CLC3MD_POSN                                   0x7
#define _PMD2_CLC3MD_POSITION                               0x7
#define _PMD2_CLC3MD_SIZE                                   0x1
#define _PMD2_CLC3MD_LENGTH                                 0x1
#define _PMD2_CLC3MD_MASK                                   0x80

// Register: PMD3
#define PMD3 PMD3
extern volatile unsigned char           PMD3                __at(0x10F);
#ifndef _LIB_BUILD
asm("PMD3 equ 010Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLC4MD                 :1;
        unsigned UART1MD                :1;
        unsigned                        :1;
        unsigned MSSP1MD                :1;
        unsigned                        :1;
        unsigned FVRMD                  :1;
        unsigned CM1MD                  :1;
        unsigned CM2MD                  :1;
    };
} PMD3bits_t;
extern volatile PMD3bits_t PMD3bits __at(0x10F);
// bitfield macros
#define _PMD3_CLC4MD_POSN                                   0x0
#define _PMD3_CLC4MD_POSITION                               0x0
#define _PMD3_CLC4MD_SIZE                                   0x1
#define _PMD3_CLC4MD_LENGTH                                 0x1
#define _PMD3_CLC4MD_MASK                                   0x1
#define _PMD3_UART1MD_POSN                                  0x1
#define _PMD3_UART1MD_POSITION                              0x1
#define _PMD3_UART1MD_SIZE                                  0x1
#define _PMD3_UART1MD_LENGTH                                0x1
#define _PMD3_UART1MD_MASK                                  0x2
#define _PMD3_MSSP1MD_POSN                                  0x3
#define _PMD3_MSSP1MD_POSITION                              0x3
#define _PMD3_MSSP1MD_SIZE                                  0x1
#define _PMD3_MSSP1MD_LENGTH                                0x1
#define _PMD3_MSSP1MD_MASK                                  0x8
#define _PMD3_FVRMD_POSN                                    0x5
#define _PMD3_FVRMD_POSITION                                0x5
#define _PMD3_FVRMD_SIZE                                    0x1
#define _PMD3_FVRMD_LENGTH                                  0x1
#define _PMD3_FVRMD_MASK                                    0x20
#define _PMD3_CM1MD_POSN                                    0x6
#define _PMD3_CM1MD_POSITION                                0x6
#define _PMD3_CM1MD_SIZE                                    0x1
#define _PMD3_CM1MD_LENGTH                                  0x1
#define _PMD3_CM1MD_MASK                                    0x40
#define _PMD3_CM2MD_POSN                                    0x7
#define _PMD3_CM2MD_POSITION                                0x7
#define _PMD3_CM2MD_SIZE                                    0x1
#define _PMD3_CM2MD_LENGTH                                  0x1
#define _PMD3_CM2MD_MASK                                    0x80

// Register: PMD4
#define PMD4 PMD4
extern volatile unsigned char           PMD4                __at(0x110);
#ifndef _LIB_BUILD
asm("PMD4 equ 0110h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADCMD                  :1;
        unsigned DAC1MD                 :1;
        unsigned                        :5;
        unsigned CLBMD                  :1;
    };
} PMD4bits_t;
extern volatile PMD4bits_t PMD4bits __at(0x110);
// bitfield macros
#define _PMD4_ADCMD_POSN                                    0x0
#define _PMD4_ADCMD_POSITION                                0x0
#define _PMD4_ADCMD_SIZE                                    0x1
#define _PMD4_ADCMD_LENGTH                                  0x1
#define _PMD4_ADCMD_MASK                                    0x1
#define _PMD4_DAC1MD_POSN                                   0x1
#define _PMD4_DAC1MD_POSITION                               0x1
#define _PMD4_DAC1MD_SIZE                                   0x1
#define _PMD4_DAC1MD_LENGTH                                 0x1
#define _PMD4_DAC1MD_MASK                                   0x2
#define _PMD4_CLBMD_POSN                                    0x7
#define _PMD4_CLBMD_POSITION                                0x7
#define _PMD4_CLBMD_SIZE                                    0x1
#define _PMD4_CLBMD_LENGTH                                  0x1
#define _PMD4_CLBMD_MASK                                    0x80

// Register: PMD5
#define PMD5 PMD5
extern volatile unsigned char           PMD5                __at(0x111);
#ifndef _LIB_BUILD
asm("PMD5 equ 0111h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PWM1MD                 :1;
        unsigned PWM2MD                 :1;
    };
} PMD5bits_t;
extern volatile PMD5bits_t PMD5bits __at(0x111);
// bitfield macros
#define _PMD5_PWM1MD_POSN                                   0x0
#define _PMD5_PWM1MD_POSITION                               0x0
#define _PMD5_PWM1MD_SIZE                                   0x1
#define _PMD5_PWM1MD_LENGTH                                 0x1
#define _PMD5_PWM1MD_MASK                                   0x1
#define _PMD5_PWM2MD_POSN                                   0x1
#define _PMD5_PWM2MD_POSITION                               0x1
#define _PMD5_PWM2MD_SIZE                                   0x1
#define _PMD5_PWM2MD_LENGTH                                 0x1
#define _PMD5_PWM2MD_MASK                                   0x2

// Register: WDTCON0
#define WDTCON0 WDTCON0
extern volatile unsigned char           WDTCON0             __at(0x18C);
#ifndef _LIB_BUILD
asm("WDTCON0 equ 018Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned PS                     :5;
    };
    struct {
        unsigned SWDTEN                 :1;
        unsigned WDTPS                  :5;
    };
    struct {
        unsigned WDTSEN                 :1;
        unsigned PS0                    :1;
        unsigned PS1                    :1;
        unsigned PS2                    :1;
        unsigned PS3                    :1;
        unsigned PS4                    :1;
    };
    struct {
        unsigned                        :1;
        unsigned WDTPS0                 :1;
        unsigned WDTPS1                 :1;
        unsigned WDTPS2                 :1;
        unsigned WDTPS3                 :1;
        unsigned WDTPS4                 :1;
    };
} WDTCON0bits_t;
extern volatile WDTCON0bits_t WDTCON0bits __at(0x18C);
// bitfield macros
#define _WDTCON0_SEN_POSN                                   0x0
#define _WDTCON0_SEN_POSITION                               0x0
#define _WDTCON0_SEN_SIZE                                   0x1
#define _WDTCON0_SEN_LENGTH                                 0x1
#define _WDTCON0_SEN_MASK                                   0x1
#define _WDTCON0_PS_POSN                                    0x1
#define _WDTCON0_PS_POSITION                                0x1
#define _WDTCON0_PS_SIZE                                    0x5
#define _WDTCON0_PS_LENGTH                                  0x5
#define _WDTCON0_PS_MASK                                    0x3E
#define _WDTCON0_SWDTEN_POSN                                0x0
#define _WDTCON0_SWDTEN_POSITION                            0x0
#define _WDTCON0_SWDTEN_SIZE                                0x1
#define _WDTCON0_SWDTEN_LENGTH                              0x1
#define _WDTCON0_SWDTEN_MASK                                0x1
#define _WDTCON0_WDTPS_POSN                                 0x1
#define _WDTCON0_WDTPS_POSITION                             0x1
#define _WDTCON0_WDTPS_SIZE                                 0x5
#define _WDTCON0_WDTPS_LENGTH                               0x5
#define _WDTCON0_WDTPS_MASK                                 0x3E
#define _WDTCON0_WDTSEN_POSN                                0x0
#define _WDTCON0_WDTSEN_POSITION                            0x0
#define _WDTCON0_WDTSEN_SIZE                                0x1
#define _WDTCON0_WDTSEN_LENGTH                              0x1
#define _WDTCON0_WDTSEN_MASK                                0x1
#define _WDTCON0_PS0_POSN                                   0x1
#define _WDTCON0_PS0_POSITION                               0x1
#define _WDTCON0_PS0_SIZE                                   0x1
#define _WDTCON0_PS0_LENGTH                                 0x1
#define _WDTCON0_PS0_MASK                                   0x2
#define _WDTCON0_PS1_POSN                                   0x2
#define _WDTCON0_PS1_POSITION                               0x2
#define _WDTCON0_PS1_SIZE                                   0x1
#define _WDTCON0_PS1_LENGTH                                 0x1
#define _WDTCON0_PS1_MASK                                   0x4
#define _WDTCON0_PS2_POSN                                   0x3
#define _WDTCON0_PS2_POSITION                               0x3
#define _WDTCON0_PS2_SIZE                                   0x1
#define _WDTCON0_PS2_LENGTH                                 0x1
#define _WDTCON0_PS2_MASK                                   0x8
#define _WDTCON0_PS3_POSN                                   0x4
#define _WDTCON0_PS3_POSITION                               0x4
#define _WDTCON0_PS3_SIZE                                   0x1
#define _WDTCON0_PS3_LENGTH                                 0x1
#define _WDTCON0_PS3_MASK                                   0x10
#define _WDTCON0_PS4_POSN                                   0x5
#define _WDTCON0_PS4_POSITION                               0x5
#define _WDTCON0_PS4_SIZE                                   0x1
#define _WDTCON0_PS4_LENGTH                                 0x1
#define _WDTCON0_PS4_MASK                                   0x20
#define _WDTCON0_WDTPS0_POSN                                0x1
#define _WDTCON0_WDTPS0_POSITION                            0x1
#define _WDTCON0_WDTPS0_SIZE                                0x1
#define _WDTCON0_WDTPS0_LENGTH                              0x1
#define _WDTCON0_WDTPS0_MASK                                0x2
#define _WDTCON0_WDTPS1_POSN                                0x2
#define _WDTCON0_WDTPS1_POSITION                            0x2
#define _WDTCON0_WDTPS1_SIZE                                0x1
#define _WDTCON0_WDTPS1_LENGTH                              0x1
#define _WDTCON0_WDTPS1_MASK                                0x4
#define _WDTCON0_WDTPS2_POSN                                0x3
#define _WDTCON0_WDTPS2_POSITION                            0x3
#define _WDTCON0_WDTPS2_SIZE                                0x1
#define _WDTCON0_WDTPS2_LENGTH                              0x1
#define _WDTCON0_WDTPS2_MASK                                0x8
#define _WDTCON0_WDTPS3_POSN                                0x4
#define _WDTCON0_WDTPS3_POSITION                            0x4
#define _WDTCON0_WDTPS3_SIZE                                0x1
#define _WDTCON0_WDTPS3_LENGTH                              0x1
#define _WDTCON0_WDTPS3_MASK                                0x10
#define _WDTCON0_WDTPS4_POSN                                0x5
#define _WDTCON0_WDTPS4_POSITION                            0x5
#define _WDTCON0_WDTPS4_SIZE                                0x1
#define _WDTCON0_WDTPS4_LENGTH                              0x1
#define _WDTCON0_WDTPS4_MASK                                0x20

// Register: WDTCON1
#define WDTCON1 WDTCON1
extern volatile unsigned char           WDTCON1             __at(0x18D);
#ifndef _LIB_BUILD
asm("WDTCON1 equ 018Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WINDOW                 :3;
        unsigned                        :1;
        unsigned CS                     :3;
    };
    struct {
        unsigned WINDOW0                :1;
        unsigned WINDOW1                :1;
        unsigned WINDOW2                :1;
        unsigned                        :1;
        unsigned WDTCS                  :3;
    };
    struct {
        unsigned WDTWINDOW              :3;
        unsigned                        :1;
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
    };
    struct {
        unsigned WDTWINDOW0             :1;
        unsigned WDTWINDOW1             :1;
        unsigned WDTWINDOW2             :1;
        unsigned                        :1;
        unsigned WDTCS0                 :1;
        unsigned WDTCS1                 :1;
        unsigned WDTCS2                 :1;
    };
} WDTCON1bits_t;
extern volatile WDTCON1bits_t WDTCON1bits __at(0x18D);
// bitfield macros
#define _WDTCON1_WINDOW_POSN                                0x0
#define _WDTCON1_WINDOW_POSITION                            0x0
#define _WDTCON1_WINDOW_SIZE                                0x3
#define _WDTCON1_WINDOW_LENGTH                              0x3
#define _WDTCON1_WINDOW_MASK                                0x7
#define _WDTCON1_CS_POSN                                    0x4
#define _WDTCON1_CS_POSITION                                0x4
#define _WDTCON1_CS_SIZE                                    0x3
#define _WDTCON1_CS_LENGTH                                  0x3
#define _WDTCON1_CS_MASK                                    0x70
#define _WDTCON1_WINDOW0_POSN                               0x0
#define _WDTCON1_WINDOW0_POSITION                           0x0
#define _WDTCON1_WINDOW0_SIZE                               0x1
#define _WDTCON1_WINDOW0_LENGTH                             0x1
#define _WDTCON1_WINDOW0_MASK                               0x1
#define _WDTCON1_WINDOW1_POSN                               0x1
#define _WDTCON1_WINDOW1_POSITION                           0x1
#define _WDTCON1_WINDOW1_SIZE                               0x1
#define _WDTCON1_WINDOW1_LENGTH                             0x1
#define _WDTCON1_WINDOW1_MASK                               0x2
#define _WDTCON1_WINDOW2_POSN                               0x2
#define _WDTCON1_WINDOW2_POSITION                           0x2
#define _WDTCON1_WINDOW2_SIZE                               0x1
#define _WDTCON1_WINDOW2_LENGTH                             0x1
#define _WDTCON1_WINDOW2_MASK                               0x4
#define _WDTCON1_WDTCS_POSN                                 0x4
#define _WDTCON1_WDTCS_POSITION                             0x4
#define _WDTCON1_WDTCS_SIZE                                 0x3
#define _WDTCON1_WDTCS_LENGTH                               0x3
#define _WDTCON1_WDTCS_MASK                                 0x70
#define _WDTCON1_WDTWINDOW_POSN                             0x0
#define _WDTCON1_WDTWINDOW_POSITION                         0x0
#define _WDTCON1_WDTWINDOW_SIZE                             0x3
#define _WDTCON1_WDTWINDOW_LENGTH                           0x3
#define _WDTCON1_WDTWINDOW_MASK                             0x7
#define _WDTCON1_CS0_POSN                                   0x4
#define _WDTCON1_CS0_POSITION                               0x4
#define _WDTCON1_CS0_SIZE                                   0x1
#define _WDTCON1_CS0_LENGTH                                 0x1
#define _WDTCON1_CS0_MASK                                   0x10
#define _WDTCON1_CS1_POSN                                   0x5
#define _WDTCON1_CS1_POSITION                               0x5
#define _WDTCON1_CS1_SIZE                                   0x1
#define _WDTCON1_CS1_LENGTH                                 0x1
#define _WDTCON1_CS1_MASK                                   0x20
#define _WDTCON1_CS2_POSN                                   0x6
#define _WDTCON1_CS2_POSITION                               0x6
#define _WDTCON1_CS2_SIZE                                   0x1
#define _WDTCON1_CS2_LENGTH                                 0x1
#define _WDTCON1_CS2_MASK                                   0x40
#define _WDTCON1_WDTWINDOW0_POSN                            0x0
#define _WDTCON1_WDTWINDOW0_POSITION                        0x0
#define _WDTCON1_WDTWINDOW0_SIZE                            0x1
#define _WDTCON1_WDTWINDOW0_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW0_MASK                            0x1
#define _WDTCON1_WDTWINDOW1_POSN                            0x1
#define _WDTCON1_WDTWINDOW1_POSITION                        0x1
#define _WDTCON1_WDTWINDOW1_SIZE                            0x1
#define _WDTCON1_WDTWINDOW1_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW1_MASK                            0x2
#define _WDTCON1_WDTWINDOW2_POSN                            0x2
#define _WDTCON1_WDTWINDOW2_POSITION                        0x2
#define _WDTCON1_WDTWINDOW2_SIZE                            0x1
#define _WDTCON1_WDTWINDOW2_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW2_MASK                            0x4
#define _WDTCON1_WDTCS0_POSN                                0x4
#define _WDTCON1_WDTCS0_POSITION                            0x4
#define _WDTCON1_WDTCS0_SIZE                                0x1
#define _WDTCON1_WDTCS0_LENGTH                              0x1
#define _WDTCON1_WDTCS0_MASK                                0x10
#define _WDTCON1_WDTCS1_POSN                                0x5
#define _WDTCON1_WDTCS1_POSITION                            0x5
#define _WDTCON1_WDTCS1_SIZE                                0x1
#define _WDTCON1_WDTCS1_LENGTH                              0x1
#define _WDTCON1_WDTCS1_MASK                                0x20
#define _WDTCON1_WDTCS2_POSN                                0x6
#define _WDTCON1_WDTCS2_POSITION                            0x6
#define _WDTCON1_WDTCS2_SIZE                                0x1
#define _WDTCON1_WDTCS2_LENGTH                              0x1
#define _WDTCON1_WDTCS2_MASK                                0x40

// Register: WDTPS
#define WDTPS WDTPS
extern volatile unsigned short          WDTPS               __at(0x18E);
#ifndef _LIB_BUILD
asm("WDTPS equ 018Eh");
#endif

// Register: WDTPSL
#define WDTPSL WDTPSL
extern volatile unsigned char           WDTPSL              __at(0x18E);
#ifndef _LIB_BUILD
asm("WDTPSL equ 018Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNTL                 :8;
    };
    struct {
        unsigned WDTPSCNTL              :8;
    };
    struct {
        unsigned PSCNT0                 :1;
        unsigned PSCNT1                 :1;
        unsigned PSCNT2                 :1;
        unsigned PSCNT3                 :1;
        unsigned PSCNT4                 :1;
        unsigned PSCNT5                 :1;
        unsigned PSCNT6                 :1;
        unsigned PSCNT7                 :1;
    };
} WDTPSLbits_t;
extern volatile WDTPSLbits_t WDTPSLbits __at(0x18E);
// bitfield macros
#define _WDTPSL_PSCNTL_POSN                                 0x0
#define _WDTPSL_PSCNTL_POSITION                             0x0
#define _WDTPSL_PSCNTL_SIZE                                 0x8
#define _WDTPSL_PSCNTL_LENGTH                               0x8
#define _WDTPSL_PSCNTL_MASK                                 0xFF
#define _WDTPSL_WDTPSCNTL_POSN                              0x0
#define _WDTPSL_WDTPSCNTL_POSITION                          0x0
#define _WDTPSL_WDTPSCNTL_SIZE                              0x8
#define _WDTPSL_WDTPSCNTL_LENGTH                            0x8
#define _WDTPSL_WDTPSCNTL_MASK                              0xFF
#define _WDTPSL_PSCNT0_POSN                                 0x0
#define _WDTPSL_PSCNT0_POSITION                             0x0
#define _WDTPSL_PSCNT0_SIZE                                 0x1
#define _WDTPSL_PSCNT0_LENGTH                               0x1
#define _WDTPSL_PSCNT0_MASK                                 0x1
#define _WDTPSL_PSCNT1_POSN                                 0x1
#define _WDTPSL_PSCNT1_POSITION                             0x1
#define _WDTPSL_PSCNT1_SIZE                                 0x1
#define _WDTPSL_PSCNT1_LENGTH                               0x1
#define _WDTPSL_PSCNT1_MASK                                 0x2
#define _WDTPSL_PSCNT2_POSN                                 0x2
#define _WDTPSL_PSCNT2_POSITION                             0x2
#define _WDTPSL_PSCNT2_SIZE                                 0x1
#define _WDTPSL_PSCNT2_LENGTH                               0x1
#define _WDTPSL_PSCNT2_MASK                                 0x4
#define _WDTPSL_PSCNT3_POSN                                 0x3
#define _WDTPSL_PSCNT3_POSITION                             0x3
#define _WDTPSL_PSCNT3_SIZE                                 0x1
#define _WDTPSL_PSCNT3_LENGTH                               0x1
#define _WDTPSL_PSCNT3_MASK                                 0x8
#define _WDTPSL_PSCNT4_POSN                                 0x4
#define _WDTPSL_PSCNT4_POSITION                             0x4
#define _WDTPSL_PSCNT4_SIZE                                 0x1
#define _WDTPSL_PSCNT4_LENGTH                               0x1
#define _WDTPSL_PSCNT4_MASK                                 0x10
#define _WDTPSL_PSCNT5_POSN                                 0x5
#define _WDTPSL_PSCNT5_POSITION                             0x5
#define _WDTPSL_PSCNT5_SIZE                                 0x1
#define _WDTPSL_PSCNT5_LENGTH                               0x1
#define _WDTPSL_PSCNT5_MASK                                 0x20
#define _WDTPSL_PSCNT6_POSN                                 0x6
#define _WDTPSL_PSCNT6_POSITION                             0x6
#define _WDTPSL_PSCNT6_SIZE                                 0x1
#define _WDTPSL_PSCNT6_LENGTH                               0x1
#define _WDTPSL_PSCNT6_MASK                                 0x40
#define _WDTPSL_PSCNT7_POSN                                 0x7
#define _WDTPSL_PSCNT7_POSITION                             0x7
#define _WDTPSL_PSCNT7_SIZE                                 0x1
#define _WDTPSL_PSCNT7_LENGTH                               0x1
#define _WDTPSL_PSCNT7_MASK                                 0x80

// Register: WDTPSH
#define WDTPSH WDTPSH
extern volatile unsigned char           WDTPSH              __at(0x18F);
#ifndef _LIB_BUILD
asm("WDTPSH equ 018Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNTH                 :8;
    };
    struct {
        unsigned WDTPSCNTH              :8;
    };
    struct {
        unsigned PSCNT8                 :1;
        unsigned PSCNT9                 :1;
        unsigned PSCNT10                :1;
        unsigned PSCNT11                :1;
        unsigned PSCNT12                :1;
        unsigned PSCNT13                :1;
        unsigned PSCNT14                :1;
        unsigned PSCNT15                :1;
    };
} WDTPSHbits_t;
extern volatile WDTPSHbits_t WDTPSHbits __at(0x18F);
// bitfield macros
#define _WDTPSH_PSCNTH_POSN                                 0x0
#define _WDTPSH_PSCNTH_POSITION                             0x0
#define _WDTPSH_PSCNTH_SIZE                                 0x8
#define _WDTPSH_PSCNTH_LENGTH                               0x8
#define _WDTPSH_PSCNTH_MASK                                 0xFF
#define _WDTPSH_WDTPSCNTH_POSN                              0x0
#define _WDTPSH_WDTPSCNTH_POSITION                          0x0
#define _WDTPSH_WDTPSCNTH_SIZE                              0x8
#define _WDTPSH_WDTPSCNTH_LENGTH                            0x8
#define _WDTPSH_WDTPSCNTH_MASK                              0xFF
#define _WDTPSH_PSCNT8_POSN                                 0x0
#define _WDTPSH_PSCNT8_POSITION                             0x0
#define _WDTPSH_PSCNT8_SIZE                                 0x1
#define _WDTPSH_PSCNT8_LENGTH                               0x1
#define _WDTPSH_PSCNT8_MASK                                 0x1
#define _WDTPSH_PSCNT9_POSN                                 0x1
#define _WDTPSH_PSCNT9_POSITION                             0x1
#define _WDTPSH_PSCNT9_SIZE                                 0x1
#define _WDTPSH_PSCNT9_LENGTH                               0x1
#define _WDTPSH_PSCNT9_MASK                                 0x2
#define _WDTPSH_PSCNT10_POSN                                0x2
#define _WDTPSH_PSCNT10_POSITION                            0x2
#define _WDTPSH_PSCNT10_SIZE                                0x1
#define _WDTPSH_PSCNT10_LENGTH                              0x1
#define _WDTPSH_PSCNT10_MASK                                0x4
#define _WDTPSH_PSCNT11_POSN                                0x3
#define _WDTPSH_PSCNT11_POSITION                            0x3
#define _WDTPSH_PSCNT11_SIZE                                0x1
#define _WDTPSH_PSCNT11_LENGTH                              0x1
#define _WDTPSH_PSCNT11_MASK                                0x8
#define _WDTPSH_PSCNT12_POSN                                0x4
#define _WDTPSH_PSCNT12_POSITION                            0x4
#define _WDTPSH_PSCNT12_SIZE                                0x1
#define _WDTPSH_PSCNT12_LENGTH                              0x1
#define _WDTPSH_PSCNT12_MASK                                0x10
#define _WDTPSH_PSCNT13_POSN                                0x5
#define _WDTPSH_PSCNT13_POSITION                            0x5
#define _WDTPSH_PSCNT13_SIZE                                0x1
#define _WDTPSH_PSCNT13_LENGTH                              0x1
#define _WDTPSH_PSCNT13_MASK                                0x20
#define _WDTPSH_PSCNT14_POSN                                0x6
#define _WDTPSH_PSCNT14_POSITION                            0x6
#define _WDTPSH_PSCNT14_SIZE                                0x1
#define _WDTPSH_PSCNT14_LENGTH                              0x1
#define _WDTPSH_PSCNT14_MASK                                0x40
#define _WDTPSH_PSCNT15_POSN                                0x7
#define _WDTPSH_PSCNT15_POSITION                            0x7
#define _WDTPSH_PSCNT15_SIZE                                0x1
#define _WDTPSH_PSCNT15_LENGTH                              0x1
#define _WDTPSH_PSCNT15_MASK                                0x80

// Register: WDTTMR
#define WDTTMR WDTTMR
extern volatile unsigned char           WDTTMR              __at(0x190);
#ifndef _LIB_BUILD
asm("WDTTMR equ 0190h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT16                :1;
        unsigned PSCNT17                :1;
        unsigned STATE                  :1;
        unsigned TMR                    :5;
    };
    struct {
        unsigned WDTPSCNT16             :1;
        unsigned WDTPSCNT17             :1;
        unsigned WDTSTATE               :1;
        unsigned WDTTMR0                :1;
        unsigned WDTTMR1                :1;
        unsigned WDTTMR2                :1;
        unsigned WDTTMR3                :1;
        unsigned WDTTMR4                :1;
    };
    struct {
        unsigned                        :3;
        unsigned WDTTMR                 :5;
    };
} WDTTMRbits_t;
extern volatile WDTTMRbits_t WDTTMRbits __at(0x190);
// bitfield macros
#define _WDTTMR_PSCNT16_POSN                                0x0
#define _WDTTMR_PSCNT16_POSITION                            0x0
#define _WDTTMR_PSCNT16_SIZE                                0x1
#define _WDTTMR_PSCNT16_LENGTH                              0x1
#define _WDTTMR_PSCNT16_MASK                                0x1
#define _WDTTMR_PSCNT17_POSN                                0x1
#define _WDTTMR_PSCNT17_POSITION                            0x1
#define _WDTTMR_PSCNT17_SIZE                                0x1
#define _WDTTMR_PSCNT17_LENGTH                              0x1
#define _WDTTMR_PSCNT17_MASK                                0x2
#define _WDTTMR_STATE_POSN                                  0x2
#define _WDTTMR_STATE_POSITION                              0x2
#define _WDTTMR_STATE_SIZE                                  0x1
#define _WDTTMR_STATE_LENGTH                                0x1
#define _WDTTMR_STATE_MASK                                  0x4
#define _WDTTMR_TMR_POSN                                    0x3
#define _WDTTMR_TMR_POSITION                                0x3
#define _WDTTMR_TMR_SIZE                                    0x5
#define _WDTTMR_TMR_LENGTH                                  0x5
#define _WDTTMR_TMR_MASK                                    0xF8
#define _WDTTMR_WDTPSCNT16_POSN                             0x0
#define _WDTTMR_WDTPSCNT16_POSITION                         0x0
#define _WDTTMR_WDTPSCNT16_SIZE                             0x1
#define _WDTTMR_WDTPSCNT16_LENGTH                           0x1
#define _WDTTMR_WDTPSCNT16_MASK                             0x1
#define _WDTTMR_WDTPSCNT17_POSN                             0x1
#define _WDTTMR_WDTPSCNT17_POSITION                         0x1
#define _WDTTMR_WDTPSCNT17_SIZE                             0x1
#define _WDTTMR_WDTPSCNT17_LENGTH                           0x1
#define _WDTTMR_WDTPSCNT17_MASK                             0x2
#define _WDTTMR_WDTSTATE_POSN                               0x2
#define _WDTTMR_WDTSTATE_POSITION                           0x2
#define _WDTTMR_WDTSTATE_SIZE                               0x1
#define _WDTTMR_WDTSTATE_LENGTH                             0x1
#define _WDTTMR_WDTSTATE_MASK                               0x4
#define _WDTTMR_WDTTMR0_POSN                                0x3
#define _WDTTMR_WDTTMR0_POSITION                            0x3
#define _WDTTMR_WDTTMR0_SIZE                                0x1
#define _WDTTMR_WDTTMR0_LENGTH                              0x1
#define _WDTTMR_WDTTMR0_MASK                                0x8
#define _WDTTMR_WDTTMR1_POSN                                0x4
#define _WDTTMR_WDTTMR1_POSITION                            0x4
#define _WDTTMR_WDTTMR1_SIZE                                0x1
#define _WDTTMR_WDTTMR1_LENGTH                              0x1
#define _WDTTMR_WDTTMR1_MASK                                0x10
#define _WDTTMR_WDTTMR2_POSN                                0x5
#define _WDTTMR_WDTTMR2_POSITION                            0x5
#define _WDTTMR_WDTTMR2_SIZE                                0x1
#define _WDTTMR_WDTTMR2_LENGTH                              0x1
#define _WDTTMR_WDTTMR2_MASK                                0x20
#define _WDTTMR_WDTTMR3_POSN                                0x6
#define _WDTTMR_WDTTMR3_POSITION                            0x6
#define _WDTTMR_WDTTMR3_SIZE                                0x1
#define _WDTTMR_WDTTMR3_LENGTH                              0x1
#define _WDTTMR_WDTTMR3_MASK                                0x40
#define _WDTTMR_WDTTMR4_POSN                                0x7
#define _WDTTMR_WDTTMR4_POSITION                            0x7
#define _WDTTMR_WDTTMR4_SIZE                                0x1
#define _WDTTMR_WDTTMR4_LENGTH                              0x1
#define _WDTTMR_WDTTMR4_MASK                                0x80
#define _WDTTMR_WDTTMR_POSN                                 0x3
#define _WDTTMR_WDTTMR_POSITION                             0x3
#define _WDTTMR_WDTTMR_SIZE                                 0x5
#define _WDTTMR_WDTTMR_LENGTH                               0x5
#define _WDTTMR_WDTTMR_MASK                                 0xF8

// Register: BORCON
#define BORCON BORCON
extern volatile unsigned char           BORCON              __at(0x191);
#ifndef _LIB_BUILD
asm("BORCON equ 0191h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BORRDY                 :1;
        unsigned                        :6;
        unsigned SBOREN                 :1;
    };
} BORCONbits_t;
extern volatile BORCONbits_t BORCONbits __at(0x191);
// bitfield macros
#define _BORCON_BORRDY_POSN                                 0x0
#define _BORCON_BORRDY_POSITION                             0x0
#define _BORCON_BORRDY_SIZE                                 0x1
#define _BORCON_BORRDY_LENGTH                               0x1
#define _BORCON_BORRDY_MASK                                 0x1
#define _BORCON_SBOREN_POSN                                 0x7
#define _BORCON_SBOREN_POSITION                             0x7
#define _BORCON_SBOREN_SIZE                                 0x1
#define _BORCON_SBOREN_LENGTH                               0x1
#define _BORCON_SBOREN_MASK                                 0x80

// Register: PCON0
#define PCON0 PCON0
extern volatile unsigned char           PCON0               __at(0x192);
#ifndef _LIB_BUILD
asm("PCON0 equ 0192h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned nBOR                   :1;
        unsigned nPOR                   :1;
        unsigned nRI                    :1;
        unsigned nRMCLR                 :1;
        unsigned nRWDT                  :1;
        unsigned nWDTWV                 :1;
        unsigned STKUNF                 :1;
        unsigned STKOVF                 :1;
    };
} PCON0bits_t;
extern volatile PCON0bits_t PCON0bits __at(0x192);
// bitfield macros
#define _PCON0_nBOR_POSN                                    0x0
#define _PCON0_nBOR_POSITION                                0x0
#define _PCON0_nBOR_SIZE                                    0x1
#define _PCON0_nBOR_LENGTH                                  0x1
#define _PCON0_nBOR_MASK                                    0x1
#define _PCON0_nPOR_POSN                                    0x1
#define _PCON0_nPOR_POSITION                                0x1
#define _PCON0_nPOR_SIZE                                    0x1
#define _PCON0_nPOR_LENGTH                                  0x1
#define _PCON0_nPOR_MASK                                    0x2
#define _PCON0_nRI_POSN                                     0x2
#define _PCON0_nRI_POSITION                                 0x2
#define _PCON0_nRI_SIZE                                     0x1
#define _PCON0_nRI_LENGTH                                   0x1
#define _PCON0_nRI_MASK                                     0x4
#define _PCON0_nRMCLR_POSN                                  0x3
#define _PCON0_nRMCLR_POSITION                              0x3
#define _PCON0_nRMCLR_SIZE                                  0x1
#define _PCON0_nRMCLR_LENGTH                                0x1
#define _PCON0_nRMCLR_MASK                                  0x8
#define _PCON0_nRWDT_POSN                                   0x4
#define _PCON0_nRWDT_POSITION                               0x4
#define _PCON0_nRWDT_SIZE                                   0x1
#define _PCON0_nRWDT_LENGTH                                 0x1
#define _PCON0_nRWDT_MASK                                   0x10
#define _PCON0_nWDTWV_POSN                                  0x5
#define _PCON0_nWDTWV_POSITION                              0x5
#define _PCON0_nWDTWV_SIZE                                  0x1
#define _PCON0_nWDTWV_LENGTH                                0x1
#define _PCON0_nWDTWV_MASK                                  0x20
#define _PCON0_STKUNF_POSN                                  0x6
#define _PCON0_STKUNF_POSITION                              0x6
#define _PCON0_STKUNF_SIZE                                  0x1
#define _PCON0_STKUNF_LENGTH                                0x1
#define _PCON0_STKUNF_MASK                                  0x40
#define _PCON0_STKOVF_POSN                                  0x7
#define _PCON0_STKOVF_POSITION                              0x7
#define _PCON0_STKOVF_SIZE                                  0x1
#define _PCON0_STKOVF_LENGTH                                0x1
#define _PCON0_STKOVF_MASK                                  0x80

// Register: PCON1
#define PCON1 PCON1
extern volatile unsigned char           PCON1               __at(0x193);
#ifndef _LIB_BUILD
asm("PCON1 equ 0193h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned nMEMV                  :1;
    };
} PCON1bits_t;
extern volatile PCON1bits_t PCON1bits __at(0x193);
// bitfield macros
#define _PCON1_nMEMV_POSN                                   0x1
#define _PCON1_nMEMV_POSITION                               0x1
#define _PCON1_nMEMV_SIZE                                   0x1
#define _PCON1_nMEMV_LENGTH                                 0x1
#define _PCON1_nMEMV_MASK                                   0x2

// Register: TMR0L
#define TMR0L TMR0L
extern volatile unsigned char           TMR0L               __at(0x19C);
#ifndef _LIB_BUILD
asm("TMR0L equ 019Ch");
#endif
// aliases
extern volatile unsigned char           TMR0                __at(0x19C);
#ifndef _LIB_BUILD
asm("TMR0 equ 019Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0L                  :8;
    };
    struct {
        unsigned TMR0L0                 :1;
        unsigned TMR0L1                 :1;
        unsigned TMR0L2                 :1;
        unsigned TMR0L3                 :1;
        unsigned TMR0L4                 :1;
        unsigned TMR0L5                 :1;
        unsigned TMR0L6                 :1;
        unsigned TMR0L7                 :1;
    };
} TMR0Lbits_t;
extern volatile TMR0Lbits_t TMR0Lbits __at(0x19C);
// bitfield macros
#define _TMR0L_TMR0L_POSN                                   0x0
#define _TMR0L_TMR0L_POSITION                               0x0
#define _TMR0L_TMR0L_SIZE                                   0x8
#define _TMR0L_TMR0L_LENGTH                                 0x8
#define _TMR0L_TMR0L_MASK                                   0xFF
#define _TMR0L_TMR0L0_POSN                                  0x0
#define _TMR0L_TMR0L0_POSITION                              0x0
#define _TMR0L_TMR0L0_SIZE                                  0x1
#define _TMR0L_TMR0L0_LENGTH                                0x1
#define _TMR0L_TMR0L0_MASK                                  0x1
#define _TMR0L_TMR0L1_POSN                                  0x1
#define _TMR0L_TMR0L1_POSITION                              0x1
#define _TMR0L_TMR0L1_SIZE                                  0x1
#define _TMR0L_TMR0L1_LENGTH                                0x1
#define _TMR0L_TMR0L1_MASK                                  0x2
#define _TMR0L_TMR0L2_POSN                                  0x2
#define _TMR0L_TMR0L2_POSITION                              0x2
#define _TMR0L_TMR0L2_SIZE                                  0x1
#define _TMR0L_TMR0L2_LENGTH                                0x1
#define _TMR0L_TMR0L2_MASK                                  0x4
#define _TMR0L_TMR0L3_POSN                                  0x3
#define _TMR0L_TMR0L3_POSITION                              0x3
#define _TMR0L_TMR0L3_SIZE                                  0x1
#define _TMR0L_TMR0L3_LENGTH                                0x1
#define _TMR0L_TMR0L3_MASK                                  0x8
#define _TMR0L_TMR0L4_POSN                                  0x4
#define _TMR0L_TMR0L4_POSITION                              0x4
#define _TMR0L_TMR0L4_SIZE                                  0x1
#define _TMR0L_TMR0L4_LENGTH                                0x1
#define _TMR0L_TMR0L4_MASK                                  0x10
#define _TMR0L_TMR0L5_POSN                                  0x5
#define _TMR0L_TMR0L5_POSITION                              0x5
#define _TMR0L_TMR0L5_SIZE                                  0x1
#define _TMR0L_TMR0L5_LENGTH                                0x1
#define _TMR0L_TMR0L5_MASK                                  0x20
#define _TMR0L_TMR0L6_POSN                                  0x6
#define _TMR0L_TMR0L6_POSITION                              0x6
#define _TMR0L_TMR0L6_SIZE                                  0x1
#define _TMR0L_TMR0L6_LENGTH                                0x1
#define _TMR0L_TMR0L6_MASK                                  0x40
#define _TMR0L_TMR0L7_POSN                                  0x7
#define _TMR0L_TMR0L7_POSITION                              0x7
#define _TMR0L_TMR0L7_SIZE                                  0x1
#define _TMR0L_TMR0L7_LENGTH                                0x1
#define _TMR0L_TMR0L7_MASK                                  0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR0L                  :8;
    };
    struct {
        unsigned TMR0L0                 :1;
        unsigned TMR0L1                 :1;
        unsigned TMR0L2                 :1;
        unsigned TMR0L3                 :1;
        unsigned TMR0L4                 :1;
        unsigned TMR0L5                 :1;
        unsigned TMR0L6                 :1;
        unsigned TMR0L7                 :1;
    };
} TMR0bits_t;
extern volatile TMR0bits_t TMR0bits __at(0x19C);
// bitfield macros
#define _TMR0_TMR0L_POSN                                    0x0
#define _TMR0_TMR0L_POSITION                                0x0
#define _TMR0_TMR0L_SIZE                                    0x8
#define _TMR0_TMR0L_LENGTH                                  0x8
#define _TMR0_TMR0L_MASK                                    0xFF
#define _TMR0_TMR0L0_POSN                                   0x0
#define _TMR0_TMR0L0_POSITION                               0x0
#define _TMR0_TMR0L0_SIZE                                   0x1
#define _TMR0_TMR0L0_LENGTH                                 0x1
#define _TMR0_TMR0L0_MASK                                   0x1
#define _TMR0_TMR0L1_POSN                                   0x1
#define _TMR0_TMR0L1_POSITION                               0x1
#define _TMR0_TMR0L1_SIZE                                   0x1
#define _TMR0_TMR0L1_LENGTH                                 0x1
#define _TMR0_TMR0L1_MASK                                   0x2
#define _TMR0_TMR0L2_POSN                                   0x2
#define _TMR0_TMR0L2_POSITION                               0x2
#define _TMR0_TMR0L2_SIZE                                   0x1
#define _TMR0_TMR0L2_LENGTH                                 0x1
#define _TMR0_TMR0L2_MASK                                   0x4
#define _TMR0_TMR0L3_POSN                                   0x3
#define _TMR0_TMR0L3_POSITION                               0x3
#define _TMR0_TMR0L3_SIZE                                   0x1
#define _TMR0_TMR0L3_LENGTH                                 0x1
#define _TMR0_TMR0L3_MASK                                   0x8
#define _TMR0_TMR0L4_POSN                                   0x4
#define _TMR0_TMR0L4_POSITION                               0x4
#define _TMR0_TMR0L4_SIZE                                   0x1
#define _TMR0_TMR0L4_LENGTH                                 0x1
#define _TMR0_TMR0L4_MASK                                   0x10
#define _TMR0_TMR0L5_POSN                                   0x5
#define _TMR0_TMR0L5_POSITION                               0x5
#define _TMR0_TMR0L5_SIZE                                   0x1
#define _TMR0_TMR0L5_LENGTH                                 0x1
#define _TMR0_TMR0L5_MASK                                   0x20
#define _TMR0_TMR0L6_POSN                                   0x6
#define _TMR0_TMR0L6_POSITION                               0x6
#define _TMR0_TMR0L6_SIZE                                   0x1
#define _TMR0_TMR0L6_LENGTH                                 0x1
#define _TMR0_TMR0L6_MASK                                   0x40
#define _TMR0_TMR0L7_POSN                                   0x7
#define _TMR0_TMR0L7_POSITION                               0x7
#define _TMR0_TMR0L7_SIZE                                   0x1
#define _TMR0_TMR0L7_LENGTH                                 0x1
#define _TMR0_TMR0L7_MASK                                   0x80

// Register: TMR0H
#define TMR0H TMR0H
extern volatile unsigned char           TMR0H               __at(0x19D);
#ifndef _LIB_BUILD
asm("TMR0H equ 019Dh");
#endif
// aliases
extern volatile unsigned char           PR0                 __at(0x19D);
#ifndef _LIB_BUILD
asm("PR0 equ 019Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0H                  :8;
    };
    struct {
        unsigned TMR0H0                 :1;
        unsigned TMR0H1                 :1;
        unsigned TMR0H2                 :1;
        unsigned TMR0H3                 :1;
        unsigned TMR0H4                 :1;
        unsigned TMR0H5                 :1;
        unsigned TMR0H6                 :1;
        unsigned TMR0H7                 :1;
    };
    struct {
        unsigned T0PR0                  :1;
        unsigned T0PR1                  :1;
        unsigned T0PR2                  :1;
        unsigned T0PR3                  :1;
        unsigned T0PR4                  :1;
        unsigned T0PR5                  :1;
        unsigned T0PR6                  :1;
        unsigned T0PR7                  :1;
    };
    struct {
        unsigned T0PR                   :8;
    };
} TMR0Hbits_t;
extern volatile TMR0Hbits_t TMR0Hbits __at(0x19D);
// bitfield macros
#define _TMR0H_TMR0H_POSN                                   0x0
#define _TMR0H_TMR0H_POSITION                               0x0
#define _TMR0H_TMR0H_SIZE                                   0x8
#define _TMR0H_TMR0H_LENGTH                                 0x8
#define _TMR0H_TMR0H_MASK                                   0xFF
#define _TMR0H_TMR0H0_POSN                                  0x0
#define _TMR0H_TMR0H0_POSITION                              0x0
#define _TMR0H_TMR0H0_SIZE                                  0x1
#define _TMR0H_TMR0H0_LENGTH                                0x1
#define _TMR0H_TMR0H0_MASK                                  0x1
#define _TMR0H_TMR0H1_POSN                                  0x1
#define _TMR0H_TMR0H1_POSITION                              0x1
#define _TMR0H_TMR0H1_SIZE                                  0x1
#define _TMR0H_TMR0H1_LENGTH                                0x1
#define _TMR0H_TMR0H1_MASK                                  0x2
#define _TMR0H_TMR0H2_POSN                                  0x2
#define _TMR0H_TMR0H2_POSITION                              0x2
#define _TMR0H_TMR0H2_SIZE                                  0x1
#define _TMR0H_TMR0H2_LENGTH                                0x1
#define _TMR0H_TMR0H2_MASK                                  0x4
#define _TMR0H_TMR0H3_POSN                                  0x3
#define _TMR0H_TMR0H3_POSITION                              0x3
#define _TMR0H_TMR0H3_SIZE                                  0x1
#define _TMR0H_TMR0H3_LENGTH                                0x1
#define _TMR0H_TMR0H3_MASK                                  0x8
#define _TMR0H_TMR0H4_POSN                                  0x4
#define _TMR0H_TMR0H4_POSITION                              0x4
#define _TMR0H_TMR0H4_SIZE                                  0x1
#define _TMR0H_TMR0H4_LENGTH                                0x1
#define _TMR0H_TMR0H4_MASK                                  0x10
#define _TMR0H_TMR0H5_POSN                                  0x5
#define _TMR0H_TMR0H5_POSITION                              0x5
#define _TMR0H_TMR0H5_SIZE                                  0x1
#define _TMR0H_TMR0H5_LENGTH                                0x1
#define _TMR0H_TMR0H5_MASK                                  0x20
#define _TMR0H_TMR0H6_POSN                                  0x6
#define _TMR0H_TMR0H6_POSITION                              0x6
#define _TMR0H_TMR0H6_SIZE                                  0x1
#define _TMR0H_TMR0H6_LENGTH                                0x1
#define _TMR0H_TMR0H6_MASK                                  0x40
#define _TMR0H_TMR0H7_POSN                                  0x7
#define _TMR0H_TMR0H7_POSITION                              0x7
#define _TMR0H_TMR0H7_SIZE                                  0x1
#define _TMR0H_TMR0H7_LENGTH                                0x1
#define _TMR0H_TMR0H7_MASK                                  0x80
#define _TMR0H_T0PR0_POSN                                   0x0
#define _TMR0H_T0PR0_POSITION                               0x0
#define _TMR0H_T0PR0_SIZE                                   0x1
#define _TMR0H_T0PR0_LENGTH                                 0x1
#define _TMR0H_T0PR0_MASK                                   0x1
#define _TMR0H_T0PR1_POSN                                   0x1
#define _TMR0H_T0PR1_POSITION                               0x1
#define _TMR0H_T0PR1_SIZE                                   0x1
#define _TMR0H_T0PR1_LENGTH                                 0x1
#define _TMR0H_T0PR1_MASK                                   0x2
#define _TMR0H_T0PR2_POSN                                   0x2
#define _TMR0H_T0PR2_POSITION                               0x2
#define _TMR0H_T0PR2_SIZE                                   0x1
#define _TMR0H_T0PR2_LENGTH                                 0x1
#define _TMR0H_T0PR2_MASK                                   0x4
#define _TMR0H_T0PR3_POSN                                   0x3
#define _TMR0H_T0PR3_POSITION                               0x3
#define _TMR0H_T0PR3_SIZE                                   0x1
#define _TMR0H_T0PR3_LENGTH                                 0x1
#define _TMR0H_T0PR3_MASK                                   0x8
#define _TMR0H_T0PR4_POSN                                   0x4
#define _TMR0H_T0PR4_POSITION                               0x4
#define _TMR0H_T0PR4_SIZE                                   0x1
#define _TMR0H_T0PR4_LENGTH                                 0x1
#define _TMR0H_T0PR4_MASK                                   0x10
#define _TMR0H_T0PR5_POSN                                   0x5
#define _TMR0H_T0PR5_POSITION                               0x5
#define _TMR0H_T0PR5_SIZE                                   0x1
#define _TMR0H_T0PR5_LENGTH                                 0x1
#define _TMR0H_T0PR5_MASK                                   0x20
#define _TMR0H_T0PR6_POSN                                   0x6
#define _TMR0H_T0PR6_POSITION                               0x6
#define _TMR0H_T0PR6_SIZE                                   0x1
#define _TMR0H_T0PR6_LENGTH                                 0x1
#define _TMR0H_T0PR6_MASK                                   0x40
#define _TMR0H_T0PR7_POSN                                   0x7
#define _TMR0H_T0PR7_POSITION                               0x7
#define _TMR0H_T0PR7_SIZE                                   0x1
#define _TMR0H_T0PR7_LENGTH                                 0x1
#define _TMR0H_T0PR7_MASK                                   0x80
#define _TMR0H_T0PR_POSN                                    0x0
#define _TMR0H_T0PR_POSITION                                0x0
#define _TMR0H_T0PR_SIZE                                    0x8
#define _TMR0H_T0PR_LENGTH                                  0x8
#define _TMR0H_T0PR_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR0H                  :8;
    };
    struct {
        unsigned TMR0H0                 :1;
        unsigned TMR0H1                 :1;
        unsigned TMR0H2                 :1;
        unsigned TMR0H3                 :1;
        unsigned TMR0H4                 :1;
        unsigned TMR0H5                 :1;
        unsigned TMR0H6                 :1;
        unsigned TMR0H7                 :1;
    };
    struct {
        unsigned T0PR0                  :1;
        unsigned T0PR1                  :1;
        unsigned T0PR2                  :1;
        unsigned T0PR3                  :1;
        unsigned T0PR4                  :1;
        unsigned T0PR5                  :1;
        unsigned T0PR6                  :1;
        unsigned T0PR7                  :1;
    };
    struct {
        unsigned T0PR                   :8;
    };
} PR0bits_t;
extern volatile PR0bits_t PR0bits __at(0x19D);
// bitfield macros
#define _PR0_TMR0H_POSN                                     0x0
#define _PR0_TMR0H_POSITION                                 0x0
#define _PR0_TMR0H_SIZE                                     0x8
#define _PR0_TMR0H_LENGTH                                   0x8
#define _PR0_TMR0H_MASK                                     0xFF
#define _PR0_TMR0H0_POSN                                    0x0
#define _PR0_TMR0H0_POSITION                                0x0
#define _PR0_TMR0H0_SIZE                                    0x1
#define _PR0_TMR0H0_LENGTH                                  0x1
#define _PR0_TMR0H0_MASK                                    0x1
#define _PR0_TMR0H1_POSN                                    0x1
#define _PR0_TMR0H1_POSITION                                0x1
#define _PR0_TMR0H1_SIZE                                    0x1
#define _PR0_TMR0H1_LENGTH                                  0x1
#define _PR0_TMR0H1_MASK                                    0x2
#define _PR0_TMR0H2_POSN                                    0x2
#define _PR0_TMR0H2_POSITION                                0x2
#define _PR0_TMR0H2_SIZE                                    0x1
#define _PR0_TMR0H2_LENGTH                                  0x1
#define _PR0_TMR0H2_MASK                                    0x4
#define _PR0_TMR0H3_POSN                                    0x3
#define _PR0_TMR0H3_POSITION                                0x3
#define _PR0_TMR0H3_SIZE                                    0x1
#define _PR0_TMR0H3_LENGTH                                  0x1
#define _PR0_TMR0H3_MASK                                    0x8
#define _PR0_TMR0H4_POSN                                    0x4
#define _PR0_TMR0H4_POSITION                                0x4
#define _PR0_TMR0H4_SIZE                                    0x1
#define _PR0_TMR0H4_LENGTH                                  0x1
#define _PR0_TMR0H4_MASK                                    0x10
#define _PR0_TMR0H5_POSN                                    0x5
#define _PR0_TMR0H5_POSITION                                0x5
#define _PR0_TMR0H5_SIZE                                    0x1
#define _PR0_TMR0H5_LENGTH                                  0x1
#define _PR0_TMR0H5_MASK                                    0x20
#define _PR0_TMR0H6_POSN                                    0x6
#define _PR0_TMR0H6_POSITION                                0x6
#define _PR0_TMR0H6_SIZE                                    0x1
#define _PR0_TMR0H6_LENGTH                                  0x1
#define _PR0_TMR0H6_MASK                                    0x40
#define _PR0_TMR0H7_POSN                                    0x7
#define _PR0_TMR0H7_POSITION                                0x7
#define _PR0_TMR0H7_SIZE                                    0x1
#define _PR0_TMR0H7_LENGTH                                  0x1
#define _PR0_TMR0H7_MASK                                    0x80
#define _PR0_T0PR0_POSN                                     0x0
#define _PR0_T0PR0_POSITION                                 0x0
#define _PR0_T0PR0_SIZE                                     0x1
#define _PR0_T0PR0_LENGTH                                   0x1
#define _PR0_T0PR0_MASK                                     0x1
#define _PR0_T0PR1_POSN                                     0x1
#define _PR0_T0PR1_POSITION                                 0x1
#define _PR0_T0PR1_SIZE                                     0x1
#define _PR0_T0PR1_LENGTH                                   0x1
#define _PR0_T0PR1_MASK                                     0x2
#define _PR0_T0PR2_POSN                                     0x2
#define _PR0_T0PR2_POSITION                                 0x2
#define _PR0_T0PR2_SIZE                                     0x1
#define _PR0_T0PR2_LENGTH                                   0x1
#define _PR0_T0PR2_MASK                                     0x4
#define _PR0_T0PR3_POSN                                     0x3
#define _PR0_T0PR3_POSITION                                 0x3
#define _PR0_T0PR3_SIZE                                     0x1
#define _PR0_T0PR3_LENGTH                                   0x1
#define _PR0_T0PR3_MASK                                     0x8
#define _PR0_T0PR4_POSN                                     0x4
#define _PR0_T0PR4_POSITION                                 0x4
#define _PR0_T0PR4_SIZE                                     0x1
#define _PR0_T0PR4_LENGTH                                   0x1
#define _PR0_T0PR4_MASK                                     0x10
#define _PR0_T0PR5_POSN                                     0x5
#define _PR0_T0PR5_POSITION                                 0x5
#define _PR0_T0PR5_SIZE                                     0x1
#define _PR0_T0PR5_LENGTH                                   0x1
#define _PR0_T0PR5_MASK                                     0x20
#define _PR0_T0PR6_POSN                                     0x6
#define _PR0_T0PR6_POSITION                                 0x6
#define _PR0_T0PR6_SIZE                                     0x1
#define _PR0_T0PR6_LENGTH                                   0x1
#define _PR0_T0PR6_MASK                                     0x40
#define _PR0_T0PR7_POSN                                     0x7
#define _PR0_T0PR7_POSITION                                 0x7
#define _PR0_T0PR7_SIZE                                     0x1
#define _PR0_T0PR7_LENGTH                                   0x1
#define _PR0_T0PR7_MASK                                     0x80
#define _PR0_T0PR_POSN                                      0x0
#define _PR0_T0PR_POSITION                                  0x0
#define _PR0_T0PR_SIZE                                      0x8
#define _PR0_T0PR_LENGTH                                    0x8
#define _PR0_T0PR_MASK                                      0xFF

// Register: T0CON0
#define T0CON0 T0CON0
extern volatile unsigned char           T0CON0              __at(0x19E);
#ifndef _LIB_BUILD
asm("T0CON0 equ 019Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned MD16                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned T0OUTPS                :4;
        unsigned T0MD16                 :1;
        unsigned T0OUT                  :1;
        unsigned                        :1;
        unsigned T0EN                   :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned T016BIT                :1;
    };
    struct {
        unsigned T0OUTPS0               :1;
        unsigned T0OUTPS1               :1;
        unsigned T0OUTPS2               :1;
        unsigned T0OUTPS3               :1;
    };
} T0CON0bits_t;
extern volatile T0CON0bits_t T0CON0bits __at(0x19E);
// bitfield macros
#define _T0CON0_OUTPS_POSN                                  0x0
#define _T0CON0_OUTPS_POSITION                              0x0
#define _T0CON0_OUTPS_SIZE                                  0x4
#define _T0CON0_OUTPS_LENGTH                                0x4
#define _T0CON0_OUTPS_MASK                                  0xF
#define _T0CON0_MD16_POSN                                   0x4
#define _T0CON0_MD16_POSITION                               0x4
#define _T0CON0_MD16_SIZE                                   0x1
#define _T0CON0_MD16_LENGTH                                 0x1
#define _T0CON0_MD16_MASK                                   0x10
#define _T0CON0_OUT_POSN                                    0x5
#define _T0CON0_OUT_POSITION                                0x5
#define _T0CON0_OUT_SIZE                                    0x1
#define _T0CON0_OUT_LENGTH                                  0x1
#define _T0CON0_OUT_MASK                                    0x20
#define _T0CON0_EN_POSN                                     0x7
#define _T0CON0_EN_POSITION                                 0x7
#define _T0CON0_EN_SIZE                                     0x1
#define _T0CON0_EN_LENGTH                                   0x1
#define _T0CON0_EN_MASK                                     0x80
#define _T0CON0_T0OUTPS_POSN                                0x0
#define _T0CON0_T0OUTPS_POSITION                            0x0
#define _T0CON0_T0OUTPS_SIZE                                0x4
#define _T0CON0_T0OUTPS_LENGTH                              0x4
#define _T0CON0_T0OUTPS_MASK                                0xF
#define _T0CON0_T0MD16_POSN                                 0x4
#define _T0CON0_T0MD16_POSITION                             0x4
#define _T0CON0_T0MD16_SIZE                                 0x1
#define _T0CON0_T0MD16_LENGTH                               0x1
#define _T0CON0_T0MD16_MASK                                 0x10
#define _T0CON0_T0OUT_POSN                                  0x5
#define _T0CON0_T0OUT_POSITION                              0x5
#define _T0CON0_T0OUT_SIZE                                  0x1
#define _T0CON0_T0OUT_LENGTH                                0x1
#define _T0CON0_T0OUT_MASK                                  0x20
#define _T0CON0_T0EN_POSN                                   0x7
#define _T0CON0_T0EN_POSITION                               0x7
#define _T0CON0_T0EN_SIZE                                   0x1
#define _T0CON0_T0EN_LENGTH                                 0x1
#define _T0CON0_T0EN_MASK                                   0x80
#define _T0CON0_OUTPS0_POSN                                 0x0
#define _T0CON0_OUTPS0_POSITION                             0x0
#define _T0CON0_OUTPS0_SIZE                                 0x1
#define _T0CON0_OUTPS0_LENGTH                               0x1
#define _T0CON0_OUTPS0_MASK                                 0x1
#define _T0CON0_OUTPS1_POSN                                 0x1
#define _T0CON0_OUTPS1_POSITION                             0x1
#define _T0CON0_OUTPS1_SIZE                                 0x1
#define _T0CON0_OUTPS1_LENGTH                               0x1
#define _T0CON0_OUTPS1_MASK                                 0x2
#define _T0CON0_OUTPS2_POSN                                 0x2
#define _T0CON0_OUTPS2_POSITION                             0x2
#define _T0CON0_OUTPS2_SIZE                                 0x1
#define _T0CON0_OUTPS2_LENGTH                               0x1
#define _T0CON0_OUTPS2_MASK                                 0x4
#define _T0CON0_OUTPS3_POSN                                 0x3
#define _T0CON0_OUTPS3_POSITION                             0x3
#define _T0CON0_OUTPS3_SIZE                                 0x1
#define _T0CON0_OUTPS3_LENGTH                               0x1
#define _T0CON0_OUTPS3_MASK                                 0x8
#define _T0CON0_T016BIT_POSN                                0x4
#define _T0CON0_T016BIT_POSITION                            0x4
#define _T0CON0_T016BIT_SIZE                                0x1
#define _T0CON0_T016BIT_LENGTH                              0x1
#define _T0CON0_T016BIT_MASK                                0x10
#define _T0CON0_T0OUTPS0_POSN                               0x0
#define _T0CON0_T0OUTPS0_POSITION                           0x0
#define _T0CON0_T0OUTPS0_SIZE                               0x1
#define _T0CON0_T0OUTPS0_LENGTH                             0x1
#define _T0CON0_T0OUTPS0_MASK                               0x1
#define _T0CON0_T0OUTPS1_POSN                               0x1
#define _T0CON0_T0OUTPS1_POSITION                           0x1
#define _T0CON0_T0OUTPS1_SIZE                               0x1
#define _T0CON0_T0OUTPS1_LENGTH                             0x1
#define _T0CON0_T0OUTPS1_MASK                               0x2
#define _T0CON0_T0OUTPS2_POSN                               0x2
#define _T0CON0_T0OUTPS2_POSITION                           0x2
#define _T0CON0_T0OUTPS2_SIZE                               0x1
#define _T0CON0_T0OUTPS2_LENGTH                             0x1
#define _T0CON0_T0OUTPS2_MASK                               0x4
#define _T0CON0_T0OUTPS3_POSN                               0x3
#define _T0CON0_T0OUTPS3_POSITION                           0x3
#define _T0CON0_T0OUTPS3_SIZE                               0x1
#define _T0CON0_T0OUTPS3_LENGTH                             0x1
#define _T0CON0_T0OUTPS3_MASK                               0x8

// Register: T0CON1
#define T0CON1 T0CON1
extern volatile unsigned char           T0CON1              __at(0x19F);
#ifndef _LIB_BUILD
asm("T0CON1 equ 019Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CKPS                   :4;
        unsigned ASYNC                  :1;
        unsigned CS                     :3;
    };
    struct {
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned CKPS3                  :1;
        unsigned T0ASYNC                :1;
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
    };
    struct {
        unsigned T0CKPS                 :4;
        unsigned                        :1;
        unsigned T0CS                   :3;
    };
    struct {
        unsigned T0CKPS0                :1;
        unsigned T0CKPS1                :1;
        unsigned T0CKPS2                :1;
        unsigned T0CKPS3                :1;
        unsigned                        :1;
        unsigned T0CS0                  :1;
        unsigned T0CS1                  :1;
        unsigned T0CS2                  :1;
    };
} T0CON1bits_t;
extern volatile T0CON1bits_t T0CON1bits __at(0x19F);
// bitfield macros
#define _T0CON1_CKPS_POSN                                   0x0
#define _T0CON1_CKPS_POSITION                               0x0
#define _T0CON1_CKPS_SIZE                                   0x4
#define _T0CON1_CKPS_LENGTH                                 0x4
#define _T0CON1_CKPS_MASK                                   0xF
#define _T0CON1_ASYNC_POSN                                  0x4
#define _T0CON1_ASYNC_POSITION                              0x4
#define _T0CON1_ASYNC_SIZE                                  0x1
#define _T0CON1_ASYNC_LENGTH                                0x1
#define _T0CON1_ASYNC_MASK                                  0x10
#define _T0CON1_CS_POSN                                     0x5
#define _T0CON1_CS_POSITION                                 0x5
#define _T0CON1_CS_SIZE                                     0x3
#define _T0CON1_CS_LENGTH                                   0x3
#define _T0CON1_CS_MASK                                     0xE0
#define _T0CON1_CKPS0_POSN                                  0x0
#define _T0CON1_CKPS0_POSITION                              0x0
#define _T0CON1_CKPS0_SIZE                                  0x1
#define _T0CON1_CKPS0_LENGTH                                0x1
#define _T0CON1_CKPS0_MASK                                  0x1
#define _T0CON1_CKPS1_POSN                                  0x1
#define _T0CON1_CKPS1_POSITION                              0x1
#define _T0CON1_CKPS1_SIZE                                  0x1
#define _T0CON1_CKPS1_LENGTH                                0x1
#define _T0CON1_CKPS1_MASK                                  0x2
#define _T0CON1_CKPS2_POSN                                  0x2
#define _T0CON1_CKPS2_POSITION                              0x2
#define _T0CON1_CKPS2_SIZE                                  0x1
#define _T0CON1_CKPS2_LENGTH                                0x1
#define _T0CON1_CKPS2_MASK                                  0x4
#define _T0CON1_CKPS3_POSN                                  0x3
#define _T0CON1_CKPS3_POSITION                              0x3
#define _T0CON1_CKPS3_SIZE                                  0x1
#define _T0CON1_CKPS3_LENGTH                                0x1
#define _T0CON1_CKPS3_MASK                                  0x8
#define _T0CON1_T0ASYNC_POSN                                0x4
#define _T0CON1_T0ASYNC_POSITION                            0x4
#define _T0CON1_T0ASYNC_SIZE                                0x1
#define _T0CON1_T0ASYNC_LENGTH                              0x1
#define _T0CON1_T0ASYNC_MASK                                0x10
#define _T0CON1_CS0_POSN                                    0x5
#define _T0CON1_CS0_POSITION                                0x5
#define _T0CON1_CS0_SIZE                                    0x1
#define _T0CON1_CS0_LENGTH                                  0x1
#define _T0CON1_CS0_MASK                                    0x20
#define _T0CON1_CS1_POSN                                    0x6
#define _T0CON1_CS1_POSITION                                0x6
#define _T0CON1_CS1_SIZE                                    0x1
#define _T0CON1_CS1_LENGTH                                  0x1
#define _T0CON1_CS1_MASK                                    0x40
#define _T0CON1_CS2_POSN                                    0x7
#define _T0CON1_CS2_POSITION                                0x7
#define _T0CON1_CS2_SIZE                                    0x1
#define _T0CON1_CS2_LENGTH                                  0x1
#define _T0CON1_CS2_MASK                                    0x80
#define _T0CON1_T0CKPS_POSN                                 0x0
#define _T0CON1_T0CKPS_POSITION                             0x0
#define _T0CON1_T0CKPS_SIZE                                 0x4
#define _T0CON1_T0CKPS_LENGTH                               0x4
#define _T0CON1_T0CKPS_MASK                                 0xF
#define _T0CON1_T0CS_POSN                                   0x5
#define _T0CON1_T0CS_POSITION                               0x5
#define _T0CON1_T0CS_SIZE                                   0x3
#define _T0CON1_T0CS_LENGTH                                 0x3
#define _T0CON1_T0CS_MASK                                   0xE0
#define _T0CON1_T0CKPS0_POSN                                0x0
#define _T0CON1_T0CKPS0_POSITION                            0x0
#define _T0CON1_T0CKPS0_SIZE                                0x1
#define _T0CON1_T0CKPS0_LENGTH                              0x1
#define _T0CON1_T0CKPS0_MASK                                0x1
#define _T0CON1_T0CKPS1_POSN                                0x1
#define _T0CON1_T0CKPS1_POSITION                            0x1
#define _T0CON1_T0CKPS1_SIZE                                0x1
#define _T0CON1_T0CKPS1_LENGTH                              0x1
#define _T0CON1_T0CKPS1_MASK                                0x2
#define _T0CON1_T0CKPS2_POSN                                0x2
#define _T0CON1_T0CKPS2_POSITION                            0x2
#define _T0CON1_T0CKPS2_SIZE                                0x1
#define _T0CON1_T0CKPS2_LENGTH                              0x1
#define _T0CON1_T0CKPS2_MASK                                0x4
#define _T0CON1_T0CKPS3_POSN                                0x3
#define _T0CON1_T0CKPS3_POSITION                            0x3
#define _T0CON1_T0CKPS3_SIZE                                0x1
#define _T0CON1_T0CKPS3_LENGTH                              0x1
#define _T0CON1_T0CKPS3_MASK                                0x8
#define _T0CON1_T0CS0_POSN                                  0x5
#define _T0CON1_T0CS0_POSITION                              0x5
#define _T0CON1_T0CS0_SIZE                                  0x1
#define _T0CON1_T0CS0_LENGTH                                0x1
#define _T0CON1_T0CS0_MASK                                  0x20
#define _T0CON1_T0CS1_POSN                                  0x6
#define _T0CON1_T0CS1_POSITION                              0x6
#define _T0CON1_T0CS1_SIZE                                  0x1
#define _T0CON1_T0CS1_LENGTH                                0x1
#define _T0CON1_T0CS1_MASK                                  0x40
#define _T0CON1_T0CS2_POSN                                  0x7
#define _T0CON1_T0CS2_POSITION                              0x7
#define _T0CON1_T0CS2_SIZE                                  0x1
#define _T0CON1_T0CS2_LENGTH                                0x1
#define _T0CON1_T0CS2_MASK                                  0x80

// Register: FVRCON
#define FVRCON FVRCON
extern volatile unsigned char           FVRCON              __at(0x20C);
#ifndef _LIB_BUILD
asm("FVRCON equ 020Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADFVR                  :2;
        unsigned CDAFVR                 :2;
        unsigned TSRNG                  :1;
        unsigned TSEN                   :1;
        unsigned RDY                    :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned ADFVR0                 :1;
        unsigned ADFVR1                 :1;
        unsigned CDAFVR0                :1;
        unsigned CDAFVR1                :1;
        unsigned                        :2;
        unsigned FVRRDY                 :1;
        unsigned FVREN                  :1;
    };
} FVRCONbits_t;
extern volatile FVRCONbits_t FVRCONbits __at(0x20C);
// bitfield macros
#define _FVRCON_ADFVR_POSN                                  0x0
#define _FVRCON_ADFVR_POSITION                              0x0
#define _FVRCON_ADFVR_SIZE                                  0x2
#define _FVRCON_ADFVR_LENGTH                                0x2
#define _FVRCON_ADFVR_MASK                                  0x3
#define _FVRCON_CDAFVR_POSN                                 0x2
#define _FVRCON_CDAFVR_POSITION                             0x2
#define _FVRCON_CDAFVR_SIZE                                 0x2
#define _FVRCON_CDAFVR_LENGTH                               0x2
#define _FVRCON_CDAFVR_MASK                                 0xC
#define _FVRCON_TSRNG_POSN                                  0x4
#define _FVRCON_TSRNG_POSITION                              0x4
#define _FVRCON_TSRNG_SIZE                                  0x1
#define _FVRCON_TSRNG_LENGTH                                0x1
#define _FVRCON_TSRNG_MASK                                  0x10
#define _FVRCON_TSEN_POSN                                   0x5
#define _FVRCON_TSEN_POSITION                               0x5
#define _FVRCON_TSEN_SIZE                                   0x1
#define _FVRCON_TSEN_LENGTH                                 0x1
#define _FVRCON_TSEN_MASK                                   0x20
#define _FVRCON_RDY_POSN                                    0x6
#define _FVRCON_RDY_POSITION                                0x6
#define _FVRCON_RDY_SIZE                                    0x1
#define _FVRCON_RDY_LENGTH                                  0x1
#define _FVRCON_RDY_MASK                                    0x40
#define _FVRCON_EN_POSN                                     0x7
#define _FVRCON_EN_POSITION                                 0x7
#define _FVRCON_EN_SIZE                                     0x1
#define _FVRCON_EN_LENGTH                                   0x1
#define _FVRCON_EN_MASK                                     0x80
#define _FVRCON_ADFVR0_POSN                                 0x0
#define _FVRCON_ADFVR0_POSITION                             0x0
#define _FVRCON_ADFVR0_SIZE                                 0x1
#define _FVRCON_ADFVR0_LENGTH                               0x1
#define _FVRCON_ADFVR0_MASK                                 0x1
#define _FVRCON_ADFVR1_POSN                                 0x1
#define _FVRCON_ADFVR1_POSITION                             0x1
#define _FVRCON_ADFVR1_SIZE                                 0x1
#define _FVRCON_ADFVR1_LENGTH                               0x1
#define _FVRCON_ADFVR1_MASK                                 0x2
#define _FVRCON_CDAFVR0_POSN                                0x2
#define _FVRCON_CDAFVR0_POSITION                            0x2
#define _FVRCON_CDAFVR0_SIZE                                0x1
#define _FVRCON_CDAFVR0_LENGTH                              0x1
#define _FVRCON_CDAFVR0_MASK                                0x4
#define _FVRCON_CDAFVR1_POSN                                0x3
#define _FVRCON_CDAFVR1_POSITION                            0x3
#define _FVRCON_CDAFVR1_SIZE                                0x1
#define _FVRCON_CDAFVR1_LENGTH                              0x1
#define _FVRCON_CDAFVR1_MASK                                0x8
#define _FVRCON_FVRRDY_POSN                                 0x6
#define _FVRCON_FVRRDY_POSITION                             0x6
#define _FVRCON_FVRRDY_SIZE                                 0x1
#define _FVRCON_FVRRDY_LENGTH                               0x1
#define _FVRCON_FVRRDY_MASK                                 0x40
#define _FVRCON_FVREN_POSN                                  0x7
#define _FVRCON_FVREN_POSITION                              0x7
#define _FVRCON_FVREN_SIZE                                  0x1
#define _FVRCON_FVREN_LENGTH                                0x1
#define _FVRCON_FVREN_MASK                                  0x80

// Register: CPCON
#define CPCON CPCON
extern volatile unsigned char           CPCON               __at(0x20D);
#ifndef _LIB_BUILD
asm("CPCON equ 020Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPRDY                  :1;
        unsigned CPT                    :1;
        unsigned CPREQ                  :1;
        unsigned                        :2;
        unsigned CPOS                   :1;
        unsigned CPON                   :2;
    };
} CPCONbits_t;
extern volatile CPCONbits_t CPCONbits __at(0x20D);
// bitfield macros
#define _CPCON_CPRDY_POSN                                   0x0
#define _CPCON_CPRDY_POSITION                               0x0
#define _CPCON_CPRDY_SIZE                                   0x1
#define _CPCON_CPRDY_LENGTH                                 0x1
#define _CPCON_CPRDY_MASK                                   0x1
#define _CPCON_CPT_POSN                                     0x1
#define _CPCON_CPT_POSITION                                 0x1
#define _CPCON_CPT_SIZE                                     0x1
#define _CPCON_CPT_LENGTH                                   0x1
#define _CPCON_CPT_MASK                                     0x2
#define _CPCON_CPREQ_POSN                                   0x2
#define _CPCON_CPREQ_POSITION                               0x2
#define _CPCON_CPREQ_SIZE                                   0x1
#define _CPCON_CPREQ_LENGTH                                 0x1
#define _CPCON_CPREQ_MASK                                   0x4
#define _CPCON_CPOS_POSN                                    0x5
#define _CPCON_CPOS_POSITION                                0x5
#define _CPCON_CPOS_SIZE                                    0x1
#define _CPCON_CPOS_LENGTH                                  0x1
#define _CPCON_CPOS_MASK                                    0x20
#define _CPCON_CPON_POSN                                    0x6
#define _CPCON_CPON_POSITION                                0x6
#define _CPCON_CPON_SIZE                                    0x2
#define _CPCON_CPON_LENGTH                                  0x2
#define _CPCON_CPON_MASK                                    0xC0

// Register: CPUDOZE
#define CPUDOZE CPUDOZE
extern volatile unsigned char           CPUDOZE             __at(0x28C);
#ifndef _LIB_BUILD
asm("CPUDOZE equ 028Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DOZE                   :3;
        unsigned                        :1;
        unsigned DOE                    :1;
        unsigned ROI                    :1;
        unsigned DOZEN                  :1;
        unsigned IDLEN                  :1;
    };
} CPUDOZEbits_t;
extern volatile CPUDOZEbits_t CPUDOZEbits __at(0x28C);
// bitfield macros
#define _CPUDOZE_DOZE_POSN                                  0x0
#define _CPUDOZE_DOZE_POSITION                              0x0
#define _CPUDOZE_DOZE_SIZE                                  0x3
#define _CPUDOZE_DOZE_LENGTH                                0x3
#define _CPUDOZE_DOZE_MASK                                  0x7
#define _CPUDOZE_DOE_POSN                                   0x4
#define _CPUDOZE_DOE_POSITION                               0x4
#define _CPUDOZE_DOE_SIZE                                   0x1
#define _CPUDOZE_DOE_LENGTH                                 0x1
#define _CPUDOZE_DOE_MASK                                   0x10
#define _CPUDOZE_ROI_POSN                                   0x5
#define _CPUDOZE_ROI_POSITION                               0x5
#define _CPUDOZE_ROI_SIZE                                   0x1
#define _CPUDOZE_ROI_LENGTH                                 0x1
#define _CPUDOZE_ROI_MASK                                   0x20
#define _CPUDOZE_DOZEN_POSN                                 0x6
#define _CPUDOZE_DOZEN_POSITION                             0x6
#define _CPUDOZE_DOZEN_SIZE                                 0x1
#define _CPUDOZE_DOZEN_LENGTH                               0x1
#define _CPUDOZE_DOZEN_MASK                                 0x40
#define _CPUDOZE_IDLEN_POSN                                 0x7
#define _CPUDOZE_IDLEN_POSITION                             0x7
#define _CPUDOZE_IDLEN_SIZE                                 0x1
#define _CPUDOZE_IDLEN_LENGTH                               0x1
#define _CPUDOZE_IDLEN_MASK                                 0x80

// Register: OSCCON1
#define OSCCON1 OSCCON1
extern volatile unsigned char           OSCCON1             __at(0x28D);
#ifndef _LIB_BUILD
asm("OSCCON1 equ 028Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NDIV                   :4;
        unsigned NOSC                   :3;
    };
    struct {
        unsigned NDIV0                  :1;
        unsigned NDIV1                  :1;
        unsigned NDIV2                  :1;
        unsigned NDIV3                  :1;
        unsigned NOSC0                  :1;
        unsigned NOSC1                  :1;
        unsigned NOSC2                  :1;
    };
} OSCCON1bits_t;
extern volatile OSCCON1bits_t OSCCON1bits __at(0x28D);
// bitfield macros
#define _OSCCON1_NDIV_POSN                                  0x0
#define _OSCCON1_NDIV_POSITION                              0x0
#define _OSCCON1_NDIV_SIZE                                  0x4
#define _OSCCON1_NDIV_LENGTH                                0x4
#define _OSCCON1_NDIV_MASK                                  0xF
#define _OSCCON1_NOSC_POSN                                  0x4
#define _OSCCON1_NOSC_POSITION                              0x4
#define _OSCCON1_NOSC_SIZE                                  0x3
#define _OSCCON1_NOSC_LENGTH                                0x3
#define _OSCCON1_NOSC_MASK                                  0x70
#define _OSCCON1_NDIV0_POSN                                 0x0
#define _OSCCON1_NDIV0_POSITION                             0x0
#define _OSCCON1_NDIV0_SIZE                                 0x1
#define _OSCCON1_NDIV0_LENGTH                               0x1
#define _OSCCON1_NDIV0_MASK                                 0x1
#define _OSCCON1_NDIV1_POSN                                 0x1
#define _OSCCON1_NDIV1_POSITION                             0x1
#define _OSCCON1_NDIV1_SIZE                                 0x1
#define _OSCCON1_NDIV1_LENGTH                               0x1
#define _OSCCON1_NDIV1_MASK                                 0x2
#define _OSCCON1_NDIV2_POSN                                 0x2
#define _OSCCON1_NDIV2_POSITION                             0x2
#define _OSCCON1_NDIV2_SIZE                                 0x1
#define _OSCCON1_NDIV2_LENGTH                               0x1
#define _OSCCON1_NDIV2_MASK                                 0x4
#define _OSCCON1_NDIV3_POSN                                 0x3
#define _OSCCON1_NDIV3_POSITION                             0x3
#define _OSCCON1_NDIV3_SIZE                                 0x1
#define _OSCCON1_NDIV3_LENGTH                               0x1
#define _OSCCON1_NDIV3_MASK                                 0x8
#define _OSCCON1_NOSC0_POSN                                 0x4
#define _OSCCON1_NOSC0_POSITION                             0x4
#define _OSCCON1_NOSC0_SIZE                                 0x1
#define _OSCCON1_NOSC0_LENGTH                               0x1
#define _OSCCON1_NOSC0_MASK                                 0x10
#define _OSCCON1_NOSC1_POSN                                 0x5
#define _OSCCON1_NOSC1_POSITION                             0x5
#define _OSCCON1_NOSC1_SIZE                                 0x1
#define _OSCCON1_NOSC1_LENGTH                               0x1
#define _OSCCON1_NOSC1_MASK                                 0x20
#define _OSCCON1_NOSC2_POSN                                 0x6
#define _OSCCON1_NOSC2_POSITION                             0x6
#define _OSCCON1_NOSC2_SIZE                                 0x1
#define _OSCCON1_NOSC2_LENGTH                               0x1
#define _OSCCON1_NOSC2_MASK                                 0x40

// Register: OSCCON2
#define OSCCON2 OSCCON2
extern volatile unsigned char           OSCCON2             __at(0x28E);
#ifndef _LIB_BUILD
asm("OSCCON2 equ 028Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CDIV                   :4;
        unsigned COSC                   :3;
    };
    struct {
        unsigned CDIV0                  :1;
        unsigned CDIV1                  :1;
        unsigned CDIV2                  :1;
        unsigned CDIV3                  :1;
        unsigned COSC0                  :1;
        unsigned COSC1                  :1;
        unsigned COSC2                  :1;
    };
} OSCCON2bits_t;
extern volatile OSCCON2bits_t OSCCON2bits __at(0x28E);
// bitfield macros
#define _OSCCON2_CDIV_POSN                                  0x0
#define _OSCCON2_CDIV_POSITION                              0x0
#define _OSCCON2_CDIV_SIZE                                  0x4
#define _OSCCON2_CDIV_LENGTH                                0x4
#define _OSCCON2_CDIV_MASK                                  0xF
#define _OSCCON2_COSC_POSN                                  0x4
#define _OSCCON2_COSC_POSITION                              0x4
#define _OSCCON2_COSC_SIZE                                  0x3
#define _OSCCON2_COSC_LENGTH                                0x3
#define _OSCCON2_COSC_MASK                                  0x70
#define _OSCCON2_CDIV0_POSN                                 0x0
#define _OSCCON2_CDIV0_POSITION                             0x0
#define _OSCCON2_CDIV0_SIZE                                 0x1
#define _OSCCON2_CDIV0_LENGTH                               0x1
#define _OSCCON2_CDIV0_MASK                                 0x1
#define _OSCCON2_CDIV1_POSN                                 0x1
#define _OSCCON2_CDIV1_POSITION                             0x1
#define _OSCCON2_CDIV1_SIZE                                 0x1
#define _OSCCON2_CDIV1_LENGTH                               0x1
#define _OSCCON2_CDIV1_MASK                                 0x2
#define _OSCCON2_CDIV2_POSN                                 0x2
#define _OSCCON2_CDIV2_POSITION                             0x2
#define _OSCCON2_CDIV2_SIZE                                 0x1
#define _OSCCON2_CDIV2_LENGTH                               0x1
#define _OSCCON2_CDIV2_MASK                                 0x4
#define _OSCCON2_CDIV3_POSN                                 0x3
#define _OSCCON2_CDIV3_POSITION                             0x3
#define _OSCCON2_CDIV3_SIZE                                 0x1
#define _OSCCON2_CDIV3_LENGTH                               0x1
#define _OSCCON2_CDIV3_MASK                                 0x8
#define _OSCCON2_COSC0_POSN                                 0x4
#define _OSCCON2_COSC0_POSITION                             0x4
#define _OSCCON2_COSC0_SIZE                                 0x1
#define _OSCCON2_COSC0_LENGTH                               0x1
#define _OSCCON2_COSC0_MASK                                 0x10
#define _OSCCON2_COSC1_POSN                                 0x5
#define _OSCCON2_COSC1_POSITION                             0x5
#define _OSCCON2_COSC1_SIZE                                 0x1
#define _OSCCON2_COSC1_LENGTH                               0x1
#define _OSCCON2_COSC1_MASK                                 0x20
#define _OSCCON2_COSC2_POSN                                 0x6
#define _OSCCON2_COSC2_POSITION                             0x6
#define _OSCCON2_COSC2_SIZE                                 0x1
#define _OSCCON2_COSC2_LENGTH                               0x1
#define _OSCCON2_COSC2_MASK                                 0x40

// Register: OSCCON3
#define OSCCON3 OSCCON3
extern volatile unsigned char           OSCCON3             __at(0x28F);
#ifndef _LIB_BUILD
asm("OSCCON3 equ 028Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned NOSCR                  :1;
        unsigned ORDY                   :1;
        unsigned                        :2;
        unsigned CSWHOLD                :1;
    };
} OSCCON3bits_t;
extern volatile OSCCON3bits_t OSCCON3bits __at(0x28F);
// bitfield macros
#define _OSCCON3_NOSCR_POSN                                 0x3
#define _OSCCON3_NOSCR_POSITION                             0x3
#define _OSCCON3_NOSCR_SIZE                                 0x1
#define _OSCCON3_NOSCR_LENGTH                               0x1
#define _OSCCON3_NOSCR_MASK                                 0x8
#define _OSCCON3_ORDY_POSN                                  0x4
#define _OSCCON3_ORDY_POSITION                              0x4
#define _OSCCON3_ORDY_SIZE                                  0x1
#define _OSCCON3_ORDY_LENGTH                                0x1
#define _OSCCON3_ORDY_MASK                                  0x10
#define _OSCCON3_CSWHOLD_POSN                               0x7
#define _OSCCON3_CSWHOLD_POSITION                           0x7
#define _OSCCON3_CSWHOLD_SIZE                               0x1
#define _OSCCON3_CSWHOLD_LENGTH                             0x1
#define _OSCCON3_CSWHOLD_MASK                               0x80

// Register: OSCSTAT
#define OSCSTAT OSCSTAT
extern volatile unsigned char           OSCSTAT             __at(0x290);
#ifndef _LIB_BUILD
asm("OSCSTAT equ 0290h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLLR                   :1;
        unsigned SFOR                   :1;
        unsigned ADOR                   :1;
        unsigned                        :1;
        unsigned LFOR                   :1;
        unsigned MFOR                   :1;
        unsigned HFOR                   :1;
        unsigned EXTOR                  :1;
    };
} OSCSTATbits_t;
extern volatile OSCSTATbits_t OSCSTATbits __at(0x290);
// bitfield macros
#define _OSCSTAT_PLLR_POSN                                  0x0
#define _OSCSTAT_PLLR_POSITION                              0x0
#define _OSCSTAT_PLLR_SIZE                                  0x1
#define _OSCSTAT_PLLR_LENGTH                                0x1
#define _OSCSTAT_PLLR_MASK                                  0x1
#define _OSCSTAT_SFOR_POSN                                  0x1
#define _OSCSTAT_SFOR_POSITION                              0x1
#define _OSCSTAT_SFOR_SIZE                                  0x1
#define _OSCSTAT_SFOR_LENGTH                                0x1
#define _OSCSTAT_SFOR_MASK                                  0x2
#define _OSCSTAT_ADOR_POSN                                  0x2
#define _OSCSTAT_ADOR_POSITION                              0x2
#define _OSCSTAT_ADOR_SIZE                                  0x1
#define _OSCSTAT_ADOR_LENGTH                                0x1
#define _OSCSTAT_ADOR_MASK                                  0x4
#define _OSCSTAT_LFOR_POSN                                  0x4
#define _OSCSTAT_LFOR_POSITION                              0x4
#define _OSCSTAT_LFOR_SIZE                                  0x1
#define _OSCSTAT_LFOR_LENGTH                                0x1
#define _OSCSTAT_LFOR_MASK                                  0x10
#define _OSCSTAT_MFOR_POSN                                  0x5
#define _OSCSTAT_MFOR_POSITION                              0x5
#define _OSCSTAT_MFOR_SIZE                                  0x1
#define _OSCSTAT_MFOR_LENGTH                                0x1
#define _OSCSTAT_MFOR_MASK                                  0x20
#define _OSCSTAT_HFOR_POSN                                  0x6
#define _OSCSTAT_HFOR_POSITION                              0x6
#define _OSCSTAT_HFOR_SIZE                                  0x1
#define _OSCSTAT_HFOR_LENGTH                                0x1
#define _OSCSTAT_HFOR_MASK                                  0x40
#define _OSCSTAT_EXTOR_POSN                                 0x7
#define _OSCSTAT_EXTOR_POSITION                             0x7
#define _OSCSTAT_EXTOR_SIZE                                 0x1
#define _OSCSTAT_EXTOR_LENGTH                               0x1
#define _OSCSTAT_EXTOR_MASK                                 0x80

// Register: OSCEN
#define OSCEN OSCEN
extern volatile unsigned char           OSCEN               __at(0x291);
#ifndef _LIB_BUILD
asm("OSCEN equ 0291h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLLEN                  :1;
        unsigned                        :1;
        unsigned ADOEN                  :1;
        unsigned                        :1;
        unsigned LFOEN                  :1;
        unsigned MFOEN                  :1;
        unsigned HFOEN                  :1;
        unsigned EXTOEN                 :1;
    };
} OSCENbits_t;
extern volatile OSCENbits_t OSCENbits __at(0x291);
// bitfield macros
#define _OSCEN_PLLEN_POSN                                   0x0
#define _OSCEN_PLLEN_POSITION                               0x0
#define _OSCEN_PLLEN_SIZE                                   0x1
#define _OSCEN_PLLEN_LENGTH                                 0x1
#define _OSCEN_PLLEN_MASK                                   0x1
#define _OSCEN_ADOEN_POSN                                   0x2
#define _OSCEN_ADOEN_POSITION                               0x2
#define _OSCEN_ADOEN_SIZE                                   0x1
#define _OSCEN_ADOEN_LENGTH                                 0x1
#define _OSCEN_ADOEN_MASK                                   0x4
#define _OSCEN_LFOEN_POSN                                   0x4
#define _OSCEN_LFOEN_POSITION                               0x4
#define _OSCEN_LFOEN_SIZE                                   0x1
#define _OSCEN_LFOEN_LENGTH                                 0x1
#define _OSCEN_LFOEN_MASK                                   0x10
#define _OSCEN_MFOEN_POSN                                   0x5
#define _OSCEN_MFOEN_POSITION                               0x5
#define _OSCEN_MFOEN_SIZE                                   0x1
#define _OSCEN_MFOEN_LENGTH                                 0x1
#define _OSCEN_MFOEN_MASK                                   0x20
#define _OSCEN_HFOEN_POSN                                   0x6
#define _OSCEN_HFOEN_POSITION                               0x6
#define _OSCEN_HFOEN_SIZE                                   0x1
#define _OSCEN_HFOEN_LENGTH                                 0x1
#define _OSCEN_HFOEN_MASK                                   0x40
#define _OSCEN_EXTOEN_POSN                                  0x7
#define _OSCEN_EXTOEN_POSITION                              0x7
#define _OSCEN_EXTOEN_SIZE                                  0x1
#define _OSCEN_EXTOEN_LENGTH                                0x1
#define _OSCEN_EXTOEN_MASK                                  0x80

// Register: OSCTUNE
#define OSCTUNE OSCTUNE
extern volatile unsigned char           OSCTUNE             __at(0x292);
#ifndef _LIB_BUILD
asm("OSCTUNE equ 0292h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TUN                    :6;
    };
    struct {
        unsigned TUN0                   :1;
        unsigned TUN1                   :1;
        unsigned TUN2                   :1;
        unsigned TUN3                   :1;
        unsigned TUN4                   :1;
        unsigned TUN5                   :1;
    };
} OSCTUNEbits_t;
extern volatile OSCTUNEbits_t OSCTUNEbits __at(0x292);
// bitfield macros
#define _OSCTUNE_TUN_POSN                                   0x0
#define _OSCTUNE_TUN_POSITION                               0x0
#define _OSCTUNE_TUN_SIZE                                   0x6
#define _OSCTUNE_TUN_LENGTH                                 0x6
#define _OSCTUNE_TUN_MASK                                   0x3F
#define _OSCTUNE_TUN0_POSN                                  0x0
#define _OSCTUNE_TUN0_POSITION                              0x0
#define _OSCTUNE_TUN0_SIZE                                  0x1
#define _OSCTUNE_TUN0_LENGTH                                0x1
#define _OSCTUNE_TUN0_MASK                                  0x1
#define _OSCTUNE_TUN1_POSN                                  0x1
#define _OSCTUNE_TUN1_POSITION                              0x1
#define _OSCTUNE_TUN1_SIZE                                  0x1
#define _OSCTUNE_TUN1_LENGTH                                0x1
#define _OSCTUNE_TUN1_MASK                                  0x2
#define _OSCTUNE_TUN2_POSN                                  0x2
#define _OSCTUNE_TUN2_POSITION                              0x2
#define _OSCTUNE_TUN2_SIZE                                  0x1
#define _OSCTUNE_TUN2_LENGTH                                0x1
#define _OSCTUNE_TUN2_MASK                                  0x4
#define _OSCTUNE_TUN3_POSN                                  0x3
#define _OSCTUNE_TUN3_POSITION                              0x3
#define _OSCTUNE_TUN3_SIZE                                  0x1
#define _OSCTUNE_TUN3_LENGTH                                0x1
#define _OSCTUNE_TUN3_MASK                                  0x8
#define _OSCTUNE_TUN4_POSN                                  0x4
#define _OSCTUNE_TUN4_POSITION                              0x4
#define _OSCTUNE_TUN4_SIZE                                  0x1
#define _OSCTUNE_TUN4_LENGTH                                0x1
#define _OSCTUNE_TUN4_MASK                                  0x10
#define _OSCTUNE_TUN5_POSN                                  0x5
#define _OSCTUNE_TUN5_POSITION                              0x5
#define _OSCTUNE_TUN5_SIZE                                  0x1
#define _OSCTUNE_TUN5_LENGTH                                0x1
#define _OSCTUNE_TUN5_MASK                                  0x20

// Register: OSCFRQ
#define OSCFRQ OSCFRQ
extern volatile unsigned char           OSCFRQ              __at(0x293);
#ifndef _LIB_BUILD
asm("OSCFRQ equ 0293h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FRQ                    :3;
    };
    struct {
        unsigned FRQ0                   :1;
        unsigned FRQ1                   :1;
        unsigned FRQ2                   :1;
    };
} OSCFRQbits_t;
extern volatile OSCFRQbits_t OSCFRQbits __at(0x293);
// bitfield macros
#define _OSCFRQ_FRQ_POSN                                    0x0
#define _OSCFRQ_FRQ_POSITION                                0x0
#define _OSCFRQ_FRQ_SIZE                                    0x3
#define _OSCFRQ_FRQ_LENGTH                                  0x3
#define _OSCFRQ_FRQ_MASK                                    0x7
#define _OSCFRQ_FRQ0_POSN                                   0x0
#define _OSCFRQ_FRQ0_POSITION                               0x0
#define _OSCFRQ_FRQ0_SIZE                                   0x1
#define _OSCFRQ_FRQ0_LENGTH                                 0x1
#define _OSCFRQ_FRQ0_MASK                                   0x1
#define _OSCFRQ_FRQ1_POSN                                   0x1
#define _OSCFRQ_FRQ1_POSITION                               0x1
#define _OSCFRQ_FRQ1_SIZE                                   0x1
#define _OSCFRQ_FRQ1_LENGTH                                 0x1
#define _OSCFRQ_FRQ1_MASK                                   0x2
#define _OSCFRQ_FRQ2_POSN                                   0x2
#define _OSCFRQ_FRQ2_POSITION                               0x2
#define _OSCFRQ_FRQ2_SIZE                                   0x1
#define _OSCFRQ_FRQ2_LENGTH                                 0x1
#define _OSCFRQ_FRQ2_MASK                                   0x4

// Register: TMR1
#define TMR1 TMR1
extern volatile unsigned short          TMR1                __at(0x30C);
#ifndef _LIB_BUILD
asm("TMR1 equ 030Ch");
#endif

// Register: TMR1L
#define TMR1L TMR1L
extern volatile unsigned char           TMR1L               __at(0x30C);
#ifndef _LIB_BUILD
asm("TMR1L equ 030Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1L                  :8;
    };
    struct {
        unsigned TMR1L0                 :1;
        unsigned TMR1L1                 :1;
        unsigned TMR1L2                 :1;
        unsigned TMR1L3                 :1;
        unsigned TMR1L4                 :1;
        unsigned TMR1L5                 :1;
        unsigned TMR1L6                 :1;
        unsigned TMR1L7                 :1;
    };
    struct {
        unsigned TMR10                  :1;
        unsigned TMR11                  :1;
        unsigned TMR12                  :1;
        unsigned TMR13                  :1;
        unsigned TMR14                  :1;
        unsigned TMR15                  :1;
        unsigned TMR16                  :1;
        unsigned TMR17                  :1;
    };
    struct {
        unsigned CAL01                  :1;
        unsigned CAL11                  :1;
        unsigned CAL21                  :1;
        unsigned CAL31                  :1;
        unsigned CAL41                  :1;
        unsigned CAL51                  :1;
        unsigned CAL61                  :1;
        unsigned CAL71                  :1;
    };
} TMR1Lbits_t;
extern volatile TMR1Lbits_t TMR1Lbits __at(0x30C);
// bitfield macros
#define _TMR1L_TMR1L_POSN                                   0x0
#define _TMR1L_TMR1L_POSITION                               0x0
#define _TMR1L_TMR1L_SIZE                                   0x8
#define _TMR1L_TMR1L_LENGTH                                 0x8
#define _TMR1L_TMR1L_MASK                                   0xFF
#define _TMR1L_TMR1L0_POSN                                  0x0
#define _TMR1L_TMR1L0_POSITION                              0x0
#define _TMR1L_TMR1L0_SIZE                                  0x1
#define _TMR1L_TMR1L0_LENGTH                                0x1
#define _TMR1L_TMR1L0_MASK                                  0x1
#define _TMR1L_TMR1L1_POSN                                  0x1
#define _TMR1L_TMR1L1_POSITION                              0x1
#define _TMR1L_TMR1L1_SIZE                                  0x1
#define _TMR1L_TMR1L1_LENGTH                                0x1
#define _TMR1L_TMR1L1_MASK                                  0x2
#define _TMR1L_TMR1L2_POSN                                  0x2
#define _TMR1L_TMR1L2_POSITION                              0x2
#define _TMR1L_TMR1L2_SIZE                                  0x1
#define _TMR1L_TMR1L2_LENGTH                                0x1
#define _TMR1L_TMR1L2_MASK                                  0x4
#define _TMR1L_TMR1L3_POSN                                  0x3
#define _TMR1L_TMR1L3_POSITION                              0x3
#define _TMR1L_TMR1L3_SIZE                                  0x1
#define _TMR1L_TMR1L3_LENGTH                                0x1
#define _TMR1L_TMR1L3_MASK                                  0x8
#define _TMR1L_TMR1L4_POSN                                  0x4
#define _TMR1L_TMR1L4_POSITION                              0x4
#define _TMR1L_TMR1L4_SIZE                                  0x1
#define _TMR1L_TMR1L4_LENGTH                                0x1
#define _TMR1L_TMR1L4_MASK                                  0x10
#define _TMR1L_TMR1L5_POSN                                  0x5
#define _TMR1L_TMR1L5_POSITION                              0x5
#define _TMR1L_TMR1L5_SIZE                                  0x1
#define _TMR1L_TMR1L5_LENGTH                                0x1
#define _TMR1L_TMR1L5_MASK                                  0x20
#define _TMR1L_TMR1L6_POSN                                  0x6
#define _TMR1L_TMR1L6_POSITION                              0x6
#define _TMR1L_TMR1L6_SIZE                                  0x1
#define _TMR1L_TMR1L6_LENGTH                                0x1
#define _TMR1L_TMR1L6_MASK                                  0x40
#define _TMR1L_TMR1L7_POSN                                  0x7
#define _TMR1L_TMR1L7_POSITION                              0x7
#define _TMR1L_TMR1L7_SIZE                                  0x1
#define _TMR1L_TMR1L7_LENGTH                                0x1
#define _TMR1L_TMR1L7_MASK                                  0x80
#define _TMR1L_TMR10_POSN                                   0x0
#define _TMR1L_TMR10_POSITION                               0x0
#define _TMR1L_TMR10_SIZE                                   0x1
#define _TMR1L_TMR10_LENGTH                                 0x1
#define _TMR1L_TMR10_MASK                                   0x1
#define _TMR1L_TMR11_POSN                                   0x1
#define _TMR1L_TMR11_POSITION                               0x1
#define _TMR1L_TMR11_SIZE                                   0x1
#define _TMR1L_TMR11_LENGTH                                 0x1
#define _TMR1L_TMR11_MASK                                   0x2
#define _TMR1L_TMR12_POSN                                   0x2
#define _TMR1L_TMR12_POSITION                               0x2
#define _TMR1L_TMR12_SIZE                                   0x1
#define _TMR1L_TMR12_LENGTH                                 0x1
#define _TMR1L_TMR12_MASK                                   0x4
#define _TMR1L_TMR13_POSN                                   0x3
#define _TMR1L_TMR13_POSITION                               0x3
#define _TMR1L_TMR13_SIZE                                   0x1
#define _TMR1L_TMR13_LENGTH                                 0x1
#define _TMR1L_TMR13_MASK                                   0x8
#define _TMR1L_TMR14_POSN                                   0x4
#define _TMR1L_TMR14_POSITION                               0x4
#define _TMR1L_TMR14_SIZE                                   0x1
#define _TMR1L_TMR14_LENGTH                                 0x1
#define _TMR1L_TMR14_MASK                                   0x10
#define _TMR1L_TMR15_POSN                                   0x5
#define _TMR1L_TMR15_POSITION                               0x5
#define _TMR1L_TMR15_SIZE                                   0x1
#define _TMR1L_TMR15_LENGTH                                 0x1
#define _TMR1L_TMR15_MASK                                   0x20
#define _TMR1L_TMR16_POSN                                   0x6
#define _TMR1L_TMR16_POSITION                               0x6
#define _TMR1L_TMR16_SIZE                                   0x1
#define _TMR1L_TMR16_LENGTH                                 0x1
#define _TMR1L_TMR16_MASK                                   0x40
#define _TMR1L_TMR17_POSN                                   0x7
#define _TMR1L_TMR17_POSITION                               0x7
#define _TMR1L_TMR17_SIZE                                   0x1
#define _TMR1L_TMR17_LENGTH                                 0x1
#define _TMR1L_TMR17_MASK                                   0x80
#define _TMR1L_CAL01_POSN                                   0x0
#define _TMR1L_CAL01_POSITION                               0x0
#define _TMR1L_CAL01_SIZE                                   0x1
#define _TMR1L_CAL01_LENGTH                                 0x1
#define _TMR1L_CAL01_MASK                                   0x1
#define _TMR1L_CAL11_POSN                                   0x1
#define _TMR1L_CAL11_POSITION                               0x1
#define _TMR1L_CAL11_SIZE                                   0x1
#define _TMR1L_CAL11_LENGTH                                 0x1
#define _TMR1L_CAL11_MASK                                   0x2
#define _TMR1L_CAL21_POSN                                   0x2
#define _TMR1L_CAL21_POSITION                               0x2
#define _TMR1L_CAL21_SIZE                                   0x1
#define _TMR1L_CAL21_LENGTH                                 0x1
#define _TMR1L_CAL21_MASK                                   0x4
#define _TMR1L_CAL31_POSN                                   0x3
#define _TMR1L_CAL31_POSITION                               0x3
#define _TMR1L_CAL31_SIZE                                   0x1
#define _TMR1L_CAL31_LENGTH                                 0x1
#define _TMR1L_CAL31_MASK                                   0x8
#define _TMR1L_CAL41_POSN                                   0x4
#define _TMR1L_CAL41_POSITION                               0x4
#define _TMR1L_CAL41_SIZE                                   0x1
#define _TMR1L_CAL41_LENGTH                                 0x1
#define _TMR1L_CAL41_MASK                                   0x10
#define _TMR1L_CAL51_POSN                                   0x5
#define _TMR1L_CAL51_POSITION                               0x5
#define _TMR1L_CAL51_SIZE                                   0x1
#define _TMR1L_CAL51_LENGTH                                 0x1
#define _TMR1L_CAL51_MASK                                   0x20
#define _TMR1L_CAL61_POSN                                   0x6
#define _TMR1L_CAL61_POSITION                               0x6
#define _TMR1L_CAL61_SIZE                                   0x1
#define _TMR1L_CAL61_LENGTH                                 0x1
#define _TMR1L_CAL61_MASK                                   0x40
#define _TMR1L_CAL71_POSN                                   0x7
#define _TMR1L_CAL71_POSITION                               0x7
#define _TMR1L_CAL71_SIZE                                   0x1
#define _TMR1L_CAL71_LENGTH                                 0x1
#define _TMR1L_CAL71_MASK                                   0x80

// Register: TMR1H
#define TMR1H TMR1H
extern volatile unsigned char           TMR1H               __at(0x30D);
#ifndef _LIB_BUILD
asm("TMR1H equ 030Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1H                  :8;
    };
    struct {
        unsigned TMR1H0                 :1;
        unsigned TMR1H1                 :1;
        unsigned TMR1H2                 :1;
        unsigned TMR1H3                 :1;
        unsigned TMR1H4                 :1;
        unsigned TMR1H5                 :1;
        unsigned TMR1H6                 :1;
        unsigned TMR1H7                 :1;
    };
    struct {
        unsigned TMR18                  :1;
        unsigned TMR19                  :1;
        unsigned TMR110                 :1;
        unsigned TMR111                 :1;
        unsigned TMR112                 :1;
        unsigned TMR113                 :1;
        unsigned TMR114                 :1;
        unsigned TMR115                 :1;
    };
} TMR1Hbits_t;
extern volatile TMR1Hbits_t TMR1Hbits __at(0x30D);
// bitfield macros
#define _TMR1H_TMR1H_POSN                                   0x0
#define _TMR1H_TMR1H_POSITION                               0x0
#define _TMR1H_TMR1H_SIZE                                   0x8
#define _TMR1H_TMR1H_LENGTH                                 0x8
#define _TMR1H_TMR1H_MASK                                   0xFF
#define _TMR1H_TMR1H0_POSN                                  0x0
#define _TMR1H_TMR1H0_POSITION                              0x0
#define _TMR1H_TMR1H0_SIZE                                  0x1
#define _TMR1H_TMR1H0_LENGTH                                0x1
#define _TMR1H_TMR1H0_MASK                                  0x1
#define _TMR1H_TMR1H1_POSN                                  0x1
#define _TMR1H_TMR1H1_POSITION                              0x1
#define _TMR1H_TMR1H1_SIZE                                  0x1
#define _TMR1H_TMR1H1_LENGTH                                0x1
#define _TMR1H_TMR1H1_MASK                                  0x2
#define _TMR1H_TMR1H2_POSN                                  0x2
#define _TMR1H_TMR1H2_POSITION                              0x2
#define _TMR1H_TMR1H2_SIZE                                  0x1
#define _TMR1H_TMR1H2_LENGTH                                0x1
#define _TMR1H_TMR1H2_MASK                                  0x4
#define _TMR1H_TMR1H3_POSN                                  0x3
#define _TMR1H_TMR1H3_POSITION                              0x3
#define _TMR1H_TMR1H3_SIZE                                  0x1
#define _TMR1H_TMR1H3_LENGTH                                0x1
#define _TMR1H_TMR1H3_MASK                                  0x8
#define _TMR1H_TMR1H4_POSN                                  0x4
#define _TMR1H_TMR1H4_POSITION                              0x4
#define _TMR1H_TMR1H4_SIZE                                  0x1
#define _TMR1H_TMR1H4_LENGTH                                0x1
#define _TMR1H_TMR1H4_MASK                                  0x10
#define _TMR1H_TMR1H5_POSN                                  0x5
#define _TMR1H_TMR1H5_POSITION                              0x5
#define _TMR1H_TMR1H5_SIZE                                  0x1
#define _TMR1H_TMR1H5_LENGTH                                0x1
#define _TMR1H_TMR1H5_MASK                                  0x20
#define _TMR1H_TMR1H6_POSN                                  0x6
#define _TMR1H_TMR1H6_POSITION                              0x6
#define _TMR1H_TMR1H6_SIZE                                  0x1
#define _TMR1H_TMR1H6_LENGTH                                0x1
#define _TMR1H_TMR1H6_MASK                                  0x40
#define _TMR1H_TMR1H7_POSN                                  0x7
#define _TMR1H_TMR1H7_POSITION                              0x7
#define _TMR1H_TMR1H7_SIZE                                  0x1
#define _TMR1H_TMR1H7_LENGTH                                0x1
#define _TMR1H_TMR1H7_MASK                                  0x80
#define _TMR1H_TMR18_POSN                                   0x0
#define _TMR1H_TMR18_POSITION                               0x0
#define _TMR1H_TMR18_SIZE                                   0x1
#define _TMR1H_TMR18_LENGTH                                 0x1
#define _TMR1H_TMR18_MASK                                   0x1
#define _TMR1H_TMR19_POSN                                   0x1
#define _TMR1H_TMR19_POSITION                               0x1
#define _TMR1H_TMR19_SIZE                                   0x1
#define _TMR1H_TMR19_LENGTH                                 0x1
#define _TMR1H_TMR19_MASK                                   0x2
#define _TMR1H_TMR110_POSN                                  0x2
#define _TMR1H_TMR110_POSITION                              0x2
#define _TMR1H_TMR110_SIZE                                  0x1
#define _TMR1H_TMR110_LENGTH                                0x1
#define _TMR1H_TMR110_MASK                                  0x4
#define _TMR1H_TMR111_POSN                                  0x3
#define _TMR1H_TMR111_POSITION                              0x3
#define _TMR1H_TMR111_SIZE                                  0x1
#define _TMR1H_TMR111_LENGTH                                0x1
#define _TMR1H_TMR111_MASK                                  0x8
#define _TMR1H_TMR112_POSN                                  0x4
#define _TMR1H_TMR112_POSITION                              0x4
#define _TMR1H_TMR112_SIZE                                  0x1
#define _TMR1H_TMR112_LENGTH                                0x1
#define _TMR1H_TMR112_MASK                                  0x10
#define _TMR1H_TMR113_POSN                                  0x5
#define _TMR1H_TMR113_POSITION                              0x5
#define _TMR1H_TMR113_SIZE                                  0x1
#define _TMR1H_TMR113_LENGTH                                0x1
#define _TMR1H_TMR113_MASK                                  0x20
#define _TMR1H_TMR114_POSN                                  0x6
#define _TMR1H_TMR114_POSITION                              0x6
#define _TMR1H_TMR114_SIZE                                  0x1
#define _TMR1H_TMR114_LENGTH                                0x1
#define _TMR1H_TMR114_MASK                                  0x40
#define _TMR1H_TMR115_POSN                                  0x7
#define _TMR1H_TMR115_POSITION                              0x7
#define _TMR1H_TMR115_SIZE                                  0x1
#define _TMR1H_TMR115_LENGTH                                0x1
#define _TMR1H_TMR115_MASK                                  0x80

// Register: T1CON
#define T1CON T1CON
extern volatile unsigned char           T1CON               __at(0x30E);
#ifndef _LIB_BUILD
asm("T1CON equ 030Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned nSYNC                  :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR1ON                 :1;
        unsigned T1RD16                 :1;
        unsigned nT1SYNC                :1;
        unsigned                        :1;
        unsigned T1CKPS0                :1;
        unsigned T1CKPS1                :1;
    };
    struct {
        unsigned                        :4;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD161                  :1;
    };
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits __at(0x30E);
// bitfield macros
#define _T1CON_ON_POSN                                      0x0
#define _T1CON_ON_POSITION                                  0x0
#define _T1CON_ON_SIZE                                      0x1
#define _T1CON_ON_LENGTH                                    0x1
#define _T1CON_ON_MASK                                      0x1
#define _T1CON_RD16_POSN                                    0x1
#define _T1CON_RD16_POSITION                                0x1
#define _T1CON_RD16_SIZE                                    0x1
#define _T1CON_RD16_LENGTH                                  0x1
#define _T1CON_RD16_MASK                                    0x2
#define _T1CON_nSYNC_POSN                                   0x2
#define _T1CON_nSYNC_POSITION                               0x2
#define _T1CON_nSYNC_SIZE                                   0x1
#define _T1CON_nSYNC_LENGTH                                 0x1
#define _T1CON_nSYNC_MASK                                   0x4
#define _T1CON_CKPS_POSN                                    0x4
#define _T1CON_CKPS_POSITION                                0x4
#define _T1CON_CKPS_SIZE                                    0x2
#define _T1CON_CKPS_LENGTH                                  0x2
#define _T1CON_CKPS_MASK                                    0x30
#define _T1CON_TMR1ON_POSN                                  0x0
#define _T1CON_TMR1ON_POSITION                              0x0
#define _T1CON_TMR1ON_SIZE                                  0x1
#define _T1CON_TMR1ON_LENGTH                                0x1
#define _T1CON_TMR1ON_MASK                                  0x1
#define _T1CON_T1RD16_POSN                                  0x1
#define _T1CON_T1RD16_POSITION                              0x1
#define _T1CON_T1RD16_SIZE                                  0x1
#define _T1CON_T1RD16_LENGTH                                0x1
#define _T1CON_T1RD16_MASK                                  0x2
#define _T1CON_nT1SYNC_POSN                                 0x2
#define _T1CON_nT1SYNC_POSITION                             0x2
#define _T1CON_nT1SYNC_SIZE                                 0x1
#define _T1CON_nT1SYNC_LENGTH                               0x1
#define _T1CON_nT1SYNC_MASK                                 0x4
#define _T1CON_T1CKPS0_POSN                                 0x4
#define _T1CON_T1CKPS0_POSITION                             0x4
#define _T1CON_T1CKPS0_SIZE                                 0x1
#define _T1CON_T1CKPS0_LENGTH                               0x1
#define _T1CON_T1CKPS0_MASK                                 0x10
#define _T1CON_T1CKPS1_POSN                                 0x5
#define _T1CON_T1CKPS1_POSITION                             0x5
#define _T1CON_T1CKPS1_SIZE                                 0x1
#define _T1CON_T1CKPS1_LENGTH                               0x1
#define _T1CON_T1CKPS1_MASK                                 0x20
#define _T1CON_CKPS0_POSN                                   0x4
#define _T1CON_CKPS0_POSITION                               0x4
#define _T1CON_CKPS0_SIZE                                   0x1
#define _T1CON_CKPS0_LENGTH                                 0x1
#define _T1CON_CKPS0_MASK                                   0x10
#define _T1CON_CKPS1_POSN                                   0x5
#define _T1CON_CKPS1_POSITION                               0x5
#define _T1CON_CKPS1_SIZE                                   0x1
#define _T1CON_CKPS1_LENGTH                                 0x1
#define _T1CON_CKPS1_MASK                                   0x20
#define _T1CON_RD161_POSN                                   0x1
#define _T1CON_RD161_POSITION                               0x1
#define _T1CON_RD161_SIZE                                   0x1
#define _T1CON_RD161_LENGTH                                 0x1
#define _T1CON_RD161_MASK                                   0x2

// Register: T1GCON
#define T1GCON T1GCON
extern volatile unsigned char           T1GCON              __at(0x30F);
#ifndef _LIB_BUILD
asm("T1GCON equ 030Fh");
#endif
// aliases
extern volatile unsigned char           PR1                 __at(0x30F);
#ifndef _LIB_BUILD
asm("PR1 equ 030Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T1GVAL                 :1;
        unsigned T1GGO_nDONE            :1;
        unsigned T1GSPM                 :1;
        unsigned T1GTM                  :1;
        unsigned T1GPOL                 :1;
        unsigned T1GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned T1GGO                  :1;
    };
} T1GCONbits_t;
extern volatile T1GCONbits_t T1GCONbits __at(0x30F);
// bitfield macros
#define _T1GCON_GVAL_POSN                                   0x2
#define _T1GCON_GVAL_POSITION                               0x2
#define _T1GCON_GVAL_SIZE                                   0x1
#define _T1GCON_GVAL_LENGTH                                 0x1
#define _T1GCON_GVAL_MASK                                   0x4
#define _T1GCON_GGO_nDONE_POSN                              0x3
#define _T1GCON_GGO_nDONE_POSITION                          0x3
#define _T1GCON_GGO_nDONE_SIZE                              0x1
#define _T1GCON_GGO_nDONE_LENGTH                            0x1
#define _T1GCON_GGO_nDONE_MASK                              0x8
#define _T1GCON_GSPM_POSN                                   0x4
#define _T1GCON_GSPM_POSITION                               0x4
#define _T1GCON_GSPM_SIZE                                   0x1
#define _T1GCON_GSPM_LENGTH                                 0x1
#define _T1GCON_GSPM_MASK                                   0x10
#define _T1GCON_GTM_POSN                                    0x5
#define _T1GCON_GTM_POSITION                                0x5
#define _T1GCON_GTM_SIZE                                    0x1
#define _T1GCON_GTM_LENGTH                                  0x1
#define _T1GCON_GTM_MASK                                    0x20
#define _T1GCON_GPOL_POSN                                   0x6
#define _T1GCON_GPOL_POSITION                               0x6
#define _T1GCON_GPOL_SIZE                                   0x1
#define _T1GCON_GPOL_LENGTH                                 0x1
#define _T1GCON_GPOL_MASK                                   0x40
#define _T1GCON_GE_POSN                                     0x7
#define _T1GCON_GE_POSITION                                 0x7
#define _T1GCON_GE_SIZE                                     0x1
#define _T1GCON_GE_LENGTH                                   0x1
#define _T1GCON_GE_MASK                                     0x80
#define _T1GCON_T1GVAL_POSN                                 0x2
#define _T1GCON_T1GVAL_POSITION                             0x2
#define _T1GCON_T1GVAL_SIZE                                 0x1
#define _T1GCON_T1GVAL_LENGTH                               0x1
#define _T1GCON_T1GVAL_MASK                                 0x4
#define _T1GCON_T1GGO_nDONE_POSN                            0x3
#define _T1GCON_T1GGO_nDONE_POSITION                        0x3
#define _T1GCON_T1GGO_nDONE_SIZE                            0x1
#define _T1GCON_T1GGO_nDONE_LENGTH                          0x1
#define _T1GCON_T1GGO_nDONE_MASK                            0x8
#define _T1GCON_T1GSPM_POSN                                 0x4
#define _T1GCON_T1GSPM_POSITION                             0x4
#define _T1GCON_T1GSPM_SIZE                                 0x1
#define _T1GCON_T1GSPM_LENGTH                               0x1
#define _T1GCON_T1GSPM_MASK                                 0x10
#define _T1GCON_T1GTM_POSN                                  0x5
#define _T1GCON_T1GTM_POSITION                              0x5
#define _T1GCON_T1GTM_SIZE                                  0x1
#define _T1GCON_T1GTM_LENGTH                                0x1
#define _T1GCON_T1GTM_MASK                                  0x20
#define _T1GCON_T1GPOL_POSN                                 0x6
#define _T1GCON_T1GPOL_POSITION                             0x6
#define _T1GCON_T1GPOL_SIZE                                 0x1
#define _T1GCON_T1GPOL_LENGTH                               0x1
#define _T1GCON_T1GPOL_MASK                                 0x40
#define _T1GCON_T1GE_POSN                                   0x7
#define _T1GCON_T1GE_POSITION                               0x7
#define _T1GCON_T1GE_SIZE                                   0x1
#define _T1GCON_T1GE_LENGTH                                 0x1
#define _T1GCON_T1GE_MASK                                   0x80
#define _T1GCON_T1GGO_POSN                                  0x3
#define _T1GCON_T1GGO_POSITION                              0x3
#define _T1GCON_T1GGO_SIZE                                  0x1
#define _T1GCON_T1GGO_LENGTH                                0x1
#define _T1GCON_T1GGO_MASK                                  0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO_nDONE              :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T1GVAL                 :1;
        unsigned T1GGO_nDONE            :1;
        unsigned T1GSPM                 :1;
        unsigned T1GTM                  :1;
        unsigned T1GPOL                 :1;
        unsigned T1GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned T1GGO                  :1;
    };
} PR1bits_t;
extern volatile PR1bits_t PR1bits __at(0x30F);
// bitfield macros
#define _PR1_GVAL_POSN                                      0x2
#define _PR1_GVAL_POSITION                                  0x2
#define _PR1_GVAL_SIZE                                      0x1
#define _PR1_GVAL_LENGTH                                    0x1
#define _PR1_GVAL_MASK                                      0x4
#define _PR1_GGO_nDONE_POSN                                 0x3
#define _PR1_GGO_nDONE_POSITION                             0x3
#define _PR1_GGO_nDONE_SIZE                                 0x1
#define _PR1_GGO_nDONE_LENGTH                               0x1
#define _PR1_GGO_nDONE_MASK                                 0x8
#define _PR1_GSPM_POSN                                      0x4
#define _PR1_GSPM_POSITION                                  0x4
#define _PR1_GSPM_SIZE                                      0x1
#define _PR1_GSPM_LENGTH                                    0x1
#define _PR1_GSPM_MASK                                      0x10
#define _PR1_GTM_POSN                                       0x5
#define _PR1_GTM_POSITION                                   0x5
#define _PR1_GTM_SIZE                                       0x1
#define _PR1_GTM_LENGTH                                     0x1
#define _PR1_GTM_MASK                                       0x20
#define _PR1_GPOL_POSN                                      0x6
#define _PR1_GPOL_POSITION                                  0x6
#define _PR1_GPOL_SIZE                                      0x1
#define _PR1_GPOL_LENGTH                                    0x1
#define _PR1_GPOL_MASK                                      0x40
#define _PR1_GE_POSN                                        0x7
#define _PR1_GE_POSITION                                    0x7
#define _PR1_GE_SIZE                                        0x1
#define _PR1_GE_LENGTH                                      0x1
#define _PR1_GE_MASK                                        0x80
#define _PR1_T1GVAL_POSN                                    0x2
#define _PR1_T1GVAL_POSITION                                0x2
#define _PR1_T1GVAL_SIZE                                    0x1
#define _PR1_T1GVAL_LENGTH                                  0x1
#define _PR1_T1GVAL_MASK                                    0x4
#define _PR1_T1GGO_nDONE_POSN                               0x3
#define _PR1_T1GGO_nDONE_POSITION                           0x3
#define _PR1_T1GGO_nDONE_SIZE                               0x1
#define _PR1_T1GGO_nDONE_LENGTH                             0x1
#define _PR1_T1GGO_nDONE_MASK                               0x8
#define _PR1_T1GSPM_POSN                                    0x4
#define _PR1_T1GSPM_POSITION                                0x4
#define _PR1_T1GSPM_SIZE                                    0x1
#define _PR1_T1GSPM_LENGTH                                  0x1
#define _PR1_T1GSPM_MASK                                    0x10
#define _PR1_T1GTM_POSN                                     0x5
#define _PR1_T1GTM_POSITION                                 0x5
#define _PR1_T1GTM_SIZE                                     0x1
#define _PR1_T1GTM_LENGTH                                   0x1
#define _PR1_T1GTM_MASK                                     0x20
#define _PR1_T1GPOL_POSN                                    0x6
#define _PR1_T1GPOL_POSITION                                0x6
#define _PR1_T1GPOL_SIZE                                    0x1
#define _PR1_T1GPOL_LENGTH                                  0x1
#define _PR1_T1GPOL_MASK                                    0x40
#define _PR1_T1GE_POSN                                      0x7
#define _PR1_T1GE_POSITION                                  0x7
#define _PR1_T1GE_SIZE                                      0x1
#define _PR1_T1GE_LENGTH                                    0x1
#define _PR1_T1GE_MASK                                      0x80
#define _PR1_T1GGO_POSN                                     0x3
#define _PR1_T1GGO_POSITION                                 0x3
#define _PR1_T1GGO_SIZE                                     0x1
#define _PR1_T1GGO_LENGTH                                   0x1
#define _PR1_T1GGO_MASK                                     0x8

// Register: T1GATE
#define T1GATE T1GATE
extern volatile unsigned char           T1GATE              __at(0x310);
#ifndef _LIB_BUILD
asm("T1GATE equ 0310h");
#endif
// aliases
extern volatile unsigned char           TMR1GATE            __at(0x310);
#ifndef _LIB_BUILD
asm("TMR1GATE equ 0310h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :5;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
    };
    struct {
        unsigned T1GSS0                 :1;
        unsigned T1GSS1                 :1;
        unsigned T1GSS2                 :1;
        unsigned T1GSS3                 :1;
        unsigned T1GSS4                 :1;
    };
} T1GATEbits_t;
extern volatile T1GATEbits_t T1GATEbits __at(0x310);
// bitfield macros
#define _T1GATE_GSS_POSN                                    0x0
#define _T1GATE_GSS_POSITION                                0x0
#define _T1GATE_GSS_SIZE                                    0x5
#define _T1GATE_GSS_LENGTH                                  0x5
#define _T1GATE_GSS_MASK                                    0x1F
#define _T1GATE_GSS0_POSN                                   0x0
#define _T1GATE_GSS0_POSITION                               0x0
#define _T1GATE_GSS0_SIZE                                   0x1
#define _T1GATE_GSS0_LENGTH                                 0x1
#define _T1GATE_GSS0_MASK                                   0x1
#define _T1GATE_GSS1_POSN                                   0x1
#define _T1GATE_GSS1_POSITION                               0x1
#define _T1GATE_GSS1_SIZE                                   0x1
#define _T1GATE_GSS1_LENGTH                                 0x1
#define _T1GATE_GSS1_MASK                                   0x2
#define _T1GATE_GSS2_POSN                                   0x2
#define _T1GATE_GSS2_POSITION                               0x2
#define _T1GATE_GSS2_SIZE                                   0x1
#define _T1GATE_GSS2_LENGTH                                 0x1
#define _T1GATE_GSS2_MASK                                   0x4
#define _T1GATE_GSS3_POSN                                   0x3
#define _T1GATE_GSS3_POSITION                               0x3
#define _T1GATE_GSS3_SIZE                                   0x1
#define _T1GATE_GSS3_LENGTH                                 0x1
#define _T1GATE_GSS3_MASK                                   0x8
#define _T1GATE_GSS4_POSN                                   0x4
#define _T1GATE_GSS4_POSITION                               0x4
#define _T1GATE_GSS4_SIZE                                   0x1
#define _T1GATE_GSS4_LENGTH                                 0x1
#define _T1GATE_GSS4_MASK                                   0x10
#define _T1GATE_T1GSS0_POSN                                 0x0
#define _T1GATE_T1GSS0_POSITION                             0x0
#define _T1GATE_T1GSS0_SIZE                                 0x1
#define _T1GATE_T1GSS0_LENGTH                               0x1
#define _T1GATE_T1GSS0_MASK                                 0x1
#define _T1GATE_T1GSS1_POSN                                 0x1
#define _T1GATE_T1GSS1_POSITION                             0x1
#define _T1GATE_T1GSS1_SIZE                                 0x1
#define _T1GATE_T1GSS1_LENGTH                               0x1
#define _T1GATE_T1GSS1_MASK                                 0x2
#define _T1GATE_T1GSS2_POSN                                 0x2
#define _T1GATE_T1GSS2_POSITION                             0x2
#define _T1GATE_T1GSS2_SIZE                                 0x1
#define _T1GATE_T1GSS2_LENGTH                               0x1
#define _T1GATE_T1GSS2_MASK                                 0x4
#define _T1GATE_T1GSS3_POSN                                 0x3
#define _T1GATE_T1GSS3_POSITION                             0x3
#define _T1GATE_T1GSS3_SIZE                                 0x1
#define _T1GATE_T1GSS3_LENGTH                               0x1
#define _T1GATE_T1GSS3_MASK                                 0x8
#define _T1GATE_T1GSS4_POSN                                 0x4
#define _T1GATE_T1GSS4_POSITION                             0x4
#define _T1GATE_T1GSS4_SIZE                                 0x1
#define _T1GATE_T1GSS4_LENGTH                               0x1
#define _T1GATE_T1GSS4_MASK                                 0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :5;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
        unsigned GSS4                   :1;
    };
    struct {
        unsigned T1GSS0                 :1;
        unsigned T1GSS1                 :1;
        unsigned T1GSS2                 :1;
        unsigned T1GSS3                 :1;
        unsigned T1GSS4                 :1;
    };
} TMR1GATEbits_t;
extern volatile TMR1GATEbits_t TMR1GATEbits __at(0x310);
// bitfield macros
#define _TMR1GATE_GSS_POSN                                  0x0
#define _TMR1GATE_GSS_POSITION                              0x0
#define _TMR1GATE_GSS_SIZE                                  0x5
#define _TMR1GATE_GSS_LENGTH                                0x5
#define _TMR1GATE_GSS_MASK                                  0x1F
#define _TMR1GATE_GSS0_POSN                                 0x0
#define _TMR1GATE_GSS0_POSITION                             0x0
#define _TMR1GATE_GSS0_SIZE                                 0x1
#define _TMR1GATE_GSS0_LENGTH                               0x1
#define _TMR1GATE_GSS0_MASK                                 0x1
#define _TMR1GATE_GSS1_POSN                                 0x1
#define _TMR1GATE_GSS1_POSITION                             0x1
#define _TMR1GATE_GSS1_SIZE                                 0x1
#define _TMR1GATE_GSS1_LENGTH                               0x1
#define _TMR1GATE_GSS1_MASK                                 0x2
#define _TMR1GATE_GSS2_POSN                                 0x2
#define _TMR1GATE_GSS2_POSITION                             0x2
#define _TMR1GATE_GSS2_SIZE                                 0x1
#define _TMR1GATE_GSS2_LENGTH                               0x1
#define _TMR1GATE_GSS2_MASK                                 0x4
#define _TMR1GATE_GSS3_POSN                                 0x3
#define _TMR1GATE_GSS3_POSITION                             0x3
#define _TMR1GATE_GSS3_SIZE                                 0x1
#define _TMR1GATE_GSS3_LENGTH                               0x1
#define _TMR1GATE_GSS3_MASK                                 0x8
#define _TMR1GATE_GSS4_POSN                                 0x4
#define _TMR1GATE_GSS4_POSITION                             0x4
#define _TMR1GATE_GSS4_SIZE                                 0x1
#define _TMR1GATE_GSS4_LENGTH                               0x1
#define _TMR1GATE_GSS4_MASK                                 0x10
#define _TMR1GATE_T1GSS0_POSN                               0x0
#define _TMR1GATE_T1GSS0_POSITION                           0x0
#define _TMR1GATE_T1GSS0_SIZE                               0x1
#define _TMR1GATE_T1GSS0_LENGTH                             0x1
#define _TMR1GATE_T1GSS0_MASK                               0x1
#define _TMR1GATE_T1GSS1_POSN                               0x1
#define _TMR1GATE_T1GSS1_POSITION                           0x1
#define _TMR1GATE_T1GSS1_SIZE                               0x1
#define _TMR1GATE_T1GSS1_LENGTH                             0x1
#define _TMR1GATE_T1GSS1_MASK                               0x2
#define _TMR1GATE_T1GSS2_POSN                               0x2
#define _TMR1GATE_T1GSS2_POSITION                           0x2
#define _TMR1GATE_T1GSS2_SIZE                               0x1
#define _TMR1GATE_T1GSS2_LENGTH                             0x1
#define _TMR1GATE_T1GSS2_MASK                               0x4
#define _TMR1GATE_T1GSS3_POSN                               0x3
#define _TMR1GATE_T1GSS3_POSITION                           0x3
#define _TMR1GATE_T1GSS3_SIZE                               0x1
#define _TMR1GATE_T1GSS3_LENGTH                             0x1
#define _TMR1GATE_T1GSS3_MASK                               0x8
#define _TMR1GATE_T1GSS4_POSN                               0x4
#define _TMR1GATE_T1GSS4_POSITION                           0x4
#define _TMR1GATE_T1GSS4_SIZE                               0x1
#define _TMR1GATE_T1GSS4_LENGTH                             0x1
#define _TMR1GATE_T1GSS4_MASK                               0x10

// Register: T1CLK
#define T1CLK T1CLK
extern volatile unsigned char           T1CLK               __at(0x311);
#ifndef _LIB_BUILD
asm("T1CLK equ 0311h");
#endif
// aliases
extern volatile unsigned char           TMR1CLK             __at(0x311);
#ifndef _LIB_BUILD
asm("TMR1CLK equ 0311h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned T1CS0                  :1;
        unsigned T1CS1                  :1;
        unsigned T1CS2                  :1;
        unsigned T1CS3                  :1;
        unsigned T1CS4                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
    };
} T1CLKbits_t;
extern volatile T1CLKbits_t T1CLKbits __at(0x311);
// bitfield macros
#define _T1CLK_CS_POSN                                      0x0
#define _T1CLK_CS_POSITION                                  0x0
#define _T1CLK_CS_SIZE                                      0x8
#define _T1CLK_CS_LENGTH                                    0x8
#define _T1CLK_CS_MASK                                      0xFF
#define _T1CLK_T1CS0_POSN                                   0x0
#define _T1CLK_T1CS0_POSITION                               0x0
#define _T1CLK_T1CS0_SIZE                                   0x1
#define _T1CLK_T1CS0_LENGTH                                 0x1
#define _T1CLK_T1CS0_MASK                                   0x1
#define _T1CLK_T1CS1_POSN                                   0x1
#define _T1CLK_T1CS1_POSITION                               0x1
#define _T1CLK_T1CS1_SIZE                                   0x1
#define _T1CLK_T1CS1_LENGTH                                 0x1
#define _T1CLK_T1CS1_MASK                                   0x2
#define _T1CLK_T1CS2_POSN                                   0x2
#define _T1CLK_T1CS2_POSITION                               0x2
#define _T1CLK_T1CS2_SIZE                                   0x1
#define _T1CLK_T1CS2_LENGTH                                 0x1
#define _T1CLK_T1CS2_MASK                                   0x4
#define _T1CLK_T1CS3_POSN                                   0x3
#define _T1CLK_T1CS3_POSITION                               0x3
#define _T1CLK_T1CS3_SIZE                                   0x1
#define _T1CLK_T1CS3_LENGTH                                 0x1
#define _T1CLK_T1CS3_MASK                                   0x8
#define _T1CLK_T1CS4_POSN                                   0x4
#define _T1CLK_T1CS4_POSITION                               0x4
#define _T1CLK_T1CS4_SIZE                                   0x1
#define _T1CLK_T1CS4_LENGTH                                 0x1
#define _T1CLK_T1CS4_MASK                                   0x10
#define _T1CLK_CS0_POSN                                     0x0
#define _T1CLK_CS0_POSITION                                 0x0
#define _T1CLK_CS0_SIZE                                     0x1
#define _T1CLK_CS0_LENGTH                                   0x1
#define _T1CLK_CS0_MASK                                     0x1
#define _T1CLK_CS1_POSN                                     0x1
#define _T1CLK_CS1_POSITION                                 0x1
#define _T1CLK_CS1_SIZE                                     0x1
#define _T1CLK_CS1_LENGTH                                   0x1
#define _T1CLK_CS1_MASK                                     0x2
#define _T1CLK_CS2_POSN                                     0x2
#define _T1CLK_CS2_POSITION                                 0x2
#define _T1CLK_CS2_SIZE                                     0x1
#define _T1CLK_CS2_LENGTH                                   0x1
#define _T1CLK_CS2_MASK                                     0x4
#define _T1CLK_CS3_POSN                                     0x3
#define _T1CLK_CS3_POSITION                                 0x3
#define _T1CLK_CS3_SIZE                                     0x1
#define _T1CLK_CS3_LENGTH                                   0x1
#define _T1CLK_CS3_MASK                                     0x8
#define _T1CLK_CS4_POSN                                     0x4
#define _T1CLK_CS4_POSITION                                 0x4
#define _T1CLK_CS4_SIZE                                     0x1
#define _T1CLK_CS4_LENGTH                                   0x1
#define _T1CLK_CS4_MASK                                     0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned T1CS0                  :1;
        unsigned T1CS1                  :1;
        unsigned T1CS2                  :1;
        unsigned T1CS3                  :1;
        unsigned T1CS4                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
    };
} TMR1CLKbits_t;
extern volatile TMR1CLKbits_t TMR1CLKbits __at(0x311);
// bitfield macros
#define _TMR1CLK_CS_POSN                                    0x0
#define _TMR1CLK_CS_POSITION                                0x0
#define _TMR1CLK_CS_SIZE                                    0x8
#define _TMR1CLK_CS_LENGTH                                  0x8
#define _TMR1CLK_CS_MASK                                    0xFF
#define _TMR1CLK_T1CS0_POSN                                 0x0
#define _TMR1CLK_T1CS0_POSITION                             0x0
#define _TMR1CLK_T1CS0_SIZE                                 0x1
#define _TMR1CLK_T1CS0_LENGTH                               0x1
#define _TMR1CLK_T1CS0_MASK                                 0x1
#define _TMR1CLK_T1CS1_POSN                                 0x1
#define _TMR1CLK_T1CS1_POSITION                             0x1
#define _TMR1CLK_T1CS1_SIZE                                 0x1
#define _TMR1CLK_T1CS1_LENGTH                               0x1
#define _TMR1CLK_T1CS1_MASK                                 0x2
#define _TMR1CLK_T1CS2_POSN                                 0x2
#define _TMR1CLK_T1CS2_POSITION                             0x2
#define _TMR1CLK_T1CS2_SIZE                                 0x1
#define _TMR1CLK_T1CS2_LENGTH                               0x1
#define _TMR1CLK_T1CS2_MASK                                 0x4
#define _TMR1CLK_T1CS3_POSN                                 0x3
#define _TMR1CLK_T1CS3_POSITION                             0x3
#define _TMR1CLK_T1CS3_SIZE                                 0x1
#define _TMR1CLK_T1CS3_LENGTH                               0x1
#define _TMR1CLK_T1CS3_MASK                                 0x8
#define _TMR1CLK_T1CS4_POSN                                 0x4
#define _TMR1CLK_T1CS4_POSITION                             0x4
#define _TMR1CLK_T1CS4_SIZE                                 0x1
#define _TMR1CLK_T1CS4_LENGTH                               0x1
#define _TMR1CLK_T1CS4_MASK                                 0x10
#define _TMR1CLK_CS0_POSN                                   0x0
#define _TMR1CLK_CS0_POSITION                               0x0
#define _TMR1CLK_CS0_SIZE                                   0x1
#define _TMR1CLK_CS0_LENGTH                                 0x1
#define _TMR1CLK_CS0_MASK                                   0x1
#define _TMR1CLK_CS1_POSN                                   0x1
#define _TMR1CLK_CS1_POSITION                               0x1
#define _TMR1CLK_CS1_SIZE                                   0x1
#define _TMR1CLK_CS1_LENGTH                                 0x1
#define _TMR1CLK_CS1_MASK                                   0x2
#define _TMR1CLK_CS2_POSN                                   0x2
#define _TMR1CLK_CS2_POSITION                               0x2
#define _TMR1CLK_CS2_SIZE                                   0x1
#define _TMR1CLK_CS2_LENGTH                                 0x1
#define _TMR1CLK_CS2_MASK                                   0x4
#define _TMR1CLK_CS3_POSN                                   0x3
#define _TMR1CLK_CS3_POSITION                               0x3
#define _TMR1CLK_CS3_SIZE                                   0x1
#define _TMR1CLK_CS3_LENGTH                                 0x1
#define _TMR1CLK_CS3_MASK                                   0x8
#define _TMR1CLK_CS4_POSN                                   0x4
#define _TMR1CLK_CS4_POSITION                               0x4
#define _TMR1CLK_CS4_SIZE                                   0x1
#define _TMR1CLK_CS4_LENGTH                                 0x1
#define _TMR1CLK_CS4_MASK                                   0x10

// Register: T2TMR
#define T2TMR T2TMR
extern volatile unsigned char           T2TMR               __at(0x38C);
#ifndef _LIB_BUILD
asm("T2TMR equ 038Ch");
#endif
// aliases
extern volatile unsigned char           TMR2                __at(0x38C);
#ifndef _LIB_BUILD
asm("TMR2 equ 038Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T2TMR                  :8;
    };
    struct {
        unsigned TMR2                   :8;
    };
} T2TMRbits_t;
extern volatile T2TMRbits_t T2TMRbits __at(0x38C);
// bitfield macros
#define _T2TMR_T2TMR_POSN                                   0x0
#define _T2TMR_T2TMR_POSITION                               0x0
#define _T2TMR_T2TMR_SIZE                                   0x8
#define _T2TMR_T2TMR_LENGTH                                 0x8
#define _T2TMR_T2TMR_MASK                                   0xFF
#define _T2TMR_TMR2_POSN                                    0x0
#define _T2TMR_TMR2_POSITION                                0x0
#define _T2TMR_TMR2_SIZE                                    0x8
#define _T2TMR_TMR2_LENGTH                                  0x8
#define _T2TMR_TMR2_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned T2TMR                  :8;
    };
    struct {
        unsigned TMR2                   :8;
    };
} TMR2bits_t;
extern volatile TMR2bits_t TMR2bits __at(0x38C);
// bitfield macros
#define _TMR2_T2TMR_POSN                                    0x0
#define _TMR2_T2TMR_POSITION                                0x0
#define _TMR2_T2TMR_SIZE                                    0x8
#define _TMR2_T2TMR_LENGTH                                  0x8
#define _TMR2_T2TMR_MASK                                    0xFF
#define _TMR2_TMR2_POSN                                     0x0
#define _TMR2_TMR2_POSITION                                 0x0
#define _TMR2_TMR2_SIZE                                     0x8
#define _TMR2_TMR2_LENGTH                                   0x8
#define _TMR2_TMR2_MASK                                     0xFF

// Register: T2PR
#define T2PR T2PR
extern volatile unsigned char           T2PR                __at(0x38D);
#ifndef _LIB_BUILD
asm("T2PR equ 038Dh");
#endif
// aliases
extern volatile unsigned char           PR2                 __at(0x38D);
#ifndef _LIB_BUILD
asm("PR2 equ 038Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T2PR                   :8;
    };
    struct {
        unsigned PR2                    :8;
    };
} T2PRbits_t;
extern volatile T2PRbits_t T2PRbits __at(0x38D);
// bitfield macros
#define _T2PR_T2PR_POSN                                     0x0
#define _T2PR_T2PR_POSITION                                 0x0
#define _T2PR_T2PR_SIZE                                     0x8
#define _T2PR_T2PR_LENGTH                                   0x8
#define _T2PR_T2PR_MASK                                     0xFF
#define _T2PR_PR2_POSN                                      0x0
#define _T2PR_PR2_POSITION                                  0x0
#define _T2PR_PR2_SIZE                                      0x8
#define _T2PR_PR2_LENGTH                                    0x8
#define _T2PR_PR2_MASK                                      0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned T2PR                   :8;
    };
    struct {
        unsigned PR2                    :8;
    };
} PR2bits_t;
extern volatile PR2bits_t PR2bits __at(0x38D);
// bitfield macros
#define _PR2_T2PR_POSN                                      0x0
#define _PR2_T2PR_POSITION                                  0x0
#define _PR2_T2PR_SIZE                                      0x8
#define _PR2_T2PR_LENGTH                                    0x8
#define _PR2_T2PR_MASK                                      0xFF
#define _PR2_PR2_POSN                                       0x0
#define _PR2_PR2_POSITION                                   0x0
#define _PR2_PR2_SIZE                                       0x8
#define _PR2_PR2_LENGTH                                     0x8
#define _PR2_PR2_MASK                                       0xFF

// Register: T2CON
#define T2CON T2CON
extern volatile unsigned char           T2CON               __at(0x38E);
#ifndef _LIB_BUILD
asm("T2CON equ 038Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned T2OUTPS                :4;
        unsigned T2CKPS                 :3;
        unsigned T2ON                   :1;
    };
    struct {
        unsigned T2OUTPS0               :1;
        unsigned T2OUTPS1               :1;
        unsigned T2OUTPS2               :1;
        unsigned T2OUTPS3               :1;
        unsigned T2CKPS0                :1;
        unsigned T2CKPS1                :1;
        unsigned T2CKPS2                :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned TMR2ON                 :1;
    };
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits __at(0x38E);
// bitfield macros
#define _T2CON_OUTPS_POSN                                   0x0
#define _T2CON_OUTPS_POSITION                               0x0
#define _T2CON_OUTPS_SIZE                                   0x4
#define _T2CON_OUTPS_LENGTH                                 0x4
#define _T2CON_OUTPS_MASK                                   0xF
#define _T2CON_CKPS_POSN                                    0x4
#define _T2CON_CKPS_POSITION                                0x4
#define _T2CON_CKPS_SIZE                                    0x3
#define _T2CON_CKPS_LENGTH                                  0x3
#define _T2CON_CKPS_MASK                                    0x70
#define _T2CON_ON_POSN                                      0x7
#define _T2CON_ON_POSITION                                  0x7
#define _T2CON_ON_SIZE                                      0x1
#define _T2CON_ON_LENGTH                                    0x1
#define _T2CON_ON_MASK                                      0x80
#define _T2CON_T2OUTPS_POSN                                 0x0
#define _T2CON_T2OUTPS_POSITION                             0x0
#define _T2CON_T2OUTPS_SIZE                                 0x4
#define _T2CON_T2OUTPS_LENGTH                               0x4
#define _T2CON_T2OUTPS_MASK                                 0xF
#define _T2CON_T2CKPS_POSN                                  0x4
#define _T2CON_T2CKPS_POSITION                              0x4
#define _T2CON_T2CKPS_SIZE                                  0x3
#define _T2CON_T2CKPS_LENGTH                                0x3
#define _T2CON_T2CKPS_MASK                                  0x70
#define _T2CON_T2ON_POSN                                    0x7
#define _T2CON_T2ON_POSITION                                0x7
#define _T2CON_T2ON_SIZE                                    0x1
#define _T2CON_T2ON_LENGTH                                  0x1
#define _T2CON_T2ON_MASK                                    0x80
#define _T2CON_T2OUTPS0_POSN                                0x0
#define _T2CON_T2OUTPS0_POSITION                            0x0
#define _T2CON_T2OUTPS0_SIZE                                0x1
#define _T2CON_T2OUTPS0_LENGTH                              0x1
#define _T2CON_T2OUTPS0_MASK                                0x1
#define _T2CON_T2OUTPS1_POSN                                0x1
#define _T2CON_T2OUTPS1_POSITION                            0x1
#define _T2CON_T2OUTPS1_SIZE                                0x1
#define _T2CON_T2OUTPS1_LENGTH                              0x1
#define _T2CON_T2OUTPS1_MASK                                0x2
#define _T2CON_T2OUTPS2_POSN                                0x2
#define _T2CON_T2OUTPS2_POSITION                            0x2
#define _T2CON_T2OUTPS2_SIZE                                0x1
#define _T2CON_T2OUTPS2_LENGTH                              0x1
#define _T2CON_T2OUTPS2_MASK                                0x4
#define _T2CON_T2OUTPS3_POSN                                0x3
#define _T2CON_T2OUTPS3_POSITION                            0x3
#define _T2CON_T2OUTPS3_SIZE                                0x1
#define _T2CON_T2OUTPS3_LENGTH                              0x1
#define _T2CON_T2OUTPS3_MASK                                0x8
#define _T2CON_T2CKPS0_POSN                                 0x4
#define _T2CON_T2CKPS0_POSITION                             0x4
#define _T2CON_T2CKPS0_SIZE                                 0x1
#define _T2CON_T2CKPS0_LENGTH                               0x1
#define _T2CON_T2CKPS0_MASK                                 0x10
#define _T2CON_T2CKPS1_POSN                                 0x5
#define _T2CON_T2CKPS1_POSITION                             0x5
#define _T2CON_T2CKPS1_SIZE                                 0x1
#define _T2CON_T2CKPS1_LENGTH                               0x1
#define _T2CON_T2CKPS1_MASK                                 0x20
#define _T2CON_T2CKPS2_POSN                                 0x6
#define _T2CON_T2CKPS2_POSITION                             0x6
#define _T2CON_T2CKPS2_SIZE                                 0x1
#define _T2CON_T2CKPS2_LENGTH                               0x1
#define _T2CON_T2CKPS2_MASK                                 0x40
#define _T2CON_OUTPS0_POSN                                  0x0
#define _T2CON_OUTPS0_POSITION                              0x0
#define _T2CON_OUTPS0_SIZE                                  0x1
#define _T2CON_OUTPS0_LENGTH                                0x1
#define _T2CON_OUTPS0_MASK                                  0x1
#define _T2CON_OUTPS1_POSN                                  0x1
#define _T2CON_OUTPS1_POSITION                              0x1
#define _T2CON_OUTPS1_SIZE                                  0x1
#define _T2CON_OUTPS1_LENGTH                                0x1
#define _T2CON_OUTPS1_MASK                                  0x2
#define _T2CON_OUTPS2_POSN                                  0x2
#define _T2CON_OUTPS2_POSITION                              0x2
#define _T2CON_OUTPS2_SIZE                                  0x1
#define _T2CON_OUTPS2_LENGTH                                0x1
#define _T2CON_OUTPS2_MASK                                  0x4
#define _T2CON_OUTPS3_POSN                                  0x3
#define _T2CON_OUTPS3_POSITION                              0x3
#define _T2CON_OUTPS3_SIZE                                  0x1
#define _T2CON_OUTPS3_LENGTH                                0x1
#define _T2CON_OUTPS3_MASK                                  0x8
#define _T2CON_CKPS0_POSN                                   0x4
#define _T2CON_CKPS0_POSITION                               0x4
#define _T2CON_CKPS0_SIZE                                   0x1
#define _T2CON_CKPS0_LENGTH                                 0x1
#define _T2CON_CKPS0_MASK                                   0x10
#define _T2CON_CKPS1_POSN                                   0x5
#define _T2CON_CKPS1_POSITION                               0x5
#define _T2CON_CKPS1_SIZE                                   0x1
#define _T2CON_CKPS1_LENGTH                                 0x1
#define _T2CON_CKPS1_MASK                                   0x20
#define _T2CON_CKPS2_POSN                                   0x6
#define _T2CON_CKPS2_POSITION                               0x6
#define _T2CON_CKPS2_SIZE                                   0x1
#define _T2CON_CKPS2_LENGTH                                 0x1
#define _T2CON_CKPS2_MASK                                   0x40
#define _T2CON_TMR2ON_POSN                                  0x7
#define _T2CON_TMR2ON_POSITION                              0x7
#define _T2CON_TMR2ON_SIZE                                  0x1
#define _T2CON_TMR2ON_LENGTH                                0x1
#define _T2CON_TMR2ON_MASK                                  0x80

// Register: T2HLT
#define T2HLT T2HLT
extern volatile unsigned char           T2HLT               __at(0x38F);
#ifndef _LIB_BUILD
asm("T2HLT equ 038Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CSYNC                  :1;
        unsigned CPOL                   :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
    };
    struct {
        unsigned T2MODE                 :5;
        unsigned T2CSYNC                :1;
        unsigned T2CPOL                 :1;
        unsigned T2PSYNC                :1;
    };
    struct {
        unsigned T2MODE0                :1;
        unsigned T2MODE1                :1;
        unsigned T2MODE2                :1;
        unsigned T2MODE3                :1;
        unsigned T2MODE4                :1;
    };
} T2HLTbits_t;
extern volatile T2HLTbits_t T2HLTbits __at(0x38F);
// bitfield macros
#define _T2HLT_MODE_POSN                                    0x0
#define _T2HLT_MODE_POSITION                                0x0
#define _T2HLT_MODE_SIZE                                    0x5
#define _T2HLT_MODE_LENGTH                                  0x5
#define _T2HLT_MODE_MASK                                    0x1F
#define _T2HLT_CSYNC_POSN                                   0x5
#define _T2HLT_CSYNC_POSITION                               0x5
#define _T2HLT_CSYNC_SIZE                                   0x1
#define _T2HLT_CSYNC_LENGTH                                 0x1
#define _T2HLT_CSYNC_MASK                                   0x20
#define _T2HLT_CPOL_POSN                                    0x6
#define _T2HLT_CPOL_POSITION                                0x6
#define _T2HLT_CPOL_SIZE                                    0x1
#define _T2HLT_CPOL_LENGTH                                  0x1
#define _T2HLT_CPOL_MASK                                    0x40
#define _T2HLT_PSYNC_POSN                                   0x7
#define _T2HLT_PSYNC_POSITION                               0x7
#define _T2HLT_PSYNC_SIZE                                   0x1
#define _T2HLT_PSYNC_LENGTH                                 0x1
#define _T2HLT_PSYNC_MASK                                   0x80
#define _T2HLT_MODE0_POSN                                   0x0
#define _T2HLT_MODE0_POSITION                               0x0
#define _T2HLT_MODE0_SIZE                                   0x1
#define _T2HLT_MODE0_LENGTH                                 0x1
#define _T2HLT_MODE0_MASK                                   0x1
#define _T2HLT_MODE1_POSN                                   0x1
#define _T2HLT_MODE1_POSITION                               0x1
#define _T2HLT_MODE1_SIZE                                   0x1
#define _T2HLT_MODE1_LENGTH                                 0x1
#define _T2HLT_MODE1_MASK                                   0x2
#define _T2HLT_MODE2_POSN                                   0x2
#define _T2HLT_MODE2_POSITION                               0x2
#define _T2HLT_MODE2_SIZE                                   0x1
#define _T2HLT_MODE2_LENGTH                                 0x1
#define _T2HLT_MODE2_MASK                                   0x4
#define _T2HLT_MODE3_POSN                                   0x3
#define _T2HLT_MODE3_POSITION                               0x3
#define _T2HLT_MODE3_SIZE                                   0x1
#define _T2HLT_MODE3_LENGTH                                 0x1
#define _T2HLT_MODE3_MASK                                   0x8
#define _T2HLT_MODE4_POSN                                   0x4
#define _T2HLT_MODE4_POSITION                               0x4
#define _T2HLT_MODE4_SIZE                                   0x1
#define _T2HLT_MODE4_LENGTH                                 0x1
#define _T2HLT_MODE4_MASK                                   0x10
#define _T2HLT_CKSYNC_POSN                                  0x5
#define _T2HLT_CKSYNC_POSITION                              0x5
#define _T2HLT_CKSYNC_SIZE                                  0x1
#define _T2HLT_CKSYNC_LENGTH                                0x1
#define _T2HLT_CKSYNC_MASK                                  0x20
#define _T2HLT_CKPOL_POSN                                   0x6
#define _T2HLT_CKPOL_POSITION                               0x6
#define _T2HLT_CKPOL_SIZE                                   0x1
#define _T2HLT_CKPOL_LENGTH                                 0x1
#define _T2HLT_CKPOL_MASK                                   0x40
#define _T2HLT_T2MODE_POSN                                  0x0
#define _T2HLT_T2MODE_POSITION                              0x0
#define _T2HLT_T2MODE_SIZE                                  0x5
#define _T2HLT_T2MODE_LENGTH                                0x5
#define _T2HLT_T2MODE_MASK                                  0x1F
#define _T2HLT_T2CSYNC_POSN                                 0x5
#define _T2HLT_T2CSYNC_POSITION                             0x5
#define _T2HLT_T2CSYNC_SIZE                                 0x1
#define _T2HLT_T2CSYNC_LENGTH                               0x1
#define _T2HLT_T2CSYNC_MASK                                 0x20
#define _T2HLT_T2CPOL_POSN                                  0x6
#define _T2HLT_T2CPOL_POSITION                              0x6
#define _T2HLT_T2CPOL_SIZE                                  0x1
#define _T2HLT_T2CPOL_LENGTH                                0x1
#define _T2HLT_T2CPOL_MASK                                  0x40
#define _T2HLT_T2PSYNC_POSN                                 0x7
#define _T2HLT_T2PSYNC_POSITION                             0x7
#define _T2HLT_T2PSYNC_SIZE                                 0x1
#define _T2HLT_T2PSYNC_LENGTH                               0x1
#define _T2HLT_T2PSYNC_MASK                                 0x80
#define _T2HLT_T2MODE0_POSN                                 0x0
#define _T2HLT_T2MODE0_POSITION                             0x0
#define _T2HLT_T2MODE0_SIZE                                 0x1
#define _T2HLT_T2MODE0_LENGTH                               0x1
#define _T2HLT_T2MODE0_MASK                                 0x1
#define _T2HLT_T2MODE1_POSN                                 0x1
#define _T2HLT_T2MODE1_POSITION                             0x1
#define _T2HLT_T2MODE1_SIZE                                 0x1
#define _T2HLT_T2MODE1_LENGTH                               0x1
#define _T2HLT_T2MODE1_MASK                                 0x2
#define _T2HLT_T2MODE2_POSN                                 0x2
#define _T2HLT_T2MODE2_POSITION                             0x2
#define _T2HLT_T2MODE2_SIZE                                 0x1
#define _T2HLT_T2MODE2_LENGTH                               0x1
#define _T2HLT_T2MODE2_MASK                                 0x4
#define _T2HLT_T2MODE3_POSN                                 0x3
#define _T2HLT_T2MODE3_POSITION                             0x3
#define _T2HLT_T2MODE3_SIZE                                 0x1
#define _T2HLT_T2MODE3_LENGTH                               0x1
#define _T2HLT_T2MODE3_MASK                                 0x8
#define _T2HLT_T2MODE4_POSN                                 0x4
#define _T2HLT_T2MODE4_POSITION                             0x4
#define _T2HLT_T2MODE4_SIZE                                 0x1
#define _T2HLT_T2MODE4_LENGTH                               0x1
#define _T2HLT_T2MODE4_MASK                                 0x10

// Register: T2CLKCON
#define T2CLKCON T2CLKCON
extern volatile unsigned char           T2CLKCON            __at(0x390);
#ifndef _LIB_BUILD
asm("T2CLKCON equ 0390h");
#endif
// aliases
extern volatile unsigned char           T2CLK               __at(0x390);
#ifndef _LIB_BUILD
asm("T2CLK equ 0390h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
    };
    struct {
        unsigned T2CS                   :8;
    };
    struct {
        unsigned T2CS0                  :1;
        unsigned T2CS1                  :1;
        unsigned T2CS2                  :1;
        unsigned T2CS3                  :1;
        unsigned T2CS4                  :1;
    };
} T2CLKCONbits_t;
extern volatile T2CLKCONbits_t T2CLKCONbits __at(0x390);
// bitfield macros
#define _T2CLKCON_CS_POSN                                   0x0
#define _T2CLKCON_CS_POSITION                               0x0
#define _T2CLKCON_CS_SIZE                                   0x8
#define _T2CLKCON_CS_LENGTH                                 0x8
#define _T2CLKCON_CS_MASK                                   0xFF
#define _T2CLKCON_CS0_POSN                                  0x0
#define _T2CLKCON_CS0_POSITION                              0x0
#define _T2CLKCON_CS0_SIZE                                  0x1
#define _T2CLKCON_CS0_LENGTH                                0x1
#define _T2CLKCON_CS0_MASK                                  0x1
#define _T2CLKCON_CS1_POSN                                  0x1
#define _T2CLKCON_CS1_POSITION                              0x1
#define _T2CLKCON_CS1_SIZE                                  0x1
#define _T2CLKCON_CS1_LENGTH                                0x1
#define _T2CLKCON_CS1_MASK                                  0x2
#define _T2CLKCON_CS2_POSN                                  0x2
#define _T2CLKCON_CS2_POSITION                              0x2
#define _T2CLKCON_CS2_SIZE                                  0x1
#define _T2CLKCON_CS2_LENGTH                                0x1
#define _T2CLKCON_CS2_MASK                                  0x4
#define _T2CLKCON_CS3_POSN                                  0x3
#define _T2CLKCON_CS3_POSITION                              0x3
#define _T2CLKCON_CS3_SIZE                                  0x1
#define _T2CLKCON_CS3_LENGTH                                0x1
#define _T2CLKCON_CS3_MASK                                  0x8
#define _T2CLKCON_CS4_POSN                                  0x4
#define _T2CLKCON_CS4_POSITION                              0x4
#define _T2CLKCON_CS4_SIZE                                  0x1
#define _T2CLKCON_CS4_LENGTH                                0x1
#define _T2CLKCON_CS4_MASK                                  0x10
#define _T2CLKCON_T2CS_POSN                                 0x0
#define _T2CLKCON_T2CS_POSITION                             0x0
#define _T2CLKCON_T2CS_SIZE                                 0x8
#define _T2CLKCON_T2CS_LENGTH                               0x8
#define _T2CLKCON_T2CS_MASK                                 0xFF
#define _T2CLKCON_T2CS0_POSN                                0x0
#define _T2CLKCON_T2CS0_POSITION                            0x0
#define _T2CLKCON_T2CS0_SIZE                                0x1
#define _T2CLKCON_T2CS0_LENGTH                              0x1
#define _T2CLKCON_T2CS0_MASK                                0x1
#define _T2CLKCON_T2CS1_POSN                                0x1
#define _T2CLKCON_T2CS1_POSITION                            0x1
#define _T2CLKCON_T2CS1_SIZE                                0x1
#define _T2CLKCON_T2CS1_LENGTH                              0x1
#define _T2CLKCON_T2CS1_MASK                                0x2
#define _T2CLKCON_T2CS2_POSN                                0x2
#define _T2CLKCON_T2CS2_POSITION                            0x2
#define _T2CLKCON_T2CS2_SIZE                                0x1
#define _T2CLKCON_T2CS2_LENGTH                              0x1
#define _T2CLKCON_T2CS2_MASK                                0x4
#define _T2CLKCON_T2CS3_POSN                                0x3
#define _T2CLKCON_T2CS3_POSITION                            0x3
#define _T2CLKCON_T2CS3_SIZE                                0x1
#define _T2CLKCON_T2CS3_LENGTH                              0x1
#define _T2CLKCON_T2CS3_MASK                                0x8
#define _T2CLKCON_T2CS4_POSN                                0x4
#define _T2CLKCON_T2CS4_POSITION                            0x4
#define _T2CLKCON_T2CS4_SIZE                                0x1
#define _T2CLKCON_T2CS4_LENGTH                              0x1
#define _T2CLKCON_T2CS4_MASK                                0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
    };
    struct {
        unsigned T2CS                   :8;
    };
    struct {
        unsigned T2CS0                  :1;
        unsigned T2CS1                  :1;
        unsigned T2CS2                  :1;
        unsigned T2CS3                  :1;
        unsigned T2CS4                  :1;
    };
} T2CLKbits_t;
extern volatile T2CLKbits_t T2CLKbits __at(0x390);
// bitfield macros
#define _T2CLK_CS_POSN                                      0x0
#define _T2CLK_CS_POSITION                                  0x0
#define _T2CLK_CS_SIZE                                      0x8
#define _T2CLK_CS_LENGTH                                    0x8
#define _T2CLK_CS_MASK                                      0xFF
#define _T2CLK_CS0_POSN                                     0x0
#define _T2CLK_CS0_POSITION                                 0x0
#define _T2CLK_CS0_SIZE                                     0x1
#define _T2CLK_CS0_LENGTH                                   0x1
#define _T2CLK_CS0_MASK                                     0x1
#define _T2CLK_CS1_POSN                                     0x1
#define _T2CLK_CS1_POSITION                                 0x1
#define _T2CLK_CS1_SIZE                                     0x1
#define _T2CLK_CS1_LENGTH                                   0x1
#define _T2CLK_CS1_MASK                                     0x2
#define _T2CLK_CS2_POSN                                     0x2
#define _T2CLK_CS2_POSITION                                 0x2
#define _T2CLK_CS2_SIZE                                     0x1
#define _T2CLK_CS2_LENGTH                                   0x1
#define _T2CLK_CS2_MASK                                     0x4
#define _T2CLK_CS3_POSN                                     0x3
#define _T2CLK_CS3_POSITION                                 0x3
#define _T2CLK_CS3_SIZE                                     0x1
#define _T2CLK_CS3_LENGTH                                   0x1
#define _T2CLK_CS3_MASK                                     0x8
#define _T2CLK_CS4_POSN                                     0x4
#define _T2CLK_CS4_POSITION                                 0x4
#define _T2CLK_CS4_SIZE                                     0x1
#define _T2CLK_CS4_LENGTH                                   0x1
#define _T2CLK_CS4_MASK                                     0x10
#define _T2CLK_T2CS_POSN                                    0x0
#define _T2CLK_T2CS_POSITION                                0x0
#define _T2CLK_T2CS_SIZE                                    0x8
#define _T2CLK_T2CS_LENGTH                                  0x8
#define _T2CLK_T2CS_MASK                                    0xFF
#define _T2CLK_T2CS0_POSN                                   0x0
#define _T2CLK_T2CS0_POSITION                               0x0
#define _T2CLK_T2CS0_SIZE                                   0x1
#define _T2CLK_T2CS0_LENGTH                                 0x1
#define _T2CLK_T2CS0_MASK                                   0x1
#define _T2CLK_T2CS1_POSN                                   0x1
#define _T2CLK_T2CS1_POSITION                               0x1
#define _T2CLK_T2CS1_SIZE                                   0x1
#define _T2CLK_T2CS1_LENGTH                                 0x1
#define _T2CLK_T2CS1_MASK                                   0x2
#define _T2CLK_T2CS2_POSN                                   0x2
#define _T2CLK_T2CS2_POSITION                               0x2
#define _T2CLK_T2CS2_SIZE                                   0x1
#define _T2CLK_T2CS2_LENGTH                                 0x1
#define _T2CLK_T2CS2_MASK                                   0x4
#define _T2CLK_T2CS3_POSN                                   0x3
#define _T2CLK_T2CS3_POSITION                               0x3
#define _T2CLK_T2CS3_SIZE                                   0x1
#define _T2CLK_T2CS3_LENGTH                                 0x1
#define _T2CLK_T2CS3_MASK                                   0x8
#define _T2CLK_T2CS4_POSN                                   0x4
#define _T2CLK_T2CS4_POSITION                               0x4
#define _T2CLK_T2CS4_SIZE                                   0x1
#define _T2CLK_T2CS4_LENGTH                                 0x1
#define _T2CLK_T2CS4_MASK                                   0x10

// Register: T2RST
#define T2RST T2RST
extern volatile unsigned char           T2RST               __at(0x391);
#ifndef _LIB_BUILD
asm("T2RST equ 0391h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :8;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
        unsigned RSEL4                  :1;
    };
    struct {
        unsigned T2RSEL                 :8;
    };
    struct {
        unsigned T2RSEL0                :1;
        unsigned T2RSEL1                :1;
        unsigned T2RSEL2                :1;
        unsigned T2RSEL3                :1;
        unsigned T2RSEL4                :1;
    };
} T2RSTbits_t;
extern volatile T2RSTbits_t T2RSTbits __at(0x391);
// bitfield macros
#define _T2RST_RSEL_POSN                                    0x0
#define _T2RST_RSEL_POSITION                                0x0
#define _T2RST_RSEL_SIZE                                    0x8
#define _T2RST_RSEL_LENGTH                                  0x8
#define _T2RST_RSEL_MASK                                    0xFF
#define _T2RST_RSEL0_POSN                                   0x0
#define _T2RST_RSEL0_POSITION                               0x0
#define _T2RST_RSEL0_SIZE                                   0x1
#define _T2RST_RSEL0_LENGTH                                 0x1
#define _T2RST_RSEL0_MASK                                   0x1
#define _T2RST_RSEL1_POSN                                   0x1
#define _T2RST_RSEL1_POSITION                               0x1
#define _T2RST_RSEL1_SIZE                                   0x1
#define _T2RST_RSEL1_LENGTH                                 0x1
#define _T2RST_RSEL1_MASK                                   0x2
#define _T2RST_RSEL2_POSN                                   0x2
#define _T2RST_RSEL2_POSITION                               0x2
#define _T2RST_RSEL2_SIZE                                   0x1
#define _T2RST_RSEL2_LENGTH                                 0x1
#define _T2RST_RSEL2_MASK                                   0x4
#define _T2RST_RSEL3_POSN                                   0x3
#define _T2RST_RSEL3_POSITION                               0x3
#define _T2RST_RSEL3_SIZE                                   0x1
#define _T2RST_RSEL3_LENGTH                                 0x1
#define _T2RST_RSEL3_MASK                                   0x8
#define _T2RST_RSEL4_POSN                                   0x4
#define _T2RST_RSEL4_POSITION                               0x4
#define _T2RST_RSEL4_SIZE                                   0x1
#define _T2RST_RSEL4_LENGTH                                 0x1
#define _T2RST_RSEL4_MASK                                   0x10
#define _T2RST_T2RSEL_POSN                                  0x0
#define _T2RST_T2RSEL_POSITION                              0x0
#define _T2RST_T2RSEL_SIZE                                  0x8
#define _T2RST_T2RSEL_LENGTH                                0x8
#define _T2RST_T2RSEL_MASK                                  0xFF
#define _T2RST_T2RSEL0_POSN                                 0x0
#define _T2RST_T2RSEL0_POSITION                             0x0
#define _T2RST_T2RSEL0_SIZE                                 0x1
#define _T2RST_T2RSEL0_LENGTH                               0x1
#define _T2RST_T2RSEL0_MASK                                 0x1
#define _T2RST_T2RSEL1_POSN                                 0x1
#define _T2RST_T2RSEL1_POSITION                             0x1
#define _T2RST_T2RSEL1_SIZE                                 0x1
#define _T2RST_T2RSEL1_LENGTH                               0x1
#define _T2RST_T2RSEL1_MASK                                 0x2
#define _T2RST_T2RSEL2_POSN                                 0x2
#define _T2RST_T2RSEL2_POSITION                             0x2
#define _T2RST_T2RSEL2_SIZE                                 0x1
#define _T2RST_T2RSEL2_LENGTH                               0x1
#define _T2RST_T2RSEL2_MASK                                 0x4
#define _T2RST_T2RSEL3_POSN                                 0x3
#define _T2RST_T2RSEL3_POSITION                             0x3
#define _T2RST_T2RSEL3_SIZE                                 0x1
#define _T2RST_T2RSEL3_LENGTH                               0x1
#define _T2RST_T2RSEL3_MASK                                 0x8
#define _T2RST_T2RSEL4_POSN                                 0x4
#define _T2RST_T2RSEL4_POSITION                             0x4
#define _T2RST_T2RSEL4_SIZE                                 0x1
#define _T2RST_T2RSEL4_LENGTH                               0x1
#define _T2RST_T2RSEL4_MASK                                 0x10

// Register: CCPR1
#define CCPR1 CCPR1
extern volatile unsigned short          CCPR1               __at(0x40C);
#ifndef _LIB_BUILD
asm("CCPR1 equ 040Ch");
#endif

// Register: CCPR1L
#define CCPR1L CCPR1L
extern volatile unsigned char           CCPR1L              __at(0x40C);
#ifndef _LIB_BUILD
asm("CCPR1L equ 040Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPRL                  :8;
    };
} CCPR1Lbits_t;
extern volatile CCPR1Lbits_t CCPR1Lbits __at(0x40C);
// bitfield macros
#define _CCPR1L_CCPRL_POSN                                  0x0
#define _CCPR1L_CCPRL_POSITION                              0x0
#define _CCPR1L_CCPRL_SIZE                                  0x8
#define _CCPR1L_CCPRL_LENGTH                                0x8
#define _CCPR1L_CCPRL_MASK                                  0xFF

// Register: CCPR1H
#define CCPR1H CCPR1H
extern volatile unsigned char           CCPR1H              __at(0x40D);
#ifndef _LIB_BUILD
asm("CCPR1H equ 040Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPRH                  :8;
    };
} CCPR1Hbits_t;
extern volatile CCPR1Hbits_t CCPR1Hbits __at(0x40D);
// bitfield macros
#define _CCPR1H_CCPRH_POSN                                  0x0
#define _CCPR1H_CCPRH_POSITION                              0x0
#define _CCPR1H_CCPRH_SIZE                                  0x8
#define _CCPR1H_CCPRH_LENGTH                                0x8
#define _CCPR1H_CCPRH_MASK                                  0xFF

// Register: CCP1CON
#define CCP1CON CCP1CON
extern volatile unsigned char           CCP1CON             __at(0x40E);
#ifndef _LIB_BUILD
asm("CCP1CON equ 040Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP1MODE               :4;
        unsigned CCP1FMT                :1;
        unsigned CCP1OUT                :1;
        unsigned                        :1;
        unsigned CCP1EN                 :1;
    };
    struct {
        unsigned CCP1MODE0              :1;
        unsigned CCP1MODE1              :1;
        unsigned CCP1MODE2              :1;
        unsigned CCP1MODE3              :1;
    };
    struct {
        unsigned                        :7;
        unsigned P1M1                   :1;
    };
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits __at(0x40E);
// bitfield macros
#define _CCP1CON_MODE_POSN                                  0x0
#define _CCP1CON_MODE_POSITION                              0x0
#define _CCP1CON_MODE_SIZE                                  0x4
#define _CCP1CON_MODE_LENGTH                                0x4
#define _CCP1CON_MODE_MASK                                  0xF
#define _CCP1CON_FMT_POSN                                   0x4
#define _CCP1CON_FMT_POSITION                               0x4
#define _CCP1CON_FMT_SIZE                                   0x1
#define _CCP1CON_FMT_LENGTH                                 0x1
#define _CCP1CON_FMT_MASK                                   0x10
#define _CCP1CON_OUT_POSN                                   0x5
#define _CCP1CON_OUT_POSITION                               0x5
#define _CCP1CON_OUT_SIZE                                   0x1
#define _CCP1CON_OUT_LENGTH                                 0x1
#define _CCP1CON_OUT_MASK                                   0x20
#define _CCP1CON_EN_POSN                                    0x7
#define _CCP1CON_EN_POSITION                                0x7
#define _CCP1CON_EN_SIZE                                    0x1
#define _CCP1CON_EN_LENGTH                                  0x1
#define _CCP1CON_EN_MASK                                    0x80
#define _CCP1CON_MODE0_POSN                                 0x0
#define _CCP1CON_MODE0_POSITION                             0x0
#define _CCP1CON_MODE0_SIZE                                 0x1
#define _CCP1CON_MODE0_LENGTH                               0x1
#define _CCP1CON_MODE0_MASK                                 0x1
#define _CCP1CON_MODE1_POSN                                 0x1
#define _CCP1CON_MODE1_POSITION                             0x1
#define _CCP1CON_MODE1_SIZE                                 0x1
#define _CCP1CON_MODE1_LENGTH                               0x1
#define _CCP1CON_MODE1_MASK                                 0x2
#define _CCP1CON_MODE2_POSN                                 0x2
#define _CCP1CON_MODE2_POSITION                             0x2
#define _CCP1CON_MODE2_SIZE                                 0x1
#define _CCP1CON_MODE2_LENGTH                               0x1
#define _CCP1CON_MODE2_MASK                                 0x4
#define _CCP1CON_MODE3_POSN                                 0x3
#define _CCP1CON_MODE3_POSITION                             0x3
#define _CCP1CON_MODE3_SIZE                                 0x1
#define _CCP1CON_MODE3_LENGTH                               0x1
#define _CCP1CON_MODE3_MASK                                 0x8
#define _CCP1CON_CCP1MODE_POSN                              0x0
#define _CCP1CON_CCP1MODE_POSITION                          0x0
#define _CCP1CON_CCP1MODE_SIZE                              0x4
#define _CCP1CON_CCP1MODE_LENGTH                            0x4
#define _CCP1CON_CCP1MODE_MASK                              0xF
#define _CCP1CON_CCP1FMT_POSN                               0x4
#define _CCP1CON_CCP1FMT_POSITION                           0x4
#define _CCP1CON_CCP1FMT_SIZE                               0x1
#define _CCP1CON_CCP1FMT_LENGTH                             0x1
#define _CCP1CON_CCP1FMT_MASK                               0x10
#define _CCP1CON_CCP1OUT_POSN                               0x5
#define _CCP1CON_CCP1OUT_POSITION                           0x5
#define _CCP1CON_CCP1OUT_SIZE                               0x1
#define _CCP1CON_CCP1OUT_LENGTH                             0x1
#define _CCP1CON_CCP1OUT_MASK                               0x20
#define _CCP1CON_CCP1EN_POSN                                0x7
#define _CCP1CON_CCP1EN_POSITION                            0x7
#define _CCP1CON_CCP1EN_SIZE                                0x1
#define _CCP1CON_CCP1EN_LENGTH                              0x1
#define _CCP1CON_CCP1EN_MASK                                0x80
#define _CCP1CON_CCP1MODE0_POSN                             0x0
#define _CCP1CON_CCP1MODE0_POSITION                         0x0
#define _CCP1CON_CCP1MODE0_SIZE                             0x1
#define _CCP1CON_CCP1MODE0_LENGTH                           0x1
#define _CCP1CON_CCP1MODE0_MASK                             0x1
#define _CCP1CON_CCP1MODE1_POSN                             0x1
#define _CCP1CON_CCP1MODE1_POSITION                         0x1
#define _CCP1CON_CCP1MODE1_SIZE                             0x1
#define _CCP1CON_CCP1MODE1_LENGTH                           0x1
#define _CCP1CON_CCP1MODE1_MASK                             0x2
#define _CCP1CON_CCP1MODE2_POSN                             0x2
#define _CCP1CON_CCP1MODE2_POSITION                         0x2
#define _CCP1CON_CCP1MODE2_SIZE                             0x1
#define _CCP1CON_CCP1MODE2_LENGTH                           0x1
#define _CCP1CON_CCP1MODE2_MASK                             0x4
#define _CCP1CON_CCP1MODE3_POSN                             0x3
#define _CCP1CON_CCP1MODE3_POSITION                         0x3
#define _CCP1CON_CCP1MODE3_SIZE                             0x1
#define _CCP1CON_CCP1MODE3_LENGTH                           0x1
#define _CCP1CON_CCP1MODE3_MASK                             0x8
#define _CCP1CON_P1M1_POSN                                  0x7
#define _CCP1CON_P1M1_POSITION                              0x7
#define _CCP1CON_P1M1_SIZE                                  0x1
#define _CCP1CON_P1M1_LENGTH                                0x1
#define _CCP1CON_P1M1_MASK                                  0x80

// Register: CCP1CAP
#define CCP1CAP CCP1CAP
extern volatile unsigned char           CCP1CAP             __at(0x40F);
#ifndef _LIB_BUILD
asm("CCP1CAP equ 040Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :6;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
        unsigned CTS3                   :1;
    };
    struct {
        unsigned CCP1CTS                :6;
    };
    struct {
        unsigned CCP1CTS0               :1;
        unsigned CCP1CTS1               :1;
        unsigned CCP1CTS2               :1;
        unsigned CCP1CTS3               :1;
    };
} CCP1CAPbits_t;
extern volatile CCP1CAPbits_t CCP1CAPbits __at(0x40F);
// bitfield macros
#define _CCP1CAP_CTS_POSN                                   0x0
#define _CCP1CAP_CTS_POSITION                               0x0
#define _CCP1CAP_CTS_SIZE                                   0x6
#define _CCP1CAP_CTS_LENGTH                                 0x6
#define _CCP1CAP_CTS_MASK                                   0x3F
#define _CCP1CAP_CTS0_POSN                                  0x0
#define _CCP1CAP_CTS0_POSITION                              0x0
#define _CCP1CAP_CTS0_SIZE                                  0x1
#define _CCP1CAP_CTS0_LENGTH                                0x1
#define _CCP1CAP_CTS0_MASK                                  0x1
#define _CCP1CAP_CTS1_POSN                                  0x1
#define _CCP1CAP_CTS1_POSITION                              0x1
#define _CCP1CAP_CTS1_SIZE                                  0x1
#define _CCP1CAP_CTS1_LENGTH                                0x1
#define _CCP1CAP_CTS1_MASK                                  0x2
#define _CCP1CAP_CTS2_POSN                                  0x2
#define _CCP1CAP_CTS2_POSITION                              0x2
#define _CCP1CAP_CTS2_SIZE                                  0x1
#define _CCP1CAP_CTS2_LENGTH                                0x1
#define _CCP1CAP_CTS2_MASK                                  0x4
#define _CCP1CAP_CTS3_POSN                                  0x3
#define _CCP1CAP_CTS3_POSITION                              0x3
#define _CCP1CAP_CTS3_SIZE                                  0x1
#define _CCP1CAP_CTS3_LENGTH                                0x1
#define _CCP1CAP_CTS3_MASK                                  0x8
#define _CCP1CAP_CCP1CTS_POSN                               0x0
#define _CCP1CAP_CCP1CTS_POSITION                           0x0
#define _CCP1CAP_CCP1CTS_SIZE                               0x6
#define _CCP1CAP_CCP1CTS_LENGTH                             0x6
#define _CCP1CAP_CCP1CTS_MASK                               0x3F
#define _CCP1CAP_CCP1CTS0_POSN                              0x0
#define _CCP1CAP_CCP1CTS0_POSITION                          0x0
#define _CCP1CAP_CCP1CTS0_SIZE                              0x1
#define _CCP1CAP_CCP1CTS0_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS0_MASK                              0x1
#define _CCP1CAP_CCP1CTS1_POSN                              0x1
#define _CCP1CAP_CCP1CTS1_POSITION                          0x1
#define _CCP1CAP_CCP1CTS1_SIZE                              0x1
#define _CCP1CAP_CCP1CTS1_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS1_MASK                              0x2
#define _CCP1CAP_CCP1CTS2_POSN                              0x2
#define _CCP1CAP_CCP1CTS2_POSITION                          0x2
#define _CCP1CAP_CCP1CTS2_SIZE                              0x1
#define _CCP1CAP_CCP1CTS2_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS2_MASK                              0x4
#define _CCP1CAP_CCP1CTS3_POSN                              0x3
#define _CCP1CAP_CCP1CTS3_POSITION                          0x3
#define _CCP1CAP_CCP1CTS3_SIZE                              0x1
#define _CCP1CAP_CCP1CTS3_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS3_MASK                              0x8

// Register: CCPR2
#define CCPR2 CCPR2
extern volatile unsigned short          CCPR2               __at(0x410);
#ifndef _LIB_BUILD
asm("CCPR2 equ 0410h");
#endif

// Register: CCPR2L
#define CCPR2L CCPR2L
extern volatile unsigned char           CCPR2L              __at(0x410);
#ifndef _LIB_BUILD
asm("CCPR2L equ 0410h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPRL                  :8;
    };
} CCPR2Lbits_t;
extern volatile CCPR2Lbits_t CCPR2Lbits __at(0x410);
// bitfield macros
#define _CCPR2L_CCPRL_POSN                                  0x0
#define _CCPR2L_CCPRL_POSITION                              0x0
#define _CCPR2L_CCPRL_SIZE                                  0x8
#define _CCPR2L_CCPRL_LENGTH                                0x8
#define _CCPR2L_CCPRL_MASK                                  0xFF

// Register: CCPR2H
#define CCPR2H CCPR2H
extern volatile unsigned char           CCPR2H              __at(0x411);
#ifndef _LIB_BUILD
asm("CCPR2H equ 0411h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCPRH                  :8;
    };
} CCPR2Hbits_t;
extern volatile CCPR2Hbits_t CCPR2Hbits __at(0x411);
// bitfield macros
#define _CCPR2H_CCPRH_POSN                                  0x0
#define _CCPR2H_CCPRH_POSITION                              0x0
#define _CCPR2H_CCPRH_SIZE                                  0x8
#define _CCPR2H_CCPRH_LENGTH                                0x8
#define _CCPR2H_CCPRH_MASK                                  0xFF

// Register: CCP2CON
#define CCP2CON CCP2CON
extern volatile unsigned char           CCP2CON             __at(0x412);
#ifndef _LIB_BUILD
asm("CCP2CON equ 0412h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP2MODE               :4;
        unsigned CCP2FMT                :1;
        unsigned CCP2OUT                :1;
        unsigned                        :1;
        unsigned CCP2EN                 :1;
    };
    struct {
        unsigned CCP2MODE0              :1;
        unsigned CCP2MODE1              :1;
        unsigned CCP2MODE2              :1;
        unsigned CCP2MODE3              :1;
    };
    struct {
        unsigned                        :7;
        unsigned P2M1                   :1;
    };
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits __at(0x412);
// bitfield macros
#define _CCP2CON_MODE_POSN                                  0x0
#define _CCP2CON_MODE_POSITION                              0x0
#define _CCP2CON_MODE_SIZE                                  0x4
#define _CCP2CON_MODE_LENGTH                                0x4
#define _CCP2CON_MODE_MASK                                  0xF
#define _CCP2CON_FMT_POSN                                   0x4
#define _CCP2CON_FMT_POSITION                               0x4
#define _CCP2CON_FMT_SIZE                                   0x1
#define _CCP2CON_FMT_LENGTH                                 0x1
#define _CCP2CON_FMT_MASK                                   0x10
#define _CCP2CON_OUT_POSN                                   0x5
#define _CCP2CON_OUT_POSITION                               0x5
#define _CCP2CON_OUT_SIZE                                   0x1
#define _CCP2CON_OUT_LENGTH                                 0x1
#define _CCP2CON_OUT_MASK                                   0x20
#define _CCP2CON_EN_POSN                                    0x7
#define _CCP2CON_EN_POSITION                                0x7
#define _CCP2CON_EN_SIZE                                    0x1
#define _CCP2CON_EN_LENGTH                                  0x1
#define _CCP2CON_EN_MASK                                    0x80
#define _CCP2CON_MODE0_POSN                                 0x0
#define _CCP2CON_MODE0_POSITION                             0x0
#define _CCP2CON_MODE0_SIZE                                 0x1
#define _CCP2CON_MODE0_LENGTH                               0x1
#define _CCP2CON_MODE0_MASK                                 0x1
#define _CCP2CON_MODE1_POSN                                 0x1
#define _CCP2CON_MODE1_POSITION                             0x1
#define _CCP2CON_MODE1_SIZE                                 0x1
#define _CCP2CON_MODE1_LENGTH                               0x1
#define _CCP2CON_MODE1_MASK                                 0x2
#define _CCP2CON_MODE2_POSN                                 0x2
#define _CCP2CON_MODE2_POSITION                             0x2
#define _CCP2CON_MODE2_SIZE                                 0x1
#define _CCP2CON_MODE2_LENGTH                               0x1
#define _CCP2CON_MODE2_MASK                                 0x4
#define _CCP2CON_MODE3_POSN                                 0x3
#define _CCP2CON_MODE3_POSITION                             0x3
#define _CCP2CON_MODE3_SIZE                                 0x1
#define _CCP2CON_MODE3_LENGTH                               0x1
#define _CCP2CON_MODE3_MASK                                 0x8
#define _CCP2CON_CCP2MODE_POSN                              0x0
#define _CCP2CON_CCP2MODE_POSITION                          0x0
#define _CCP2CON_CCP2MODE_SIZE                              0x4
#define _CCP2CON_CCP2MODE_LENGTH                            0x4
#define _CCP2CON_CCP2MODE_MASK                              0xF
#define _CCP2CON_CCP2FMT_POSN                               0x4
#define _CCP2CON_CCP2FMT_POSITION                           0x4
#define _CCP2CON_CCP2FMT_SIZE                               0x1
#define _CCP2CON_CCP2FMT_LENGTH                             0x1
#define _CCP2CON_CCP2FMT_MASK                               0x10
#define _CCP2CON_CCP2OUT_POSN                               0x5
#define _CCP2CON_CCP2OUT_POSITION                           0x5
#define _CCP2CON_CCP2OUT_SIZE                               0x1
#define _CCP2CON_CCP2OUT_LENGTH                             0x1
#define _CCP2CON_CCP2OUT_MASK                               0x20
#define _CCP2CON_CCP2EN_POSN                                0x7
#define _CCP2CON_CCP2EN_POSITION                            0x7
#define _CCP2CON_CCP2EN_SIZE                                0x1
#define _CCP2CON_CCP2EN_LENGTH                              0x1
#define _CCP2CON_CCP2EN_MASK                                0x80
#define _CCP2CON_CCP2MODE0_POSN                             0x0
#define _CCP2CON_CCP2MODE0_POSITION                         0x0
#define _CCP2CON_CCP2MODE0_SIZE                             0x1
#define _CCP2CON_CCP2MODE0_LENGTH                           0x1
#define _CCP2CON_CCP2MODE0_MASK                             0x1
#define _CCP2CON_CCP2MODE1_POSN                             0x1
#define _CCP2CON_CCP2MODE1_POSITION                         0x1
#define _CCP2CON_CCP2MODE1_SIZE                             0x1
#define _CCP2CON_CCP2MODE1_LENGTH                           0x1
#define _CCP2CON_CCP2MODE1_MASK                             0x2
#define _CCP2CON_CCP2MODE2_POSN                             0x2
#define _CCP2CON_CCP2MODE2_POSITION                         0x2
#define _CCP2CON_CCP2MODE2_SIZE                             0x1
#define _CCP2CON_CCP2MODE2_LENGTH                           0x1
#define _CCP2CON_CCP2MODE2_MASK                             0x4
#define _CCP2CON_CCP2MODE3_POSN                             0x3
#define _CCP2CON_CCP2MODE3_POSITION                         0x3
#define _CCP2CON_CCP2MODE3_SIZE                             0x1
#define _CCP2CON_CCP2MODE3_LENGTH                           0x1
#define _CCP2CON_CCP2MODE3_MASK                             0x8
#define _CCP2CON_P2M1_POSN                                  0x7
#define _CCP2CON_P2M1_POSITION                              0x7
#define _CCP2CON_P2M1_SIZE                                  0x1
#define _CCP2CON_P2M1_LENGTH                                0x1
#define _CCP2CON_P2M1_MASK                                  0x80

// Register: CCP2CAP
#define CCP2CAP CCP2CAP
extern volatile unsigned char           CCP2CAP             __at(0x413);
#ifndef _LIB_BUILD
asm("CCP2CAP equ 0413h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :6;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
        unsigned CTS3                   :1;
    };
    struct {
        unsigned CCP2CTS                :6;
    };
    struct {
        unsigned CCP2CTS0               :1;
        unsigned CCP2CTS1               :1;
        unsigned CCP2CTS2               :1;
        unsigned CCP2CTS3               :1;
    };
} CCP2CAPbits_t;
extern volatile CCP2CAPbits_t CCP2CAPbits __at(0x413);
// bitfield macros
#define _CCP2CAP_CTS_POSN                                   0x0
#define _CCP2CAP_CTS_POSITION                               0x0
#define _CCP2CAP_CTS_SIZE                                   0x6
#define _CCP2CAP_CTS_LENGTH                                 0x6
#define _CCP2CAP_CTS_MASK                                   0x3F
#define _CCP2CAP_CTS0_POSN                                  0x0
#define _CCP2CAP_CTS0_POSITION                              0x0
#define _CCP2CAP_CTS0_SIZE                                  0x1
#define _CCP2CAP_CTS0_LENGTH                                0x1
#define _CCP2CAP_CTS0_MASK                                  0x1
#define _CCP2CAP_CTS1_POSN                                  0x1
#define _CCP2CAP_CTS1_POSITION                              0x1
#define _CCP2CAP_CTS1_SIZE                                  0x1
#define _CCP2CAP_CTS1_LENGTH                                0x1
#define _CCP2CAP_CTS1_MASK                                  0x2
#define _CCP2CAP_CTS2_POSN                                  0x2
#define _CCP2CAP_CTS2_POSITION                              0x2
#define _CCP2CAP_CTS2_SIZE                                  0x1
#define _CCP2CAP_CTS2_LENGTH                                0x1
#define _CCP2CAP_CTS2_MASK                                  0x4
#define _CCP2CAP_CTS3_POSN                                  0x3
#define _CCP2CAP_CTS3_POSITION                              0x3
#define _CCP2CAP_CTS3_SIZE                                  0x1
#define _CCP2CAP_CTS3_LENGTH                                0x1
#define _CCP2CAP_CTS3_MASK                                  0x8
#define _CCP2CAP_CCP2CTS_POSN                               0x0
#define _CCP2CAP_CCP2CTS_POSITION                           0x0
#define _CCP2CAP_CCP2CTS_SIZE                               0x6
#define _CCP2CAP_CCP2CTS_LENGTH                             0x6
#define _CCP2CAP_CCP2CTS_MASK                               0x3F
#define _CCP2CAP_CCP2CTS0_POSN                              0x0
#define _CCP2CAP_CCP2CTS0_POSITION                          0x0
#define _CCP2CAP_CCP2CTS0_SIZE                              0x1
#define _CCP2CAP_CCP2CTS0_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS0_MASK                              0x1
#define _CCP2CAP_CCP2CTS1_POSN                              0x1
#define _CCP2CAP_CCP2CTS1_POSITION                          0x1
#define _CCP2CAP_CCP2CTS1_SIZE                              0x1
#define _CCP2CAP_CCP2CTS1_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS1_MASK                              0x2
#define _CCP2CAP_CCP2CTS2_POSN                              0x2
#define _CCP2CAP_CCP2CTS2_POSITION                          0x2
#define _CCP2CAP_CCP2CTS2_SIZE                              0x1
#define _CCP2CAP_CCP2CTS2_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS2_MASK                              0x4
#define _CCP2CAP_CCP2CTS3_POSN                              0x3
#define _CCP2CAP_CCP2CTS3_POSITION                          0x3
#define _CCP2CAP_CCP2CTS3_SIZE                              0x1
#define _CCP2CAP_CCP2CTS3_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS3_MASK                              0x8

// Register: CCPTMRS0
#define CCPTMRS0 CCPTMRS0
extern volatile unsigned char           CCPTMRS0            __at(0x41F);
#ifndef _LIB_BUILD
asm("CCPTMRS0 equ 041Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1TSEL                 :2;
        unsigned C2TSEL                 :2;
    };
} CCPTMRS0bits_t;
extern volatile CCPTMRS0bits_t CCPTMRS0bits __at(0x41F);
// bitfield macros
#define _CCPTMRS0_C1TSEL_POSN                               0x0
#define _CCPTMRS0_C1TSEL_POSITION                           0x0
#define _CCPTMRS0_C1TSEL_SIZE                               0x2
#define _CCPTMRS0_C1TSEL_LENGTH                             0x2
#define _CCPTMRS0_C1TSEL_MASK                               0x3
#define _CCPTMRS0_C2TSEL_POSN                               0x2
#define _CCPTMRS0_C2TSEL_POSITION                           0x2
#define _CCPTMRS0_C2TSEL_SIZE                               0x2
#define _CCPTMRS0_C2TSEL_LENGTH                             0x2
#define _CCPTMRS0_C2TSEL_MASK                               0xC

// Register: CLBCON
#define CLBCON CLBCON
extern volatile unsigned char           CLBCON              __at(0x50C);
#ifndef _LIB_BUILD
asm("CLBCON equ 050Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BUSY                   :1;
        unsigned RDHOLD                 :1;
        unsigned                        :5;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :7;
        unsigned CLBEN                  :1;
    };
} CLBCONbits_t;
extern volatile CLBCONbits_t CLBCONbits __at(0x50C);
// bitfield macros
#define _CLBCON_BUSY_POSN                                   0x0
#define _CLBCON_BUSY_POSITION                               0x0
#define _CLBCON_BUSY_SIZE                                   0x1
#define _CLBCON_BUSY_LENGTH                                 0x1
#define _CLBCON_BUSY_MASK                                   0x1
#define _CLBCON_RDHOLD_POSN                                 0x1
#define _CLBCON_RDHOLD_POSITION                             0x1
#define _CLBCON_RDHOLD_SIZE                                 0x1
#define _CLBCON_RDHOLD_LENGTH                               0x1
#define _CLBCON_RDHOLD_MASK                                 0x2
#define _CLBCON_EN_POSN                                     0x7
#define _CLBCON_EN_POSITION                                 0x7
#define _CLBCON_EN_SIZE                                     0x1
#define _CLBCON_EN_LENGTH                                   0x1
#define _CLBCON_EN_MASK                                     0x80
#define _CLBCON_CLBEN_POSN                                  0x7
#define _CLBCON_CLBEN_POSITION                              0x7
#define _CLBCON_CLBEN_SIZE                                  0x1
#define _CLBCON_CLBEN_LENGTH                                0x1
#define _CLBCON_CLBEN_MASK                                  0x80

// Register: CLBSWINU
#define CLBSWINU CLBSWINU
extern volatile unsigned char           CLBSWINU            __at(0x50D);
#ifndef _LIB_BUILD
asm("CLBSWINU equ 050Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLBSWINU               :8;
    };
    struct {
        unsigned CLBSWIN24              :1;
        unsigned CLBSWIN25              :1;
        unsigned CLBSWIN26              :1;
        unsigned CLBSWIN27              :1;
        unsigned CLBSWIN28              :1;
        unsigned CLBSWIN29              :1;
        unsigned CLBSWIN30              :1;
        unsigned CLBSWIN31              :1;
    };
} CLBSWINUbits_t;
extern volatile CLBSWINUbits_t CLBSWINUbits __at(0x50D);
// bitfield macros
#define _CLBSWINU_CLBSWINU_POSN                             0x0
#define _CLBSWINU_CLBSWINU_POSITION                         0x0
#define _CLBSWINU_CLBSWINU_SIZE                             0x8
#define _CLBSWINU_CLBSWINU_LENGTH                           0x8
#define _CLBSWINU_CLBSWINU_MASK                             0xFF
#define _CLBSWINU_CLBSWIN24_POSN                            0x0
#define _CLBSWINU_CLBSWIN24_POSITION                        0x0
#define _CLBSWINU_CLBSWIN24_SIZE                            0x1
#define _CLBSWINU_CLBSWIN24_LENGTH                          0x1
#define _CLBSWINU_CLBSWIN24_MASK                            0x1
#define _CLBSWINU_CLBSWIN25_POSN                            0x1
#define _CLBSWINU_CLBSWIN25_POSITION                        0x1
#define _CLBSWINU_CLBSWIN25_SIZE                            0x1
#define _CLBSWINU_CLBSWIN25_LENGTH                          0x1
#define _CLBSWINU_CLBSWIN25_MASK                            0x2
#define _CLBSWINU_CLBSWIN26_POSN                            0x2
#define _CLBSWINU_CLBSWIN26_POSITION                        0x2
#define _CLBSWINU_CLBSWIN26_SIZE                            0x1
#define _CLBSWINU_CLBSWIN26_LENGTH                          0x1
#define _CLBSWINU_CLBSWIN26_MASK                            0x4
#define _CLBSWINU_CLBSWIN27_POSN                            0x3
#define _CLBSWINU_CLBSWIN27_POSITION                        0x3
#define _CLBSWINU_CLBSWIN27_SIZE                            0x1
#define _CLBSWINU_CLBSWIN27_LENGTH                          0x1
#define _CLBSWINU_CLBSWIN27_MASK                            0x8
#define _CLBSWINU_CLBSWIN28_POSN                            0x4
#define _CLBSWINU_CLBSWIN28_POSITION                        0x4
#define _CLBSWINU_CLBSWIN28_SIZE                            0x1
#define _CLBSWINU_CLBSWIN28_LENGTH                          0x1
#define _CLBSWINU_CLBSWIN28_MASK                            0x10
#define _CLBSWINU_CLBSWIN29_POSN                            0x5
#define _CLBSWINU_CLBSWIN29_POSITION                        0x5
#define _CLBSWINU_CLBSWIN29_SIZE                            0x1
#define _CLBSWINU_CLBSWIN29_LENGTH                          0x1
#define _CLBSWINU_CLBSWIN29_MASK                            0x20
#define _CLBSWINU_CLBSWIN30_POSN                            0x6
#define _CLBSWINU_CLBSWIN30_POSITION                        0x6
#define _CLBSWINU_CLBSWIN30_SIZE                            0x1
#define _CLBSWINU_CLBSWIN30_LENGTH                          0x1
#define _CLBSWINU_CLBSWIN30_MASK                            0x40
#define _CLBSWINU_CLBSWIN31_POSN                            0x7
#define _CLBSWINU_CLBSWIN31_POSITION                        0x7
#define _CLBSWINU_CLBSWIN31_SIZE                            0x1
#define _CLBSWINU_CLBSWIN31_LENGTH                          0x1
#define _CLBSWINU_CLBSWIN31_MASK                            0x80

// Register: CLBSWINH
#define CLBSWINH CLBSWINH
extern volatile unsigned char           CLBSWINH            __at(0x50E);
#ifndef _LIB_BUILD
asm("CLBSWINH equ 050Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLBSWINH               :8;
    };
    struct {
        unsigned CLBSWIN16              :1;
        unsigned CLBSWIN17              :1;
        unsigned CLBSWIN18              :1;
        unsigned CLBSWIN19              :1;
        unsigned CLBSWIN20              :1;
        unsigned CLBSWIN21              :1;
        unsigned CLBSWIN22              :1;
        unsigned CLBSWIN23              :1;
    };
} CLBSWINHbits_t;
extern volatile CLBSWINHbits_t CLBSWINHbits __at(0x50E);
// bitfield macros
#define _CLBSWINH_CLBSWINH_POSN                             0x0
#define _CLBSWINH_CLBSWINH_POSITION                         0x0
#define _CLBSWINH_CLBSWINH_SIZE                             0x8
#define _CLBSWINH_CLBSWINH_LENGTH                           0x8
#define _CLBSWINH_CLBSWINH_MASK                             0xFF
#define _CLBSWINH_CLBSWIN16_POSN                            0x0
#define _CLBSWINH_CLBSWIN16_POSITION                        0x0
#define _CLBSWINH_CLBSWIN16_SIZE                            0x1
#define _CLBSWINH_CLBSWIN16_LENGTH                          0x1
#define _CLBSWINH_CLBSWIN16_MASK                            0x1
#define _CLBSWINH_CLBSWIN17_POSN                            0x1
#define _CLBSWINH_CLBSWIN17_POSITION                        0x1
#define _CLBSWINH_CLBSWIN17_SIZE                            0x1
#define _CLBSWINH_CLBSWIN17_LENGTH                          0x1
#define _CLBSWINH_CLBSWIN17_MASK                            0x2
#define _CLBSWINH_CLBSWIN18_POSN                            0x2
#define _CLBSWINH_CLBSWIN18_POSITION                        0x2
#define _CLBSWINH_CLBSWIN18_SIZE                            0x1
#define _CLBSWINH_CLBSWIN18_LENGTH                          0x1
#define _CLBSWINH_CLBSWIN18_MASK                            0x4
#define _CLBSWINH_CLBSWIN19_POSN                            0x3
#define _CLBSWINH_CLBSWIN19_POSITION                        0x3
#define _CLBSWINH_CLBSWIN19_SIZE                            0x1
#define _CLBSWINH_CLBSWIN19_LENGTH                          0x1
#define _CLBSWINH_CLBSWIN19_MASK                            0x8
#define _CLBSWINH_CLBSWIN20_POSN                            0x4
#define _CLBSWINH_CLBSWIN20_POSITION                        0x4
#define _CLBSWINH_CLBSWIN20_SIZE                            0x1
#define _CLBSWINH_CLBSWIN20_LENGTH                          0x1
#define _CLBSWINH_CLBSWIN20_MASK                            0x10
#define _CLBSWINH_CLBSWIN21_POSN                            0x5
#define _CLBSWINH_CLBSWIN21_POSITION                        0x5
#define _CLBSWINH_CLBSWIN21_SIZE                            0x1
#define _CLBSWINH_CLBSWIN21_LENGTH                          0x1
#define _CLBSWINH_CLBSWIN21_MASK                            0x20
#define _CLBSWINH_CLBSWIN22_POSN                            0x6
#define _CLBSWINH_CLBSWIN22_POSITION                        0x6
#define _CLBSWINH_CLBSWIN22_SIZE                            0x1
#define _CLBSWINH_CLBSWIN22_LENGTH                          0x1
#define _CLBSWINH_CLBSWIN22_MASK                            0x40
#define _CLBSWINH_CLBSWIN23_POSN                            0x7
#define _CLBSWINH_CLBSWIN23_POSITION                        0x7
#define _CLBSWINH_CLBSWIN23_SIZE                            0x1
#define _CLBSWINH_CLBSWIN23_LENGTH                          0x1
#define _CLBSWINH_CLBSWIN23_MASK                            0x80

// Register: CLBSWINM
#define CLBSWINM CLBSWINM
extern volatile unsigned char           CLBSWINM            __at(0x50F);
#ifndef _LIB_BUILD
asm("CLBSWINM equ 050Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLBSWINM               :8;
    };
    struct {
        unsigned CLBSWIN8               :1;
        unsigned CLBSWIN9               :1;
        unsigned CLBSWIN10              :1;
        unsigned CLBSWIN11              :1;
        unsigned CLBSWIN12              :1;
        unsigned CLBSWIN13              :1;
        unsigned CLBSWIN14              :1;
        unsigned CLBSWIN15              :1;
    };
} CLBSWINMbits_t;
extern volatile CLBSWINMbits_t CLBSWINMbits __at(0x50F);
// bitfield macros
#define _CLBSWINM_CLBSWINM_POSN                             0x0
#define _CLBSWINM_CLBSWINM_POSITION                         0x0
#define _CLBSWINM_CLBSWINM_SIZE                             0x8
#define _CLBSWINM_CLBSWINM_LENGTH                           0x8
#define _CLBSWINM_CLBSWINM_MASK                             0xFF
#define _CLBSWINM_CLBSWIN8_POSN                             0x0
#define _CLBSWINM_CLBSWIN8_POSITION                         0x0
#define _CLBSWINM_CLBSWIN8_SIZE                             0x1
#define _CLBSWINM_CLBSWIN8_LENGTH                           0x1
#define _CLBSWINM_CLBSWIN8_MASK                             0x1
#define _CLBSWINM_CLBSWIN9_POSN                             0x1
#define _CLBSWINM_CLBSWIN9_POSITION                         0x1
#define _CLBSWINM_CLBSWIN9_SIZE                             0x1
#define _CLBSWINM_CLBSWIN9_LENGTH                           0x1
#define _CLBSWINM_CLBSWIN9_MASK                             0x2
#define _CLBSWINM_CLBSWIN10_POSN                            0x2
#define _CLBSWINM_CLBSWIN10_POSITION                        0x2
#define _CLBSWINM_CLBSWIN10_SIZE                            0x1
#define _CLBSWINM_CLBSWIN10_LENGTH                          0x1
#define _CLBSWINM_CLBSWIN10_MASK                            0x4
#define _CLBSWINM_CLBSWIN11_POSN                            0x3
#define _CLBSWINM_CLBSWIN11_POSITION                        0x3
#define _CLBSWINM_CLBSWIN11_SIZE                            0x1
#define _CLBSWINM_CLBSWIN11_LENGTH                          0x1
#define _CLBSWINM_CLBSWIN11_MASK                            0x8
#define _CLBSWINM_CLBSWIN12_POSN                            0x4
#define _CLBSWINM_CLBSWIN12_POSITION                        0x4
#define _CLBSWINM_CLBSWIN12_SIZE                            0x1
#define _CLBSWINM_CLBSWIN12_LENGTH                          0x1
#define _CLBSWINM_CLBSWIN12_MASK                            0x10
#define _CLBSWINM_CLBSWIN13_POSN                            0x5
#define _CLBSWINM_CLBSWIN13_POSITION                        0x5
#define _CLBSWINM_CLBSWIN13_SIZE                            0x1
#define _CLBSWINM_CLBSWIN13_LENGTH                          0x1
#define _CLBSWINM_CLBSWIN13_MASK                            0x20
#define _CLBSWINM_CLBSWIN14_POSN                            0x6
#define _CLBSWINM_CLBSWIN14_POSITION                        0x6
#define _CLBSWINM_CLBSWIN14_SIZE                            0x1
#define _CLBSWINM_CLBSWIN14_LENGTH                          0x1
#define _CLBSWINM_CLBSWIN14_MASK                            0x40
#define _CLBSWINM_CLBSWIN15_POSN                            0x7
#define _CLBSWINM_CLBSWIN15_POSITION                        0x7
#define _CLBSWINM_CLBSWIN15_SIZE                            0x1
#define _CLBSWINM_CLBSWIN15_LENGTH                          0x1
#define _CLBSWINM_CLBSWIN15_MASK                            0x80

// Register: CLBSWINL
#define CLBSWINL CLBSWINL
extern volatile unsigned char           CLBSWINL            __at(0x510);
#ifndef _LIB_BUILD
asm("CLBSWINL equ 0510h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLBSWINL               :8;
    };
    struct {
        unsigned CLBSWIN0               :1;
        unsigned CLBSWIN1               :1;
        unsigned CLBSWIN2               :1;
        unsigned CLBSWIN3               :1;
        unsigned CLBSWIN4               :1;
        unsigned CLBSWIN5               :1;
        unsigned CLBSWIN6               :1;
        unsigned CLBSWIN7               :1;
    };
} CLBSWINLbits_t;
extern volatile CLBSWINLbits_t CLBSWINLbits __at(0x510);
// bitfield macros
#define _CLBSWINL_CLBSWINL_POSN                             0x0
#define _CLBSWINL_CLBSWINL_POSITION                         0x0
#define _CLBSWINL_CLBSWINL_SIZE                             0x8
#define _CLBSWINL_CLBSWINL_LENGTH                           0x8
#define _CLBSWINL_CLBSWINL_MASK                             0xFF
#define _CLBSWINL_CLBSWIN0_POSN                             0x0
#define _CLBSWINL_CLBSWIN0_POSITION                         0x0
#define _CLBSWINL_CLBSWIN0_SIZE                             0x1
#define _CLBSWINL_CLBSWIN0_LENGTH                           0x1
#define _CLBSWINL_CLBSWIN0_MASK                             0x1
#define _CLBSWINL_CLBSWIN1_POSN                             0x1
#define _CLBSWINL_CLBSWIN1_POSITION                         0x1
#define _CLBSWINL_CLBSWIN1_SIZE                             0x1
#define _CLBSWINL_CLBSWIN1_LENGTH                           0x1
#define _CLBSWINL_CLBSWIN1_MASK                             0x2
#define _CLBSWINL_CLBSWIN2_POSN                             0x2
#define _CLBSWINL_CLBSWIN2_POSITION                         0x2
#define _CLBSWINL_CLBSWIN2_SIZE                             0x1
#define _CLBSWINL_CLBSWIN2_LENGTH                           0x1
#define _CLBSWINL_CLBSWIN2_MASK                             0x4
#define _CLBSWINL_CLBSWIN3_POSN                             0x3
#define _CLBSWINL_CLBSWIN3_POSITION                         0x3
#define _CLBSWINL_CLBSWIN3_SIZE                             0x1
#define _CLBSWINL_CLBSWIN3_LENGTH                           0x1
#define _CLBSWINL_CLBSWIN3_MASK                             0x8
#define _CLBSWINL_CLBSWIN4_POSN                             0x4
#define _CLBSWINL_CLBSWIN4_POSITION                         0x4
#define _CLBSWINL_CLBSWIN4_SIZE                             0x1
#define _CLBSWINL_CLBSWIN4_LENGTH                           0x1
#define _CLBSWINL_CLBSWIN4_MASK                             0x10
#define _CLBSWINL_CLBSWIN5_POSN                             0x5
#define _CLBSWINL_CLBSWIN5_POSITION                         0x5
#define _CLBSWINL_CLBSWIN5_SIZE                             0x1
#define _CLBSWINL_CLBSWIN5_LENGTH                           0x1
#define _CLBSWINL_CLBSWIN5_MASK                             0x20
#define _CLBSWINL_CLBSWIN6_POSN                             0x6
#define _CLBSWINL_CLBSWIN6_POSITION                         0x6
#define _CLBSWINL_CLBSWIN6_SIZE                             0x1
#define _CLBSWINL_CLBSWIN6_LENGTH                           0x1
#define _CLBSWINL_CLBSWIN6_MASK                             0x40
#define _CLBSWINL_CLBSWIN7_POSN                             0x7
#define _CLBSWINL_CLBSWIN7_POSITION                         0x7
#define _CLBSWINL_CLBSWIN7_SIZE                             0x1
#define _CLBSWINL_CLBSWIN7_LENGTH                           0x1
#define _CLBSWINL_CLBSWIN7_MASK                             0x80

// Register: CLBCLK
#define CLBCLK CLBCLK
extern volatile unsigned char           CLBCLK              __at(0x515);
#ifndef _LIB_BUILD
asm("CLBCLK equ 0515h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLK                    :4;
    };
    struct {
        unsigned CLK0                   :1;
        unsigned CLK1                   :1;
        unsigned CLK2                   :1;
        unsigned CLK3                   :1;
    };
} CLBCLKbits_t;
extern volatile CLBCLKbits_t CLBCLKbits __at(0x515);
// bitfield macros
#define _CLBCLK_CLK_POSN                                    0x0
#define _CLBCLK_CLK_POSITION                                0x0
#define _CLBCLK_CLK_SIZE                                    0x4
#define _CLBCLK_CLK_LENGTH                                  0x4
#define _CLBCLK_CLK_MASK                                    0xF
#define _CLBCLK_CLK0_POSN                                   0x0
#define _CLBCLK_CLK0_POSITION                               0x0
#define _CLBCLK_CLK0_SIZE                                   0x1
#define _CLBCLK_CLK0_LENGTH                                 0x1
#define _CLBCLK_CLK0_MASK                                   0x1
#define _CLBCLK_CLK1_POSN                                   0x1
#define _CLBCLK_CLK1_POSITION                               0x1
#define _CLBCLK_CLK1_SIZE                                   0x1
#define _CLBCLK_CLK1_LENGTH                                 0x1
#define _CLBCLK_CLK1_MASK                                   0x2
#define _CLBCLK_CLK2_POSN                                   0x2
#define _CLBCLK_CLK2_POSITION                               0x2
#define _CLBCLK_CLK2_SIZE                                   0x1
#define _CLBCLK_CLK2_LENGTH                                 0x1
#define _CLBCLK_CLK2_MASK                                   0x4
#define _CLBCLK_CLK3_POSN                                   0x3
#define _CLBCLK_CLK3_POSITION                               0x3
#define _CLBCLK_CLK3_SIZE                                   0x1
#define _CLBCLK_CLK3_LENGTH                                 0x1
#define _CLBCLK_CLK3_MASK                                   0x8

// Register: CLBPPSCON4
#define CLBPPSCON4 CLBPPSCON4
extern volatile unsigned char           CLBPPSCON4          __at(0x516);
#ifndef _LIB_BUILD
asm("CLBPPSCON4 equ 0516h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OESEL6                 :4;
        unsigned OESEL7                 :4;
    };
} CLBPPSCON4bits_t;
extern volatile CLBPPSCON4bits_t CLBPPSCON4bits __at(0x516);
// bitfield macros
#define _CLBPPSCON4_OESEL6_POSN                             0x0
#define _CLBPPSCON4_OESEL6_POSITION                         0x0
#define _CLBPPSCON4_OESEL6_SIZE                             0x4
#define _CLBPPSCON4_OESEL6_LENGTH                           0x4
#define _CLBPPSCON4_OESEL6_MASK                             0xF
#define _CLBPPSCON4_OESEL7_POSN                             0x4
#define _CLBPPSCON4_OESEL7_POSITION                         0x4
#define _CLBPPSCON4_OESEL7_SIZE                             0x4
#define _CLBPPSCON4_OESEL7_LENGTH                           0x4
#define _CLBPPSCON4_OESEL7_MASK                             0xF0

// Register: CLBPPSCON3
#define CLBPPSCON3 CLBPPSCON3
extern volatile unsigned char           CLBPPSCON3          __at(0x517);
#ifndef _LIB_BUILD
asm("CLBPPSCON3 equ 0517h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OESEL4                 :4;
        unsigned OESEL5                 :4;
    };
} CLBPPSCON3bits_t;
extern volatile CLBPPSCON3bits_t CLBPPSCON3bits __at(0x517);
// bitfield macros
#define _CLBPPSCON3_OESEL4_POSN                             0x0
#define _CLBPPSCON3_OESEL4_POSITION                         0x0
#define _CLBPPSCON3_OESEL4_SIZE                             0x4
#define _CLBPPSCON3_OESEL4_LENGTH                           0x4
#define _CLBPPSCON3_OESEL4_MASK                             0xF
#define _CLBPPSCON3_OESEL5_POSN                             0x4
#define _CLBPPSCON3_OESEL5_POSITION                         0x4
#define _CLBPPSCON3_OESEL5_SIZE                             0x4
#define _CLBPPSCON3_OESEL5_LENGTH                           0x4
#define _CLBPPSCON3_OESEL5_MASK                             0xF0

// Register: CLBPPSCON2
#define CLBPPSCON2 CLBPPSCON2
extern volatile unsigned char           CLBPPSCON2          __at(0x518);
#ifndef _LIB_BUILD
asm("CLBPPSCON2 equ 0518h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OESEL2                 :4;
        unsigned OESEL3                 :4;
    };
} CLBPPSCON2bits_t;
extern volatile CLBPPSCON2bits_t CLBPPSCON2bits __at(0x518);
// bitfield macros
#define _CLBPPSCON2_OESEL2_POSN                             0x0
#define _CLBPPSCON2_OESEL2_POSITION                         0x0
#define _CLBPPSCON2_OESEL2_SIZE                             0x4
#define _CLBPPSCON2_OESEL2_LENGTH                           0x4
#define _CLBPPSCON2_OESEL2_MASK                             0xF
#define _CLBPPSCON2_OESEL3_POSN                             0x4
#define _CLBPPSCON2_OESEL3_POSITION                         0x4
#define _CLBPPSCON2_OESEL3_SIZE                             0x4
#define _CLBPPSCON2_OESEL3_LENGTH                           0x4
#define _CLBPPSCON2_OESEL3_MASK                             0xF0

// Register: CLBPPSCON1
#define CLBPPSCON1 CLBPPSCON1
extern volatile unsigned char           CLBPPSCON1          __at(0x519);
#ifndef _LIB_BUILD
asm("CLBPPSCON1 equ 0519h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OESEL0                 :4;
        unsigned OESEL1                 :4;
    };
} CLBPPSCON1bits_t;
extern volatile CLBPPSCON1bits_t CLBPPSCON1bits __at(0x519);
// bitfield macros
#define _CLBPPSCON1_OESEL0_POSN                             0x0
#define _CLBPPSCON1_OESEL0_POSITION                         0x0
#define _CLBPPSCON1_OESEL0_SIZE                             0x4
#define _CLBPPSCON1_OESEL0_LENGTH                           0x4
#define _CLBPPSCON1_OESEL0_MASK                             0xF
#define _CLBPPSCON1_OESEL1_POSN                             0x4
#define _CLBPPSCON1_OESEL1_POSITION                         0x4
#define _CLBPPSCON1_OESEL1_SIZE                             0x4
#define _CLBPPSCON1_OESEL1_LENGTH                           0x4
#define _CLBPPSCON1_OESEL1_MASK                             0xF0

// Register: CLCnCON
#define CLCnCON CLCnCON
extern volatile unsigned char           CLCnCON             __at(0x68C);
#ifndef _LIB_BUILD
asm("CLCnCON equ 068Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLCnCONbits_t;
extern volatile CLCnCONbits_t CLCnCONbits __at(0x68C);
// bitfield macros
#define _CLCnCON_MODE_POSN                                  0x0
#define _CLCnCON_MODE_POSITION                              0x0
#define _CLCnCON_MODE_SIZE                                  0x3
#define _CLCnCON_MODE_LENGTH                                0x3
#define _CLCnCON_MODE_MASK                                  0x7
#define _CLCnCON_INTN_POSN                                  0x3
#define _CLCnCON_INTN_POSITION                              0x3
#define _CLCnCON_INTN_SIZE                                  0x1
#define _CLCnCON_INTN_LENGTH                                0x1
#define _CLCnCON_INTN_MASK                                  0x8
#define _CLCnCON_INTP_POSN                                  0x4
#define _CLCnCON_INTP_POSITION                              0x4
#define _CLCnCON_INTP_SIZE                                  0x1
#define _CLCnCON_INTP_LENGTH                                0x1
#define _CLCnCON_INTP_MASK                                  0x10
#define _CLCnCON_OUT_POSN                                   0x5
#define _CLCnCON_OUT_POSITION                               0x5
#define _CLCnCON_OUT_SIZE                                   0x1
#define _CLCnCON_OUT_LENGTH                                 0x1
#define _CLCnCON_OUT_MASK                                   0x20
#define _CLCnCON_EN_POSN                                    0x7
#define _CLCnCON_EN_POSITION                                0x7
#define _CLCnCON_EN_SIZE                                    0x1
#define _CLCnCON_EN_LENGTH                                  0x1
#define _CLCnCON_EN_MASK                                    0x80
#define _CLCnCON_MODE0_POSN                                 0x0
#define _CLCnCON_MODE0_POSITION                             0x0
#define _CLCnCON_MODE0_SIZE                                 0x1
#define _CLCnCON_MODE0_LENGTH                               0x1
#define _CLCnCON_MODE0_MASK                                 0x1
#define _CLCnCON_MODE1_POSN                                 0x1
#define _CLCnCON_MODE1_POSITION                             0x1
#define _CLCnCON_MODE1_SIZE                                 0x1
#define _CLCnCON_MODE1_LENGTH                               0x1
#define _CLCnCON_MODE1_MASK                                 0x2
#define _CLCnCON_MODE2_POSN                                 0x2
#define _CLCnCON_MODE2_POSITION                             0x2
#define _CLCnCON_MODE2_SIZE                                 0x1
#define _CLCnCON_MODE2_LENGTH                               0x1
#define _CLCnCON_MODE2_MASK                                 0x4

// Register: CLCnPOL
#define CLCnPOL CLCnPOL
extern volatile unsigned char           CLCnPOL             __at(0x68D);
#ifndef _LIB_BUILD
asm("CLCnPOL equ 068Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLCnPOLbits_t;
extern volatile CLCnPOLbits_t CLCnPOLbits __at(0x68D);
// bitfield macros
#define _CLCnPOL_G1POL_POSN                                 0x0
#define _CLCnPOL_G1POL_POSITION                             0x0
#define _CLCnPOL_G1POL_SIZE                                 0x1
#define _CLCnPOL_G1POL_LENGTH                               0x1
#define _CLCnPOL_G1POL_MASK                                 0x1
#define _CLCnPOL_G2POL_POSN                                 0x1
#define _CLCnPOL_G2POL_POSITION                             0x1
#define _CLCnPOL_G2POL_SIZE                                 0x1
#define _CLCnPOL_G2POL_LENGTH                               0x1
#define _CLCnPOL_G2POL_MASK                                 0x2
#define _CLCnPOL_G3POL_POSN                                 0x2
#define _CLCnPOL_G3POL_POSITION                             0x2
#define _CLCnPOL_G3POL_SIZE                                 0x1
#define _CLCnPOL_G3POL_LENGTH                               0x1
#define _CLCnPOL_G3POL_MASK                                 0x4
#define _CLCnPOL_G4POL_POSN                                 0x3
#define _CLCnPOL_G4POL_POSITION                             0x3
#define _CLCnPOL_G4POL_SIZE                                 0x1
#define _CLCnPOL_G4POL_LENGTH                               0x1
#define _CLCnPOL_G4POL_MASK                                 0x8
#define _CLCnPOL_POL_POSN                                   0x7
#define _CLCnPOL_POL_POSITION                               0x7
#define _CLCnPOL_POL_SIZE                                   0x1
#define _CLCnPOL_POL_LENGTH                                 0x1
#define _CLCnPOL_POL_MASK                                   0x80

// Register: CLCnSEL0
#define CLCnSEL0 CLCnSEL0
extern volatile unsigned char           CLCnSEL0            __at(0x68E);
#ifndef _LIB_BUILD
asm("CLCnSEL0 equ 068Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
        unsigned D1S6                   :1;
    };
} CLCnSEL0bits_t;
extern volatile CLCnSEL0bits_t CLCnSEL0bits __at(0x68E);
// bitfield macros
#define _CLCnSEL0_D1S_POSN                                  0x0
#define _CLCnSEL0_D1S_POSITION                              0x0
#define _CLCnSEL0_D1S_SIZE                                  0x8
#define _CLCnSEL0_D1S_LENGTH                                0x8
#define _CLCnSEL0_D1S_MASK                                  0xFF
#define _CLCnSEL0_D1S0_POSN                                 0x0
#define _CLCnSEL0_D1S0_POSITION                             0x0
#define _CLCnSEL0_D1S0_SIZE                                 0x1
#define _CLCnSEL0_D1S0_LENGTH                               0x1
#define _CLCnSEL0_D1S0_MASK                                 0x1
#define _CLCnSEL0_D1S1_POSN                                 0x1
#define _CLCnSEL0_D1S1_POSITION                             0x1
#define _CLCnSEL0_D1S1_SIZE                                 0x1
#define _CLCnSEL0_D1S1_LENGTH                               0x1
#define _CLCnSEL0_D1S1_MASK                                 0x2
#define _CLCnSEL0_D1S2_POSN                                 0x2
#define _CLCnSEL0_D1S2_POSITION                             0x2
#define _CLCnSEL0_D1S2_SIZE                                 0x1
#define _CLCnSEL0_D1S2_LENGTH                               0x1
#define _CLCnSEL0_D1S2_MASK                                 0x4
#define _CLCnSEL0_D1S3_POSN                                 0x3
#define _CLCnSEL0_D1S3_POSITION                             0x3
#define _CLCnSEL0_D1S3_SIZE                                 0x1
#define _CLCnSEL0_D1S3_LENGTH                               0x1
#define _CLCnSEL0_D1S3_MASK                                 0x8
#define _CLCnSEL0_D1S4_POSN                                 0x4
#define _CLCnSEL0_D1S4_POSITION                             0x4
#define _CLCnSEL0_D1S4_SIZE                                 0x1
#define _CLCnSEL0_D1S4_LENGTH                               0x1
#define _CLCnSEL0_D1S4_MASK                                 0x10
#define _CLCnSEL0_D1S5_POSN                                 0x5
#define _CLCnSEL0_D1S5_POSITION                             0x5
#define _CLCnSEL0_D1S5_SIZE                                 0x1
#define _CLCnSEL0_D1S5_LENGTH                               0x1
#define _CLCnSEL0_D1S5_MASK                                 0x20
#define _CLCnSEL0_D1S6_POSN                                 0x6
#define _CLCnSEL0_D1S6_POSITION                             0x6
#define _CLCnSEL0_D1S6_SIZE                                 0x1
#define _CLCnSEL0_D1S6_LENGTH                               0x1
#define _CLCnSEL0_D1S6_MASK                                 0x40

// Register: CLCnSEL1
#define CLCnSEL1 CLCnSEL1
extern volatile unsigned char           CLCnSEL1            __at(0x68F);
#ifndef _LIB_BUILD
asm("CLCnSEL1 equ 068Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
        unsigned D2S6                   :1;
    };
} CLCnSEL1bits_t;
extern volatile CLCnSEL1bits_t CLCnSEL1bits __at(0x68F);
// bitfield macros
#define _CLCnSEL1_D2S_POSN                                  0x0
#define _CLCnSEL1_D2S_POSITION                              0x0
#define _CLCnSEL1_D2S_SIZE                                  0x8
#define _CLCnSEL1_D2S_LENGTH                                0x8
#define _CLCnSEL1_D2S_MASK                                  0xFF
#define _CLCnSEL1_D2S0_POSN                                 0x0
#define _CLCnSEL1_D2S0_POSITION                             0x0
#define _CLCnSEL1_D2S0_SIZE                                 0x1
#define _CLCnSEL1_D2S0_LENGTH                               0x1
#define _CLCnSEL1_D2S0_MASK                                 0x1
#define _CLCnSEL1_D2S1_POSN                                 0x1
#define _CLCnSEL1_D2S1_POSITION                             0x1
#define _CLCnSEL1_D2S1_SIZE                                 0x1
#define _CLCnSEL1_D2S1_LENGTH                               0x1
#define _CLCnSEL1_D2S1_MASK                                 0x2
#define _CLCnSEL1_D2S2_POSN                                 0x2
#define _CLCnSEL1_D2S2_POSITION                             0x2
#define _CLCnSEL1_D2S2_SIZE                                 0x1
#define _CLCnSEL1_D2S2_LENGTH                               0x1
#define _CLCnSEL1_D2S2_MASK                                 0x4
#define _CLCnSEL1_D2S3_POSN                                 0x3
#define _CLCnSEL1_D2S3_POSITION                             0x3
#define _CLCnSEL1_D2S3_SIZE                                 0x1
#define _CLCnSEL1_D2S3_LENGTH                               0x1
#define _CLCnSEL1_D2S3_MASK                                 0x8
#define _CLCnSEL1_D2S4_POSN                                 0x4
#define _CLCnSEL1_D2S4_POSITION                             0x4
#define _CLCnSEL1_D2S4_SIZE                                 0x1
#define _CLCnSEL1_D2S4_LENGTH                               0x1
#define _CLCnSEL1_D2S4_MASK                                 0x10
#define _CLCnSEL1_D2S5_POSN                                 0x5
#define _CLCnSEL1_D2S5_POSITION                             0x5
#define _CLCnSEL1_D2S5_SIZE                                 0x1
#define _CLCnSEL1_D2S5_LENGTH                               0x1
#define _CLCnSEL1_D2S5_MASK                                 0x20
#define _CLCnSEL1_D2S6_POSN                                 0x6
#define _CLCnSEL1_D2S6_POSITION                             0x6
#define _CLCnSEL1_D2S6_SIZE                                 0x1
#define _CLCnSEL1_D2S6_LENGTH                               0x1
#define _CLCnSEL1_D2S6_MASK                                 0x40

// Register: CLCnSEL2
#define CLCnSEL2 CLCnSEL2
extern volatile unsigned char           CLCnSEL2            __at(0x690);
#ifndef _LIB_BUILD
asm("CLCnSEL2 equ 0690h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
        unsigned D3S6                   :1;
    };
} CLCnSEL2bits_t;
extern volatile CLCnSEL2bits_t CLCnSEL2bits __at(0x690);
// bitfield macros
#define _CLCnSEL2_D3S_POSN                                  0x0
#define _CLCnSEL2_D3S_POSITION                              0x0
#define _CLCnSEL2_D3S_SIZE                                  0x8
#define _CLCnSEL2_D3S_LENGTH                                0x8
#define _CLCnSEL2_D3S_MASK                                  0xFF
#define _CLCnSEL2_D3S0_POSN                                 0x0
#define _CLCnSEL2_D3S0_POSITION                             0x0
#define _CLCnSEL2_D3S0_SIZE                                 0x1
#define _CLCnSEL2_D3S0_LENGTH                               0x1
#define _CLCnSEL2_D3S0_MASK                                 0x1
#define _CLCnSEL2_D3S1_POSN                                 0x1
#define _CLCnSEL2_D3S1_POSITION                             0x1
#define _CLCnSEL2_D3S1_SIZE                                 0x1
#define _CLCnSEL2_D3S1_LENGTH                               0x1
#define _CLCnSEL2_D3S1_MASK                                 0x2
#define _CLCnSEL2_D3S2_POSN                                 0x2
#define _CLCnSEL2_D3S2_POSITION                             0x2
#define _CLCnSEL2_D3S2_SIZE                                 0x1
#define _CLCnSEL2_D3S2_LENGTH                               0x1
#define _CLCnSEL2_D3S2_MASK                                 0x4
#define _CLCnSEL2_D3S3_POSN                                 0x3
#define _CLCnSEL2_D3S3_POSITION                             0x3
#define _CLCnSEL2_D3S3_SIZE                                 0x1
#define _CLCnSEL2_D3S3_LENGTH                               0x1
#define _CLCnSEL2_D3S3_MASK                                 0x8
#define _CLCnSEL2_D3S4_POSN                                 0x4
#define _CLCnSEL2_D3S4_POSITION                             0x4
#define _CLCnSEL2_D3S4_SIZE                                 0x1
#define _CLCnSEL2_D3S4_LENGTH                               0x1
#define _CLCnSEL2_D3S4_MASK                                 0x10
#define _CLCnSEL2_D3S5_POSN                                 0x5
#define _CLCnSEL2_D3S5_POSITION                             0x5
#define _CLCnSEL2_D3S5_SIZE                                 0x1
#define _CLCnSEL2_D3S5_LENGTH                               0x1
#define _CLCnSEL2_D3S5_MASK                                 0x20
#define _CLCnSEL2_D3S6_POSN                                 0x6
#define _CLCnSEL2_D3S6_POSITION                             0x6
#define _CLCnSEL2_D3S6_SIZE                                 0x1
#define _CLCnSEL2_D3S6_LENGTH                               0x1
#define _CLCnSEL2_D3S6_MASK                                 0x40

// Register: CLCnSEL3
#define CLCnSEL3 CLCnSEL3
extern volatile unsigned char           CLCnSEL3            __at(0x691);
#ifndef _LIB_BUILD
asm("CLCnSEL3 equ 0691h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
        unsigned D4S6                   :1;
    };
} CLCnSEL3bits_t;
extern volatile CLCnSEL3bits_t CLCnSEL3bits __at(0x691);
// bitfield macros
#define _CLCnSEL3_D4S_POSN                                  0x0
#define _CLCnSEL3_D4S_POSITION                              0x0
#define _CLCnSEL3_D4S_SIZE                                  0x8
#define _CLCnSEL3_D4S_LENGTH                                0x8
#define _CLCnSEL3_D4S_MASK                                  0xFF
#define _CLCnSEL3_D4S0_POSN                                 0x0
#define _CLCnSEL3_D4S0_POSITION                             0x0
#define _CLCnSEL3_D4S0_SIZE                                 0x1
#define _CLCnSEL3_D4S0_LENGTH                               0x1
#define _CLCnSEL3_D4S0_MASK                                 0x1
#define _CLCnSEL3_D4S1_POSN                                 0x1
#define _CLCnSEL3_D4S1_POSITION                             0x1
#define _CLCnSEL3_D4S1_SIZE                                 0x1
#define _CLCnSEL3_D4S1_LENGTH                               0x1
#define _CLCnSEL3_D4S1_MASK                                 0x2
#define _CLCnSEL3_D4S2_POSN                                 0x2
#define _CLCnSEL3_D4S2_POSITION                             0x2
#define _CLCnSEL3_D4S2_SIZE                                 0x1
#define _CLCnSEL3_D4S2_LENGTH                               0x1
#define _CLCnSEL3_D4S2_MASK                                 0x4
#define _CLCnSEL3_D4S3_POSN                                 0x3
#define _CLCnSEL3_D4S3_POSITION                             0x3
#define _CLCnSEL3_D4S3_SIZE                                 0x1
#define _CLCnSEL3_D4S3_LENGTH                               0x1
#define _CLCnSEL3_D4S3_MASK                                 0x8
#define _CLCnSEL3_D4S4_POSN                                 0x4
#define _CLCnSEL3_D4S4_POSITION                             0x4
#define _CLCnSEL3_D4S4_SIZE                                 0x1
#define _CLCnSEL3_D4S4_LENGTH                               0x1
#define _CLCnSEL3_D4S4_MASK                                 0x10
#define _CLCnSEL3_D4S5_POSN                                 0x5
#define _CLCnSEL3_D4S5_POSITION                             0x5
#define _CLCnSEL3_D4S5_SIZE                                 0x1
#define _CLCnSEL3_D4S5_LENGTH                               0x1
#define _CLCnSEL3_D4S5_MASK                                 0x20
#define _CLCnSEL3_D4S6_POSN                                 0x6
#define _CLCnSEL3_D4S6_POSITION                             0x6
#define _CLCnSEL3_D4S6_SIZE                                 0x1
#define _CLCnSEL3_D4S6_LENGTH                               0x1
#define _CLCnSEL3_D4S6_MASK                                 0x40

// Register: CLCnGLS0
#define CLCnGLS0 CLCnGLS0
extern volatile unsigned char           CLCnGLS0            __at(0x692);
#ifndef _LIB_BUILD
asm("CLCnGLS0 equ 0692h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G1D1N                  :1;
        unsigned G1D1T                  :1;
        unsigned G1D2N                  :1;
        unsigned G1D2T                  :1;
        unsigned G1D3N                  :1;
        unsigned G1D3T                  :1;
        unsigned G1D4N                  :1;
        unsigned G1D4T                  :1;
    };
} CLCnGLS0bits_t;
extern volatile CLCnGLS0bits_t CLCnGLS0bits __at(0x692);
// bitfield macros
#define _CLCnGLS0_G1D1N_POSN                                0x0
#define _CLCnGLS0_G1D1N_POSITION                            0x0
#define _CLCnGLS0_G1D1N_SIZE                                0x1
#define _CLCnGLS0_G1D1N_LENGTH                              0x1
#define _CLCnGLS0_G1D1N_MASK                                0x1
#define _CLCnGLS0_G1D1T_POSN                                0x1
#define _CLCnGLS0_G1D1T_POSITION                            0x1
#define _CLCnGLS0_G1D1T_SIZE                                0x1
#define _CLCnGLS0_G1D1T_LENGTH                              0x1
#define _CLCnGLS0_G1D1T_MASK                                0x2
#define _CLCnGLS0_G1D2N_POSN                                0x2
#define _CLCnGLS0_G1D2N_POSITION                            0x2
#define _CLCnGLS0_G1D2N_SIZE                                0x1
#define _CLCnGLS0_G1D2N_LENGTH                              0x1
#define _CLCnGLS0_G1D2N_MASK                                0x4
#define _CLCnGLS0_G1D2T_POSN                                0x3
#define _CLCnGLS0_G1D2T_POSITION                            0x3
#define _CLCnGLS0_G1D2T_SIZE                                0x1
#define _CLCnGLS0_G1D2T_LENGTH                              0x1
#define _CLCnGLS0_G1D2T_MASK                                0x8
#define _CLCnGLS0_G1D3N_POSN                                0x4
#define _CLCnGLS0_G1D3N_POSITION                            0x4
#define _CLCnGLS0_G1D3N_SIZE                                0x1
#define _CLCnGLS0_G1D3N_LENGTH                              0x1
#define _CLCnGLS0_G1D3N_MASK                                0x10
#define _CLCnGLS0_G1D3T_POSN                                0x5
#define _CLCnGLS0_G1D3T_POSITION                            0x5
#define _CLCnGLS0_G1D3T_SIZE                                0x1
#define _CLCnGLS0_G1D3T_LENGTH                              0x1
#define _CLCnGLS0_G1D3T_MASK                                0x20
#define _CLCnGLS0_G1D4N_POSN                                0x6
#define _CLCnGLS0_G1D4N_POSITION                            0x6
#define _CLCnGLS0_G1D4N_SIZE                                0x1
#define _CLCnGLS0_G1D4N_LENGTH                              0x1
#define _CLCnGLS0_G1D4N_MASK                                0x40
#define _CLCnGLS0_G1D4T_POSN                                0x7
#define _CLCnGLS0_G1D4T_POSITION                            0x7
#define _CLCnGLS0_G1D4T_SIZE                                0x1
#define _CLCnGLS0_G1D4T_LENGTH                              0x1
#define _CLCnGLS0_G1D4T_MASK                                0x80

// Register: CLCnGLS1
#define CLCnGLS1 CLCnGLS1
extern volatile unsigned char           CLCnGLS1            __at(0x693);
#ifndef _LIB_BUILD
asm("CLCnGLS1 equ 0693h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G2D1N                  :1;
        unsigned G2D1T                  :1;
        unsigned G2D2N                  :1;
        unsigned G2D2T                  :1;
        unsigned G2D3N                  :1;
        unsigned G2D3T                  :1;
        unsigned G2D4N                  :1;
        unsigned G2D4T                  :1;
    };
} CLCnGLS1bits_t;
extern volatile CLCnGLS1bits_t CLCnGLS1bits __at(0x693);
// bitfield macros
#define _CLCnGLS1_G2D1N_POSN                                0x0
#define _CLCnGLS1_G2D1N_POSITION                            0x0
#define _CLCnGLS1_G2D1N_SIZE                                0x1
#define _CLCnGLS1_G2D1N_LENGTH                              0x1
#define _CLCnGLS1_G2D1N_MASK                                0x1
#define _CLCnGLS1_G2D1T_POSN                                0x1
#define _CLCnGLS1_G2D1T_POSITION                            0x1
#define _CLCnGLS1_G2D1T_SIZE                                0x1
#define _CLCnGLS1_G2D1T_LENGTH                              0x1
#define _CLCnGLS1_G2D1T_MASK                                0x2
#define _CLCnGLS1_G2D2N_POSN                                0x2
#define _CLCnGLS1_G2D2N_POSITION                            0x2
#define _CLCnGLS1_G2D2N_SIZE                                0x1
#define _CLCnGLS1_G2D2N_LENGTH                              0x1
#define _CLCnGLS1_G2D2N_MASK                                0x4
#define _CLCnGLS1_G2D2T_POSN                                0x3
#define _CLCnGLS1_G2D2T_POSITION                            0x3
#define _CLCnGLS1_G2D2T_SIZE                                0x1
#define _CLCnGLS1_G2D2T_LENGTH                              0x1
#define _CLCnGLS1_G2D2T_MASK                                0x8
#define _CLCnGLS1_G2D3N_POSN                                0x4
#define _CLCnGLS1_G2D3N_POSITION                            0x4
#define _CLCnGLS1_G2D3N_SIZE                                0x1
#define _CLCnGLS1_G2D3N_LENGTH                              0x1
#define _CLCnGLS1_G2D3N_MASK                                0x10
#define _CLCnGLS1_G2D3T_POSN                                0x5
#define _CLCnGLS1_G2D3T_POSITION                            0x5
#define _CLCnGLS1_G2D3T_SIZE                                0x1
#define _CLCnGLS1_G2D3T_LENGTH                              0x1
#define _CLCnGLS1_G2D3T_MASK                                0x20
#define _CLCnGLS1_G2D4N_POSN                                0x6
#define _CLCnGLS1_G2D4N_POSITION                            0x6
#define _CLCnGLS1_G2D4N_SIZE                                0x1
#define _CLCnGLS1_G2D4N_LENGTH                              0x1
#define _CLCnGLS1_G2D4N_MASK                                0x40
#define _CLCnGLS1_G2D4T_POSN                                0x7
#define _CLCnGLS1_G2D4T_POSITION                            0x7
#define _CLCnGLS1_G2D4T_SIZE                                0x1
#define _CLCnGLS1_G2D4T_LENGTH                              0x1
#define _CLCnGLS1_G2D4T_MASK                                0x80

// Register: CLCnGLS2
#define CLCnGLS2 CLCnGLS2
extern volatile unsigned char           CLCnGLS2            __at(0x694);
#ifndef _LIB_BUILD
asm("CLCnGLS2 equ 0694h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G3D1N                  :1;
        unsigned G3D1T                  :1;
        unsigned G3D2N                  :1;
        unsigned G3D2T                  :1;
        unsigned G3D3N                  :1;
        unsigned G3D3T                  :1;
        unsigned G3D4N                  :1;
        unsigned G3D4T                  :1;
    };
} CLCnGLS2bits_t;
extern volatile CLCnGLS2bits_t CLCnGLS2bits __at(0x694);
// bitfield macros
#define _CLCnGLS2_G3D1N_POSN                                0x0
#define _CLCnGLS2_G3D1N_POSITION                            0x0
#define _CLCnGLS2_G3D1N_SIZE                                0x1
#define _CLCnGLS2_G3D1N_LENGTH                              0x1
#define _CLCnGLS2_G3D1N_MASK                                0x1
#define _CLCnGLS2_G3D1T_POSN                                0x1
#define _CLCnGLS2_G3D1T_POSITION                            0x1
#define _CLCnGLS2_G3D1T_SIZE                                0x1
#define _CLCnGLS2_G3D1T_LENGTH                              0x1
#define _CLCnGLS2_G3D1T_MASK                                0x2
#define _CLCnGLS2_G3D2N_POSN                                0x2
#define _CLCnGLS2_G3D2N_POSITION                            0x2
#define _CLCnGLS2_G3D2N_SIZE                                0x1
#define _CLCnGLS2_G3D2N_LENGTH                              0x1
#define _CLCnGLS2_G3D2N_MASK                                0x4
#define _CLCnGLS2_G3D2T_POSN                                0x3
#define _CLCnGLS2_G3D2T_POSITION                            0x3
#define _CLCnGLS2_G3D2T_SIZE                                0x1
#define _CLCnGLS2_G3D2T_LENGTH                              0x1
#define _CLCnGLS2_G3D2T_MASK                                0x8
#define _CLCnGLS2_G3D3N_POSN                                0x4
#define _CLCnGLS2_G3D3N_POSITION                            0x4
#define _CLCnGLS2_G3D3N_SIZE                                0x1
#define _CLCnGLS2_G3D3N_LENGTH                              0x1
#define _CLCnGLS2_G3D3N_MASK                                0x10
#define _CLCnGLS2_G3D3T_POSN                                0x5
#define _CLCnGLS2_G3D3T_POSITION                            0x5
#define _CLCnGLS2_G3D3T_SIZE                                0x1
#define _CLCnGLS2_G3D3T_LENGTH                              0x1
#define _CLCnGLS2_G3D3T_MASK                                0x20
#define _CLCnGLS2_G3D4N_POSN                                0x6
#define _CLCnGLS2_G3D4N_POSITION                            0x6
#define _CLCnGLS2_G3D4N_SIZE                                0x1
#define _CLCnGLS2_G3D4N_LENGTH                              0x1
#define _CLCnGLS2_G3D4N_MASK                                0x40
#define _CLCnGLS2_G3D4T_POSN                                0x7
#define _CLCnGLS2_G3D4T_POSITION                            0x7
#define _CLCnGLS2_G3D4T_SIZE                                0x1
#define _CLCnGLS2_G3D4T_LENGTH                              0x1
#define _CLCnGLS2_G3D4T_MASK                                0x80

// Register: CLCnGLS3
#define CLCnGLS3 CLCnGLS3
extern volatile unsigned char           CLCnGLS3            __at(0x695);
#ifndef _LIB_BUILD
asm("CLCnGLS3 equ 0695h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLCnGLS3bits_t;
extern volatile CLCnGLS3bits_t CLCnGLS3bits __at(0x695);
// bitfield macros
#define _CLCnGLS3_G4D1N_POSN                                0x0
#define _CLCnGLS3_G4D1N_POSITION                            0x0
#define _CLCnGLS3_G4D1N_SIZE                                0x1
#define _CLCnGLS3_G4D1N_LENGTH                              0x1
#define _CLCnGLS3_G4D1N_MASK                                0x1
#define _CLCnGLS3_G4D1T_POSN                                0x1
#define _CLCnGLS3_G4D1T_POSITION                            0x1
#define _CLCnGLS3_G4D1T_SIZE                                0x1
#define _CLCnGLS3_G4D1T_LENGTH                              0x1
#define _CLCnGLS3_G4D1T_MASK                                0x2
#define _CLCnGLS3_G4D2N_POSN                                0x2
#define _CLCnGLS3_G4D2N_POSITION                            0x2
#define _CLCnGLS3_G4D2N_SIZE                                0x1
#define _CLCnGLS3_G4D2N_LENGTH                              0x1
#define _CLCnGLS3_G4D2N_MASK                                0x4
#define _CLCnGLS3_G4D2T_POSN                                0x3
#define _CLCnGLS3_G4D2T_POSITION                            0x3
#define _CLCnGLS3_G4D2T_SIZE                                0x1
#define _CLCnGLS3_G4D2T_LENGTH                              0x1
#define _CLCnGLS3_G4D2T_MASK                                0x8
#define _CLCnGLS3_G4D3N_POSN                                0x4
#define _CLCnGLS3_G4D3N_POSITION                            0x4
#define _CLCnGLS3_G4D3N_SIZE                                0x1
#define _CLCnGLS3_G4D3N_LENGTH                              0x1
#define _CLCnGLS3_G4D3N_MASK                                0x10
#define _CLCnGLS3_G4D3T_POSN                                0x5
#define _CLCnGLS3_G4D3T_POSITION                            0x5
#define _CLCnGLS3_G4D3T_SIZE                                0x1
#define _CLCnGLS3_G4D3T_LENGTH                              0x1
#define _CLCnGLS3_G4D3T_MASK                                0x20
#define _CLCnGLS3_G4D4N_POSN                                0x6
#define _CLCnGLS3_G4D4N_POSITION                            0x6
#define _CLCnGLS3_G4D4N_SIZE                                0x1
#define _CLCnGLS3_G4D4N_LENGTH                              0x1
#define _CLCnGLS3_G4D4N_MASK                                0x40
#define _CLCnGLS3_G4D4T_POSN                                0x7
#define _CLCnGLS3_G4D4T_POSITION                            0x7
#define _CLCnGLS3_G4D4T_SIZE                                0x1
#define _CLCnGLS3_G4D4T_LENGTH                              0x1
#define _CLCnGLS3_G4D4T_MASK                                0x80

// Register: CLCSELECT
#define CLCSELECT CLCSELECT
extern volatile unsigned char           CLCSELECT           __at(0x696);
#ifndef _LIB_BUILD
asm("CLCSELECT equ 0696h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLCT                   :8;
    };
    struct {
        unsigned SLCT0                  :1;
        unsigned SLCT1                  :1;
    };
} CLCSELECTbits_t;
extern volatile CLCSELECTbits_t CLCSELECTbits __at(0x696);
// bitfield macros
#define _CLCSELECT_SLCT_POSN                                0x0
#define _CLCSELECT_SLCT_POSITION                            0x0
#define _CLCSELECT_SLCT_SIZE                                0x8
#define _CLCSELECT_SLCT_LENGTH                              0x8
#define _CLCSELECT_SLCT_MASK                                0xFF
#define _CLCSELECT_SLCT0_POSN                               0x0
#define _CLCSELECT_SLCT0_POSITION                           0x0
#define _CLCSELECT_SLCT0_SIZE                               0x1
#define _CLCSELECT_SLCT0_LENGTH                             0x1
#define _CLCSELECT_SLCT0_MASK                               0x1
#define _CLCSELECT_SLCT1_POSN                               0x1
#define _CLCSELECT_SLCT1_POSITION                           0x1
#define _CLCSELECT_SLCT1_SIZE                               0x1
#define _CLCSELECT_SLCT1_LENGTH                             0x1
#define _CLCSELECT_SLCT1_MASK                               0x2

// Register: CLCDATA
#define CLCDATA CLCDATA
extern volatile unsigned char           CLCDATA             __at(0x697);
#ifndef _LIB_BUILD
asm("CLCDATA equ 0697h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLC1OUT                :1;
        unsigned CLC2OUT                :1;
        unsigned CLC3OUT                :1;
        unsigned CLC4OUT                :1;
    };
} CLCDATAbits_t;
extern volatile CLCDATAbits_t CLCDATAbits __at(0x697);
// bitfield macros
#define _CLCDATA_CLC1OUT_POSN                               0x0
#define _CLCDATA_CLC1OUT_POSITION                           0x0
#define _CLCDATA_CLC1OUT_SIZE                               0x1
#define _CLCDATA_CLC1OUT_LENGTH                             0x1
#define _CLCDATA_CLC1OUT_MASK                               0x1
#define _CLCDATA_CLC2OUT_POSN                               0x1
#define _CLCDATA_CLC2OUT_POSITION                           0x1
#define _CLCDATA_CLC2OUT_SIZE                               0x1
#define _CLCDATA_CLC2OUT_LENGTH                             0x1
#define _CLCDATA_CLC2OUT_MASK                               0x2
#define _CLCDATA_CLC3OUT_POSN                               0x2
#define _CLCDATA_CLC3OUT_POSITION                           0x2
#define _CLCDATA_CLC3OUT_SIZE                               0x1
#define _CLCDATA_CLC3OUT_LENGTH                             0x1
#define _CLCDATA_CLC3OUT_MASK                               0x4
#define _CLCDATA_CLC4OUT_POSN                               0x3
#define _CLCDATA_CLC4OUT_POSITION                           0x3
#define _CLCDATA_CLC4OUT_SIZE                               0x1
#define _CLCDATA_CLC4OUT_LENGTH                             0x1
#define _CLCDATA_CLC4OUT_MASK                               0x8

// Register: RC1REG
#define RC1REG RC1REG
extern volatile unsigned char           RC1REG              __at(0x70C);
#ifndef _LIB_BUILD
asm("RC1REG equ 070Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RCREG                  :8;
    };
} RC1REGbits_t;
extern volatile RC1REGbits_t RC1REGbits __at(0x70C);
// bitfield macros
#define _RC1REG_RCREG_POSN                                  0x0
#define _RC1REG_RCREG_POSITION                              0x0
#define _RC1REG_RCREG_SIZE                                  0x8
#define _RC1REG_RCREG_LENGTH                                0x8
#define _RC1REG_RCREG_MASK                                  0xFF

// Register: TX1REG
#define TX1REG TX1REG
extern volatile unsigned char           TX1REG              __at(0x70D);
#ifndef _LIB_BUILD
asm("TX1REG equ 070Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXREG                  :8;
    };
} TX1REGbits_t;
extern volatile TX1REGbits_t TX1REGbits __at(0x70D);
// bitfield macros
#define _TX1REG_TXREG_POSN                                  0x0
#define _TX1REG_TXREG_POSITION                              0x0
#define _TX1REG_TXREG_SIZE                                  0x8
#define _TX1REG_TXREG_LENGTH                                0x8
#define _TX1REG_TXREG_MASK                                  0xFF

// Register: SP1BRG
#define SP1BRG SP1BRG
extern volatile unsigned short          SP1BRG              __at(0x70E);
#ifndef _LIB_BUILD
asm("SP1BRG equ 070Eh");
#endif

// Register: SP1BRGL
#define SP1BRGL SP1BRGL
extern volatile unsigned char           SP1BRGL             __at(0x70E);
#ifndef _LIB_BUILD
asm("SP1BRGL equ 070Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPBRGL                 :8;
    };
} SP1BRGLbits_t;
extern volatile SP1BRGLbits_t SP1BRGLbits __at(0x70E);
// bitfield macros
#define _SP1BRGL_SPBRGL_POSN                                0x0
#define _SP1BRGL_SPBRGL_POSITION                            0x0
#define _SP1BRGL_SPBRGL_SIZE                                0x8
#define _SP1BRGL_SPBRGL_LENGTH                              0x8
#define _SP1BRGL_SPBRGL_MASK                                0xFF

// Register: SP1BRGH
#define SP1BRGH SP1BRGH
extern volatile unsigned char           SP1BRGH             __at(0x70F);
#ifndef _LIB_BUILD
asm("SP1BRGH equ 070Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPBRGH                 :8;
    };
} SP1BRGHbits_t;
extern volatile SP1BRGHbits_t SP1BRGHbits __at(0x70F);
// bitfield macros
#define _SP1BRGH_SPBRGH_POSN                                0x0
#define _SP1BRGH_SPBRGH_POSITION                            0x0
#define _SP1BRGH_SPBRGH_SIZE                                0x8
#define _SP1BRGH_SPBRGH_LENGTH                              0x8
#define _SP1BRGH_SPBRGH_MASK                                0xFF

// Register: RC1STA
#define RC1STA RC1STA
extern volatile unsigned char           RC1STA              __at(0x710);
#ifndef _LIB_BUILD
asm("RC1STA equ 0710h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RX9D                   :1;
        unsigned OERR                   :1;
        unsigned FERR                   :1;
        unsigned ADDEN                  :1;
        unsigned CREN                   :1;
        unsigned SREN                   :1;
        unsigned RX9                    :1;
        unsigned SPEN                   :1;
    };
} RC1STAbits_t;
extern volatile RC1STAbits_t RC1STAbits __at(0x710);
// bitfield macros
#define _RC1STA_RX9D_POSN                                   0x0
#define _RC1STA_RX9D_POSITION                               0x0
#define _RC1STA_RX9D_SIZE                                   0x1
#define _RC1STA_RX9D_LENGTH                                 0x1
#define _RC1STA_RX9D_MASK                                   0x1
#define _RC1STA_OERR_POSN                                   0x1
#define _RC1STA_OERR_POSITION                               0x1
#define _RC1STA_OERR_SIZE                                   0x1
#define _RC1STA_OERR_LENGTH                                 0x1
#define _RC1STA_OERR_MASK                                   0x2
#define _RC1STA_FERR_POSN                                   0x2
#define _RC1STA_FERR_POSITION                               0x2
#define _RC1STA_FERR_SIZE                                   0x1
#define _RC1STA_FERR_LENGTH                                 0x1
#define _RC1STA_FERR_MASK                                   0x4
#define _RC1STA_ADDEN_POSN                                  0x3
#define _RC1STA_ADDEN_POSITION                              0x3
#define _RC1STA_ADDEN_SIZE                                  0x1
#define _RC1STA_ADDEN_LENGTH                                0x1
#define _RC1STA_ADDEN_MASK                                  0x8
#define _RC1STA_CREN_POSN                                   0x4
#define _RC1STA_CREN_POSITION                               0x4
#define _RC1STA_CREN_SIZE                                   0x1
#define _RC1STA_CREN_LENGTH                                 0x1
#define _RC1STA_CREN_MASK                                   0x10
#define _RC1STA_SREN_POSN                                   0x5
#define _RC1STA_SREN_POSITION                               0x5
#define _RC1STA_SREN_SIZE                                   0x1
#define _RC1STA_SREN_LENGTH                                 0x1
#define _RC1STA_SREN_MASK                                   0x20
#define _RC1STA_RX9_POSN                                    0x6
#define _RC1STA_RX9_POSITION                                0x6
#define _RC1STA_RX9_SIZE                                    0x1
#define _RC1STA_RX9_LENGTH                                  0x1
#define _RC1STA_RX9_MASK                                    0x40
#define _RC1STA_SPEN_POSN                                   0x7
#define _RC1STA_SPEN_POSITION                               0x7
#define _RC1STA_SPEN_SIZE                                   0x1
#define _RC1STA_SPEN_LENGTH                                 0x1
#define _RC1STA_SPEN_MASK                                   0x80

// Register: TX1STA
#define TX1STA TX1STA
extern volatile unsigned char           TX1STA              __at(0x711);
#ifndef _LIB_BUILD
asm("TX1STA equ 0711h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TX9D                   :1;
        unsigned TRMT                   :1;
        unsigned BRGH                   :1;
        unsigned SENDB                  :1;
        unsigned SYNC                   :1;
        unsigned TXEN                   :1;
        unsigned TX9                    :1;
        unsigned CSRC                   :1;
    };
} TX1STAbits_t;
extern volatile TX1STAbits_t TX1STAbits __at(0x711);
// bitfield macros
#define _TX1STA_TX9D_POSN                                   0x0
#define _TX1STA_TX9D_POSITION                               0x0
#define _TX1STA_TX9D_SIZE                                   0x1
#define _TX1STA_TX9D_LENGTH                                 0x1
#define _TX1STA_TX9D_MASK                                   0x1
#define _TX1STA_TRMT_POSN                                   0x1
#define _TX1STA_TRMT_POSITION                               0x1
#define _TX1STA_TRMT_SIZE                                   0x1
#define _TX1STA_TRMT_LENGTH                                 0x1
#define _TX1STA_TRMT_MASK                                   0x2
#define _TX1STA_BRGH_POSN                                   0x2
#define _TX1STA_BRGH_POSITION                               0x2
#define _TX1STA_BRGH_SIZE                                   0x1
#define _TX1STA_BRGH_LENGTH                                 0x1
#define _TX1STA_BRGH_MASK                                   0x4
#define _TX1STA_SENDB_POSN                                  0x3
#define _TX1STA_SENDB_POSITION                              0x3
#define _TX1STA_SENDB_SIZE                                  0x1
#define _TX1STA_SENDB_LENGTH                                0x1
#define _TX1STA_SENDB_MASK                                  0x8
#define _TX1STA_SYNC_POSN                                   0x4
#define _TX1STA_SYNC_POSITION                               0x4
#define _TX1STA_SYNC_SIZE                                   0x1
#define _TX1STA_SYNC_LENGTH                                 0x1
#define _TX1STA_SYNC_MASK                                   0x10
#define _TX1STA_TXEN_POSN                                   0x5
#define _TX1STA_TXEN_POSITION                               0x5
#define _TX1STA_TXEN_SIZE                                   0x1
#define _TX1STA_TXEN_LENGTH                                 0x1
#define _TX1STA_TXEN_MASK                                   0x20
#define _TX1STA_TX9_POSN                                    0x6
#define _TX1STA_TX9_POSITION                                0x6
#define _TX1STA_TX9_SIZE                                    0x1
#define _TX1STA_TX9_LENGTH                                  0x1
#define _TX1STA_TX9_MASK                                    0x40
#define _TX1STA_CSRC_POSN                                   0x7
#define _TX1STA_CSRC_POSITION                               0x7
#define _TX1STA_CSRC_SIZE                                   0x1
#define _TX1STA_CSRC_LENGTH                                 0x1
#define _TX1STA_CSRC_MASK                                   0x80

// Register: BAUD1CON
#define BAUD1CON BAUD1CON
extern volatile unsigned char           BAUD1CON            __at(0x712);
#ifndef _LIB_BUILD
asm("BAUD1CON equ 0712h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ABDEN                  :1;
        unsigned WUE                    :1;
        unsigned                        :1;
        unsigned BRG16                  :1;
        unsigned SCKP                   :1;
        unsigned                        :1;
        unsigned RCIDL                  :1;
        unsigned ABDOVF                 :1;
    };
} BAUD1CONbits_t;
extern volatile BAUD1CONbits_t BAUD1CONbits __at(0x712);
// bitfield macros
#define _BAUD1CON_ABDEN_POSN                                0x0
#define _BAUD1CON_ABDEN_POSITION                            0x0
#define _BAUD1CON_ABDEN_SIZE                                0x1
#define _BAUD1CON_ABDEN_LENGTH                              0x1
#define _BAUD1CON_ABDEN_MASK                                0x1
#define _BAUD1CON_WUE_POSN                                  0x1
#define _BAUD1CON_WUE_POSITION                              0x1
#define _BAUD1CON_WUE_SIZE                                  0x1
#define _BAUD1CON_WUE_LENGTH                                0x1
#define _BAUD1CON_WUE_MASK                                  0x2
#define _BAUD1CON_BRG16_POSN                                0x3
#define _BAUD1CON_BRG16_POSITION                            0x3
#define _BAUD1CON_BRG16_SIZE                                0x1
#define _BAUD1CON_BRG16_LENGTH                              0x1
#define _BAUD1CON_BRG16_MASK                                0x8
#define _BAUD1CON_SCKP_POSN                                 0x4
#define _BAUD1CON_SCKP_POSITION                             0x4
#define _BAUD1CON_SCKP_SIZE                                 0x1
#define _BAUD1CON_SCKP_LENGTH                               0x1
#define _BAUD1CON_SCKP_MASK                                 0x10
#define _BAUD1CON_RCIDL_POSN                                0x6
#define _BAUD1CON_RCIDL_POSITION                            0x6
#define _BAUD1CON_RCIDL_SIZE                                0x1
#define _BAUD1CON_RCIDL_LENGTH                              0x1
#define _BAUD1CON_RCIDL_MASK                                0x40
#define _BAUD1CON_ABDOVF_POSN                               0x7
#define _BAUD1CON_ABDOVF_POSITION                           0x7
#define _BAUD1CON_ABDOVF_SIZE                               0x1
#define _BAUD1CON_ABDOVF_LENGTH                             0x1
#define _BAUD1CON_ABDOVF_MASK                               0x80

// Register: SSP1BUF
#define SSP1BUF SSP1BUF
extern volatile unsigned char           SSP1BUF             __at(0x78C);
#ifndef _LIB_BUILD
asm("SSP1BUF equ 078Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPBUF                 :8;
    };
} SSP1BUFbits_t;
extern volatile SSP1BUFbits_t SSP1BUFbits __at(0x78C);
// bitfield macros
#define _SSP1BUF_SSPBUF_POSN                                0x0
#define _SSP1BUF_SSPBUF_POSITION                            0x0
#define _SSP1BUF_SSPBUF_SIZE                                0x8
#define _SSP1BUF_SSPBUF_LENGTH                              0x8
#define _SSP1BUF_SSPBUF_MASK                                0xFF

// Register: SSP1ADD
#define SSP1ADD SSP1ADD
extern volatile unsigned char           SSP1ADD             __at(0x78D);
#ifndef _LIB_BUILD
asm("SSP1ADD equ 078Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPADD                 :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
    struct {
        unsigned MSK01                  :1;
        unsigned MSK11                  :1;
        unsigned MSK21                  :1;
        unsigned MSK31                  :1;
        unsigned MSK41                  :1;
        unsigned MSK51                  :1;
        unsigned MSK61                  :1;
        unsigned MSK71                  :1;
    };
} SSP1ADDbits_t;
extern volatile SSP1ADDbits_t SSP1ADDbits __at(0x78D);
// bitfield macros
#define _SSP1ADD_SSPADD_POSN                                0x0
#define _SSP1ADD_SSPADD_POSITION                            0x0
#define _SSP1ADD_SSPADD_SIZE                                0x8
#define _SSP1ADD_SSPADD_LENGTH                              0x8
#define _SSP1ADD_SSPADD_MASK                                0xFF
#define _SSP1ADD_MSK0_POSN                                  0x0
#define _SSP1ADD_MSK0_POSITION                              0x0
#define _SSP1ADD_MSK0_SIZE                                  0x1
#define _SSP1ADD_MSK0_LENGTH                                0x1
#define _SSP1ADD_MSK0_MASK                                  0x1
#define _SSP1ADD_MSK1_POSN                                  0x1
#define _SSP1ADD_MSK1_POSITION                              0x1
#define _SSP1ADD_MSK1_SIZE                                  0x1
#define _SSP1ADD_MSK1_LENGTH                                0x1
#define _SSP1ADD_MSK1_MASK                                  0x2
#define _SSP1ADD_MSK2_POSN                                  0x2
#define _SSP1ADD_MSK2_POSITION                              0x2
#define _SSP1ADD_MSK2_SIZE                                  0x1
#define _SSP1ADD_MSK2_LENGTH                                0x1
#define _SSP1ADD_MSK2_MASK                                  0x4
#define _SSP1ADD_MSK3_POSN                                  0x3
#define _SSP1ADD_MSK3_POSITION                              0x3
#define _SSP1ADD_MSK3_SIZE                                  0x1
#define _SSP1ADD_MSK3_LENGTH                                0x1
#define _SSP1ADD_MSK3_MASK                                  0x8
#define _SSP1ADD_MSK4_POSN                                  0x4
#define _SSP1ADD_MSK4_POSITION                              0x4
#define _SSP1ADD_MSK4_SIZE                                  0x1
#define _SSP1ADD_MSK4_LENGTH                                0x1
#define _SSP1ADD_MSK4_MASK                                  0x10
#define _SSP1ADD_MSK5_POSN                                  0x5
#define _SSP1ADD_MSK5_POSITION                              0x5
#define _SSP1ADD_MSK5_SIZE                                  0x1
#define _SSP1ADD_MSK5_LENGTH                                0x1
#define _SSP1ADD_MSK5_MASK                                  0x20
#define _SSP1ADD_MSK6_POSN                                  0x6
#define _SSP1ADD_MSK6_POSITION                              0x6
#define _SSP1ADD_MSK6_SIZE                                  0x1
#define _SSP1ADD_MSK6_LENGTH                                0x1
#define _SSP1ADD_MSK6_MASK                                  0x40
#define _SSP1ADD_MSK7_POSN                                  0x7
#define _SSP1ADD_MSK7_POSITION                              0x7
#define _SSP1ADD_MSK7_SIZE                                  0x1
#define _SSP1ADD_MSK7_LENGTH                                0x1
#define _SSP1ADD_MSK7_MASK                                  0x80
#define _SSP1ADD_MSK01_POSN                                 0x0
#define _SSP1ADD_MSK01_POSITION                             0x0
#define _SSP1ADD_MSK01_SIZE                                 0x1
#define _SSP1ADD_MSK01_LENGTH                               0x1
#define _SSP1ADD_MSK01_MASK                                 0x1
#define _SSP1ADD_MSK11_POSN                                 0x1
#define _SSP1ADD_MSK11_POSITION                             0x1
#define _SSP1ADD_MSK11_SIZE                                 0x1
#define _SSP1ADD_MSK11_LENGTH                               0x1
#define _SSP1ADD_MSK11_MASK                                 0x2
#define _SSP1ADD_MSK21_POSN                                 0x2
#define _SSP1ADD_MSK21_POSITION                             0x2
#define _SSP1ADD_MSK21_SIZE                                 0x1
#define _SSP1ADD_MSK21_LENGTH                               0x1
#define _SSP1ADD_MSK21_MASK                                 0x4
#define _SSP1ADD_MSK31_POSN                                 0x3
#define _SSP1ADD_MSK31_POSITION                             0x3
#define _SSP1ADD_MSK31_SIZE                                 0x1
#define _SSP1ADD_MSK31_LENGTH                               0x1
#define _SSP1ADD_MSK31_MASK                                 0x8
#define _SSP1ADD_MSK41_POSN                                 0x4
#define _SSP1ADD_MSK41_POSITION                             0x4
#define _SSP1ADD_MSK41_SIZE                                 0x1
#define _SSP1ADD_MSK41_LENGTH                               0x1
#define _SSP1ADD_MSK41_MASK                                 0x10
#define _SSP1ADD_MSK51_POSN                                 0x5
#define _SSP1ADD_MSK51_POSITION                             0x5
#define _SSP1ADD_MSK51_SIZE                                 0x1
#define _SSP1ADD_MSK51_LENGTH                               0x1
#define _SSP1ADD_MSK51_MASK                                 0x20
#define _SSP1ADD_MSK61_POSN                                 0x6
#define _SSP1ADD_MSK61_POSITION                             0x6
#define _SSP1ADD_MSK61_SIZE                                 0x1
#define _SSP1ADD_MSK61_LENGTH                               0x1
#define _SSP1ADD_MSK61_MASK                                 0x40
#define _SSP1ADD_MSK71_POSN                                 0x7
#define _SSP1ADD_MSK71_POSITION                             0x7
#define _SSP1ADD_MSK71_SIZE                                 0x1
#define _SSP1ADD_MSK71_LENGTH                               0x1
#define _SSP1ADD_MSK71_MASK                                 0x80

// Register: SSP1MSK
#define SSP1MSK SSP1MSK
extern volatile unsigned char           SSP1MSK             __at(0x78E);
#ifndef _LIB_BUILD
asm("SSP1MSK equ 078Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPMSK                 :8;
    };
    struct {
        unsigned MSK0                   :1;
        unsigned MSK1                   :1;
        unsigned MSK2                   :1;
        unsigned MSK3                   :1;
        unsigned MSK4                   :1;
        unsigned MSK5                   :1;
        unsigned MSK6                   :1;
        unsigned MSK7                   :1;
    };
} SSP1MSKbits_t;
extern volatile SSP1MSKbits_t SSP1MSKbits __at(0x78E);
// bitfield macros
#define _SSP1MSK_SSPMSK_POSN                                0x0
#define _SSP1MSK_SSPMSK_POSITION                            0x0
#define _SSP1MSK_SSPMSK_SIZE                                0x8
#define _SSP1MSK_SSPMSK_LENGTH                              0x8
#define _SSP1MSK_SSPMSK_MASK                                0xFF
#define _SSP1MSK_MSK0_POSN                                  0x0
#define _SSP1MSK_MSK0_POSITION                              0x0
#define _SSP1MSK_MSK0_SIZE                                  0x1
#define _SSP1MSK_MSK0_LENGTH                                0x1
#define _SSP1MSK_MSK0_MASK                                  0x1
#define _SSP1MSK_MSK1_POSN                                  0x1
#define _SSP1MSK_MSK1_POSITION                              0x1
#define _SSP1MSK_MSK1_SIZE                                  0x1
#define _SSP1MSK_MSK1_LENGTH                                0x1
#define _SSP1MSK_MSK1_MASK                                  0x2
#define _SSP1MSK_MSK2_POSN                                  0x2
#define _SSP1MSK_MSK2_POSITION                              0x2
#define _SSP1MSK_MSK2_SIZE                                  0x1
#define _SSP1MSK_MSK2_LENGTH                                0x1
#define _SSP1MSK_MSK2_MASK                                  0x4
#define _SSP1MSK_MSK3_POSN                                  0x3
#define _SSP1MSK_MSK3_POSITION                              0x3
#define _SSP1MSK_MSK3_SIZE                                  0x1
#define _SSP1MSK_MSK3_LENGTH                                0x1
#define _SSP1MSK_MSK3_MASK                                  0x8
#define _SSP1MSK_MSK4_POSN                                  0x4
#define _SSP1MSK_MSK4_POSITION                              0x4
#define _SSP1MSK_MSK4_SIZE                                  0x1
#define _SSP1MSK_MSK4_LENGTH                                0x1
#define _SSP1MSK_MSK4_MASK                                  0x10
#define _SSP1MSK_MSK5_POSN                                  0x5
#define _SSP1MSK_MSK5_POSITION                              0x5
#define _SSP1MSK_MSK5_SIZE                                  0x1
#define _SSP1MSK_MSK5_LENGTH                                0x1
#define _SSP1MSK_MSK5_MASK                                  0x20
#define _SSP1MSK_MSK6_POSN                                  0x6
#define _SSP1MSK_MSK6_POSITION                              0x6
#define _SSP1MSK_MSK6_SIZE                                  0x1
#define _SSP1MSK_MSK6_LENGTH                                0x1
#define _SSP1MSK_MSK6_MASK                                  0x40
#define _SSP1MSK_MSK7_POSN                                  0x7
#define _SSP1MSK_MSK7_POSITION                              0x7
#define _SSP1MSK_MSK7_SIZE                                  0x1
#define _SSP1MSK_MSK7_LENGTH                                0x1
#define _SSP1MSK_MSK7_MASK                                  0x80

// Register: SSP1STAT
#define SSP1STAT SSP1STAT
extern volatile unsigned char           SSP1STAT            __at(0x78F);
#ifndef _LIB_BUILD
asm("SSP1STAT equ 078Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BF                     :1;
        unsigned UA                     :1;
        unsigned R_nW                   :1;
        unsigned S                      :1;
        unsigned P                      :1;
        unsigned D_nA                   :1;
        unsigned CKE                    :1;
        unsigned SMP                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W                    :1;
        unsigned                        :2;
        unsigned D_A                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW                     :1;
        unsigned                        :2;
        unsigned nA                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE                 :1;
        unsigned                        :2;
        unsigned nADDRESS               :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE             :1;
        unsigned                        :2;
        unsigned DATA_ADDRESS           :1;
    };
    struct {
        unsigned                        :2;
        unsigned I2C_READ               :1;
        unsigned I2C_START              :1;
        unsigned I2C_STOP               :1;
        unsigned I2C_DAT                :1;
    };
    struct {
        unsigned BF1                    :1;
        unsigned UA1                    :1;
        unsigned R                      :1;
        unsigned START                  :1;
        unsigned STOP                   :1;
        unsigned D                      :1;
        unsigned CKE1                   :1;
        unsigned SMP1                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW                     :1;
        unsigned START1                 :1;
        unsigned STOP1                  :1;
        unsigned DA                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned RW1                    :1;
        unsigned I2C_START1             :1;
        unsigned I2C_STOP2              :1;
        unsigned DA1                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned I2C_READ1              :1;
        unsigned S2                     :1;
        unsigned P2                     :1;
        unsigned DATA_ADDRESS1          :1;
    };
    struct {
        unsigned                        :2;
        unsigned READ_WRITE1            :1;
        unsigned                        :2;
        unsigned D_A1                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_W1                   :1;
        unsigned                        :2;
        unsigned D_nA1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned R_nW1                  :1;
        unsigned                        :2;
        unsigned I2C_DAT1               :1;
    };
    struct {
        unsigned                        :2;
        unsigned nW2                    :1;
        unsigned                        :2;
        unsigned nA2                    :1;
    };
    struct {
        unsigned                        :2;
        unsigned nWRITE1                :1;
        unsigned                        :2;
        unsigned nADDRESS1              :1;
    };
} SSP1STATbits_t;
extern volatile SSP1STATbits_t SSP1STATbits __at(0x78F);
// bitfield macros
#define _SSP1STAT_BF_POSN                                   0x0
#define _SSP1STAT_BF_POSITION                               0x0
#define _SSP1STAT_BF_SIZE                                   0x1
#define _SSP1STAT_BF_LENGTH                                 0x1
#define _SSP1STAT_BF_MASK                                   0x1
#define _SSP1STAT_UA_POSN                                   0x1
#define _SSP1STAT_UA_POSITION                               0x1
#define _SSP1STAT_UA_SIZE                                   0x1
#define _SSP1STAT_UA_LENGTH                                 0x1
#define _SSP1STAT_UA_MASK                                   0x2
#define _SSP1STAT_R_nW_POSN                                 0x2
#define _SSP1STAT_R_nW_POSITION                             0x2
#define _SSP1STAT_R_nW_SIZE                                 0x1
#define _SSP1STAT_R_nW_LENGTH                               0x1
#define _SSP1STAT_R_nW_MASK                                 0x4
#define _SSP1STAT_S_POSN                                    0x3
#define _SSP1STAT_S_POSITION                                0x3
#define _SSP1STAT_S_SIZE                                    0x1
#define _SSP1STAT_S_LENGTH                                  0x1
#define _SSP1STAT_S_MASK                                    0x8
#define _SSP1STAT_P_POSN                                    0x4
#define _SSP1STAT_P_POSITION                                0x4
#define _SSP1STAT_P_SIZE                                    0x1
#define _SSP1STAT_P_LENGTH                                  0x1
#define _SSP1STAT_P_MASK                                    0x10
#define _SSP1STAT_D_nA_POSN                                 0x5
#define _SSP1STAT_D_nA_POSITION                             0x5
#define _SSP1STAT_D_nA_SIZE                                 0x1
#define _SSP1STAT_D_nA_LENGTH                               0x1
#define _SSP1STAT_D_nA_MASK                                 0x20
#define _SSP1STAT_CKE_POSN                                  0x6
#define _SSP1STAT_CKE_POSITION                              0x6
#define _SSP1STAT_CKE_SIZE                                  0x1
#define _SSP1STAT_CKE_LENGTH                                0x1
#define _SSP1STAT_CKE_MASK                                  0x40
#define _SSP1STAT_SMP_POSN                                  0x7
#define _SSP1STAT_SMP_POSITION                              0x7
#define _SSP1STAT_SMP_SIZE                                  0x1
#define _SSP1STAT_SMP_LENGTH                                0x1
#define _SSP1STAT_SMP_MASK                                  0x80
#define _SSP1STAT_R_W_POSN                                  0x2
#define _SSP1STAT_R_W_POSITION                              0x2
#define _SSP1STAT_R_W_SIZE                                  0x1
#define _SSP1STAT_R_W_LENGTH                                0x1
#define _SSP1STAT_R_W_MASK                                  0x4
#define _SSP1STAT_D_A_POSN                                  0x5
#define _SSP1STAT_D_A_POSITION                              0x5
#define _SSP1STAT_D_A_SIZE                                  0x1
#define _SSP1STAT_D_A_LENGTH                                0x1
#define _SSP1STAT_D_A_MASK                                  0x20
#define _SSP1STAT_nW_POSN                                   0x2
#define _SSP1STAT_nW_POSITION                               0x2
#define _SSP1STAT_nW_SIZE                                   0x1
#define _SSP1STAT_nW_LENGTH                                 0x1
#define _SSP1STAT_nW_MASK                                   0x4
#define _SSP1STAT_nA_POSN                                   0x5
#define _SSP1STAT_nA_POSITION                               0x5
#define _SSP1STAT_nA_SIZE                                   0x1
#define _SSP1STAT_nA_LENGTH                                 0x1
#define _SSP1STAT_nA_MASK                                   0x20
#define _SSP1STAT_nWRITE_POSN                               0x2
#define _SSP1STAT_nWRITE_POSITION                           0x2
#define _SSP1STAT_nWRITE_SIZE                               0x1
#define _SSP1STAT_nWRITE_LENGTH                             0x1
#define _SSP1STAT_nWRITE_MASK                               0x4
#define _SSP1STAT_nADDRESS_POSN                             0x5
#define _SSP1STAT_nADDRESS_POSITION                         0x5
#define _SSP1STAT_nADDRESS_SIZE                             0x1
#define _SSP1STAT_nADDRESS_LENGTH                           0x1
#define _SSP1STAT_nADDRESS_MASK                             0x20
#define _SSP1STAT_READ_WRITE_POSN                           0x2
#define _SSP1STAT_READ_WRITE_POSITION                       0x2
#define _SSP1STAT_READ_WRITE_SIZE                           0x1
#define _SSP1STAT_READ_WRITE_LENGTH                         0x1
#define _SSP1STAT_READ_WRITE_MASK                           0x4
#define _SSP1STAT_DATA_ADDRESS_POSN                         0x5
#define _SSP1STAT_DATA_ADDRESS_POSITION                     0x5
#define _SSP1STAT_DATA_ADDRESS_SIZE                         0x1
#define _SSP1STAT_DATA_ADDRESS_LENGTH                       0x1
#define _SSP1STAT_DATA_ADDRESS_MASK                         0x20
#define _SSP1STAT_I2C_READ_POSN                             0x2
#define _SSP1STAT_I2C_READ_POSITION                         0x2
#define _SSP1STAT_I2C_READ_SIZE                             0x1
#define _SSP1STAT_I2C_READ_LENGTH                           0x1
#define _SSP1STAT_I2C_READ_MASK                             0x4
#define _SSP1STAT_I2C_START_POSN                            0x3
#define _SSP1STAT_I2C_START_POSITION                        0x3
#define _SSP1STAT_I2C_START_SIZE                            0x1
#define _SSP1STAT_I2C_START_LENGTH                          0x1
#define _SSP1STAT_I2C_START_MASK                            0x8
#define _SSP1STAT_I2C_STOP_POSN                             0x4
#define _SSP1STAT_I2C_STOP_POSITION                         0x4
#define _SSP1STAT_I2C_STOP_SIZE                             0x1
#define _SSP1STAT_I2C_STOP_LENGTH                           0x1
#define _SSP1STAT_I2C_STOP_MASK                             0x10
#define _SSP1STAT_I2C_DAT_POSN                              0x5
#define _SSP1STAT_I2C_DAT_POSITION                          0x5
#define _SSP1STAT_I2C_DAT_SIZE                              0x1
#define _SSP1STAT_I2C_DAT_LENGTH                            0x1
#define _SSP1STAT_I2C_DAT_MASK                              0x20
#define _SSP1STAT_BF1_POSN                                  0x0
#define _SSP1STAT_BF1_POSITION                              0x0
#define _SSP1STAT_BF1_SIZE                                  0x1
#define _SSP1STAT_BF1_LENGTH                                0x1
#define _SSP1STAT_BF1_MASK                                  0x1
#define _SSP1STAT_UA1_POSN                                  0x1
#define _SSP1STAT_UA1_POSITION                              0x1
#define _SSP1STAT_UA1_SIZE                                  0x1
#define _SSP1STAT_UA1_LENGTH                                0x1
#define _SSP1STAT_UA1_MASK                                  0x2
#define _SSP1STAT_R_POSN                                    0x2
#define _SSP1STAT_R_POSITION                                0x2
#define _SSP1STAT_R_SIZE                                    0x1
#define _SSP1STAT_R_LENGTH                                  0x1
#define _SSP1STAT_R_MASK                                    0x4
#define _SSP1STAT_START_POSN                                0x3
#define _SSP1STAT_START_POSITION                            0x3
#define _SSP1STAT_START_SIZE                                0x1
#define _SSP1STAT_START_LENGTH                              0x1
#define _SSP1STAT_START_MASK                                0x8
#define _SSP1STAT_STOP_POSN                                 0x4
#define _SSP1STAT_STOP_POSITION                             0x4
#define _SSP1STAT_STOP_SIZE                                 0x1
#define _SSP1STAT_STOP_LENGTH                               0x1
#define _SSP1STAT_STOP_MASK                                 0x10
#define _SSP1STAT_D_POSN                                    0x5
#define _SSP1STAT_D_POSITION                                0x5
#define _SSP1STAT_D_SIZE                                    0x1
#define _SSP1STAT_D_LENGTH                                  0x1
#define _SSP1STAT_D_MASK                                    0x20
#define _SSP1STAT_CKE1_POSN                                 0x6
#define _SSP1STAT_CKE1_POSITION                             0x6
#define _SSP1STAT_CKE1_SIZE                                 0x1
#define _SSP1STAT_CKE1_LENGTH                               0x1
#define _SSP1STAT_CKE1_MASK                                 0x40
#define _SSP1STAT_SMP1_POSN                                 0x7
#define _SSP1STAT_SMP1_POSITION                             0x7
#define _SSP1STAT_SMP1_SIZE                                 0x1
#define _SSP1STAT_SMP1_LENGTH                               0x1
#define _SSP1STAT_SMP1_MASK                                 0x80
#define _SSP1STAT_RW_POSN                                   0x2
#define _SSP1STAT_RW_POSITION                               0x2
#define _SSP1STAT_RW_SIZE                                   0x1
#define _SSP1STAT_RW_LENGTH                                 0x1
#define _SSP1STAT_RW_MASK                                   0x4
#define _SSP1STAT_START1_POSN                               0x3
#define _SSP1STAT_START1_POSITION                           0x3
#define _SSP1STAT_START1_SIZE                               0x1
#define _SSP1STAT_START1_LENGTH                             0x1
#define _SSP1STAT_START1_MASK                               0x8
#define _SSP1STAT_STOP1_POSN                                0x4
#define _SSP1STAT_STOP1_POSITION                            0x4
#define _SSP1STAT_STOP1_SIZE                                0x1
#define _SSP1STAT_STOP1_LENGTH                              0x1
#define _SSP1STAT_STOP1_MASK                                0x10
#define _SSP1STAT_DA_POSN                                   0x5
#define _SSP1STAT_DA_POSITION                               0x5
#define _SSP1STAT_DA_SIZE                                   0x1
#define _SSP1STAT_DA_LENGTH                                 0x1
#define _SSP1STAT_DA_MASK                                   0x20
#define _SSP1STAT_RW1_POSN                                  0x2
#define _SSP1STAT_RW1_POSITION                              0x2
#define _SSP1STAT_RW1_SIZE                                  0x1
#define _SSP1STAT_RW1_LENGTH                                0x1
#define _SSP1STAT_RW1_MASK                                  0x4
#define _SSP1STAT_I2C_START1_POSN                           0x3
#define _SSP1STAT_I2C_START1_POSITION                       0x3
#define _SSP1STAT_I2C_START1_SIZE                           0x1
#define _SSP1STAT_I2C_START1_LENGTH                         0x1
#define _SSP1STAT_I2C_START1_MASK                           0x8
#define _SSP1STAT_I2C_STOP2_POSN                            0x4
#define _SSP1STAT_I2C_STOP2_POSITION                        0x4
#define _SSP1STAT_I2C_STOP2_SIZE                            0x1
#define _SSP1STAT_I2C_STOP2_LENGTH                          0x1
#define _SSP1STAT_I2C_STOP2_MASK                            0x10
#define _SSP1STAT_DA1_POSN                                  0x5
#define _SSP1STAT_DA1_POSITION                              0x5
#define _SSP1STAT_DA1_SIZE                                  0x1
#define _SSP1STAT_DA1_LENGTH                                0x1
#define _SSP1STAT_DA1_MASK                                  0x20
#define _SSP1STAT_I2C_READ1_POSN                            0x2
#define _SSP1STAT_I2C_READ1_POSITION                        0x2
#define _SSP1STAT_I2C_READ1_SIZE                            0x1
#define _SSP1STAT_I2C_READ1_LENGTH                          0x1
#define _SSP1STAT_I2C_READ1_MASK                            0x4
#define _SSP1STAT_S2_POSN                                   0x3
#define _SSP1STAT_S2_POSITION                               0x3
#define _SSP1STAT_S2_SIZE                                   0x1
#define _SSP1STAT_S2_LENGTH                                 0x1
#define _SSP1STAT_S2_MASK                                   0x8
#define _SSP1STAT_P2_POSN                                   0x4
#define _SSP1STAT_P2_POSITION                               0x4
#define _SSP1STAT_P2_SIZE                                   0x1
#define _SSP1STAT_P2_LENGTH                                 0x1
#define _SSP1STAT_P2_MASK                                   0x10
#define _SSP1STAT_DATA_ADDRESS1_POSN                        0x5
#define _SSP1STAT_DATA_ADDRESS1_POSITION                    0x5
#define _SSP1STAT_DATA_ADDRESS1_SIZE                        0x1
#define _SSP1STAT_DATA_ADDRESS1_LENGTH                      0x1
#define _SSP1STAT_DATA_ADDRESS1_MASK                        0x20
#define _SSP1STAT_READ_WRITE1_POSN                          0x2
#define _SSP1STAT_READ_WRITE1_POSITION                      0x2
#define _SSP1STAT_READ_WRITE1_SIZE                          0x1
#define _SSP1STAT_READ_WRITE1_LENGTH                        0x1
#define _SSP1STAT_READ_WRITE1_MASK                          0x4
#define _SSP1STAT_D_A1_POSN                                 0x5
#define _SSP1STAT_D_A1_POSITION                             0x5
#define _SSP1STAT_D_A1_SIZE                                 0x1
#define _SSP1STAT_D_A1_LENGTH                               0x1
#define _SSP1STAT_D_A1_MASK                                 0x20
#define _SSP1STAT_R_W1_POSN                                 0x2
#define _SSP1STAT_R_W1_POSITION                             0x2
#define _SSP1STAT_R_W1_SIZE                                 0x1
#define _SSP1STAT_R_W1_LENGTH                               0x1
#define _SSP1STAT_R_W1_MASK                                 0x4
#define _SSP1STAT_D_nA1_POSN                                0x5
#define _SSP1STAT_D_nA1_POSITION                            0x5
#define _SSP1STAT_D_nA1_SIZE                                0x1
#define _SSP1STAT_D_nA1_LENGTH                              0x1
#define _SSP1STAT_D_nA1_MASK                                0x20
#define _SSP1STAT_R_nW1_POSN                                0x2
#define _SSP1STAT_R_nW1_POSITION                            0x2
#define _SSP1STAT_R_nW1_SIZE                                0x1
#define _SSP1STAT_R_nW1_LENGTH                              0x1
#define _SSP1STAT_R_nW1_MASK                                0x4
#define _SSP1STAT_I2C_DAT1_POSN                             0x5
#define _SSP1STAT_I2C_DAT1_POSITION                         0x5
#define _SSP1STAT_I2C_DAT1_SIZE                             0x1
#define _SSP1STAT_I2C_DAT1_LENGTH                           0x1
#define _SSP1STAT_I2C_DAT1_MASK                             0x20
#define _SSP1STAT_nW2_POSN                                  0x2
#define _SSP1STAT_nW2_POSITION                              0x2
#define _SSP1STAT_nW2_SIZE                                  0x1
#define _SSP1STAT_nW2_LENGTH                                0x1
#define _SSP1STAT_nW2_MASK                                  0x4
#define _SSP1STAT_nA2_POSN                                  0x5
#define _SSP1STAT_nA2_POSITION                              0x5
#define _SSP1STAT_nA2_SIZE                                  0x1
#define _SSP1STAT_nA2_LENGTH                                0x1
#define _SSP1STAT_nA2_MASK                                  0x20
#define _SSP1STAT_nWRITE1_POSN                              0x2
#define _SSP1STAT_nWRITE1_POSITION                          0x2
#define _SSP1STAT_nWRITE1_SIZE                              0x1
#define _SSP1STAT_nWRITE1_LENGTH                            0x1
#define _SSP1STAT_nWRITE1_MASK                              0x4
#define _SSP1STAT_nADDRESS1_POSN                            0x5
#define _SSP1STAT_nADDRESS1_POSITION                        0x5
#define _SSP1STAT_nADDRESS1_SIZE                            0x1
#define _SSP1STAT_nADDRESS1_LENGTH                          0x1
#define _SSP1STAT_nADDRESS1_MASK                            0x20

// Register: SSP1CON1
#define SSP1CON1 SSP1CON1
extern volatile unsigned char           SSP1CON1            __at(0x790);
#ifndef _LIB_BUILD
asm("SSP1CON1 equ 0790h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSPM                   :4;
        unsigned CKP                    :1;
        unsigned SSPEN                  :1;
        unsigned SSPOV                  :1;
        unsigned WCOL                   :1;
    };
    struct {
        unsigned SSPM0                  :1;
        unsigned SSPM1                  :1;
        unsigned SSPM2                  :1;
        unsigned SSPM3                  :1;
    };
    struct {
        unsigned SSPM01                 :1;
        unsigned SSPM11                 :1;
        unsigned SSPM21                 :1;
        unsigned SSPM31                 :1;
        unsigned CKP1                   :1;
        unsigned SSPEN1                 :1;
        unsigned SSPOV1                 :1;
        unsigned WCOL1                  :1;
    };
} SSP1CON1bits_t;
extern volatile SSP1CON1bits_t SSP1CON1bits __at(0x790);
// bitfield macros
#define _SSP1CON1_SSPM_POSN                                 0x0
#define _SSP1CON1_SSPM_POSITION                             0x0
#define _SSP1CON1_SSPM_SIZE                                 0x4
#define _SSP1CON1_SSPM_LENGTH                               0x4
#define _SSP1CON1_SSPM_MASK                                 0xF
#define _SSP1CON1_CKP_POSN                                  0x4
#define _SSP1CON1_CKP_POSITION                              0x4
#define _SSP1CON1_CKP_SIZE                                  0x1
#define _SSP1CON1_CKP_LENGTH                                0x1
#define _SSP1CON1_CKP_MASK                                  0x10
#define _SSP1CON1_SSPEN_POSN                                0x5
#define _SSP1CON1_SSPEN_POSITION                            0x5
#define _SSP1CON1_SSPEN_SIZE                                0x1
#define _SSP1CON1_SSPEN_LENGTH                              0x1
#define _SSP1CON1_SSPEN_MASK                                0x20
#define _SSP1CON1_SSPOV_POSN                                0x6
#define _SSP1CON1_SSPOV_POSITION                            0x6
#define _SSP1CON1_SSPOV_SIZE                                0x1
#define _SSP1CON1_SSPOV_LENGTH                              0x1
#define _SSP1CON1_SSPOV_MASK                                0x40
#define _SSP1CON1_WCOL_POSN                                 0x7
#define _SSP1CON1_WCOL_POSITION                             0x7
#define _SSP1CON1_WCOL_SIZE                                 0x1
#define _SSP1CON1_WCOL_LENGTH                               0x1
#define _SSP1CON1_WCOL_MASK                                 0x80
#define _SSP1CON1_SSPM0_POSN                                0x0
#define _SSP1CON1_SSPM0_POSITION                            0x0
#define _SSP1CON1_SSPM0_SIZE                                0x1
#define _SSP1CON1_SSPM0_LENGTH                              0x1
#define _SSP1CON1_SSPM0_MASK                                0x1
#define _SSP1CON1_SSPM1_POSN                                0x1
#define _SSP1CON1_SSPM1_POSITION                            0x1
#define _SSP1CON1_SSPM1_SIZE                                0x1
#define _SSP1CON1_SSPM1_LENGTH                              0x1
#define _SSP1CON1_SSPM1_MASK                                0x2
#define _SSP1CON1_SSPM2_POSN                                0x2
#define _SSP1CON1_SSPM2_POSITION                            0x2
#define _SSP1CON1_SSPM2_SIZE                                0x1
#define _SSP1CON1_SSPM2_LENGTH                              0x1
#define _SSP1CON1_SSPM2_MASK                                0x4
#define _SSP1CON1_SSPM3_POSN                                0x3
#define _SSP1CON1_SSPM3_POSITION                            0x3
#define _SSP1CON1_SSPM3_SIZE                                0x1
#define _SSP1CON1_SSPM3_LENGTH                              0x1
#define _SSP1CON1_SSPM3_MASK                                0x8
#define _SSP1CON1_SSPM01_POSN                               0x0
#define _SSP1CON1_SSPM01_POSITION                           0x0
#define _SSP1CON1_SSPM01_SIZE                               0x1
#define _SSP1CON1_SSPM01_LENGTH                             0x1
#define _SSP1CON1_SSPM01_MASK                               0x1
#define _SSP1CON1_SSPM11_POSN                               0x1
#define _SSP1CON1_SSPM11_POSITION                           0x1
#define _SSP1CON1_SSPM11_SIZE                               0x1
#define _SSP1CON1_SSPM11_LENGTH                             0x1
#define _SSP1CON1_SSPM11_MASK                               0x2
#define _SSP1CON1_SSPM21_POSN                               0x2
#define _SSP1CON1_SSPM21_POSITION                           0x2
#define _SSP1CON1_SSPM21_SIZE                               0x1
#define _SSP1CON1_SSPM21_LENGTH                             0x1
#define _SSP1CON1_SSPM21_MASK                               0x4
#define _SSP1CON1_SSPM31_POSN                               0x3
#define _SSP1CON1_SSPM31_POSITION                           0x3
#define _SSP1CON1_SSPM31_SIZE                               0x1
#define _SSP1CON1_SSPM31_LENGTH                             0x1
#define _SSP1CON1_SSPM31_MASK                               0x8
#define _SSP1CON1_CKP1_POSN                                 0x4
#define _SSP1CON1_CKP1_POSITION                             0x4
#define _SSP1CON1_CKP1_SIZE                                 0x1
#define _SSP1CON1_CKP1_LENGTH                               0x1
#define _SSP1CON1_CKP1_MASK                                 0x10
#define _SSP1CON1_SSPEN1_POSN                               0x5
#define _SSP1CON1_SSPEN1_POSITION                           0x5
#define _SSP1CON1_SSPEN1_SIZE                               0x1
#define _SSP1CON1_SSPEN1_LENGTH                             0x1
#define _SSP1CON1_SSPEN1_MASK                               0x20
#define _SSP1CON1_SSPOV1_POSN                               0x6
#define _SSP1CON1_SSPOV1_POSITION                           0x6
#define _SSP1CON1_SSPOV1_SIZE                               0x1
#define _SSP1CON1_SSPOV1_LENGTH                             0x1
#define _SSP1CON1_SSPOV1_MASK                               0x40
#define _SSP1CON1_WCOL1_POSN                                0x7
#define _SSP1CON1_WCOL1_POSITION                            0x7
#define _SSP1CON1_WCOL1_SIZE                                0x1
#define _SSP1CON1_WCOL1_LENGTH                              0x1
#define _SSP1CON1_WCOL1_MASK                                0x80

// Register: SSP1CON2
#define SSP1CON2 SSP1CON2
extern volatile unsigned char           SSP1CON2            __at(0x791);
#ifndef _LIB_BUILD
asm("SSP1CON2 equ 0791h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned RSEN                   :1;
        unsigned PEN                    :1;
        unsigned RCEN                   :1;
        unsigned ACKEN                  :1;
        unsigned ACKDT                  :1;
        unsigned ACKSTAT                :1;
        unsigned GCEN                   :1;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK                  :5;
    };
    struct {
        unsigned                        :1;
        unsigned ADMSK1                 :1;
        unsigned ADMSK2                 :1;
        unsigned ADMSK3                 :1;
        unsigned ADMSK4                 :1;
        unsigned ADMSK5                 :1;
    };
    struct {
        unsigned SEN1                   :1;
        unsigned ADMSK11                :1;
        unsigned ADMSK21                :1;
        unsigned ADMSK31                :1;
        unsigned ACKEN1                 :1;
        unsigned ACKDT1                 :1;
        unsigned ACKSTAT1               :1;
        unsigned GCEN1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RSEN1                  :1;
        unsigned PEN1                   :1;
        unsigned RCEN1                  :1;
        unsigned ADMSK41                :1;
        unsigned ADMSK51                :1;
    };
} SSP1CON2bits_t;
extern volatile SSP1CON2bits_t SSP1CON2bits __at(0x791);
// bitfield macros
#define _SSP1CON2_SEN_POSN                                  0x0
#define _SSP1CON2_SEN_POSITION                              0x0
#define _SSP1CON2_SEN_SIZE                                  0x1
#define _SSP1CON2_SEN_LENGTH                                0x1
#define _SSP1CON2_SEN_MASK                                  0x1
#define _SSP1CON2_RSEN_POSN                                 0x1
#define _SSP1CON2_RSEN_POSITION                             0x1
#define _SSP1CON2_RSEN_SIZE                                 0x1
#define _SSP1CON2_RSEN_LENGTH                               0x1
#define _SSP1CON2_RSEN_MASK                                 0x2
#define _SSP1CON2_PEN_POSN                                  0x2
#define _SSP1CON2_PEN_POSITION                              0x2
#define _SSP1CON2_PEN_SIZE                                  0x1
#define _SSP1CON2_PEN_LENGTH                                0x1
#define _SSP1CON2_PEN_MASK                                  0x4
#define _SSP1CON2_RCEN_POSN                                 0x3
#define _SSP1CON2_RCEN_POSITION                             0x3
#define _SSP1CON2_RCEN_SIZE                                 0x1
#define _SSP1CON2_RCEN_LENGTH                               0x1
#define _SSP1CON2_RCEN_MASK                                 0x8
#define _SSP1CON2_ACKEN_POSN                                0x4
#define _SSP1CON2_ACKEN_POSITION                            0x4
#define _SSP1CON2_ACKEN_SIZE                                0x1
#define _SSP1CON2_ACKEN_LENGTH                              0x1
#define _SSP1CON2_ACKEN_MASK                                0x10
#define _SSP1CON2_ACKDT_POSN                                0x5
#define _SSP1CON2_ACKDT_POSITION                            0x5
#define _SSP1CON2_ACKDT_SIZE                                0x1
#define _SSP1CON2_ACKDT_LENGTH                              0x1
#define _SSP1CON2_ACKDT_MASK                                0x20
#define _SSP1CON2_ACKSTAT_POSN                              0x6
#define _SSP1CON2_ACKSTAT_POSITION                          0x6
#define _SSP1CON2_ACKSTAT_SIZE                              0x1
#define _SSP1CON2_ACKSTAT_LENGTH                            0x1
#define _SSP1CON2_ACKSTAT_MASK                              0x40
#define _SSP1CON2_GCEN_POSN                                 0x7
#define _SSP1CON2_GCEN_POSITION                             0x7
#define _SSP1CON2_GCEN_SIZE                                 0x1
#define _SSP1CON2_GCEN_LENGTH                               0x1
#define _SSP1CON2_GCEN_MASK                                 0x80
#define _SSP1CON2_ADMSK_POSN                                0x1
#define _SSP1CON2_ADMSK_POSITION                            0x1
#define _SSP1CON2_ADMSK_SIZE                                0x5
#define _SSP1CON2_ADMSK_LENGTH                              0x5
#define _SSP1CON2_ADMSK_MASK                                0x3E
#define _SSP1CON2_ADMSK1_POSN                               0x1
#define _SSP1CON2_ADMSK1_POSITION                           0x1
#define _SSP1CON2_ADMSK1_SIZE                               0x1
#define _SSP1CON2_ADMSK1_LENGTH                             0x1
#define _SSP1CON2_ADMSK1_MASK                               0x2
#define _SSP1CON2_ADMSK2_POSN                               0x2
#define _SSP1CON2_ADMSK2_POSITION                           0x2
#define _SSP1CON2_ADMSK2_SIZE                               0x1
#define _SSP1CON2_ADMSK2_LENGTH                             0x1
#define _SSP1CON2_ADMSK2_MASK                               0x4
#define _SSP1CON2_ADMSK3_POSN                               0x3
#define _SSP1CON2_ADMSK3_POSITION                           0x3
#define _SSP1CON2_ADMSK3_SIZE                               0x1
#define _SSP1CON2_ADMSK3_LENGTH                             0x1
#define _SSP1CON2_ADMSK3_MASK                               0x8
#define _SSP1CON2_ADMSK4_POSN                               0x4
#define _SSP1CON2_ADMSK4_POSITION                           0x4
#define _SSP1CON2_ADMSK4_SIZE                               0x1
#define _SSP1CON2_ADMSK4_LENGTH                             0x1
#define _SSP1CON2_ADMSK4_MASK                               0x10
#define _SSP1CON2_ADMSK5_POSN                               0x5
#define _SSP1CON2_ADMSK5_POSITION                           0x5
#define _SSP1CON2_ADMSK5_SIZE                               0x1
#define _SSP1CON2_ADMSK5_LENGTH                             0x1
#define _SSP1CON2_ADMSK5_MASK                               0x20
#define _SSP1CON2_SEN1_POSN                                 0x0
#define _SSP1CON2_SEN1_POSITION                             0x0
#define _SSP1CON2_SEN1_SIZE                                 0x1
#define _SSP1CON2_SEN1_LENGTH                               0x1
#define _SSP1CON2_SEN1_MASK                                 0x1
#define _SSP1CON2_ADMSK11_POSN                              0x1
#define _SSP1CON2_ADMSK11_POSITION                          0x1
#define _SSP1CON2_ADMSK11_SIZE                              0x1
#define _SSP1CON2_ADMSK11_LENGTH                            0x1
#define _SSP1CON2_ADMSK11_MASK                              0x2
#define _SSP1CON2_ADMSK21_POSN                              0x2
#define _SSP1CON2_ADMSK21_POSITION                          0x2
#define _SSP1CON2_ADMSK21_SIZE                              0x1
#define _SSP1CON2_ADMSK21_LENGTH                            0x1
#define _SSP1CON2_ADMSK21_MASK                              0x4
#define _SSP1CON2_ADMSK31_POSN                              0x3
#define _SSP1CON2_ADMSK31_POSITION                          0x3
#define _SSP1CON2_ADMSK31_SIZE                              0x1
#define _SSP1CON2_ADMSK31_LENGTH                            0x1
#define _SSP1CON2_ADMSK31_MASK                              0x8
#define _SSP1CON2_ACKEN1_POSN                               0x4
#define _SSP1CON2_ACKEN1_POSITION                           0x4
#define _SSP1CON2_ACKEN1_SIZE                               0x1
#define _SSP1CON2_ACKEN1_LENGTH                             0x1
#define _SSP1CON2_ACKEN1_MASK                               0x10
#define _SSP1CON2_ACKDT1_POSN                               0x5
#define _SSP1CON2_ACKDT1_POSITION                           0x5
#define _SSP1CON2_ACKDT1_SIZE                               0x1
#define _SSP1CON2_ACKDT1_LENGTH                             0x1
#define _SSP1CON2_ACKDT1_MASK                               0x20
#define _SSP1CON2_ACKSTAT1_POSN                             0x6
#define _SSP1CON2_ACKSTAT1_POSITION                         0x6
#define _SSP1CON2_ACKSTAT1_SIZE                             0x1
#define _SSP1CON2_ACKSTAT1_LENGTH                           0x1
#define _SSP1CON2_ACKSTAT1_MASK                             0x40
#define _SSP1CON2_GCEN1_POSN                                0x7
#define _SSP1CON2_GCEN1_POSITION                            0x7
#define _SSP1CON2_GCEN1_SIZE                                0x1
#define _SSP1CON2_GCEN1_LENGTH                              0x1
#define _SSP1CON2_GCEN1_MASK                                0x80
#define _SSP1CON2_RSEN1_POSN                                0x1
#define _SSP1CON2_RSEN1_POSITION                            0x1
#define _SSP1CON2_RSEN1_SIZE                                0x1
#define _SSP1CON2_RSEN1_LENGTH                              0x1
#define _SSP1CON2_RSEN1_MASK                                0x2
#define _SSP1CON2_PEN1_POSN                                 0x2
#define _SSP1CON2_PEN1_POSITION                             0x2
#define _SSP1CON2_PEN1_SIZE                                 0x1
#define _SSP1CON2_PEN1_LENGTH                               0x1
#define _SSP1CON2_PEN1_MASK                                 0x4
#define _SSP1CON2_RCEN1_POSN                                0x3
#define _SSP1CON2_RCEN1_POSITION                            0x3
#define _SSP1CON2_RCEN1_SIZE                                0x1
#define _SSP1CON2_RCEN1_LENGTH                              0x1
#define _SSP1CON2_RCEN1_MASK                                0x8
#define _SSP1CON2_ADMSK41_POSN                              0x4
#define _SSP1CON2_ADMSK41_POSITION                          0x4
#define _SSP1CON2_ADMSK41_SIZE                              0x1
#define _SSP1CON2_ADMSK41_LENGTH                            0x1
#define _SSP1CON2_ADMSK41_MASK                              0x10
#define _SSP1CON2_ADMSK51_POSN                              0x5
#define _SSP1CON2_ADMSK51_POSITION                          0x5
#define _SSP1CON2_ADMSK51_SIZE                              0x1
#define _SSP1CON2_ADMSK51_LENGTH                            0x1
#define _SSP1CON2_ADMSK51_MASK                              0x20

// Register: SSP1CON3
#define SSP1CON3 SSP1CON3
extern volatile unsigned char           SSP1CON3            __at(0x792);
#ifndef _LIB_BUILD
asm("SSP1CON3 equ 0792h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DHEN                   :1;
        unsigned AHEN                   :1;
        unsigned SBCDE                  :1;
        unsigned SDAHT                  :1;
        unsigned BOEN                   :1;
        unsigned SCIE                   :1;
        unsigned PCIE                   :1;
        unsigned ACKTIM                 :1;
    };
} SSP1CON3bits_t;
extern volatile SSP1CON3bits_t SSP1CON3bits __at(0x792);
// bitfield macros
#define _SSP1CON3_DHEN_POSN                                 0x0
#define _SSP1CON3_DHEN_POSITION                             0x0
#define _SSP1CON3_DHEN_SIZE                                 0x1
#define _SSP1CON3_DHEN_LENGTH                               0x1
#define _SSP1CON3_DHEN_MASK                                 0x1
#define _SSP1CON3_AHEN_POSN                                 0x1
#define _SSP1CON3_AHEN_POSITION                             0x1
#define _SSP1CON3_AHEN_SIZE                                 0x1
#define _SSP1CON3_AHEN_LENGTH                               0x1
#define _SSP1CON3_AHEN_MASK                                 0x2
#define _SSP1CON3_SBCDE_POSN                                0x2
#define _SSP1CON3_SBCDE_POSITION                            0x2
#define _SSP1CON3_SBCDE_SIZE                                0x1
#define _SSP1CON3_SBCDE_LENGTH                              0x1
#define _SSP1CON3_SBCDE_MASK                                0x4
#define _SSP1CON3_SDAHT_POSN                                0x3
#define _SSP1CON3_SDAHT_POSITION                            0x3
#define _SSP1CON3_SDAHT_SIZE                                0x1
#define _SSP1CON3_SDAHT_LENGTH                              0x1
#define _SSP1CON3_SDAHT_MASK                                0x8
#define _SSP1CON3_BOEN_POSN                                 0x4
#define _SSP1CON3_BOEN_POSITION                             0x4
#define _SSP1CON3_BOEN_SIZE                                 0x1
#define _SSP1CON3_BOEN_LENGTH                               0x1
#define _SSP1CON3_BOEN_MASK                                 0x10
#define _SSP1CON3_SCIE_POSN                                 0x5
#define _SSP1CON3_SCIE_POSITION                             0x5
#define _SSP1CON3_SCIE_SIZE                                 0x1
#define _SSP1CON3_SCIE_LENGTH                               0x1
#define _SSP1CON3_SCIE_MASK                                 0x20
#define _SSP1CON3_PCIE_POSN                                 0x6
#define _SSP1CON3_PCIE_POSITION                             0x6
#define _SSP1CON3_PCIE_SIZE                                 0x1
#define _SSP1CON3_PCIE_LENGTH                               0x1
#define _SSP1CON3_PCIE_MASK                                 0x40
#define _SSP1CON3_ACKTIM_POSN                               0x7
#define _SSP1CON3_ACKTIM_POSITION                           0x7
#define _SSP1CON3_ACKTIM_SIZE                               0x1
#define _SSP1CON3_ACKTIM_LENGTH                             0x1
#define _SSP1CON3_ACKTIM_MASK                               0x80

// Register: CM1CON0
#define CM1CON0 CM1CON0
extern volatile unsigned char           CM1CON0             __at(0x80C);
#ifndef _LIB_BUILD
asm("CM1CON0 equ 080Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYNC                   :1;
        unsigned HYS                    :1;
        unsigned SP                     :1;
        unsigned                        :1;
        unsigned POL                    :1;
        unsigned                        :1;
        unsigned OUT                    :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned C1SYNC                 :1;
        unsigned C1HYS                  :1;
        unsigned C1SP                   :1;
        unsigned                        :1;
        unsigned C1POL                  :1;
        unsigned                        :1;
        unsigned C1OUT                  :1;
        unsigned C1EN                   :1;
    };
} CM1CON0bits_t;
extern volatile CM1CON0bits_t CM1CON0bits __at(0x80C);
// bitfield macros
#define _CM1CON0_SYNC_POSN                                  0x0
#define _CM1CON0_SYNC_POSITION                              0x0
#define _CM1CON0_SYNC_SIZE                                  0x1
#define _CM1CON0_SYNC_LENGTH                                0x1
#define _CM1CON0_SYNC_MASK                                  0x1
#define _CM1CON0_HYS_POSN                                   0x1
#define _CM1CON0_HYS_POSITION                               0x1
#define _CM1CON0_HYS_SIZE                                   0x1
#define _CM1CON0_HYS_LENGTH                                 0x1
#define _CM1CON0_HYS_MASK                                   0x2
#define _CM1CON0_SP_POSN                                    0x2
#define _CM1CON0_SP_POSITION                                0x2
#define _CM1CON0_SP_SIZE                                    0x1
#define _CM1CON0_SP_LENGTH                                  0x1
#define _CM1CON0_SP_MASK                                    0x4
#define _CM1CON0_POL_POSN                                   0x4
#define _CM1CON0_POL_POSITION                               0x4
#define _CM1CON0_POL_SIZE                                   0x1
#define _CM1CON0_POL_LENGTH                                 0x1
#define _CM1CON0_POL_MASK                                   0x10
#define _CM1CON0_OUT_POSN                                   0x6
#define _CM1CON0_OUT_POSITION                               0x6
#define _CM1CON0_OUT_SIZE                                   0x1
#define _CM1CON0_OUT_LENGTH                                 0x1
#define _CM1CON0_OUT_MASK                                   0x40
#define _CM1CON0_EN_POSN                                    0x7
#define _CM1CON0_EN_POSITION                                0x7
#define _CM1CON0_EN_SIZE                                    0x1
#define _CM1CON0_EN_LENGTH                                  0x1
#define _CM1CON0_EN_MASK                                    0x80
#define _CM1CON0_C1SYNC_POSN                                0x0
#define _CM1CON0_C1SYNC_POSITION                            0x0
#define _CM1CON0_C1SYNC_SIZE                                0x1
#define _CM1CON0_C1SYNC_LENGTH                              0x1
#define _CM1CON0_C1SYNC_MASK                                0x1
#define _CM1CON0_C1HYS_POSN                                 0x1
#define _CM1CON0_C1HYS_POSITION                             0x1
#define _CM1CON0_C1HYS_SIZE                                 0x1
#define _CM1CON0_C1HYS_LENGTH                               0x1
#define _CM1CON0_C1HYS_MASK                                 0x2
#define _CM1CON0_C1SP_POSN                                  0x2
#define _CM1CON0_C1SP_POSITION                              0x2
#define _CM1CON0_C1SP_SIZE                                  0x1
#define _CM1CON0_C1SP_LENGTH                                0x1
#define _CM1CON0_C1SP_MASK                                  0x4
#define _CM1CON0_C1POL_POSN                                 0x4
#define _CM1CON0_C1POL_POSITION                             0x4
#define _CM1CON0_C1POL_SIZE                                 0x1
#define _CM1CON0_C1POL_LENGTH                               0x1
#define _CM1CON0_C1POL_MASK                                 0x10
#define _CM1CON0_C1OUT_POSN                                 0x6
#define _CM1CON0_C1OUT_POSITION                             0x6
#define _CM1CON0_C1OUT_SIZE                                 0x1
#define _CM1CON0_C1OUT_LENGTH                               0x1
#define _CM1CON0_C1OUT_MASK                                 0x40
#define _CM1CON0_C1EN_POSN                                  0x7
#define _CM1CON0_C1EN_POSITION                              0x7
#define _CM1CON0_C1EN_SIZE                                  0x1
#define _CM1CON0_C1EN_LENGTH                                0x1
#define _CM1CON0_C1EN_MASK                                  0x80

// Register: CM1CON1
#define CM1CON1 CM1CON1
extern volatile unsigned char           CM1CON1             __at(0x80D);
#ifndef _LIB_BUILD
asm("CM1CON1 equ 080Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTN                   :1;
        unsigned INTP                   :1;
    };
    struct {
        unsigned C1INTN                 :1;
        unsigned C1INTP                 :1;
    };
} CM1CON1bits_t;
extern volatile CM1CON1bits_t CM1CON1bits __at(0x80D);
// bitfield macros
#define _CM1CON1_INTN_POSN                                  0x0
#define _CM1CON1_INTN_POSITION                              0x0
#define _CM1CON1_INTN_SIZE                                  0x1
#define _CM1CON1_INTN_LENGTH                                0x1
#define _CM1CON1_INTN_MASK                                  0x1
#define _CM1CON1_INTP_POSN                                  0x1
#define _CM1CON1_INTP_POSITION                              0x1
#define _CM1CON1_INTP_SIZE                                  0x1
#define _CM1CON1_INTP_LENGTH                                0x1
#define _CM1CON1_INTP_MASK                                  0x2
#define _CM1CON1_C1INTN_POSN                                0x0
#define _CM1CON1_C1INTN_POSITION                            0x0
#define _CM1CON1_C1INTN_SIZE                                0x1
#define _CM1CON1_C1INTN_LENGTH                              0x1
#define _CM1CON1_C1INTN_MASK                                0x1
#define _CM1CON1_C1INTP_POSN                                0x1
#define _CM1CON1_C1INTP_POSITION                            0x1
#define _CM1CON1_C1INTP_SIZE                                0x1
#define _CM1CON1_C1INTP_LENGTH                              0x1
#define _CM1CON1_C1INTP_MASK                                0x2

// Register: CM1NCH
#define CM1NCH CM1NCH
extern volatile unsigned char           CM1NCH              __at(0x80E);
#ifndef _LIB_BUILD
asm("CM1NCH equ 080Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCH                    :3;
    };
    struct {
        unsigned NCH0                   :1;
        unsigned NCH1                   :1;
        unsigned NCH2                   :1;
    };
    struct {
        unsigned C1NCH0                 :1;
        unsigned C1NCH1                 :1;
        unsigned C1NCH2                 :1;
    };
} CM1NCHbits_t;
extern volatile CM1NCHbits_t CM1NCHbits __at(0x80E);
// bitfield macros
#define _CM1NCH_NCH_POSN                                    0x0
#define _CM1NCH_NCH_POSITION                                0x0
#define _CM1NCH_NCH_SIZE                                    0x3
#define _CM1NCH_NCH_LENGTH                                  0x3
#define _CM1NCH_NCH_MASK                                    0x7
#define _CM1NCH_NCH0_POSN                                   0x0
#define _CM1NCH_NCH0_POSITION                               0x0
#define _CM1NCH_NCH0_SIZE                                   0x1
#define _CM1NCH_NCH0_LENGTH                                 0x1
#define _CM1NCH_NCH0_MASK                                   0x1
#define _CM1NCH_NCH1_POSN                                   0x1
#define _CM1NCH_NCH1_POSITION                               0x1
#define _CM1NCH_NCH1_SIZE                                   0x1
#define _CM1NCH_NCH1_LENGTH                                 0x1
#define _CM1NCH_NCH1_MASK                                   0x2
#define _CM1NCH_NCH2_POSN                                   0x2
#define _CM1NCH_NCH2_POSITION                               0x2
#define _CM1NCH_NCH2_SIZE                                   0x1
#define _CM1NCH_NCH2_LENGTH                                 0x1
#define _CM1NCH_NCH2_MASK                                   0x4
#define _CM1NCH_C1NCH0_POSN                                 0x0
#define _CM1NCH_C1NCH0_POSITION                             0x0
#define _CM1NCH_C1NCH0_SIZE                                 0x1
#define _CM1NCH_C1NCH0_LENGTH                               0x1
#define _CM1NCH_C1NCH0_MASK                                 0x1
#define _CM1NCH_C1NCH1_POSN                                 0x1
#define _CM1NCH_C1NCH1_POSITION                             0x1
#define _CM1NCH_C1NCH1_SIZE                                 0x1
#define _CM1NCH_C1NCH1_LENGTH                               0x1
#define _CM1NCH_C1NCH1_MASK                                 0x2
#define _CM1NCH_C1NCH2_POSN                                 0x2
#define _CM1NCH_C1NCH2_POSITION                             0x2
#define _CM1NCH_C1NCH2_SIZE                                 0x1
#define _CM1NCH_C1NCH2_LENGTH                               0x1
#define _CM1NCH_C1NCH2_MASK                                 0x4

// Register: CM1PCH
#define CM1PCH CM1PCH
extern volatile unsigned char           CM1PCH              __at(0x80F);
#ifndef _LIB_BUILD
asm("CM1PCH equ 080Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :3;
    };
    struct {
        unsigned PCH0                   :1;
        unsigned PCH1                   :1;
        unsigned PCH2                   :1;
    };
    struct {
        unsigned C1PCH0                 :1;
        unsigned C1PCH1                 :1;
        unsigned C1PCH2                 :1;
    };
} CM1PCHbits_t;
extern volatile CM1PCHbits_t CM1PCHbits __at(0x80F);
// bitfield macros
#define _CM1PCH_PCH_POSN                                    0x0
#define _CM1PCH_PCH_POSITION                                0x0
#define _CM1PCH_PCH_SIZE                                    0x3
#define _CM1PCH_PCH_LENGTH                                  0x3
#define _CM1PCH_PCH_MASK                                    0x7
#define _CM1PCH_PCH0_POSN                                   0x0
#define _CM1PCH_PCH0_POSITION                               0x0
#define _CM1PCH_PCH0_SIZE                                   0x1
#define _CM1PCH_PCH0_LENGTH                                 0x1
#define _CM1PCH_PCH0_MASK                                   0x1
#define _CM1PCH_PCH1_POSN                                   0x1
#define _CM1PCH_PCH1_POSITION                               0x1
#define _CM1PCH_PCH1_SIZE                                   0x1
#define _CM1PCH_PCH1_LENGTH                                 0x1
#define _CM1PCH_PCH1_MASK                                   0x2
#define _CM1PCH_PCH2_POSN                                   0x2
#define _CM1PCH_PCH2_POSITION                               0x2
#define _CM1PCH_PCH2_SIZE                                   0x1
#define _CM1PCH_PCH2_LENGTH                                 0x1
#define _CM1PCH_PCH2_MASK                                   0x4
#define _CM1PCH_C1PCH0_POSN                                 0x0
#define _CM1PCH_C1PCH0_POSITION                             0x0
#define _CM1PCH_C1PCH0_SIZE                                 0x1
#define _CM1PCH_C1PCH0_LENGTH                               0x1
#define _CM1PCH_C1PCH0_MASK                                 0x1
#define _CM1PCH_C1PCH1_POSN                                 0x1
#define _CM1PCH_C1PCH1_POSITION                             0x1
#define _CM1PCH_C1PCH1_SIZE                                 0x1
#define _CM1PCH_C1PCH1_LENGTH                               0x1
#define _CM1PCH_C1PCH1_MASK                                 0x2
#define _CM1PCH_C1PCH2_POSN                                 0x2
#define _CM1PCH_C1PCH2_POSITION                             0x2
#define _CM1PCH_C1PCH2_SIZE                                 0x1
#define _CM1PCH_C1PCH2_LENGTH                               0x1
#define _CM1PCH_C1PCH2_MASK                                 0x4

// Register: CM2CON0
#define CM2CON0 CM2CON0
extern volatile unsigned char           CM2CON0             __at(0x810);
#ifndef _LIB_BUILD
asm("CM2CON0 equ 0810h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYNC                   :1;
        unsigned HYS                    :1;
        unsigned SP                     :1;
        unsigned                        :1;
        unsigned POL                    :1;
        unsigned                        :1;
        unsigned OUT                    :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned C2SYNC                 :1;
        unsigned C2HYS                  :1;
        unsigned C2SP                   :1;
        unsigned                        :1;
        unsigned C2POL                  :1;
        unsigned                        :1;
        unsigned C2OUT                  :1;
        unsigned C2EN                   :1;
    };
} CM2CON0bits_t;
extern volatile CM2CON0bits_t CM2CON0bits __at(0x810);
// bitfield macros
#define _CM2CON0_SYNC_POSN                                  0x0
#define _CM2CON0_SYNC_POSITION                              0x0
#define _CM2CON0_SYNC_SIZE                                  0x1
#define _CM2CON0_SYNC_LENGTH                                0x1
#define _CM2CON0_SYNC_MASK                                  0x1
#define _CM2CON0_HYS_POSN                                   0x1
#define _CM2CON0_HYS_POSITION                               0x1
#define _CM2CON0_HYS_SIZE                                   0x1
#define _CM2CON0_HYS_LENGTH                                 0x1
#define _CM2CON0_HYS_MASK                                   0x2
#define _CM2CON0_SP_POSN                                    0x2
#define _CM2CON0_SP_POSITION                                0x2
#define _CM2CON0_SP_SIZE                                    0x1
#define _CM2CON0_SP_LENGTH                                  0x1
#define _CM2CON0_SP_MASK                                    0x4
#define _CM2CON0_POL_POSN                                   0x4
#define _CM2CON0_POL_POSITION                               0x4
#define _CM2CON0_POL_SIZE                                   0x1
#define _CM2CON0_POL_LENGTH                                 0x1
#define _CM2CON0_POL_MASK                                   0x10
#define _CM2CON0_OUT_POSN                                   0x6
#define _CM2CON0_OUT_POSITION                               0x6
#define _CM2CON0_OUT_SIZE                                   0x1
#define _CM2CON0_OUT_LENGTH                                 0x1
#define _CM2CON0_OUT_MASK                                   0x40
#define _CM2CON0_EN_POSN                                    0x7
#define _CM2CON0_EN_POSITION                                0x7
#define _CM2CON0_EN_SIZE                                    0x1
#define _CM2CON0_EN_LENGTH                                  0x1
#define _CM2CON0_EN_MASK                                    0x80
#define _CM2CON0_C2SYNC_POSN                                0x0
#define _CM2CON0_C2SYNC_POSITION                            0x0
#define _CM2CON0_C2SYNC_SIZE                                0x1
#define _CM2CON0_C2SYNC_LENGTH                              0x1
#define _CM2CON0_C2SYNC_MASK                                0x1
#define _CM2CON0_C2HYS_POSN                                 0x1
#define _CM2CON0_C2HYS_POSITION                             0x1
#define _CM2CON0_C2HYS_SIZE                                 0x1
#define _CM2CON0_C2HYS_LENGTH                               0x1
#define _CM2CON0_C2HYS_MASK                                 0x2
#define _CM2CON0_C2SP_POSN                                  0x2
#define _CM2CON0_C2SP_POSITION                              0x2
#define _CM2CON0_C2SP_SIZE                                  0x1
#define _CM2CON0_C2SP_LENGTH                                0x1
#define _CM2CON0_C2SP_MASK                                  0x4
#define _CM2CON0_C2POL_POSN                                 0x4
#define _CM2CON0_C2POL_POSITION                             0x4
#define _CM2CON0_C2POL_SIZE                                 0x1
#define _CM2CON0_C2POL_LENGTH                               0x1
#define _CM2CON0_C2POL_MASK                                 0x10
#define _CM2CON0_C2OUT_POSN                                 0x6
#define _CM2CON0_C2OUT_POSITION                             0x6
#define _CM2CON0_C2OUT_SIZE                                 0x1
#define _CM2CON0_C2OUT_LENGTH                               0x1
#define _CM2CON0_C2OUT_MASK                                 0x40
#define _CM2CON0_C2EN_POSN                                  0x7
#define _CM2CON0_C2EN_POSITION                              0x7
#define _CM2CON0_C2EN_SIZE                                  0x1
#define _CM2CON0_C2EN_LENGTH                                0x1
#define _CM2CON0_C2EN_MASK                                  0x80

// Register: CM2CON1
#define CM2CON1 CM2CON1
extern volatile unsigned char           CM2CON1             __at(0x811);
#ifndef _LIB_BUILD
asm("CM2CON1 equ 0811h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTN                   :1;
        unsigned INTP                   :1;
    };
    struct {
        unsigned C2INTN                 :1;
        unsigned C2INTP                 :1;
    };
} CM2CON1bits_t;
extern volatile CM2CON1bits_t CM2CON1bits __at(0x811);
// bitfield macros
#define _CM2CON1_INTN_POSN                                  0x0
#define _CM2CON1_INTN_POSITION                              0x0
#define _CM2CON1_INTN_SIZE                                  0x1
#define _CM2CON1_INTN_LENGTH                                0x1
#define _CM2CON1_INTN_MASK                                  0x1
#define _CM2CON1_INTP_POSN                                  0x1
#define _CM2CON1_INTP_POSITION                              0x1
#define _CM2CON1_INTP_SIZE                                  0x1
#define _CM2CON1_INTP_LENGTH                                0x1
#define _CM2CON1_INTP_MASK                                  0x2
#define _CM2CON1_C2INTN_POSN                                0x0
#define _CM2CON1_C2INTN_POSITION                            0x0
#define _CM2CON1_C2INTN_SIZE                                0x1
#define _CM2CON1_C2INTN_LENGTH                              0x1
#define _CM2CON1_C2INTN_MASK                                0x1
#define _CM2CON1_C2INTP_POSN                                0x1
#define _CM2CON1_C2INTP_POSITION                            0x1
#define _CM2CON1_C2INTP_SIZE                                0x1
#define _CM2CON1_C2INTP_LENGTH                              0x1
#define _CM2CON1_C2INTP_MASK                                0x2

// Register: CM2NCH
#define CM2NCH CM2NCH
extern volatile unsigned char           CM2NCH              __at(0x812);
#ifndef _LIB_BUILD
asm("CM2NCH equ 0812h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCH                    :3;
    };
    struct {
        unsigned NCH0                   :1;
        unsigned NCH1                   :1;
        unsigned NCH2                   :1;
    };
    struct {
        unsigned C2NCH0                 :1;
        unsigned C2NCH1                 :1;
        unsigned C2NCH2                 :1;
    };
} CM2NCHbits_t;
extern volatile CM2NCHbits_t CM2NCHbits __at(0x812);
// bitfield macros
#define _CM2NCH_NCH_POSN                                    0x0
#define _CM2NCH_NCH_POSITION                                0x0
#define _CM2NCH_NCH_SIZE                                    0x3
#define _CM2NCH_NCH_LENGTH                                  0x3
#define _CM2NCH_NCH_MASK                                    0x7
#define _CM2NCH_NCH0_POSN                                   0x0
#define _CM2NCH_NCH0_POSITION                               0x0
#define _CM2NCH_NCH0_SIZE                                   0x1
#define _CM2NCH_NCH0_LENGTH                                 0x1
#define _CM2NCH_NCH0_MASK                                   0x1
#define _CM2NCH_NCH1_POSN                                   0x1
#define _CM2NCH_NCH1_POSITION                               0x1
#define _CM2NCH_NCH1_SIZE                                   0x1
#define _CM2NCH_NCH1_LENGTH                                 0x1
#define _CM2NCH_NCH1_MASK                                   0x2
#define _CM2NCH_NCH2_POSN                                   0x2
#define _CM2NCH_NCH2_POSITION                               0x2
#define _CM2NCH_NCH2_SIZE                                   0x1
#define _CM2NCH_NCH2_LENGTH                                 0x1
#define _CM2NCH_NCH2_MASK                                   0x4
#define _CM2NCH_C2NCH0_POSN                                 0x0
#define _CM2NCH_C2NCH0_POSITION                             0x0
#define _CM2NCH_C2NCH0_SIZE                                 0x1
#define _CM2NCH_C2NCH0_LENGTH                               0x1
#define _CM2NCH_C2NCH0_MASK                                 0x1
#define _CM2NCH_C2NCH1_POSN                                 0x1
#define _CM2NCH_C2NCH1_POSITION                             0x1
#define _CM2NCH_C2NCH1_SIZE                                 0x1
#define _CM2NCH_C2NCH1_LENGTH                               0x1
#define _CM2NCH_C2NCH1_MASK                                 0x2
#define _CM2NCH_C2NCH2_POSN                                 0x2
#define _CM2NCH_C2NCH2_POSITION                             0x2
#define _CM2NCH_C2NCH2_SIZE                                 0x1
#define _CM2NCH_C2NCH2_LENGTH                               0x1
#define _CM2NCH_C2NCH2_MASK                                 0x4

// Register: CM2PCH
#define CM2PCH CM2PCH
extern volatile unsigned char           CM2PCH              __at(0x813);
#ifndef _LIB_BUILD
asm("CM2PCH equ 0813h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :3;
    };
    struct {
        unsigned PCH0                   :1;
        unsigned PCH1                   :1;
        unsigned PCH2                   :1;
    };
    struct {
        unsigned C2PCH0                 :1;
        unsigned C2PCH1                 :1;
        unsigned C2PCH2                 :1;
    };
} CM2PCHbits_t;
extern volatile CM2PCHbits_t CM2PCHbits __at(0x813);
// bitfield macros
#define _CM2PCH_PCH_POSN                                    0x0
#define _CM2PCH_PCH_POSITION                                0x0
#define _CM2PCH_PCH_SIZE                                    0x3
#define _CM2PCH_PCH_LENGTH                                  0x3
#define _CM2PCH_PCH_MASK                                    0x7
#define _CM2PCH_PCH0_POSN                                   0x0
#define _CM2PCH_PCH0_POSITION                               0x0
#define _CM2PCH_PCH0_SIZE                                   0x1
#define _CM2PCH_PCH0_LENGTH                                 0x1
#define _CM2PCH_PCH0_MASK                                   0x1
#define _CM2PCH_PCH1_POSN                                   0x1
#define _CM2PCH_PCH1_POSITION                               0x1
#define _CM2PCH_PCH1_SIZE                                   0x1
#define _CM2PCH_PCH1_LENGTH                                 0x1
#define _CM2PCH_PCH1_MASK                                   0x2
#define _CM2PCH_PCH2_POSN                                   0x2
#define _CM2PCH_PCH2_POSITION                               0x2
#define _CM2PCH_PCH2_SIZE                                   0x1
#define _CM2PCH_PCH2_LENGTH                                 0x1
#define _CM2PCH_PCH2_MASK                                   0x4
#define _CM2PCH_C2PCH0_POSN                                 0x0
#define _CM2PCH_C2PCH0_POSITION                             0x0
#define _CM2PCH_C2PCH0_SIZE                                 0x1
#define _CM2PCH_C2PCH0_LENGTH                               0x1
#define _CM2PCH_C2PCH0_MASK                                 0x1
#define _CM2PCH_C2PCH1_POSN                                 0x1
#define _CM2PCH_C2PCH1_POSITION                             0x1
#define _CM2PCH_C2PCH1_SIZE                                 0x1
#define _CM2PCH_C2PCH1_LENGTH                               0x1
#define _CM2PCH_C2PCH1_MASK                                 0x2
#define _CM2PCH_C2PCH2_POSN                                 0x2
#define _CM2PCH_C2PCH2_POSITION                             0x2
#define _CM2PCH_C2PCH2_SIZE                                 0x1
#define _CM2PCH_C2PCH2_LENGTH                               0x1
#define _CM2PCH_C2PCH2_MASK                                 0x4

// Register: CMOUT
#define CMOUT CMOUT
extern volatile unsigned char           CMOUT               __at(0x81F);
#ifndef _LIB_BUILD
asm("CMOUT equ 081Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1OUT                  :1;
        unsigned C2OUT                  :1;
    };
} CMOUTbits_t;
extern volatile CMOUTbits_t CMOUTbits __at(0x81F);
// bitfield macros
#define _CMOUT_C1OUT_POSN                                   0x0
#define _CMOUT_C1OUT_POSITION                               0x0
#define _CMOUT_C1OUT_SIZE                                   0x1
#define _CMOUT_C1OUT_LENGTH                                 0x1
#define _CMOUT_C1OUT_MASK                                   0x1
#define _CMOUT_C2OUT_POSN                                   0x1
#define _CMOUT_C2OUT_POSITION                               0x1
#define _CMOUT_C2OUT_SIZE                                   0x1
#define _CMOUT_C2OUT_LENGTH                                 0x1
#define _CMOUT_C2OUT_MASK                                   0x2

// Register: PWM1DC
#define PWM1DC PWM1DC
extern volatile unsigned short          PWM1DC              __at(0x820);
#ifndef _LIB_BUILD
asm("PWM1DC equ 0820h");
#endif

// Register: PWM1DCL
#define PWM1DCL PWM1DCL
extern volatile unsigned char           PWM1DCL             __at(0x820);
#ifndef _LIB_BUILD
asm("PWM1DCL equ 0820h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned DCL                    :2;
    };
} PWM1DCLbits_t;
extern volatile PWM1DCLbits_t PWM1DCLbits __at(0x820);
// bitfield macros
#define _PWM1DCL_DCL_POSN                                   0x6
#define _PWM1DCL_DCL_POSITION                               0x6
#define _PWM1DCL_DCL_SIZE                                   0x2
#define _PWM1DCL_DCL_LENGTH                                 0x2
#define _PWM1DCL_DCL_MASK                                   0xC0

// Register: PWM1DCH
#define PWM1DCH PWM1DCH
extern volatile unsigned char           PWM1DCH             __at(0x821);
#ifndef _LIB_BUILD
asm("PWM1DCH equ 0821h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DCH                    :8;
    };
} PWM1DCHbits_t;
extern volatile PWM1DCHbits_t PWM1DCHbits __at(0x821);
// bitfield macros
#define _PWM1DCH_DCH_POSN                                   0x0
#define _PWM1DCH_DCH_POSITION                               0x0
#define _PWM1DCH_DCH_SIZE                                   0x8
#define _PWM1DCH_DCH_LENGTH                                 0x8
#define _PWM1DCH_DCH_MASK                                   0xFF

// Register: PWM1CON
#define PWM1CON PWM1CON
extern volatile unsigned char           PWM1CON             __at(0x822);
#ifndef _LIB_BUILD
asm("PWM1CON equ 0822h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM1POL                :1;
        unsigned PWM1OUT                :1;
        unsigned                        :1;
        unsigned PWM1EN                 :1;
    };
} PWM1CONbits_t;
extern volatile PWM1CONbits_t PWM1CONbits __at(0x822);
// bitfield macros
#define _PWM1CON_POL_POSN                                   0x4
#define _PWM1CON_POL_POSITION                               0x4
#define _PWM1CON_POL_SIZE                                   0x1
#define _PWM1CON_POL_LENGTH                                 0x1
#define _PWM1CON_POL_MASK                                   0x10
#define _PWM1CON_OUT_POSN                                   0x5
#define _PWM1CON_OUT_POSITION                               0x5
#define _PWM1CON_OUT_SIZE                                   0x1
#define _PWM1CON_OUT_LENGTH                                 0x1
#define _PWM1CON_OUT_MASK                                   0x20
#define _PWM1CON_EN_POSN                                    0x7
#define _PWM1CON_EN_POSITION                                0x7
#define _PWM1CON_EN_SIZE                                    0x1
#define _PWM1CON_EN_LENGTH                                  0x1
#define _PWM1CON_EN_MASK                                    0x80
#define _PWM1CON_PWM1POL_POSN                               0x4
#define _PWM1CON_PWM1POL_POSITION                           0x4
#define _PWM1CON_PWM1POL_SIZE                               0x1
#define _PWM1CON_PWM1POL_LENGTH                             0x1
#define _PWM1CON_PWM1POL_MASK                               0x10
#define _PWM1CON_PWM1OUT_POSN                               0x5
#define _PWM1CON_PWM1OUT_POSITION                           0x5
#define _PWM1CON_PWM1OUT_SIZE                               0x1
#define _PWM1CON_PWM1OUT_LENGTH                             0x1
#define _PWM1CON_PWM1OUT_MASK                               0x20
#define _PWM1CON_PWM1EN_POSN                                0x7
#define _PWM1CON_PWM1EN_POSITION                            0x7
#define _PWM1CON_PWM1EN_SIZE                                0x1
#define _PWM1CON_PWM1EN_LENGTH                              0x1
#define _PWM1CON_PWM1EN_MASK                                0x80

// Register: PWM2DC
#define PWM2DC PWM2DC
extern volatile unsigned short          PWM2DC              __at(0x823);
#ifndef _LIB_BUILD
asm("PWM2DC equ 0823h");
#endif

// Register: PWM2DCL
#define PWM2DCL PWM2DCL
extern volatile unsigned char           PWM2DCL             __at(0x823);
#ifndef _LIB_BUILD
asm("PWM2DCL equ 0823h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned DCL                    :2;
    };
} PWM2DCLbits_t;
extern volatile PWM2DCLbits_t PWM2DCLbits __at(0x823);
// bitfield macros
#define _PWM2DCL_DCL_POSN                                   0x6
#define _PWM2DCL_DCL_POSITION                               0x6
#define _PWM2DCL_DCL_SIZE                                   0x2
#define _PWM2DCL_DCL_LENGTH                                 0x2
#define _PWM2DCL_DCL_MASK                                   0xC0

// Register: PWM2DCH
#define PWM2DCH PWM2DCH
extern volatile unsigned char           PWM2DCH             __at(0x824);
#ifndef _LIB_BUILD
asm("PWM2DCH equ 0824h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DCH                    :8;
    };
} PWM2DCHbits_t;
extern volatile PWM2DCHbits_t PWM2DCHbits __at(0x824);
// bitfield macros
#define _PWM2DCH_DCH_POSN                                   0x0
#define _PWM2DCH_DCH_POSITION                               0x0
#define _PWM2DCH_DCH_SIZE                                   0x8
#define _PWM2DCH_DCH_LENGTH                                 0x8
#define _PWM2DCH_DCH_MASK                                   0xFF

// Register: PWM2CON
#define PWM2CON PWM2CON
extern volatile unsigned char           PWM2CON             __at(0x825);
#ifndef _LIB_BUILD
asm("PWM2CON equ 0825h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :4;
        unsigned POL                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :4;
        unsigned PWM2POL                :1;
        unsigned PWM2OUT                :1;
        unsigned                        :1;
        unsigned PWM2EN                 :1;
    };
} PWM2CONbits_t;
extern volatile PWM2CONbits_t PWM2CONbits __at(0x825);
// bitfield macros
#define _PWM2CON_POL_POSN                                   0x4
#define _PWM2CON_POL_POSITION                               0x4
#define _PWM2CON_POL_SIZE                                   0x1
#define _PWM2CON_POL_LENGTH                                 0x1
#define _PWM2CON_POL_MASK                                   0x10
#define _PWM2CON_OUT_POSN                                   0x5
#define _PWM2CON_OUT_POSITION                               0x5
#define _PWM2CON_OUT_SIZE                                   0x1
#define _PWM2CON_OUT_LENGTH                                 0x1
#define _PWM2CON_OUT_MASK                                   0x20
#define _PWM2CON_EN_POSN                                    0x7
#define _PWM2CON_EN_POSITION                                0x7
#define _PWM2CON_EN_SIZE                                    0x1
#define _PWM2CON_EN_LENGTH                                  0x1
#define _PWM2CON_EN_MASK                                    0x80
#define _PWM2CON_PWM2POL_POSN                               0x4
#define _PWM2CON_PWM2POL_POSITION                           0x4
#define _PWM2CON_PWM2POL_SIZE                               0x1
#define _PWM2CON_PWM2POL_LENGTH                             0x1
#define _PWM2CON_PWM2POL_MASK                               0x10
#define _PWM2CON_PWM2OUT_POSN                               0x5
#define _PWM2CON_PWM2OUT_POSITION                           0x5
#define _PWM2CON_PWM2OUT_SIZE                               0x1
#define _PWM2CON_PWM2OUT_LENGTH                             0x1
#define _PWM2CON_PWM2OUT_MASK                               0x20
#define _PWM2CON_PWM2EN_POSN                                0x7
#define _PWM2CON_PWM2EN_POSITION                            0x7
#define _PWM2CON_PWM2EN_SIZE                                0x1
#define _PWM2CON_PWM2EN_LENGTH                              0x1
#define _PWM2CON_PWM2EN_MASK                                0x80

// Register: PWMTMRS0
#define PWMTMRS0 PWMTMRS0
extern volatile unsigned char           PWMTMRS0            __at(0x82F);
#ifndef _LIB_BUILD
asm("PWMTMRS0 equ 082Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P1TSEL                 :2;
        unsigned P2TSEL                 :2;
    };
} PWMTMRS0bits_t;
extern volatile PWMTMRS0bits_t PWMTMRS0bits __at(0x82F);
// bitfield macros
#define _PWMTMRS0_P1TSEL_POSN                               0x0
#define _PWMTMRS0_P1TSEL_POSITION                           0x0
#define _PWMTMRS0_P1TSEL_SIZE                               0x2
#define _PWMTMRS0_P1TSEL_LENGTH                             0x2
#define _PWMTMRS0_P1TSEL_MASK                               0x3
#define _PWMTMRS0_P2TSEL_POSN                               0x2
#define _PWMTMRS0_P2TSEL_POSITION                           0x2
#define _PWMTMRS0_P2TSEL_SIZE                               0x2
#define _PWMTMRS0_P2TSEL_LENGTH                             0x2
#define _PWMTMRS0_P2TSEL_MASK                               0xC

// Register: DAC1CON
#define DAC1CON DAC1CON
extern volatile unsigned char           DAC1CON             __at(0x88C);
#ifndef _LIB_BUILD
asm("DAC1CON equ 088Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned PSS                    :2;
        unsigned OE                     :2;
        unsigned REFRNG                 :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned PSS0                   :1;
        unsigned PSS1                   :1;
        unsigned OE0                    :1;
        unsigned OE1                    :1;
    };
} DAC1CONbits_t;
extern volatile DAC1CONbits_t DAC1CONbits __at(0x88C);
// bitfield macros
#define _DAC1CON_PSS_POSN                                   0x2
#define _DAC1CON_PSS_POSITION                               0x2
#define _DAC1CON_PSS_SIZE                                   0x2
#define _DAC1CON_PSS_LENGTH                                 0x2
#define _DAC1CON_PSS_MASK                                   0xC
#define _DAC1CON_OE_POSN                                    0x4
#define _DAC1CON_OE_POSITION                                0x4
#define _DAC1CON_OE_SIZE                                    0x2
#define _DAC1CON_OE_LENGTH                                  0x2
#define _DAC1CON_OE_MASK                                    0x30
#define _DAC1CON_REFRNG_POSN                                0x6
#define _DAC1CON_REFRNG_POSITION                            0x6
#define _DAC1CON_REFRNG_SIZE                                0x1
#define _DAC1CON_REFRNG_LENGTH                              0x1
#define _DAC1CON_REFRNG_MASK                                0x40
#define _DAC1CON_EN_POSN                                    0x7
#define _DAC1CON_EN_POSITION                                0x7
#define _DAC1CON_EN_SIZE                                    0x1
#define _DAC1CON_EN_LENGTH                                  0x1
#define _DAC1CON_EN_MASK                                    0x80
#define _DAC1CON_PSS0_POSN                                  0x2
#define _DAC1CON_PSS0_POSITION                              0x2
#define _DAC1CON_PSS0_SIZE                                  0x1
#define _DAC1CON_PSS0_LENGTH                                0x1
#define _DAC1CON_PSS0_MASK                                  0x4
#define _DAC1CON_PSS1_POSN                                  0x3
#define _DAC1CON_PSS1_POSITION                              0x3
#define _DAC1CON_PSS1_SIZE                                  0x1
#define _DAC1CON_PSS1_LENGTH                                0x1
#define _DAC1CON_PSS1_MASK                                  0x8
#define _DAC1CON_OE0_POSN                                   0x4
#define _DAC1CON_OE0_POSITION                               0x4
#define _DAC1CON_OE0_SIZE                                   0x1
#define _DAC1CON_OE0_LENGTH                                 0x1
#define _DAC1CON_OE0_MASK                                   0x10
#define _DAC1CON_OE1_POSN                                   0x5
#define _DAC1CON_OE1_POSITION                               0x5
#define _DAC1CON_OE1_SIZE                                   0x1
#define _DAC1CON_OE1_LENGTH                                 0x1
#define _DAC1CON_OE1_MASK                                   0x20

// Register: DAC1DATL
#define DAC1DATL DAC1DATL
extern volatile unsigned char           DAC1DATL            __at(0x88D);
#ifndef _LIB_BUILD
asm("DAC1DATL equ 088Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DAC1R                  :8;
    };
    struct {
        unsigned DAT                    :8;
    };
} DAC1DATLbits_t;
extern volatile DAC1DATLbits_t DAC1DATLbits __at(0x88D);
// bitfield macros
#define _DAC1DATL_DAC1R_POSN                                0x0
#define _DAC1DATL_DAC1R_POSITION                            0x0
#define _DAC1DATL_DAC1R_SIZE                                0x8
#define _DAC1DATL_DAC1R_LENGTH                              0x8
#define _DAC1DATL_DAC1R_MASK                                0xFF
#define _DAC1DATL_DAT_POSN                                  0x0
#define _DAC1DATL_DAT_POSITION                              0x0
#define _DAC1DATL_DAT_SIZE                                  0x8
#define _DAC1DATL_DAT_LENGTH                                0x8
#define _DAC1DATL_DAT_MASK                                  0xFF

// Register: NVMADR
#define NVMADR NVMADR
extern volatile unsigned short          NVMADR              __at(0x1C8C);
#ifndef _LIB_BUILD
asm("NVMADR equ 01C8Ch");
#endif

// Register: NVMADRL
#define NVMADRL NVMADRL
extern volatile unsigned char           NVMADRL             __at(0x1C8C);
#ifndef _LIB_BUILD
asm("NVMADRL equ 01C8Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMADR                 :8;
    };
    struct {
        unsigned NVMADR0                :1;
        unsigned NVMADR1                :1;
        unsigned NVMADR2                :1;
        unsigned NVMADR3                :1;
        unsigned NVMADR4                :1;
        unsigned NVMADR5                :1;
        unsigned NVMADR6                :1;
        unsigned NVMADR7                :1;
    };
} NVMADRLbits_t;
extern volatile NVMADRLbits_t NVMADRLbits __at(0x1C8C);
// bitfield macros
#define _NVMADRL_NVMADR_POSN                                0x0
#define _NVMADRL_NVMADR_POSITION                            0x0
#define _NVMADRL_NVMADR_SIZE                                0x8
#define _NVMADRL_NVMADR_LENGTH                              0x8
#define _NVMADRL_NVMADR_MASK                                0xFF
#define _NVMADRL_NVMADR0_POSN                               0x0
#define _NVMADRL_NVMADR0_POSITION                           0x0
#define _NVMADRL_NVMADR0_SIZE                               0x1
#define _NVMADRL_NVMADR0_LENGTH                             0x1
#define _NVMADRL_NVMADR0_MASK                               0x1
#define _NVMADRL_NVMADR1_POSN                               0x1
#define _NVMADRL_NVMADR1_POSITION                           0x1
#define _NVMADRL_NVMADR1_SIZE                               0x1
#define _NVMADRL_NVMADR1_LENGTH                             0x1
#define _NVMADRL_NVMADR1_MASK                               0x2
#define _NVMADRL_NVMADR2_POSN                               0x2
#define _NVMADRL_NVMADR2_POSITION                           0x2
#define _NVMADRL_NVMADR2_SIZE                               0x1
#define _NVMADRL_NVMADR2_LENGTH                             0x1
#define _NVMADRL_NVMADR2_MASK                               0x4
#define _NVMADRL_NVMADR3_POSN                               0x3
#define _NVMADRL_NVMADR3_POSITION                           0x3
#define _NVMADRL_NVMADR3_SIZE                               0x1
#define _NVMADRL_NVMADR3_LENGTH                             0x1
#define _NVMADRL_NVMADR3_MASK                               0x8
#define _NVMADRL_NVMADR4_POSN                               0x4
#define _NVMADRL_NVMADR4_POSITION                           0x4
#define _NVMADRL_NVMADR4_SIZE                               0x1
#define _NVMADRL_NVMADR4_LENGTH                             0x1
#define _NVMADRL_NVMADR4_MASK                               0x10
#define _NVMADRL_NVMADR5_POSN                               0x5
#define _NVMADRL_NVMADR5_POSITION                           0x5
#define _NVMADRL_NVMADR5_SIZE                               0x1
#define _NVMADRL_NVMADR5_LENGTH                             0x1
#define _NVMADRL_NVMADR5_MASK                               0x20
#define _NVMADRL_NVMADR6_POSN                               0x6
#define _NVMADRL_NVMADR6_POSITION                           0x6
#define _NVMADRL_NVMADR6_SIZE                               0x1
#define _NVMADRL_NVMADR6_LENGTH                             0x1
#define _NVMADRL_NVMADR6_MASK                               0x40
#define _NVMADRL_NVMADR7_POSN                               0x7
#define _NVMADRL_NVMADR7_POSITION                           0x7
#define _NVMADRL_NVMADR7_SIZE                               0x1
#define _NVMADRL_NVMADR7_LENGTH                             0x1
#define _NVMADRL_NVMADR7_MASK                               0x80

// Register: NVMADRH
#define NVMADRH NVMADRH
extern volatile unsigned char           NVMADRH             __at(0x1C8D);
#ifndef _LIB_BUILD
asm("NVMADRH equ 01C8Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMADR                 :7;
    };
    struct {
        unsigned NVMADR8                :1;
        unsigned NVMADR9                :1;
        unsigned NVMADR10               :1;
        unsigned NVMADR11               :1;
        unsigned NVMADR12               :1;
        unsigned NVMADR13               :1;
        unsigned NVMADR14               :1;
    };
} NVMADRHbits_t;
extern volatile NVMADRHbits_t NVMADRHbits __at(0x1C8D);
// bitfield macros
#define _NVMADRH_NVMADR_POSN                                0x0
#define _NVMADRH_NVMADR_POSITION                            0x0
#define _NVMADRH_NVMADR_SIZE                                0x7
#define _NVMADRH_NVMADR_LENGTH                              0x7
#define _NVMADRH_NVMADR_MASK                                0x7F
#define _NVMADRH_NVMADR8_POSN                               0x0
#define _NVMADRH_NVMADR8_POSITION                           0x0
#define _NVMADRH_NVMADR8_SIZE                               0x1
#define _NVMADRH_NVMADR8_LENGTH                             0x1
#define _NVMADRH_NVMADR8_MASK                               0x1
#define _NVMADRH_NVMADR9_POSN                               0x1
#define _NVMADRH_NVMADR9_POSITION                           0x1
#define _NVMADRH_NVMADR9_SIZE                               0x1
#define _NVMADRH_NVMADR9_LENGTH                             0x1
#define _NVMADRH_NVMADR9_MASK                               0x2
#define _NVMADRH_NVMADR10_POSN                              0x2
#define _NVMADRH_NVMADR10_POSITION                          0x2
#define _NVMADRH_NVMADR10_SIZE                              0x1
#define _NVMADRH_NVMADR10_LENGTH                            0x1
#define _NVMADRH_NVMADR10_MASK                              0x4
#define _NVMADRH_NVMADR11_POSN                              0x3
#define _NVMADRH_NVMADR11_POSITION                          0x3
#define _NVMADRH_NVMADR11_SIZE                              0x1
#define _NVMADRH_NVMADR11_LENGTH                            0x1
#define _NVMADRH_NVMADR11_MASK                              0x8
#define _NVMADRH_NVMADR12_POSN                              0x4
#define _NVMADRH_NVMADR12_POSITION                          0x4
#define _NVMADRH_NVMADR12_SIZE                              0x1
#define _NVMADRH_NVMADR12_LENGTH                            0x1
#define _NVMADRH_NVMADR12_MASK                              0x10
#define _NVMADRH_NVMADR13_POSN                              0x5
#define _NVMADRH_NVMADR13_POSITION                          0x5
#define _NVMADRH_NVMADR13_SIZE                              0x1
#define _NVMADRH_NVMADR13_LENGTH                            0x1
#define _NVMADRH_NVMADR13_MASK                              0x20
#define _NVMADRH_NVMADR14_POSN                              0x6
#define _NVMADRH_NVMADR14_POSITION                          0x6
#define _NVMADRH_NVMADR14_SIZE                              0x1
#define _NVMADRH_NVMADR14_LENGTH                            0x1
#define _NVMADRH_NVMADR14_MASK                              0x40

// Register: NVMDAT
#define NVMDAT NVMDAT
extern volatile unsigned short          NVMDAT              __at(0x1C8E);
#ifndef _LIB_BUILD
asm("NVMDAT equ 01C8Eh");
#endif

// Register: NVMDATL
#define NVMDATL NVMDATL
extern volatile unsigned char           NVMDATL             __at(0x1C8E);
#ifndef _LIB_BUILD
asm("NVMDATL equ 01C8Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMDAT                 :8;
    };
    struct {
        unsigned NVMDAT0                :1;
        unsigned NVMDAT1                :1;
        unsigned NVMDAT2                :1;
        unsigned NVMDAT3                :1;
        unsigned NVMDAT4                :1;
        unsigned NVMDAT5                :1;
        unsigned NVMDAT6                :1;
        unsigned NVMDAT7                :1;
    };
} NVMDATLbits_t;
extern volatile NVMDATLbits_t NVMDATLbits __at(0x1C8E);
// bitfield macros
#define _NVMDATL_NVMDAT_POSN                                0x0
#define _NVMDATL_NVMDAT_POSITION                            0x0
#define _NVMDATL_NVMDAT_SIZE                                0x8
#define _NVMDATL_NVMDAT_LENGTH                              0x8
#define _NVMDATL_NVMDAT_MASK                                0xFF
#define _NVMDATL_NVMDAT0_POSN                               0x0
#define _NVMDATL_NVMDAT0_POSITION                           0x0
#define _NVMDATL_NVMDAT0_SIZE                               0x1
#define _NVMDATL_NVMDAT0_LENGTH                             0x1
#define _NVMDATL_NVMDAT0_MASK                               0x1
#define _NVMDATL_NVMDAT1_POSN                               0x1
#define _NVMDATL_NVMDAT1_POSITION                           0x1
#define _NVMDATL_NVMDAT1_SIZE                               0x1
#define _NVMDATL_NVMDAT1_LENGTH                             0x1
#define _NVMDATL_NVMDAT1_MASK                               0x2
#define _NVMDATL_NVMDAT2_POSN                               0x2
#define _NVMDATL_NVMDAT2_POSITION                           0x2
#define _NVMDATL_NVMDAT2_SIZE                               0x1
#define _NVMDATL_NVMDAT2_LENGTH                             0x1
#define _NVMDATL_NVMDAT2_MASK                               0x4
#define _NVMDATL_NVMDAT3_POSN                               0x3
#define _NVMDATL_NVMDAT3_POSITION                           0x3
#define _NVMDATL_NVMDAT3_SIZE                               0x1
#define _NVMDATL_NVMDAT3_LENGTH                             0x1
#define _NVMDATL_NVMDAT3_MASK                               0x8
#define _NVMDATL_NVMDAT4_POSN                               0x4
#define _NVMDATL_NVMDAT4_POSITION                           0x4
#define _NVMDATL_NVMDAT4_SIZE                               0x1
#define _NVMDATL_NVMDAT4_LENGTH                             0x1
#define _NVMDATL_NVMDAT4_MASK                               0x10
#define _NVMDATL_NVMDAT5_POSN                               0x5
#define _NVMDATL_NVMDAT5_POSITION                           0x5
#define _NVMDATL_NVMDAT5_SIZE                               0x1
#define _NVMDATL_NVMDAT5_LENGTH                             0x1
#define _NVMDATL_NVMDAT5_MASK                               0x20
#define _NVMDATL_NVMDAT6_POSN                               0x6
#define _NVMDATL_NVMDAT6_POSITION                           0x6
#define _NVMDATL_NVMDAT6_SIZE                               0x1
#define _NVMDATL_NVMDAT6_LENGTH                             0x1
#define _NVMDATL_NVMDAT6_MASK                               0x40
#define _NVMDATL_NVMDAT7_POSN                               0x7
#define _NVMDATL_NVMDAT7_POSITION                           0x7
#define _NVMDATL_NVMDAT7_SIZE                               0x1
#define _NVMDATL_NVMDAT7_LENGTH                             0x1
#define _NVMDATL_NVMDAT7_MASK                               0x80

// Register: NVMDATH
#define NVMDATH NVMDATH
extern volatile unsigned char           NVMDATH             __at(0x1C8F);
#ifndef _LIB_BUILD
asm("NVMDATH equ 01C8Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMDAT                 :6;
    };
    struct {
        unsigned NVMDAT8                :1;
        unsigned NVMDAT9                :1;
        unsigned NVMDAT10               :1;
        unsigned NVMDAT11               :1;
        unsigned NVMDAT12               :1;
        unsigned NVMDAT13               :1;
    };
} NVMDATHbits_t;
extern volatile NVMDATHbits_t NVMDATHbits __at(0x1C8F);
// bitfield macros
#define _NVMDATH_NVMDAT_POSN                                0x0
#define _NVMDATH_NVMDAT_POSITION                            0x0
#define _NVMDATH_NVMDAT_SIZE                                0x6
#define _NVMDATH_NVMDAT_LENGTH                              0x6
#define _NVMDATH_NVMDAT_MASK                                0x3F
#define _NVMDATH_NVMDAT8_POSN                               0x0
#define _NVMDATH_NVMDAT8_POSITION                           0x0
#define _NVMDATH_NVMDAT8_SIZE                               0x1
#define _NVMDATH_NVMDAT8_LENGTH                             0x1
#define _NVMDATH_NVMDAT8_MASK                               0x1
#define _NVMDATH_NVMDAT9_POSN                               0x1
#define _NVMDATH_NVMDAT9_POSITION                           0x1
#define _NVMDATH_NVMDAT9_SIZE                               0x1
#define _NVMDATH_NVMDAT9_LENGTH                             0x1
#define _NVMDATH_NVMDAT9_MASK                               0x2
#define _NVMDATH_NVMDAT10_POSN                              0x2
#define _NVMDATH_NVMDAT10_POSITION                          0x2
#define _NVMDATH_NVMDAT10_SIZE                              0x1
#define _NVMDATH_NVMDAT10_LENGTH                            0x1
#define _NVMDATH_NVMDAT10_MASK                              0x4
#define _NVMDATH_NVMDAT11_POSN                              0x3
#define _NVMDATH_NVMDAT11_POSITION                          0x3
#define _NVMDATH_NVMDAT11_SIZE                              0x1
#define _NVMDATH_NVMDAT11_LENGTH                            0x1
#define _NVMDATH_NVMDAT11_MASK                              0x8
#define _NVMDATH_NVMDAT12_POSN                              0x4
#define _NVMDATH_NVMDAT12_POSITION                          0x4
#define _NVMDATH_NVMDAT12_SIZE                              0x1
#define _NVMDATH_NVMDAT12_LENGTH                            0x1
#define _NVMDATH_NVMDAT12_MASK                              0x10
#define _NVMDATH_NVMDAT13_POSN                              0x5
#define _NVMDATH_NVMDAT13_POSITION                          0x5
#define _NVMDATH_NVMDAT13_SIZE                              0x1
#define _NVMDATH_NVMDAT13_LENGTH                            0x1
#define _NVMDATH_NVMDAT13_MASK                              0x20

// Register: NVMCON1
#define NVMCON1 NVMCON1
extern volatile unsigned char           NVMCON1             __at(0x1C90);
#ifndef _LIB_BUILD
asm("NVMCON1 equ 01C90h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RD                     :1;
        unsigned WR                     :1;
        unsigned WREN                   :1;
        unsigned WRERR                  :1;
        unsigned FREE                   :1;
        unsigned LWLO                   :1;
        unsigned NVMREGS                :1;
    };
} NVMCON1bits_t;
extern volatile NVMCON1bits_t NVMCON1bits __at(0x1C90);
// bitfield macros
#define _NVMCON1_RD_POSN                                    0x0
#define _NVMCON1_RD_POSITION                                0x0
#define _NVMCON1_RD_SIZE                                    0x1
#define _NVMCON1_RD_LENGTH                                  0x1
#define _NVMCON1_RD_MASK                                    0x1
#define _NVMCON1_WR_POSN                                    0x1
#define _NVMCON1_WR_POSITION                                0x1
#define _NVMCON1_WR_SIZE                                    0x1
#define _NVMCON1_WR_LENGTH                                  0x1
#define _NVMCON1_WR_MASK                                    0x2
#define _NVMCON1_WREN_POSN                                  0x2
#define _NVMCON1_WREN_POSITION                              0x2
#define _NVMCON1_WREN_SIZE                                  0x1
#define _NVMCON1_WREN_LENGTH                                0x1
#define _NVMCON1_WREN_MASK                                  0x4
#define _NVMCON1_WRERR_POSN                                 0x3
#define _NVMCON1_WRERR_POSITION                             0x3
#define _NVMCON1_WRERR_SIZE                                 0x1
#define _NVMCON1_WRERR_LENGTH                               0x1
#define _NVMCON1_WRERR_MASK                                 0x8
#define _NVMCON1_FREE_POSN                                  0x4
#define _NVMCON1_FREE_POSITION                              0x4
#define _NVMCON1_FREE_SIZE                                  0x1
#define _NVMCON1_FREE_LENGTH                                0x1
#define _NVMCON1_FREE_MASK                                  0x10
#define _NVMCON1_LWLO_POSN                                  0x5
#define _NVMCON1_LWLO_POSITION                              0x5
#define _NVMCON1_LWLO_SIZE                                  0x1
#define _NVMCON1_LWLO_LENGTH                                0x1
#define _NVMCON1_LWLO_MASK                                  0x20
#define _NVMCON1_NVMREGS_POSN                               0x6
#define _NVMCON1_NVMREGS_POSITION                           0x6
#define _NVMCON1_NVMREGS_SIZE                               0x1
#define _NVMCON1_NVMREGS_LENGTH                             0x1
#define _NVMCON1_NVMREGS_MASK                               0x40

// Register: NVMCON2
#define NVMCON2 NVMCON2
extern volatile unsigned char           NVMCON2             __at(0x1C91);
#ifndef _LIB_BUILD
asm("NVMCON2 equ 01C91h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMCON2                :8;
    };
} NVMCON2bits_t;
extern volatile NVMCON2bits_t NVMCON2bits __at(0x1C91);
// bitfield macros
#define _NVMCON2_NVMCON2_POSN                               0x0
#define _NVMCON2_NVMCON2_POSITION                           0x0
#define _NVMCON2_NVMCON2_SIZE                               0x8
#define _NVMCON2_NVMCON2_LENGTH                             0x8
#define _NVMCON2_NVMCON2_MASK                               0xFF

// Register: SCANCON0
#define SCANCON0 SCANCON0
extern volatile unsigned char           SCANCON0            __at(0x1C92);
#ifndef _LIB_BUILD
asm("SCANCON0 equ 01C92h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MD                     :2;
        unsigned                        :1;
        unsigned INTM                   :1;
        unsigned DABORT                 :1;
        unsigned BUSY                   :1;
        unsigned SGO                    :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MD0                    :1;
        unsigned MD1                    :1;
    };
} SCANCON0bits_t;
extern volatile SCANCON0bits_t SCANCON0bits __at(0x1C92);
// bitfield macros
#define _SCANCON0_MD_POSN                                   0x0
#define _SCANCON0_MD_POSITION                               0x0
#define _SCANCON0_MD_SIZE                                   0x2
#define _SCANCON0_MD_LENGTH                                 0x2
#define _SCANCON0_MD_MASK                                   0x3
#define _SCANCON0_INTM_POSN                                 0x3
#define _SCANCON0_INTM_POSITION                             0x3
#define _SCANCON0_INTM_SIZE                                 0x1
#define _SCANCON0_INTM_LENGTH                               0x1
#define _SCANCON0_INTM_MASK                                 0x8
#define _SCANCON0_DABORT_POSN                               0x4
#define _SCANCON0_DABORT_POSITION                           0x4
#define _SCANCON0_DABORT_SIZE                               0x1
#define _SCANCON0_DABORT_LENGTH                             0x1
#define _SCANCON0_DABORT_MASK                               0x10
#define _SCANCON0_BUSY_POSN                                 0x5
#define _SCANCON0_BUSY_POSITION                             0x5
#define _SCANCON0_BUSY_SIZE                                 0x1
#define _SCANCON0_BUSY_LENGTH                               0x1
#define _SCANCON0_BUSY_MASK                                 0x20
#define _SCANCON0_SGO_POSN                                  0x6
#define _SCANCON0_SGO_POSITION                              0x6
#define _SCANCON0_SGO_SIZE                                  0x1
#define _SCANCON0_SGO_LENGTH                                0x1
#define _SCANCON0_SGO_MASK                                  0x40
#define _SCANCON0_EN_POSN                                   0x7
#define _SCANCON0_EN_POSITION                               0x7
#define _SCANCON0_EN_SIZE                                   0x1
#define _SCANCON0_EN_LENGTH                                 0x1
#define _SCANCON0_EN_MASK                                   0x80
#define _SCANCON0_MD0_POSN                                  0x0
#define _SCANCON0_MD0_POSITION                              0x0
#define _SCANCON0_MD0_SIZE                                  0x1
#define _SCANCON0_MD0_LENGTH                                0x1
#define _SCANCON0_MD0_MASK                                  0x1
#define _SCANCON0_MD1_POSN                                  0x1
#define _SCANCON0_MD1_POSITION                              0x1
#define _SCANCON0_MD1_SIZE                                  0x1
#define _SCANCON0_MD1_LENGTH                                0x1
#define _SCANCON0_MD1_MASK                                  0x2

// Register: SCANLADR
#define SCANLADR SCANLADR
extern volatile unsigned short          SCANLADR            __at(0x1C93);
#ifndef _LIB_BUILD
asm("SCANLADR equ 01C93h");
#endif

// Register: SCANLADRL
#define SCANLADRL SCANLADRL
extern volatile unsigned char           SCANLADRL           __at(0x1C93);
#ifndef _LIB_BUILD
asm("SCANLADRL equ 01C93h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCANLADRL              :8;
    };
} SCANLADRLbits_t;
extern volatile SCANLADRLbits_t SCANLADRLbits __at(0x1C93);
// bitfield macros
#define _SCANLADRL_SCANLADRL_POSN                           0x0
#define _SCANLADRL_SCANLADRL_POSITION                       0x0
#define _SCANLADRL_SCANLADRL_SIZE                           0x8
#define _SCANLADRL_SCANLADRL_LENGTH                         0x8
#define _SCANLADRL_SCANLADRL_MASK                           0xFF

// Register: SCANLADRH
#define SCANLADRH SCANLADRH
extern volatile unsigned char           SCANLADRH           __at(0x1C94);
#ifndef _LIB_BUILD
asm("SCANLADRH equ 01C94h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCANLADRH              :8;
    };
} SCANLADRHbits_t;
extern volatile SCANLADRHbits_t SCANLADRHbits __at(0x1C94);
// bitfield macros
#define _SCANLADRH_SCANLADRH_POSN                           0x0
#define _SCANLADRH_SCANLADRH_POSITION                       0x0
#define _SCANLADRH_SCANLADRH_SIZE                           0x8
#define _SCANLADRH_SCANLADRH_LENGTH                         0x8
#define _SCANLADRH_SCANLADRH_MASK                           0xFF

// Register: SCANHADR
#define SCANHADR SCANHADR
extern volatile unsigned short          SCANHADR            __at(0x1C96);
#ifndef _LIB_BUILD
asm("SCANHADR equ 01C96h");
#endif

// Register: SCANHADRL
#define SCANHADRL SCANHADRL
extern volatile unsigned char           SCANHADRL           __at(0x1C96);
#ifndef _LIB_BUILD
asm("SCANHADRL equ 01C96h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCANHADRL              :8;
    };
} SCANHADRLbits_t;
extern volatile SCANHADRLbits_t SCANHADRLbits __at(0x1C96);
// bitfield macros
#define _SCANHADRL_SCANHADRL_POSN                           0x0
#define _SCANHADRL_SCANHADRL_POSITION                       0x0
#define _SCANHADRL_SCANHADRL_SIZE                           0x8
#define _SCANHADRL_SCANHADRL_LENGTH                         0x8
#define _SCANHADRL_SCANHADRL_MASK                           0xFF

// Register: SCANHADRH
#define SCANHADRH SCANHADRH
extern volatile unsigned char           SCANHADRH           __at(0x1C97);
#ifndef _LIB_BUILD
asm("SCANHADRH equ 01C97h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCANHADRH              :8;
    };
} SCANHADRHbits_t;
extern volatile SCANHADRHbits_t SCANHADRHbits __at(0x1C97);
// bitfield macros
#define _SCANHADRH_SCANHADRH_POSN                           0x0
#define _SCANHADRH_SCANHADRH_POSITION                       0x0
#define _SCANHADRH_SCANHADRH_SIZE                           0x8
#define _SCANHADRH_SCANHADRH_LENGTH                         0x8
#define _SCANHADRH_SCANHADRH_MASK                           0xFF

// Register: SCANDPS
#define SCANDPS SCANDPS
extern volatile unsigned char           SCANDPS             __at(0x1C99);
#ifndef _LIB_BUILD
asm("SCANDPS equ 01C99h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DPS                    :1;
    };
} SCANDPSbits_t;
extern volatile SCANDPSbits_t SCANDPSbits __at(0x1C99);
// bitfield macros
#define _SCANDPS_DPS_POSN                                   0x0
#define _SCANDPS_DPS_POSITION                               0x0
#define _SCANDPS_DPS_SIZE                                   0x1
#define _SCANDPS_DPS_LENGTH                                 0x1
#define _SCANDPS_DPS_MASK                                   0x1

// Register: SCANTRIG
#define SCANTRIG SCANTRIG
extern volatile unsigned char           SCANTRIG            __at(0x1C9A);
#ifndef _LIB_BUILD
asm("SCANTRIG equ 01C9Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TSEL                   :4;
    };
} SCANTRIGbits_t;
extern volatile SCANTRIGbits_t SCANTRIGbits __at(0x1C9A);
// bitfield macros
#define _SCANTRIG_TSEL_POSN                                 0x0
#define _SCANTRIG_TSEL_POSITION                             0x0
#define _SCANTRIG_TSEL_SIZE                                 0x4
#define _SCANTRIG_TSEL_LENGTH                               0x4
#define _SCANTRIG_TSEL_MASK                                 0xF

// Register: CRCDATA
#define CRCDATA CRCDATA
extern volatile unsigned long           CRCDATA             __at(0x1C9D);
#ifndef _LIB_BUILD
asm("CRCDATA equ 01C9Dh");
#endif

// Register: CRCDATAL
#define CRCDATAL CRCDATAL
extern volatile unsigned char           CRCDATAL            __at(0x1C9D);
#ifndef _LIB_BUILD
asm("CRCDATAL equ 01C9Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DATA                   :8;
    };
    struct {
        unsigned DATA0                  :1;
        unsigned DATA1                  :1;
        unsigned DATA2                  :1;
        unsigned DATA3                  :1;
        unsigned DATA4                  :1;
        unsigned DATA5                  :1;
        unsigned DATA6                  :1;
        unsigned DATA7                  :1;
    };
} CRCDATALbits_t;
extern volatile CRCDATALbits_t CRCDATALbits __at(0x1C9D);
// bitfield macros
#define _CRCDATAL_DATA_POSN                                 0x0
#define _CRCDATAL_DATA_POSITION                             0x0
#define _CRCDATAL_DATA_SIZE                                 0x8
#define _CRCDATAL_DATA_LENGTH                               0x8
#define _CRCDATAL_DATA_MASK                                 0xFF
#define _CRCDATAL_DATA0_POSN                                0x0
#define _CRCDATAL_DATA0_POSITION                            0x0
#define _CRCDATAL_DATA0_SIZE                                0x1
#define _CRCDATAL_DATA0_LENGTH                              0x1
#define _CRCDATAL_DATA0_MASK                                0x1
#define _CRCDATAL_DATA1_POSN                                0x1
#define _CRCDATAL_DATA1_POSITION                            0x1
#define _CRCDATAL_DATA1_SIZE                                0x1
#define _CRCDATAL_DATA1_LENGTH                              0x1
#define _CRCDATAL_DATA1_MASK                                0x2
#define _CRCDATAL_DATA2_POSN                                0x2
#define _CRCDATAL_DATA2_POSITION                            0x2
#define _CRCDATAL_DATA2_SIZE                                0x1
#define _CRCDATAL_DATA2_LENGTH                              0x1
#define _CRCDATAL_DATA2_MASK                                0x4
#define _CRCDATAL_DATA3_POSN                                0x3
#define _CRCDATAL_DATA3_POSITION                            0x3
#define _CRCDATAL_DATA3_SIZE                                0x1
#define _CRCDATAL_DATA3_LENGTH                              0x1
#define _CRCDATAL_DATA3_MASK                                0x8
#define _CRCDATAL_DATA4_POSN                                0x4
#define _CRCDATAL_DATA4_POSITION                            0x4
#define _CRCDATAL_DATA4_SIZE                                0x1
#define _CRCDATAL_DATA4_LENGTH                              0x1
#define _CRCDATAL_DATA4_MASK                                0x10
#define _CRCDATAL_DATA5_POSN                                0x5
#define _CRCDATAL_DATA5_POSITION                            0x5
#define _CRCDATAL_DATA5_SIZE                                0x1
#define _CRCDATAL_DATA5_LENGTH                              0x1
#define _CRCDATAL_DATA5_MASK                                0x20
#define _CRCDATAL_DATA6_POSN                                0x6
#define _CRCDATAL_DATA6_POSITION                            0x6
#define _CRCDATAL_DATA6_SIZE                                0x1
#define _CRCDATAL_DATA6_LENGTH                              0x1
#define _CRCDATAL_DATA6_MASK                                0x40
#define _CRCDATAL_DATA7_POSN                                0x7
#define _CRCDATAL_DATA7_POSITION                            0x7
#define _CRCDATAL_DATA7_SIZE                                0x1
#define _CRCDATAL_DATA7_LENGTH                              0x1
#define _CRCDATAL_DATA7_MASK                                0x80

// Register: CRCDATAH
#define CRCDATAH CRCDATAH
extern volatile unsigned char           CRCDATAH            __at(0x1C9E);
#ifndef _LIB_BUILD
asm("CRCDATAH equ 01C9Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DATA                   :8;
    };
    struct {
        unsigned DATA8                  :1;
        unsigned DATA9                  :1;
        unsigned DATA10                 :1;
        unsigned DATA11                 :1;
        unsigned DATA12                 :1;
        unsigned DATA13                 :1;
        unsigned DATA14                 :1;
        unsigned DATA15                 :1;
    };
} CRCDATAHbits_t;
extern volatile CRCDATAHbits_t CRCDATAHbits __at(0x1C9E);
// bitfield macros
#define _CRCDATAH_DATA_POSN                                 0x0
#define _CRCDATAH_DATA_POSITION                             0x0
#define _CRCDATAH_DATA_SIZE                                 0x8
#define _CRCDATAH_DATA_LENGTH                               0x8
#define _CRCDATAH_DATA_MASK                                 0xFF
#define _CRCDATAH_DATA8_POSN                                0x0
#define _CRCDATAH_DATA8_POSITION                            0x0
#define _CRCDATAH_DATA8_SIZE                                0x1
#define _CRCDATAH_DATA8_LENGTH                              0x1
#define _CRCDATAH_DATA8_MASK                                0x1
#define _CRCDATAH_DATA9_POSN                                0x1
#define _CRCDATAH_DATA9_POSITION                            0x1
#define _CRCDATAH_DATA9_SIZE                                0x1
#define _CRCDATAH_DATA9_LENGTH                              0x1
#define _CRCDATAH_DATA9_MASK                                0x2
#define _CRCDATAH_DATA10_POSN                               0x2
#define _CRCDATAH_DATA10_POSITION                           0x2
#define _CRCDATAH_DATA10_SIZE                               0x1
#define _CRCDATAH_DATA10_LENGTH                             0x1
#define _CRCDATAH_DATA10_MASK                               0x4
#define _CRCDATAH_DATA11_POSN                               0x3
#define _CRCDATAH_DATA11_POSITION                           0x3
#define _CRCDATAH_DATA11_SIZE                               0x1
#define _CRCDATAH_DATA11_LENGTH                             0x1
#define _CRCDATAH_DATA11_MASK                               0x8
#define _CRCDATAH_DATA12_POSN                               0x4
#define _CRCDATAH_DATA12_POSITION                           0x4
#define _CRCDATAH_DATA12_SIZE                               0x1
#define _CRCDATAH_DATA12_LENGTH                             0x1
#define _CRCDATAH_DATA12_MASK                               0x10
#define _CRCDATAH_DATA13_POSN                               0x5
#define _CRCDATAH_DATA13_POSITION                           0x5
#define _CRCDATAH_DATA13_SIZE                               0x1
#define _CRCDATAH_DATA13_LENGTH                             0x1
#define _CRCDATAH_DATA13_MASK                               0x20
#define _CRCDATAH_DATA14_POSN                               0x6
#define _CRCDATAH_DATA14_POSITION                           0x6
#define _CRCDATAH_DATA14_SIZE                               0x1
#define _CRCDATAH_DATA14_LENGTH                             0x1
#define _CRCDATAH_DATA14_MASK                               0x40
#define _CRCDATAH_DATA15_POSN                               0x7
#define _CRCDATAH_DATA15_POSITION                           0x7
#define _CRCDATAH_DATA15_SIZE                               0x1
#define _CRCDATAH_DATA15_LENGTH                             0x1
#define _CRCDATAH_DATA15_MASK                               0x80

// Register: CRCDATAU
#define CRCDATAU CRCDATAU
extern volatile unsigned char           CRCDATAU            __at(0x1C9F);
#ifndef _LIB_BUILD
asm("CRCDATAU equ 01C9Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DATA                   :8;
    };
    struct {
        unsigned DATA16                 :1;
        unsigned DATA17                 :1;
        unsigned DATA18                 :1;
        unsigned DATA19                 :1;
        unsigned DATA20                 :1;
        unsigned DATA21                 :1;
        unsigned DATA22                 :1;
        unsigned DATA23                 :1;
    };
} CRCDATAUbits_t;
extern volatile CRCDATAUbits_t CRCDATAUbits __at(0x1C9F);
// bitfield macros
#define _CRCDATAU_DATA_POSN                                 0x0
#define _CRCDATAU_DATA_POSITION                             0x0
#define _CRCDATAU_DATA_SIZE                                 0x8
#define _CRCDATAU_DATA_LENGTH                               0x8
#define _CRCDATAU_DATA_MASK                                 0xFF
#define _CRCDATAU_DATA16_POSN                               0x0
#define _CRCDATAU_DATA16_POSITION                           0x0
#define _CRCDATAU_DATA16_SIZE                               0x1
#define _CRCDATAU_DATA16_LENGTH                             0x1
#define _CRCDATAU_DATA16_MASK                               0x1
#define _CRCDATAU_DATA17_POSN                               0x1
#define _CRCDATAU_DATA17_POSITION                           0x1
#define _CRCDATAU_DATA17_SIZE                               0x1
#define _CRCDATAU_DATA17_LENGTH                             0x1
#define _CRCDATAU_DATA17_MASK                               0x2
#define _CRCDATAU_DATA18_POSN                               0x2
#define _CRCDATAU_DATA18_POSITION                           0x2
#define _CRCDATAU_DATA18_SIZE                               0x1
#define _CRCDATAU_DATA18_LENGTH                             0x1
#define _CRCDATAU_DATA18_MASK                               0x4
#define _CRCDATAU_DATA19_POSN                               0x3
#define _CRCDATAU_DATA19_POSITION                           0x3
#define _CRCDATAU_DATA19_SIZE                               0x1
#define _CRCDATAU_DATA19_LENGTH                             0x1
#define _CRCDATAU_DATA19_MASK                               0x8
#define _CRCDATAU_DATA20_POSN                               0x4
#define _CRCDATAU_DATA20_POSITION                           0x4
#define _CRCDATAU_DATA20_SIZE                               0x1
#define _CRCDATAU_DATA20_LENGTH                             0x1
#define _CRCDATAU_DATA20_MASK                               0x10
#define _CRCDATAU_DATA21_POSN                               0x5
#define _CRCDATAU_DATA21_POSITION                           0x5
#define _CRCDATAU_DATA21_SIZE                               0x1
#define _CRCDATAU_DATA21_LENGTH                             0x1
#define _CRCDATAU_DATA21_MASK                               0x20
#define _CRCDATAU_DATA22_POSN                               0x6
#define _CRCDATAU_DATA22_POSITION                           0x6
#define _CRCDATAU_DATA22_SIZE                               0x1
#define _CRCDATAU_DATA22_LENGTH                             0x1
#define _CRCDATAU_DATA22_MASK                               0x40
#define _CRCDATAU_DATA23_POSN                               0x7
#define _CRCDATAU_DATA23_POSITION                           0x7
#define _CRCDATAU_DATA23_SIZE                               0x1
#define _CRCDATAU_DATA23_LENGTH                             0x1
#define _CRCDATAU_DATA23_MASK                               0x80

// Register: CRCDATAT
#define CRCDATAT CRCDATAT
extern volatile unsigned char           CRCDATAT            __at(0x1CA0);
#ifndef _LIB_BUILD
asm("CRCDATAT equ 01CA0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DATA                   :8;
    };
    struct {
        unsigned DATA24                 :1;
        unsigned DATA25                 :1;
        unsigned DATA26                 :1;
        unsigned DATA27                 :1;
        unsigned DATA28                 :1;
        unsigned DATA29                 :1;
        unsigned DATA30                 :1;
        unsigned DATA31                 :1;
    };
} CRCDATATbits_t;
extern volatile CRCDATATbits_t CRCDATATbits __at(0x1CA0);
// bitfield macros
#define _CRCDATAT_DATA_POSN                                 0x0
#define _CRCDATAT_DATA_POSITION                             0x0
#define _CRCDATAT_DATA_SIZE                                 0x8
#define _CRCDATAT_DATA_LENGTH                               0x8
#define _CRCDATAT_DATA_MASK                                 0xFF
#define _CRCDATAT_DATA24_POSN                               0x0
#define _CRCDATAT_DATA24_POSITION                           0x0
#define _CRCDATAT_DATA24_SIZE                               0x1
#define _CRCDATAT_DATA24_LENGTH                             0x1
#define _CRCDATAT_DATA24_MASK                               0x1
#define _CRCDATAT_DATA25_POSN                               0x1
#define _CRCDATAT_DATA25_POSITION                           0x1
#define _CRCDATAT_DATA25_SIZE                               0x1
#define _CRCDATAT_DATA25_LENGTH                             0x1
#define _CRCDATAT_DATA25_MASK                               0x2
#define _CRCDATAT_DATA26_POSN                               0x2
#define _CRCDATAT_DATA26_POSITION                           0x2
#define _CRCDATAT_DATA26_SIZE                               0x1
#define _CRCDATAT_DATA26_LENGTH                             0x1
#define _CRCDATAT_DATA26_MASK                               0x4
#define _CRCDATAT_DATA27_POSN                               0x3
#define _CRCDATAT_DATA27_POSITION                           0x3
#define _CRCDATAT_DATA27_SIZE                               0x1
#define _CRCDATAT_DATA27_LENGTH                             0x1
#define _CRCDATAT_DATA27_MASK                               0x8
#define _CRCDATAT_DATA28_POSN                               0x4
#define _CRCDATAT_DATA28_POSITION                           0x4
#define _CRCDATAT_DATA28_SIZE                               0x1
#define _CRCDATAT_DATA28_LENGTH                             0x1
#define _CRCDATAT_DATA28_MASK                               0x10
#define _CRCDATAT_DATA29_POSN                               0x5
#define _CRCDATAT_DATA29_POSITION                           0x5
#define _CRCDATAT_DATA29_SIZE                               0x1
#define _CRCDATAT_DATA29_LENGTH                             0x1
#define _CRCDATAT_DATA29_MASK                               0x20
#define _CRCDATAT_DATA30_POSN                               0x6
#define _CRCDATAT_DATA30_POSITION                           0x6
#define _CRCDATAT_DATA30_SIZE                               0x1
#define _CRCDATAT_DATA30_LENGTH                             0x1
#define _CRCDATAT_DATA30_MASK                               0x40
#define _CRCDATAT_DATA31_POSN                               0x7
#define _CRCDATAT_DATA31_POSITION                           0x7
#define _CRCDATAT_DATA31_SIZE                               0x1
#define _CRCDATAT_DATA31_LENGTH                             0x1
#define _CRCDATAT_DATA31_MASK                               0x80

// Register: CRCOUT
#define CRCOUT CRCOUT
extern volatile unsigned long           CRCOUT              __at(0x1CA1);
#ifndef _LIB_BUILD
asm("CRCOUT equ 01CA1h");
#endif
// aliases
extern volatile unsigned long           CRCSHFT             __at(0x1CA1);
#ifndef _LIB_BUILD
asm("CRCSHFT equ 01CA1h");
#endif
extern volatile unsigned long           CRCXOR              __at(0x1CA1);
#ifndef _LIB_BUILD
asm("CRCXOR equ 01CA1h");
#endif

// Register: CRCOUTL
#define CRCOUTL CRCOUTL
extern volatile unsigned char           CRCOUTL             __at(0x1CA1);
#ifndef _LIB_BUILD
asm("CRCOUTL equ 01CA1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUT                    :8;
    };
    struct {
        unsigned OUT0                   :1;
        unsigned OUT1                   :1;
        unsigned OUT2                   :1;
        unsigned OUT3                   :1;
        unsigned OUT4                   :1;
        unsigned OUT5                   :1;
        unsigned OUT6                   :1;
        unsigned OUT7                   :1;
    };
} CRCOUTLbits_t;
extern volatile CRCOUTLbits_t CRCOUTLbits __at(0x1CA1);
// bitfield macros
#define _CRCOUTL_OUT_POSN                                   0x0
#define _CRCOUTL_OUT_POSITION                               0x0
#define _CRCOUTL_OUT_SIZE                                   0x8
#define _CRCOUTL_OUT_LENGTH                                 0x8
#define _CRCOUTL_OUT_MASK                                   0xFF
#define _CRCOUTL_OUT0_POSN                                  0x0
#define _CRCOUTL_OUT0_POSITION                              0x0
#define _CRCOUTL_OUT0_SIZE                                  0x1
#define _CRCOUTL_OUT0_LENGTH                                0x1
#define _CRCOUTL_OUT0_MASK                                  0x1
#define _CRCOUTL_OUT1_POSN                                  0x1
#define _CRCOUTL_OUT1_POSITION                              0x1
#define _CRCOUTL_OUT1_SIZE                                  0x1
#define _CRCOUTL_OUT1_LENGTH                                0x1
#define _CRCOUTL_OUT1_MASK                                  0x2
#define _CRCOUTL_OUT2_POSN                                  0x2
#define _CRCOUTL_OUT2_POSITION                              0x2
#define _CRCOUTL_OUT2_SIZE                                  0x1
#define _CRCOUTL_OUT2_LENGTH                                0x1
#define _CRCOUTL_OUT2_MASK                                  0x4
#define _CRCOUTL_OUT3_POSN                                  0x3
#define _CRCOUTL_OUT3_POSITION                              0x3
#define _CRCOUTL_OUT3_SIZE                                  0x1
#define _CRCOUTL_OUT3_LENGTH                                0x1
#define _CRCOUTL_OUT3_MASK                                  0x8
#define _CRCOUTL_OUT4_POSN                                  0x4
#define _CRCOUTL_OUT4_POSITION                              0x4
#define _CRCOUTL_OUT4_SIZE                                  0x1
#define _CRCOUTL_OUT4_LENGTH                                0x1
#define _CRCOUTL_OUT4_MASK                                  0x10
#define _CRCOUTL_OUT5_POSN                                  0x5
#define _CRCOUTL_OUT5_POSITION                              0x5
#define _CRCOUTL_OUT5_SIZE                                  0x1
#define _CRCOUTL_OUT5_LENGTH                                0x1
#define _CRCOUTL_OUT5_MASK                                  0x20
#define _CRCOUTL_OUT6_POSN                                  0x6
#define _CRCOUTL_OUT6_POSITION                              0x6
#define _CRCOUTL_OUT6_SIZE                                  0x1
#define _CRCOUTL_OUT6_LENGTH                                0x1
#define _CRCOUTL_OUT6_MASK                                  0x40
#define _CRCOUTL_OUT7_POSN                                  0x7
#define _CRCOUTL_OUT7_POSITION                              0x7
#define _CRCOUTL_OUT7_SIZE                                  0x1
#define _CRCOUTL_OUT7_LENGTH                                0x1
#define _CRCOUTL_OUT7_MASK                                  0x80

// Register: CRCSHFTL
#define CRCSHFTL CRCSHFTL
extern volatile unsigned char           CRCSHFTL            __at(0x1CA1);
#ifndef _LIB_BUILD
asm("CRCSHFTL equ 01CA1h");
#endif
// aliases
extern volatile unsigned char           CRCSHIFTL           __at(0x1CA1);
#ifndef _LIB_BUILD
asm("CRCSHIFTL equ 01CA1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHIFT                  :8;
    };
    struct {
        unsigned SHIFT0                 :1;
        unsigned SHIFT1                 :1;
        unsigned SHIFT2                 :1;
        unsigned SHIFT3                 :1;
        unsigned SHIFT4                 :1;
        unsigned SHIFT5                 :1;
        unsigned SHIFT6                 :1;
        unsigned SHIFT7                 :1;
    };
} CRCSHFTLbits_t;
extern volatile CRCSHFTLbits_t CRCSHFTLbits __at(0x1CA1);
// bitfield macros
#define _CRCSHFTL_SHIFT_POSN                                0x0
#define _CRCSHFTL_SHIFT_POSITION                            0x0
#define _CRCSHFTL_SHIFT_SIZE                                0x8
#define _CRCSHFTL_SHIFT_LENGTH                              0x8
#define _CRCSHFTL_SHIFT_MASK                                0xFF
#define _CRCSHFTL_SHIFT0_POSN                               0x0
#define _CRCSHFTL_SHIFT0_POSITION                           0x0
#define _CRCSHFTL_SHIFT0_SIZE                               0x1
#define _CRCSHFTL_SHIFT0_LENGTH                             0x1
#define _CRCSHFTL_SHIFT0_MASK                               0x1
#define _CRCSHFTL_SHIFT1_POSN                               0x1
#define _CRCSHFTL_SHIFT1_POSITION                           0x1
#define _CRCSHFTL_SHIFT1_SIZE                               0x1
#define _CRCSHFTL_SHIFT1_LENGTH                             0x1
#define _CRCSHFTL_SHIFT1_MASK                               0x2
#define _CRCSHFTL_SHIFT2_POSN                               0x2
#define _CRCSHFTL_SHIFT2_POSITION                           0x2
#define _CRCSHFTL_SHIFT2_SIZE                               0x1
#define _CRCSHFTL_SHIFT2_LENGTH                             0x1
#define _CRCSHFTL_SHIFT2_MASK                               0x4
#define _CRCSHFTL_SHIFT3_POSN                               0x3
#define _CRCSHFTL_SHIFT3_POSITION                           0x3
#define _CRCSHFTL_SHIFT3_SIZE                               0x1
#define _CRCSHFTL_SHIFT3_LENGTH                             0x1
#define _CRCSHFTL_SHIFT3_MASK                               0x8
#define _CRCSHFTL_SHIFT4_POSN                               0x4
#define _CRCSHFTL_SHIFT4_POSITION                           0x4
#define _CRCSHFTL_SHIFT4_SIZE                               0x1
#define _CRCSHFTL_SHIFT4_LENGTH                             0x1
#define _CRCSHFTL_SHIFT4_MASK                               0x10
#define _CRCSHFTL_SHIFT5_POSN                               0x5
#define _CRCSHFTL_SHIFT5_POSITION                           0x5
#define _CRCSHFTL_SHIFT5_SIZE                               0x1
#define _CRCSHFTL_SHIFT5_LENGTH                             0x1
#define _CRCSHFTL_SHIFT5_MASK                               0x20
#define _CRCSHFTL_SHIFT6_POSN                               0x6
#define _CRCSHFTL_SHIFT6_POSITION                           0x6
#define _CRCSHFTL_SHIFT6_SIZE                               0x1
#define _CRCSHFTL_SHIFT6_LENGTH                             0x1
#define _CRCSHFTL_SHIFT6_MASK                               0x40
#define _CRCSHFTL_SHIFT7_POSN                               0x7
#define _CRCSHFTL_SHIFT7_POSITION                           0x7
#define _CRCSHFTL_SHIFT7_SIZE                               0x1
#define _CRCSHFTL_SHIFT7_LENGTH                             0x1
#define _CRCSHFTL_SHIFT7_MASK                               0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned SHIFT                  :8;
    };
    struct {
        unsigned SHIFT0                 :1;
        unsigned SHIFT1                 :1;
        unsigned SHIFT2                 :1;
        unsigned SHIFT3                 :1;
        unsigned SHIFT4                 :1;
        unsigned SHIFT5                 :1;
        unsigned SHIFT6                 :1;
        unsigned SHIFT7                 :1;
    };
} CRCSHIFTLbits_t;
extern volatile CRCSHIFTLbits_t CRCSHIFTLbits __at(0x1CA1);
// bitfield macros
#define _CRCSHIFTL_SHIFT_POSN                               0x0
#define _CRCSHIFTL_SHIFT_POSITION                           0x0
#define _CRCSHIFTL_SHIFT_SIZE                               0x8
#define _CRCSHIFTL_SHIFT_LENGTH                             0x8
#define _CRCSHIFTL_SHIFT_MASK                               0xFF
#define _CRCSHIFTL_SHIFT0_POSN                              0x0
#define _CRCSHIFTL_SHIFT0_POSITION                          0x0
#define _CRCSHIFTL_SHIFT0_SIZE                              0x1
#define _CRCSHIFTL_SHIFT0_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT0_MASK                              0x1
#define _CRCSHIFTL_SHIFT1_POSN                              0x1
#define _CRCSHIFTL_SHIFT1_POSITION                          0x1
#define _CRCSHIFTL_SHIFT1_SIZE                              0x1
#define _CRCSHIFTL_SHIFT1_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT1_MASK                              0x2
#define _CRCSHIFTL_SHIFT2_POSN                              0x2
#define _CRCSHIFTL_SHIFT2_POSITION                          0x2
#define _CRCSHIFTL_SHIFT2_SIZE                              0x1
#define _CRCSHIFTL_SHIFT2_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT2_MASK                              0x4
#define _CRCSHIFTL_SHIFT3_POSN                              0x3
#define _CRCSHIFTL_SHIFT3_POSITION                          0x3
#define _CRCSHIFTL_SHIFT3_SIZE                              0x1
#define _CRCSHIFTL_SHIFT3_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT3_MASK                              0x8
#define _CRCSHIFTL_SHIFT4_POSN                              0x4
#define _CRCSHIFTL_SHIFT4_POSITION                          0x4
#define _CRCSHIFTL_SHIFT4_SIZE                              0x1
#define _CRCSHIFTL_SHIFT4_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT4_MASK                              0x10
#define _CRCSHIFTL_SHIFT5_POSN                              0x5
#define _CRCSHIFTL_SHIFT5_POSITION                          0x5
#define _CRCSHIFTL_SHIFT5_SIZE                              0x1
#define _CRCSHIFTL_SHIFT5_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT5_MASK                              0x20
#define _CRCSHIFTL_SHIFT6_POSN                              0x6
#define _CRCSHIFTL_SHIFT6_POSITION                          0x6
#define _CRCSHIFTL_SHIFT6_SIZE                              0x1
#define _CRCSHIFTL_SHIFT6_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT6_MASK                              0x40
#define _CRCSHIFTL_SHIFT7_POSN                              0x7
#define _CRCSHIFTL_SHIFT7_POSITION                          0x7
#define _CRCSHIFTL_SHIFT7_SIZE                              0x1
#define _CRCSHIFTL_SHIFT7_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT7_MASK                              0x80

// Register: CRCXORL
#define CRCXORL CRCXORL
extern volatile unsigned char           CRCXORL             __at(0x1CA1);
#ifndef _LIB_BUILD
asm("CRCXORL equ 01CA1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned XOR                    :8;
    };
    struct {
        unsigned XOR0                   :1;
        unsigned XOR1                   :1;
        unsigned XOR2                   :1;
        unsigned XOR3                   :1;
        unsigned XOR4                   :1;
        unsigned XOR5                   :1;
        unsigned XOR6                   :1;
        unsigned XOR7                   :1;
    };
} CRCXORLbits_t;
extern volatile CRCXORLbits_t CRCXORLbits __at(0x1CA1);
// bitfield macros
#define _CRCXORL_XOR_POSN                                   0x0
#define _CRCXORL_XOR_POSITION                               0x0
#define _CRCXORL_XOR_SIZE                                   0x8
#define _CRCXORL_XOR_LENGTH                                 0x8
#define _CRCXORL_XOR_MASK                                   0xFF
#define _CRCXORL_XOR0_POSN                                  0x0
#define _CRCXORL_XOR0_POSITION                              0x0
#define _CRCXORL_XOR0_SIZE                                  0x1
#define _CRCXORL_XOR0_LENGTH                                0x1
#define _CRCXORL_XOR0_MASK                                  0x1
#define _CRCXORL_XOR1_POSN                                  0x1
#define _CRCXORL_XOR1_POSITION                              0x1
#define _CRCXORL_XOR1_SIZE                                  0x1
#define _CRCXORL_XOR1_LENGTH                                0x1
#define _CRCXORL_XOR1_MASK                                  0x2
#define _CRCXORL_XOR2_POSN                                  0x2
#define _CRCXORL_XOR2_POSITION                              0x2
#define _CRCXORL_XOR2_SIZE                                  0x1
#define _CRCXORL_XOR2_LENGTH                                0x1
#define _CRCXORL_XOR2_MASK                                  0x4
#define _CRCXORL_XOR3_POSN                                  0x3
#define _CRCXORL_XOR3_POSITION                              0x3
#define _CRCXORL_XOR3_SIZE                                  0x1
#define _CRCXORL_XOR3_LENGTH                                0x1
#define _CRCXORL_XOR3_MASK                                  0x8
#define _CRCXORL_XOR4_POSN                                  0x4
#define _CRCXORL_XOR4_POSITION                              0x4
#define _CRCXORL_XOR4_SIZE                                  0x1
#define _CRCXORL_XOR4_LENGTH                                0x1
#define _CRCXORL_XOR4_MASK                                  0x10
#define _CRCXORL_XOR5_POSN                                  0x5
#define _CRCXORL_XOR5_POSITION                              0x5
#define _CRCXORL_XOR5_SIZE                                  0x1
#define _CRCXORL_XOR5_LENGTH                                0x1
#define _CRCXORL_XOR5_MASK                                  0x20
#define _CRCXORL_XOR6_POSN                                  0x6
#define _CRCXORL_XOR6_POSITION                              0x6
#define _CRCXORL_XOR6_SIZE                                  0x1
#define _CRCXORL_XOR6_LENGTH                                0x1
#define _CRCXORL_XOR6_MASK                                  0x40
#define _CRCXORL_XOR7_POSN                                  0x7
#define _CRCXORL_XOR7_POSITION                              0x7
#define _CRCXORL_XOR7_SIZE                                  0x1
#define _CRCXORL_XOR7_LENGTH                                0x1
#define _CRCXORL_XOR7_MASK                                  0x80

// Register: CRCOUTH
#define CRCOUTH CRCOUTH
extern volatile unsigned char           CRCOUTH             __at(0x1CA2);
#ifndef _LIB_BUILD
asm("CRCOUTH equ 01CA2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUT                    :8;
    };
    struct {
        unsigned OUT8                   :1;
        unsigned OUT9                   :1;
        unsigned OUT10                  :1;
        unsigned OUT11                  :1;
        unsigned OUT12                  :1;
        unsigned OUT13                  :1;
        unsigned OUT14                  :1;
        unsigned OUT15                  :1;
    };
} CRCOUTHbits_t;
extern volatile CRCOUTHbits_t CRCOUTHbits __at(0x1CA2);
// bitfield macros
#define _CRCOUTH_OUT_POSN                                   0x0
#define _CRCOUTH_OUT_POSITION                               0x0
#define _CRCOUTH_OUT_SIZE                                   0x8
#define _CRCOUTH_OUT_LENGTH                                 0x8
#define _CRCOUTH_OUT_MASK                                   0xFF
#define _CRCOUTH_OUT8_POSN                                  0x0
#define _CRCOUTH_OUT8_POSITION                              0x0
#define _CRCOUTH_OUT8_SIZE                                  0x1
#define _CRCOUTH_OUT8_LENGTH                                0x1
#define _CRCOUTH_OUT8_MASK                                  0x1
#define _CRCOUTH_OUT9_POSN                                  0x1
#define _CRCOUTH_OUT9_POSITION                              0x1
#define _CRCOUTH_OUT9_SIZE                                  0x1
#define _CRCOUTH_OUT9_LENGTH                                0x1
#define _CRCOUTH_OUT9_MASK                                  0x2
#define _CRCOUTH_OUT10_POSN                                 0x2
#define _CRCOUTH_OUT10_POSITION                             0x2
#define _CRCOUTH_OUT10_SIZE                                 0x1
#define _CRCOUTH_OUT10_LENGTH                               0x1
#define _CRCOUTH_OUT10_MASK                                 0x4
#define _CRCOUTH_OUT11_POSN                                 0x3
#define _CRCOUTH_OUT11_POSITION                             0x3
#define _CRCOUTH_OUT11_SIZE                                 0x1
#define _CRCOUTH_OUT11_LENGTH                               0x1
#define _CRCOUTH_OUT11_MASK                                 0x8
#define _CRCOUTH_OUT12_POSN                                 0x4
#define _CRCOUTH_OUT12_POSITION                             0x4
#define _CRCOUTH_OUT12_SIZE                                 0x1
#define _CRCOUTH_OUT12_LENGTH                               0x1
#define _CRCOUTH_OUT12_MASK                                 0x10
#define _CRCOUTH_OUT13_POSN                                 0x5
#define _CRCOUTH_OUT13_POSITION                             0x5
#define _CRCOUTH_OUT13_SIZE                                 0x1
#define _CRCOUTH_OUT13_LENGTH                               0x1
#define _CRCOUTH_OUT13_MASK                                 0x20
#define _CRCOUTH_OUT14_POSN                                 0x6
#define _CRCOUTH_OUT14_POSITION                             0x6
#define _CRCOUTH_OUT14_SIZE                                 0x1
#define _CRCOUTH_OUT14_LENGTH                               0x1
#define _CRCOUTH_OUT14_MASK                                 0x40
#define _CRCOUTH_OUT15_POSN                                 0x7
#define _CRCOUTH_OUT15_POSITION                             0x7
#define _CRCOUTH_OUT15_SIZE                                 0x1
#define _CRCOUTH_OUT15_LENGTH                               0x1
#define _CRCOUTH_OUT15_MASK                                 0x80

// Register: CRCSHFTH
#define CRCSHFTH CRCSHFTH
extern volatile unsigned char           CRCSHFTH            __at(0x1CA2);
#ifndef _LIB_BUILD
asm("CRCSHFTH equ 01CA2h");
#endif
// aliases
extern volatile unsigned char           CRCSHIFTH           __at(0x1CA2);
#ifndef _LIB_BUILD
asm("CRCSHIFTH equ 01CA2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHIFT                  :8;
    };
    struct {
        unsigned SHIFT8                 :1;
        unsigned SHIFT9                 :1;
        unsigned SHIFT10                :1;
        unsigned SHIFT11                :1;
        unsigned SHIFT12                :1;
        unsigned SHIFT13                :1;
        unsigned SHIFT14                :1;
        unsigned SHIFT15                :1;
    };
} CRCSHFTHbits_t;
extern volatile CRCSHFTHbits_t CRCSHFTHbits __at(0x1CA2);
// bitfield macros
#define _CRCSHFTH_SHIFT_POSN                                0x0
#define _CRCSHFTH_SHIFT_POSITION                            0x0
#define _CRCSHFTH_SHIFT_SIZE                                0x8
#define _CRCSHFTH_SHIFT_LENGTH                              0x8
#define _CRCSHFTH_SHIFT_MASK                                0xFF
#define _CRCSHFTH_SHIFT8_POSN                               0x0
#define _CRCSHFTH_SHIFT8_POSITION                           0x0
#define _CRCSHFTH_SHIFT8_SIZE                               0x1
#define _CRCSHFTH_SHIFT8_LENGTH                             0x1
#define _CRCSHFTH_SHIFT8_MASK                               0x1
#define _CRCSHFTH_SHIFT9_POSN                               0x1
#define _CRCSHFTH_SHIFT9_POSITION                           0x1
#define _CRCSHFTH_SHIFT9_SIZE                               0x1
#define _CRCSHFTH_SHIFT9_LENGTH                             0x1
#define _CRCSHFTH_SHIFT9_MASK                               0x2
#define _CRCSHFTH_SHIFT10_POSN                              0x2
#define _CRCSHFTH_SHIFT10_POSITION                          0x2
#define _CRCSHFTH_SHIFT10_SIZE                              0x1
#define _CRCSHFTH_SHIFT10_LENGTH                            0x1
#define _CRCSHFTH_SHIFT10_MASK                              0x4
#define _CRCSHFTH_SHIFT11_POSN                              0x3
#define _CRCSHFTH_SHIFT11_POSITION                          0x3
#define _CRCSHFTH_SHIFT11_SIZE                              0x1
#define _CRCSHFTH_SHIFT11_LENGTH                            0x1
#define _CRCSHFTH_SHIFT11_MASK                              0x8
#define _CRCSHFTH_SHIFT12_POSN                              0x4
#define _CRCSHFTH_SHIFT12_POSITION                          0x4
#define _CRCSHFTH_SHIFT12_SIZE                              0x1
#define _CRCSHFTH_SHIFT12_LENGTH                            0x1
#define _CRCSHFTH_SHIFT12_MASK                              0x10
#define _CRCSHFTH_SHIFT13_POSN                              0x5
#define _CRCSHFTH_SHIFT13_POSITION                          0x5
#define _CRCSHFTH_SHIFT13_SIZE                              0x1
#define _CRCSHFTH_SHIFT13_LENGTH                            0x1
#define _CRCSHFTH_SHIFT13_MASK                              0x20
#define _CRCSHFTH_SHIFT14_POSN                              0x6
#define _CRCSHFTH_SHIFT14_POSITION                          0x6
#define _CRCSHFTH_SHIFT14_SIZE                              0x1
#define _CRCSHFTH_SHIFT14_LENGTH                            0x1
#define _CRCSHFTH_SHIFT14_MASK                              0x40
#define _CRCSHFTH_SHIFT15_POSN                              0x7
#define _CRCSHFTH_SHIFT15_POSITION                          0x7
#define _CRCSHFTH_SHIFT15_SIZE                              0x1
#define _CRCSHFTH_SHIFT15_LENGTH                            0x1
#define _CRCSHFTH_SHIFT15_MASK                              0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned SHIFT                  :8;
    };
    struct {
        unsigned SHIFT8                 :1;
        unsigned SHIFT9                 :1;
        unsigned SHIFT10                :1;
        unsigned SHIFT11                :1;
        unsigned SHIFT12                :1;
        unsigned SHIFT13                :1;
        unsigned SHIFT14                :1;
        unsigned SHIFT15                :1;
    };
} CRCSHIFTHbits_t;
extern volatile CRCSHIFTHbits_t CRCSHIFTHbits __at(0x1CA2);
// bitfield macros
#define _CRCSHIFTH_SHIFT_POSN                               0x0
#define _CRCSHIFTH_SHIFT_POSITION                           0x0
#define _CRCSHIFTH_SHIFT_SIZE                               0x8
#define _CRCSHIFTH_SHIFT_LENGTH                             0x8
#define _CRCSHIFTH_SHIFT_MASK                               0xFF
#define _CRCSHIFTH_SHIFT8_POSN                              0x0
#define _CRCSHIFTH_SHIFT8_POSITION                          0x0
#define _CRCSHIFTH_SHIFT8_SIZE                              0x1
#define _CRCSHIFTH_SHIFT8_LENGTH                            0x1
#define _CRCSHIFTH_SHIFT8_MASK                              0x1
#define _CRCSHIFTH_SHIFT9_POSN                              0x1
#define _CRCSHIFTH_SHIFT9_POSITION                          0x1
#define _CRCSHIFTH_SHIFT9_SIZE                              0x1
#define _CRCSHIFTH_SHIFT9_LENGTH                            0x1
#define _CRCSHIFTH_SHIFT9_MASK                              0x2
#define _CRCSHIFTH_SHIFT10_POSN                             0x2
#define _CRCSHIFTH_SHIFT10_POSITION                         0x2
#define _CRCSHIFTH_SHIFT10_SIZE                             0x1
#define _CRCSHIFTH_SHIFT10_LENGTH                           0x1
#define _CRCSHIFTH_SHIFT10_MASK                             0x4
#define _CRCSHIFTH_SHIFT11_POSN                             0x3
#define _CRCSHIFTH_SHIFT11_POSITION                         0x3
#define _CRCSHIFTH_SHIFT11_SIZE                             0x1
#define _CRCSHIFTH_SHIFT11_LENGTH                           0x1
#define _CRCSHIFTH_SHIFT11_MASK                             0x8
#define _CRCSHIFTH_SHIFT12_POSN                             0x4
#define _CRCSHIFTH_SHIFT12_POSITION                         0x4
#define _CRCSHIFTH_SHIFT12_SIZE                             0x1
#define _CRCSHIFTH_SHIFT12_LENGTH                           0x1
#define _CRCSHIFTH_SHIFT12_MASK                             0x10
#define _CRCSHIFTH_SHIFT13_POSN                             0x5
#define _CRCSHIFTH_SHIFT13_POSITION                         0x5
#define _CRCSHIFTH_SHIFT13_SIZE                             0x1
#define _CRCSHIFTH_SHIFT13_LENGTH                           0x1
#define _CRCSHIFTH_SHIFT13_MASK                             0x20
#define _CRCSHIFTH_SHIFT14_POSN                             0x6
#define _CRCSHIFTH_SHIFT14_POSITION                         0x6
#define _CRCSHIFTH_SHIFT14_SIZE                             0x1
#define _CRCSHIFTH_SHIFT14_LENGTH                           0x1
#define _CRCSHIFTH_SHIFT14_MASK                             0x40
#define _CRCSHIFTH_SHIFT15_POSN                             0x7
#define _CRCSHIFTH_SHIFT15_POSITION                         0x7
#define _CRCSHIFTH_SHIFT15_SIZE                             0x1
#define _CRCSHIFTH_SHIFT15_LENGTH                           0x1
#define _CRCSHIFTH_SHIFT15_MASK                             0x80

// Register: CRCXORH
#define CRCXORH CRCXORH
extern volatile unsigned char           CRCXORH             __at(0x1CA2);
#ifndef _LIB_BUILD
asm("CRCXORH equ 01CA2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned XOR                    :8;
    };
    struct {
        unsigned XOR8                   :1;
        unsigned XOR9                   :1;
        unsigned XOR10                  :1;
        unsigned XOR11                  :1;
        unsigned XOR12                  :1;
        unsigned XOR13                  :1;
        unsigned XOR14                  :1;
        unsigned XOR15                  :1;
    };
} CRCXORHbits_t;
extern volatile CRCXORHbits_t CRCXORHbits __at(0x1CA2);
// bitfield macros
#define _CRCXORH_XOR_POSN                                   0x0
#define _CRCXORH_XOR_POSITION                               0x0
#define _CRCXORH_XOR_SIZE                                   0x8
#define _CRCXORH_XOR_LENGTH                                 0x8
#define _CRCXORH_XOR_MASK                                   0xFF
#define _CRCXORH_XOR8_POSN                                  0x0
#define _CRCXORH_XOR8_POSITION                              0x0
#define _CRCXORH_XOR8_SIZE                                  0x1
#define _CRCXORH_XOR8_LENGTH                                0x1
#define _CRCXORH_XOR8_MASK                                  0x1
#define _CRCXORH_XOR9_POSN                                  0x1
#define _CRCXORH_XOR9_POSITION                              0x1
#define _CRCXORH_XOR9_SIZE                                  0x1
#define _CRCXORH_XOR9_LENGTH                                0x1
#define _CRCXORH_XOR9_MASK                                  0x2
#define _CRCXORH_XOR10_POSN                                 0x2
#define _CRCXORH_XOR10_POSITION                             0x2
#define _CRCXORH_XOR10_SIZE                                 0x1
#define _CRCXORH_XOR10_LENGTH                               0x1
#define _CRCXORH_XOR10_MASK                                 0x4
#define _CRCXORH_XOR11_POSN                                 0x3
#define _CRCXORH_XOR11_POSITION                             0x3
#define _CRCXORH_XOR11_SIZE                                 0x1
#define _CRCXORH_XOR11_LENGTH                               0x1
#define _CRCXORH_XOR11_MASK                                 0x8
#define _CRCXORH_XOR12_POSN                                 0x4
#define _CRCXORH_XOR12_POSITION                             0x4
#define _CRCXORH_XOR12_SIZE                                 0x1
#define _CRCXORH_XOR12_LENGTH                               0x1
#define _CRCXORH_XOR12_MASK                                 0x10
#define _CRCXORH_XOR13_POSN                                 0x5
#define _CRCXORH_XOR13_POSITION                             0x5
#define _CRCXORH_XOR13_SIZE                                 0x1
#define _CRCXORH_XOR13_LENGTH                               0x1
#define _CRCXORH_XOR13_MASK                                 0x20
#define _CRCXORH_XOR14_POSN                                 0x6
#define _CRCXORH_XOR14_POSITION                             0x6
#define _CRCXORH_XOR14_SIZE                                 0x1
#define _CRCXORH_XOR14_LENGTH                               0x1
#define _CRCXORH_XOR14_MASK                                 0x40
#define _CRCXORH_XOR15_POSN                                 0x7
#define _CRCXORH_XOR15_POSITION                             0x7
#define _CRCXORH_XOR15_SIZE                                 0x1
#define _CRCXORH_XOR15_LENGTH                               0x1
#define _CRCXORH_XOR15_MASK                                 0x80

// Register: CRCOUTU
#define CRCOUTU CRCOUTU
extern volatile unsigned char           CRCOUTU             __at(0x1CA3);
#ifndef _LIB_BUILD
asm("CRCOUTU equ 01CA3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUT                    :8;
    };
    struct {
        unsigned OUT16                  :1;
        unsigned OUT17                  :1;
        unsigned OUT18                  :1;
        unsigned OUT19                  :1;
        unsigned OUT20                  :1;
        unsigned OUT21                  :1;
        unsigned OUT22                  :1;
        unsigned OUT23                  :1;
    };
} CRCOUTUbits_t;
extern volatile CRCOUTUbits_t CRCOUTUbits __at(0x1CA3);
// bitfield macros
#define _CRCOUTU_OUT_POSN                                   0x0
#define _CRCOUTU_OUT_POSITION                               0x0
#define _CRCOUTU_OUT_SIZE                                   0x8
#define _CRCOUTU_OUT_LENGTH                                 0x8
#define _CRCOUTU_OUT_MASK                                   0xFF
#define _CRCOUTU_OUT16_POSN                                 0x0
#define _CRCOUTU_OUT16_POSITION                             0x0
#define _CRCOUTU_OUT16_SIZE                                 0x1
#define _CRCOUTU_OUT16_LENGTH                               0x1
#define _CRCOUTU_OUT16_MASK                                 0x1
#define _CRCOUTU_OUT17_POSN                                 0x1
#define _CRCOUTU_OUT17_POSITION                             0x1
#define _CRCOUTU_OUT17_SIZE                                 0x1
#define _CRCOUTU_OUT17_LENGTH                               0x1
#define _CRCOUTU_OUT17_MASK                                 0x2
#define _CRCOUTU_OUT18_POSN                                 0x2
#define _CRCOUTU_OUT18_POSITION                             0x2
#define _CRCOUTU_OUT18_SIZE                                 0x1
#define _CRCOUTU_OUT18_LENGTH                               0x1
#define _CRCOUTU_OUT18_MASK                                 0x4
#define _CRCOUTU_OUT19_POSN                                 0x3
#define _CRCOUTU_OUT19_POSITION                             0x3
#define _CRCOUTU_OUT19_SIZE                                 0x1
#define _CRCOUTU_OUT19_LENGTH                               0x1
#define _CRCOUTU_OUT19_MASK                                 0x8
#define _CRCOUTU_OUT20_POSN                                 0x4
#define _CRCOUTU_OUT20_POSITION                             0x4
#define _CRCOUTU_OUT20_SIZE                                 0x1
#define _CRCOUTU_OUT20_LENGTH                               0x1
#define _CRCOUTU_OUT20_MASK                                 0x10
#define _CRCOUTU_OUT21_POSN                                 0x5
#define _CRCOUTU_OUT21_POSITION                             0x5
#define _CRCOUTU_OUT21_SIZE                                 0x1
#define _CRCOUTU_OUT21_LENGTH                               0x1
#define _CRCOUTU_OUT21_MASK                                 0x20
#define _CRCOUTU_OUT22_POSN                                 0x6
#define _CRCOUTU_OUT22_POSITION                             0x6
#define _CRCOUTU_OUT22_SIZE                                 0x1
#define _CRCOUTU_OUT22_LENGTH                               0x1
#define _CRCOUTU_OUT22_MASK                                 0x40
#define _CRCOUTU_OUT23_POSN                                 0x7
#define _CRCOUTU_OUT23_POSITION                             0x7
#define _CRCOUTU_OUT23_SIZE                                 0x1
#define _CRCOUTU_OUT23_LENGTH                               0x1
#define _CRCOUTU_OUT23_MASK                                 0x80

// Register: CRCSHFTU
#define CRCSHFTU CRCSHFTU
extern volatile unsigned char           CRCSHFTU            __at(0x1CA3);
#ifndef _LIB_BUILD
asm("CRCSHFTU equ 01CA3h");
#endif
// aliases
extern volatile unsigned char           CRCSHIFTU           __at(0x1CA3);
#ifndef _LIB_BUILD
asm("CRCSHIFTU equ 01CA3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHIFT                  :8;
    };
    struct {
        unsigned SHIFT16                :1;
        unsigned SHIFT17                :1;
        unsigned SHIFT18                :1;
        unsigned SHIFT19                :1;
        unsigned SHIFT20                :1;
        unsigned SHIFT21                :1;
        unsigned SHIFT22                :1;
        unsigned SHIFT23                :1;
    };
} CRCSHFTUbits_t;
extern volatile CRCSHFTUbits_t CRCSHFTUbits __at(0x1CA3);
// bitfield macros
#define _CRCSHFTU_SHIFT_POSN                                0x0
#define _CRCSHFTU_SHIFT_POSITION                            0x0
#define _CRCSHFTU_SHIFT_SIZE                                0x8
#define _CRCSHFTU_SHIFT_LENGTH                              0x8
#define _CRCSHFTU_SHIFT_MASK                                0xFF
#define _CRCSHFTU_SHIFT16_POSN                              0x0
#define _CRCSHFTU_SHIFT16_POSITION                          0x0
#define _CRCSHFTU_SHIFT16_SIZE                              0x1
#define _CRCSHFTU_SHIFT16_LENGTH                            0x1
#define _CRCSHFTU_SHIFT16_MASK                              0x1
#define _CRCSHFTU_SHIFT17_POSN                              0x1
#define _CRCSHFTU_SHIFT17_POSITION                          0x1
#define _CRCSHFTU_SHIFT17_SIZE                              0x1
#define _CRCSHFTU_SHIFT17_LENGTH                            0x1
#define _CRCSHFTU_SHIFT17_MASK                              0x2
#define _CRCSHFTU_SHIFT18_POSN                              0x2
#define _CRCSHFTU_SHIFT18_POSITION                          0x2
#define _CRCSHFTU_SHIFT18_SIZE                              0x1
#define _CRCSHFTU_SHIFT18_LENGTH                            0x1
#define _CRCSHFTU_SHIFT18_MASK                              0x4
#define _CRCSHFTU_SHIFT19_POSN                              0x3
#define _CRCSHFTU_SHIFT19_POSITION                          0x3
#define _CRCSHFTU_SHIFT19_SIZE                              0x1
#define _CRCSHFTU_SHIFT19_LENGTH                            0x1
#define _CRCSHFTU_SHIFT19_MASK                              0x8
#define _CRCSHFTU_SHIFT20_POSN                              0x4
#define _CRCSHFTU_SHIFT20_POSITION                          0x4
#define _CRCSHFTU_SHIFT20_SIZE                              0x1
#define _CRCSHFTU_SHIFT20_LENGTH                            0x1
#define _CRCSHFTU_SHIFT20_MASK                              0x10
#define _CRCSHFTU_SHIFT21_POSN                              0x5
#define _CRCSHFTU_SHIFT21_POSITION                          0x5
#define _CRCSHFTU_SHIFT21_SIZE                              0x1
#define _CRCSHFTU_SHIFT21_LENGTH                            0x1
#define _CRCSHFTU_SHIFT21_MASK                              0x20
#define _CRCSHFTU_SHIFT22_POSN                              0x6
#define _CRCSHFTU_SHIFT22_POSITION                          0x6
#define _CRCSHFTU_SHIFT22_SIZE                              0x1
#define _CRCSHFTU_SHIFT22_LENGTH                            0x1
#define _CRCSHFTU_SHIFT22_MASK                              0x40
#define _CRCSHFTU_SHIFT23_POSN                              0x7
#define _CRCSHFTU_SHIFT23_POSITION                          0x7
#define _CRCSHFTU_SHIFT23_SIZE                              0x1
#define _CRCSHFTU_SHIFT23_LENGTH                            0x1
#define _CRCSHFTU_SHIFT23_MASK                              0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned SHIFT                  :8;
    };
    struct {
        unsigned SHIFT16                :1;
        unsigned SHIFT17                :1;
        unsigned SHIFT18                :1;
        unsigned SHIFT19                :1;
        unsigned SHIFT20                :1;
        unsigned SHIFT21                :1;
        unsigned SHIFT22                :1;
        unsigned SHIFT23                :1;
    };
} CRCSHIFTUbits_t;
extern volatile CRCSHIFTUbits_t CRCSHIFTUbits __at(0x1CA3);
// bitfield macros
#define _CRCSHIFTU_SHIFT_POSN                               0x0
#define _CRCSHIFTU_SHIFT_POSITION                           0x0
#define _CRCSHIFTU_SHIFT_SIZE                               0x8
#define _CRCSHIFTU_SHIFT_LENGTH                             0x8
#define _CRCSHIFTU_SHIFT_MASK                               0xFF
#define _CRCSHIFTU_SHIFT16_POSN                             0x0
#define _CRCSHIFTU_SHIFT16_POSITION                         0x0
#define _CRCSHIFTU_SHIFT16_SIZE                             0x1
#define _CRCSHIFTU_SHIFT16_LENGTH                           0x1
#define _CRCSHIFTU_SHIFT16_MASK                             0x1
#define _CRCSHIFTU_SHIFT17_POSN                             0x1
#define _CRCSHIFTU_SHIFT17_POSITION                         0x1
#define _CRCSHIFTU_SHIFT17_SIZE                             0x1
#define _CRCSHIFTU_SHIFT17_LENGTH                           0x1
#define _CRCSHIFTU_SHIFT17_MASK                             0x2
#define _CRCSHIFTU_SHIFT18_POSN                             0x2
#define _CRCSHIFTU_SHIFT18_POSITION                         0x2
#define _CRCSHIFTU_SHIFT18_SIZE                             0x1
#define _CRCSHIFTU_SHIFT18_LENGTH                           0x1
#define _CRCSHIFTU_SHIFT18_MASK                             0x4
#define _CRCSHIFTU_SHIFT19_POSN                             0x3
#define _CRCSHIFTU_SHIFT19_POSITION                         0x3
#define _CRCSHIFTU_SHIFT19_SIZE                             0x1
#define _CRCSHIFTU_SHIFT19_LENGTH                           0x1
#define _CRCSHIFTU_SHIFT19_MASK                             0x8
#define _CRCSHIFTU_SHIFT20_POSN                             0x4
#define _CRCSHIFTU_SHIFT20_POSITION                         0x4
#define _CRCSHIFTU_SHIFT20_SIZE                             0x1
#define _CRCSHIFTU_SHIFT20_LENGTH                           0x1
#define _CRCSHIFTU_SHIFT20_MASK                             0x10
#define _CRCSHIFTU_SHIFT21_POSN                             0x5
#define _CRCSHIFTU_SHIFT21_POSITION                         0x5
#define _CRCSHIFTU_SHIFT21_SIZE                             0x1
#define _CRCSHIFTU_SHIFT21_LENGTH                           0x1
#define _CRCSHIFTU_SHIFT21_MASK                             0x20
#define _CRCSHIFTU_SHIFT22_POSN                             0x6
#define _CRCSHIFTU_SHIFT22_POSITION                         0x6
#define _CRCSHIFTU_SHIFT22_SIZE                             0x1
#define _CRCSHIFTU_SHIFT22_LENGTH                           0x1
#define _CRCSHIFTU_SHIFT22_MASK                             0x40
#define _CRCSHIFTU_SHIFT23_POSN                             0x7
#define _CRCSHIFTU_SHIFT23_POSITION                         0x7
#define _CRCSHIFTU_SHIFT23_SIZE                             0x1
#define _CRCSHIFTU_SHIFT23_LENGTH                           0x1
#define _CRCSHIFTU_SHIFT23_MASK                             0x80

// Register: CRCXORU
#define CRCXORU CRCXORU
extern volatile unsigned char           CRCXORU             __at(0x1CA3);
#ifndef _LIB_BUILD
asm("CRCXORU equ 01CA3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned XOR                    :8;
    };
    struct {
        unsigned XOR16                  :1;
        unsigned XOR17                  :1;
        unsigned XOR18                  :1;
        unsigned XOR19                  :1;
        unsigned XOR20                  :1;
        unsigned XOR21                  :1;
        unsigned XOR22                  :1;
        unsigned XOR23                  :1;
    };
} CRCXORUbits_t;
extern volatile CRCXORUbits_t CRCXORUbits __at(0x1CA3);
// bitfield macros
#define _CRCXORU_XOR_POSN                                   0x0
#define _CRCXORU_XOR_POSITION                               0x0
#define _CRCXORU_XOR_SIZE                                   0x8
#define _CRCXORU_XOR_LENGTH                                 0x8
#define _CRCXORU_XOR_MASK                                   0xFF
#define _CRCXORU_XOR16_POSN                                 0x0
#define _CRCXORU_XOR16_POSITION                             0x0
#define _CRCXORU_XOR16_SIZE                                 0x1
#define _CRCXORU_XOR16_LENGTH                               0x1
#define _CRCXORU_XOR16_MASK                                 0x1
#define _CRCXORU_XOR17_POSN                                 0x1
#define _CRCXORU_XOR17_POSITION                             0x1
#define _CRCXORU_XOR17_SIZE                                 0x1
#define _CRCXORU_XOR17_LENGTH                               0x1
#define _CRCXORU_XOR17_MASK                                 0x2
#define _CRCXORU_XOR18_POSN                                 0x2
#define _CRCXORU_XOR18_POSITION                             0x2
#define _CRCXORU_XOR18_SIZE                                 0x1
#define _CRCXORU_XOR18_LENGTH                               0x1
#define _CRCXORU_XOR18_MASK                                 0x4
#define _CRCXORU_XOR19_POSN                                 0x3
#define _CRCXORU_XOR19_POSITION                             0x3
#define _CRCXORU_XOR19_SIZE                                 0x1
#define _CRCXORU_XOR19_LENGTH                               0x1
#define _CRCXORU_XOR19_MASK                                 0x8
#define _CRCXORU_XOR20_POSN                                 0x4
#define _CRCXORU_XOR20_POSITION                             0x4
#define _CRCXORU_XOR20_SIZE                                 0x1
#define _CRCXORU_XOR20_LENGTH                               0x1
#define _CRCXORU_XOR20_MASK                                 0x10
#define _CRCXORU_XOR21_POSN                                 0x5
#define _CRCXORU_XOR21_POSITION                             0x5
#define _CRCXORU_XOR21_SIZE                                 0x1
#define _CRCXORU_XOR21_LENGTH                               0x1
#define _CRCXORU_XOR21_MASK                                 0x20
#define _CRCXORU_XOR22_POSN                                 0x6
#define _CRCXORU_XOR22_POSITION                             0x6
#define _CRCXORU_XOR22_SIZE                                 0x1
#define _CRCXORU_XOR22_LENGTH                               0x1
#define _CRCXORU_XOR22_MASK                                 0x40
#define _CRCXORU_XOR23_POSN                                 0x7
#define _CRCXORU_XOR23_POSITION                             0x7
#define _CRCXORU_XOR23_SIZE                                 0x1
#define _CRCXORU_XOR23_LENGTH                               0x1
#define _CRCXORU_XOR23_MASK                                 0x80

// Register: CRCOUTT
#define CRCOUTT CRCOUTT
extern volatile unsigned char           CRCOUTT             __at(0x1CA4);
#ifndef _LIB_BUILD
asm("CRCOUTT equ 01CA4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUT                    :8;
    };
    struct {
        unsigned OUT24                  :1;
        unsigned OUT25                  :1;
        unsigned OUT26                  :1;
        unsigned OUT27                  :1;
        unsigned OUT28                  :1;
        unsigned OUT29                  :1;
        unsigned OUT30                  :1;
        unsigned OUT31                  :1;
    };
} CRCOUTTbits_t;
extern volatile CRCOUTTbits_t CRCOUTTbits __at(0x1CA4);
// bitfield macros
#define _CRCOUTT_OUT_POSN                                   0x0
#define _CRCOUTT_OUT_POSITION                               0x0
#define _CRCOUTT_OUT_SIZE                                   0x8
#define _CRCOUTT_OUT_LENGTH                                 0x8
#define _CRCOUTT_OUT_MASK                                   0xFF
#define _CRCOUTT_OUT24_POSN                                 0x0
#define _CRCOUTT_OUT24_POSITION                             0x0
#define _CRCOUTT_OUT24_SIZE                                 0x1
#define _CRCOUTT_OUT24_LENGTH                               0x1
#define _CRCOUTT_OUT24_MASK                                 0x1
#define _CRCOUTT_OUT25_POSN                                 0x1
#define _CRCOUTT_OUT25_POSITION                             0x1
#define _CRCOUTT_OUT25_SIZE                                 0x1
#define _CRCOUTT_OUT25_LENGTH                               0x1
#define _CRCOUTT_OUT25_MASK                                 0x2
#define _CRCOUTT_OUT26_POSN                                 0x2
#define _CRCOUTT_OUT26_POSITION                             0x2
#define _CRCOUTT_OUT26_SIZE                                 0x1
#define _CRCOUTT_OUT26_LENGTH                               0x1
#define _CRCOUTT_OUT26_MASK                                 0x4
#define _CRCOUTT_OUT27_POSN                                 0x3
#define _CRCOUTT_OUT27_POSITION                             0x3
#define _CRCOUTT_OUT27_SIZE                                 0x1
#define _CRCOUTT_OUT27_LENGTH                               0x1
#define _CRCOUTT_OUT27_MASK                                 0x8
#define _CRCOUTT_OUT28_POSN                                 0x4
#define _CRCOUTT_OUT28_POSITION                             0x4
#define _CRCOUTT_OUT28_SIZE                                 0x1
#define _CRCOUTT_OUT28_LENGTH                               0x1
#define _CRCOUTT_OUT28_MASK                                 0x10
#define _CRCOUTT_OUT29_POSN                                 0x5
#define _CRCOUTT_OUT29_POSITION                             0x5
#define _CRCOUTT_OUT29_SIZE                                 0x1
#define _CRCOUTT_OUT29_LENGTH                               0x1
#define _CRCOUTT_OUT29_MASK                                 0x20
#define _CRCOUTT_OUT30_POSN                                 0x6
#define _CRCOUTT_OUT30_POSITION                             0x6
#define _CRCOUTT_OUT30_SIZE                                 0x1
#define _CRCOUTT_OUT30_LENGTH                               0x1
#define _CRCOUTT_OUT30_MASK                                 0x40
#define _CRCOUTT_OUT31_POSN                                 0x7
#define _CRCOUTT_OUT31_POSITION                             0x7
#define _CRCOUTT_OUT31_SIZE                                 0x1
#define _CRCOUTT_OUT31_LENGTH                               0x1
#define _CRCOUTT_OUT31_MASK                                 0x80

// Register: CRCSHFTT
#define CRCSHFTT CRCSHFTT
extern volatile unsigned char           CRCSHFTT            __at(0x1CA4);
#ifndef _LIB_BUILD
asm("CRCSHFTT equ 01CA4h");
#endif
// aliases
extern volatile unsigned char           CRCSHIFTT           __at(0x1CA4);
#ifndef _LIB_BUILD
asm("CRCSHIFTT equ 01CA4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHIFT                  :8;
    };
    struct {
        unsigned SHIFT24                :1;
        unsigned SHIFT25                :1;
        unsigned SHIFT26                :1;
        unsigned SHIFT27                :1;
        unsigned SHIFT28                :1;
        unsigned SHIFT29                :1;
        unsigned SHIFT30                :1;
        unsigned SHIFT31                :1;
    };
} CRCSHFTTbits_t;
extern volatile CRCSHFTTbits_t CRCSHFTTbits __at(0x1CA4);
// bitfield macros
#define _CRCSHFTT_SHIFT_POSN                                0x0
#define _CRCSHFTT_SHIFT_POSITION                            0x0
#define _CRCSHFTT_SHIFT_SIZE                                0x8
#define _CRCSHFTT_SHIFT_LENGTH                              0x8
#define _CRCSHFTT_SHIFT_MASK                                0xFF
#define _CRCSHFTT_SHIFT24_POSN                              0x0
#define _CRCSHFTT_SHIFT24_POSITION                          0x0
#define _CRCSHFTT_SHIFT24_SIZE                              0x1
#define _CRCSHFTT_SHIFT24_LENGTH                            0x1
#define _CRCSHFTT_SHIFT24_MASK                              0x1
#define _CRCSHFTT_SHIFT25_POSN                              0x1
#define _CRCSHFTT_SHIFT25_POSITION                          0x1
#define _CRCSHFTT_SHIFT25_SIZE                              0x1
#define _CRCSHFTT_SHIFT25_LENGTH                            0x1
#define _CRCSHFTT_SHIFT25_MASK                              0x2
#define _CRCSHFTT_SHIFT26_POSN                              0x2
#define _CRCSHFTT_SHIFT26_POSITION                          0x2
#define _CRCSHFTT_SHIFT26_SIZE                              0x1
#define _CRCSHFTT_SHIFT26_LENGTH                            0x1
#define _CRCSHFTT_SHIFT26_MASK                              0x4
#define _CRCSHFTT_SHIFT27_POSN                              0x3
#define _CRCSHFTT_SHIFT27_POSITION                          0x3
#define _CRCSHFTT_SHIFT27_SIZE                              0x1
#define _CRCSHFTT_SHIFT27_LENGTH                            0x1
#define _CRCSHFTT_SHIFT27_MASK                              0x8
#define _CRCSHFTT_SHIFT28_POSN                              0x4
#define _CRCSHFTT_SHIFT28_POSITION                          0x4
#define _CRCSHFTT_SHIFT28_SIZE                              0x1
#define _CRCSHFTT_SHIFT28_LENGTH                            0x1
#define _CRCSHFTT_SHIFT28_MASK                              0x10
#define _CRCSHFTT_SHIFT29_POSN                              0x5
#define _CRCSHFTT_SHIFT29_POSITION                          0x5
#define _CRCSHFTT_SHIFT29_SIZE                              0x1
#define _CRCSHFTT_SHIFT29_LENGTH                            0x1
#define _CRCSHFTT_SHIFT29_MASK                              0x20
#define _CRCSHFTT_SHIFT30_POSN                              0x6
#define _CRCSHFTT_SHIFT30_POSITION                          0x6
#define _CRCSHFTT_SHIFT30_SIZE                              0x1
#define _CRCSHFTT_SHIFT30_LENGTH                            0x1
#define _CRCSHFTT_SHIFT30_MASK                              0x40
#define _CRCSHFTT_SHIFT31_POSN                              0x7
#define _CRCSHFTT_SHIFT31_POSITION                          0x7
#define _CRCSHFTT_SHIFT31_SIZE                              0x1
#define _CRCSHFTT_SHIFT31_LENGTH                            0x1
#define _CRCSHFTT_SHIFT31_MASK                              0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned SHIFT                  :8;
    };
    struct {
        unsigned SHIFT24                :1;
        unsigned SHIFT25                :1;
        unsigned SHIFT26                :1;
        unsigned SHIFT27                :1;
        unsigned SHIFT28                :1;
        unsigned SHIFT29                :1;
        unsigned SHIFT30                :1;
        unsigned SHIFT31                :1;
    };
} CRCSHIFTTbits_t;
extern volatile CRCSHIFTTbits_t CRCSHIFTTbits __at(0x1CA4);
// bitfield macros
#define _CRCSHIFTT_SHIFT_POSN                               0x0
#define _CRCSHIFTT_SHIFT_POSITION                           0x0
#define _CRCSHIFTT_SHIFT_SIZE                               0x8
#define _CRCSHIFTT_SHIFT_LENGTH                             0x8
#define _CRCSHIFTT_SHIFT_MASK                               0xFF
#define _CRCSHIFTT_SHIFT24_POSN                             0x0
#define _CRCSHIFTT_SHIFT24_POSITION                         0x0
#define _CRCSHIFTT_SHIFT24_SIZE                             0x1
#define _CRCSHIFTT_SHIFT24_LENGTH                           0x1
#define _CRCSHIFTT_SHIFT24_MASK                             0x1
#define _CRCSHIFTT_SHIFT25_POSN                             0x1
#define _CRCSHIFTT_SHIFT25_POSITION                         0x1
#define _CRCSHIFTT_SHIFT25_SIZE                             0x1
#define _CRCSHIFTT_SHIFT25_LENGTH                           0x1
#define _CRCSHIFTT_SHIFT25_MASK                             0x2
#define _CRCSHIFTT_SHIFT26_POSN                             0x2
#define _CRCSHIFTT_SHIFT26_POSITION                         0x2
#define _CRCSHIFTT_SHIFT26_SIZE                             0x1
#define _CRCSHIFTT_SHIFT26_LENGTH                           0x1
#define _CRCSHIFTT_SHIFT26_MASK                             0x4
#define _CRCSHIFTT_SHIFT27_POSN                             0x3
#define _CRCSHIFTT_SHIFT27_POSITION                         0x3
#define _CRCSHIFTT_SHIFT27_SIZE                             0x1
#define _CRCSHIFTT_SHIFT27_LENGTH                           0x1
#define _CRCSHIFTT_SHIFT27_MASK                             0x8
#define _CRCSHIFTT_SHIFT28_POSN                             0x4
#define _CRCSHIFTT_SHIFT28_POSITION                         0x4
#define _CRCSHIFTT_SHIFT28_SIZE                             0x1
#define _CRCSHIFTT_SHIFT28_LENGTH                           0x1
#define _CRCSHIFTT_SHIFT28_MASK                             0x10
#define _CRCSHIFTT_SHIFT29_POSN                             0x5
#define _CRCSHIFTT_SHIFT29_POSITION                         0x5
#define _CRCSHIFTT_SHIFT29_SIZE                             0x1
#define _CRCSHIFTT_SHIFT29_LENGTH                           0x1
#define _CRCSHIFTT_SHIFT29_MASK                             0x20
#define _CRCSHIFTT_SHIFT30_POSN                             0x6
#define _CRCSHIFTT_SHIFT30_POSITION                         0x6
#define _CRCSHIFTT_SHIFT30_SIZE                             0x1
#define _CRCSHIFTT_SHIFT30_LENGTH                           0x1
#define _CRCSHIFTT_SHIFT30_MASK                             0x40
#define _CRCSHIFTT_SHIFT31_POSN                             0x7
#define _CRCSHIFTT_SHIFT31_POSITION                         0x7
#define _CRCSHIFTT_SHIFT31_SIZE                             0x1
#define _CRCSHIFTT_SHIFT31_LENGTH                           0x1
#define _CRCSHIFTT_SHIFT31_MASK                             0x80

// Register: CRCXORT
#define CRCXORT CRCXORT
extern volatile unsigned char           CRCXORT             __at(0x1CA4);
#ifndef _LIB_BUILD
asm("CRCXORT equ 01CA4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned XOR                    :8;
    };
    struct {
        unsigned XOR24                  :1;
        unsigned XOR25                  :1;
        unsigned XOR26                  :1;
        unsigned XOR27                  :1;
        unsigned XOR28                  :1;
        unsigned XOR29                  :1;
        unsigned XOR30                  :1;
        unsigned XOR31                  :1;
    };
} CRCXORTbits_t;
extern volatile CRCXORTbits_t CRCXORTbits __at(0x1CA4);
// bitfield macros
#define _CRCXORT_XOR_POSN                                   0x0
#define _CRCXORT_XOR_POSITION                               0x0
#define _CRCXORT_XOR_SIZE                                   0x8
#define _CRCXORT_XOR_LENGTH                                 0x8
#define _CRCXORT_XOR_MASK                                   0xFF
#define _CRCXORT_XOR24_POSN                                 0x0
#define _CRCXORT_XOR24_POSITION                             0x0
#define _CRCXORT_XOR24_SIZE                                 0x1
#define _CRCXORT_XOR24_LENGTH                               0x1
#define _CRCXORT_XOR24_MASK                                 0x1
#define _CRCXORT_XOR25_POSN                                 0x1
#define _CRCXORT_XOR25_POSITION                             0x1
#define _CRCXORT_XOR25_SIZE                                 0x1
#define _CRCXORT_XOR25_LENGTH                               0x1
#define _CRCXORT_XOR25_MASK                                 0x2
#define _CRCXORT_XOR26_POSN                                 0x2
#define _CRCXORT_XOR26_POSITION                             0x2
#define _CRCXORT_XOR26_SIZE                                 0x1
#define _CRCXORT_XOR26_LENGTH                               0x1
#define _CRCXORT_XOR26_MASK                                 0x4
#define _CRCXORT_XOR27_POSN                                 0x3
#define _CRCXORT_XOR27_POSITION                             0x3
#define _CRCXORT_XOR27_SIZE                                 0x1
#define _CRCXORT_XOR27_LENGTH                               0x1
#define _CRCXORT_XOR27_MASK                                 0x8
#define _CRCXORT_XOR28_POSN                                 0x4
#define _CRCXORT_XOR28_POSITION                             0x4
#define _CRCXORT_XOR28_SIZE                                 0x1
#define _CRCXORT_XOR28_LENGTH                               0x1
#define _CRCXORT_XOR28_MASK                                 0x10
#define _CRCXORT_XOR29_POSN                                 0x5
#define _CRCXORT_XOR29_POSITION                             0x5
#define _CRCXORT_XOR29_SIZE                                 0x1
#define _CRCXORT_XOR29_LENGTH                               0x1
#define _CRCXORT_XOR29_MASK                                 0x20
#define _CRCXORT_XOR30_POSN                                 0x6
#define _CRCXORT_XOR30_POSITION                             0x6
#define _CRCXORT_XOR30_SIZE                                 0x1
#define _CRCXORT_XOR30_LENGTH                               0x1
#define _CRCXORT_XOR30_MASK                                 0x40
#define _CRCXORT_XOR31_POSN                                 0x7
#define _CRCXORT_XOR31_POSITION                             0x7
#define _CRCXORT_XOR31_SIZE                                 0x1
#define _CRCXORT_XOR31_LENGTH                               0x1
#define _CRCXORT_XOR31_MASK                                 0x80

// Register: CRCCON0
#define CRCCON0 CRCCON0
extern volatile unsigned char           CRCCON0             __at(0x1CA5);
#ifndef _LIB_BUILD
asm("CRCCON0 equ 01CA5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FULL                   :1;
        unsigned SHIFTM                 :1;
        unsigned SETUP                  :2;
        unsigned ACCMOD                 :1;
        unsigned CRCBUSY                :1;
        unsigned CRCGO                  :1;
        unsigned CRCEN                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned LENDIAN                :1;
        unsigned SETUP0                 :1;
        unsigned SETUP1                 :1;
        unsigned ACCM                   :1;
        unsigned BUSY                   :1;
        unsigned GO                     :1;
        unsigned EN                     :1;
    };
} CRCCON0bits_t;
extern volatile CRCCON0bits_t CRCCON0bits __at(0x1CA5);
// bitfield macros
#define _CRCCON0_FULL_POSN                                  0x0
#define _CRCCON0_FULL_POSITION                              0x0
#define _CRCCON0_FULL_SIZE                                  0x1
#define _CRCCON0_FULL_LENGTH                                0x1
#define _CRCCON0_FULL_MASK                                  0x1
#define _CRCCON0_SHIFTM_POSN                                0x1
#define _CRCCON0_SHIFTM_POSITION                            0x1
#define _CRCCON0_SHIFTM_SIZE                                0x1
#define _CRCCON0_SHIFTM_LENGTH                              0x1
#define _CRCCON0_SHIFTM_MASK                                0x2
#define _CRCCON0_SETUP_POSN                                 0x2
#define _CRCCON0_SETUP_POSITION                             0x2
#define _CRCCON0_SETUP_SIZE                                 0x2
#define _CRCCON0_SETUP_LENGTH                               0x2
#define _CRCCON0_SETUP_MASK                                 0xC
#define _CRCCON0_ACCMOD_POSN                                0x4
#define _CRCCON0_ACCMOD_POSITION                            0x4
#define _CRCCON0_ACCMOD_SIZE                                0x1
#define _CRCCON0_ACCMOD_LENGTH                              0x1
#define _CRCCON0_ACCMOD_MASK                                0x10
#define _CRCCON0_CRCBUSY_POSN                               0x5
#define _CRCCON0_CRCBUSY_POSITION                           0x5
#define _CRCCON0_CRCBUSY_SIZE                               0x1
#define _CRCCON0_CRCBUSY_LENGTH                             0x1
#define _CRCCON0_CRCBUSY_MASK                               0x20
#define _CRCCON0_CRCGO_POSN                                 0x6
#define _CRCCON0_CRCGO_POSITION                             0x6
#define _CRCCON0_CRCGO_SIZE                                 0x1
#define _CRCCON0_CRCGO_LENGTH                               0x1
#define _CRCCON0_CRCGO_MASK                                 0x40
#define _CRCCON0_CRCEN_POSN                                 0x7
#define _CRCCON0_CRCEN_POSITION                             0x7
#define _CRCCON0_CRCEN_SIZE                                 0x1
#define _CRCCON0_CRCEN_LENGTH                               0x1
#define _CRCCON0_CRCEN_MASK                                 0x80
#define _CRCCON0_LENDIAN_POSN                               0x1
#define _CRCCON0_LENDIAN_POSITION                           0x1
#define _CRCCON0_LENDIAN_SIZE                               0x1
#define _CRCCON0_LENDIAN_LENGTH                             0x1
#define _CRCCON0_LENDIAN_MASK                               0x2
#define _CRCCON0_SETUP0_POSN                                0x2
#define _CRCCON0_SETUP0_POSITION                            0x2
#define _CRCCON0_SETUP0_SIZE                                0x1
#define _CRCCON0_SETUP0_LENGTH                              0x1
#define _CRCCON0_SETUP0_MASK                                0x4
#define _CRCCON0_SETUP1_POSN                                0x3
#define _CRCCON0_SETUP1_POSITION                            0x3
#define _CRCCON0_SETUP1_SIZE                                0x1
#define _CRCCON0_SETUP1_LENGTH                              0x1
#define _CRCCON0_SETUP1_MASK                                0x8
#define _CRCCON0_ACCM_POSN                                  0x4
#define _CRCCON0_ACCM_POSITION                              0x4
#define _CRCCON0_ACCM_SIZE                                  0x1
#define _CRCCON0_ACCM_LENGTH                                0x1
#define _CRCCON0_ACCM_MASK                                  0x10
#define _CRCCON0_BUSY_POSN                                  0x5
#define _CRCCON0_BUSY_POSITION                              0x5
#define _CRCCON0_BUSY_SIZE                                  0x1
#define _CRCCON0_BUSY_LENGTH                                0x1
#define _CRCCON0_BUSY_MASK                                  0x20
#define _CRCCON0_GO_POSN                                    0x6
#define _CRCCON0_GO_POSITION                                0x6
#define _CRCCON0_GO_SIZE                                    0x1
#define _CRCCON0_GO_LENGTH                                  0x1
#define _CRCCON0_GO_MASK                                    0x40
#define _CRCCON0_EN_POSN                                    0x7
#define _CRCCON0_EN_POSITION                                0x7
#define _CRCCON0_EN_SIZE                                    0x1
#define _CRCCON0_EN_LENGTH                                  0x1
#define _CRCCON0_EN_MASK                                    0x80

// Register: CRCCON1
#define CRCCON1 CRCCON1
extern volatile unsigned char           CRCCON1             __at(0x1CA6);
#ifndef _LIB_BUILD
asm("CRCCON1 equ 01CA6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLEN                   :5;
    };
    struct {
        unsigned PLEN0                  :1;
        unsigned PLEN1                  :1;
        unsigned PLEN2                  :1;
        unsigned PLEN3                  :1;
        unsigned PLEN4                  :1;
    };
} CRCCON1bits_t;
extern volatile CRCCON1bits_t CRCCON1bits __at(0x1CA6);
// bitfield macros
#define _CRCCON1_PLEN_POSN                                  0x0
#define _CRCCON1_PLEN_POSITION                              0x0
#define _CRCCON1_PLEN_SIZE                                  0x5
#define _CRCCON1_PLEN_LENGTH                                0x5
#define _CRCCON1_PLEN_MASK                                  0x1F
#define _CRCCON1_PLEN0_POSN                                 0x0
#define _CRCCON1_PLEN0_POSITION                             0x0
#define _CRCCON1_PLEN0_SIZE                                 0x1
#define _CRCCON1_PLEN0_LENGTH                               0x1
#define _CRCCON1_PLEN0_MASK                                 0x1
#define _CRCCON1_PLEN1_POSN                                 0x1
#define _CRCCON1_PLEN1_POSITION                             0x1
#define _CRCCON1_PLEN1_SIZE                                 0x1
#define _CRCCON1_PLEN1_LENGTH                               0x1
#define _CRCCON1_PLEN1_MASK                                 0x2
#define _CRCCON1_PLEN2_POSN                                 0x2
#define _CRCCON1_PLEN2_POSITION                             0x2
#define _CRCCON1_PLEN2_SIZE                                 0x1
#define _CRCCON1_PLEN2_LENGTH                               0x1
#define _CRCCON1_PLEN2_MASK                                 0x4
#define _CRCCON1_PLEN3_POSN                                 0x3
#define _CRCCON1_PLEN3_POSITION                             0x3
#define _CRCCON1_PLEN3_SIZE                                 0x1
#define _CRCCON1_PLEN3_LENGTH                               0x1
#define _CRCCON1_PLEN3_MASK                                 0x8
#define _CRCCON1_PLEN4_POSN                                 0x4
#define _CRCCON1_PLEN4_POSITION                             0x4
#define _CRCCON1_PLEN4_SIZE                                 0x1
#define _CRCCON1_PLEN4_LENGTH                               0x1
#define _CRCCON1_PLEN4_MASK                                 0x10

// Register: CRCCON2
#define CRCCON2 CRCCON2
extern volatile unsigned char           CRCCON2             __at(0x1CA7);
#ifndef _LIB_BUILD
asm("CRCCON2 equ 01CA7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DLEN                   :5;
    };
    struct {
        unsigned DLEN0                  :1;
        unsigned DLEN1                  :1;
        unsigned DLEN2                  :1;
        unsigned DLEN3                  :1;
        unsigned DLEN4                  :1;
    };
} CRCCON2bits_t;
extern volatile CRCCON2bits_t CRCCON2bits __at(0x1CA7);
// bitfield macros
#define _CRCCON2_DLEN_POSN                                  0x0
#define _CRCCON2_DLEN_POSITION                              0x0
#define _CRCCON2_DLEN_SIZE                                  0x5
#define _CRCCON2_DLEN_LENGTH                                0x5
#define _CRCCON2_DLEN_MASK                                  0x1F
#define _CRCCON2_DLEN0_POSN                                 0x0
#define _CRCCON2_DLEN0_POSITION                             0x0
#define _CRCCON2_DLEN0_SIZE                                 0x1
#define _CRCCON2_DLEN0_LENGTH                               0x1
#define _CRCCON2_DLEN0_MASK                                 0x1
#define _CRCCON2_DLEN1_POSN                                 0x1
#define _CRCCON2_DLEN1_POSITION                             0x1
#define _CRCCON2_DLEN1_SIZE                                 0x1
#define _CRCCON2_DLEN1_LENGTH                               0x1
#define _CRCCON2_DLEN1_MASK                                 0x2
#define _CRCCON2_DLEN2_POSN                                 0x2
#define _CRCCON2_DLEN2_POSITION                             0x2
#define _CRCCON2_DLEN2_SIZE                                 0x1
#define _CRCCON2_DLEN2_LENGTH                               0x1
#define _CRCCON2_DLEN2_MASK                                 0x4
#define _CRCCON2_DLEN3_POSN                                 0x3
#define _CRCCON2_DLEN3_POSITION                             0x3
#define _CRCCON2_DLEN3_SIZE                                 0x1
#define _CRCCON2_DLEN3_LENGTH                               0x1
#define _CRCCON2_DLEN3_MASK                                 0x8
#define _CRCCON2_DLEN4_POSN                                 0x4
#define _CRCCON2_DLEN4_POSITION                             0x4
#define _CRCCON2_DLEN4_SIZE                                 0x1
#define _CRCCON2_DLEN4_LENGTH                               0x1
#define _CRCCON2_DLEN4_MASK                                 0x10

// Register: ADLTH
#define ADLTH ADLTH
extern volatile unsigned short          ADLTH               __at(0x1D0C);
#ifndef _LIB_BUILD
asm("ADLTH equ 01D0Ch");
#endif

// Register: ADLTHL
#define ADLTHL ADLTHL
extern volatile unsigned char           ADLTHL              __at(0x1D0C);
#ifndef _LIB_BUILD
asm("ADLTHL equ 01D0Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LTH                    :8;
    };
    struct {
        unsigned ADLTH0                 :1;
        unsigned ADLTH1                 :1;
        unsigned ADLTH2                 :1;
        unsigned ADLTH3                 :1;
        unsigned ADLTH4                 :1;
        unsigned ADLTH5                 :1;
        unsigned ADLTH6                 :1;
        unsigned ADLTH7                 :1;
    };
    struct {
        unsigned ADLTH                  :8;
    };
    struct {
        unsigned LTH0                   :1;
        unsigned LTH1                   :1;
        unsigned LTH2                   :1;
        unsigned LTH3                   :1;
        unsigned LTH4                   :1;
        unsigned LTH5                   :1;
        unsigned LTH6                   :1;
        unsigned LTH7                   :1;
    };
} ADLTHLbits_t;
extern volatile ADLTHLbits_t ADLTHLbits __at(0x1D0C);
// bitfield macros
#define _ADLTHL_LTH_POSN                                    0x0
#define _ADLTHL_LTH_POSITION                                0x0
#define _ADLTHL_LTH_SIZE                                    0x8
#define _ADLTHL_LTH_LENGTH                                  0x8
#define _ADLTHL_LTH_MASK                                    0xFF
#define _ADLTHL_ADLTH0_POSN                                 0x0
#define _ADLTHL_ADLTH0_POSITION                             0x0
#define _ADLTHL_ADLTH0_SIZE                                 0x1
#define _ADLTHL_ADLTH0_LENGTH                               0x1
#define _ADLTHL_ADLTH0_MASK                                 0x1
#define _ADLTHL_ADLTH1_POSN                                 0x1
#define _ADLTHL_ADLTH1_POSITION                             0x1
#define _ADLTHL_ADLTH1_SIZE                                 0x1
#define _ADLTHL_ADLTH1_LENGTH                               0x1
#define _ADLTHL_ADLTH1_MASK                                 0x2
#define _ADLTHL_ADLTH2_POSN                                 0x2
#define _ADLTHL_ADLTH2_POSITION                             0x2
#define _ADLTHL_ADLTH2_SIZE                                 0x1
#define _ADLTHL_ADLTH2_LENGTH                               0x1
#define _ADLTHL_ADLTH2_MASK                                 0x4
#define _ADLTHL_ADLTH3_POSN                                 0x3
#define _ADLTHL_ADLTH3_POSITION                             0x3
#define _ADLTHL_ADLTH3_SIZE                                 0x1
#define _ADLTHL_ADLTH3_LENGTH                               0x1
#define _ADLTHL_ADLTH3_MASK                                 0x8
#define _ADLTHL_ADLTH4_POSN                                 0x4
#define _ADLTHL_ADLTH4_POSITION                             0x4
#define _ADLTHL_ADLTH4_SIZE                                 0x1
#define _ADLTHL_ADLTH4_LENGTH                               0x1
#define _ADLTHL_ADLTH4_MASK                                 0x10
#define _ADLTHL_ADLTH5_POSN                                 0x5
#define _ADLTHL_ADLTH5_POSITION                             0x5
#define _ADLTHL_ADLTH5_SIZE                                 0x1
#define _ADLTHL_ADLTH5_LENGTH                               0x1
#define _ADLTHL_ADLTH5_MASK                                 0x20
#define _ADLTHL_ADLTH6_POSN                                 0x6
#define _ADLTHL_ADLTH6_POSITION                             0x6
#define _ADLTHL_ADLTH6_SIZE                                 0x1
#define _ADLTHL_ADLTH6_LENGTH                               0x1
#define _ADLTHL_ADLTH6_MASK                                 0x40
#define _ADLTHL_ADLTH7_POSN                                 0x7
#define _ADLTHL_ADLTH7_POSITION                             0x7
#define _ADLTHL_ADLTH7_SIZE                                 0x1
#define _ADLTHL_ADLTH7_LENGTH                               0x1
#define _ADLTHL_ADLTH7_MASK                                 0x80
#define _ADLTHL_ADLTH_POSN                                  0x0
#define _ADLTHL_ADLTH_POSITION                              0x0
#define _ADLTHL_ADLTH_SIZE                                  0x8
#define _ADLTHL_ADLTH_LENGTH                                0x8
#define _ADLTHL_ADLTH_MASK                                  0xFF
#define _ADLTHL_LTH0_POSN                                   0x0
#define _ADLTHL_LTH0_POSITION                               0x0
#define _ADLTHL_LTH0_SIZE                                   0x1
#define _ADLTHL_LTH0_LENGTH                                 0x1
#define _ADLTHL_LTH0_MASK                                   0x1
#define _ADLTHL_LTH1_POSN                                   0x1
#define _ADLTHL_LTH1_POSITION                               0x1
#define _ADLTHL_LTH1_SIZE                                   0x1
#define _ADLTHL_LTH1_LENGTH                                 0x1
#define _ADLTHL_LTH1_MASK                                   0x2
#define _ADLTHL_LTH2_POSN                                   0x2
#define _ADLTHL_LTH2_POSITION                               0x2
#define _ADLTHL_LTH2_SIZE                                   0x1
#define _ADLTHL_LTH2_LENGTH                                 0x1
#define _ADLTHL_LTH2_MASK                                   0x4
#define _ADLTHL_LTH3_POSN                                   0x3
#define _ADLTHL_LTH3_POSITION                               0x3
#define _ADLTHL_LTH3_SIZE                                   0x1
#define _ADLTHL_LTH3_LENGTH                                 0x1
#define _ADLTHL_LTH3_MASK                                   0x8
#define _ADLTHL_LTH4_POSN                                   0x4
#define _ADLTHL_LTH4_POSITION                               0x4
#define _ADLTHL_LTH4_SIZE                                   0x1
#define _ADLTHL_LTH4_LENGTH                                 0x1
#define _ADLTHL_LTH4_MASK                                   0x10
#define _ADLTHL_LTH5_POSN                                   0x5
#define _ADLTHL_LTH5_POSITION                               0x5
#define _ADLTHL_LTH5_SIZE                                   0x1
#define _ADLTHL_LTH5_LENGTH                                 0x1
#define _ADLTHL_LTH5_MASK                                   0x20
#define _ADLTHL_LTH6_POSN                                   0x6
#define _ADLTHL_LTH6_POSITION                               0x6
#define _ADLTHL_LTH6_SIZE                                   0x1
#define _ADLTHL_LTH6_LENGTH                                 0x1
#define _ADLTHL_LTH6_MASK                                   0x40
#define _ADLTHL_LTH7_POSN                                   0x7
#define _ADLTHL_LTH7_POSITION                               0x7
#define _ADLTHL_LTH7_SIZE                                   0x1
#define _ADLTHL_LTH7_LENGTH                                 0x1
#define _ADLTHL_LTH7_MASK                                   0x80

// Register: ADLTHH
#define ADLTHH ADLTHH
extern volatile unsigned char           ADLTHH              __at(0x1D0D);
#ifndef _LIB_BUILD
asm("ADLTHH equ 01D0Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LTH                    :8;
    };
    struct {
        unsigned ADLTH8                 :1;
        unsigned ADLTH9                 :1;
        unsigned ADLTH10                :1;
        unsigned ADLTH11                :1;
        unsigned ADLTH12                :1;
        unsigned ADLTH13                :1;
        unsigned ADLTH14                :1;
        unsigned ADLTH15                :1;
    };
    struct {
        unsigned ADLTH                  :8;
    };
    struct {
        unsigned LTH8                   :1;
        unsigned LTH9                   :1;
        unsigned LTH10                  :1;
        unsigned LTH11                  :1;
        unsigned LTH12                  :1;
        unsigned LTH13                  :1;
        unsigned LTH14                  :1;
        unsigned LTH15                  :1;
    };
} ADLTHHbits_t;
extern volatile ADLTHHbits_t ADLTHHbits __at(0x1D0D);
// bitfield macros
#define _ADLTHH_LTH_POSN                                    0x0
#define _ADLTHH_LTH_POSITION                                0x0
#define _ADLTHH_LTH_SIZE                                    0x8
#define _ADLTHH_LTH_LENGTH                                  0x8
#define _ADLTHH_LTH_MASK                                    0xFF
#define _ADLTHH_ADLTH8_POSN                                 0x0
#define _ADLTHH_ADLTH8_POSITION                             0x0
#define _ADLTHH_ADLTH8_SIZE                                 0x1
#define _ADLTHH_ADLTH8_LENGTH                               0x1
#define _ADLTHH_ADLTH8_MASK                                 0x1
#define _ADLTHH_ADLTH9_POSN                                 0x1
#define _ADLTHH_ADLTH9_POSITION                             0x1
#define _ADLTHH_ADLTH9_SIZE                                 0x1
#define _ADLTHH_ADLTH9_LENGTH                               0x1
#define _ADLTHH_ADLTH9_MASK                                 0x2
#define _ADLTHH_ADLTH10_POSN                                0x2
#define _ADLTHH_ADLTH10_POSITION                            0x2
#define _ADLTHH_ADLTH10_SIZE                                0x1
#define _ADLTHH_ADLTH10_LENGTH                              0x1
#define _ADLTHH_ADLTH10_MASK                                0x4
#define _ADLTHH_ADLTH11_POSN                                0x3
#define _ADLTHH_ADLTH11_POSITION                            0x3
#define _ADLTHH_ADLTH11_SIZE                                0x1
#define _ADLTHH_ADLTH11_LENGTH                              0x1
#define _ADLTHH_ADLTH11_MASK                                0x8
#define _ADLTHH_ADLTH12_POSN                                0x4
#define _ADLTHH_ADLTH12_POSITION                            0x4
#define _ADLTHH_ADLTH12_SIZE                                0x1
#define _ADLTHH_ADLTH12_LENGTH                              0x1
#define _ADLTHH_ADLTH12_MASK                                0x10
#define _ADLTHH_ADLTH13_POSN                                0x5
#define _ADLTHH_ADLTH13_POSITION                            0x5
#define _ADLTHH_ADLTH13_SIZE                                0x1
#define _ADLTHH_ADLTH13_LENGTH                              0x1
#define _ADLTHH_ADLTH13_MASK                                0x20
#define _ADLTHH_ADLTH14_POSN                                0x6
#define _ADLTHH_ADLTH14_POSITION                            0x6
#define _ADLTHH_ADLTH14_SIZE                                0x1
#define _ADLTHH_ADLTH14_LENGTH                              0x1
#define _ADLTHH_ADLTH14_MASK                                0x40
#define _ADLTHH_ADLTH15_POSN                                0x7
#define _ADLTHH_ADLTH15_POSITION                            0x7
#define _ADLTHH_ADLTH15_SIZE                                0x1
#define _ADLTHH_ADLTH15_LENGTH                              0x1
#define _ADLTHH_ADLTH15_MASK                                0x80
#define _ADLTHH_ADLTH_POSN                                  0x0
#define _ADLTHH_ADLTH_POSITION                              0x0
#define _ADLTHH_ADLTH_SIZE                                  0x8
#define _ADLTHH_ADLTH_LENGTH                                0x8
#define _ADLTHH_ADLTH_MASK                                  0xFF
#define _ADLTHH_LTH8_POSN                                   0x0
#define _ADLTHH_LTH8_POSITION                               0x0
#define _ADLTHH_LTH8_SIZE                                   0x1
#define _ADLTHH_LTH8_LENGTH                                 0x1
#define _ADLTHH_LTH8_MASK                                   0x1
#define _ADLTHH_LTH9_POSN                                   0x1
#define _ADLTHH_LTH9_POSITION                               0x1
#define _ADLTHH_LTH9_SIZE                                   0x1
#define _ADLTHH_LTH9_LENGTH                                 0x1
#define _ADLTHH_LTH9_MASK                                   0x2
#define _ADLTHH_LTH10_POSN                                  0x2
#define _ADLTHH_LTH10_POSITION                              0x2
#define _ADLTHH_LTH10_SIZE                                  0x1
#define _ADLTHH_LTH10_LENGTH                                0x1
#define _ADLTHH_LTH10_MASK                                  0x4
#define _ADLTHH_LTH11_POSN                                  0x3
#define _ADLTHH_LTH11_POSITION                              0x3
#define _ADLTHH_LTH11_SIZE                                  0x1
#define _ADLTHH_LTH11_LENGTH                                0x1
#define _ADLTHH_LTH11_MASK                                  0x8
#define _ADLTHH_LTH12_POSN                                  0x4
#define _ADLTHH_LTH12_POSITION                              0x4
#define _ADLTHH_LTH12_SIZE                                  0x1
#define _ADLTHH_LTH12_LENGTH                                0x1
#define _ADLTHH_LTH12_MASK                                  0x10
#define _ADLTHH_LTH13_POSN                                  0x5
#define _ADLTHH_LTH13_POSITION                              0x5
#define _ADLTHH_LTH13_SIZE                                  0x1
#define _ADLTHH_LTH13_LENGTH                                0x1
#define _ADLTHH_LTH13_MASK                                  0x20
#define _ADLTHH_LTH14_POSN                                  0x6
#define _ADLTHH_LTH14_POSITION                              0x6
#define _ADLTHH_LTH14_SIZE                                  0x1
#define _ADLTHH_LTH14_LENGTH                                0x1
#define _ADLTHH_LTH14_MASK                                  0x40
#define _ADLTHH_LTH15_POSN                                  0x7
#define _ADLTHH_LTH15_POSITION                              0x7
#define _ADLTHH_LTH15_SIZE                                  0x1
#define _ADLTHH_LTH15_LENGTH                                0x1
#define _ADLTHH_LTH15_MASK                                  0x80

// Register: ADUTH
#define ADUTH ADUTH
extern volatile unsigned short          ADUTH               __at(0x1D0E);
#ifndef _LIB_BUILD
asm("ADUTH equ 01D0Eh");
#endif

// Register: ADUTHL
#define ADUTHL ADUTHL
extern volatile unsigned char           ADUTHL              __at(0x1D0E);
#ifndef _LIB_BUILD
asm("ADUTHL equ 01D0Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned UTH                    :8;
    };
    struct {
        unsigned ADUTH0                 :1;
        unsigned ADUTH1                 :1;
        unsigned ADUTH2                 :1;
        unsigned ADUTH3                 :1;
        unsigned ADUTH4                 :1;
        unsigned ADUTH5                 :1;
        unsigned ADUTH6                 :1;
        unsigned ADUTH7                 :1;
    };
    struct {
        unsigned ADUTH                  :8;
    };
    struct {
        unsigned UTH0                   :1;
        unsigned UTH1                   :1;
        unsigned UTH2                   :1;
        unsigned UTH3                   :1;
        unsigned UTH4                   :1;
        unsigned UTH5                   :1;
        unsigned UTH6                   :1;
        unsigned UTH7                   :1;
    };
} ADUTHLbits_t;
extern volatile ADUTHLbits_t ADUTHLbits __at(0x1D0E);
// bitfield macros
#define _ADUTHL_UTH_POSN                                    0x0
#define _ADUTHL_UTH_POSITION                                0x0
#define _ADUTHL_UTH_SIZE                                    0x8
#define _ADUTHL_UTH_LENGTH                                  0x8
#define _ADUTHL_UTH_MASK                                    0xFF
#define _ADUTHL_ADUTH0_POSN                                 0x0
#define _ADUTHL_ADUTH0_POSITION                             0x0
#define _ADUTHL_ADUTH0_SIZE                                 0x1
#define _ADUTHL_ADUTH0_LENGTH                               0x1
#define _ADUTHL_ADUTH0_MASK                                 0x1
#define _ADUTHL_ADUTH1_POSN                                 0x1
#define _ADUTHL_ADUTH1_POSITION                             0x1
#define _ADUTHL_ADUTH1_SIZE                                 0x1
#define _ADUTHL_ADUTH1_LENGTH                               0x1
#define _ADUTHL_ADUTH1_MASK                                 0x2
#define _ADUTHL_ADUTH2_POSN                                 0x2
#define _ADUTHL_ADUTH2_POSITION                             0x2
#define _ADUTHL_ADUTH2_SIZE                                 0x1
#define _ADUTHL_ADUTH2_LENGTH                               0x1
#define _ADUTHL_ADUTH2_MASK                                 0x4
#define _ADUTHL_ADUTH3_POSN                                 0x3
#define _ADUTHL_ADUTH3_POSITION                             0x3
#define _ADUTHL_ADUTH3_SIZE                                 0x1
#define _ADUTHL_ADUTH3_LENGTH                               0x1
#define _ADUTHL_ADUTH3_MASK                                 0x8
#define _ADUTHL_ADUTH4_POSN                                 0x4
#define _ADUTHL_ADUTH4_POSITION                             0x4
#define _ADUTHL_ADUTH4_SIZE                                 0x1
#define _ADUTHL_ADUTH4_LENGTH                               0x1
#define _ADUTHL_ADUTH4_MASK                                 0x10
#define _ADUTHL_ADUTH5_POSN                                 0x5
#define _ADUTHL_ADUTH5_POSITION                             0x5
#define _ADUTHL_ADUTH5_SIZE                                 0x1
#define _ADUTHL_ADUTH5_LENGTH                               0x1
#define _ADUTHL_ADUTH5_MASK                                 0x20
#define _ADUTHL_ADUTH6_POSN                                 0x6
#define _ADUTHL_ADUTH6_POSITION                             0x6
#define _ADUTHL_ADUTH6_SIZE                                 0x1
#define _ADUTHL_ADUTH6_LENGTH                               0x1
#define _ADUTHL_ADUTH6_MASK                                 0x40
#define _ADUTHL_ADUTH7_POSN                                 0x7
#define _ADUTHL_ADUTH7_POSITION                             0x7
#define _ADUTHL_ADUTH7_SIZE                                 0x1
#define _ADUTHL_ADUTH7_LENGTH                               0x1
#define _ADUTHL_ADUTH7_MASK                                 0x80
#define _ADUTHL_ADUTH_POSN                                  0x0
#define _ADUTHL_ADUTH_POSITION                              0x0
#define _ADUTHL_ADUTH_SIZE                                  0x8
#define _ADUTHL_ADUTH_LENGTH                                0x8
#define _ADUTHL_ADUTH_MASK                                  0xFF
#define _ADUTHL_UTH0_POSN                                   0x0
#define _ADUTHL_UTH0_POSITION                               0x0
#define _ADUTHL_UTH0_SIZE                                   0x1
#define _ADUTHL_UTH0_LENGTH                                 0x1
#define _ADUTHL_UTH0_MASK                                   0x1
#define _ADUTHL_UTH1_POSN                                   0x1
#define _ADUTHL_UTH1_POSITION                               0x1
#define _ADUTHL_UTH1_SIZE                                   0x1
#define _ADUTHL_UTH1_LENGTH                                 0x1
#define _ADUTHL_UTH1_MASK                                   0x2
#define _ADUTHL_UTH2_POSN                                   0x2
#define _ADUTHL_UTH2_POSITION                               0x2
#define _ADUTHL_UTH2_SIZE                                   0x1
#define _ADUTHL_UTH2_LENGTH                                 0x1
#define _ADUTHL_UTH2_MASK                                   0x4
#define _ADUTHL_UTH3_POSN                                   0x3
#define _ADUTHL_UTH3_POSITION                               0x3
#define _ADUTHL_UTH3_SIZE                                   0x1
#define _ADUTHL_UTH3_LENGTH                                 0x1
#define _ADUTHL_UTH3_MASK                                   0x8
#define _ADUTHL_UTH4_POSN                                   0x4
#define _ADUTHL_UTH4_POSITION                               0x4
#define _ADUTHL_UTH4_SIZE                                   0x1
#define _ADUTHL_UTH4_LENGTH                                 0x1
#define _ADUTHL_UTH4_MASK                                   0x10
#define _ADUTHL_UTH5_POSN                                   0x5
#define _ADUTHL_UTH5_POSITION                               0x5
#define _ADUTHL_UTH5_SIZE                                   0x1
#define _ADUTHL_UTH5_LENGTH                                 0x1
#define _ADUTHL_UTH5_MASK                                   0x20
#define _ADUTHL_UTH6_POSN                                   0x6
#define _ADUTHL_UTH6_POSITION                               0x6
#define _ADUTHL_UTH6_SIZE                                   0x1
#define _ADUTHL_UTH6_LENGTH                                 0x1
#define _ADUTHL_UTH6_MASK                                   0x40
#define _ADUTHL_UTH7_POSN                                   0x7
#define _ADUTHL_UTH7_POSITION                               0x7
#define _ADUTHL_UTH7_SIZE                                   0x1
#define _ADUTHL_UTH7_LENGTH                                 0x1
#define _ADUTHL_UTH7_MASK                                   0x80

// Register: ADUTHH
#define ADUTHH ADUTHH
extern volatile unsigned char           ADUTHH              __at(0x1D0F);
#ifndef _LIB_BUILD
asm("ADUTHH equ 01D0Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned UTH                    :8;
    };
    struct {
        unsigned ADUTH8                 :1;
        unsigned ADUTH9                 :1;
        unsigned ADUTH10                :1;
        unsigned ADUTH11                :1;
        unsigned ADUTH12                :1;
        unsigned ADUTH13                :1;
        unsigned ADUTH14                :1;
        unsigned ADUTH15                :1;
    };
    struct {
        unsigned ADUTH                  :8;
    };
    struct {
        unsigned UTH8                   :1;
        unsigned UTH9                   :1;
        unsigned UTH10                  :1;
        unsigned UTH11                  :1;
        unsigned UTH12                  :1;
        unsigned UTH13                  :1;
        unsigned UTH14                  :1;
        unsigned UTH15                  :1;
    };
} ADUTHHbits_t;
extern volatile ADUTHHbits_t ADUTHHbits __at(0x1D0F);
// bitfield macros
#define _ADUTHH_UTH_POSN                                    0x0
#define _ADUTHH_UTH_POSITION                                0x0
#define _ADUTHH_UTH_SIZE                                    0x8
#define _ADUTHH_UTH_LENGTH                                  0x8
#define _ADUTHH_UTH_MASK                                    0xFF
#define _ADUTHH_ADUTH8_POSN                                 0x0
#define _ADUTHH_ADUTH8_POSITION                             0x0
#define _ADUTHH_ADUTH8_SIZE                                 0x1
#define _ADUTHH_ADUTH8_LENGTH                               0x1
#define _ADUTHH_ADUTH8_MASK                                 0x1
#define _ADUTHH_ADUTH9_POSN                                 0x1
#define _ADUTHH_ADUTH9_POSITION                             0x1
#define _ADUTHH_ADUTH9_SIZE                                 0x1
#define _ADUTHH_ADUTH9_LENGTH                               0x1
#define _ADUTHH_ADUTH9_MASK                                 0x2
#define _ADUTHH_ADUTH10_POSN                                0x2
#define _ADUTHH_ADUTH10_POSITION                            0x2
#define _ADUTHH_ADUTH10_SIZE                                0x1
#define _ADUTHH_ADUTH10_LENGTH                              0x1
#define _ADUTHH_ADUTH10_MASK                                0x4
#define _ADUTHH_ADUTH11_POSN                                0x3
#define _ADUTHH_ADUTH11_POSITION                            0x3
#define _ADUTHH_ADUTH11_SIZE                                0x1
#define _ADUTHH_ADUTH11_LENGTH                              0x1
#define _ADUTHH_ADUTH11_MASK                                0x8
#define _ADUTHH_ADUTH12_POSN                                0x4
#define _ADUTHH_ADUTH12_POSITION                            0x4
#define _ADUTHH_ADUTH12_SIZE                                0x1
#define _ADUTHH_ADUTH12_LENGTH                              0x1
#define _ADUTHH_ADUTH12_MASK                                0x10
#define _ADUTHH_ADUTH13_POSN                                0x5
#define _ADUTHH_ADUTH13_POSITION                            0x5
#define _ADUTHH_ADUTH13_SIZE                                0x1
#define _ADUTHH_ADUTH13_LENGTH                              0x1
#define _ADUTHH_ADUTH13_MASK                                0x20
#define _ADUTHH_ADUTH14_POSN                                0x6
#define _ADUTHH_ADUTH14_POSITION                            0x6
#define _ADUTHH_ADUTH14_SIZE                                0x1
#define _ADUTHH_ADUTH14_LENGTH                              0x1
#define _ADUTHH_ADUTH14_MASK                                0x40
#define _ADUTHH_ADUTH15_POSN                                0x7
#define _ADUTHH_ADUTH15_POSITION                            0x7
#define _ADUTHH_ADUTH15_SIZE                                0x1
#define _ADUTHH_ADUTH15_LENGTH                              0x1
#define _ADUTHH_ADUTH15_MASK                                0x80
#define _ADUTHH_ADUTH_POSN                                  0x0
#define _ADUTHH_ADUTH_POSITION                              0x0
#define _ADUTHH_ADUTH_SIZE                                  0x8
#define _ADUTHH_ADUTH_LENGTH                                0x8
#define _ADUTHH_ADUTH_MASK                                  0xFF
#define _ADUTHH_UTH8_POSN                                   0x0
#define _ADUTHH_UTH8_POSITION                               0x0
#define _ADUTHH_UTH8_SIZE                                   0x1
#define _ADUTHH_UTH8_LENGTH                                 0x1
#define _ADUTHH_UTH8_MASK                                   0x1
#define _ADUTHH_UTH9_POSN                                   0x1
#define _ADUTHH_UTH9_POSITION                               0x1
#define _ADUTHH_UTH9_SIZE                                   0x1
#define _ADUTHH_UTH9_LENGTH                                 0x1
#define _ADUTHH_UTH9_MASK                                   0x2
#define _ADUTHH_UTH10_POSN                                  0x2
#define _ADUTHH_UTH10_POSITION                              0x2
#define _ADUTHH_UTH10_SIZE                                  0x1
#define _ADUTHH_UTH10_LENGTH                                0x1
#define _ADUTHH_UTH10_MASK                                  0x4
#define _ADUTHH_UTH11_POSN                                  0x3
#define _ADUTHH_UTH11_POSITION                              0x3
#define _ADUTHH_UTH11_SIZE                                  0x1
#define _ADUTHH_UTH11_LENGTH                                0x1
#define _ADUTHH_UTH11_MASK                                  0x8
#define _ADUTHH_UTH12_POSN                                  0x4
#define _ADUTHH_UTH12_POSITION                              0x4
#define _ADUTHH_UTH12_SIZE                                  0x1
#define _ADUTHH_UTH12_LENGTH                                0x1
#define _ADUTHH_UTH12_MASK                                  0x10
#define _ADUTHH_UTH13_POSN                                  0x5
#define _ADUTHH_UTH13_POSITION                              0x5
#define _ADUTHH_UTH13_SIZE                                  0x1
#define _ADUTHH_UTH13_LENGTH                                0x1
#define _ADUTHH_UTH13_MASK                                  0x20
#define _ADUTHH_UTH14_POSN                                  0x6
#define _ADUTHH_UTH14_POSITION                              0x6
#define _ADUTHH_UTH14_SIZE                                  0x1
#define _ADUTHH_UTH14_LENGTH                                0x1
#define _ADUTHH_UTH14_MASK                                  0x40
#define _ADUTHH_UTH15_POSN                                  0x7
#define _ADUTHH_UTH15_POSITION                              0x7
#define _ADUTHH_UTH15_SIZE                                  0x1
#define _ADUTHH_UTH15_LENGTH                                0x1
#define _ADUTHH_UTH15_MASK                                  0x80

// Register: ADERR
#define ADERR ADERR
extern volatile unsigned short          ADERR               __at(0x1D10);
#ifndef _LIB_BUILD
asm("ADERR equ 01D10h");
#endif

// Register: ADERRL
#define ADERRL ADERRL
extern volatile unsigned char           ADERRL              __at(0x1D10);
#ifndef _LIB_BUILD
asm("ADERRL equ 01D10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERR                    :8;
    };
    struct {
        unsigned ADERR0                 :1;
        unsigned ADERR1                 :1;
        unsigned ADERR2                 :1;
        unsigned ADERR3                 :1;
        unsigned ADERR4                 :1;
        unsigned ADERR5                 :1;
        unsigned ADERR6                 :1;
        unsigned ADERR7                 :1;
    };
    struct {
        unsigned ADERR                  :8;
    };
    struct {
        unsigned ERR0                   :1;
        unsigned ERR1                   :1;
        unsigned ERR2                   :1;
        unsigned ERR3                   :1;
        unsigned ERR4                   :1;
        unsigned ERR5                   :1;
        unsigned ERR6                   :1;
        unsigned ERR7                   :1;
    };
} ADERRLbits_t;
extern volatile ADERRLbits_t ADERRLbits __at(0x1D10);
// bitfield macros
#define _ADERRL_ERR_POSN                                    0x0
#define _ADERRL_ERR_POSITION                                0x0
#define _ADERRL_ERR_SIZE                                    0x8
#define _ADERRL_ERR_LENGTH                                  0x8
#define _ADERRL_ERR_MASK                                    0xFF
#define _ADERRL_ADERR0_POSN                                 0x0
#define _ADERRL_ADERR0_POSITION                             0x0
#define _ADERRL_ADERR0_SIZE                                 0x1
#define _ADERRL_ADERR0_LENGTH                               0x1
#define _ADERRL_ADERR0_MASK                                 0x1
#define _ADERRL_ADERR1_POSN                                 0x1
#define _ADERRL_ADERR1_POSITION                             0x1
#define _ADERRL_ADERR1_SIZE                                 0x1
#define _ADERRL_ADERR1_LENGTH                               0x1
#define _ADERRL_ADERR1_MASK                                 0x2
#define _ADERRL_ADERR2_POSN                                 0x2
#define _ADERRL_ADERR2_POSITION                             0x2
#define _ADERRL_ADERR2_SIZE                                 0x1
#define _ADERRL_ADERR2_LENGTH                               0x1
#define _ADERRL_ADERR2_MASK                                 0x4
#define _ADERRL_ADERR3_POSN                                 0x3
#define _ADERRL_ADERR3_POSITION                             0x3
#define _ADERRL_ADERR3_SIZE                                 0x1
#define _ADERRL_ADERR3_LENGTH                               0x1
#define _ADERRL_ADERR3_MASK                                 0x8
#define _ADERRL_ADERR4_POSN                                 0x4
#define _ADERRL_ADERR4_POSITION                             0x4
#define _ADERRL_ADERR4_SIZE                                 0x1
#define _ADERRL_ADERR4_LENGTH                               0x1
#define _ADERRL_ADERR4_MASK                                 0x10
#define _ADERRL_ADERR5_POSN                                 0x5
#define _ADERRL_ADERR5_POSITION                             0x5
#define _ADERRL_ADERR5_SIZE                                 0x1
#define _ADERRL_ADERR5_LENGTH                               0x1
#define _ADERRL_ADERR5_MASK                                 0x20
#define _ADERRL_ADERR6_POSN                                 0x6
#define _ADERRL_ADERR6_POSITION                             0x6
#define _ADERRL_ADERR6_SIZE                                 0x1
#define _ADERRL_ADERR6_LENGTH                               0x1
#define _ADERRL_ADERR6_MASK                                 0x40
#define _ADERRL_ADERR7_POSN                                 0x7
#define _ADERRL_ADERR7_POSITION                             0x7
#define _ADERRL_ADERR7_SIZE                                 0x1
#define _ADERRL_ADERR7_LENGTH                               0x1
#define _ADERRL_ADERR7_MASK                                 0x80
#define _ADERRL_ADERR_POSN                                  0x0
#define _ADERRL_ADERR_POSITION                              0x0
#define _ADERRL_ADERR_SIZE                                  0x8
#define _ADERRL_ADERR_LENGTH                                0x8
#define _ADERRL_ADERR_MASK                                  0xFF
#define _ADERRL_ERR0_POSN                                   0x0
#define _ADERRL_ERR0_POSITION                               0x0
#define _ADERRL_ERR0_SIZE                                   0x1
#define _ADERRL_ERR0_LENGTH                                 0x1
#define _ADERRL_ERR0_MASK                                   0x1
#define _ADERRL_ERR1_POSN                                   0x1
#define _ADERRL_ERR1_POSITION                               0x1
#define _ADERRL_ERR1_SIZE                                   0x1
#define _ADERRL_ERR1_LENGTH                                 0x1
#define _ADERRL_ERR1_MASK                                   0x2
#define _ADERRL_ERR2_POSN                                   0x2
#define _ADERRL_ERR2_POSITION                               0x2
#define _ADERRL_ERR2_SIZE                                   0x1
#define _ADERRL_ERR2_LENGTH                                 0x1
#define _ADERRL_ERR2_MASK                                   0x4
#define _ADERRL_ERR3_POSN                                   0x3
#define _ADERRL_ERR3_POSITION                               0x3
#define _ADERRL_ERR3_SIZE                                   0x1
#define _ADERRL_ERR3_LENGTH                                 0x1
#define _ADERRL_ERR3_MASK                                   0x8
#define _ADERRL_ERR4_POSN                                   0x4
#define _ADERRL_ERR4_POSITION                               0x4
#define _ADERRL_ERR4_SIZE                                   0x1
#define _ADERRL_ERR4_LENGTH                                 0x1
#define _ADERRL_ERR4_MASK                                   0x10
#define _ADERRL_ERR5_POSN                                   0x5
#define _ADERRL_ERR5_POSITION                               0x5
#define _ADERRL_ERR5_SIZE                                   0x1
#define _ADERRL_ERR5_LENGTH                                 0x1
#define _ADERRL_ERR5_MASK                                   0x20
#define _ADERRL_ERR6_POSN                                   0x6
#define _ADERRL_ERR6_POSITION                               0x6
#define _ADERRL_ERR6_SIZE                                   0x1
#define _ADERRL_ERR6_LENGTH                                 0x1
#define _ADERRL_ERR6_MASK                                   0x40
#define _ADERRL_ERR7_POSN                                   0x7
#define _ADERRL_ERR7_POSITION                               0x7
#define _ADERRL_ERR7_SIZE                                   0x1
#define _ADERRL_ERR7_LENGTH                                 0x1
#define _ADERRL_ERR7_MASK                                   0x80

// Register: ADERRH
#define ADERRH ADERRH
extern volatile unsigned char           ADERRH              __at(0x1D11);
#ifndef _LIB_BUILD
asm("ADERRH equ 01D11h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERR                    :8;
    };
    struct {
        unsigned ADERR8                 :1;
        unsigned ADERR9                 :1;
        unsigned ADERR10                :1;
        unsigned ADERR11                :1;
        unsigned ADERR12                :1;
        unsigned ADERR13                :1;
        unsigned ADERR14                :1;
        unsigned ADERR15                :1;
    };
    struct {
        unsigned ADERR                  :8;
    };
    struct {
        unsigned ERR8                   :1;
        unsigned ERR9                   :1;
        unsigned ERR10                  :1;
        unsigned ERR11                  :1;
        unsigned ERR12                  :1;
        unsigned ERR13                  :1;
        unsigned ERR14                  :1;
        unsigned ERR15                  :1;
    };
} ADERRHbits_t;
extern volatile ADERRHbits_t ADERRHbits __at(0x1D11);
// bitfield macros
#define _ADERRH_ERR_POSN                                    0x0
#define _ADERRH_ERR_POSITION                                0x0
#define _ADERRH_ERR_SIZE                                    0x8
#define _ADERRH_ERR_LENGTH                                  0x8
#define _ADERRH_ERR_MASK                                    0xFF
#define _ADERRH_ADERR8_POSN                                 0x0
#define _ADERRH_ADERR8_POSITION                             0x0
#define _ADERRH_ADERR8_SIZE                                 0x1
#define _ADERRH_ADERR8_LENGTH                               0x1
#define _ADERRH_ADERR8_MASK                                 0x1
#define _ADERRH_ADERR9_POSN                                 0x1
#define _ADERRH_ADERR9_POSITION                             0x1
#define _ADERRH_ADERR9_SIZE                                 0x1
#define _ADERRH_ADERR9_LENGTH                               0x1
#define _ADERRH_ADERR9_MASK                                 0x2
#define _ADERRH_ADERR10_POSN                                0x2
#define _ADERRH_ADERR10_POSITION                            0x2
#define _ADERRH_ADERR10_SIZE                                0x1
#define _ADERRH_ADERR10_LENGTH                              0x1
#define _ADERRH_ADERR10_MASK                                0x4
#define _ADERRH_ADERR11_POSN                                0x3
#define _ADERRH_ADERR11_POSITION                            0x3
#define _ADERRH_ADERR11_SIZE                                0x1
#define _ADERRH_ADERR11_LENGTH                              0x1
#define _ADERRH_ADERR11_MASK                                0x8
#define _ADERRH_ADERR12_POSN                                0x4
#define _ADERRH_ADERR12_POSITION                            0x4
#define _ADERRH_ADERR12_SIZE                                0x1
#define _ADERRH_ADERR12_LENGTH                              0x1
#define _ADERRH_ADERR12_MASK                                0x10
#define _ADERRH_ADERR13_POSN                                0x5
#define _ADERRH_ADERR13_POSITION                            0x5
#define _ADERRH_ADERR13_SIZE                                0x1
#define _ADERRH_ADERR13_LENGTH                              0x1
#define _ADERRH_ADERR13_MASK                                0x20
#define _ADERRH_ADERR14_POSN                                0x6
#define _ADERRH_ADERR14_POSITION                            0x6
#define _ADERRH_ADERR14_SIZE                                0x1
#define _ADERRH_ADERR14_LENGTH                              0x1
#define _ADERRH_ADERR14_MASK                                0x40
#define _ADERRH_ADERR15_POSN                                0x7
#define _ADERRH_ADERR15_POSITION                            0x7
#define _ADERRH_ADERR15_SIZE                                0x1
#define _ADERRH_ADERR15_LENGTH                              0x1
#define _ADERRH_ADERR15_MASK                                0x80
#define _ADERRH_ADERR_POSN                                  0x0
#define _ADERRH_ADERR_POSITION                              0x0
#define _ADERRH_ADERR_SIZE                                  0x8
#define _ADERRH_ADERR_LENGTH                                0x8
#define _ADERRH_ADERR_MASK                                  0xFF
#define _ADERRH_ERR8_POSN                                   0x0
#define _ADERRH_ERR8_POSITION                               0x0
#define _ADERRH_ERR8_SIZE                                   0x1
#define _ADERRH_ERR8_LENGTH                                 0x1
#define _ADERRH_ERR8_MASK                                   0x1
#define _ADERRH_ERR9_POSN                                   0x1
#define _ADERRH_ERR9_POSITION                               0x1
#define _ADERRH_ERR9_SIZE                                   0x1
#define _ADERRH_ERR9_LENGTH                                 0x1
#define _ADERRH_ERR9_MASK                                   0x2
#define _ADERRH_ERR10_POSN                                  0x2
#define _ADERRH_ERR10_POSITION                              0x2
#define _ADERRH_ERR10_SIZE                                  0x1
#define _ADERRH_ERR10_LENGTH                                0x1
#define _ADERRH_ERR10_MASK                                  0x4
#define _ADERRH_ERR11_POSN                                  0x3
#define _ADERRH_ERR11_POSITION                              0x3
#define _ADERRH_ERR11_SIZE                                  0x1
#define _ADERRH_ERR11_LENGTH                                0x1
#define _ADERRH_ERR11_MASK                                  0x8
#define _ADERRH_ERR12_POSN                                  0x4
#define _ADERRH_ERR12_POSITION                              0x4
#define _ADERRH_ERR12_SIZE                                  0x1
#define _ADERRH_ERR12_LENGTH                                0x1
#define _ADERRH_ERR12_MASK                                  0x10
#define _ADERRH_ERR13_POSN                                  0x5
#define _ADERRH_ERR13_POSITION                              0x5
#define _ADERRH_ERR13_SIZE                                  0x1
#define _ADERRH_ERR13_LENGTH                                0x1
#define _ADERRH_ERR13_MASK                                  0x20
#define _ADERRH_ERR14_POSN                                  0x6
#define _ADERRH_ERR14_POSITION                              0x6
#define _ADERRH_ERR14_SIZE                                  0x1
#define _ADERRH_ERR14_LENGTH                                0x1
#define _ADERRH_ERR14_MASK                                  0x40
#define _ADERRH_ERR15_POSN                                  0x7
#define _ADERRH_ERR15_POSITION                              0x7
#define _ADERRH_ERR15_SIZE                                  0x1
#define _ADERRH_ERR15_LENGTH                                0x1
#define _ADERRH_ERR15_MASK                                  0x80

// Register: ADSTPT
#define ADSTPT ADSTPT
extern volatile unsigned short          ADSTPT              __at(0x1D12);
#ifndef _LIB_BUILD
asm("ADSTPT equ 01D12h");
#endif

// Register: ADSTPTL
#define ADSTPTL ADSTPTL
extern volatile unsigned char           ADSTPTL             __at(0x1D12);
#ifndef _LIB_BUILD
asm("ADSTPTL equ 01D12h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STPT                   :8;
    };
    struct {
        unsigned ADSTPT0                :1;
        unsigned ADSTPT1                :1;
        unsigned ADSTPT2                :1;
        unsigned ADSTPT3                :1;
        unsigned ADSTPT4                :1;
        unsigned ADSTPT5                :1;
        unsigned ADSTPT6                :1;
        unsigned ADSTPT7                :1;
    };
    struct {
        unsigned ADSTPT                 :8;
    };
    struct {
        unsigned STPT0                  :1;
        unsigned STPT1                  :1;
        unsigned STPT2                  :1;
        unsigned STPT3                  :1;
        unsigned STPT4                  :1;
        unsigned STPT5                  :1;
        unsigned STPT6                  :1;
        unsigned STPT7                  :1;
    };
} ADSTPTLbits_t;
extern volatile ADSTPTLbits_t ADSTPTLbits __at(0x1D12);
// bitfield macros
#define _ADSTPTL_STPT_POSN                                  0x0
#define _ADSTPTL_STPT_POSITION                              0x0
#define _ADSTPTL_STPT_SIZE                                  0x8
#define _ADSTPTL_STPT_LENGTH                                0x8
#define _ADSTPTL_STPT_MASK                                  0xFF
#define _ADSTPTL_ADSTPT0_POSN                               0x0
#define _ADSTPTL_ADSTPT0_POSITION                           0x0
#define _ADSTPTL_ADSTPT0_SIZE                               0x1
#define _ADSTPTL_ADSTPT0_LENGTH                             0x1
#define _ADSTPTL_ADSTPT0_MASK                               0x1
#define _ADSTPTL_ADSTPT1_POSN                               0x1
#define _ADSTPTL_ADSTPT1_POSITION                           0x1
#define _ADSTPTL_ADSTPT1_SIZE                               0x1
#define _ADSTPTL_ADSTPT1_LENGTH                             0x1
#define _ADSTPTL_ADSTPT1_MASK                               0x2
#define _ADSTPTL_ADSTPT2_POSN                               0x2
#define _ADSTPTL_ADSTPT2_POSITION                           0x2
#define _ADSTPTL_ADSTPT2_SIZE                               0x1
#define _ADSTPTL_ADSTPT2_LENGTH                             0x1
#define _ADSTPTL_ADSTPT2_MASK                               0x4
#define _ADSTPTL_ADSTPT3_POSN                               0x3
#define _ADSTPTL_ADSTPT3_POSITION                           0x3
#define _ADSTPTL_ADSTPT3_SIZE                               0x1
#define _ADSTPTL_ADSTPT3_LENGTH                             0x1
#define _ADSTPTL_ADSTPT3_MASK                               0x8
#define _ADSTPTL_ADSTPT4_POSN                               0x4
#define _ADSTPTL_ADSTPT4_POSITION                           0x4
#define _ADSTPTL_ADSTPT4_SIZE                               0x1
#define _ADSTPTL_ADSTPT4_LENGTH                             0x1
#define _ADSTPTL_ADSTPT4_MASK                               0x10
#define _ADSTPTL_ADSTPT5_POSN                               0x5
#define _ADSTPTL_ADSTPT5_POSITION                           0x5
#define _ADSTPTL_ADSTPT5_SIZE                               0x1
#define _ADSTPTL_ADSTPT5_LENGTH                             0x1
#define _ADSTPTL_ADSTPT5_MASK                               0x20
#define _ADSTPTL_ADSTPT6_POSN                               0x6
#define _ADSTPTL_ADSTPT6_POSITION                           0x6
#define _ADSTPTL_ADSTPT6_SIZE                               0x1
#define _ADSTPTL_ADSTPT6_LENGTH                             0x1
#define _ADSTPTL_ADSTPT6_MASK                               0x40
#define _ADSTPTL_ADSTPT7_POSN                               0x7
#define _ADSTPTL_ADSTPT7_POSITION                           0x7
#define _ADSTPTL_ADSTPT7_SIZE                               0x1
#define _ADSTPTL_ADSTPT7_LENGTH                             0x1
#define _ADSTPTL_ADSTPT7_MASK                               0x80
#define _ADSTPTL_ADSTPT_POSN                                0x0
#define _ADSTPTL_ADSTPT_POSITION                            0x0
#define _ADSTPTL_ADSTPT_SIZE                                0x8
#define _ADSTPTL_ADSTPT_LENGTH                              0x8
#define _ADSTPTL_ADSTPT_MASK                                0xFF
#define _ADSTPTL_STPT0_POSN                                 0x0
#define _ADSTPTL_STPT0_POSITION                             0x0
#define _ADSTPTL_STPT0_SIZE                                 0x1
#define _ADSTPTL_STPT0_LENGTH                               0x1
#define _ADSTPTL_STPT0_MASK                                 0x1
#define _ADSTPTL_STPT1_POSN                                 0x1
#define _ADSTPTL_STPT1_POSITION                             0x1
#define _ADSTPTL_STPT1_SIZE                                 0x1
#define _ADSTPTL_STPT1_LENGTH                               0x1
#define _ADSTPTL_STPT1_MASK                                 0x2
#define _ADSTPTL_STPT2_POSN                                 0x2
#define _ADSTPTL_STPT2_POSITION                             0x2
#define _ADSTPTL_STPT2_SIZE                                 0x1
#define _ADSTPTL_STPT2_LENGTH                               0x1
#define _ADSTPTL_STPT2_MASK                                 0x4
#define _ADSTPTL_STPT3_POSN                                 0x3
#define _ADSTPTL_STPT3_POSITION                             0x3
#define _ADSTPTL_STPT3_SIZE                                 0x1
#define _ADSTPTL_STPT3_LENGTH                               0x1
#define _ADSTPTL_STPT3_MASK                                 0x8
#define _ADSTPTL_STPT4_POSN                                 0x4
#define _ADSTPTL_STPT4_POSITION                             0x4
#define _ADSTPTL_STPT4_SIZE                                 0x1
#define _ADSTPTL_STPT4_LENGTH                               0x1
#define _ADSTPTL_STPT4_MASK                                 0x10
#define _ADSTPTL_STPT5_POSN                                 0x5
#define _ADSTPTL_STPT5_POSITION                             0x5
#define _ADSTPTL_STPT5_SIZE                                 0x1
#define _ADSTPTL_STPT5_LENGTH                               0x1
#define _ADSTPTL_STPT5_MASK                                 0x20
#define _ADSTPTL_STPT6_POSN                                 0x6
#define _ADSTPTL_STPT6_POSITION                             0x6
#define _ADSTPTL_STPT6_SIZE                                 0x1
#define _ADSTPTL_STPT6_LENGTH                               0x1
#define _ADSTPTL_STPT6_MASK                                 0x40
#define _ADSTPTL_STPT7_POSN                                 0x7
#define _ADSTPTL_STPT7_POSITION                             0x7
#define _ADSTPTL_STPT7_SIZE                                 0x1
#define _ADSTPTL_STPT7_LENGTH                               0x1
#define _ADSTPTL_STPT7_MASK                                 0x80

// Register: ADSTPTH
#define ADSTPTH ADSTPTH
extern volatile unsigned char           ADSTPTH             __at(0x1D13);
#ifndef _LIB_BUILD
asm("ADSTPTH equ 01D13h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STPT                   :8;
    };
    struct {
        unsigned ADSTPT8                :1;
        unsigned ADSTPT9                :1;
        unsigned ADSTPT10               :1;
        unsigned ADSTPT11               :1;
        unsigned ADSTPT12               :1;
        unsigned ADSTPT13               :1;
        unsigned ADSTPT14               :1;
        unsigned ADSTPT15               :1;
    };
    struct {
        unsigned ADSTPT                 :8;
    };
    struct {
        unsigned STPT8                  :1;
        unsigned STPT9                  :1;
        unsigned STPT10                 :1;
        unsigned STPT11                 :1;
        unsigned STPT12                 :1;
        unsigned STPT13                 :1;
        unsigned STPT15                 :1;
        unsigned STPT16                 :1;
    };
} ADSTPTHbits_t;
extern volatile ADSTPTHbits_t ADSTPTHbits __at(0x1D13);
// bitfield macros
#define _ADSTPTH_STPT_POSN                                  0x0
#define _ADSTPTH_STPT_POSITION                              0x0
#define _ADSTPTH_STPT_SIZE                                  0x8
#define _ADSTPTH_STPT_LENGTH                                0x8
#define _ADSTPTH_STPT_MASK                                  0xFF
#define _ADSTPTH_ADSTPT8_POSN                               0x0
#define _ADSTPTH_ADSTPT8_POSITION                           0x0
#define _ADSTPTH_ADSTPT8_SIZE                               0x1
#define _ADSTPTH_ADSTPT8_LENGTH                             0x1
#define _ADSTPTH_ADSTPT8_MASK                               0x1
#define _ADSTPTH_ADSTPT9_POSN                               0x1
#define _ADSTPTH_ADSTPT9_POSITION                           0x1
#define _ADSTPTH_ADSTPT9_SIZE                               0x1
#define _ADSTPTH_ADSTPT9_LENGTH                             0x1
#define _ADSTPTH_ADSTPT9_MASK                               0x2
#define _ADSTPTH_ADSTPT10_POSN                              0x2
#define _ADSTPTH_ADSTPT10_POSITION                          0x2
#define _ADSTPTH_ADSTPT10_SIZE                              0x1
#define _ADSTPTH_ADSTPT10_LENGTH                            0x1
#define _ADSTPTH_ADSTPT10_MASK                              0x4
#define _ADSTPTH_ADSTPT11_POSN                              0x3
#define _ADSTPTH_ADSTPT11_POSITION                          0x3
#define _ADSTPTH_ADSTPT11_SIZE                              0x1
#define _ADSTPTH_ADSTPT11_LENGTH                            0x1
#define _ADSTPTH_ADSTPT11_MASK                              0x8
#define _ADSTPTH_ADSTPT12_POSN                              0x4
#define _ADSTPTH_ADSTPT12_POSITION                          0x4
#define _ADSTPTH_ADSTPT12_SIZE                              0x1
#define _ADSTPTH_ADSTPT12_LENGTH                            0x1
#define _ADSTPTH_ADSTPT12_MASK                              0x10
#define _ADSTPTH_ADSTPT13_POSN                              0x5
#define _ADSTPTH_ADSTPT13_POSITION                          0x5
#define _ADSTPTH_ADSTPT13_SIZE                              0x1
#define _ADSTPTH_ADSTPT13_LENGTH                            0x1
#define _ADSTPTH_ADSTPT13_MASK                              0x20
#define _ADSTPTH_ADSTPT14_POSN                              0x6
#define _ADSTPTH_ADSTPT14_POSITION                          0x6
#define _ADSTPTH_ADSTPT14_SIZE                              0x1
#define _ADSTPTH_ADSTPT14_LENGTH                            0x1
#define _ADSTPTH_ADSTPT14_MASK                              0x40
#define _ADSTPTH_ADSTPT15_POSN                              0x7
#define _ADSTPTH_ADSTPT15_POSITION                          0x7
#define _ADSTPTH_ADSTPT15_SIZE                              0x1
#define _ADSTPTH_ADSTPT15_LENGTH                            0x1
#define _ADSTPTH_ADSTPT15_MASK                              0x80
#define _ADSTPTH_ADSTPT_POSN                                0x0
#define _ADSTPTH_ADSTPT_POSITION                            0x0
#define _ADSTPTH_ADSTPT_SIZE                                0x8
#define _ADSTPTH_ADSTPT_LENGTH                              0x8
#define _ADSTPTH_ADSTPT_MASK                                0xFF
#define _ADSTPTH_STPT8_POSN                                 0x0
#define _ADSTPTH_STPT8_POSITION                             0x0
#define _ADSTPTH_STPT8_SIZE                                 0x1
#define _ADSTPTH_STPT8_LENGTH                               0x1
#define _ADSTPTH_STPT8_MASK                                 0x1
#define _ADSTPTH_STPT9_POSN                                 0x1
#define _ADSTPTH_STPT9_POSITION                             0x1
#define _ADSTPTH_STPT9_SIZE                                 0x1
#define _ADSTPTH_STPT9_LENGTH                               0x1
#define _ADSTPTH_STPT9_MASK                                 0x2
#define _ADSTPTH_STPT10_POSN                                0x2
#define _ADSTPTH_STPT10_POSITION                            0x2
#define _ADSTPTH_STPT10_SIZE                                0x1
#define _ADSTPTH_STPT10_LENGTH                              0x1
#define _ADSTPTH_STPT10_MASK                                0x4
#define _ADSTPTH_STPT11_POSN                                0x3
#define _ADSTPTH_STPT11_POSITION                            0x3
#define _ADSTPTH_STPT11_SIZE                                0x1
#define _ADSTPTH_STPT11_LENGTH                              0x1
#define _ADSTPTH_STPT11_MASK                                0x8
#define _ADSTPTH_STPT12_POSN                                0x4
#define _ADSTPTH_STPT12_POSITION                            0x4
#define _ADSTPTH_STPT12_SIZE                                0x1
#define _ADSTPTH_STPT12_LENGTH                              0x1
#define _ADSTPTH_STPT12_MASK                                0x10
#define _ADSTPTH_STPT13_POSN                                0x5
#define _ADSTPTH_STPT13_POSITION                            0x5
#define _ADSTPTH_STPT13_SIZE                                0x1
#define _ADSTPTH_STPT13_LENGTH                              0x1
#define _ADSTPTH_STPT13_MASK                                0x20
#define _ADSTPTH_STPT15_POSN                                0x6
#define _ADSTPTH_STPT15_POSITION                            0x6
#define _ADSTPTH_STPT15_SIZE                                0x1
#define _ADSTPTH_STPT15_LENGTH                              0x1
#define _ADSTPTH_STPT15_MASK                                0x40
#define _ADSTPTH_STPT16_POSN                                0x7
#define _ADSTPTH_STPT16_POSITION                            0x7
#define _ADSTPTH_STPT16_SIZE                                0x1
#define _ADSTPTH_STPT16_LENGTH                              0x1
#define _ADSTPTH_STPT16_MASK                                0x80

// Register: ADFLTR
#define ADFLTR ADFLTR
extern volatile unsigned short          ADFLTR              __at(0x1D14);
#ifndef _LIB_BUILD
asm("ADFLTR equ 01D14h");
#endif

// Register: ADFLTRL
#define ADFLTRL ADFLTRL
extern volatile unsigned char           ADFLTRL             __at(0x1D14);
#ifndef _LIB_BUILD
asm("ADFLTRL equ 01D14h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLTR                   :8;
    };
    struct {
        unsigned ADFLTR0                :1;
        unsigned ADFLTR1                :1;
        unsigned ADFLTR2                :1;
        unsigned ADFLTR3                :1;
        unsigned ADFLTR4                :1;
        unsigned ADFLTR5                :1;
        unsigned ADFLTR6                :1;
        unsigned ADFLTR7                :1;
    };
    struct {
        unsigned ADFLTR                 :8;
    };
    struct {
        unsigned FLTR0                  :1;
        unsigned FLTR1                  :1;
        unsigned FLTR2                  :1;
        unsigned FLTR3                  :1;
        unsigned FLTR4                  :1;
        unsigned FLTR5                  :1;
        unsigned FLTR6                  :1;
        unsigned FLTR7                  :1;
    };
} ADFLTRLbits_t;
extern volatile ADFLTRLbits_t ADFLTRLbits __at(0x1D14);
// bitfield macros
#define _ADFLTRL_FLTR_POSN                                  0x0
#define _ADFLTRL_FLTR_POSITION                              0x0
#define _ADFLTRL_FLTR_SIZE                                  0x8
#define _ADFLTRL_FLTR_LENGTH                                0x8
#define _ADFLTRL_FLTR_MASK                                  0xFF
#define _ADFLTRL_ADFLTR0_POSN                               0x0
#define _ADFLTRL_ADFLTR0_POSITION                           0x0
#define _ADFLTRL_ADFLTR0_SIZE                               0x1
#define _ADFLTRL_ADFLTR0_LENGTH                             0x1
#define _ADFLTRL_ADFLTR0_MASK                               0x1
#define _ADFLTRL_ADFLTR1_POSN                               0x1
#define _ADFLTRL_ADFLTR1_POSITION                           0x1
#define _ADFLTRL_ADFLTR1_SIZE                               0x1
#define _ADFLTRL_ADFLTR1_LENGTH                             0x1
#define _ADFLTRL_ADFLTR1_MASK                               0x2
#define _ADFLTRL_ADFLTR2_POSN                               0x2
#define _ADFLTRL_ADFLTR2_POSITION                           0x2
#define _ADFLTRL_ADFLTR2_SIZE                               0x1
#define _ADFLTRL_ADFLTR2_LENGTH                             0x1
#define _ADFLTRL_ADFLTR2_MASK                               0x4
#define _ADFLTRL_ADFLTR3_POSN                               0x3
#define _ADFLTRL_ADFLTR3_POSITION                           0x3
#define _ADFLTRL_ADFLTR3_SIZE                               0x1
#define _ADFLTRL_ADFLTR3_LENGTH                             0x1
#define _ADFLTRL_ADFLTR3_MASK                               0x8
#define _ADFLTRL_ADFLTR4_POSN                               0x4
#define _ADFLTRL_ADFLTR4_POSITION                           0x4
#define _ADFLTRL_ADFLTR4_SIZE                               0x1
#define _ADFLTRL_ADFLTR4_LENGTH                             0x1
#define _ADFLTRL_ADFLTR4_MASK                               0x10
#define _ADFLTRL_ADFLTR5_POSN                               0x5
#define _ADFLTRL_ADFLTR5_POSITION                           0x5
#define _ADFLTRL_ADFLTR5_SIZE                               0x1
#define _ADFLTRL_ADFLTR5_LENGTH                             0x1
#define _ADFLTRL_ADFLTR5_MASK                               0x20
#define _ADFLTRL_ADFLTR6_POSN                               0x6
#define _ADFLTRL_ADFLTR6_POSITION                           0x6
#define _ADFLTRL_ADFLTR6_SIZE                               0x1
#define _ADFLTRL_ADFLTR6_LENGTH                             0x1
#define _ADFLTRL_ADFLTR6_MASK                               0x40
#define _ADFLTRL_ADFLTR7_POSN                               0x7
#define _ADFLTRL_ADFLTR7_POSITION                           0x7
#define _ADFLTRL_ADFLTR7_SIZE                               0x1
#define _ADFLTRL_ADFLTR7_LENGTH                             0x1
#define _ADFLTRL_ADFLTR7_MASK                               0x80
#define _ADFLTRL_ADFLTR_POSN                                0x0
#define _ADFLTRL_ADFLTR_POSITION                            0x0
#define _ADFLTRL_ADFLTR_SIZE                                0x8
#define _ADFLTRL_ADFLTR_LENGTH                              0x8
#define _ADFLTRL_ADFLTR_MASK                                0xFF
#define _ADFLTRL_FLTR0_POSN                                 0x0
#define _ADFLTRL_FLTR0_POSITION                             0x0
#define _ADFLTRL_FLTR0_SIZE                                 0x1
#define _ADFLTRL_FLTR0_LENGTH                               0x1
#define _ADFLTRL_FLTR0_MASK                                 0x1
#define _ADFLTRL_FLTR1_POSN                                 0x1
#define _ADFLTRL_FLTR1_POSITION                             0x1
#define _ADFLTRL_FLTR1_SIZE                                 0x1
#define _ADFLTRL_FLTR1_LENGTH                               0x1
#define _ADFLTRL_FLTR1_MASK                                 0x2
#define _ADFLTRL_FLTR2_POSN                                 0x2
#define _ADFLTRL_FLTR2_POSITION                             0x2
#define _ADFLTRL_FLTR2_SIZE                                 0x1
#define _ADFLTRL_FLTR2_LENGTH                               0x1
#define _ADFLTRL_FLTR2_MASK                                 0x4
#define _ADFLTRL_FLTR3_POSN                                 0x3
#define _ADFLTRL_FLTR3_POSITION                             0x3
#define _ADFLTRL_FLTR3_SIZE                                 0x1
#define _ADFLTRL_FLTR3_LENGTH                               0x1
#define _ADFLTRL_FLTR3_MASK                                 0x8
#define _ADFLTRL_FLTR4_POSN                                 0x4
#define _ADFLTRL_FLTR4_POSITION                             0x4
#define _ADFLTRL_FLTR4_SIZE                                 0x1
#define _ADFLTRL_FLTR4_LENGTH                               0x1
#define _ADFLTRL_FLTR4_MASK                                 0x10
#define _ADFLTRL_FLTR5_POSN                                 0x5
#define _ADFLTRL_FLTR5_POSITION                             0x5
#define _ADFLTRL_FLTR5_SIZE                                 0x1
#define _ADFLTRL_FLTR5_LENGTH                               0x1
#define _ADFLTRL_FLTR5_MASK                                 0x20
#define _ADFLTRL_FLTR6_POSN                                 0x6
#define _ADFLTRL_FLTR6_POSITION                             0x6
#define _ADFLTRL_FLTR6_SIZE                                 0x1
#define _ADFLTRL_FLTR6_LENGTH                               0x1
#define _ADFLTRL_FLTR6_MASK                                 0x40
#define _ADFLTRL_FLTR7_POSN                                 0x7
#define _ADFLTRL_FLTR7_POSITION                             0x7
#define _ADFLTRL_FLTR7_SIZE                                 0x1
#define _ADFLTRL_FLTR7_LENGTH                               0x1
#define _ADFLTRL_FLTR7_MASK                                 0x80

// Register: ADFLTRH
#define ADFLTRH ADFLTRH
extern volatile unsigned char           ADFLTRH             __at(0x1D15);
#ifndef _LIB_BUILD
asm("ADFLTRH equ 01D15h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLTR                   :8;
    };
    struct {
        unsigned ADFLTR8                :1;
        unsigned ADFLTR9                :1;
        unsigned ADFLTR10               :1;
        unsigned ADFLTR11               :1;
        unsigned ADFLTR12               :1;
        unsigned ADFLTR13               :1;
        unsigned ADFLTR14               :1;
        unsigned ADFLTR15               :1;
    };
    struct {
        unsigned ADFLTR                 :8;
    };
    struct {
        unsigned FLTR8                  :1;
        unsigned FLTR9                  :1;
        unsigned FLTR10                 :1;
        unsigned FLTR11                 :1;
        unsigned FLTR12                 :1;
        unsigned FLTR13                 :1;
        unsigned FLTR14                 :1;
        unsigned FLTR15                 :1;
    };
} ADFLTRHbits_t;
extern volatile ADFLTRHbits_t ADFLTRHbits __at(0x1D15);
// bitfield macros
#define _ADFLTRH_FLTR_POSN                                  0x0
#define _ADFLTRH_FLTR_POSITION                              0x0
#define _ADFLTRH_FLTR_SIZE                                  0x8
#define _ADFLTRH_FLTR_LENGTH                                0x8
#define _ADFLTRH_FLTR_MASK                                  0xFF
#define _ADFLTRH_ADFLTR8_POSN                               0x0
#define _ADFLTRH_ADFLTR8_POSITION                           0x0
#define _ADFLTRH_ADFLTR8_SIZE                               0x1
#define _ADFLTRH_ADFLTR8_LENGTH                             0x1
#define _ADFLTRH_ADFLTR8_MASK                               0x1
#define _ADFLTRH_ADFLTR9_POSN                               0x1
#define _ADFLTRH_ADFLTR9_POSITION                           0x1
#define _ADFLTRH_ADFLTR9_SIZE                               0x1
#define _ADFLTRH_ADFLTR9_LENGTH                             0x1
#define _ADFLTRH_ADFLTR9_MASK                               0x2
#define _ADFLTRH_ADFLTR10_POSN                              0x2
#define _ADFLTRH_ADFLTR10_POSITION                          0x2
#define _ADFLTRH_ADFLTR10_SIZE                              0x1
#define _ADFLTRH_ADFLTR10_LENGTH                            0x1
#define _ADFLTRH_ADFLTR10_MASK                              0x4
#define _ADFLTRH_ADFLTR11_POSN                              0x3
#define _ADFLTRH_ADFLTR11_POSITION                          0x3
#define _ADFLTRH_ADFLTR11_SIZE                              0x1
#define _ADFLTRH_ADFLTR11_LENGTH                            0x1
#define _ADFLTRH_ADFLTR11_MASK                              0x8
#define _ADFLTRH_ADFLTR12_POSN                              0x4
#define _ADFLTRH_ADFLTR12_POSITION                          0x4
#define _ADFLTRH_ADFLTR12_SIZE                              0x1
#define _ADFLTRH_ADFLTR12_LENGTH                            0x1
#define _ADFLTRH_ADFLTR12_MASK                              0x10
#define _ADFLTRH_ADFLTR13_POSN                              0x5
#define _ADFLTRH_ADFLTR13_POSITION                          0x5
#define _ADFLTRH_ADFLTR13_SIZE                              0x1
#define _ADFLTRH_ADFLTR13_LENGTH                            0x1
#define _ADFLTRH_ADFLTR13_MASK                              0x20
#define _ADFLTRH_ADFLTR14_POSN                              0x6
#define _ADFLTRH_ADFLTR14_POSITION                          0x6
#define _ADFLTRH_ADFLTR14_SIZE                              0x1
#define _ADFLTRH_ADFLTR14_LENGTH                            0x1
#define _ADFLTRH_ADFLTR14_MASK                              0x40
#define _ADFLTRH_ADFLTR15_POSN                              0x7
#define _ADFLTRH_ADFLTR15_POSITION                          0x7
#define _ADFLTRH_ADFLTR15_SIZE                              0x1
#define _ADFLTRH_ADFLTR15_LENGTH                            0x1
#define _ADFLTRH_ADFLTR15_MASK                              0x80
#define _ADFLTRH_ADFLTR_POSN                                0x0
#define _ADFLTRH_ADFLTR_POSITION                            0x0
#define _ADFLTRH_ADFLTR_SIZE                                0x8
#define _ADFLTRH_ADFLTR_LENGTH                              0x8
#define _ADFLTRH_ADFLTR_MASK                                0xFF
#define _ADFLTRH_FLTR8_POSN                                 0x0
#define _ADFLTRH_FLTR8_POSITION                             0x0
#define _ADFLTRH_FLTR8_SIZE                                 0x1
#define _ADFLTRH_FLTR8_LENGTH                               0x1
#define _ADFLTRH_FLTR8_MASK                                 0x1
#define _ADFLTRH_FLTR9_POSN                                 0x1
#define _ADFLTRH_FLTR9_POSITION                             0x1
#define _ADFLTRH_FLTR9_SIZE                                 0x1
#define _ADFLTRH_FLTR9_LENGTH                               0x1
#define _ADFLTRH_FLTR9_MASK                                 0x2
#define _ADFLTRH_FLTR10_POSN                                0x2
#define _ADFLTRH_FLTR10_POSITION                            0x2
#define _ADFLTRH_FLTR10_SIZE                                0x1
#define _ADFLTRH_FLTR10_LENGTH                              0x1
#define _ADFLTRH_FLTR10_MASK                                0x4
#define _ADFLTRH_FLTR11_POSN                                0x3
#define _ADFLTRH_FLTR11_POSITION                            0x3
#define _ADFLTRH_FLTR11_SIZE                                0x1
#define _ADFLTRH_FLTR11_LENGTH                              0x1
#define _ADFLTRH_FLTR11_MASK                                0x8
#define _ADFLTRH_FLTR12_POSN                                0x4
#define _ADFLTRH_FLTR12_POSITION                            0x4
#define _ADFLTRH_FLTR12_SIZE                                0x1
#define _ADFLTRH_FLTR12_LENGTH                              0x1
#define _ADFLTRH_FLTR12_MASK                                0x10
#define _ADFLTRH_FLTR13_POSN                                0x5
#define _ADFLTRH_FLTR13_POSITION                            0x5
#define _ADFLTRH_FLTR13_SIZE                                0x1
#define _ADFLTRH_FLTR13_LENGTH                              0x1
#define _ADFLTRH_FLTR13_MASK                                0x20
#define _ADFLTRH_FLTR14_POSN                                0x6
#define _ADFLTRH_FLTR14_POSITION                            0x6
#define _ADFLTRH_FLTR14_SIZE                                0x1
#define _ADFLTRH_FLTR14_LENGTH                              0x1
#define _ADFLTRH_FLTR14_MASK                                0x40
#define _ADFLTRH_FLTR15_POSN                                0x7
#define _ADFLTRH_FLTR15_POSITION                            0x7
#define _ADFLTRH_FLTR15_SIZE                                0x1
#define _ADFLTRH_FLTR15_LENGTH                              0x1
#define _ADFLTRH_FLTR15_MASK                                0x80

// Register: ADACC
#define ADACC ADACC
#ifndef __CCI__
extern volatile __uint24                ADACC               __at(0x1D16);
#endif
#ifndef _LIB_BUILD
asm("ADACC equ 01D16h");
#endif

// Register: ADACCL
#define ADACCL ADACCL
extern volatile unsigned char           ADACCL              __at(0x1D16);
#ifndef _LIB_BUILD
asm("ADACCL equ 01D16h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned ADACC0                 :1;
        unsigned ADACC1                 :1;
        unsigned ADACC2                 :1;
        unsigned ADACC3                 :1;
        unsigned ADACC4                 :1;
        unsigned ADACC5                 :1;
        unsigned ADACC6                 :1;
        unsigned ADACC7                 :1;
    };
    struct {
        unsigned ADACC                  :8;
    };
    struct {
        unsigned ACC0                   :1;
        unsigned ACC1                   :1;
        unsigned ACC2                   :1;
        unsigned ACC3                   :1;
        unsigned ACC4                   :1;
        unsigned ACC5                   :1;
        unsigned ACC6                   :1;
        unsigned ACC7                   :1;
    };
} ADACCLbits_t;
extern volatile ADACCLbits_t ADACCLbits __at(0x1D16);
// bitfield macros
#define _ADACCL_ACC_POSN                                    0x0
#define _ADACCL_ACC_POSITION                                0x0
#define _ADACCL_ACC_SIZE                                    0x8
#define _ADACCL_ACC_LENGTH                                  0x8
#define _ADACCL_ACC_MASK                                    0xFF
#define _ADACCL_ADACC0_POSN                                 0x0
#define _ADACCL_ADACC0_POSITION                             0x0
#define _ADACCL_ADACC0_SIZE                                 0x1
#define _ADACCL_ADACC0_LENGTH                               0x1
#define _ADACCL_ADACC0_MASK                                 0x1
#define _ADACCL_ADACC1_POSN                                 0x1
#define _ADACCL_ADACC1_POSITION                             0x1
#define _ADACCL_ADACC1_SIZE                                 0x1
#define _ADACCL_ADACC1_LENGTH                               0x1
#define _ADACCL_ADACC1_MASK                                 0x2
#define _ADACCL_ADACC2_POSN                                 0x2
#define _ADACCL_ADACC2_POSITION                             0x2
#define _ADACCL_ADACC2_SIZE                                 0x1
#define _ADACCL_ADACC2_LENGTH                               0x1
#define _ADACCL_ADACC2_MASK                                 0x4
#define _ADACCL_ADACC3_POSN                                 0x3
#define _ADACCL_ADACC3_POSITION                             0x3
#define _ADACCL_ADACC3_SIZE                                 0x1
#define _ADACCL_ADACC3_LENGTH                               0x1
#define _ADACCL_ADACC3_MASK                                 0x8
#define _ADACCL_ADACC4_POSN                                 0x4
#define _ADACCL_ADACC4_POSITION                             0x4
#define _ADACCL_ADACC4_SIZE                                 0x1
#define _ADACCL_ADACC4_LENGTH                               0x1
#define _ADACCL_ADACC4_MASK                                 0x10
#define _ADACCL_ADACC5_POSN                                 0x5
#define _ADACCL_ADACC5_POSITION                             0x5
#define _ADACCL_ADACC5_SIZE                                 0x1
#define _ADACCL_ADACC5_LENGTH                               0x1
#define _ADACCL_ADACC5_MASK                                 0x20
#define _ADACCL_ADACC6_POSN                                 0x6
#define _ADACCL_ADACC6_POSITION                             0x6
#define _ADACCL_ADACC6_SIZE                                 0x1
#define _ADACCL_ADACC6_LENGTH                               0x1
#define _ADACCL_ADACC6_MASK                                 0x40
#define _ADACCL_ADACC7_POSN                                 0x7
#define _ADACCL_ADACC7_POSITION                             0x7
#define _ADACCL_ADACC7_SIZE                                 0x1
#define _ADACCL_ADACC7_LENGTH                               0x1
#define _ADACCL_ADACC7_MASK                                 0x80
#define _ADACCL_ADACC_POSN                                  0x0
#define _ADACCL_ADACC_POSITION                              0x0
#define _ADACCL_ADACC_SIZE                                  0x8
#define _ADACCL_ADACC_LENGTH                                0x8
#define _ADACCL_ADACC_MASK                                  0xFF
#define _ADACCL_ACC0_POSN                                   0x0
#define _ADACCL_ACC0_POSITION                               0x0
#define _ADACCL_ACC0_SIZE                                   0x1
#define _ADACCL_ACC0_LENGTH                                 0x1
#define _ADACCL_ACC0_MASK                                   0x1
#define _ADACCL_ACC1_POSN                                   0x1
#define _ADACCL_ACC1_POSITION                               0x1
#define _ADACCL_ACC1_SIZE                                   0x1
#define _ADACCL_ACC1_LENGTH                                 0x1
#define _ADACCL_ACC1_MASK                                   0x2
#define _ADACCL_ACC2_POSN                                   0x2
#define _ADACCL_ACC2_POSITION                               0x2
#define _ADACCL_ACC2_SIZE                                   0x1
#define _ADACCL_ACC2_LENGTH                                 0x1
#define _ADACCL_ACC2_MASK                                   0x4
#define _ADACCL_ACC3_POSN                                   0x3
#define _ADACCL_ACC3_POSITION                               0x3
#define _ADACCL_ACC3_SIZE                                   0x1
#define _ADACCL_ACC3_LENGTH                                 0x1
#define _ADACCL_ACC3_MASK                                   0x8
#define _ADACCL_ACC4_POSN                                   0x4
#define _ADACCL_ACC4_POSITION                               0x4
#define _ADACCL_ACC4_SIZE                                   0x1
#define _ADACCL_ACC4_LENGTH                                 0x1
#define _ADACCL_ACC4_MASK                                   0x10
#define _ADACCL_ACC5_POSN                                   0x5
#define _ADACCL_ACC5_POSITION                               0x5
#define _ADACCL_ACC5_SIZE                                   0x1
#define _ADACCL_ACC5_LENGTH                                 0x1
#define _ADACCL_ACC5_MASK                                   0x20
#define _ADACCL_ACC6_POSN                                   0x6
#define _ADACCL_ACC6_POSITION                               0x6
#define _ADACCL_ACC6_SIZE                                   0x1
#define _ADACCL_ACC6_LENGTH                                 0x1
#define _ADACCL_ACC6_MASK                                   0x40
#define _ADACCL_ACC7_POSN                                   0x7
#define _ADACCL_ACC7_POSITION                               0x7
#define _ADACCL_ACC7_SIZE                                   0x1
#define _ADACCL_ACC7_LENGTH                                 0x1
#define _ADACCL_ACC7_MASK                                   0x80

// Register: ADACCH
#define ADACCH ADACCH
extern volatile unsigned char           ADACCH              __at(0x1D17);
#ifndef _LIB_BUILD
asm("ADACCH equ 01D17h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned ADACC8                 :1;
        unsigned ADACC9                 :1;
        unsigned ADACC10                :1;
        unsigned ADACC11                :1;
        unsigned ADACC12                :1;
        unsigned ADACC13                :1;
        unsigned ADACC14                :1;
        unsigned ADACC15                :1;
    };
    struct {
        unsigned ADACC                  :8;
    };
    struct {
        unsigned ACC8                   :1;
        unsigned ACC9                   :1;
        unsigned ACC10                  :1;
        unsigned ACC11                  :1;
        unsigned ACC12                  :1;
        unsigned ACC13                  :1;
        unsigned ACC14                  :1;
        unsigned ACC15                  :1;
    };
} ADACCHbits_t;
extern volatile ADACCHbits_t ADACCHbits __at(0x1D17);
// bitfield macros
#define _ADACCH_ACC_POSN                                    0x0
#define _ADACCH_ACC_POSITION                                0x0
#define _ADACCH_ACC_SIZE                                    0x8
#define _ADACCH_ACC_LENGTH                                  0x8
#define _ADACCH_ACC_MASK                                    0xFF
#define _ADACCH_ADACC8_POSN                                 0x0
#define _ADACCH_ADACC8_POSITION                             0x0
#define _ADACCH_ADACC8_SIZE                                 0x1
#define _ADACCH_ADACC8_LENGTH                               0x1
#define _ADACCH_ADACC8_MASK                                 0x1
#define _ADACCH_ADACC9_POSN                                 0x1
#define _ADACCH_ADACC9_POSITION                             0x1
#define _ADACCH_ADACC9_SIZE                                 0x1
#define _ADACCH_ADACC9_LENGTH                               0x1
#define _ADACCH_ADACC9_MASK                                 0x2
#define _ADACCH_ADACC10_POSN                                0x2
#define _ADACCH_ADACC10_POSITION                            0x2
#define _ADACCH_ADACC10_SIZE                                0x1
#define _ADACCH_ADACC10_LENGTH                              0x1
#define _ADACCH_ADACC10_MASK                                0x4
#define _ADACCH_ADACC11_POSN                                0x3
#define _ADACCH_ADACC11_POSITION                            0x3
#define _ADACCH_ADACC11_SIZE                                0x1
#define _ADACCH_ADACC11_LENGTH                              0x1
#define _ADACCH_ADACC11_MASK                                0x8
#define _ADACCH_ADACC12_POSN                                0x4
#define _ADACCH_ADACC12_POSITION                            0x4
#define _ADACCH_ADACC12_SIZE                                0x1
#define _ADACCH_ADACC12_LENGTH                              0x1
#define _ADACCH_ADACC12_MASK                                0x10
#define _ADACCH_ADACC13_POSN                                0x5
#define _ADACCH_ADACC13_POSITION                            0x5
#define _ADACCH_ADACC13_SIZE                                0x1
#define _ADACCH_ADACC13_LENGTH                              0x1
#define _ADACCH_ADACC13_MASK                                0x20
#define _ADACCH_ADACC14_POSN                                0x6
#define _ADACCH_ADACC14_POSITION                            0x6
#define _ADACCH_ADACC14_SIZE                                0x1
#define _ADACCH_ADACC14_LENGTH                              0x1
#define _ADACCH_ADACC14_MASK                                0x40
#define _ADACCH_ADACC15_POSN                                0x7
#define _ADACCH_ADACC15_POSITION                            0x7
#define _ADACCH_ADACC15_SIZE                                0x1
#define _ADACCH_ADACC15_LENGTH                              0x1
#define _ADACCH_ADACC15_MASK                                0x80
#define _ADACCH_ADACC_POSN                                  0x0
#define _ADACCH_ADACC_POSITION                              0x0
#define _ADACCH_ADACC_SIZE                                  0x8
#define _ADACCH_ADACC_LENGTH                                0x8
#define _ADACCH_ADACC_MASK                                  0xFF
#define _ADACCH_ACC8_POSN                                   0x0
#define _ADACCH_ACC8_POSITION                               0x0
#define _ADACCH_ACC8_SIZE                                   0x1
#define _ADACCH_ACC8_LENGTH                                 0x1
#define _ADACCH_ACC8_MASK                                   0x1
#define _ADACCH_ACC9_POSN                                   0x1
#define _ADACCH_ACC9_POSITION                               0x1
#define _ADACCH_ACC9_SIZE                                   0x1
#define _ADACCH_ACC9_LENGTH                                 0x1
#define _ADACCH_ACC9_MASK                                   0x2
#define _ADACCH_ACC10_POSN                                  0x2
#define _ADACCH_ACC10_POSITION                              0x2
#define _ADACCH_ACC10_SIZE                                  0x1
#define _ADACCH_ACC10_LENGTH                                0x1
#define _ADACCH_ACC10_MASK                                  0x4
#define _ADACCH_ACC11_POSN                                  0x3
#define _ADACCH_ACC11_POSITION                              0x3
#define _ADACCH_ACC11_SIZE                                  0x1
#define _ADACCH_ACC11_LENGTH                                0x1
#define _ADACCH_ACC11_MASK                                  0x8
#define _ADACCH_ACC12_POSN                                  0x4
#define _ADACCH_ACC12_POSITION                              0x4
#define _ADACCH_ACC12_SIZE                                  0x1
#define _ADACCH_ACC12_LENGTH                                0x1
#define _ADACCH_ACC12_MASK                                  0x10
#define _ADACCH_ACC13_POSN                                  0x5
#define _ADACCH_ACC13_POSITION                              0x5
#define _ADACCH_ACC13_SIZE                                  0x1
#define _ADACCH_ACC13_LENGTH                                0x1
#define _ADACCH_ACC13_MASK                                  0x20
#define _ADACCH_ACC14_POSN                                  0x6
#define _ADACCH_ACC14_POSITION                              0x6
#define _ADACCH_ACC14_SIZE                                  0x1
#define _ADACCH_ACC14_LENGTH                                0x1
#define _ADACCH_ACC14_MASK                                  0x40
#define _ADACCH_ACC15_POSN                                  0x7
#define _ADACCH_ACC15_POSITION                              0x7
#define _ADACCH_ACC15_SIZE                                  0x1
#define _ADACCH_ACC15_LENGTH                                0x1
#define _ADACCH_ACC15_MASK                                  0x80

// Register: ADACCU
#define ADACCU ADACCU
extern volatile unsigned char           ADACCU              __at(0x1D18);
#ifndef _LIB_BUILD
asm("ADACCU equ 01D18h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned ADACC16                :1;
        unsigned ADACC17                :1;
    };
    struct {
        unsigned ADACC                  :8;
    };
    struct {
        unsigned ACC16                  :1;
        unsigned ACC17                  :1;
    };
} ADACCUbits_t;
extern volatile ADACCUbits_t ADACCUbits __at(0x1D18);
// bitfield macros
#define _ADACCU_ACC_POSN                                    0x0
#define _ADACCU_ACC_POSITION                                0x0
#define _ADACCU_ACC_SIZE                                    0x8
#define _ADACCU_ACC_LENGTH                                  0x8
#define _ADACCU_ACC_MASK                                    0xFF
#define _ADACCU_ADACC16_POSN                                0x0
#define _ADACCU_ADACC16_POSITION                            0x0
#define _ADACCU_ADACC16_SIZE                                0x1
#define _ADACCU_ADACC16_LENGTH                              0x1
#define _ADACCU_ADACC16_MASK                                0x1
#define _ADACCU_ADACC17_POSN                                0x1
#define _ADACCU_ADACC17_POSITION                            0x1
#define _ADACCU_ADACC17_SIZE                                0x1
#define _ADACCU_ADACC17_LENGTH                              0x1
#define _ADACCU_ADACC17_MASK                                0x2
#define _ADACCU_ADACC_POSN                                  0x0
#define _ADACCU_ADACC_POSITION                              0x0
#define _ADACCU_ADACC_SIZE                                  0x8
#define _ADACCU_ADACC_LENGTH                                0x8
#define _ADACCU_ADACC_MASK                                  0xFF
#define _ADACCU_ACC16_POSN                                  0x0
#define _ADACCU_ACC16_POSITION                              0x0
#define _ADACCU_ACC16_SIZE                                  0x1
#define _ADACCU_ACC16_LENGTH                                0x1
#define _ADACCU_ACC16_MASK                                  0x1
#define _ADACCU_ACC17_POSN                                  0x1
#define _ADACCU_ACC17_POSITION                              0x1
#define _ADACCU_ACC17_SIZE                                  0x1
#define _ADACCU_ACC17_LENGTH                                0x1
#define _ADACCU_ACC17_MASK                                  0x2

// Register: ADCNT
#define ADCNT ADCNT
extern volatile unsigned char           ADCNT               __at(0x1D19);
#ifndef _LIB_BUILD
asm("ADCNT equ 01D19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CNT                    :8;
    };
    struct {
        unsigned ADCNT0                 :1;
        unsigned ADCNT1                 :1;
        unsigned ADCNT2                 :1;
        unsigned ADCNT3                 :1;
        unsigned ADCNT4                 :1;
        unsigned ADCNT5                 :1;
        unsigned ADCNT6                 :1;
        unsigned ADCNT7                 :1;
    };
    struct {
        unsigned ADCNT                  :8;
    };
    struct {
        unsigned CNT0                   :1;
        unsigned CNT1                   :1;
        unsigned CNT2                   :1;
        unsigned CNT3                   :1;
        unsigned CNT4                   :1;
        unsigned CNT5                   :1;
        unsigned CNT6                   :1;
        unsigned CNT7                   :1;
    };
} ADCNTbits_t;
extern volatile ADCNTbits_t ADCNTbits __at(0x1D19);
// bitfield macros
#define _ADCNT_CNT_POSN                                     0x0
#define _ADCNT_CNT_POSITION                                 0x0
#define _ADCNT_CNT_SIZE                                     0x8
#define _ADCNT_CNT_LENGTH                                   0x8
#define _ADCNT_CNT_MASK                                     0xFF
#define _ADCNT_ADCNT0_POSN                                  0x0
#define _ADCNT_ADCNT0_POSITION                              0x0
#define _ADCNT_ADCNT0_SIZE                                  0x1
#define _ADCNT_ADCNT0_LENGTH                                0x1
#define _ADCNT_ADCNT0_MASK                                  0x1
#define _ADCNT_ADCNT1_POSN                                  0x1
#define _ADCNT_ADCNT1_POSITION                              0x1
#define _ADCNT_ADCNT1_SIZE                                  0x1
#define _ADCNT_ADCNT1_LENGTH                                0x1
#define _ADCNT_ADCNT1_MASK                                  0x2
#define _ADCNT_ADCNT2_POSN                                  0x2
#define _ADCNT_ADCNT2_POSITION                              0x2
#define _ADCNT_ADCNT2_SIZE                                  0x1
#define _ADCNT_ADCNT2_LENGTH                                0x1
#define _ADCNT_ADCNT2_MASK                                  0x4
#define _ADCNT_ADCNT3_POSN                                  0x3
#define _ADCNT_ADCNT3_POSITION                              0x3
#define _ADCNT_ADCNT3_SIZE                                  0x1
#define _ADCNT_ADCNT3_LENGTH                                0x1
#define _ADCNT_ADCNT3_MASK                                  0x8
#define _ADCNT_ADCNT4_POSN                                  0x4
#define _ADCNT_ADCNT4_POSITION                              0x4
#define _ADCNT_ADCNT4_SIZE                                  0x1
#define _ADCNT_ADCNT4_LENGTH                                0x1
#define _ADCNT_ADCNT4_MASK                                  0x10
#define _ADCNT_ADCNT5_POSN                                  0x5
#define _ADCNT_ADCNT5_POSITION                              0x5
#define _ADCNT_ADCNT5_SIZE                                  0x1
#define _ADCNT_ADCNT5_LENGTH                                0x1
#define _ADCNT_ADCNT5_MASK                                  0x20
#define _ADCNT_ADCNT6_POSN                                  0x6
#define _ADCNT_ADCNT6_POSITION                              0x6
#define _ADCNT_ADCNT6_SIZE                                  0x1
#define _ADCNT_ADCNT6_LENGTH                                0x1
#define _ADCNT_ADCNT6_MASK                                  0x40
#define _ADCNT_ADCNT7_POSN                                  0x7
#define _ADCNT_ADCNT7_POSITION                              0x7
#define _ADCNT_ADCNT7_SIZE                                  0x1
#define _ADCNT_ADCNT7_LENGTH                                0x1
#define _ADCNT_ADCNT7_MASK                                  0x80
#define _ADCNT_ADCNT_POSN                                   0x0
#define _ADCNT_ADCNT_POSITION                               0x0
#define _ADCNT_ADCNT_SIZE                                   0x8
#define _ADCNT_ADCNT_LENGTH                                 0x8
#define _ADCNT_ADCNT_MASK                                   0xFF
#define _ADCNT_CNT0_POSN                                    0x0
#define _ADCNT_CNT0_POSITION                                0x0
#define _ADCNT_CNT0_SIZE                                    0x1
#define _ADCNT_CNT0_LENGTH                                  0x1
#define _ADCNT_CNT0_MASK                                    0x1
#define _ADCNT_CNT1_POSN                                    0x1
#define _ADCNT_CNT1_POSITION                                0x1
#define _ADCNT_CNT1_SIZE                                    0x1
#define _ADCNT_CNT1_LENGTH                                  0x1
#define _ADCNT_CNT1_MASK                                    0x2
#define _ADCNT_CNT2_POSN                                    0x2
#define _ADCNT_CNT2_POSITION                                0x2
#define _ADCNT_CNT2_SIZE                                    0x1
#define _ADCNT_CNT2_LENGTH                                  0x1
#define _ADCNT_CNT2_MASK                                    0x4
#define _ADCNT_CNT3_POSN                                    0x3
#define _ADCNT_CNT3_POSITION                                0x3
#define _ADCNT_CNT3_SIZE                                    0x1
#define _ADCNT_CNT3_LENGTH                                  0x1
#define _ADCNT_CNT3_MASK                                    0x8
#define _ADCNT_CNT4_POSN                                    0x4
#define _ADCNT_CNT4_POSITION                                0x4
#define _ADCNT_CNT4_SIZE                                    0x1
#define _ADCNT_CNT4_LENGTH                                  0x1
#define _ADCNT_CNT4_MASK                                    0x10
#define _ADCNT_CNT5_POSN                                    0x5
#define _ADCNT_CNT5_POSITION                                0x5
#define _ADCNT_CNT5_SIZE                                    0x1
#define _ADCNT_CNT5_LENGTH                                  0x1
#define _ADCNT_CNT5_MASK                                    0x20
#define _ADCNT_CNT6_POSN                                    0x6
#define _ADCNT_CNT6_POSITION                                0x6
#define _ADCNT_CNT6_SIZE                                    0x1
#define _ADCNT_CNT6_LENGTH                                  0x1
#define _ADCNT_CNT6_MASK                                    0x40
#define _ADCNT_CNT7_POSN                                    0x7
#define _ADCNT_CNT7_POSITION                                0x7
#define _ADCNT_CNT7_SIZE                                    0x1
#define _ADCNT_CNT7_LENGTH                                  0x1
#define _ADCNT_CNT7_MASK                                    0x80

// Register: ADRPT
#define ADRPT ADRPT
extern volatile unsigned char           ADRPT               __at(0x1D1A);
#ifndef _LIB_BUILD
asm("ADRPT equ 01D1Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPT                    :8;
    };
    struct {
        unsigned ADRPT0                 :1;
        unsigned ADRPT1                 :1;
        unsigned ADRPT2                 :1;
        unsigned ADRPT3                 :1;
        unsigned ADRPT4                 :1;
        unsigned ADRPT5                 :1;
        unsigned ADRPT6                 :1;
        unsigned ADRPT7                 :1;
    };
    struct {
        unsigned ADRPT                  :8;
    };
    struct {
        unsigned RPT0                   :1;
        unsigned RPT1                   :1;
        unsigned RPT2                   :1;
        unsigned RPT3                   :1;
        unsigned RPT4                   :1;
        unsigned RPT5                   :1;
        unsigned RPT6                   :1;
        unsigned RPT7                   :1;
    };
} ADRPTbits_t;
extern volatile ADRPTbits_t ADRPTbits __at(0x1D1A);
// bitfield macros
#define _ADRPT_RPT_POSN                                     0x0
#define _ADRPT_RPT_POSITION                                 0x0
#define _ADRPT_RPT_SIZE                                     0x8
#define _ADRPT_RPT_LENGTH                                   0x8
#define _ADRPT_RPT_MASK                                     0xFF
#define _ADRPT_ADRPT0_POSN                                  0x0
#define _ADRPT_ADRPT0_POSITION                              0x0
#define _ADRPT_ADRPT0_SIZE                                  0x1
#define _ADRPT_ADRPT0_LENGTH                                0x1
#define _ADRPT_ADRPT0_MASK                                  0x1
#define _ADRPT_ADRPT1_POSN                                  0x1
#define _ADRPT_ADRPT1_POSITION                              0x1
#define _ADRPT_ADRPT1_SIZE                                  0x1
#define _ADRPT_ADRPT1_LENGTH                                0x1
#define _ADRPT_ADRPT1_MASK                                  0x2
#define _ADRPT_ADRPT2_POSN                                  0x2
#define _ADRPT_ADRPT2_POSITION                              0x2
#define _ADRPT_ADRPT2_SIZE                                  0x1
#define _ADRPT_ADRPT2_LENGTH                                0x1
#define _ADRPT_ADRPT2_MASK                                  0x4
#define _ADRPT_ADRPT3_POSN                                  0x3
#define _ADRPT_ADRPT3_POSITION                              0x3
#define _ADRPT_ADRPT3_SIZE                                  0x1
#define _ADRPT_ADRPT3_LENGTH                                0x1
#define _ADRPT_ADRPT3_MASK                                  0x8
#define _ADRPT_ADRPT4_POSN                                  0x4
#define _ADRPT_ADRPT4_POSITION                              0x4
#define _ADRPT_ADRPT4_SIZE                                  0x1
#define _ADRPT_ADRPT4_LENGTH                                0x1
#define _ADRPT_ADRPT4_MASK                                  0x10
#define _ADRPT_ADRPT5_POSN                                  0x5
#define _ADRPT_ADRPT5_POSITION                              0x5
#define _ADRPT_ADRPT5_SIZE                                  0x1
#define _ADRPT_ADRPT5_LENGTH                                0x1
#define _ADRPT_ADRPT5_MASK                                  0x20
#define _ADRPT_ADRPT6_POSN                                  0x6
#define _ADRPT_ADRPT6_POSITION                              0x6
#define _ADRPT_ADRPT6_SIZE                                  0x1
#define _ADRPT_ADRPT6_LENGTH                                0x1
#define _ADRPT_ADRPT6_MASK                                  0x40
#define _ADRPT_ADRPT7_POSN                                  0x7
#define _ADRPT_ADRPT7_POSITION                              0x7
#define _ADRPT_ADRPT7_SIZE                                  0x1
#define _ADRPT_ADRPT7_LENGTH                                0x1
#define _ADRPT_ADRPT7_MASK                                  0x80
#define _ADRPT_ADRPT_POSN                                   0x0
#define _ADRPT_ADRPT_POSITION                               0x0
#define _ADRPT_ADRPT_SIZE                                   0x8
#define _ADRPT_ADRPT_LENGTH                                 0x8
#define _ADRPT_ADRPT_MASK                                   0xFF
#define _ADRPT_RPT0_POSN                                    0x0
#define _ADRPT_RPT0_POSITION                                0x0
#define _ADRPT_RPT0_SIZE                                    0x1
#define _ADRPT_RPT0_LENGTH                                  0x1
#define _ADRPT_RPT0_MASK                                    0x1
#define _ADRPT_RPT1_POSN                                    0x1
#define _ADRPT_RPT1_POSITION                                0x1
#define _ADRPT_RPT1_SIZE                                    0x1
#define _ADRPT_RPT1_LENGTH                                  0x1
#define _ADRPT_RPT1_MASK                                    0x2
#define _ADRPT_RPT2_POSN                                    0x2
#define _ADRPT_RPT2_POSITION                                0x2
#define _ADRPT_RPT2_SIZE                                    0x1
#define _ADRPT_RPT2_LENGTH                                  0x1
#define _ADRPT_RPT2_MASK                                    0x4
#define _ADRPT_RPT3_POSN                                    0x3
#define _ADRPT_RPT3_POSITION                                0x3
#define _ADRPT_RPT3_SIZE                                    0x1
#define _ADRPT_RPT3_LENGTH                                  0x1
#define _ADRPT_RPT3_MASK                                    0x8
#define _ADRPT_RPT4_POSN                                    0x4
#define _ADRPT_RPT4_POSITION                                0x4
#define _ADRPT_RPT4_SIZE                                    0x1
#define _ADRPT_RPT4_LENGTH                                  0x1
#define _ADRPT_RPT4_MASK                                    0x10
#define _ADRPT_RPT5_POSN                                    0x5
#define _ADRPT_RPT5_POSITION                                0x5
#define _ADRPT_RPT5_SIZE                                    0x1
#define _ADRPT_RPT5_LENGTH                                  0x1
#define _ADRPT_RPT5_MASK                                    0x20
#define _ADRPT_RPT6_POSN                                    0x6
#define _ADRPT_RPT6_POSITION                                0x6
#define _ADRPT_RPT6_SIZE                                    0x1
#define _ADRPT_RPT6_LENGTH                                  0x1
#define _ADRPT_RPT6_MASK                                    0x40
#define _ADRPT_RPT7_POSN                                    0x7
#define _ADRPT_RPT7_POSITION                                0x7
#define _ADRPT_RPT7_SIZE                                    0x1
#define _ADRPT_RPT7_LENGTH                                  0x1
#define _ADRPT_RPT7_MASK                                    0x80

// Register: ADPREV
#define ADPREV ADPREV
extern volatile unsigned short          ADPREV              __at(0x1D1B);
#ifndef _LIB_BUILD
asm("ADPREV equ 01D1Bh");
#endif

// Register: ADPREVL
#define ADPREVL ADPREVL
extern volatile unsigned char           ADPREVL             __at(0x1D1B);
#ifndef _LIB_BUILD
asm("ADPREVL equ 01D1Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREV                   :8;
    };
    struct {
        unsigned ADPREV0                :1;
        unsigned ADPREV1                :1;
        unsigned ADPREV2                :1;
        unsigned ADPREV3                :1;
        unsigned ADPREV4                :1;
        unsigned ADPREV5                :1;
        unsigned ADPREV6                :1;
        unsigned ADPREV7                :1;
    };
    struct {
        unsigned ADPREV                 :8;
    };
    struct {
        unsigned PREV0                  :1;
        unsigned PREV1                  :1;
        unsigned PREV2                  :1;
        unsigned PREV3                  :1;
        unsigned PREV4                  :1;
        unsigned PREV5                  :1;
        unsigned PREV6                  :1;
        unsigned PREV7                  :1;
    };
} ADPREVLbits_t;
extern volatile ADPREVLbits_t ADPREVLbits __at(0x1D1B);
// bitfield macros
#define _ADPREVL_PREV_POSN                                  0x0
#define _ADPREVL_PREV_POSITION                              0x0
#define _ADPREVL_PREV_SIZE                                  0x8
#define _ADPREVL_PREV_LENGTH                                0x8
#define _ADPREVL_PREV_MASK                                  0xFF
#define _ADPREVL_ADPREV0_POSN                               0x0
#define _ADPREVL_ADPREV0_POSITION                           0x0
#define _ADPREVL_ADPREV0_SIZE                               0x1
#define _ADPREVL_ADPREV0_LENGTH                             0x1
#define _ADPREVL_ADPREV0_MASK                               0x1
#define _ADPREVL_ADPREV1_POSN                               0x1
#define _ADPREVL_ADPREV1_POSITION                           0x1
#define _ADPREVL_ADPREV1_SIZE                               0x1
#define _ADPREVL_ADPREV1_LENGTH                             0x1
#define _ADPREVL_ADPREV1_MASK                               0x2
#define _ADPREVL_ADPREV2_POSN                               0x2
#define _ADPREVL_ADPREV2_POSITION                           0x2
#define _ADPREVL_ADPREV2_SIZE                               0x1
#define _ADPREVL_ADPREV2_LENGTH                             0x1
#define _ADPREVL_ADPREV2_MASK                               0x4
#define _ADPREVL_ADPREV3_POSN                               0x3
#define _ADPREVL_ADPREV3_POSITION                           0x3
#define _ADPREVL_ADPREV3_SIZE                               0x1
#define _ADPREVL_ADPREV3_LENGTH                             0x1
#define _ADPREVL_ADPREV3_MASK                               0x8
#define _ADPREVL_ADPREV4_POSN                               0x4
#define _ADPREVL_ADPREV4_POSITION                           0x4
#define _ADPREVL_ADPREV4_SIZE                               0x1
#define _ADPREVL_ADPREV4_LENGTH                             0x1
#define _ADPREVL_ADPREV4_MASK                               0x10
#define _ADPREVL_ADPREV5_POSN                               0x5
#define _ADPREVL_ADPREV5_POSITION                           0x5
#define _ADPREVL_ADPREV5_SIZE                               0x1
#define _ADPREVL_ADPREV5_LENGTH                             0x1
#define _ADPREVL_ADPREV5_MASK                               0x20
#define _ADPREVL_ADPREV6_POSN                               0x6
#define _ADPREVL_ADPREV6_POSITION                           0x6
#define _ADPREVL_ADPREV6_SIZE                               0x1
#define _ADPREVL_ADPREV6_LENGTH                             0x1
#define _ADPREVL_ADPREV6_MASK                               0x40
#define _ADPREVL_ADPREV7_POSN                               0x7
#define _ADPREVL_ADPREV7_POSITION                           0x7
#define _ADPREVL_ADPREV7_SIZE                               0x1
#define _ADPREVL_ADPREV7_LENGTH                             0x1
#define _ADPREVL_ADPREV7_MASK                               0x80
#define _ADPREVL_ADPREV_POSN                                0x0
#define _ADPREVL_ADPREV_POSITION                            0x0
#define _ADPREVL_ADPREV_SIZE                                0x8
#define _ADPREVL_ADPREV_LENGTH                              0x8
#define _ADPREVL_ADPREV_MASK                                0xFF
#define _ADPREVL_PREV0_POSN                                 0x0
#define _ADPREVL_PREV0_POSITION                             0x0
#define _ADPREVL_PREV0_SIZE                                 0x1
#define _ADPREVL_PREV0_LENGTH                               0x1
#define _ADPREVL_PREV0_MASK                                 0x1
#define _ADPREVL_PREV1_POSN                                 0x1
#define _ADPREVL_PREV1_POSITION                             0x1
#define _ADPREVL_PREV1_SIZE                                 0x1
#define _ADPREVL_PREV1_LENGTH                               0x1
#define _ADPREVL_PREV1_MASK                                 0x2
#define _ADPREVL_PREV2_POSN                                 0x2
#define _ADPREVL_PREV2_POSITION                             0x2
#define _ADPREVL_PREV2_SIZE                                 0x1
#define _ADPREVL_PREV2_LENGTH                               0x1
#define _ADPREVL_PREV2_MASK                                 0x4
#define _ADPREVL_PREV3_POSN                                 0x3
#define _ADPREVL_PREV3_POSITION                             0x3
#define _ADPREVL_PREV3_SIZE                                 0x1
#define _ADPREVL_PREV3_LENGTH                               0x1
#define _ADPREVL_PREV3_MASK                                 0x8
#define _ADPREVL_PREV4_POSN                                 0x4
#define _ADPREVL_PREV4_POSITION                             0x4
#define _ADPREVL_PREV4_SIZE                                 0x1
#define _ADPREVL_PREV4_LENGTH                               0x1
#define _ADPREVL_PREV4_MASK                                 0x10
#define _ADPREVL_PREV5_POSN                                 0x5
#define _ADPREVL_PREV5_POSITION                             0x5
#define _ADPREVL_PREV5_SIZE                                 0x1
#define _ADPREVL_PREV5_LENGTH                               0x1
#define _ADPREVL_PREV5_MASK                                 0x20
#define _ADPREVL_PREV6_POSN                                 0x6
#define _ADPREVL_PREV6_POSITION                             0x6
#define _ADPREVL_PREV6_SIZE                                 0x1
#define _ADPREVL_PREV6_LENGTH                               0x1
#define _ADPREVL_PREV6_MASK                                 0x40
#define _ADPREVL_PREV7_POSN                                 0x7
#define _ADPREVL_PREV7_POSITION                             0x7
#define _ADPREVL_PREV7_SIZE                                 0x1
#define _ADPREVL_PREV7_LENGTH                               0x1
#define _ADPREVL_PREV7_MASK                                 0x80

// Register: ADPREVH
#define ADPREVH ADPREVH
extern volatile unsigned char           ADPREVH             __at(0x1D1C);
#ifndef _LIB_BUILD
asm("ADPREVH equ 01D1Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREV                   :8;
    };
    struct {
        unsigned ADPREV8                :1;
        unsigned ADPREV9                :1;
        unsigned ADPREV10               :1;
        unsigned ADPREV11               :1;
        unsigned ADPREV12               :1;
        unsigned ADPREV13               :1;
        unsigned ADPREV14               :1;
        unsigned ADPREV15               :1;
    };
    struct {
        unsigned ADPREV                 :8;
    };
    struct {
        unsigned PREV8                  :1;
        unsigned PREV9                  :1;
        unsigned PREV10                 :1;
        unsigned PREV11                 :1;
        unsigned PREV12                 :1;
        unsigned PREV13                 :1;
        unsigned PREV14                 :1;
        unsigned PREV15                 :1;
    };
} ADPREVHbits_t;
extern volatile ADPREVHbits_t ADPREVHbits __at(0x1D1C);
// bitfield macros
#define _ADPREVH_PREV_POSN                                  0x0
#define _ADPREVH_PREV_POSITION                              0x0
#define _ADPREVH_PREV_SIZE                                  0x8
#define _ADPREVH_PREV_LENGTH                                0x8
#define _ADPREVH_PREV_MASK                                  0xFF
#define _ADPREVH_ADPREV8_POSN                               0x0
#define _ADPREVH_ADPREV8_POSITION                           0x0
#define _ADPREVH_ADPREV8_SIZE                               0x1
#define _ADPREVH_ADPREV8_LENGTH                             0x1
#define _ADPREVH_ADPREV8_MASK                               0x1
#define _ADPREVH_ADPREV9_POSN                               0x1
#define _ADPREVH_ADPREV9_POSITION                           0x1
#define _ADPREVH_ADPREV9_SIZE                               0x1
#define _ADPREVH_ADPREV9_LENGTH                             0x1
#define _ADPREVH_ADPREV9_MASK                               0x2
#define _ADPREVH_ADPREV10_POSN                              0x2
#define _ADPREVH_ADPREV10_POSITION                          0x2
#define _ADPREVH_ADPREV10_SIZE                              0x1
#define _ADPREVH_ADPREV10_LENGTH                            0x1
#define _ADPREVH_ADPREV10_MASK                              0x4
#define _ADPREVH_ADPREV11_POSN                              0x3
#define _ADPREVH_ADPREV11_POSITION                          0x3
#define _ADPREVH_ADPREV11_SIZE                              0x1
#define _ADPREVH_ADPREV11_LENGTH                            0x1
#define _ADPREVH_ADPREV11_MASK                              0x8
#define _ADPREVH_ADPREV12_POSN                              0x4
#define _ADPREVH_ADPREV12_POSITION                          0x4
#define _ADPREVH_ADPREV12_SIZE                              0x1
#define _ADPREVH_ADPREV12_LENGTH                            0x1
#define _ADPREVH_ADPREV12_MASK                              0x10
#define _ADPREVH_ADPREV13_POSN                              0x5
#define _ADPREVH_ADPREV13_POSITION                          0x5
#define _ADPREVH_ADPREV13_SIZE                              0x1
#define _ADPREVH_ADPREV13_LENGTH                            0x1
#define _ADPREVH_ADPREV13_MASK                              0x20
#define _ADPREVH_ADPREV14_POSN                              0x6
#define _ADPREVH_ADPREV14_POSITION                          0x6
#define _ADPREVH_ADPREV14_SIZE                              0x1
#define _ADPREVH_ADPREV14_LENGTH                            0x1
#define _ADPREVH_ADPREV14_MASK                              0x40
#define _ADPREVH_ADPREV15_POSN                              0x7
#define _ADPREVH_ADPREV15_POSITION                          0x7
#define _ADPREVH_ADPREV15_SIZE                              0x1
#define _ADPREVH_ADPREV15_LENGTH                            0x1
#define _ADPREVH_ADPREV15_MASK                              0x80
#define _ADPREVH_ADPREV_POSN                                0x0
#define _ADPREVH_ADPREV_POSITION                            0x0
#define _ADPREVH_ADPREV_SIZE                                0x8
#define _ADPREVH_ADPREV_LENGTH                              0x8
#define _ADPREVH_ADPREV_MASK                                0xFF
#define _ADPREVH_PREV8_POSN                                 0x0
#define _ADPREVH_PREV8_POSITION                             0x0
#define _ADPREVH_PREV8_SIZE                                 0x1
#define _ADPREVH_PREV8_LENGTH                               0x1
#define _ADPREVH_PREV8_MASK                                 0x1
#define _ADPREVH_PREV9_POSN                                 0x1
#define _ADPREVH_PREV9_POSITION                             0x1
#define _ADPREVH_PREV9_SIZE                                 0x1
#define _ADPREVH_PREV9_LENGTH                               0x1
#define _ADPREVH_PREV9_MASK                                 0x2
#define _ADPREVH_PREV10_POSN                                0x2
#define _ADPREVH_PREV10_POSITION                            0x2
#define _ADPREVH_PREV10_SIZE                                0x1
#define _ADPREVH_PREV10_LENGTH                              0x1
#define _ADPREVH_PREV10_MASK                                0x4
#define _ADPREVH_PREV11_POSN                                0x3
#define _ADPREVH_PREV11_POSITION                            0x3
#define _ADPREVH_PREV11_SIZE                                0x1
#define _ADPREVH_PREV11_LENGTH                              0x1
#define _ADPREVH_PREV11_MASK                                0x8
#define _ADPREVH_PREV12_POSN                                0x4
#define _ADPREVH_PREV12_POSITION                            0x4
#define _ADPREVH_PREV12_SIZE                                0x1
#define _ADPREVH_PREV12_LENGTH                              0x1
#define _ADPREVH_PREV12_MASK                                0x10
#define _ADPREVH_PREV13_POSN                                0x5
#define _ADPREVH_PREV13_POSITION                            0x5
#define _ADPREVH_PREV13_SIZE                                0x1
#define _ADPREVH_PREV13_LENGTH                              0x1
#define _ADPREVH_PREV13_MASK                                0x20
#define _ADPREVH_PREV14_POSN                                0x6
#define _ADPREVH_PREV14_POSITION                            0x6
#define _ADPREVH_PREV14_SIZE                                0x1
#define _ADPREVH_PREV14_LENGTH                              0x1
#define _ADPREVH_PREV14_MASK                                0x40
#define _ADPREVH_PREV15_POSN                                0x7
#define _ADPREVH_PREV15_POSITION                            0x7
#define _ADPREVH_PREV15_SIZE                                0x1
#define _ADPREVH_PREV15_LENGTH                              0x1
#define _ADPREVH_PREV15_MASK                                0x80

// Register: ADRES
#define ADRES ADRES
extern volatile unsigned short          ADRES               __at(0x1D1D);
#ifndef _LIB_BUILD
asm("ADRES equ 01D1Dh");
#endif

// Register: ADRESL
#define ADRESL ADRESL
extern volatile unsigned char           ADRESL              __at(0x1D1D);
#ifndef _LIB_BUILD
asm("ADRESL equ 01D1Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RES                    :8;
    };
    struct {
        unsigned ADRES0                 :1;
        unsigned ADRES1                 :1;
        unsigned ADRES2                 :1;
        unsigned ADRES3                 :1;
        unsigned ADRES4                 :1;
        unsigned ADRES5                 :1;
        unsigned ADRES6                 :1;
        unsigned ADRES7                 :1;
    };
    struct {
        unsigned ADRES                  :8;
    };
    struct {
        unsigned RES0                   :1;
        unsigned RES1                   :1;
        unsigned RES2                   :1;
        unsigned RES3                   :1;
        unsigned RES4                   :1;
        unsigned RES5                   :1;
        unsigned RES6                   :1;
        unsigned RES7                   :1;
    };
} ADRESLbits_t;
extern volatile ADRESLbits_t ADRESLbits __at(0x1D1D);
// bitfield macros
#define _ADRESL_RES_POSN                                    0x0
#define _ADRESL_RES_POSITION                                0x0
#define _ADRESL_RES_SIZE                                    0x8
#define _ADRESL_RES_LENGTH                                  0x8
#define _ADRESL_RES_MASK                                    0xFF
#define _ADRESL_ADRES0_POSN                                 0x0
#define _ADRESL_ADRES0_POSITION                             0x0
#define _ADRESL_ADRES0_SIZE                                 0x1
#define _ADRESL_ADRES0_LENGTH                               0x1
#define _ADRESL_ADRES0_MASK                                 0x1
#define _ADRESL_ADRES1_POSN                                 0x1
#define _ADRESL_ADRES1_POSITION                             0x1
#define _ADRESL_ADRES1_SIZE                                 0x1
#define _ADRESL_ADRES1_LENGTH                               0x1
#define _ADRESL_ADRES1_MASK                                 0x2
#define _ADRESL_ADRES2_POSN                                 0x2
#define _ADRESL_ADRES2_POSITION                             0x2
#define _ADRESL_ADRES2_SIZE                                 0x1
#define _ADRESL_ADRES2_LENGTH                               0x1
#define _ADRESL_ADRES2_MASK                                 0x4
#define _ADRESL_ADRES3_POSN                                 0x3
#define _ADRESL_ADRES3_POSITION                             0x3
#define _ADRESL_ADRES3_SIZE                                 0x1
#define _ADRESL_ADRES3_LENGTH                               0x1
#define _ADRESL_ADRES3_MASK                                 0x8
#define _ADRESL_ADRES4_POSN                                 0x4
#define _ADRESL_ADRES4_POSITION                             0x4
#define _ADRESL_ADRES4_SIZE                                 0x1
#define _ADRESL_ADRES4_LENGTH                               0x1
#define _ADRESL_ADRES4_MASK                                 0x10
#define _ADRESL_ADRES5_POSN                                 0x5
#define _ADRESL_ADRES5_POSITION                             0x5
#define _ADRESL_ADRES5_SIZE                                 0x1
#define _ADRESL_ADRES5_LENGTH                               0x1
#define _ADRESL_ADRES5_MASK                                 0x20
#define _ADRESL_ADRES6_POSN                                 0x6
#define _ADRESL_ADRES6_POSITION                             0x6
#define _ADRESL_ADRES6_SIZE                                 0x1
#define _ADRESL_ADRES6_LENGTH                               0x1
#define _ADRESL_ADRES6_MASK                                 0x40
#define _ADRESL_ADRES7_POSN                                 0x7
#define _ADRESL_ADRES7_POSITION                             0x7
#define _ADRESL_ADRES7_SIZE                                 0x1
#define _ADRESL_ADRES7_LENGTH                               0x1
#define _ADRESL_ADRES7_MASK                                 0x80
#define _ADRESL_ADRES_POSN                                  0x0
#define _ADRESL_ADRES_POSITION                              0x0
#define _ADRESL_ADRES_SIZE                                  0x8
#define _ADRESL_ADRES_LENGTH                                0x8
#define _ADRESL_ADRES_MASK                                  0xFF
#define _ADRESL_RES0_POSN                                   0x0
#define _ADRESL_RES0_POSITION                               0x0
#define _ADRESL_RES0_SIZE                                   0x1
#define _ADRESL_RES0_LENGTH                                 0x1
#define _ADRESL_RES0_MASK                                   0x1
#define _ADRESL_RES1_POSN                                   0x1
#define _ADRESL_RES1_POSITION                               0x1
#define _ADRESL_RES1_SIZE                                   0x1
#define _ADRESL_RES1_LENGTH                                 0x1
#define _ADRESL_RES1_MASK                                   0x2
#define _ADRESL_RES2_POSN                                   0x2
#define _ADRESL_RES2_POSITION                               0x2
#define _ADRESL_RES2_SIZE                                   0x1
#define _ADRESL_RES2_LENGTH                                 0x1
#define _ADRESL_RES2_MASK                                   0x4
#define _ADRESL_RES3_POSN                                   0x3
#define _ADRESL_RES3_POSITION                               0x3
#define _ADRESL_RES3_SIZE                                   0x1
#define _ADRESL_RES3_LENGTH                                 0x1
#define _ADRESL_RES3_MASK                                   0x8
#define _ADRESL_RES4_POSN                                   0x4
#define _ADRESL_RES4_POSITION                               0x4
#define _ADRESL_RES4_SIZE                                   0x1
#define _ADRESL_RES4_LENGTH                                 0x1
#define _ADRESL_RES4_MASK                                   0x10
#define _ADRESL_RES5_POSN                                   0x5
#define _ADRESL_RES5_POSITION                               0x5
#define _ADRESL_RES5_SIZE                                   0x1
#define _ADRESL_RES5_LENGTH                                 0x1
#define _ADRESL_RES5_MASK                                   0x20
#define _ADRESL_RES6_POSN                                   0x6
#define _ADRESL_RES6_POSITION                               0x6
#define _ADRESL_RES6_SIZE                                   0x1
#define _ADRESL_RES6_LENGTH                                 0x1
#define _ADRESL_RES6_MASK                                   0x40
#define _ADRESL_RES7_POSN                                   0x7
#define _ADRESL_RES7_POSITION                               0x7
#define _ADRESL_RES7_SIZE                                   0x1
#define _ADRESL_RES7_LENGTH                                 0x1
#define _ADRESL_RES7_MASK                                   0x80

// Register: ADRESH
#define ADRESH ADRESH
extern volatile unsigned char           ADRESH              __at(0x1D1E);
#ifndef _LIB_BUILD
asm("ADRESH equ 01D1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADRES8                 :1;
        unsigned ADRES9                 :1;
        unsigned ADRES10                :1;
        unsigned ADRES11                :1;
        unsigned ADRES12                :1;
        unsigned ADRES13                :1;
        unsigned ADRES14                :1;
        unsigned ADRES15                :1;
    };
    struct {
        unsigned ADRES                  :8;
    };
    struct {
        unsigned RES8                   :1;
        unsigned RES9                   :1;
        unsigned RES10                  :1;
        unsigned RES11                  :1;
        unsigned RES12                  :1;
        unsigned RES13                  :1;
        unsigned RES14                  :1;
        unsigned RES15                  :1;
    };
} ADRESHbits_t;
extern volatile ADRESHbits_t ADRESHbits __at(0x1D1E);
// bitfield macros
#define _ADRESH_ADRES8_POSN                                 0x0
#define _ADRESH_ADRES8_POSITION                             0x0
#define _ADRESH_ADRES8_SIZE                                 0x1
#define _ADRESH_ADRES8_LENGTH                               0x1
#define _ADRESH_ADRES8_MASK                                 0x1
#define _ADRESH_ADRES9_POSN                                 0x1
#define _ADRESH_ADRES9_POSITION                             0x1
#define _ADRESH_ADRES9_SIZE                                 0x1
#define _ADRESH_ADRES9_LENGTH                               0x1
#define _ADRESH_ADRES9_MASK                                 0x2
#define _ADRESH_ADRES10_POSN                                0x2
#define _ADRESH_ADRES10_POSITION                            0x2
#define _ADRESH_ADRES10_SIZE                                0x1
#define _ADRESH_ADRES10_LENGTH                              0x1
#define _ADRESH_ADRES10_MASK                                0x4
#define _ADRESH_ADRES11_POSN                                0x3
#define _ADRESH_ADRES11_POSITION                            0x3
#define _ADRESH_ADRES11_SIZE                                0x1
#define _ADRESH_ADRES11_LENGTH                              0x1
#define _ADRESH_ADRES11_MASK                                0x8
#define _ADRESH_ADRES12_POSN                                0x4
#define _ADRESH_ADRES12_POSITION                            0x4
#define _ADRESH_ADRES12_SIZE                                0x1
#define _ADRESH_ADRES12_LENGTH                              0x1
#define _ADRESH_ADRES12_MASK                                0x10
#define _ADRESH_ADRES13_POSN                                0x5
#define _ADRESH_ADRES13_POSITION                            0x5
#define _ADRESH_ADRES13_SIZE                                0x1
#define _ADRESH_ADRES13_LENGTH                              0x1
#define _ADRESH_ADRES13_MASK                                0x20
#define _ADRESH_ADRES14_POSN                                0x6
#define _ADRESH_ADRES14_POSITION                            0x6
#define _ADRESH_ADRES14_SIZE                                0x1
#define _ADRESH_ADRES14_LENGTH                              0x1
#define _ADRESH_ADRES14_MASK                                0x40
#define _ADRESH_ADRES15_POSN                                0x7
#define _ADRESH_ADRES15_POSITION                            0x7
#define _ADRESH_ADRES15_SIZE                                0x1
#define _ADRESH_ADRES15_LENGTH                              0x1
#define _ADRESH_ADRES15_MASK                                0x80
#define _ADRESH_ADRES_POSN                                  0x0
#define _ADRESH_ADRES_POSITION                              0x0
#define _ADRESH_ADRES_SIZE                                  0x8
#define _ADRESH_ADRES_LENGTH                                0x8
#define _ADRESH_ADRES_MASK                                  0xFF
#define _ADRESH_RES8_POSN                                   0x0
#define _ADRESH_RES8_POSITION                               0x0
#define _ADRESH_RES8_SIZE                                   0x1
#define _ADRESH_RES8_LENGTH                                 0x1
#define _ADRESH_RES8_MASK                                   0x1
#define _ADRESH_RES9_POSN                                   0x1
#define _ADRESH_RES9_POSITION                               0x1
#define _ADRESH_RES9_SIZE                                   0x1
#define _ADRESH_RES9_LENGTH                                 0x1
#define _ADRESH_RES9_MASK                                   0x2
#define _ADRESH_RES10_POSN                                  0x2
#define _ADRESH_RES10_POSITION                              0x2
#define _ADRESH_RES10_SIZE                                  0x1
#define _ADRESH_RES10_LENGTH                                0x1
#define _ADRESH_RES10_MASK                                  0x4
#define _ADRESH_RES11_POSN                                  0x3
#define _ADRESH_RES11_POSITION                              0x3
#define _ADRESH_RES11_SIZE                                  0x1
#define _ADRESH_RES11_LENGTH                                0x1
#define _ADRESH_RES11_MASK                                  0x8
#define _ADRESH_RES12_POSN                                  0x4
#define _ADRESH_RES12_POSITION                              0x4
#define _ADRESH_RES12_SIZE                                  0x1
#define _ADRESH_RES12_LENGTH                                0x1
#define _ADRESH_RES12_MASK                                  0x10
#define _ADRESH_RES13_POSN                                  0x5
#define _ADRESH_RES13_POSITION                              0x5
#define _ADRESH_RES13_SIZE                                  0x1
#define _ADRESH_RES13_LENGTH                                0x1
#define _ADRESH_RES13_MASK                                  0x20
#define _ADRESH_RES14_POSN                                  0x6
#define _ADRESH_RES14_POSITION                              0x6
#define _ADRESH_RES14_SIZE                                  0x1
#define _ADRESH_RES14_LENGTH                                0x1
#define _ADRESH_RES14_MASK                                  0x40
#define _ADRESH_RES15_POSN                                  0x7
#define _ADRESH_RES15_POSITION                              0x7
#define _ADRESH_RES15_SIZE                                  0x1
#define _ADRESH_RES15_LENGTH                                0x1
#define _ADRESH_RES15_MASK                                  0x80

// Register: ADPCH
#define ADPCH ADPCH
extern volatile unsigned char           ADPCH               __at(0x1D1F);
#ifndef _LIB_BUILD
asm("ADPCH equ 01D1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :8;
    };
    struct {
        unsigned ADPCH0                 :1;
        unsigned ADPCH1                 :1;
        unsigned ADPCH2                 :1;
        unsigned ADPCH3                 :1;
        unsigned ADPCH4                 :1;
        unsigned ADPCH5                 :1;
    };
} ADPCHbits_t;
extern volatile ADPCHbits_t ADPCHbits __at(0x1D1F);
// bitfield macros
#define _ADPCH_PCH_POSN                                     0x0
#define _ADPCH_PCH_POSITION                                 0x0
#define _ADPCH_PCH_SIZE                                     0x8
#define _ADPCH_PCH_LENGTH                                   0x8
#define _ADPCH_PCH_MASK                                     0xFF
#define _ADPCH_ADPCH0_POSN                                  0x0
#define _ADPCH_ADPCH0_POSITION                              0x0
#define _ADPCH_ADPCH0_SIZE                                  0x1
#define _ADPCH_ADPCH0_LENGTH                                0x1
#define _ADPCH_ADPCH0_MASK                                  0x1
#define _ADPCH_ADPCH1_POSN                                  0x1
#define _ADPCH_ADPCH1_POSITION                              0x1
#define _ADPCH_ADPCH1_SIZE                                  0x1
#define _ADPCH_ADPCH1_LENGTH                                0x1
#define _ADPCH_ADPCH1_MASK                                  0x2
#define _ADPCH_ADPCH2_POSN                                  0x2
#define _ADPCH_ADPCH2_POSITION                              0x2
#define _ADPCH_ADPCH2_SIZE                                  0x1
#define _ADPCH_ADPCH2_LENGTH                                0x1
#define _ADPCH_ADPCH2_MASK                                  0x4
#define _ADPCH_ADPCH3_POSN                                  0x3
#define _ADPCH_ADPCH3_POSITION                              0x3
#define _ADPCH_ADPCH3_SIZE                                  0x1
#define _ADPCH_ADPCH3_LENGTH                                0x1
#define _ADPCH_ADPCH3_MASK                                  0x8
#define _ADPCH_ADPCH4_POSN                                  0x4
#define _ADPCH_ADPCH4_POSITION                              0x4
#define _ADPCH_ADPCH4_SIZE                                  0x1
#define _ADPCH_ADPCH4_LENGTH                                0x1
#define _ADPCH_ADPCH4_MASK                                  0x10
#define _ADPCH_ADPCH5_POSN                                  0x5
#define _ADPCH_ADPCH5_POSITION                              0x5
#define _ADPCH_ADPCH5_SIZE                                  0x1
#define _ADPCH_ADPCH5_LENGTH                                0x1
#define _ADPCH_ADPCH5_MASK                                  0x20

// Register: ADACQ
#define ADACQ ADACQ
extern volatile unsigned short          ADACQ               __at(0x1D21);
#ifndef _LIB_BUILD
asm("ADACQ equ 01D21h");
#endif

// Register: ADACQL
#define ADACQL ADACQL
extern volatile unsigned char           ADACQL              __at(0x1D21);
#ifndef _LIB_BUILD
asm("ADACQL equ 01D21h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACQ                    :8;
    };
    struct {
        unsigned ADACQ0                 :1;
        unsigned ADACQ1                 :1;
        unsigned ADACQ2                 :1;
        unsigned ADACQ3                 :1;
        unsigned ADACQ4                 :1;
        unsigned ADACQ5                 :1;
        unsigned ADACQ6                 :1;
        unsigned ADACQ7                 :1;
    };
    struct {
        unsigned ADACQ                  :8;
    };
    struct {
        unsigned ACQ0                   :1;
        unsigned ACQ1                   :1;
        unsigned ACQ2                   :1;
        unsigned ACQ3                   :1;
        unsigned ACQ4                   :1;
        unsigned ACQ5                   :1;
        unsigned ACQ6                   :1;
        unsigned ACQ7                   :1;
    };
} ADACQLbits_t;
extern volatile ADACQLbits_t ADACQLbits __at(0x1D21);
// bitfield macros
#define _ADACQL_ACQ_POSN                                    0x0
#define _ADACQL_ACQ_POSITION                                0x0
#define _ADACQL_ACQ_SIZE                                    0x8
#define _ADACQL_ACQ_LENGTH                                  0x8
#define _ADACQL_ACQ_MASK                                    0xFF
#define _ADACQL_ADACQ0_POSN                                 0x0
#define _ADACQL_ADACQ0_POSITION                             0x0
#define _ADACQL_ADACQ0_SIZE                                 0x1
#define _ADACQL_ADACQ0_LENGTH                               0x1
#define _ADACQL_ADACQ0_MASK                                 0x1
#define _ADACQL_ADACQ1_POSN                                 0x1
#define _ADACQL_ADACQ1_POSITION                             0x1
#define _ADACQL_ADACQ1_SIZE                                 0x1
#define _ADACQL_ADACQ1_LENGTH                               0x1
#define _ADACQL_ADACQ1_MASK                                 0x2
#define _ADACQL_ADACQ2_POSN                                 0x2
#define _ADACQL_ADACQ2_POSITION                             0x2
#define _ADACQL_ADACQ2_SIZE                                 0x1
#define _ADACQL_ADACQ2_LENGTH                               0x1
#define _ADACQL_ADACQ2_MASK                                 0x4
#define _ADACQL_ADACQ3_POSN                                 0x3
#define _ADACQL_ADACQ3_POSITION                             0x3
#define _ADACQL_ADACQ3_SIZE                                 0x1
#define _ADACQL_ADACQ3_LENGTH                               0x1
#define _ADACQL_ADACQ3_MASK                                 0x8
#define _ADACQL_ADACQ4_POSN                                 0x4
#define _ADACQL_ADACQ4_POSITION                             0x4
#define _ADACQL_ADACQ4_SIZE                                 0x1
#define _ADACQL_ADACQ4_LENGTH                               0x1
#define _ADACQL_ADACQ4_MASK                                 0x10
#define _ADACQL_ADACQ5_POSN                                 0x5
#define _ADACQL_ADACQ5_POSITION                             0x5
#define _ADACQL_ADACQ5_SIZE                                 0x1
#define _ADACQL_ADACQ5_LENGTH                               0x1
#define _ADACQL_ADACQ5_MASK                                 0x20
#define _ADACQL_ADACQ6_POSN                                 0x6
#define _ADACQL_ADACQ6_POSITION                             0x6
#define _ADACQL_ADACQ6_SIZE                                 0x1
#define _ADACQL_ADACQ6_LENGTH                               0x1
#define _ADACQL_ADACQ6_MASK                                 0x40
#define _ADACQL_ADACQ7_POSN                                 0x7
#define _ADACQL_ADACQ7_POSITION                             0x7
#define _ADACQL_ADACQ7_SIZE                                 0x1
#define _ADACQL_ADACQ7_LENGTH                               0x1
#define _ADACQL_ADACQ7_MASK                                 0x80
#define _ADACQL_ADACQ_POSN                                  0x0
#define _ADACQL_ADACQ_POSITION                              0x0
#define _ADACQL_ADACQ_SIZE                                  0x8
#define _ADACQL_ADACQ_LENGTH                                0x8
#define _ADACQL_ADACQ_MASK                                  0xFF
#define _ADACQL_ACQ0_POSN                                   0x0
#define _ADACQL_ACQ0_POSITION                               0x0
#define _ADACQL_ACQ0_SIZE                                   0x1
#define _ADACQL_ACQ0_LENGTH                                 0x1
#define _ADACQL_ACQ0_MASK                                   0x1
#define _ADACQL_ACQ1_POSN                                   0x1
#define _ADACQL_ACQ1_POSITION                               0x1
#define _ADACQL_ACQ1_SIZE                                   0x1
#define _ADACQL_ACQ1_LENGTH                                 0x1
#define _ADACQL_ACQ1_MASK                                   0x2
#define _ADACQL_ACQ2_POSN                                   0x2
#define _ADACQL_ACQ2_POSITION                               0x2
#define _ADACQL_ACQ2_SIZE                                   0x1
#define _ADACQL_ACQ2_LENGTH                                 0x1
#define _ADACQL_ACQ2_MASK                                   0x4
#define _ADACQL_ACQ3_POSN                                   0x3
#define _ADACQL_ACQ3_POSITION                               0x3
#define _ADACQL_ACQ3_SIZE                                   0x1
#define _ADACQL_ACQ3_LENGTH                                 0x1
#define _ADACQL_ACQ3_MASK                                   0x8
#define _ADACQL_ACQ4_POSN                                   0x4
#define _ADACQL_ACQ4_POSITION                               0x4
#define _ADACQL_ACQ4_SIZE                                   0x1
#define _ADACQL_ACQ4_LENGTH                                 0x1
#define _ADACQL_ACQ4_MASK                                   0x10
#define _ADACQL_ACQ5_POSN                                   0x5
#define _ADACQL_ACQ5_POSITION                               0x5
#define _ADACQL_ACQ5_SIZE                                   0x1
#define _ADACQL_ACQ5_LENGTH                                 0x1
#define _ADACQL_ACQ5_MASK                                   0x20
#define _ADACQL_ACQ6_POSN                                   0x6
#define _ADACQL_ACQ6_POSITION                               0x6
#define _ADACQL_ACQ6_SIZE                                   0x1
#define _ADACQL_ACQ6_LENGTH                                 0x1
#define _ADACQL_ACQ6_MASK                                   0x40
#define _ADACQL_ACQ7_POSN                                   0x7
#define _ADACQL_ACQ7_POSITION                               0x7
#define _ADACQL_ACQ7_SIZE                                   0x1
#define _ADACQL_ACQ7_LENGTH                                 0x1
#define _ADACQL_ACQ7_MASK                                   0x80

// Register: ADACQH
#define ADACQH ADACQH
extern volatile unsigned char           ADACQH              __at(0x1D22);
#ifndef _LIB_BUILD
asm("ADACQH equ 01D22h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACQ                    :5;
    };
    struct {
        unsigned ADACQ8                 :1;
        unsigned ADACQ9                 :1;
        unsigned ADACQ10                :1;
        unsigned ADACQ11                :1;
        unsigned ADACQ12                :1;
    };
    struct {
        unsigned ADACQ                  :5;
    };
    struct {
        unsigned ACQ8                   :1;
        unsigned ACQ9                   :1;
        unsigned ACQ10                  :1;
        unsigned ACQ11                  :1;
        unsigned ACQ12                  :1;
    };
} ADACQHbits_t;
extern volatile ADACQHbits_t ADACQHbits __at(0x1D22);
// bitfield macros
#define _ADACQH_ACQ_POSN                                    0x0
#define _ADACQH_ACQ_POSITION                                0x0
#define _ADACQH_ACQ_SIZE                                    0x5
#define _ADACQH_ACQ_LENGTH                                  0x5
#define _ADACQH_ACQ_MASK                                    0x1F
#define _ADACQH_ADACQ8_POSN                                 0x0
#define _ADACQH_ADACQ8_POSITION                             0x0
#define _ADACQH_ADACQ8_SIZE                                 0x1
#define _ADACQH_ADACQ8_LENGTH                               0x1
#define _ADACQH_ADACQ8_MASK                                 0x1
#define _ADACQH_ADACQ9_POSN                                 0x1
#define _ADACQH_ADACQ9_POSITION                             0x1
#define _ADACQH_ADACQ9_SIZE                                 0x1
#define _ADACQH_ADACQ9_LENGTH                               0x1
#define _ADACQH_ADACQ9_MASK                                 0x2
#define _ADACQH_ADACQ10_POSN                                0x2
#define _ADACQH_ADACQ10_POSITION                            0x2
#define _ADACQH_ADACQ10_SIZE                                0x1
#define _ADACQH_ADACQ10_LENGTH                              0x1
#define _ADACQH_ADACQ10_MASK                                0x4
#define _ADACQH_ADACQ11_POSN                                0x3
#define _ADACQH_ADACQ11_POSITION                            0x3
#define _ADACQH_ADACQ11_SIZE                                0x1
#define _ADACQH_ADACQ11_LENGTH                              0x1
#define _ADACQH_ADACQ11_MASK                                0x8
#define _ADACQH_ADACQ12_POSN                                0x4
#define _ADACQH_ADACQ12_POSITION                            0x4
#define _ADACQH_ADACQ12_SIZE                                0x1
#define _ADACQH_ADACQ12_LENGTH                              0x1
#define _ADACQH_ADACQ12_MASK                                0x10
#define _ADACQH_ADACQ_POSN                                  0x0
#define _ADACQH_ADACQ_POSITION                              0x0
#define _ADACQH_ADACQ_SIZE                                  0x5
#define _ADACQH_ADACQ_LENGTH                                0x5
#define _ADACQH_ADACQ_MASK                                  0x1F
#define _ADACQH_ACQ8_POSN                                   0x0
#define _ADACQH_ACQ8_POSITION                               0x0
#define _ADACQH_ACQ8_SIZE                                   0x1
#define _ADACQH_ACQ8_LENGTH                                 0x1
#define _ADACQH_ACQ8_MASK                                   0x1
#define _ADACQH_ACQ9_POSN                                   0x1
#define _ADACQH_ACQ9_POSITION                               0x1
#define _ADACQH_ACQ9_SIZE                                   0x1
#define _ADACQH_ACQ9_LENGTH                                 0x1
#define _ADACQH_ACQ9_MASK                                   0x2
#define _ADACQH_ACQ10_POSN                                  0x2
#define _ADACQH_ACQ10_POSITION                              0x2
#define _ADACQH_ACQ10_SIZE                                  0x1
#define _ADACQH_ACQ10_LENGTH                                0x1
#define _ADACQH_ACQ10_MASK                                  0x4
#define _ADACQH_ACQ11_POSN                                  0x3
#define _ADACQH_ACQ11_POSITION                              0x3
#define _ADACQH_ACQ11_SIZE                                  0x1
#define _ADACQH_ACQ11_LENGTH                                0x1
#define _ADACQH_ACQ11_MASK                                  0x8
#define _ADACQH_ACQ12_POSN                                  0x4
#define _ADACQH_ACQ12_POSITION                              0x4
#define _ADACQH_ACQ12_SIZE                                  0x1
#define _ADACQH_ACQ12_LENGTH                                0x1
#define _ADACQH_ACQ12_MASK                                  0x10

// Register: ADCAP
#define ADCAP ADCAP
extern volatile unsigned char           ADCAP               __at(0x1D23);
#ifndef _LIB_BUILD
asm("ADCAP equ 01D23h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CAP                    :8;
    };
    struct {
        unsigned ADCAP0                 :1;
        unsigned ADCAP1                 :1;
        unsigned ADCAP2                 :1;
        unsigned ADCAP3                 :1;
        unsigned ADCAP4                 :1;
    };
} ADCAPbits_t;
extern volatile ADCAPbits_t ADCAPbits __at(0x1D23);
// bitfield macros
#define _ADCAP_CAP_POSN                                     0x0
#define _ADCAP_CAP_POSITION                                 0x0
#define _ADCAP_CAP_SIZE                                     0x8
#define _ADCAP_CAP_LENGTH                                   0x8
#define _ADCAP_CAP_MASK                                     0xFF
#define _ADCAP_ADCAP0_POSN                                  0x0
#define _ADCAP_ADCAP0_POSITION                              0x0
#define _ADCAP_ADCAP0_SIZE                                  0x1
#define _ADCAP_ADCAP0_LENGTH                                0x1
#define _ADCAP_ADCAP0_MASK                                  0x1
#define _ADCAP_ADCAP1_POSN                                  0x1
#define _ADCAP_ADCAP1_POSITION                              0x1
#define _ADCAP_ADCAP1_SIZE                                  0x1
#define _ADCAP_ADCAP1_LENGTH                                0x1
#define _ADCAP_ADCAP1_MASK                                  0x2
#define _ADCAP_ADCAP2_POSN                                  0x2
#define _ADCAP_ADCAP2_POSITION                              0x2
#define _ADCAP_ADCAP2_SIZE                                  0x1
#define _ADCAP_ADCAP2_LENGTH                                0x1
#define _ADCAP_ADCAP2_MASK                                  0x4
#define _ADCAP_ADCAP3_POSN                                  0x3
#define _ADCAP_ADCAP3_POSITION                              0x3
#define _ADCAP_ADCAP3_SIZE                                  0x1
#define _ADCAP_ADCAP3_LENGTH                                0x1
#define _ADCAP_ADCAP3_MASK                                  0x8
#define _ADCAP_ADCAP4_POSN                                  0x4
#define _ADCAP_ADCAP4_POSITION                              0x4
#define _ADCAP_ADCAP4_SIZE                                  0x1
#define _ADCAP_ADCAP4_LENGTH                                0x1
#define _ADCAP_ADCAP4_MASK                                  0x10

// Register: ADPRE
#define ADPRE ADPRE
extern volatile unsigned short          ADPRE               __at(0x1D24);
#ifndef _LIB_BUILD
asm("ADPRE equ 01D24h");
#endif

// Register: ADPREL
#define ADPREL ADPREL
extern volatile unsigned char           ADPREL              __at(0x1D24);
#ifndef _LIB_BUILD
asm("ADPREL equ 01D24h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRE                    :8;
    };
    struct {
        unsigned PRE0                   :1;
        unsigned PRE1                   :1;
        unsigned PRE2                   :1;
        unsigned PRE3                   :1;
        unsigned PRE4                   :1;
        unsigned PRE5                   :1;
        unsigned PRE6                   :1;
        unsigned PRE7                   :1;
    };
    struct {
        unsigned ADPRE                  :8;
    };
    struct {
        unsigned ADPRE0                 :1;
        unsigned ADPRE1                 :1;
        unsigned ADPRE2                 :1;
        unsigned ADPRE3                 :1;
        unsigned ADPRE4                 :1;
        unsigned ADPRE5                 :1;
        unsigned ADPRE6                 :1;
        unsigned ADPRE7                 :1;
    };
} ADPRELbits_t;
extern volatile ADPRELbits_t ADPRELbits __at(0x1D24);
// bitfield macros
#define _ADPREL_PRE_POSN                                    0x0
#define _ADPREL_PRE_POSITION                                0x0
#define _ADPREL_PRE_SIZE                                    0x8
#define _ADPREL_PRE_LENGTH                                  0x8
#define _ADPREL_PRE_MASK                                    0xFF
#define _ADPREL_PRE0_POSN                                   0x0
#define _ADPREL_PRE0_POSITION                               0x0
#define _ADPREL_PRE0_SIZE                                   0x1
#define _ADPREL_PRE0_LENGTH                                 0x1
#define _ADPREL_PRE0_MASK                                   0x1
#define _ADPREL_PRE1_POSN                                   0x1
#define _ADPREL_PRE1_POSITION                               0x1
#define _ADPREL_PRE1_SIZE                                   0x1
#define _ADPREL_PRE1_LENGTH                                 0x1
#define _ADPREL_PRE1_MASK                                   0x2
#define _ADPREL_PRE2_POSN                                   0x2
#define _ADPREL_PRE2_POSITION                               0x2
#define _ADPREL_PRE2_SIZE                                   0x1
#define _ADPREL_PRE2_LENGTH                                 0x1
#define _ADPREL_PRE2_MASK                                   0x4
#define _ADPREL_PRE3_POSN                                   0x3
#define _ADPREL_PRE3_POSITION                               0x3
#define _ADPREL_PRE3_SIZE                                   0x1
#define _ADPREL_PRE3_LENGTH                                 0x1
#define _ADPREL_PRE3_MASK                                   0x8
#define _ADPREL_PRE4_POSN                                   0x4
#define _ADPREL_PRE4_POSITION                               0x4
#define _ADPREL_PRE4_SIZE                                   0x1
#define _ADPREL_PRE4_LENGTH                                 0x1
#define _ADPREL_PRE4_MASK                                   0x10
#define _ADPREL_PRE5_POSN                                   0x5
#define _ADPREL_PRE5_POSITION                               0x5
#define _ADPREL_PRE5_SIZE                                   0x1
#define _ADPREL_PRE5_LENGTH                                 0x1
#define _ADPREL_PRE5_MASK                                   0x20
#define _ADPREL_PRE6_POSN                                   0x6
#define _ADPREL_PRE6_POSITION                               0x6
#define _ADPREL_PRE6_SIZE                                   0x1
#define _ADPREL_PRE6_LENGTH                                 0x1
#define _ADPREL_PRE6_MASK                                   0x40
#define _ADPREL_PRE7_POSN                                   0x7
#define _ADPREL_PRE7_POSITION                               0x7
#define _ADPREL_PRE7_SIZE                                   0x1
#define _ADPREL_PRE7_LENGTH                                 0x1
#define _ADPREL_PRE7_MASK                                   0x80
#define _ADPREL_ADPRE_POSN                                  0x0
#define _ADPREL_ADPRE_POSITION                              0x0
#define _ADPREL_ADPRE_SIZE                                  0x8
#define _ADPREL_ADPRE_LENGTH                                0x8
#define _ADPREL_ADPRE_MASK                                  0xFF
#define _ADPREL_ADPRE0_POSN                                 0x0
#define _ADPREL_ADPRE0_POSITION                             0x0
#define _ADPREL_ADPRE0_SIZE                                 0x1
#define _ADPREL_ADPRE0_LENGTH                               0x1
#define _ADPREL_ADPRE0_MASK                                 0x1
#define _ADPREL_ADPRE1_POSN                                 0x1
#define _ADPREL_ADPRE1_POSITION                             0x1
#define _ADPREL_ADPRE1_SIZE                                 0x1
#define _ADPREL_ADPRE1_LENGTH                               0x1
#define _ADPREL_ADPRE1_MASK                                 0x2
#define _ADPREL_ADPRE2_POSN                                 0x2
#define _ADPREL_ADPRE2_POSITION                             0x2
#define _ADPREL_ADPRE2_SIZE                                 0x1
#define _ADPREL_ADPRE2_LENGTH                               0x1
#define _ADPREL_ADPRE2_MASK                                 0x4
#define _ADPREL_ADPRE3_POSN                                 0x3
#define _ADPREL_ADPRE3_POSITION                             0x3
#define _ADPREL_ADPRE3_SIZE                                 0x1
#define _ADPREL_ADPRE3_LENGTH                               0x1
#define _ADPREL_ADPRE3_MASK                                 0x8
#define _ADPREL_ADPRE4_POSN                                 0x4
#define _ADPREL_ADPRE4_POSITION                             0x4
#define _ADPREL_ADPRE4_SIZE                                 0x1
#define _ADPREL_ADPRE4_LENGTH                               0x1
#define _ADPREL_ADPRE4_MASK                                 0x10
#define _ADPREL_ADPRE5_POSN                                 0x5
#define _ADPREL_ADPRE5_POSITION                             0x5
#define _ADPREL_ADPRE5_SIZE                                 0x1
#define _ADPREL_ADPRE5_LENGTH                               0x1
#define _ADPREL_ADPRE5_MASK                                 0x20
#define _ADPREL_ADPRE6_POSN                                 0x6
#define _ADPREL_ADPRE6_POSITION                             0x6
#define _ADPREL_ADPRE6_SIZE                                 0x1
#define _ADPREL_ADPRE6_LENGTH                               0x1
#define _ADPREL_ADPRE6_MASK                                 0x40
#define _ADPREL_ADPRE7_POSN                                 0x7
#define _ADPREL_ADPRE7_POSITION                             0x7
#define _ADPREL_ADPRE7_SIZE                                 0x1
#define _ADPREL_ADPRE7_LENGTH                               0x1
#define _ADPREL_ADPRE7_MASK                                 0x80

// Register: ADPREH
#define ADPREH ADPREH
extern volatile unsigned char           ADPREH              __at(0x1D25);
#ifndef _LIB_BUILD
asm("ADPREH equ 01D25h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRE                    :5;
    };
    struct {
        unsigned PRE8                   :1;
        unsigned PRE9                   :1;
        unsigned PRE10                  :1;
        unsigned PRE11                  :1;
        unsigned PRE12                  :1;
    };
    struct {
        unsigned ADPRE                  :5;
    };
    struct {
        unsigned ADPRE8                 :1;
        unsigned ADPRE9                 :1;
        unsigned ADPRE10                :1;
        unsigned ADPRE11                :1;
        unsigned ADPRE12                :1;
    };
} ADPREHbits_t;
extern volatile ADPREHbits_t ADPREHbits __at(0x1D25);
// bitfield macros
#define _ADPREH_PRE_POSN                                    0x0
#define _ADPREH_PRE_POSITION                                0x0
#define _ADPREH_PRE_SIZE                                    0x5
#define _ADPREH_PRE_LENGTH                                  0x5
#define _ADPREH_PRE_MASK                                    0x1F
#define _ADPREH_PRE8_POSN                                   0x0
#define _ADPREH_PRE8_POSITION                               0x0
#define _ADPREH_PRE8_SIZE                                   0x1
#define _ADPREH_PRE8_LENGTH                                 0x1
#define _ADPREH_PRE8_MASK                                   0x1
#define _ADPREH_PRE9_POSN                                   0x1
#define _ADPREH_PRE9_POSITION                               0x1
#define _ADPREH_PRE9_SIZE                                   0x1
#define _ADPREH_PRE9_LENGTH                                 0x1
#define _ADPREH_PRE9_MASK                                   0x2
#define _ADPREH_PRE10_POSN                                  0x2
#define _ADPREH_PRE10_POSITION                              0x2
#define _ADPREH_PRE10_SIZE                                  0x1
#define _ADPREH_PRE10_LENGTH                                0x1
#define _ADPREH_PRE10_MASK                                  0x4
#define _ADPREH_PRE11_POSN                                  0x3
#define _ADPREH_PRE11_POSITION                              0x3
#define _ADPREH_PRE11_SIZE                                  0x1
#define _ADPREH_PRE11_LENGTH                                0x1
#define _ADPREH_PRE11_MASK                                  0x8
#define _ADPREH_PRE12_POSN                                  0x4
#define _ADPREH_PRE12_POSITION                              0x4
#define _ADPREH_PRE12_SIZE                                  0x1
#define _ADPREH_PRE12_LENGTH                                0x1
#define _ADPREH_PRE12_MASK                                  0x10
#define _ADPREH_ADPRE_POSN                                  0x0
#define _ADPREH_ADPRE_POSITION                              0x0
#define _ADPREH_ADPRE_SIZE                                  0x5
#define _ADPREH_ADPRE_LENGTH                                0x5
#define _ADPREH_ADPRE_MASK                                  0x1F
#define _ADPREH_ADPRE8_POSN                                 0x0
#define _ADPREH_ADPRE8_POSITION                             0x0
#define _ADPREH_ADPRE8_SIZE                                 0x1
#define _ADPREH_ADPRE8_LENGTH                               0x1
#define _ADPREH_ADPRE8_MASK                                 0x1
#define _ADPREH_ADPRE9_POSN                                 0x1
#define _ADPREH_ADPRE9_POSITION                             0x1
#define _ADPREH_ADPRE9_SIZE                                 0x1
#define _ADPREH_ADPRE9_LENGTH                               0x1
#define _ADPREH_ADPRE9_MASK                                 0x2
#define _ADPREH_ADPRE10_POSN                                0x2
#define _ADPREH_ADPRE10_POSITION                            0x2
#define _ADPREH_ADPRE10_SIZE                                0x1
#define _ADPREH_ADPRE10_LENGTH                              0x1
#define _ADPREH_ADPRE10_MASK                                0x4
#define _ADPREH_ADPRE11_POSN                                0x3
#define _ADPREH_ADPRE11_POSITION                            0x3
#define _ADPREH_ADPRE11_SIZE                                0x1
#define _ADPREH_ADPRE11_LENGTH                              0x1
#define _ADPREH_ADPRE11_MASK                                0x8
#define _ADPREH_ADPRE12_POSN                                0x4
#define _ADPREH_ADPRE12_POSITION                            0x4
#define _ADPREH_ADPRE12_SIZE                                0x1
#define _ADPREH_ADPRE12_LENGTH                              0x1
#define _ADPREH_ADPRE12_MASK                                0x10

// Register: ADCON0
#define ADCON0 ADCON0
extern volatile unsigned char           ADCON0              __at(0x1D26);
#ifndef _LIB_BUILD
asm("ADCON0 equ 01D26h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GO                     :1;
        unsigned                        :1;
        unsigned FM                     :2;
        unsigned CS                     :1;
        unsigned                        :1;
        unsigned CONT                   :1;
        unsigned ON                     :1;
    };
    struct {
        unsigned ADGO                   :1;
        unsigned                        :1;
        unsigned ADFM                   :2;
        unsigned ADCS                   :1;
        unsigned                        :1;
        unsigned ADCONT                 :1;
        unsigned ADON                   :1;
    };
    struct {
        unsigned DONE                   :1;
        unsigned                        :1;
        unsigned FM0                    :1;
    };
    struct {
        unsigned GO_nDONE               :1;
        unsigned                        :1;
        unsigned ADFM0                  :1;
    };
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits __at(0x1D26);
// bitfield macros
#define _ADCON0_GO_POSN                                     0x0
#define _ADCON0_GO_POSITION                                 0x0
#define _ADCON0_GO_SIZE                                     0x1
#define _ADCON0_GO_LENGTH                                   0x1
#define _ADCON0_GO_MASK                                     0x1
#define _ADCON0_FM_POSN                                     0x2
#define _ADCON0_FM_POSITION                                 0x2
#define _ADCON0_FM_SIZE                                     0x2
#define _ADCON0_FM_LENGTH                                   0x2
#define _ADCON0_FM_MASK                                     0xC
#define _ADCON0_CS_POSN                                     0x4
#define _ADCON0_CS_POSITION                                 0x4
#define _ADCON0_CS_SIZE                                     0x1
#define _ADCON0_CS_LENGTH                                   0x1
#define _ADCON0_CS_MASK                                     0x10
#define _ADCON0_CONT_POSN                                   0x6
#define _ADCON0_CONT_POSITION                               0x6
#define _ADCON0_CONT_SIZE                                   0x1
#define _ADCON0_CONT_LENGTH                                 0x1
#define _ADCON0_CONT_MASK                                   0x40
#define _ADCON0_ON_POSN                                     0x7
#define _ADCON0_ON_POSITION                                 0x7
#define _ADCON0_ON_SIZE                                     0x1
#define _ADCON0_ON_LENGTH                                   0x1
#define _ADCON0_ON_MASK                                     0x80
#define _ADCON0_ADGO_POSN                                   0x0
#define _ADCON0_ADGO_POSITION                               0x0
#define _ADCON0_ADGO_SIZE                                   0x1
#define _ADCON0_ADGO_LENGTH                                 0x1
#define _ADCON0_ADGO_MASK                                   0x1
#define _ADCON0_ADFM_POSN                                   0x2
#define _ADCON0_ADFM_POSITION                               0x2
#define _ADCON0_ADFM_SIZE                                   0x2
#define _ADCON0_ADFM_LENGTH                                 0x2
#define _ADCON0_ADFM_MASK                                   0xC
#define _ADCON0_ADCS_POSN                                   0x4
#define _ADCON0_ADCS_POSITION                               0x4
#define _ADCON0_ADCS_SIZE                                   0x1
#define _ADCON0_ADCS_LENGTH                                 0x1
#define _ADCON0_ADCS_MASK                                   0x10
#define _ADCON0_ADCONT_POSN                                 0x6
#define _ADCON0_ADCONT_POSITION                             0x6
#define _ADCON0_ADCONT_SIZE                                 0x1
#define _ADCON0_ADCONT_LENGTH                               0x1
#define _ADCON0_ADCONT_MASK                                 0x40
#define _ADCON0_ADON_POSN                                   0x7
#define _ADCON0_ADON_POSITION                               0x7
#define _ADCON0_ADON_SIZE                                   0x1
#define _ADCON0_ADON_LENGTH                                 0x1
#define _ADCON0_ADON_MASK                                   0x80
#define _ADCON0_DONE_POSN                                   0x0
#define _ADCON0_DONE_POSITION                               0x0
#define _ADCON0_DONE_SIZE                                   0x1
#define _ADCON0_DONE_LENGTH                                 0x1
#define _ADCON0_DONE_MASK                                   0x1
#define _ADCON0_FM0_POSN                                    0x2
#define _ADCON0_FM0_POSITION                                0x2
#define _ADCON0_FM0_SIZE                                    0x1
#define _ADCON0_FM0_LENGTH                                  0x1
#define _ADCON0_FM0_MASK                                    0x4
#define _ADCON0_GO_nDONE_POSN                               0x0
#define _ADCON0_GO_nDONE_POSITION                           0x0
#define _ADCON0_GO_nDONE_SIZE                               0x1
#define _ADCON0_GO_nDONE_LENGTH                             0x1
#define _ADCON0_GO_nDONE_MASK                               0x1
#define _ADCON0_ADFM0_POSN                                  0x2
#define _ADCON0_ADFM0_POSITION                              0x2
#define _ADCON0_ADFM0_SIZE                                  0x1
#define _ADCON0_ADFM0_LENGTH                                0x1
#define _ADCON0_ADFM0_MASK                                  0x4

// Register: ADCON1
#define ADCON1 ADCON1
extern volatile unsigned char           ADCON1              __at(0x1D27);
#ifndef _LIB_BUILD
asm("ADCON1 equ 01D27h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSEN                   :1;
        unsigned PCSC                   :1;
        unsigned                        :3;
        unsigned GPOL                   :1;
        unsigned IPEN                   :1;
        unsigned PPOL                   :1;
    };
    struct {
        unsigned ADDSEN                 :1;
        unsigned                        :4;
        unsigned ADGPOL                 :1;
        unsigned ADIPEN                 :1;
        unsigned ADPPOL                 :1;
    };
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits __at(0x1D27);
// bitfield macros
#define _ADCON1_DSEN_POSN                                   0x0
#define _ADCON1_DSEN_POSITION                               0x0
#define _ADCON1_DSEN_SIZE                                   0x1
#define _ADCON1_DSEN_LENGTH                                 0x1
#define _ADCON1_DSEN_MASK                                   0x1
#define _ADCON1_PCSC_POSN                                   0x1
#define _ADCON1_PCSC_POSITION                               0x1
#define _ADCON1_PCSC_SIZE                                   0x1
#define _ADCON1_PCSC_LENGTH                                 0x1
#define _ADCON1_PCSC_MASK                                   0x2
#define _ADCON1_GPOL_POSN                                   0x5
#define _ADCON1_GPOL_POSITION                               0x5
#define _ADCON1_GPOL_SIZE                                   0x1
#define _ADCON1_GPOL_LENGTH                                 0x1
#define _ADCON1_GPOL_MASK                                   0x20
#define _ADCON1_IPEN_POSN                                   0x6
#define _ADCON1_IPEN_POSITION                               0x6
#define _ADCON1_IPEN_SIZE                                   0x1
#define _ADCON1_IPEN_LENGTH                                 0x1
#define _ADCON1_IPEN_MASK                                   0x40
#define _ADCON1_PPOL_POSN                                   0x7
#define _ADCON1_PPOL_POSITION                               0x7
#define _ADCON1_PPOL_SIZE                                   0x1
#define _ADCON1_PPOL_LENGTH                                 0x1
#define _ADCON1_PPOL_MASK                                   0x80
#define _ADCON1_ADDSEN_POSN                                 0x0
#define _ADCON1_ADDSEN_POSITION                             0x0
#define _ADCON1_ADDSEN_SIZE                                 0x1
#define _ADCON1_ADDSEN_LENGTH                               0x1
#define _ADCON1_ADDSEN_MASK                                 0x1
#define _ADCON1_ADGPOL_POSN                                 0x5
#define _ADCON1_ADGPOL_POSITION                             0x5
#define _ADCON1_ADGPOL_SIZE                                 0x1
#define _ADCON1_ADGPOL_LENGTH                               0x1
#define _ADCON1_ADGPOL_MASK                                 0x20
#define _ADCON1_ADIPEN_POSN                                 0x6
#define _ADCON1_ADIPEN_POSITION                             0x6
#define _ADCON1_ADIPEN_SIZE                                 0x1
#define _ADCON1_ADIPEN_LENGTH                               0x1
#define _ADCON1_ADIPEN_MASK                                 0x40
#define _ADCON1_ADPPOL_POSN                                 0x7
#define _ADCON1_ADPPOL_POSITION                             0x7
#define _ADCON1_ADPPOL_SIZE                                 0x1
#define _ADCON1_ADPPOL_LENGTH                               0x1
#define _ADCON1_ADPPOL_MASK                                 0x80

// Register: ADCON2
#define ADCON2 ADCON2
extern volatile unsigned char           ADCON2              __at(0x1D28);
#ifndef _LIB_BUILD
asm("ADCON2 equ 01D28h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MD                     :3;
        unsigned ACLR                   :1;
        unsigned CRS                    :3;
        unsigned PSIS                   :1;
    };
    struct {
        unsigned ADMD0                  :1;
        unsigned ADMD1                  :1;
        unsigned ADMD2                  :1;
        unsigned ADACLR                 :1;
        unsigned ADCRS0                 :1;
        unsigned ADCRS1                 :1;
        unsigned ADCRS2                 :1;
        unsigned ADPSIS                 :1;
    };
    struct {
        unsigned ADMD                   :3;
        unsigned                        :1;
        unsigned ADCRS                  :3;
    };
    struct {
        unsigned MD0                    :1;
        unsigned MD1                    :1;
        unsigned MD2                    :1;
        unsigned                        :1;
        unsigned CRS0                   :1;
        unsigned CRS1                   :1;
        unsigned CRS2                   :1;
    };
} ADCON2bits_t;
extern volatile ADCON2bits_t ADCON2bits __at(0x1D28);
// bitfield macros
#define _ADCON2_MD_POSN                                     0x0
#define _ADCON2_MD_POSITION                                 0x0
#define _ADCON2_MD_SIZE                                     0x3
#define _ADCON2_MD_LENGTH                                   0x3
#define _ADCON2_MD_MASK                                     0x7
#define _ADCON2_ACLR_POSN                                   0x3
#define _ADCON2_ACLR_POSITION                               0x3
#define _ADCON2_ACLR_SIZE                                   0x1
#define _ADCON2_ACLR_LENGTH                                 0x1
#define _ADCON2_ACLR_MASK                                   0x8
#define _ADCON2_CRS_POSN                                    0x4
#define _ADCON2_CRS_POSITION                                0x4
#define _ADCON2_CRS_SIZE                                    0x3
#define _ADCON2_CRS_LENGTH                                  0x3
#define _ADCON2_CRS_MASK                                    0x70
#define _ADCON2_PSIS_POSN                                   0x7
#define _ADCON2_PSIS_POSITION                               0x7
#define _ADCON2_PSIS_SIZE                                   0x1
#define _ADCON2_PSIS_LENGTH                                 0x1
#define _ADCON2_PSIS_MASK                                   0x80
#define _ADCON2_ADMD0_POSN                                  0x0
#define _ADCON2_ADMD0_POSITION                              0x0
#define _ADCON2_ADMD0_SIZE                                  0x1
#define _ADCON2_ADMD0_LENGTH                                0x1
#define _ADCON2_ADMD0_MASK                                  0x1
#define _ADCON2_ADMD1_POSN                                  0x1
#define _ADCON2_ADMD1_POSITION                              0x1
#define _ADCON2_ADMD1_SIZE                                  0x1
#define _ADCON2_ADMD1_LENGTH                                0x1
#define _ADCON2_ADMD1_MASK                                  0x2
#define _ADCON2_ADMD2_POSN                                  0x2
#define _ADCON2_ADMD2_POSITION                              0x2
#define _ADCON2_ADMD2_SIZE                                  0x1
#define _ADCON2_ADMD2_LENGTH                                0x1
#define _ADCON2_ADMD2_MASK                                  0x4
#define _ADCON2_ADACLR_POSN                                 0x3
#define _ADCON2_ADACLR_POSITION                             0x3
#define _ADCON2_ADACLR_SIZE                                 0x1
#define _ADCON2_ADACLR_LENGTH                               0x1
#define _ADCON2_ADACLR_MASK                                 0x8
#define _ADCON2_ADCRS0_POSN                                 0x4
#define _ADCON2_ADCRS0_POSITION                             0x4
#define _ADCON2_ADCRS0_SIZE                                 0x1
#define _ADCON2_ADCRS0_LENGTH                               0x1
#define _ADCON2_ADCRS0_MASK                                 0x10
#define _ADCON2_ADCRS1_POSN                                 0x5
#define _ADCON2_ADCRS1_POSITION                             0x5
#define _ADCON2_ADCRS1_SIZE                                 0x1
#define _ADCON2_ADCRS1_LENGTH                               0x1
#define _ADCON2_ADCRS1_MASK                                 0x20
#define _ADCON2_ADCRS2_POSN                                 0x6
#define _ADCON2_ADCRS2_POSITION                             0x6
#define _ADCON2_ADCRS2_SIZE                                 0x1
#define _ADCON2_ADCRS2_LENGTH                               0x1
#define _ADCON2_ADCRS2_MASK                                 0x40
#define _ADCON2_ADPSIS_POSN                                 0x7
#define _ADCON2_ADPSIS_POSITION                             0x7
#define _ADCON2_ADPSIS_SIZE                                 0x1
#define _ADCON2_ADPSIS_LENGTH                               0x1
#define _ADCON2_ADPSIS_MASK                                 0x80
#define _ADCON2_ADMD_POSN                                   0x0
#define _ADCON2_ADMD_POSITION                               0x0
#define _ADCON2_ADMD_SIZE                                   0x3
#define _ADCON2_ADMD_LENGTH                                 0x3
#define _ADCON2_ADMD_MASK                                   0x7
#define _ADCON2_ADCRS_POSN                                  0x4
#define _ADCON2_ADCRS_POSITION                              0x4
#define _ADCON2_ADCRS_SIZE                                  0x3
#define _ADCON2_ADCRS_LENGTH                                0x3
#define _ADCON2_ADCRS_MASK                                  0x70
#define _ADCON2_MD0_POSN                                    0x0
#define _ADCON2_MD0_POSITION                                0x0
#define _ADCON2_MD0_SIZE                                    0x1
#define _ADCON2_MD0_LENGTH                                  0x1
#define _ADCON2_MD0_MASK                                    0x1
#define _ADCON2_MD1_POSN                                    0x1
#define _ADCON2_MD1_POSITION                                0x1
#define _ADCON2_MD1_SIZE                                    0x1
#define _ADCON2_MD1_LENGTH                                  0x1
#define _ADCON2_MD1_MASK                                    0x2
#define _ADCON2_MD2_POSN                                    0x2
#define _ADCON2_MD2_POSITION                                0x2
#define _ADCON2_MD2_SIZE                                    0x1
#define _ADCON2_MD2_LENGTH                                  0x1
#define _ADCON2_MD2_MASK                                    0x4
#define _ADCON2_CRS0_POSN                                   0x4
#define _ADCON2_CRS0_POSITION                               0x4
#define _ADCON2_CRS0_SIZE                                   0x1
#define _ADCON2_CRS0_LENGTH                                 0x1
#define _ADCON2_CRS0_MASK                                   0x10
#define _ADCON2_CRS1_POSN                                   0x5
#define _ADCON2_CRS1_POSITION                               0x5
#define _ADCON2_CRS1_SIZE                                   0x1
#define _ADCON2_CRS1_LENGTH                                 0x1
#define _ADCON2_CRS1_MASK                                   0x20
#define _ADCON2_CRS2_POSN                                   0x6
#define _ADCON2_CRS2_POSITION                               0x6
#define _ADCON2_CRS2_SIZE                                   0x1
#define _ADCON2_CRS2_LENGTH                                 0x1
#define _ADCON2_CRS2_MASK                                   0x40

// Register: ADCON3
#define ADCON3 ADCON3
extern volatile unsigned char           ADCON3              __at(0x1D29);
#ifndef _LIB_BUILD
asm("ADCON3 equ 01D29h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMD                    :3;
        unsigned SOI                    :1;
        unsigned CALC                   :3;
    };
    struct {
        unsigned ADTMD0                 :1;
        unsigned ADTMD1                 :1;
        unsigned ADTMD2                 :1;
        unsigned ADSOI                  :1;
        unsigned ADCALC0                :1;
        unsigned ADCALC1                :1;
        unsigned ADCALC2                :1;
    };
    struct {
        unsigned ADTMD                  :3;
        unsigned                        :1;
        unsigned ADCALC                 :3;
    };
    struct {
        unsigned TMD0                   :1;
        unsigned TMD1                   :1;
        unsigned TMD2                   :1;
        unsigned                        :1;
        unsigned CALC0                  :1;
        unsigned CALC1                  :1;
        unsigned CALC2                  :1;
    };
} ADCON3bits_t;
extern volatile ADCON3bits_t ADCON3bits __at(0x1D29);
// bitfield macros
#define _ADCON3_TMD_POSN                                    0x0
#define _ADCON3_TMD_POSITION                                0x0
#define _ADCON3_TMD_SIZE                                    0x3
#define _ADCON3_TMD_LENGTH                                  0x3
#define _ADCON3_TMD_MASK                                    0x7
#define _ADCON3_SOI_POSN                                    0x3
#define _ADCON3_SOI_POSITION                                0x3
#define _ADCON3_SOI_SIZE                                    0x1
#define _ADCON3_SOI_LENGTH                                  0x1
#define _ADCON3_SOI_MASK                                    0x8
#define _ADCON3_CALC_POSN                                   0x4
#define _ADCON3_CALC_POSITION                               0x4
#define _ADCON3_CALC_SIZE                                   0x3
#define _ADCON3_CALC_LENGTH                                 0x3
#define _ADCON3_CALC_MASK                                   0x70
#define _ADCON3_ADTMD0_POSN                                 0x0
#define _ADCON3_ADTMD0_POSITION                             0x0
#define _ADCON3_ADTMD0_SIZE                                 0x1
#define _ADCON3_ADTMD0_LENGTH                               0x1
#define _ADCON3_ADTMD0_MASK                                 0x1
#define _ADCON3_ADTMD1_POSN                                 0x1
#define _ADCON3_ADTMD1_POSITION                             0x1
#define _ADCON3_ADTMD1_SIZE                                 0x1
#define _ADCON3_ADTMD1_LENGTH                               0x1
#define _ADCON3_ADTMD1_MASK                                 0x2
#define _ADCON3_ADTMD2_POSN                                 0x2
#define _ADCON3_ADTMD2_POSITION                             0x2
#define _ADCON3_ADTMD2_SIZE                                 0x1
#define _ADCON3_ADTMD2_LENGTH                               0x1
#define _ADCON3_ADTMD2_MASK                                 0x4
#define _ADCON3_ADSOI_POSN                                  0x3
#define _ADCON3_ADSOI_POSITION                              0x3
#define _ADCON3_ADSOI_SIZE                                  0x1
#define _ADCON3_ADSOI_LENGTH                                0x1
#define _ADCON3_ADSOI_MASK                                  0x8
#define _ADCON3_ADCALC0_POSN                                0x4
#define _ADCON3_ADCALC0_POSITION                            0x4
#define _ADCON3_ADCALC0_SIZE                                0x1
#define _ADCON3_ADCALC0_LENGTH                              0x1
#define _ADCON3_ADCALC0_MASK                                0x10
#define _ADCON3_ADCALC1_POSN                                0x5
#define _ADCON3_ADCALC1_POSITION                            0x5
#define _ADCON3_ADCALC1_SIZE                                0x1
#define _ADCON3_ADCALC1_LENGTH                              0x1
#define _ADCON3_ADCALC1_MASK                                0x20
#define _ADCON3_ADCALC2_POSN                                0x6
#define _ADCON3_ADCALC2_POSITION                            0x6
#define _ADCON3_ADCALC2_SIZE                                0x1
#define _ADCON3_ADCALC2_LENGTH                              0x1
#define _ADCON3_ADCALC2_MASK                                0x40
#define _ADCON3_ADTMD_POSN                                  0x0
#define _ADCON3_ADTMD_POSITION                              0x0
#define _ADCON3_ADTMD_SIZE                                  0x3
#define _ADCON3_ADTMD_LENGTH                                0x3
#define _ADCON3_ADTMD_MASK                                  0x7
#define _ADCON3_ADCALC_POSN                                 0x4
#define _ADCON3_ADCALC_POSITION                             0x4
#define _ADCON3_ADCALC_SIZE                                 0x3
#define _ADCON3_ADCALC_LENGTH                               0x3
#define _ADCON3_ADCALC_MASK                                 0x70
#define _ADCON3_TMD0_POSN                                   0x0
#define _ADCON3_TMD0_POSITION                               0x0
#define _ADCON3_TMD0_SIZE                                   0x1
#define _ADCON3_TMD0_LENGTH                                 0x1
#define _ADCON3_TMD0_MASK                                   0x1
#define _ADCON3_TMD1_POSN                                   0x1
#define _ADCON3_TMD1_POSITION                               0x1
#define _ADCON3_TMD1_SIZE                                   0x1
#define _ADCON3_TMD1_LENGTH                                 0x1
#define _ADCON3_TMD1_MASK                                   0x2
#define _ADCON3_TMD2_POSN                                   0x2
#define _ADCON3_TMD2_POSITION                               0x2
#define _ADCON3_TMD2_SIZE                                   0x1
#define _ADCON3_TMD2_LENGTH                                 0x1
#define _ADCON3_TMD2_MASK                                   0x4
#define _ADCON3_CALC0_POSN                                  0x4
#define _ADCON3_CALC0_POSITION                              0x4
#define _ADCON3_CALC0_SIZE                                  0x1
#define _ADCON3_CALC0_LENGTH                                0x1
#define _ADCON3_CALC0_MASK                                  0x10
#define _ADCON3_CALC1_POSN                                  0x5
#define _ADCON3_CALC1_POSITION                              0x5
#define _ADCON3_CALC1_SIZE                                  0x1
#define _ADCON3_CALC1_LENGTH                                0x1
#define _ADCON3_CALC1_MASK                                  0x20
#define _ADCON3_CALC2_POSN                                  0x6
#define _ADCON3_CALC2_POSITION                              0x6
#define _ADCON3_CALC2_SIZE                                  0x1
#define _ADCON3_CALC2_LENGTH                                0x1
#define _ADCON3_CALC2_MASK                                  0x40

// Register: ADSTAT
#define ADSTAT ADSTAT
extern volatile unsigned char           ADSTAT              __at(0x1D2A);
#ifndef _LIB_BUILD
asm("ADSTAT equ 01D2Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STAT                   :3;
        unsigned                        :1;
        unsigned MATH                   :1;
        unsigned LTHR                   :1;
        unsigned UTHR                   :1;
        unsigned AOV                    :1;
    };
    struct {
        unsigned ADSTAT0                :1;
        unsigned ADSTAT1                :1;
        unsigned ADSTAT2                :1;
        unsigned                        :1;
        unsigned ADMATH                 :1;
        unsigned ADLTHR                 :1;
        unsigned ADUTHR                 :1;
        unsigned ADAOV                  :1;
    };
    struct {
        unsigned ADSTAT                 :3;
        unsigned                        :4;
        unsigned ADOV                   :1;
    };
    struct {
        unsigned STAT0                  :1;
        unsigned STAT1                  :1;
        unsigned STAT2                  :1;
        unsigned                        :4;
        unsigned OV                     :1;
    };
} ADSTATbits_t;
extern volatile ADSTATbits_t ADSTATbits __at(0x1D2A);
// bitfield macros
#define _ADSTAT_STAT_POSN                                   0x0
#define _ADSTAT_STAT_POSITION                               0x0
#define _ADSTAT_STAT_SIZE                                   0x3
#define _ADSTAT_STAT_LENGTH                                 0x3
#define _ADSTAT_STAT_MASK                                   0x7
#define _ADSTAT_MATH_POSN                                   0x4
#define _ADSTAT_MATH_POSITION                               0x4
#define _ADSTAT_MATH_SIZE                                   0x1
#define _ADSTAT_MATH_LENGTH                                 0x1
#define _ADSTAT_MATH_MASK                                   0x10
#define _ADSTAT_LTHR_POSN                                   0x5
#define _ADSTAT_LTHR_POSITION                               0x5
#define _ADSTAT_LTHR_SIZE                                   0x1
#define _ADSTAT_LTHR_LENGTH                                 0x1
#define _ADSTAT_LTHR_MASK                                   0x20
#define _ADSTAT_UTHR_POSN                                   0x6
#define _ADSTAT_UTHR_POSITION                               0x6
#define _ADSTAT_UTHR_SIZE                                   0x1
#define _ADSTAT_UTHR_LENGTH                                 0x1
#define _ADSTAT_UTHR_MASK                                   0x40
#define _ADSTAT_AOV_POSN                                    0x7
#define _ADSTAT_AOV_POSITION                                0x7
#define _ADSTAT_AOV_SIZE                                    0x1
#define _ADSTAT_AOV_LENGTH                                  0x1
#define _ADSTAT_AOV_MASK                                    0x80
#define _ADSTAT_ADSTAT0_POSN                                0x0
#define _ADSTAT_ADSTAT0_POSITION                            0x0
#define _ADSTAT_ADSTAT0_SIZE                                0x1
#define _ADSTAT_ADSTAT0_LENGTH                              0x1
#define _ADSTAT_ADSTAT0_MASK                                0x1
#define _ADSTAT_ADSTAT1_POSN                                0x1
#define _ADSTAT_ADSTAT1_POSITION                            0x1
#define _ADSTAT_ADSTAT1_SIZE                                0x1
#define _ADSTAT_ADSTAT1_LENGTH                              0x1
#define _ADSTAT_ADSTAT1_MASK                                0x2
#define _ADSTAT_ADSTAT2_POSN                                0x2
#define _ADSTAT_ADSTAT2_POSITION                            0x2
#define _ADSTAT_ADSTAT2_SIZE                                0x1
#define _ADSTAT_ADSTAT2_LENGTH                              0x1
#define _ADSTAT_ADSTAT2_MASK                                0x4
#define _ADSTAT_ADMATH_POSN                                 0x4
#define _ADSTAT_ADMATH_POSITION                             0x4
#define _ADSTAT_ADMATH_SIZE                                 0x1
#define _ADSTAT_ADMATH_LENGTH                               0x1
#define _ADSTAT_ADMATH_MASK                                 0x10
#define _ADSTAT_ADLTHR_POSN                                 0x5
#define _ADSTAT_ADLTHR_POSITION                             0x5
#define _ADSTAT_ADLTHR_SIZE                                 0x1
#define _ADSTAT_ADLTHR_LENGTH                               0x1
#define _ADSTAT_ADLTHR_MASK                                 0x20
#define _ADSTAT_ADUTHR_POSN                                 0x6
#define _ADSTAT_ADUTHR_POSITION                             0x6
#define _ADSTAT_ADUTHR_SIZE                                 0x1
#define _ADSTAT_ADUTHR_LENGTH                               0x1
#define _ADSTAT_ADUTHR_MASK                                 0x40
#define _ADSTAT_ADAOV_POSN                                  0x7
#define _ADSTAT_ADAOV_POSITION                              0x7
#define _ADSTAT_ADAOV_SIZE                                  0x1
#define _ADSTAT_ADAOV_LENGTH                                0x1
#define _ADSTAT_ADAOV_MASK                                  0x80
#define _ADSTAT_ADSTAT_POSN                                 0x0
#define _ADSTAT_ADSTAT_POSITION                             0x0
#define _ADSTAT_ADSTAT_SIZE                                 0x3
#define _ADSTAT_ADSTAT_LENGTH                               0x3
#define _ADSTAT_ADSTAT_MASK                                 0x7
#define _ADSTAT_ADOV_POSN                                   0x7
#define _ADSTAT_ADOV_POSITION                               0x7
#define _ADSTAT_ADOV_SIZE                                   0x1
#define _ADSTAT_ADOV_LENGTH                                 0x1
#define _ADSTAT_ADOV_MASK                                   0x80
#define _ADSTAT_STAT0_POSN                                  0x0
#define _ADSTAT_STAT0_POSITION                              0x0
#define _ADSTAT_STAT0_SIZE                                  0x1
#define _ADSTAT_STAT0_LENGTH                                0x1
#define _ADSTAT_STAT0_MASK                                  0x1
#define _ADSTAT_STAT1_POSN                                  0x1
#define _ADSTAT_STAT1_POSITION                              0x1
#define _ADSTAT_STAT1_SIZE                                  0x1
#define _ADSTAT_STAT1_LENGTH                                0x1
#define _ADSTAT_STAT1_MASK                                  0x2
#define _ADSTAT_STAT2_POSN                                  0x2
#define _ADSTAT_STAT2_POSITION                              0x2
#define _ADSTAT_STAT2_SIZE                                  0x1
#define _ADSTAT_STAT2_LENGTH                                0x1
#define _ADSTAT_STAT2_MASK                                  0x4
#define _ADSTAT_OV_POSN                                     0x7
#define _ADSTAT_OV_POSITION                                 0x7
#define _ADSTAT_OV_SIZE                                     0x1
#define _ADSTAT_OV_LENGTH                                   0x1
#define _ADSTAT_OV_MASK                                     0x80

// Register: ADREF
#define ADREF ADREF
extern volatile unsigned char           ADREF               __at(0x1D2B);
#ifndef _LIB_BUILD
asm("ADREF equ 01D2Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREF                   :4;
    };
    struct {
        unsigned ADPREF                 :4;
    };
    struct {
        unsigned PREF0                  :1;
        unsigned PREF1                  :1;
    };
    struct {
        unsigned ADPREF0                :1;
        unsigned ADPREF1                :1;
    };
} ADREFbits_t;
extern volatile ADREFbits_t ADREFbits __at(0x1D2B);
// bitfield macros
#define _ADREF_PREF_POSN                                    0x0
#define _ADREF_PREF_POSITION                                0x0
#define _ADREF_PREF_SIZE                                    0x4
#define _ADREF_PREF_LENGTH                                  0x4
#define _ADREF_PREF_MASK                                    0xF
#define _ADREF_ADPREF_POSN                                  0x0
#define _ADREF_ADPREF_POSITION                              0x0
#define _ADREF_ADPREF_SIZE                                  0x4
#define _ADREF_ADPREF_LENGTH                                0x4
#define _ADREF_ADPREF_MASK                                  0xF
#define _ADREF_PREF0_POSN                                   0x0
#define _ADREF_PREF0_POSITION                               0x0
#define _ADREF_PREF0_SIZE                                   0x1
#define _ADREF_PREF0_LENGTH                                 0x1
#define _ADREF_PREF0_MASK                                   0x1
#define _ADREF_PREF1_POSN                                   0x1
#define _ADREF_PREF1_POSITION                               0x1
#define _ADREF_PREF1_SIZE                                   0x1
#define _ADREF_PREF1_LENGTH                                 0x1
#define _ADREF_PREF1_MASK                                   0x2
#define _ADREF_ADPREF0_POSN                                 0x0
#define _ADREF_ADPREF0_POSITION                             0x0
#define _ADREF_ADPREF0_SIZE                                 0x1
#define _ADREF_ADPREF0_LENGTH                               0x1
#define _ADREF_ADPREF0_MASK                                 0x1
#define _ADREF_ADPREF1_POSN                                 0x1
#define _ADREF_ADPREF1_POSITION                             0x1
#define _ADREF_ADPREF1_SIZE                                 0x1
#define _ADREF_ADPREF1_LENGTH                               0x1
#define _ADREF_ADPREF1_MASK                                 0x2

// Register: ADACT
#define ADACT ADACT
extern volatile unsigned char           ADACT               __at(0x1D2C);
#ifndef _LIB_BUILD
asm("ADACT equ 01D2Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACT                    :8;
    };
    struct {
        unsigned ADACT0                 :1;
        unsigned ADACT1                 :1;
        unsigned ADACT2                 :1;
        unsigned ADACT3                 :1;
        unsigned ADACT4                 :1;
        unsigned ADACT5                 :1;
    };
    struct {
        unsigned ADACT                  :8;
    };
    struct {
        unsigned ACT0                   :1;
        unsigned ACT1                   :1;
        unsigned ACT2                   :1;
        unsigned ACT3                   :1;
        unsigned ACT4                   :1;
        unsigned ACT5                   :1;
    };
} ADACTbits_t;
extern volatile ADACTbits_t ADACTbits __at(0x1D2C);
// bitfield macros
#define _ADACT_ACT_POSN                                     0x0
#define _ADACT_ACT_POSITION                                 0x0
#define _ADACT_ACT_SIZE                                     0x8
#define _ADACT_ACT_LENGTH                                   0x8
#define _ADACT_ACT_MASK                                     0xFF
#define _ADACT_ADACT0_POSN                                  0x0
#define _ADACT_ADACT0_POSITION                              0x0
#define _ADACT_ADACT0_SIZE                                  0x1
#define _ADACT_ADACT0_LENGTH                                0x1
#define _ADACT_ADACT0_MASK                                  0x1
#define _ADACT_ADACT1_POSN                                  0x1
#define _ADACT_ADACT1_POSITION                              0x1
#define _ADACT_ADACT1_SIZE                                  0x1
#define _ADACT_ADACT1_LENGTH                                0x1
#define _ADACT_ADACT1_MASK                                  0x2
#define _ADACT_ADACT2_POSN                                  0x2
#define _ADACT_ADACT2_POSITION                              0x2
#define _ADACT_ADACT2_SIZE                                  0x1
#define _ADACT_ADACT2_LENGTH                                0x1
#define _ADACT_ADACT2_MASK                                  0x4
#define _ADACT_ADACT3_POSN                                  0x3
#define _ADACT_ADACT3_POSITION                              0x3
#define _ADACT_ADACT3_SIZE                                  0x1
#define _ADACT_ADACT3_LENGTH                                0x1
#define _ADACT_ADACT3_MASK                                  0x8
#define _ADACT_ADACT4_POSN                                  0x4
#define _ADACT_ADACT4_POSITION                              0x4
#define _ADACT_ADACT4_SIZE                                  0x1
#define _ADACT_ADACT4_LENGTH                                0x1
#define _ADACT_ADACT4_MASK                                  0x10
#define _ADACT_ADACT5_POSN                                  0x5
#define _ADACT_ADACT5_POSITION                              0x5
#define _ADACT_ADACT5_SIZE                                  0x1
#define _ADACT_ADACT5_LENGTH                                0x1
#define _ADACT_ADACT5_MASK                                  0x20
#define _ADACT_ADACT_POSN                                   0x0
#define _ADACT_ADACT_POSITION                               0x0
#define _ADACT_ADACT_SIZE                                   0x8
#define _ADACT_ADACT_LENGTH                                 0x8
#define _ADACT_ADACT_MASK                                   0xFF
#define _ADACT_ACT0_POSN                                    0x0
#define _ADACT_ACT0_POSITION                                0x0
#define _ADACT_ACT0_SIZE                                    0x1
#define _ADACT_ACT0_LENGTH                                  0x1
#define _ADACT_ACT0_MASK                                    0x1
#define _ADACT_ACT1_POSN                                    0x1
#define _ADACT_ACT1_POSITION                                0x1
#define _ADACT_ACT1_SIZE                                    0x1
#define _ADACT_ACT1_LENGTH                                  0x1
#define _ADACT_ACT1_MASK                                    0x2
#define _ADACT_ACT2_POSN                                    0x2
#define _ADACT_ACT2_POSITION                                0x2
#define _ADACT_ACT2_SIZE                                    0x1
#define _ADACT_ACT2_LENGTH                                  0x1
#define _ADACT_ACT2_MASK                                    0x4
#define _ADACT_ACT3_POSN                                    0x3
#define _ADACT_ACT3_POSITION                                0x3
#define _ADACT_ACT3_SIZE                                    0x1
#define _ADACT_ACT3_LENGTH                                  0x1
#define _ADACT_ACT3_MASK                                    0x8
#define _ADACT_ACT4_POSN                                    0x4
#define _ADACT_ACT4_POSITION                                0x4
#define _ADACT_ACT4_SIZE                                    0x1
#define _ADACT_ACT4_LENGTH                                  0x1
#define _ADACT_ACT4_MASK                                    0x10
#define _ADACT_ACT5_POSN                                    0x5
#define _ADACT_ACT5_POSITION                                0x5
#define _ADACT_ACT5_SIZE                                    0x1
#define _ADACT_ACT5_LENGTH                                  0x1
#define _ADACT_ACT5_MASK                                    0x20

// Register: ADCLK
#define ADCLK ADCLK
extern volatile unsigned char           ADCLK               __at(0x1D2D);
#ifndef _LIB_BUILD
asm("ADCLK equ 01D2Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned ADCS0                  :1;
        unsigned ADCS1                  :1;
        unsigned ADCS2                  :1;
        unsigned ADCS3                  :1;
        unsigned ADCS4                  :1;
        unsigned ADCS5                  :1;
    };
    struct {
        unsigned ADCS                   :8;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
        unsigned CS5                    :1;
    };
} ADCLKbits_t;
extern volatile ADCLKbits_t ADCLKbits __at(0x1D2D);
// bitfield macros
#define _ADCLK_CS_POSN                                      0x0
#define _ADCLK_CS_POSITION                                  0x0
#define _ADCLK_CS_SIZE                                      0x8
#define _ADCLK_CS_LENGTH                                    0x8
#define _ADCLK_CS_MASK                                      0xFF
#define _ADCLK_ADCS0_POSN                                   0x0
#define _ADCLK_ADCS0_POSITION                               0x0
#define _ADCLK_ADCS0_SIZE                                   0x1
#define _ADCLK_ADCS0_LENGTH                                 0x1
#define _ADCLK_ADCS0_MASK                                   0x1
#define _ADCLK_ADCS1_POSN                                   0x1
#define _ADCLK_ADCS1_POSITION                               0x1
#define _ADCLK_ADCS1_SIZE                                   0x1
#define _ADCLK_ADCS1_LENGTH                                 0x1
#define _ADCLK_ADCS1_MASK                                   0x2
#define _ADCLK_ADCS2_POSN                                   0x2
#define _ADCLK_ADCS2_POSITION                               0x2
#define _ADCLK_ADCS2_SIZE                                   0x1
#define _ADCLK_ADCS2_LENGTH                                 0x1
#define _ADCLK_ADCS2_MASK                                   0x4
#define _ADCLK_ADCS3_POSN                                   0x3
#define _ADCLK_ADCS3_POSITION                               0x3
#define _ADCLK_ADCS3_SIZE                                   0x1
#define _ADCLK_ADCS3_LENGTH                                 0x1
#define _ADCLK_ADCS3_MASK                                   0x8
#define _ADCLK_ADCS4_POSN                                   0x4
#define _ADCLK_ADCS4_POSITION                               0x4
#define _ADCLK_ADCS4_SIZE                                   0x1
#define _ADCLK_ADCS4_LENGTH                                 0x1
#define _ADCLK_ADCS4_MASK                                   0x10
#define _ADCLK_ADCS5_POSN                                   0x5
#define _ADCLK_ADCS5_POSITION                               0x5
#define _ADCLK_ADCS5_SIZE                                   0x1
#define _ADCLK_ADCS5_LENGTH                                 0x1
#define _ADCLK_ADCS5_MASK                                   0x20
#define _ADCLK_ADCS_POSN                                    0x0
#define _ADCLK_ADCS_POSITION                                0x0
#define _ADCLK_ADCS_SIZE                                    0x8
#define _ADCLK_ADCS_LENGTH                                  0x8
#define _ADCLK_ADCS_MASK                                    0xFF
#define _ADCLK_CS0_POSN                                     0x0
#define _ADCLK_CS0_POSITION                                 0x0
#define _ADCLK_CS0_SIZE                                     0x1
#define _ADCLK_CS0_LENGTH                                   0x1
#define _ADCLK_CS0_MASK                                     0x1
#define _ADCLK_CS1_POSN                                     0x1
#define _ADCLK_CS1_POSITION                                 0x1
#define _ADCLK_CS1_SIZE                                     0x1
#define _ADCLK_CS1_LENGTH                                   0x1
#define _ADCLK_CS1_MASK                                     0x2
#define _ADCLK_CS2_POSN                                     0x2
#define _ADCLK_CS2_POSITION                                 0x2
#define _ADCLK_CS2_SIZE                                     0x1
#define _ADCLK_CS2_LENGTH                                   0x1
#define _ADCLK_CS2_MASK                                     0x4
#define _ADCLK_CS3_POSN                                     0x3
#define _ADCLK_CS3_POSITION                                 0x3
#define _ADCLK_CS3_SIZE                                     0x1
#define _ADCLK_CS3_LENGTH                                   0x1
#define _ADCLK_CS3_MASK                                     0x8
#define _ADCLK_CS4_POSN                                     0x4
#define _ADCLK_CS4_POSITION                                 0x4
#define _ADCLK_CS4_SIZE                                     0x1
#define _ADCLK_CS4_LENGTH                                   0x1
#define _ADCLK_CS4_MASK                                     0x10
#define _ADCLK_CS5_POSN                                     0x5
#define _ADCLK_CS5_POSITION                                 0x5
#define _ADCLK_CS5_SIZE                                     0x1
#define _ADCLK_CS5_LENGTH                                   0x1
#define _ADCLK_CS5_MASK                                     0x20

// Register: ADCG1A
#define ADCG1A ADCG1A
extern volatile unsigned char           ADCG1A              __at(0x1D2E);
#ifndef _LIB_BUILD
asm("ADCG1A equ 01D2Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CGA0                   :1;
        unsigned CGA1                   :1;
        unsigned CGA2                   :1;
        unsigned                        :1;
        unsigned CGA4                   :1;
        unsigned CGA5                   :1;
    };
} ADCG1Abits_t;
extern volatile ADCG1Abits_t ADCG1Abits __at(0x1D2E);
// bitfield macros
#define _ADCG1A_CGA0_POSN                                   0x0
#define _ADCG1A_CGA0_POSITION                               0x0
#define _ADCG1A_CGA0_SIZE                                   0x1
#define _ADCG1A_CGA0_LENGTH                                 0x1
#define _ADCG1A_CGA0_MASK                                   0x1
#define _ADCG1A_CGA1_POSN                                   0x1
#define _ADCG1A_CGA1_POSITION                               0x1
#define _ADCG1A_CGA1_SIZE                                   0x1
#define _ADCG1A_CGA1_LENGTH                                 0x1
#define _ADCG1A_CGA1_MASK                                   0x2
#define _ADCG1A_CGA2_POSN                                   0x2
#define _ADCG1A_CGA2_POSITION                               0x2
#define _ADCG1A_CGA2_SIZE                                   0x1
#define _ADCG1A_CGA2_LENGTH                                 0x1
#define _ADCG1A_CGA2_MASK                                   0x4
#define _ADCG1A_CGA4_POSN                                   0x4
#define _ADCG1A_CGA4_POSITION                               0x4
#define _ADCG1A_CGA4_SIZE                                   0x1
#define _ADCG1A_CGA4_LENGTH                                 0x1
#define _ADCG1A_CGA4_MASK                                   0x10
#define _ADCG1A_CGA5_POSN                                   0x5
#define _ADCG1A_CGA5_POSITION                               0x5
#define _ADCG1A_CGA5_SIZE                                   0x1
#define _ADCG1A_CGA5_LENGTH                                 0x1
#define _ADCG1A_CGA5_MASK                                   0x20

// Register: ADCG1C
#define ADCG1C ADCG1C
extern volatile unsigned char           ADCG1C              __at(0x1D30);
#ifndef _LIB_BUILD
asm("ADCG1C equ 01D30h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CGC0                   :1;
        unsigned CGC1                   :1;
        unsigned CGC2                   :1;
        unsigned CGC3                   :1;
        unsigned CGC4                   :1;
        unsigned CGC5                   :1;
    };
} ADCG1Cbits_t;
extern volatile ADCG1Cbits_t ADCG1Cbits __at(0x1D30);
// bitfield macros
#define _ADCG1C_CGC0_POSN                                   0x0
#define _ADCG1C_CGC0_POSITION                               0x0
#define _ADCG1C_CGC0_SIZE                                   0x1
#define _ADCG1C_CGC0_LENGTH                                 0x1
#define _ADCG1C_CGC0_MASK                                   0x1
#define _ADCG1C_CGC1_POSN                                   0x1
#define _ADCG1C_CGC1_POSITION                               0x1
#define _ADCG1C_CGC1_SIZE                                   0x1
#define _ADCG1C_CGC1_LENGTH                                 0x1
#define _ADCG1C_CGC1_MASK                                   0x2
#define _ADCG1C_CGC2_POSN                                   0x2
#define _ADCG1C_CGC2_POSITION                               0x2
#define _ADCG1C_CGC2_SIZE                                   0x1
#define _ADCG1C_CGC2_LENGTH                                 0x1
#define _ADCG1C_CGC2_MASK                                   0x4
#define _ADCG1C_CGC3_POSN                                   0x3
#define _ADCG1C_CGC3_POSITION                               0x3
#define _ADCG1C_CGC3_SIZE                                   0x1
#define _ADCG1C_CGC3_LENGTH                                 0x1
#define _ADCG1C_CGC3_MASK                                   0x8
#define _ADCG1C_CGC4_POSN                                   0x4
#define _ADCG1C_CGC4_POSITION                               0x4
#define _ADCG1C_CGC4_SIZE                                   0x1
#define _ADCG1C_CGC4_LENGTH                                 0x1
#define _ADCG1C_CGC4_MASK                                   0x10
#define _ADCG1C_CGC5_POSN                                   0x5
#define _ADCG1C_CGC5_POSITION                               0x5
#define _ADCG1C_CGC5_SIZE                                   0x1
#define _ADCG1C_CGC5_LENGTH                                 0x1
#define _ADCG1C_CGC5_MASK                                   0x20

// Register: RA0PPS
#define RA0PPS RA0PPS
extern volatile unsigned char           RA0PPS              __at(0x1D8C);
#ifndef _LIB_BUILD
asm("RA0PPS equ 01D8Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0PPS                 :6;
    };
} RA0PPSbits_t;
extern volatile RA0PPSbits_t RA0PPSbits __at(0x1D8C);
// bitfield macros
#define _RA0PPS_RA0PPS_POSN                                 0x0
#define _RA0PPS_RA0PPS_POSITION                             0x0
#define _RA0PPS_RA0PPS_SIZE                                 0x6
#define _RA0PPS_RA0PPS_LENGTH                               0x6
#define _RA0PPS_RA0PPS_MASK                                 0x3F

// Register: RA1PPS
#define RA1PPS RA1PPS
extern volatile unsigned char           RA1PPS              __at(0x1D8D);
#ifndef _LIB_BUILD
asm("RA1PPS equ 01D8Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA1PPS                 :6;
    };
} RA1PPSbits_t;
extern volatile RA1PPSbits_t RA1PPSbits __at(0x1D8D);
// bitfield macros
#define _RA1PPS_RA1PPS_POSN                                 0x0
#define _RA1PPS_RA1PPS_POSITION                             0x0
#define _RA1PPS_RA1PPS_SIZE                                 0x6
#define _RA1PPS_RA1PPS_LENGTH                               0x6
#define _RA1PPS_RA1PPS_MASK                                 0x3F

// Register: RA2PPS
#define RA2PPS RA2PPS
extern volatile unsigned char           RA2PPS              __at(0x1D8E);
#ifndef _LIB_BUILD
asm("RA2PPS equ 01D8Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA2PPS                 :6;
    };
} RA2PPSbits_t;
extern volatile RA2PPSbits_t RA2PPSbits __at(0x1D8E);
// bitfield macros
#define _RA2PPS_RA2PPS_POSN                                 0x0
#define _RA2PPS_RA2PPS_POSITION                             0x0
#define _RA2PPS_RA2PPS_SIZE                                 0x6
#define _RA2PPS_RA2PPS_LENGTH                               0x6
#define _RA2PPS_RA2PPS_MASK                                 0x3F

// Register: RA4PPS
#define RA4PPS RA4PPS
extern volatile unsigned char           RA4PPS              __at(0x1D90);
#ifndef _LIB_BUILD
asm("RA4PPS equ 01D90h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA4PPS                 :6;
    };
} RA4PPSbits_t;
extern volatile RA4PPSbits_t RA4PPSbits __at(0x1D90);
// bitfield macros
#define _RA4PPS_RA4PPS_POSN                                 0x0
#define _RA4PPS_RA4PPS_POSITION                             0x0
#define _RA4PPS_RA4PPS_SIZE                                 0x6
#define _RA4PPS_RA4PPS_LENGTH                               0x6
#define _RA4PPS_RA4PPS_MASK                                 0x3F

// Register: RA5PPS
#define RA5PPS RA5PPS
extern volatile unsigned char           RA5PPS              __at(0x1D91);
#ifndef _LIB_BUILD
asm("RA5PPS equ 01D91h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA5PPS                 :6;
    };
} RA5PPSbits_t;
extern volatile RA5PPSbits_t RA5PPSbits __at(0x1D91);
// bitfield macros
#define _RA5PPS_RA5PPS_POSN                                 0x0
#define _RA5PPS_RA5PPS_POSITION                             0x0
#define _RA5PPS_RA5PPS_SIZE                                 0x6
#define _RA5PPS_RA5PPS_LENGTH                               0x6
#define _RA5PPS_RA5PPS_MASK                                 0x3F

// Register: RC0PPS
#define RC0PPS RC0PPS
extern volatile unsigned char           RC0PPS              __at(0x1D9C);
#ifndef _LIB_BUILD
asm("RC0PPS equ 01D9Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0PPS                 :6;
    };
} RC0PPSbits_t;
extern volatile RC0PPSbits_t RC0PPSbits __at(0x1D9C);
// bitfield macros
#define _RC0PPS_RC0PPS_POSN                                 0x0
#define _RC0PPS_RC0PPS_POSITION                             0x0
#define _RC0PPS_RC0PPS_SIZE                                 0x6
#define _RC0PPS_RC0PPS_LENGTH                               0x6
#define _RC0PPS_RC0PPS_MASK                                 0x3F

// Register: RC1PPS
#define RC1PPS RC1PPS
extern volatile unsigned char           RC1PPS              __at(0x1D9D);
#ifndef _LIB_BUILD
asm("RC1PPS equ 01D9Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC1PPS                 :6;
    };
} RC1PPSbits_t;
extern volatile RC1PPSbits_t RC1PPSbits __at(0x1D9D);
// bitfield macros
#define _RC1PPS_RC1PPS_POSN                                 0x0
#define _RC1PPS_RC1PPS_POSITION                             0x0
#define _RC1PPS_RC1PPS_SIZE                                 0x6
#define _RC1PPS_RC1PPS_LENGTH                               0x6
#define _RC1PPS_RC1PPS_MASK                                 0x3F

// Register: RC2PPS
#define RC2PPS RC2PPS
extern volatile unsigned char           RC2PPS              __at(0x1D9E);
#ifndef _LIB_BUILD
asm("RC2PPS equ 01D9Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC2PPS                 :6;
    };
} RC2PPSbits_t;
extern volatile RC2PPSbits_t RC2PPSbits __at(0x1D9E);
// bitfield macros
#define _RC2PPS_RC2PPS_POSN                                 0x0
#define _RC2PPS_RC2PPS_POSITION                             0x0
#define _RC2PPS_RC2PPS_SIZE                                 0x6
#define _RC2PPS_RC2PPS_LENGTH                               0x6
#define _RC2PPS_RC2PPS_MASK                                 0x3F

// Register: RC3PPS
#define RC3PPS RC3PPS
extern volatile unsigned char           RC3PPS              __at(0x1D9F);
#ifndef _LIB_BUILD
asm("RC3PPS equ 01D9Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC3PPS                 :6;
    };
} RC3PPSbits_t;
extern volatile RC3PPSbits_t RC3PPSbits __at(0x1D9F);
// bitfield macros
#define _RC3PPS_RC3PPS_POSN                                 0x0
#define _RC3PPS_RC3PPS_POSITION                             0x0
#define _RC3PPS_RC3PPS_SIZE                                 0x6
#define _RC3PPS_RC3PPS_LENGTH                               0x6
#define _RC3PPS_RC3PPS_MASK                                 0x3F

// Register: RC4PPS
#define RC4PPS RC4PPS
extern volatile unsigned char           RC4PPS              __at(0x1DA0);
#ifndef _LIB_BUILD
asm("RC4PPS equ 01DA0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC4PPS                 :6;
    };
} RC4PPSbits_t;
extern volatile RC4PPSbits_t RC4PPSbits __at(0x1DA0);
// bitfield macros
#define _RC4PPS_RC4PPS_POSN                                 0x0
#define _RC4PPS_RC4PPS_POSITION                             0x0
#define _RC4PPS_RC4PPS_SIZE                                 0x6
#define _RC4PPS_RC4PPS_LENGTH                               0x6
#define _RC4PPS_RC4PPS_MASK                                 0x3F

// Register: RC5PPS
#define RC5PPS RC5PPS
extern volatile unsigned char           RC5PPS              __at(0x1DA1);
#ifndef _LIB_BUILD
asm("RC5PPS equ 01DA1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC5PPS                 :6;
    };
} RC5PPSbits_t;
extern volatile RC5PPSbits_t RC5PPSbits __at(0x1DA1);
// bitfield macros
#define _RC5PPS_RC5PPS_POSN                                 0x0
#define _RC5PPS_RC5PPS_POSITION                             0x0
#define _RC5PPS_RC5PPS_SIZE                                 0x6
#define _RC5PPS_RC5PPS_LENGTH                               0x6
#define _RC5PPS_RC5PPS_MASK                                 0x3F

// Register: PPSLOCK
#define PPSLOCK PPSLOCK
extern volatile unsigned char           PPSLOCK             __at(0x1E0C);
#ifndef _LIB_BUILD
asm("PPSLOCK equ 01E0Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PPSLOCKED              :1;
    };
} PPSLOCKbits_t;
extern volatile PPSLOCKbits_t PPSLOCKbits __at(0x1E0C);
// bitfield macros
#define _PPSLOCK_PPSLOCKED_POSN                             0x0
#define _PPSLOCK_PPSLOCKED_POSITION                         0x0
#define _PPSLOCK_PPSLOCKED_SIZE                             0x1
#define _PPSLOCK_PPSLOCKED_LENGTH                           0x1
#define _PPSLOCK_PPSLOCKED_MASK                             0x1

// Register: INTPPS
#define INTPPS INTPPS
extern volatile unsigned char           INTPPS              __at(0x1E0D);
#ifndef _LIB_BUILD
asm("INTPPS equ 01E0Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTPPS                 :5;
    };
    struct {
        unsigned INTPPS0                :1;
        unsigned INTPPS1                :1;
        unsigned INTPPS2                :1;
        unsigned INTPPS3                :1;
        unsigned INTPPS4                :1;
    };
} INTPPSbits_t;
extern volatile INTPPSbits_t INTPPSbits __at(0x1E0D);
// bitfield macros
#define _INTPPS_INTPPS_POSN                                 0x0
#define _INTPPS_INTPPS_POSITION                             0x0
#define _INTPPS_INTPPS_SIZE                                 0x5
#define _INTPPS_INTPPS_LENGTH                               0x5
#define _INTPPS_INTPPS_MASK                                 0x1F
#define _INTPPS_INTPPS0_POSN                                0x0
#define _INTPPS_INTPPS0_POSITION                            0x0
#define _INTPPS_INTPPS0_SIZE                                0x1
#define _INTPPS_INTPPS0_LENGTH                              0x1
#define _INTPPS_INTPPS0_MASK                                0x1
#define _INTPPS_INTPPS1_POSN                                0x1
#define _INTPPS_INTPPS1_POSITION                            0x1
#define _INTPPS_INTPPS1_SIZE                                0x1
#define _INTPPS_INTPPS1_LENGTH                              0x1
#define _INTPPS_INTPPS1_MASK                                0x2
#define _INTPPS_INTPPS2_POSN                                0x2
#define _INTPPS_INTPPS2_POSITION                            0x2
#define _INTPPS_INTPPS2_SIZE                                0x1
#define _INTPPS_INTPPS2_LENGTH                              0x1
#define _INTPPS_INTPPS2_MASK                                0x4
#define _INTPPS_INTPPS3_POSN                                0x3
#define _INTPPS_INTPPS3_POSITION                            0x3
#define _INTPPS_INTPPS3_SIZE                                0x1
#define _INTPPS_INTPPS3_LENGTH                              0x1
#define _INTPPS_INTPPS3_MASK                                0x8
#define _INTPPS_INTPPS4_POSN                                0x4
#define _INTPPS_INTPPS4_POSITION                            0x4
#define _INTPPS_INTPPS4_SIZE                                0x1
#define _INTPPS_INTPPS4_LENGTH                              0x1
#define _INTPPS_INTPPS4_MASK                                0x10

// Register: T0CKIPPS
#define T0CKIPPS T0CKIPPS
extern volatile unsigned char           T0CKIPPS            __at(0x1E0E);
#ifndef _LIB_BUILD
asm("T0CKIPPS equ 01E0Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0CKIPPS               :5;
    };
    struct {
        unsigned T0CKIPPS0              :1;
        unsigned T0CKIPPS1              :1;
        unsigned T0CKIPPS2              :1;
        unsigned T0CKIPPS3              :1;
        unsigned T0CKIPPS4              :1;
    };
} T0CKIPPSbits_t;
extern volatile T0CKIPPSbits_t T0CKIPPSbits __at(0x1E0E);
// bitfield macros
#define _T0CKIPPS_T0CKIPPS_POSN                             0x0
#define _T0CKIPPS_T0CKIPPS_POSITION                         0x0
#define _T0CKIPPS_T0CKIPPS_SIZE                             0x5
#define _T0CKIPPS_T0CKIPPS_LENGTH                           0x5
#define _T0CKIPPS_T0CKIPPS_MASK                             0x1F
#define _T0CKIPPS_T0CKIPPS0_POSN                            0x0
#define _T0CKIPPS_T0CKIPPS0_POSITION                        0x0
#define _T0CKIPPS_T0CKIPPS0_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS0_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS0_MASK                            0x1
#define _T0CKIPPS_T0CKIPPS1_POSN                            0x1
#define _T0CKIPPS_T0CKIPPS1_POSITION                        0x1
#define _T0CKIPPS_T0CKIPPS1_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS1_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS1_MASK                            0x2
#define _T0CKIPPS_T0CKIPPS2_POSN                            0x2
#define _T0CKIPPS_T0CKIPPS2_POSITION                        0x2
#define _T0CKIPPS_T0CKIPPS2_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS2_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS2_MASK                            0x4
#define _T0CKIPPS_T0CKIPPS3_POSN                            0x3
#define _T0CKIPPS_T0CKIPPS3_POSITION                        0x3
#define _T0CKIPPS_T0CKIPPS3_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS3_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS3_MASK                            0x8
#define _T0CKIPPS_T0CKIPPS4_POSN                            0x4
#define _T0CKIPPS_T0CKIPPS4_POSITION                        0x4
#define _T0CKIPPS_T0CKIPPS4_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS4_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS4_MASK                            0x10

// Register: T1CKIPPS
#define T1CKIPPS T1CKIPPS
extern volatile unsigned char           T1CKIPPS            __at(0x1E0F);
#ifndef _LIB_BUILD
asm("T1CKIPPS equ 01E0Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1CKIPPS               :5;
    };
    struct {
        unsigned T1CKIPPS0              :1;
        unsigned T1CKIPPS1              :1;
        unsigned T1CKIPPS2              :1;
        unsigned T1CKIPPS3              :1;
        unsigned T1CKIPPS4              :1;
    };
} T1CKIPPSbits_t;
extern volatile T1CKIPPSbits_t T1CKIPPSbits __at(0x1E0F);
// bitfield macros
#define _T1CKIPPS_T1CKIPPS_POSN                             0x0
#define _T1CKIPPS_T1CKIPPS_POSITION                         0x0
#define _T1CKIPPS_T1CKIPPS_SIZE                             0x5
#define _T1CKIPPS_T1CKIPPS_LENGTH                           0x5
#define _T1CKIPPS_T1CKIPPS_MASK                             0x1F
#define _T1CKIPPS_T1CKIPPS0_POSN                            0x0
#define _T1CKIPPS_T1CKIPPS0_POSITION                        0x0
#define _T1CKIPPS_T1CKIPPS0_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS0_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS0_MASK                            0x1
#define _T1CKIPPS_T1CKIPPS1_POSN                            0x1
#define _T1CKIPPS_T1CKIPPS1_POSITION                        0x1
#define _T1CKIPPS_T1CKIPPS1_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS1_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS1_MASK                            0x2
#define _T1CKIPPS_T1CKIPPS2_POSN                            0x2
#define _T1CKIPPS_T1CKIPPS2_POSITION                        0x2
#define _T1CKIPPS_T1CKIPPS2_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS2_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS2_MASK                            0x4
#define _T1CKIPPS_T1CKIPPS3_POSN                            0x3
#define _T1CKIPPS_T1CKIPPS3_POSITION                        0x3
#define _T1CKIPPS_T1CKIPPS3_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS3_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS3_MASK                            0x8
#define _T1CKIPPS_T1CKIPPS4_POSN                            0x4
#define _T1CKIPPS_T1CKIPPS4_POSITION                        0x4
#define _T1CKIPPS_T1CKIPPS4_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS4_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS4_MASK                            0x10

// Register: T1GPPS
#define T1GPPS T1GPPS
extern volatile unsigned char           T1GPPS              __at(0x1E10);
#ifndef _LIB_BUILD
asm("T1GPPS equ 01E10h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1GPPS                 :5;
    };
    struct {
        unsigned T1GPPS0                :1;
        unsigned T1GPPS1                :1;
        unsigned T1GPPS2                :1;
        unsigned T1GPPS3                :1;
        unsigned T1GPPS4                :1;
    };
} T1GPPSbits_t;
extern volatile T1GPPSbits_t T1GPPSbits __at(0x1E10);
// bitfield macros
#define _T1GPPS_T1GPPS_POSN                                 0x0
#define _T1GPPS_T1GPPS_POSITION                             0x0
#define _T1GPPS_T1GPPS_SIZE                                 0x5
#define _T1GPPS_T1GPPS_LENGTH                               0x5
#define _T1GPPS_T1GPPS_MASK                                 0x1F
#define _T1GPPS_T1GPPS0_POSN                                0x0
#define _T1GPPS_T1GPPS0_POSITION                            0x0
#define _T1GPPS_T1GPPS0_SIZE                                0x1
#define _T1GPPS_T1GPPS0_LENGTH                              0x1
#define _T1GPPS_T1GPPS0_MASK                                0x1
#define _T1GPPS_T1GPPS1_POSN                                0x1
#define _T1GPPS_T1GPPS1_POSITION                            0x1
#define _T1GPPS_T1GPPS1_SIZE                                0x1
#define _T1GPPS_T1GPPS1_LENGTH                              0x1
#define _T1GPPS_T1GPPS1_MASK                                0x2
#define _T1GPPS_T1GPPS2_POSN                                0x2
#define _T1GPPS_T1GPPS2_POSITION                            0x2
#define _T1GPPS_T1GPPS2_SIZE                                0x1
#define _T1GPPS_T1GPPS2_LENGTH                              0x1
#define _T1GPPS_T1GPPS2_MASK                                0x4
#define _T1GPPS_T1GPPS3_POSN                                0x3
#define _T1GPPS_T1GPPS3_POSITION                            0x3
#define _T1GPPS_T1GPPS3_SIZE                                0x1
#define _T1GPPS_T1GPPS3_LENGTH                              0x1
#define _T1GPPS_T1GPPS3_MASK                                0x8
#define _T1GPPS_T1GPPS4_POSN                                0x4
#define _T1GPPS_T1GPPS4_POSITION                            0x4
#define _T1GPPS_T1GPPS4_SIZE                                0x1
#define _T1GPPS_T1GPPS4_LENGTH                              0x1
#define _T1GPPS_T1GPPS4_MASK                                0x10

// Register: T2INPPS
#define T2INPPS T2INPPS
extern volatile unsigned char           T2INPPS             __at(0x1E19);
#ifndef _LIB_BUILD
asm("T2INPPS equ 01E19h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T2INPPS                :5;
    };
    struct {
        unsigned T2INPPS0               :1;
        unsigned T2INPPS1               :1;
        unsigned T2INPPS2               :1;
        unsigned T2INPPS3               :1;
        unsigned T2INPPS4               :1;
    };
} T2INPPSbits_t;
extern volatile T2INPPSbits_t T2INPPSbits __at(0x1E19);
// bitfield macros
#define _T2INPPS_T2INPPS_POSN                               0x0
#define _T2INPPS_T2INPPS_POSITION                           0x0
#define _T2INPPS_T2INPPS_SIZE                               0x5
#define _T2INPPS_T2INPPS_LENGTH                             0x5
#define _T2INPPS_T2INPPS_MASK                               0x1F
#define _T2INPPS_T2INPPS0_POSN                              0x0
#define _T2INPPS_T2INPPS0_POSITION                          0x0
#define _T2INPPS_T2INPPS0_SIZE                              0x1
#define _T2INPPS_T2INPPS0_LENGTH                            0x1
#define _T2INPPS_T2INPPS0_MASK                              0x1
#define _T2INPPS_T2INPPS1_POSN                              0x1
#define _T2INPPS_T2INPPS1_POSITION                          0x1
#define _T2INPPS_T2INPPS1_SIZE                              0x1
#define _T2INPPS_T2INPPS1_LENGTH                            0x1
#define _T2INPPS_T2INPPS1_MASK                              0x2
#define _T2INPPS_T2INPPS2_POSN                              0x2
#define _T2INPPS_T2INPPS2_POSITION                          0x2
#define _T2INPPS_T2INPPS2_SIZE                              0x1
#define _T2INPPS_T2INPPS2_LENGTH                            0x1
#define _T2INPPS_T2INPPS2_MASK                              0x4
#define _T2INPPS_T2INPPS3_POSN                              0x3
#define _T2INPPS_T2INPPS3_POSITION                          0x3
#define _T2INPPS_T2INPPS3_SIZE                              0x1
#define _T2INPPS_T2INPPS3_LENGTH                            0x1
#define _T2INPPS_T2INPPS3_MASK                              0x8
#define _T2INPPS_T2INPPS4_POSN                              0x4
#define _T2INPPS_T2INPPS4_POSITION                          0x4
#define _T2INPPS_T2INPPS4_SIZE                              0x1
#define _T2INPPS_T2INPPS4_LENGTH                            0x1
#define _T2INPPS_T2INPPS4_MASK                              0x10

// Register: CCP1PPS
#define CCP1PPS CCP1PPS
extern volatile unsigned char           CCP1PPS             __at(0x1E1E);
#ifndef _LIB_BUILD
asm("CCP1PPS equ 01E1Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1PPS                :5;
    };
    struct {
        unsigned CCP1PPS0               :1;
        unsigned CCP1PPS1               :1;
        unsigned CCP1PPS2               :1;
        unsigned CCP1PPS3               :1;
        unsigned CCP1PPS4               :1;
    };
} CCP1PPSbits_t;
extern volatile CCP1PPSbits_t CCP1PPSbits __at(0x1E1E);
// bitfield macros
#define _CCP1PPS_CCP1PPS_POSN                               0x0
#define _CCP1PPS_CCP1PPS_POSITION                           0x0
#define _CCP1PPS_CCP1PPS_SIZE                               0x5
#define _CCP1PPS_CCP1PPS_LENGTH                             0x5
#define _CCP1PPS_CCP1PPS_MASK                               0x1F
#define _CCP1PPS_CCP1PPS0_POSN                              0x0
#define _CCP1PPS_CCP1PPS0_POSITION                          0x0
#define _CCP1PPS_CCP1PPS0_SIZE                              0x1
#define _CCP1PPS_CCP1PPS0_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS0_MASK                              0x1
#define _CCP1PPS_CCP1PPS1_POSN                              0x1
#define _CCP1PPS_CCP1PPS1_POSITION                          0x1
#define _CCP1PPS_CCP1PPS1_SIZE                              0x1
#define _CCP1PPS_CCP1PPS1_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS1_MASK                              0x2
#define _CCP1PPS_CCP1PPS2_POSN                              0x2
#define _CCP1PPS_CCP1PPS2_POSITION                          0x2
#define _CCP1PPS_CCP1PPS2_SIZE                              0x1
#define _CCP1PPS_CCP1PPS2_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS2_MASK                              0x4
#define _CCP1PPS_CCP1PPS3_POSN                              0x3
#define _CCP1PPS_CCP1PPS3_POSITION                          0x3
#define _CCP1PPS_CCP1PPS3_SIZE                              0x1
#define _CCP1PPS_CCP1PPS3_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS3_MASK                              0x8
#define _CCP1PPS_CCP1PPS4_POSN                              0x4
#define _CCP1PPS_CCP1PPS4_POSITION                          0x4
#define _CCP1PPS_CCP1PPS4_SIZE                              0x1
#define _CCP1PPS_CCP1PPS4_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS4_MASK                              0x10

// Register: CCP2PPS
#define CCP2PPS CCP2PPS
extern volatile unsigned char           CCP2PPS             __at(0x1E1F);
#ifndef _LIB_BUILD
asm("CCP2PPS equ 01E1Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP2PPS                :5;
    };
    struct {
        unsigned CCP2PPS0               :1;
        unsigned CCP2PPS1               :1;
        unsigned CCP2PPS2               :1;
        unsigned CCP2PPS3               :1;
        unsigned CCP2PPS4               :1;
    };
} CCP2PPSbits_t;
extern volatile CCP2PPSbits_t CCP2PPSbits __at(0x1E1F);
// bitfield macros
#define _CCP2PPS_CCP2PPS_POSN                               0x0
#define _CCP2PPS_CCP2PPS_POSITION                           0x0
#define _CCP2PPS_CCP2PPS_SIZE                               0x5
#define _CCP2PPS_CCP2PPS_LENGTH                             0x5
#define _CCP2PPS_CCP2PPS_MASK                               0x1F
#define _CCP2PPS_CCP2PPS0_POSN                              0x0
#define _CCP2PPS_CCP2PPS0_POSITION                          0x0
#define _CCP2PPS_CCP2PPS0_SIZE                              0x1
#define _CCP2PPS_CCP2PPS0_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS0_MASK                              0x1
#define _CCP2PPS_CCP2PPS1_POSN                              0x1
#define _CCP2PPS_CCP2PPS1_POSITION                          0x1
#define _CCP2PPS_CCP2PPS1_SIZE                              0x1
#define _CCP2PPS_CCP2PPS1_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS1_MASK                              0x2
#define _CCP2PPS_CCP2PPS2_POSN                              0x2
#define _CCP2PPS_CCP2PPS2_POSITION                          0x2
#define _CCP2PPS_CCP2PPS2_SIZE                              0x1
#define _CCP2PPS_CCP2PPS2_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS2_MASK                              0x4
#define _CCP2PPS_CCP2PPS3_POSN                              0x3
#define _CCP2PPS_CCP2PPS3_POSITION                          0x3
#define _CCP2PPS_CCP2PPS3_SIZE                              0x1
#define _CCP2PPS_CCP2PPS3_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS3_MASK                              0x8
#define _CCP2PPS_CCP2PPS4_POSN                              0x4
#define _CCP2PPS_CCP2PPS4_POSITION                          0x4
#define _CCP2PPS_CCP2PPS4_SIZE                              0x1
#define _CCP2PPS_CCP2PPS4_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS4_MASK                              0x10

// Register: CLCIN0PPS
#define CLCIN0PPS CLCIN0PPS
extern volatile unsigned char           CLCIN0PPS           __at(0x1E3D);
#ifndef _LIB_BUILD
asm("CLCIN0PPS equ 01E3Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN0PPS              :5;
    };
    struct {
        unsigned CLCIN0PPS0             :1;
        unsigned CLCIN0PPS1             :1;
        unsigned CLCIN0PPS2             :1;
        unsigned CLCIN0PPS3             :1;
        unsigned CLCIN0PPS4             :1;
    };
} CLCIN0PPSbits_t;
extern volatile CLCIN0PPSbits_t CLCIN0PPSbits __at(0x1E3D);
// bitfield macros
#define _CLCIN0PPS_CLCIN0PPS_POSN                           0x0
#define _CLCIN0PPS_CLCIN0PPS_POSITION                       0x0
#define _CLCIN0PPS_CLCIN0PPS_SIZE                           0x5
#define _CLCIN0PPS_CLCIN0PPS_LENGTH                         0x5
#define _CLCIN0PPS_CLCIN0PPS_MASK                           0x1F
#define _CLCIN0PPS_CLCIN0PPS0_POSN                          0x0
#define _CLCIN0PPS_CLCIN0PPS0_POSITION                      0x0
#define _CLCIN0PPS_CLCIN0PPS0_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS0_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS0_MASK                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_POSN                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_POSITION                      0x1
#define _CLCIN0PPS_CLCIN0PPS1_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS1_MASK                          0x2
#define _CLCIN0PPS_CLCIN0PPS2_POSN                          0x2
#define _CLCIN0PPS_CLCIN0PPS2_POSITION                      0x2
#define _CLCIN0PPS_CLCIN0PPS2_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS2_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS2_MASK                          0x4
#define _CLCIN0PPS_CLCIN0PPS3_POSN                          0x3
#define _CLCIN0PPS_CLCIN0PPS3_POSITION                      0x3
#define _CLCIN0PPS_CLCIN0PPS3_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS3_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS3_MASK                          0x8
#define _CLCIN0PPS_CLCIN0PPS4_POSN                          0x4
#define _CLCIN0PPS_CLCIN0PPS4_POSITION                      0x4
#define _CLCIN0PPS_CLCIN0PPS4_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS4_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS4_MASK                          0x10

// Register: CLCIN1PPS
#define CLCIN1PPS CLCIN1PPS
extern volatile unsigned char           CLCIN1PPS           __at(0x1E3E);
#ifndef _LIB_BUILD
asm("CLCIN1PPS equ 01E3Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN1PPS              :5;
    };
    struct {
        unsigned CLCIN1PPS0             :1;
        unsigned CLCIN1PPS1             :1;
        unsigned CLCIN1PPS2             :1;
        unsigned CLCIN1PPS3             :1;
        unsigned CLCIN1PPS4             :1;
    };
} CLCIN1PPSbits_t;
extern volatile CLCIN1PPSbits_t CLCIN1PPSbits __at(0x1E3E);
// bitfield macros
#define _CLCIN1PPS_CLCIN1PPS_POSN                           0x0
#define _CLCIN1PPS_CLCIN1PPS_POSITION                       0x0
#define _CLCIN1PPS_CLCIN1PPS_SIZE                           0x5
#define _CLCIN1PPS_CLCIN1PPS_LENGTH                         0x5
#define _CLCIN1PPS_CLCIN1PPS_MASK                           0x1F
#define _CLCIN1PPS_CLCIN1PPS0_POSN                          0x0
#define _CLCIN1PPS_CLCIN1PPS0_POSITION                      0x0
#define _CLCIN1PPS_CLCIN1PPS0_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS0_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS0_MASK                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_POSN                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_POSITION                      0x1
#define _CLCIN1PPS_CLCIN1PPS1_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS1_MASK                          0x2
#define _CLCIN1PPS_CLCIN1PPS2_POSN                          0x2
#define _CLCIN1PPS_CLCIN1PPS2_POSITION                      0x2
#define _CLCIN1PPS_CLCIN1PPS2_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS2_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS2_MASK                          0x4
#define _CLCIN1PPS_CLCIN1PPS3_POSN                          0x3
#define _CLCIN1PPS_CLCIN1PPS3_POSITION                      0x3
#define _CLCIN1PPS_CLCIN1PPS3_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS3_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS3_MASK                          0x8
#define _CLCIN1PPS_CLCIN1PPS4_POSN                          0x4
#define _CLCIN1PPS_CLCIN1PPS4_POSITION                      0x4
#define _CLCIN1PPS_CLCIN1PPS4_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS4_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS4_MASK                          0x10

// Register: CLCIN2PPS
#define CLCIN2PPS CLCIN2PPS
extern volatile unsigned char           CLCIN2PPS           __at(0x1E3F);
#ifndef _LIB_BUILD
asm("CLCIN2PPS equ 01E3Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN2PPS              :5;
    };
    struct {
        unsigned CLCIN2PPS0             :1;
        unsigned CLCIN2PPS1             :1;
        unsigned CLCIN2PPS2             :1;
        unsigned CLCIN2PPS3             :1;
        unsigned CLCIN2PPS4             :1;
    };
} CLCIN2PPSbits_t;
extern volatile CLCIN2PPSbits_t CLCIN2PPSbits __at(0x1E3F);
// bitfield macros
#define _CLCIN2PPS_CLCIN2PPS_POSN                           0x0
#define _CLCIN2PPS_CLCIN2PPS_POSITION                       0x0
#define _CLCIN2PPS_CLCIN2PPS_SIZE                           0x5
#define _CLCIN2PPS_CLCIN2PPS_LENGTH                         0x5
#define _CLCIN2PPS_CLCIN2PPS_MASK                           0x1F
#define _CLCIN2PPS_CLCIN2PPS0_POSN                          0x0
#define _CLCIN2PPS_CLCIN2PPS0_POSITION                      0x0
#define _CLCIN2PPS_CLCIN2PPS0_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS0_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS0_MASK                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_POSN                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_POSITION                      0x1
#define _CLCIN2PPS_CLCIN2PPS1_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS1_MASK                          0x2
#define _CLCIN2PPS_CLCIN2PPS2_POSN                          0x2
#define _CLCIN2PPS_CLCIN2PPS2_POSITION                      0x2
#define _CLCIN2PPS_CLCIN2PPS2_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS2_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS2_MASK                          0x4
#define _CLCIN2PPS_CLCIN2PPS3_POSN                          0x3
#define _CLCIN2PPS_CLCIN2PPS3_POSITION                      0x3
#define _CLCIN2PPS_CLCIN2PPS3_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS3_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS3_MASK                          0x8
#define _CLCIN2PPS_CLCIN2PPS4_POSN                          0x4
#define _CLCIN2PPS_CLCIN2PPS4_POSITION                      0x4
#define _CLCIN2PPS_CLCIN2PPS4_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS4_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS4_MASK                          0x10

// Register: CLCIN3PPS
#define CLCIN3PPS CLCIN3PPS
extern volatile unsigned char           CLCIN3PPS           __at(0x1E40);
#ifndef _LIB_BUILD
asm("CLCIN3PPS equ 01E40h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN3PPS              :5;
    };
    struct {
        unsigned CLCIN3PPS0             :1;
        unsigned CLCIN3PPS1             :1;
        unsigned CLCIN3PPS2             :1;
        unsigned CLCIN3PPS3             :1;
        unsigned CLCIN3PPS4             :1;
    };
} CLCIN3PPSbits_t;
extern volatile CLCIN3PPSbits_t CLCIN3PPSbits __at(0x1E40);
// bitfield macros
#define _CLCIN3PPS_CLCIN3PPS_POSN                           0x0
#define _CLCIN3PPS_CLCIN3PPS_POSITION                       0x0
#define _CLCIN3PPS_CLCIN3PPS_SIZE                           0x5
#define _CLCIN3PPS_CLCIN3PPS_LENGTH                         0x5
#define _CLCIN3PPS_CLCIN3PPS_MASK                           0x1F
#define _CLCIN3PPS_CLCIN3PPS0_POSN                          0x0
#define _CLCIN3PPS_CLCIN3PPS0_POSITION                      0x0
#define _CLCIN3PPS_CLCIN3PPS0_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS0_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS0_MASK                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_POSN                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_POSITION                      0x1
#define _CLCIN3PPS_CLCIN3PPS1_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS1_MASK                          0x2
#define _CLCIN3PPS_CLCIN3PPS2_POSN                          0x2
#define _CLCIN3PPS_CLCIN3PPS2_POSITION                      0x2
#define _CLCIN3PPS_CLCIN3PPS2_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS2_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS2_MASK                          0x4
#define _CLCIN3PPS_CLCIN3PPS3_POSN                          0x3
#define _CLCIN3PPS_CLCIN3PPS3_POSITION                      0x3
#define _CLCIN3PPS_CLCIN3PPS3_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS3_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS3_MASK                          0x8
#define _CLCIN3PPS_CLCIN3PPS4_POSN                          0x4
#define _CLCIN3PPS_CLCIN3PPS4_POSITION                      0x4
#define _CLCIN3PPS_CLCIN3PPS4_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS4_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS4_MASK                          0x10

// Register: CK1PPS
#define CK1PPS CK1PPS
extern volatile unsigned char           CK1PPS              __at(0x1E41);
#ifndef _LIB_BUILD
asm("CK1PPS equ 01E41h");
#endif
// aliases
extern volatile unsigned char           RX1DTPPS            __at(0x1E41);
#ifndef _LIB_BUILD
asm("RX1DTPPS equ 01E41h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CK1PPS                 :5;
    };
} CK1PPSbits_t;
extern volatile CK1PPSbits_t CK1PPSbits __at(0x1E41);
// bitfield macros
#define _CK1PPS_CK1PPS_POSN                                 0x0
#define _CK1PPS_CK1PPS_POSITION                             0x0
#define _CK1PPS_CK1PPS_SIZE                                 0x5
#define _CK1PPS_CK1PPS_LENGTH                               0x5
#define _CK1PPS_CK1PPS_MASK                                 0x1F
// alias bitfield definitions
typedef union {
    struct {
        unsigned CK1PPS                 :5;
    };
} RX1DTPPSbits_t;
extern volatile RX1DTPPSbits_t RX1DTPPSbits __at(0x1E41);
// bitfield macros
#define _RX1DTPPS_CK1PPS_POSN                               0x0
#define _RX1DTPPS_CK1PPS_POSITION                           0x0
#define _RX1DTPPS_CK1PPS_SIZE                               0x5
#define _RX1DTPPS_CK1PPS_LENGTH                             0x5
#define _RX1DTPPS_CK1PPS_MASK                               0x1F

// Register: RX1PPS
#define RX1PPS RX1PPS
extern volatile unsigned char           RX1PPS              __at(0x1E42);
#ifndef _LIB_BUILD
asm("RX1PPS equ 01E42h");
#endif
// aliases
extern volatile unsigned char           TX1CKPPS            __at(0x1E42);
#ifndef _LIB_BUILD
asm("TX1CKPPS equ 01E42h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RX1PPS                 :5;
    };
} RX1PPSbits_t;
extern volatile RX1PPSbits_t RX1PPSbits __at(0x1E42);
// bitfield macros
#define _RX1PPS_RX1PPS_POSN                                 0x0
#define _RX1PPS_RX1PPS_POSITION                             0x0
#define _RX1PPS_RX1PPS_SIZE                                 0x5
#define _RX1PPS_RX1PPS_LENGTH                               0x5
#define _RX1PPS_RX1PPS_MASK                                 0x1F
// alias bitfield definitions
typedef union {
    struct {
        unsigned RX1PPS                 :5;
    };
} TX1CKPPSbits_t;
extern volatile TX1CKPPSbits_t TX1CKPPSbits __at(0x1E42);
// bitfield macros
#define _TX1CKPPS_RX1PPS_POSN                               0x0
#define _TX1CKPPS_RX1PPS_POSITION                           0x0
#define _TX1CKPPS_RX1PPS_SIZE                               0x5
#define _TX1CKPPS_RX1PPS_LENGTH                             0x5
#define _TX1CKPPS_RX1PPS_MASK                               0x1F

// Register: SSP1CLKPPS
#define SSP1CLKPPS SSP1CLKPPS
extern volatile unsigned char           SSP1CLKPPS          __at(0x1E47);
#ifndef _LIB_BUILD
asm("SSP1CLKPPS equ 01E47h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1CLKPPS             :5;
    };
    struct {
        unsigned SSP1CLKPPS0            :1;
        unsigned SSP1CLKPPS1            :1;
        unsigned SSP1CLKPPS2            :1;
        unsigned SSP1CLKPPS3            :1;
        unsigned SSP1CLKPPS4            :1;
    };
} SSP1CLKPPSbits_t;
extern volatile SSP1CLKPPSbits_t SSP1CLKPPSbits __at(0x1E47);
// bitfield macros
#define _SSP1CLKPPS_SSP1CLKPPS_POSN                         0x0
#define _SSP1CLKPPS_SSP1CLKPPS_POSITION                     0x0
#define _SSP1CLKPPS_SSP1CLKPPS_SIZE                         0x5
#define _SSP1CLKPPS_SSP1CLKPPS_LENGTH                       0x5
#define _SSP1CLKPPS_SSP1CLKPPS_MASK                         0x1F
#define _SSP1CLKPPS_SSP1CLKPPS0_POSN                        0x0
#define _SSP1CLKPPS_SSP1CLKPPS0_POSITION                    0x0
#define _SSP1CLKPPS_SSP1CLKPPS0_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS0_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS0_MASK                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_POSN                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_POSITION                    0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS1_MASK                        0x2
#define _SSP1CLKPPS_SSP1CLKPPS2_POSN                        0x2
#define _SSP1CLKPPS_SSP1CLKPPS2_POSITION                    0x2
#define _SSP1CLKPPS_SSP1CLKPPS2_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS2_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS2_MASK                        0x4
#define _SSP1CLKPPS_SSP1CLKPPS3_POSN                        0x3
#define _SSP1CLKPPS_SSP1CLKPPS3_POSITION                    0x3
#define _SSP1CLKPPS_SSP1CLKPPS3_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS3_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS3_MASK                        0x8
#define _SSP1CLKPPS_SSP1CLKPPS4_POSN                        0x4
#define _SSP1CLKPPS_SSP1CLKPPS4_POSITION                    0x4
#define _SSP1CLKPPS_SSP1CLKPPS4_SIZE                        0x1
#define _SSP1CLKPPS_SSP1CLKPPS4_LENGTH                      0x1
#define _SSP1CLKPPS_SSP1CLKPPS4_MASK                        0x10

// Register: SSP1DATPPS
#define SSP1DATPPS SSP1DATPPS
extern volatile unsigned char           SSP1DATPPS          __at(0x1E48);
#ifndef _LIB_BUILD
asm("SSP1DATPPS equ 01E48h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1DATPPS             :5;
    };
    struct {
        unsigned SSP1DATPPS0            :1;
        unsigned SSP1DATPPS1            :1;
        unsigned SSP1DATPPS2            :1;
        unsigned SSP1DATPPS3            :1;
        unsigned SSP1DATPPS4            :1;
    };
} SSP1DATPPSbits_t;
extern volatile SSP1DATPPSbits_t SSP1DATPPSbits __at(0x1E48);
// bitfield macros
#define _SSP1DATPPS_SSP1DATPPS_POSN                         0x0
#define _SSP1DATPPS_SSP1DATPPS_POSITION                     0x0
#define _SSP1DATPPS_SSP1DATPPS_SIZE                         0x5
#define _SSP1DATPPS_SSP1DATPPS_LENGTH                       0x5
#define _SSP1DATPPS_SSP1DATPPS_MASK                         0x1F
#define _SSP1DATPPS_SSP1DATPPS0_POSN                        0x0
#define _SSP1DATPPS_SSP1DATPPS0_POSITION                    0x0
#define _SSP1DATPPS_SSP1DATPPS0_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS0_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS0_MASK                        0x1
#define _SSP1DATPPS_SSP1DATPPS1_POSN                        0x1
#define _SSP1DATPPS_SSP1DATPPS1_POSITION                    0x1
#define _SSP1DATPPS_SSP1DATPPS1_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS1_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS1_MASK                        0x2
#define _SSP1DATPPS_SSP1DATPPS2_POSN                        0x2
#define _SSP1DATPPS_SSP1DATPPS2_POSITION                    0x2
#define _SSP1DATPPS_SSP1DATPPS2_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS2_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS2_MASK                        0x4
#define _SSP1DATPPS_SSP1DATPPS3_POSN                        0x3
#define _SSP1DATPPS_SSP1DATPPS3_POSITION                    0x3
#define _SSP1DATPPS_SSP1DATPPS3_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS3_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS3_MASK                        0x8
#define _SSP1DATPPS_SSP1DATPPS4_POSN                        0x4
#define _SSP1DATPPS_SSP1DATPPS4_POSITION                    0x4
#define _SSP1DATPPS_SSP1DATPPS4_SIZE                        0x1
#define _SSP1DATPPS_SSP1DATPPS4_LENGTH                      0x1
#define _SSP1DATPPS_SSP1DATPPS4_MASK                        0x10

// Register: SSP1SSPPS
#define SSP1SSPPS SSP1SSPPS
extern volatile unsigned char           SSP1SSPPS           __at(0x1E49);
#ifndef _LIB_BUILD
asm("SSP1SSPPS equ 01E49h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSP1SSPPS              :5;
    };
    struct {
        unsigned SSP1SSPPS0             :1;
        unsigned SSP1SSPPS1             :1;
        unsigned SSP1SSPPS2             :1;
        unsigned SSP1SSPPS3             :1;
        unsigned SSP1SSPPS4             :1;
    };
} SSP1SSPPSbits_t;
extern volatile SSP1SSPPSbits_t SSP1SSPPSbits __at(0x1E49);
// bitfield macros
#define _SSP1SSPPS_SSP1SSPPS_POSN                           0x0
#define _SSP1SSPPS_SSP1SSPPS_POSITION                       0x0
#define _SSP1SSPPS_SSP1SSPPS_SIZE                           0x5
#define _SSP1SSPPS_SSP1SSPPS_LENGTH                         0x5
#define _SSP1SSPPS_SSP1SSPPS_MASK                           0x1F
#define _SSP1SSPPS_SSP1SSPPS0_POSN                          0x0
#define _SSP1SSPPS_SSP1SSPPS0_POSITION                      0x0
#define _SSP1SSPPS_SSP1SSPPS0_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS0_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS0_MASK                          0x1
#define _SSP1SSPPS_SSP1SSPPS1_POSN                          0x1
#define _SSP1SSPPS_SSP1SSPPS1_POSITION                      0x1
#define _SSP1SSPPS_SSP1SSPPS1_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS1_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS1_MASK                          0x2
#define _SSP1SSPPS_SSP1SSPPS2_POSN                          0x2
#define _SSP1SSPPS_SSP1SSPPS2_POSITION                      0x2
#define _SSP1SSPPS_SSP1SSPPS2_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS2_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS2_MASK                          0x4
#define _SSP1SSPPS_SSP1SSPPS3_POSN                          0x3
#define _SSP1SSPPS_SSP1SSPPS3_POSITION                      0x3
#define _SSP1SSPPS_SSP1SSPPS3_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS3_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS3_MASK                          0x8
#define _SSP1SSPPS_SSP1SSPPS4_POSN                          0x4
#define _SSP1SSPPS_SSP1SSPPS4_POSITION                      0x4
#define _SSP1SSPPS_SSP1SSPPS4_SIZE                          0x1
#define _SSP1SSPPS_SSP1SSPPS4_LENGTH                        0x1
#define _SSP1SSPPS_SSP1SSPPS4_MASK                          0x10

// Register: ADACTPPS
#define ADACTPPS ADACTPPS
extern volatile unsigned char           ADACTPPS            __at(0x1E50);
#ifndef _LIB_BUILD
asm("ADACTPPS equ 01E50h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADACTPPS               :5;
    };
} ADACTPPSbits_t;
extern volatile ADACTPPSbits_t ADACTPPSbits __at(0x1E50);
// bitfield macros
#define _ADACTPPS_ADACTPPS_POSN                             0x0
#define _ADACTPPS_ADACTPPS_POSITION                         0x0
#define _ADACTPPS_ADACTPPS_SIZE                             0x5
#define _ADACTPPS_ADACTPPS_LENGTH                           0x5
#define _ADACTPPS_ADACTPPS_MASK                             0x1F

// Register: CLBIN0PPS
#define CLBIN0PPS CLBIN0PPS
extern volatile unsigned char           CLBIN0PPS           __at(0x1E57);
#ifndef _LIB_BUILD
asm("CLBIN0PPS equ 01E57h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLBIN0PPS              :5;
    };
} CLBIN0PPSbits_t;
extern volatile CLBIN0PPSbits_t CLBIN0PPSbits __at(0x1E57);
// bitfield macros
#define _CLBIN0PPS_CLBIN0PPS_POSN                           0x0
#define _CLBIN0PPS_CLBIN0PPS_POSITION                       0x0
#define _CLBIN0PPS_CLBIN0PPS_SIZE                           0x5
#define _CLBIN0PPS_CLBIN0PPS_LENGTH                         0x5
#define _CLBIN0PPS_CLBIN0PPS_MASK                           0x1F

// Register: CLBIN1PPS
#define CLBIN1PPS CLBIN1PPS
extern volatile unsigned char           CLBIN1PPS           __at(0x1E58);
#ifndef _LIB_BUILD
asm("CLBIN1PPS equ 01E58h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLBIN1PPS              :5;
    };
} CLBIN1PPSbits_t;
extern volatile CLBIN1PPSbits_t CLBIN1PPSbits __at(0x1E58);
// bitfield macros
#define _CLBIN1PPS_CLBIN1PPS_POSN                           0x0
#define _CLBIN1PPS_CLBIN1PPS_POSITION                       0x0
#define _CLBIN1PPS_CLBIN1PPS_SIZE                           0x5
#define _CLBIN1PPS_CLBIN1PPS_LENGTH                         0x5
#define _CLBIN1PPS_CLBIN1PPS_MASK                           0x1F

// Register: CLBIN2PPS
#define CLBIN2PPS CLBIN2PPS
extern volatile unsigned char           CLBIN2PPS           __at(0x1E59);
#ifndef _LIB_BUILD
asm("CLBIN2PPS equ 01E59h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLBIN2PPS              :5;
    };
} CLBIN2PPSbits_t;
extern volatile CLBIN2PPSbits_t CLBIN2PPSbits __at(0x1E59);
// bitfield macros
#define _CLBIN2PPS_CLBIN2PPS_POSN                           0x0
#define _CLBIN2PPS_CLBIN2PPS_POSITION                       0x0
#define _CLBIN2PPS_CLBIN2PPS_SIZE                           0x5
#define _CLBIN2PPS_CLBIN2PPS_LENGTH                         0x5
#define _CLBIN2PPS_CLBIN2PPS_MASK                           0x1F

// Register: CLBIN3PPS
#define CLBIN3PPS CLBIN3PPS
extern volatile unsigned char           CLBIN3PPS           __at(0x1E5A);
#ifndef _LIB_BUILD
asm("CLBIN3PPS equ 01E5Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLBIN3PPS              :5;
    };
} CLBIN3PPSbits_t;
extern volatile CLBIN3PPSbits_t CLBIN3PPSbits __at(0x1E5A);
// bitfield macros
#define _CLBIN3PPS_CLBIN3PPS_POSN                           0x0
#define _CLBIN3PPS_CLBIN3PPS_POSITION                       0x0
#define _CLBIN3PPS_CLBIN3PPS_SIZE                           0x5
#define _CLBIN3PPS_CLBIN3PPS_LENGTH                         0x5
#define _CLBIN3PPS_CLBIN3PPS_MASK                           0x1F

// Register: ANSELA
#define ANSELA ANSELA
extern volatile unsigned char           ANSELA              __at(0x1E8C);
#ifndef _LIB_BUILD
asm("ANSELA equ 01E8Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSELA0                :1;
        unsigned ANSELA1                :1;
        unsigned ANSELA2                :1;
        unsigned                        :1;
        unsigned ANSELA4                :1;
        unsigned ANSELA5                :1;
    };
    struct {
        unsigned ANSA0                  :1;
        unsigned ANSA1                  :1;
        unsigned ANSA2                  :1;
        unsigned                        :1;
        unsigned ANSA4                  :1;
        unsigned ANSA5                  :1;
    };
} ANSELAbits_t;
extern volatile ANSELAbits_t ANSELAbits __at(0x1E8C);
// bitfield macros
#define _ANSELA_ANSELA0_POSN                                0x0
#define _ANSELA_ANSELA0_POSITION                            0x0
#define _ANSELA_ANSELA0_SIZE                                0x1
#define _ANSELA_ANSELA0_LENGTH                              0x1
#define _ANSELA_ANSELA0_MASK                                0x1
#define _ANSELA_ANSELA1_POSN                                0x1
#define _ANSELA_ANSELA1_POSITION                            0x1
#define _ANSELA_ANSELA1_SIZE                                0x1
#define _ANSELA_ANSELA1_LENGTH                              0x1
#define _ANSELA_ANSELA1_MASK                                0x2
#define _ANSELA_ANSELA2_POSN                                0x2
#define _ANSELA_ANSELA2_POSITION                            0x2
#define _ANSELA_ANSELA2_SIZE                                0x1
#define _ANSELA_ANSELA2_LENGTH                              0x1
#define _ANSELA_ANSELA2_MASK                                0x4
#define _ANSELA_ANSELA4_POSN                                0x4
#define _ANSELA_ANSELA4_POSITION                            0x4
#define _ANSELA_ANSELA4_SIZE                                0x1
#define _ANSELA_ANSELA4_LENGTH                              0x1
#define _ANSELA_ANSELA4_MASK                                0x10
#define _ANSELA_ANSELA5_POSN                                0x5
#define _ANSELA_ANSELA5_POSITION                            0x5
#define _ANSELA_ANSELA5_SIZE                                0x1
#define _ANSELA_ANSELA5_LENGTH                              0x1
#define _ANSELA_ANSELA5_MASK                                0x20
#define _ANSELA_ANSA0_POSN                                  0x0
#define _ANSELA_ANSA0_POSITION                              0x0
#define _ANSELA_ANSA0_SIZE                                  0x1
#define _ANSELA_ANSA0_LENGTH                                0x1
#define _ANSELA_ANSA0_MASK                                  0x1
#define _ANSELA_ANSA1_POSN                                  0x1
#define _ANSELA_ANSA1_POSITION                              0x1
#define _ANSELA_ANSA1_SIZE                                  0x1
#define _ANSELA_ANSA1_LENGTH                                0x1
#define _ANSELA_ANSA1_MASK                                  0x2
#define _ANSELA_ANSA2_POSN                                  0x2
#define _ANSELA_ANSA2_POSITION                              0x2
#define _ANSELA_ANSA2_SIZE                                  0x1
#define _ANSELA_ANSA2_LENGTH                                0x1
#define _ANSELA_ANSA2_MASK                                  0x4
#define _ANSELA_ANSA4_POSN                                  0x4
#define _ANSELA_ANSA4_POSITION                              0x4
#define _ANSELA_ANSA4_SIZE                                  0x1
#define _ANSELA_ANSA4_LENGTH                                0x1
#define _ANSELA_ANSA4_MASK                                  0x10
#define _ANSELA_ANSA5_POSN                                  0x5
#define _ANSELA_ANSA5_POSITION                              0x5
#define _ANSELA_ANSA5_SIZE                                  0x1
#define _ANSELA_ANSA5_LENGTH                                0x1
#define _ANSELA_ANSA5_MASK                                  0x20

// Register: WPUA
#define WPUA WPUA
extern volatile unsigned char           WPUA                __at(0x1E8D);
#ifndef _LIB_BUILD
asm("WPUA equ 01E8Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUA0                  :1;
        unsigned WPUA1                  :1;
        unsigned WPUA2                  :1;
        unsigned WPUA3                  :1;
        unsigned WPUA4                  :1;
        unsigned WPUA5                  :1;
    };
} WPUAbits_t;
extern volatile WPUAbits_t WPUAbits __at(0x1E8D);
// bitfield macros
#define _WPUA_WPUA0_POSN                                    0x0
#define _WPUA_WPUA0_POSITION                                0x0
#define _WPUA_WPUA0_SIZE                                    0x1
#define _WPUA_WPUA0_LENGTH                                  0x1
#define _WPUA_WPUA0_MASK                                    0x1
#define _WPUA_WPUA1_POSN                                    0x1
#define _WPUA_WPUA1_POSITION                                0x1
#define _WPUA_WPUA1_SIZE                                    0x1
#define _WPUA_WPUA1_LENGTH                                  0x1
#define _WPUA_WPUA1_MASK                                    0x2
#define _WPUA_WPUA2_POSN                                    0x2
#define _WPUA_WPUA2_POSITION                                0x2
#define _WPUA_WPUA2_SIZE                                    0x1
#define _WPUA_WPUA2_LENGTH                                  0x1
#define _WPUA_WPUA2_MASK                                    0x4
#define _WPUA_WPUA3_POSN                                    0x3
#define _WPUA_WPUA3_POSITION                                0x3
#define _WPUA_WPUA3_SIZE                                    0x1
#define _WPUA_WPUA3_LENGTH                                  0x1
#define _WPUA_WPUA3_MASK                                    0x8
#define _WPUA_WPUA4_POSN                                    0x4
#define _WPUA_WPUA4_POSITION                                0x4
#define _WPUA_WPUA4_SIZE                                    0x1
#define _WPUA_WPUA4_LENGTH                                  0x1
#define _WPUA_WPUA4_MASK                                    0x10
#define _WPUA_WPUA5_POSN                                    0x5
#define _WPUA_WPUA5_POSITION                                0x5
#define _WPUA_WPUA5_SIZE                                    0x1
#define _WPUA_WPUA5_LENGTH                                  0x1
#define _WPUA_WPUA5_MASK                                    0x20

// Register: ODCONA
#define ODCONA ODCONA
extern volatile unsigned char           ODCONA              __at(0x1E8E);
#ifndef _LIB_BUILD
asm("ODCONA equ 01E8Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCA0                  :1;
        unsigned ODCA1                  :1;
        unsigned ODCA2                  :1;
        unsigned                        :1;
        unsigned ODCA4                  :1;
        unsigned ODCA5                  :1;
    };
} ODCONAbits_t;
extern volatile ODCONAbits_t ODCONAbits __at(0x1E8E);
// bitfield macros
#define _ODCONA_ODCA0_POSN                                  0x0
#define _ODCONA_ODCA0_POSITION                              0x0
#define _ODCONA_ODCA0_SIZE                                  0x1
#define _ODCONA_ODCA0_LENGTH                                0x1
#define _ODCONA_ODCA0_MASK                                  0x1
#define _ODCONA_ODCA1_POSN                                  0x1
#define _ODCONA_ODCA1_POSITION                              0x1
#define _ODCONA_ODCA1_SIZE                                  0x1
#define _ODCONA_ODCA1_LENGTH                                0x1
#define _ODCONA_ODCA1_MASK                                  0x2
#define _ODCONA_ODCA2_POSN                                  0x2
#define _ODCONA_ODCA2_POSITION                              0x2
#define _ODCONA_ODCA2_SIZE                                  0x1
#define _ODCONA_ODCA2_LENGTH                                0x1
#define _ODCONA_ODCA2_MASK                                  0x4
#define _ODCONA_ODCA4_POSN                                  0x4
#define _ODCONA_ODCA4_POSITION                              0x4
#define _ODCONA_ODCA4_SIZE                                  0x1
#define _ODCONA_ODCA4_LENGTH                                0x1
#define _ODCONA_ODCA4_MASK                                  0x10
#define _ODCONA_ODCA5_POSN                                  0x5
#define _ODCONA_ODCA5_POSITION                              0x5
#define _ODCONA_ODCA5_SIZE                                  0x1
#define _ODCONA_ODCA5_LENGTH                                0x1
#define _ODCONA_ODCA5_MASK                                  0x20

// Register: SLRCONA
#define SLRCONA SLRCONA
extern volatile unsigned char           SLRCONA             __at(0x1E8F);
#ifndef _LIB_BUILD
asm("SLRCONA equ 01E8Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRA0                  :1;
        unsigned SLRA1                  :1;
        unsigned SLRA2                  :1;
        unsigned                        :1;
        unsigned SLRA4                  :1;
        unsigned SLRA5                  :1;
    };
} SLRCONAbits_t;
extern volatile SLRCONAbits_t SLRCONAbits __at(0x1E8F);
// bitfield macros
#define _SLRCONA_SLRA0_POSN                                 0x0
#define _SLRCONA_SLRA0_POSITION                             0x0
#define _SLRCONA_SLRA0_SIZE                                 0x1
#define _SLRCONA_SLRA0_LENGTH                               0x1
#define _SLRCONA_SLRA0_MASK                                 0x1
#define _SLRCONA_SLRA1_POSN                                 0x1
#define _SLRCONA_SLRA1_POSITION                             0x1
#define _SLRCONA_SLRA1_SIZE                                 0x1
#define _SLRCONA_SLRA1_LENGTH                               0x1
#define _SLRCONA_SLRA1_MASK                                 0x2
#define _SLRCONA_SLRA2_POSN                                 0x2
#define _SLRCONA_SLRA2_POSITION                             0x2
#define _SLRCONA_SLRA2_SIZE                                 0x1
#define _SLRCONA_SLRA2_LENGTH                               0x1
#define _SLRCONA_SLRA2_MASK                                 0x4
#define _SLRCONA_SLRA4_POSN                                 0x4
#define _SLRCONA_SLRA4_POSITION                             0x4
#define _SLRCONA_SLRA4_SIZE                                 0x1
#define _SLRCONA_SLRA4_LENGTH                               0x1
#define _SLRCONA_SLRA4_MASK                                 0x10
#define _SLRCONA_SLRA5_POSN                                 0x5
#define _SLRCONA_SLRA5_POSITION                             0x5
#define _SLRCONA_SLRA5_SIZE                                 0x1
#define _SLRCONA_SLRA5_LENGTH                               0x1
#define _SLRCONA_SLRA5_MASK                                 0x20

// Register: INLVLA
#define INLVLA INLVLA
extern volatile unsigned char           INLVLA              __at(0x1E90);
#ifndef _LIB_BUILD
asm("INLVLA equ 01E90h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLA0                :1;
        unsigned INLVLA1                :1;
        unsigned INLVLA2                :1;
        unsigned INLVLA3                :1;
        unsigned INLVLA4                :1;
        unsigned INLVLA5                :1;
    };
} INLVLAbits_t;
extern volatile INLVLAbits_t INLVLAbits __at(0x1E90);
// bitfield macros
#define _INLVLA_INLVLA0_POSN                                0x0
#define _INLVLA_INLVLA0_POSITION                            0x0
#define _INLVLA_INLVLA0_SIZE                                0x1
#define _INLVLA_INLVLA0_LENGTH                              0x1
#define _INLVLA_INLVLA0_MASK                                0x1
#define _INLVLA_INLVLA1_POSN                                0x1
#define _INLVLA_INLVLA1_POSITION                            0x1
#define _INLVLA_INLVLA1_SIZE                                0x1
#define _INLVLA_INLVLA1_LENGTH                              0x1
#define _INLVLA_INLVLA1_MASK                                0x2
#define _INLVLA_INLVLA2_POSN                                0x2
#define _INLVLA_INLVLA2_POSITION                            0x2
#define _INLVLA_INLVLA2_SIZE                                0x1
#define _INLVLA_INLVLA2_LENGTH                              0x1
#define _INLVLA_INLVLA2_MASK                                0x4
#define _INLVLA_INLVLA3_POSN                                0x3
#define _INLVLA_INLVLA3_POSITION                            0x3
#define _INLVLA_INLVLA3_SIZE                                0x1
#define _INLVLA_INLVLA3_LENGTH                              0x1
#define _INLVLA_INLVLA3_MASK                                0x8
#define _INLVLA_INLVLA4_POSN                                0x4
#define _INLVLA_INLVLA4_POSITION                            0x4
#define _INLVLA_INLVLA4_SIZE                                0x1
#define _INLVLA_INLVLA4_LENGTH                              0x1
#define _INLVLA_INLVLA4_MASK                                0x10
#define _INLVLA_INLVLA5_POSN                                0x5
#define _INLVLA_INLVLA5_POSITION                            0x5
#define _INLVLA_INLVLA5_SIZE                                0x1
#define _INLVLA_INLVLA5_LENGTH                              0x1
#define _INLVLA_INLVLA5_MASK                                0x20

// Register: IOCAP
#define IOCAP IOCAP
extern volatile unsigned char           IOCAP               __at(0x1E91);
#ifndef _LIB_BUILD
asm("IOCAP equ 01E91h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAP0                 :1;
        unsigned IOCAP1                 :1;
        unsigned IOCAP2                 :1;
        unsigned IOCAP3                 :1;
        unsigned IOCAP4                 :1;
        unsigned IOCAP5                 :1;
    };
} IOCAPbits_t;
extern volatile IOCAPbits_t IOCAPbits __at(0x1E91);
// bitfield macros
#define _IOCAP_IOCAP0_POSN                                  0x0
#define _IOCAP_IOCAP0_POSITION                              0x0
#define _IOCAP_IOCAP0_SIZE                                  0x1
#define _IOCAP_IOCAP0_LENGTH                                0x1
#define _IOCAP_IOCAP0_MASK                                  0x1
#define _IOCAP_IOCAP1_POSN                                  0x1
#define _IOCAP_IOCAP1_POSITION                              0x1
#define _IOCAP_IOCAP1_SIZE                                  0x1
#define _IOCAP_IOCAP1_LENGTH                                0x1
#define _IOCAP_IOCAP1_MASK                                  0x2
#define _IOCAP_IOCAP2_POSN                                  0x2
#define _IOCAP_IOCAP2_POSITION                              0x2
#define _IOCAP_IOCAP2_SIZE                                  0x1
#define _IOCAP_IOCAP2_LENGTH                                0x1
#define _IOCAP_IOCAP2_MASK                                  0x4
#define _IOCAP_IOCAP3_POSN                                  0x3
#define _IOCAP_IOCAP3_POSITION                              0x3
#define _IOCAP_IOCAP3_SIZE                                  0x1
#define _IOCAP_IOCAP3_LENGTH                                0x1
#define _IOCAP_IOCAP3_MASK                                  0x8
#define _IOCAP_IOCAP4_POSN                                  0x4
#define _IOCAP_IOCAP4_POSITION                              0x4
#define _IOCAP_IOCAP4_SIZE                                  0x1
#define _IOCAP_IOCAP4_LENGTH                                0x1
#define _IOCAP_IOCAP4_MASK                                  0x10
#define _IOCAP_IOCAP5_POSN                                  0x5
#define _IOCAP_IOCAP5_POSITION                              0x5
#define _IOCAP_IOCAP5_SIZE                                  0x1
#define _IOCAP_IOCAP5_LENGTH                                0x1
#define _IOCAP_IOCAP5_MASK                                  0x20

// Register: IOCAN
#define IOCAN IOCAN
extern volatile unsigned char           IOCAN               __at(0x1E92);
#ifndef _LIB_BUILD
asm("IOCAN equ 01E92h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAN0                 :1;
        unsigned IOCAN1                 :1;
        unsigned IOCAN2                 :1;
        unsigned IOCAN3                 :1;
        unsigned IOCAN4                 :1;
        unsigned IOCAN5                 :1;
    };
} IOCANbits_t;
extern volatile IOCANbits_t IOCANbits __at(0x1E92);
// bitfield macros
#define _IOCAN_IOCAN0_POSN                                  0x0
#define _IOCAN_IOCAN0_POSITION                              0x0
#define _IOCAN_IOCAN0_SIZE                                  0x1
#define _IOCAN_IOCAN0_LENGTH                                0x1
#define _IOCAN_IOCAN0_MASK                                  0x1
#define _IOCAN_IOCAN1_POSN                                  0x1
#define _IOCAN_IOCAN1_POSITION                              0x1
#define _IOCAN_IOCAN1_SIZE                                  0x1
#define _IOCAN_IOCAN1_LENGTH                                0x1
#define _IOCAN_IOCAN1_MASK                                  0x2
#define _IOCAN_IOCAN2_POSN                                  0x2
#define _IOCAN_IOCAN2_POSITION                              0x2
#define _IOCAN_IOCAN2_SIZE                                  0x1
#define _IOCAN_IOCAN2_LENGTH                                0x1
#define _IOCAN_IOCAN2_MASK                                  0x4
#define _IOCAN_IOCAN3_POSN                                  0x3
#define _IOCAN_IOCAN3_POSITION                              0x3
#define _IOCAN_IOCAN3_SIZE                                  0x1
#define _IOCAN_IOCAN3_LENGTH                                0x1
#define _IOCAN_IOCAN3_MASK                                  0x8
#define _IOCAN_IOCAN4_POSN                                  0x4
#define _IOCAN_IOCAN4_POSITION                              0x4
#define _IOCAN_IOCAN4_SIZE                                  0x1
#define _IOCAN_IOCAN4_LENGTH                                0x1
#define _IOCAN_IOCAN4_MASK                                  0x10
#define _IOCAN_IOCAN5_POSN                                  0x5
#define _IOCAN_IOCAN5_POSITION                              0x5
#define _IOCAN_IOCAN5_SIZE                                  0x1
#define _IOCAN_IOCAN5_LENGTH                                0x1
#define _IOCAN_IOCAN5_MASK                                  0x20

// Register: IOCAF
#define IOCAF IOCAF
extern volatile unsigned char           IOCAF               __at(0x1E93);
#ifndef _LIB_BUILD
asm("IOCAF equ 01E93h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAF0                 :1;
        unsigned IOCAF1                 :1;
        unsigned IOCAF2                 :1;
        unsigned IOCAF3                 :1;
        unsigned IOCAF4                 :1;
        unsigned IOCAF5                 :1;
    };
} IOCAFbits_t;
extern volatile IOCAFbits_t IOCAFbits __at(0x1E93);
// bitfield macros
#define _IOCAF_IOCAF0_POSN                                  0x0
#define _IOCAF_IOCAF0_POSITION                              0x0
#define _IOCAF_IOCAF0_SIZE                                  0x1
#define _IOCAF_IOCAF0_LENGTH                                0x1
#define _IOCAF_IOCAF0_MASK                                  0x1
#define _IOCAF_IOCAF1_POSN                                  0x1
#define _IOCAF_IOCAF1_POSITION                              0x1
#define _IOCAF_IOCAF1_SIZE                                  0x1
#define _IOCAF_IOCAF1_LENGTH                                0x1
#define _IOCAF_IOCAF1_MASK                                  0x2
#define _IOCAF_IOCAF2_POSN                                  0x2
#define _IOCAF_IOCAF2_POSITION                              0x2
#define _IOCAF_IOCAF2_SIZE                                  0x1
#define _IOCAF_IOCAF2_LENGTH                                0x1
#define _IOCAF_IOCAF2_MASK                                  0x4
#define _IOCAF_IOCAF3_POSN                                  0x3
#define _IOCAF_IOCAF3_POSITION                              0x3
#define _IOCAF_IOCAF3_SIZE                                  0x1
#define _IOCAF_IOCAF3_LENGTH                                0x1
#define _IOCAF_IOCAF3_MASK                                  0x8
#define _IOCAF_IOCAF4_POSN                                  0x4
#define _IOCAF_IOCAF4_POSITION                              0x4
#define _IOCAF_IOCAF4_SIZE                                  0x1
#define _IOCAF_IOCAF4_LENGTH                                0x1
#define _IOCAF_IOCAF4_MASK                                  0x10
#define _IOCAF_IOCAF5_POSN                                  0x5
#define _IOCAF_IOCAF5_POSITION                              0x5
#define _IOCAF_IOCAF5_SIZE                                  0x1
#define _IOCAF_IOCAF5_LENGTH                                0x1
#define _IOCAF_IOCAF5_MASK                                  0x20

// Register: ANSELC
#define ANSELC ANSELC
extern volatile unsigned char           ANSELC              __at(0x1EA0);
#ifndef _LIB_BUILD
asm("ANSELC equ 01EA0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSELC0                :1;
        unsigned ANSELC1                :1;
        unsigned ANSELC2                :1;
        unsigned ANSELC3                :1;
        unsigned ANSELC4                :1;
        unsigned ANSELC5                :1;
    };
    struct {
        unsigned ANSC0                  :1;
        unsigned ANSC1                  :1;
        unsigned ANSC2                  :1;
        unsigned ANSC3                  :1;
        unsigned ANSC4                  :1;
        unsigned ANSC5                  :1;
        unsigned ANSC6                  :1;
        unsigned ANSC7                  :1;
    };
} ANSELCbits_t;
extern volatile ANSELCbits_t ANSELCbits __at(0x1EA0);
// bitfield macros
#define _ANSELC_ANSELC0_POSN                                0x0
#define _ANSELC_ANSELC0_POSITION                            0x0
#define _ANSELC_ANSELC0_SIZE                                0x1
#define _ANSELC_ANSELC0_LENGTH                              0x1
#define _ANSELC_ANSELC0_MASK                                0x1
#define _ANSELC_ANSELC1_POSN                                0x1
#define _ANSELC_ANSELC1_POSITION                            0x1
#define _ANSELC_ANSELC1_SIZE                                0x1
#define _ANSELC_ANSELC1_LENGTH                              0x1
#define _ANSELC_ANSELC1_MASK                                0x2
#define _ANSELC_ANSELC2_POSN                                0x2
#define _ANSELC_ANSELC2_POSITION                            0x2
#define _ANSELC_ANSELC2_SIZE                                0x1
#define _ANSELC_ANSELC2_LENGTH                              0x1
#define _ANSELC_ANSELC2_MASK                                0x4
#define _ANSELC_ANSELC3_POSN                                0x3
#define _ANSELC_ANSELC3_POSITION                            0x3
#define _ANSELC_ANSELC3_SIZE                                0x1
#define _ANSELC_ANSELC3_LENGTH                              0x1
#define _ANSELC_ANSELC3_MASK                                0x8
#define _ANSELC_ANSELC4_POSN                                0x4
#define _ANSELC_ANSELC4_POSITION                            0x4
#define _ANSELC_ANSELC4_SIZE                                0x1
#define _ANSELC_ANSELC4_LENGTH                              0x1
#define _ANSELC_ANSELC4_MASK                                0x10
#define _ANSELC_ANSELC5_POSN                                0x5
#define _ANSELC_ANSELC5_POSITION                            0x5
#define _ANSELC_ANSELC5_SIZE                                0x1
#define _ANSELC_ANSELC5_LENGTH                              0x1
#define _ANSELC_ANSELC5_MASK                                0x20
#define _ANSELC_ANSC0_POSN                                  0x0
#define _ANSELC_ANSC0_POSITION                              0x0
#define _ANSELC_ANSC0_SIZE                                  0x1
#define _ANSELC_ANSC0_LENGTH                                0x1
#define _ANSELC_ANSC0_MASK                                  0x1
#define _ANSELC_ANSC1_POSN                                  0x1
#define _ANSELC_ANSC1_POSITION                              0x1
#define _ANSELC_ANSC1_SIZE                                  0x1
#define _ANSELC_ANSC1_LENGTH                                0x1
#define _ANSELC_ANSC1_MASK                                  0x2
#define _ANSELC_ANSC2_POSN                                  0x2
#define _ANSELC_ANSC2_POSITION                              0x2
#define _ANSELC_ANSC2_SIZE                                  0x1
#define _ANSELC_ANSC2_LENGTH                                0x1
#define _ANSELC_ANSC2_MASK                                  0x4
#define _ANSELC_ANSC3_POSN                                  0x3
#define _ANSELC_ANSC3_POSITION                              0x3
#define _ANSELC_ANSC3_SIZE                                  0x1
#define _ANSELC_ANSC3_LENGTH                                0x1
#define _ANSELC_ANSC3_MASK                                  0x8
#define _ANSELC_ANSC4_POSN                                  0x4
#define _ANSELC_ANSC4_POSITION                              0x4
#define _ANSELC_ANSC4_SIZE                                  0x1
#define _ANSELC_ANSC4_LENGTH                                0x1
#define _ANSELC_ANSC4_MASK                                  0x10
#define _ANSELC_ANSC5_POSN                                  0x5
#define _ANSELC_ANSC5_POSITION                              0x5
#define _ANSELC_ANSC5_SIZE                                  0x1
#define _ANSELC_ANSC5_LENGTH                                0x1
#define _ANSELC_ANSC5_MASK                                  0x20
#define _ANSELC_ANSC6_POSN                                  0x6
#define _ANSELC_ANSC6_POSITION                              0x6
#define _ANSELC_ANSC6_SIZE                                  0x1
#define _ANSELC_ANSC6_LENGTH                                0x1
#define _ANSELC_ANSC6_MASK                                  0x40
#define _ANSELC_ANSC7_POSN                                  0x7
#define _ANSELC_ANSC7_POSITION                              0x7
#define _ANSELC_ANSC7_SIZE                                  0x1
#define _ANSELC_ANSC7_LENGTH                                0x1
#define _ANSELC_ANSC7_MASK                                  0x80

// Register: WPUC
#define WPUC WPUC
extern volatile unsigned char           WPUC                __at(0x1EA1);
#ifndef _LIB_BUILD
asm("WPUC equ 01EA1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUC0                  :1;
        unsigned WPUC1                  :1;
        unsigned WPUC2                  :1;
        unsigned WPUC3                  :1;
        unsigned WPUC4                  :1;
        unsigned WPUC5                  :1;
    };
} WPUCbits_t;
extern volatile WPUCbits_t WPUCbits __at(0x1EA1);
// bitfield macros
#define _WPUC_WPUC0_POSN                                    0x0
#define _WPUC_WPUC0_POSITION                                0x0
#define _WPUC_WPUC0_SIZE                                    0x1
#define _WPUC_WPUC0_LENGTH                                  0x1
#define _WPUC_WPUC0_MASK                                    0x1
#define _WPUC_WPUC1_POSN                                    0x1
#define _WPUC_WPUC1_POSITION                                0x1
#define _WPUC_WPUC1_SIZE                                    0x1
#define _WPUC_WPUC1_LENGTH                                  0x1
#define _WPUC_WPUC1_MASK                                    0x2
#define _WPUC_WPUC2_POSN                                    0x2
#define _WPUC_WPUC2_POSITION                                0x2
#define _WPUC_WPUC2_SIZE                                    0x1
#define _WPUC_WPUC2_LENGTH                                  0x1
#define _WPUC_WPUC2_MASK                                    0x4
#define _WPUC_WPUC3_POSN                                    0x3
#define _WPUC_WPUC3_POSITION                                0x3
#define _WPUC_WPUC3_SIZE                                    0x1
#define _WPUC_WPUC3_LENGTH                                  0x1
#define _WPUC_WPUC3_MASK                                    0x8
#define _WPUC_WPUC4_POSN                                    0x4
#define _WPUC_WPUC4_POSITION                                0x4
#define _WPUC_WPUC4_SIZE                                    0x1
#define _WPUC_WPUC4_LENGTH                                  0x1
#define _WPUC_WPUC4_MASK                                    0x10
#define _WPUC_WPUC5_POSN                                    0x5
#define _WPUC_WPUC5_POSITION                                0x5
#define _WPUC_WPUC5_SIZE                                    0x1
#define _WPUC_WPUC5_LENGTH                                  0x1
#define _WPUC_WPUC5_MASK                                    0x20

// Register: ODCONC
#define ODCONC ODCONC
extern volatile unsigned char           ODCONC              __at(0x1EA2);
#ifndef _LIB_BUILD
asm("ODCONC equ 01EA2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCC0                  :1;
        unsigned ODCC1                  :1;
        unsigned ODCC2                  :1;
        unsigned ODCC3                  :1;
        unsigned ODCC4                  :1;
        unsigned ODCC5                  :1;
    };
} ODCONCbits_t;
extern volatile ODCONCbits_t ODCONCbits __at(0x1EA2);
// bitfield macros
#define _ODCONC_ODCC0_POSN                                  0x0
#define _ODCONC_ODCC0_POSITION                              0x0
#define _ODCONC_ODCC0_SIZE                                  0x1
#define _ODCONC_ODCC0_LENGTH                                0x1
#define _ODCONC_ODCC0_MASK                                  0x1
#define _ODCONC_ODCC1_POSN                                  0x1
#define _ODCONC_ODCC1_POSITION                              0x1
#define _ODCONC_ODCC1_SIZE                                  0x1
#define _ODCONC_ODCC1_LENGTH                                0x1
#define _ODCONC_ODCC1_MASK                                  0x2
#define _ODCONC_ODCC2_POSN                                  0x2
#define _ODCONC_ODCC2_POSITION                              0x2
#define _ODCONC_ODCC2_SIZE                                  0x1
#define _ODCONC_ODCC2_LENGTH                                0x1
#define _ODCONC_ODCC2_MASK                                  0x4
#define _ODCONC_ODCC3_POSN                                  0x3
#define _ODCONC_ODCC3_POSITION                              0x3
#define _ODCONC_ODCC3_SIZE                                  0x1
#define _ODCONC_ODCC3_LENGTH                                0x1
#define _ODCONC_ODCC3_MASK                                  0x8
#define _ODCONC_ODCC4_POSN                                  0x4
#define _ODCONC_ODCC4_POSITION                              0x4
#define _ODCONC_ODCC4_SIZE                                  0x1
#define _ODCONC_ODCC4_LENGTH                                0x1
#define _ODCONC_ODCC4_MASK                                  0x10
#define _ODCONC_ODCC5_POSN                                  0x5
#define _ODCONC_ODCC5_POSITION                              0x5
#define _ODCONC_ODCC5_SIZE                                  0x1
#define _ODCONC_ODCC5_LENGTH                                0x1
#define _ODCONC_ODCC5_MASK                                  0x20

// Register: SLRCONC
#define SLRCONC SLRCONC
extern volatile unsigned char           SLRCONC             __at(0x1EA3);
#ifndef _LIB_BUILD
asm("SLRCONC equ 01EA3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRC0                  :1;
        unsigned SLRC1                  :1;
        unsigned SLRC2                  :1;
        unsigned SLRC3                  :1;
        unsigned SLRC4                  :1;
        unsigned SLRC5                  :1;
    };
} SLRCONCbits_t;
extern volatile SLRCONCbits_t SLRCONCbits __at(0x1EA3);
// bitfield macros
#define _SLRCONC_SLRC0_POSN                                 0x0
#define _SLRCONC_SLRC0_POSITION                             0x0
#define _SLRCONC_SLRC0_SIZE                                 0x1
#define _SLRCONC_SLRC0_LENGTH                               0x1
#define _SLRCONC_SLRC0_MASK                                 0x1
#define _SLRCONC_SLRC1_POSN                                 0x1
#define _SLRCONC_SLRC1_POSITION                             0x1
#define _SLRCONC_SLRC1_SIZE                                 0x1
#define _SLRCONC_SLRC1_LENGTH                               0x1
#define _SLRCONC_SLRC1_MASK                                 0x2
#define _SLRCONC_SLRC2_POSN                                 0x2
#define _SLRCONC_SLRC2_POSITION                             0x2
#define _SLRCONC_SLRC2_SIZE                                 0x1
#define _SLRCONC_SLRC2_LENGTH                               0x1
#define _SLRCONC_SLRC2_MASK                                 0x4
#define _SLRCONC_SLRC3_POSN                                 0x3
#define _SLRCONC_SLRC3_POSITION                             0x3
#define _SLRCONC_SLRC3_SIZE                                 0x1
#define _SLRCONC_SLRC3_LENGTH                               0x1
#define _SLRCONC_SLRC3_MASK                                 0x8
#define _SLRCONC_SLRC4_POSN                                 0x4
#define _SLRCONC_SLRC4_POSITION                             0x4
#define _SLRCONC_SLRC4_SIZE                                 0x1
#define _SLRCONC_SLRC4_LENGTH                               0x1
#define _SLRCONC_SLRC4_MASK                                 0x10
#define _SLRCONC_SLRC5_POSN                                 0x5
#define _SLRCONC_SLRC5_POSITION                             0x5
#define _SLRCONC_SLRC5_SIZE                                 0x1
#define _SLRCONC_SLRC5_LENGTH                               0x1
#define _SLRCONC_SLRC5_MASK                                 0x20

// Register: INLVLC
#define INLVLC INLVLC
extern volatile unsigned char           INLVLC              __at(0x1EA4);
#ifndef _LIB_BUILD
asm("INLVLC equ 01EA4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLC0                :1;
        unsigned INLVLC1                :1;
        unsigned INLVLC2                :1;
        unsigned INLVLC3                :1;
        unsigned INLVLC4                :1;
        unsigned INLVLC5                :1;
    };
} INLVLCbits_t;
extern volatile INLVLCbits_t INLVLCbits __at(0x1EA4);
// bitfield macros
#define _INLVLC_INLVLC0_POSN                                0x0
#define _INLVLC_INLVLC0_POSITION                            0x0
#define _INLVLC_INLVLC0_SIZE                                0x1
#define _INLVLC_INLVLC0_LENGTH                              0x1
#define _INLVLC_INLVLC0_MASK                                0x1
#define _INLVLC_INLVLC1_POSN                                0x1
#define _INLVLC_INLVLC1_POSITION                            0x1
#define _INLVLC_INLVLC1_SIZE                                0x1
#define _INLVLC_INLVLC1_LENGTH                              0x1
#define _INLVLC_INLVLC1_MASK                                0x2
#define _INLVLC_INLVLC2_POSN                                0x2
#define _INLVLC_INLVLC2_POSITION                            0x2
#define _INLVLC_INLVLC2_SIZE                                0x1
#define _INLVLC_INLVLC2_LENGTH                              0x1
#define _INLVLC_INLVLC2_MASK                                0x4
#define _INLVLC_INLVLC3_POSN                                0x3
#define _INLVLC_INLVLC3_POSITION                            0x3
#define _INLVLC_INLVLC3_SIZE                                0x1
#define _INLVLC_INLVLC3_LENGTH                              0x1
#define _INLVLC_INLVLC3_MASK                                0x8
#define _INLVLC_INLVLC4_POSN                                0x4
#define _INLVLC_INLVLC4_POSITION                            0x4
#define _INLVLC_INLVLC4_SIZE                                0x1
#define _INLVLC_INLVLC4_LENGTH                              0x1
#define _INLVLC_INLVLC4_MASK                                0x10
#define _INLVLC_INLVLC5_POSN                                0x5
#define _INLVLC_INLVLC5_POSITION                            0x5
#define _INLVLC_INLVLC5_SIZE                                0x1
#define _INLVLC_INLVLC5_LENGTH                              0x1
#define _INLVLC_INLVLC5_MASK                                0x20

// Register: IOCCP
#define IOCCP IOCCP
extern volatile unsigned char           IOCCP               __at(0x1EA5);
#ifndef _LIB_BUILD
asm("IOCCP equ 01EA5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCP0                 :1;
        unsigned IOCCP1                 :1;
        unsigned IOCCP2                 :1;
        unsigned IOCCP3                 :1;
        unsigned IOCCP4                 :1;
        unsigned IOCCP5                 :1;
    };
} IOCCPbits_t;
extern volatile IOCCPbits_t IOCCPbits __at(0x1EA5);
// bitfield macros
#define _IOCCP_IOCCP0_POSN                                  0x0
#define _IOCCP_IOCCP0_POSITION                              0x0
#define _IOCCP_IOCCP0_SIZE                                  0x1
#define _IOCCP_IOCCP0_LENGTH                                0x1
#define _IOCCP_IOCCP0_MASK                                  0x1
#define _IOCCP_IOCCP1_POSN                                  0x1
#define _IOCCP_IOCCP1_POSITION                              0x1
#define _IOCCP_IOCCP1_SIZE                                  0x1
#define _IOCCP_IOCCP1_LENGTH                                0x1
#define _IOCCP_IOCCP1_MASK                                  0x2
#define _IOCCP_IOCCP2_POSN                                  0x2
#define _IOCCP_IOCCP2_POSITION                              0x2
#define _IOCCP_IOCCP2_SIZE                                  0x1
#define _IOCCP_IOCCP2_LENGTH                                0x1
#define _IOCCP_IOCCP2_MASK                                  0x4
#define _IOCCP_IOCCP3_POSN                                  0x3
#define _IOCCP_IOCCP3_POSITION                              0x3
#define _IOCCP_IOCCP3_SIZE                                  0x1
#define _IOCCP_IOCCP3_LENGTH                                0x1
#define _IOCCP_IOCCP3_MASK                                  0x8
#define _IOCCP_IOCCP4_POSN                                  0x4
#define _IOCCP_IOCCP4_POSITION                              0x4
#define _IOCCP_IOCCP4_SIZE                                  0x1
#define _IOCCP_IOCCP4_LENGTH                                0x1
#define _IOCCP_IOCCP4_MASK                                  0x10
#define _IOCCP_IOCCP5_POSN                                  0x5
#define _IOCCP_IOCCP5_POSITION                              0x5
#define _IOCCP_IOCCP5_SIZE                                  0x1
#define _IOCCP_IOCCP5_LENGTH                                0x1
#define _IOCCP_IOCCP5_MASK                                  0x20

// Register: IOCCN
#define IOCCN IOCCN
extern volatile unsigned char           IOCCN               __at(0x1EA6);
#ifndef _LIB_BUILD
asm("IOCCN equ 01EA6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCN0                 :1;
        unsigned IOCCN1                 :1;
        unsigned IOCCN2                 :1;
        unsigned IOCCN3                 :1;
        unsigned IOCCN4                 :1;
        unsigned IOCCN5                 :1;
    };
} IOCCNbits_t;
extern volatile IOCCNbits_t IOCCNbits __at(0x1EA6);
// bitfield macros
#define _IOCCN_IOCCN0_POSN                                  0x0
#define _IOCCN_IOCCN0_POSITION                              0x0
#define _IOCCN_IOCCN0_SIZE                                  0x1
#define _IOCCN_IOCCN0_LENGTH                                0x1
#define _IOCCN_IOCCN0_MASK                                  0x1
#define _IOCCN_IOCCN1_POSN                                  0x1
#define _IOCCN_IOCCN1_POSITION                              0x1
#define _IOCCN_IOCCN1_SIZE                                  0x1
#define _IOCCN_IOCCN1_LENGTH                                0x1
#define _IOCCN_IOCCN1_MASK                                  0x2
#define _IOCCN_IOCCN2_POSN                                  0x2
#define _IOCCN_IOCCN2_POSITION                              0x2
#define _IOCCN_IOCCN2_SIZE                                  0x1
#define _IOCCN_IOCCN2_LENGTH                                0x1
#define _IOCCN_IOCCN2_MASK                                  0x4
#define _IOCCN_IOCCN3_POSN                                  0x3
#define _IOCCN_IOCCN3_POSITION                              0x3
#define _IOCCN_IOCCN3_SIZE                                  0x1
#define _IOCCN_IOCCN3_LENGTH                                0x1
#define _IOCCN_IOCCN3_MASK                                  0x8
#define _IOCCN_IOCCN4_POSN                                  0x4
#define _IOCCN_IOCCN4_POSITION                              0x4
#define _IOCCN_IOCCN4_SIZE                                  0x1
#define _IOCCN_IOCCN4_LENGTH                                0x1
#define _IOCCN_IOCCN4_MASK                                  0x10
#define _IOCCN_IOCCN5_POSN                                  0x5
#define _IOCCN_IOCCN5_POSITION                              0x5
#define _IOCCN_IOCCN5_SIZE                                  0x1
#define _IOCCN_IOCCN5_LENGTH                                0x1
#define _IOCCN_IOCCN5_MASK                                  0x20

// Register: IOCCF
#define IOCCF IOCCF
extern volatile unsigned char           IOCCF               __at(0x1EA7);
#ifndef _LIB_BUILD
asm("IOCCF equ 01EA7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCF0                 :1;
        unsigned IOCCF1                 :1;
        unsigned IOCCF2                 :1;
        unsigned IOCCF3                 :1;
        unsigned IOCCF4                 :1;
        unsigned IOCCF5                 :1;
    };
} IOCCFbits_t;
extern volatile IOCCFbits_t IOCCFbits __at(0x1EA7);
// bitfield macros
#define _IOCCF_IOCCF0_POSN                                  0x0
#define _IOCCF_IOCCF0_POSITION                              0x0
#define _IOCCF_IOCCF0_SIZE                                  0x1
#define _IOCCF_IOCCF0_LENGTH                                0x1
#define _IOCCF_IOCCF0_MASK                                  0x1
#define _IOCCF_IOCCF1_POSN                                  0x1
#define _IOCCF_IOCCF1_POSITION                              0x1
#define _IOCCF_IOCCF1_SIZE                                  0x1
#define _IOCCF_IOCCF1_LENGTH                                0x1
#define _IOCCF_IOCCF1_MASK                                  0x2
#define _IOCCF_IOCCF2_POSN                                  0x2
#define _IOCCF_IOCCF2_POSITION                              0x2
#define _IOCCF_IOCCF2_SIZE                                  0x1
#define _IOCCF_IOCCF2_LENGTH                                0x1
#define _IOCCF_IOCCF2_MASK                                  0x4
#define _IOCCF_IOCCF3_POSN                                  0x3
#define _IOCCF_IOCCF3_POSITION                              0x3
#define _IOCCF_IOCCF3_SIZE                                  0x1
#define _IOCCF_IOCCF3_LENGTH                                0x1
#define _IOCCF_IOCCF3_MASK                                  0x8
#define _IOCCF_IOCCF4_POSN                                  0x4
#define _IOCCF_IOCCF4_POSITION                              0x4
#define _IOCCF_IOCCF4_SIZE                                  0x1
#define _IOCCF_IOCCF4_LENGTH                                0x1
#define _IOCCF_IOCCF4_MASK                                  0x10
#define _IOCCF_IOCCF5_POSN                                  0x5
#define _IOCCF_IOCCF5_POSITION                              0x5
#define _IOCCF_IOCCF5_SIZE                                  0x1
#define _IOCCF_IOCCF5_LENGTH                                0x1
#define _IOCCF_IOCCF5_MASK                                  0x20

// Register: RC0I2C
#define RC0I2C RC0I2C
extern volatile unsigned char           RC0I2C              __at(0x1EE9);
#ifndef _LIB_BUILD
asm("RC0I2C equ 01EE9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TH                     :2;
        unsigned                        :2;
        unsigned PU                     :2;
        unsigned SLEW                   :1;
    };
} RC0I2Cbits_t;
extern volatile RC0I2Cbits_t RC0I2Cbits __at(0x1EE9);
// bitfield macros
#define _RC0I2C_TH_POSN                                     0x0
#define _RC0I2C_TH_POSITION                                 0x0
#define _RC0I2C_TH_SIZE                                     0x2
#define _RC0I2C_TH_LENGTH                                   0x2
#define _RC0I2C_TH_MASK                                     0x3
#define _RC0I2C_PU_POSN                                     0x4
#define _RC0I2C_PU_POSITION                                 0x4
#define _RC0I2C_PU_SIZE                                     0x2
#define _RC0I2C_PU_LENGTH                                   0x2
#define _RC0I2C_PU_MASK                                     0x30
#define _RC0I2C_SLEW_POSN                                   0x6
#define _RC0I2C_SLEW_POSITION                               0x6
#define _RC0I2C_SLEW_SIZE                                   0x1
#define _RC0I2C_SLEW_LENGTH                                 0x1
#define _RC0I2C_SLEW_MASK                                   0x40

// Register: RC1I2C
#define RC1I2C RC1I2C
extern volatile unsigned char           RC1I2C              __at(0x1EEA);
#ifndef _LIB_BUILD
asm("RC1I2C equ 01EEAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TH                     :2;
        unsigned                        :2;
        unsigned PU                     :2;
        unsigned SLEW                   :1;
    };
} RC1I2Cbits_t;
extern volatile RC1I2Cbits_t RC1I2Cbits __at(0x1EEA);
// bitfield macros
#define _RC1I2C_TH_POSN                                     0x0
#define _RC1I2C_TH_POSITION                                 0x0
#define _RC1I2C_TH_SIZE                                     0x2
#define _RC1I2C_TH_LENGTH                                   0x2
#define _RC1I2C_TH_MASK                                     0x3
#define _RC1I2C_PU_POSN                                     0x4
#define _RC1I2C_PU_POSITION                                 0x4
#define _RC1I2C_PU_SIZE                                     0x2
#define _RC1I2C_PU_LENGTH                                   0x2
#define _RC1I2C_PU_MASK                                     0x30
#define _RC1I2C_SLEW_POSN                                   0x6
#define _RC1I2C_SLEW_POSITION                               0x6
#define _RC1I2C_SLEW_SIZE                                   0x1
#define _RC1I2C_SLEW_LENGTH                                 0x1
#define _RC1I2C_SLEW_MASK                                   0x40

// Register: UMTOAP
#define UMTOAP UMTOAP
extern volatile unsigned char           UMTOAP              __at(0x1F0C);
#ifndef _LIB_BUILD
asm("UMTOAP equ 01F0Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned UMTOAP                 :8;
    };
} UMTOAPbits_t;
extern volatile UMTOAPbits_t UMTOAPbits __at(0x1F0C);
// bitfield macros
#define _UMTOAP_UMTOAP_POSN                                 0x0
#define _UMTOAP_UMTOAP_POSITION                             0x0
#define _UMTOAP_UMTOAP_SIZE                                 0x8
#define _UMTOAP_UMTOAP_LENGTH                               0x8
#define _UMTOAP_UMTOAP_MASK                                 0xFF

// Register: UMTOAL
#define UMTOAL UMTOAL
extern volatile unsigned char           UMTOAL              __at(0x1F0D);
#ifndef _LIB_BUILD
asm("UMTOAL equ 01F0Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned UMTOAL                 :8;
    };
} UMTOALbits_t;
extern volatile UMTOALbits_t UMTOALbits __at(0x1F0D);
// bitfield macros
#define _UMTOAL_UMTOAL_POSN                                 0x0
#define _UMTOAL_UMTOAL_POSITION                             0x0
#define _UMTOAL_UMTOAL_SIZE                                 0x8
#define _UMTOAL_UMTOAL_LENGTH                               0x8
#define _UMTOAL_UMTOAL_MASK                                 0xFF

// Register: UMTOAH
#define UMTOAH UMTOAH
extern volatile unsigned char           UMTOAH              __at(0x1F0E);
#ifndef _LIB_BUILD
asm("UMTOAH equ 01F0Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned UMTOAH                 :8;
    };
} UMTOAHbits_t;
extern volatile UMTOAHbits_t UMTOAHbits __at(0x1F0E);
// bitfield macros
#define _UMTOAH_UMTOAH_POSN                                 0x0
#define _UMTOAH_UMTOAH_POSITION                             0x0
#define _UMTOAH_UMTOAH_SIZE                                 0x8
#define _UMTOAH_UMTOAH_LENGTH                               0x8
#define _UMTOAH_UMTOAH_MASK                                 0xFF

// Register: STATUS_SHAD
#define STATUS_SHAD STATUS_SHAD
extern volatile unsigned char           STATUS_SHAD         __at(0x1FE4);
#ifndef _LIB_BUILD
asm("STATUS_SHAD equ 01FE4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STATUS_SHAD            :3;
    };
    struct {
        unsigned STATUS_SHAD0           :1;
        unsigned STATUS_SHAD1           :1;
        unsigned STATUS_SHAD2           :1;
    };
} STATUS_SHADbits_t;
extern volatile STATUS_SHADbits_t STATUS_SHADbits __at(0x1FE4);
// bitfield macros
#define _STATUS_SHAD_STATUS_SHAD_POSN                       0x0
#define _STATUS_SHAD_STATUS_SHAD_POSITION                   0x0
#define _STATUS_SHAD_STATUS_SHAD_SIZE                       0x3
#define _STATUS_SHAD_STATUS_SHAD_LENGTH                     0x3
#define _STATUS_SHAD_STATUS_SHAD_MASK                       0x7
#define _STATUS_SHAD_STATUS_SHAD0_POSN                      0x0
#define _STATUS_SHAD_STATUS_SHAD0_POSITION                  0x0
#define _STATUS_SHAD_STATUS_SHAD0_SIZE                      0x1
#define _STATUS_SHAD_STATUS_SHAD0_LENGTH                    0x1
#define _STATUS_SHAD_STATUS_SHAD0_MASK                      0x1
#define _STATUS_SHAD_STATUS_SHAD1_POSN                      0x1
#define _STATUS_SHAD_STATUS_SHAD1_POSITION                  0x1
#define _STATUS_SHAD_STATUS_SHAD1_SIZE                      0x1
#define _STATUS_SHAD_STATUS_SHAD1_LENGTH                    0x1
#define _STATUS_SHAD_STATUS_SHAD1_MASK                      0x2
#define _STATUS_SHAD_STATUS_SHAD2_POSN                      0x2
#define _STATUS_SHAD_STATUS_SHAD2_POSITION                  0x2
#define _STATUS_SHAD_STATUS_SHAD2_SIZE                      0x1
#define _STATUS_SHAD_STATUS_SHAD2_LENGTH                    0x1
#define _STATUS_SHAD_STATUS_SHAD2_MASK                      0x4

// Register: WREG_SHAD
#define WREG_SHAD WREG_SHAD
extern volatile unsigned char           WREG_SHAD           __at(0x1FE5);
#ifndef _LIB_BUILD
asm("WREG_SHAD equ 01FE5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG_SHAD              :8;
    };
} WREG_SHADbits_t;
extern volatile WREG_SHADbits_t WREG_SHADbits __at(0x1FE5);
// bitfield macros
#define _WREG_SHAD_WREG_SHAD_POSN                           0x0
#define _WREG_SHAD_WREG_SHAD_POSITION                       0x0
#define _WREG_SHAD_WREG_SHAD_SIZE                           0x8
#define _WREG_SHAD_WREG_SHAD_LENGTH                         0x8
#define _WREG_SHAD_WREG_SHAD_MASK                           0xFF

// Register: BSR_SHAD
#define BSR_SHAD BSR_SHAD
extern volatile unsigned char           BSR_SHAD            __at(0x1FE6);
#ifndef _LIB_BUILD
asm("BSR_SHAD equ 01FE6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BSR_SHAD               :8;
    };
} BSR_SHADbits_t;
extern volatile BSR_SHADbits_t BSR_SHADbits __at(0x1FE6);
// bitfield macros
#define _BSR_SHAD_BSR_SHAD_POSN                             0x0
#define _BSR_SHAD_BSR_SHAD_POSITION                         0x0
#define _BSR_SHAD_BSR_SHAD_SIZE                             0x8
#define _BSR_SHAD_BSR_SHAD_LENGTH                           0x8
#define _BSR_SHAD_BSR_SHAD_MASK                             0xFF

// Register: PCLATH_SHAD
#define PCLATH_SHAD PCLATH_SHAD
extern volatile unsigned char           PCLATH_SHAD         __at(0x1FE7);
#ifndef _LIB_BUILD
asm("PCLATH_SHAD equ 01FE7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCLATH_SHAD            :8;
    };
} PCLATH_SHADbits_t;
extern volatile PCLATH_SHADbits_t PCLATH_SHADbits __at(0x1FE7);
// bitfield macros
#define _PCLATH_SHAD_PCLATH_SHAD_POSN                       0x0
#define _PCLATH_SHAD_PCLATH_SHAD_POSITION                   0x0
#define _PCLATH_SHAD_PCLATH_SHAD_SIZE                       0x8
#define _PCLATH_SHAD_PCLATH_SHAD_LENGTH                     0x8
#define _PCLATH_SHAD_PCLATH_SHAD_MASK                       0xFF

// Register: FSR0_SHAD
#define FSR0_SHAD FSR0_SHAD
extern volatile unsigned short          FSR0_SHAD           __at(0x1FE8);
#ifndef _LIB_BUILD
asm("FSR0_SHAD equ 01FE8h");
#endif

// Register: FSR0L_SHAD
#define FSR0L_SHAD FSR0L_SHAD
extern volatile unsigned char           FSR0L_SHAD          __at(0x1FE8);
#ifndef _LIB_BUILD
asm("FSR0L_SHAD equ 01FE8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L_SHAD             :8;
    };
} FSR0L_SHADbits_t;
extern volatile FSR0L_SHADbits_t FSR0L_SHADbits __at(0x1FE8);
// bitfield macros
#define _FSR0L_SHAD_FSR0L_SHAD_POSN                         0x0
#define _FSR0L_SHAD_FSR0L_SHAD_POSITION                     0x0
#define _FSR0L_SHAD_FSR0L_SHAD_SIZE                         0x8
#define _FSR0L_SHAD_FSR0L_SHAD_LENGTH                       0x8
#define _FSR0L_SHAD_FSR0L_SHAD_MASK                         0xFF

// Register: FSR0H_SHAD
#define FSR0H_SHAD FSR0H_SHAD
extern volatile unsigned char           FSR0H_SHAD          __at(0x1FE9);
#ifndef _LIB_BUILD
asm("FSR0H_SHAD equ 01FE9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0H_SHAD             :8;
    };
} FSR0H_SHADbits_t;
extern volatile FSR0H_SHADbits_t FSR0H_SHADbits __at(0x1FE9);
// bitfield macros
#define _FSR0H_SHAD_FSR0H_SHAD_POSN                         0x0
#define _FSR0H_SHAD_FSR0H_SHAD_POSITION                     0x0
#define _FSR0H_SHAD_FSR0H_SHAD_SIZE                         0x8
#define _FSR0H_SHAD_FSR0H_SHAD_LENGTH                       0x8
#define _FSR0H_SHAD_FSR0H_SHAD_MASK                         0xFF

// Register: FSR1_SHAD
#define FSR1_SHAD FSR1_SHAD
extern volatile unsigned short          FSR1_SHAD           __at(0x1FEA);
#ifndef _LIB_BUILD
asm("FSR1_SHAD equ 01FEAh");
#endif

// Register: FSR1L_SHAD
#define FSR1L_SHAD FSR1L_SHAD
extern volatile unsigned char           FSR1L_SHAD          __at(0x1FEA);
#ifndef _LIB_BUILD
asm("FSR1L_SHAD equ 01FEAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L_SHAD             :8;
    };
} FSR1L_SHADbits_t;
extern volatile FSR1L_SHADbits_t FSR1L_SHADbits __at(0x1FEA);
// bitfield macros
#define _FSR1L_SHAD_FSR1L_SHAD_POSN                         0x0
#define _FSR1L_SHAD_FSR1L_SHAD_POSITION                     0x0
#define _FSR1L_SHAD_FSR1L_SHAD_SIZE                         0x8
#define _FSR1L_SHAD_FSR1L_SHAD_LENGTH                       0x8
#define _FSR1L_SHAD_FSR1L_SHAD_MASK                         0xFF

// Register: FSR1H_SHAD
#define FSR1H_SHAD FSR1H_SHAD
extern volatile unsigned char           FSR1H_SHAD          __at(0x1FEB);
#ifndef _LIB_BUILD
asm("FSR1H_SHAD equ 01FEBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1H_SHAD             :8;
    };
} FSR1H_SHADbits_t;
extern volatile FSR1H_SHADbits_t FSR1H_SHADbits __at(0x1FEB);
// bitfield macros
#define _FSR1H_SHAD_FSR1H_SHAD_POSN                         0x0
#define _FSR1H_SHAD_FSR1H_SHAD_POSITION                     0x0
#define _FSR1H_SHAD_FSR1H_SHAD_SIZE                         0x8
#define _FSR1H_SHAD_FSR1H_SHAD_LENGTH                       0x8
#define _FSR1H_SHAD_FSR1H_SHAD_MASK                         0xFF

// Register: STKPTR
#define STKPTR STKPTR
extern volatile unsigned char           STKPTR              __at(0x1FED);
#ifndef _LIB_BUILD
asm("STKPTR equ 01FEDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STKPTR0                :1;
        unsigned STKPTR1                :1;
        unsigned STKPTR2                :1;
        unsigned STKPTR3                :1;
        unsigned STKPTR4                :1;
    };
} STKPTRbits_t;
extern volatile STKPTRbits_t STKPTRbits __at(0x1FED);
// bitfield macros
#define _STKPTR_STKPTR0_POSN                                0x0
#define _STKPTR_STKPTR0_POSITION                            0x0
#define _STKPTR_STKPTR0_SIZE                                0x1
#define _STKPTR_STKPTR0_LENGTH                              0x1
#define _STKPTR_STKPTR0_MASK                                0x1
#define _STKPTR_STKPTR1_POSN                                0x1
#define _STKPTR_STKPTR1_POSITION                            0x1
#define _STKPTR_STKPTR1_SIZE                                0x1
#define _STKPTR_STKPTR1_LENGTH                              0x1
#define _STKPTR_STKPTR1_MASK                                0x2
#define _STKPTR_STKPTR2_POSN                                0x2
#define _STKPTR_STKPTR2_POSITION                            0x2
#define _STKPTR_STKPTR2_SIZE                                0x1
#define _STKPTR_STKPTR2_LENGTH                              0x1
#define _STKPTR_STKPTR2_MASK                                0x4
#define _STKPTR_STKPTR3_POSN                                0x3
#define _STKPTR_STKPTR3_POSITION                            0x3
#define _STKPTR_STKPTR3_SIZE                                0x1
#define _STKPTR_STKPTR3_LENGTH                              0x1
#define _STKPTR_STKPTR3_MASK                                0x8
#define _STKPTR_STKPTR4_POSN                                0x4
#define _STKPTR_STKPTR4_POSITION                            0x4
#define _STKPTR_STKPTR4_SIZE                                0x1
#define _STKPTR_STKPTR4_LENGTH                              0x1
#define _STKPTR_STKPTR4_MASK                                0x10

// Register: TOSL
#define TOSL TOSL
extern volatile unsigned char           TOSL                __at(0x1FEE);
#ifndef _LIB_BUILD
asm("TOSL equ 01FEEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSL                   :8;
    };
    struct {
        unsigned TOSL0                  :1;
        unsigned TOSL1                  :1;
        unsigned TOSL2                  :1;
        unsigned TOSL3                  :1;
        unsigned TOSL4                  :1;
        unsigned TOSL5                  :1;
        unsigned TOSL6                  :1;
        unsigned TOSL7                  :1;
    };
} TOSLbits_t;
extern volatile TOSLbits_t TOSLbits __at(0x1FEE);
// bitfield macros
#define _TOSL_TOSL_POSN                                     0x0
#define _TOSL_TOSL_POSITION                                 0x0
#define _TOSL_TOSL_SIZE                                     0x8
#define _TOSL_TOSL_LENGTH                                   0x8
#define _TOSL_TOSL_MASK                                     0xFF
#define _TOSL_TOSL0_POSN                                    0x0
#define _TOSL_TOSL0_POSITION                                0x0
#define _TOSL_TOSL0_SIZE                                    0x1
#define _TOSL_TOSL0_LENGTH                                  0x1
#define _TOSL_TOSL0_MASK                                    0x1
#define _TOSL_TOSL1_POSN                                    0x1
#define _TOSL_TOSL1_POSITION                                0x1
#define _TOSL_TOSL1_SIZE                                    0x1
#define _TOSL_TOSL1_LENGTH                                  0x1
#define _TOSL_TOSL1_MASK                                    0x2
#define _TOSL_TOSL2_POSN                                    0x2
#define _TOSL_TOSL2_POSITION                                0x2
#define _TOSL_TOSL2_SIZE                                    0x1
#define _TOSL_TOSL2_LENGTH                                  0x1
#define _TOSL_TOSL2_MASK                                    0x4
#define _TOSL_TOSL3_POSN                                    0x3
#define _TOSL_TOSL3_POSITION                                0x3
#define _TOSL_TOSL3_SIZE                                    0x1
#define _TOSL_TOSL3_LENGTH                                  0x1
#define _TOSL_TOSL3_MASK                                    0x8
#define _TOSL_TOSL4_POSN                                    0x4
#define _TOSL_TOSL4_POSITION                                0x4
#define _TOSL_TOSL4_SIZE                                    0x1
#define _TOSL_TOSL4_LENGTH                                  0x1
#define _TOSL_TOSL4_MASK                                    0x10
#define _TOSL_TOSL5_POSN                                    0x5
#define _TOSL_TOSL5_POSITION                                0x5
#define _TOSL_TOSL5_SIZE                                    0x1
#define _TOSL_TOSL5_LENGTH                                  0x1
#define _TOSL_TOSL5_MASK                                    0x20
#define _TOSL_TOSL6_POSN                                    0x6
#define _TOSL_TOSL6_POSITION                                0x6
#define _TOSL_TOSL6_SIZE                                    0x1
#define _TOSL_TOSL6_LENGTH                                  0x1
#define _TOSL_TOSL6_MASK                                    0x40
#define _TOSL_TOSL7_POSN                                    0x7
#define _TOSL_TOSL7_POSITION                                0x7
#define _TOSL_TOSL7_SIZE                                    0x1
#define _TOSL_TOSL7_LENGTH                                  0x1
#define _TOSL_TOSL7_MASK                                    0x80

// Register: TOSH
#define TOSH TOSH
extern volatile unsigned char           TOSH                __at(0x1FEF);
#ifndef _LIB_BUILD
asm("TOSH equ 01FEFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSH                   :8;
    };
    struct {
        unsigned TOSH0                  :1;
        unsigned TOSH1                  :1;
        unsigned TOSH2                  :1;
        unsigned TOSH3                  :1;
        unsigned TOSH4                  :1;
        unsigned TOSH5                  :1;
        unsigned TOSH6                  :1;
        unsigned TOSH7                  :1;
    };
} TOSHbits_t;
extern volatile TOSHbits_t TOSHbits __at(0x1FEF);
// bitfield macros
#define _TOSH_TOSH_POSN                                     0x0
#define _TOSH_TOSH_POSITION                                 0x0
#define _TOSH_TOSH_SIZE                                     0x8
#define _TOSH_TOSH_LENGTH                                   0x8
#define _TOSH_TOSH_MASK                                     0xFF
#define _TOSH_TOSH0_POSN                                    0x0
#define _TOSH_TOSH0_POSITION                                0x0
#define _TOSH_TOSH0_SIZE                                    0x1
#define _TOSH_TOSH0_LENGTH                                  0x1
#define _TOSH_TOSH0_MASK                                    0x1
#define _TOSH_TOSH1_POSN                                    0x1
#define _TOSH_TOSH1_POSITION                                0x1
#define _TOSH_TOSH1_SIZE                                    0x1
#define _TOSH_TOSH1_LENGTH                                  0x1
#define _TOSH_TOSH1_MASK                                    0x2
#define _TOSH_TOSH2_POSN                                    0x2
#define _TOSH_TOSH2_POSITION                                0x2
#define _TOSH_TOSH2_SIZE                                    0x1
#define _TOSH_TOSH2_LENGTH                                  0x1
#define _TOSH_TOSH2_MASK                                    0x4
#define _TOSH_TOSH3_POSN                                    0x3
#define _TOSH_TOSH3_POSITION                                0x3
#define _TOSH_TOSH3_SIZE                                    0x1
#define _TOSH_TOSH3_LENGTH                                  0x1
#define _TOSH_TOSH3_MASK                                    0x8
#define _TOSH_TOSH4_POSN                                    0x4
#define _TOSH_TOSH4_POSITION                                0x4
#define _TOSH_TOSH4_SIZE                                    0x1
#define _TOSH_TOSH4_LENGTH                                  0x1
#define _TOSH_TOSH4_MASK                                    0x10
#define _TOSH_TOSH5_POSN                                    0x5
#define _TOSH_TOSH5_POSITION                                0x5
#define _TOSH_TOSH5_SIZE                                    0x1
#define _TOSH_TOSH5_LENGTH                                  0x1
#define _TOSH_TOSH5_MASK                                    0x20
#define _TOSH_TOSH6_POSN                                    0x6
#define _TOSH_TOSH6_POSITION                                0x6
#define _TOSH_TOSH6_SIZE                                    0x1
#define _TOSH_TOSH6_LENGTH                                  0x1
#define _TOSH_TOSH6_MASK                                    0x40
#define _TOSH_TOSH7_POSN                                    0x7
#define _TOSH_TOSH7_POSITION                                0x7
#define _TOSH_TOSH7_SIZE                                    0x1
#define _TOSH_TOSH7_LENGTH                                  0x1
#define _TOSH_TOSH7_MASK                                    0x80

/*
 * Device Information Area (DIA) Table
 */

#define DIA_MUI                                             0x8100
#define DIA_MUI0                                            0x8100
#define DIA_MUI1                                            0x8101
#define DIA_MUI2                                            0x8102
#define DIA_MUI3                                            0x8103
#define DIA_MUI4                                            0x8104
#define DIA_MUI5                                            0x8105
#define DIA_MUI6                                            0x8106
#define DIA_MUI7                                            0x8107
#define DIA_MUI8                                            0x8108
#define DIA_MUI9                                            0x8109

#define DIA_EUI                                             0x810A
#define DIA_EUI0                                            0x810A
#define DIA_EUI1                                            0x810B
#define DIA_EUI2                                            0x810C
#define DIA_EUI3                                            0x810D
#define DIA_EUI4                                            0x810E
#define DIA_EUI5                                            0x810F
#define DIA_EUI6                                            0x8110
#define DIA_EUI7                                            0x8111

#define DIA_TSLR                                            0x8112
#define DIA_TSLR1                                           0x8112
#define DIA_TSLR2                                           0x8113
#define DIA_TSLR3                                           0x8114

#define DIA_TSHR                                            0x8115
#define DIA_TSHR1                                           0x8115
#define DIA_TSHR2                                           0x8116
#define DIA_TSHR3                                           0x8117

#define DIA_FVRA                                            0x8118
#define DIA_FVRA1X                                          0x8118
#define DIA_FVRA2X                                          0x8119
#define DIA_FVRA4X                                          0x811A

#define DIA_FVRC                                            0x811B
#define DIA_FVRC1X                                          0x811B
#define DIA_FVRC2X                                          0x811C
#define DIA_FVRC4X                                          0x811D

/*
 * Device Configuration Information (DCI) Table
 */

#define DCI_ERSIZ                                           0x8200
#define DCI_WLSIZ                                           0x8201
#define DCI_URSIZ                                           0x8202
#define DCI_EESIZ                                           0x8203
#define DCI_PCNT                                            0x8204

/*
 * Bit Definitions
 */
#define _DEPRECATED __attribute__((__deprecated__))
#ifndef BANKMASK
#define BANKMASK(addr) ((addr)&07Fh)
#endif
#define _BIT_ACCESS(r,b) ___mkstr(BANKMASK(r)) "," ___mkstr(b)
#ifndef PAGEMASK
#define PAGEMASK(addr) ((addr)&07FFh)
#endif
// BAUD1CON<ABDEN>
extern volatile __bit                   ABDEN               __at(0x3890);	// @ (0x712 * 8 + 0)
#define                                 ABDEN_bit           _BIT_ACCESS(BAUD1CON,0)
// BAUD1CON<ABDOVF>
extern volatile __bit                   ABDOVF              __at(0x3897);	// @ (0x712 * 8 + 7)
#define                                 ABDOVF_bit          _BIT_ACCESS(BAUD1CON,7)
// ADACCL<ACC0>
extern volatile __bit                   ACC0                __at(0xE8B0);	// @ (0x1D16 * 8 + 0)
#define                                 ACC0_bit            _BIT_ACCESS(ADACCL,0)
// ADACCL<ACC1>
extern volatile __bit                   ACC1                __at(0xE8B1);	// @ (0x1D16 * 8 + 1)
#define                                 ACC1_bit            _BIT_ACCESS(ADACCL,1)
// ADACCH<ACC10>
extern volatile __bit                   ACC10               __at(0xE8BA);	// @ (0x1D17 * 8 + 2)
#define                                 ACC10_bit           _BIT_ACCESS(ADACCH,2)
// ADACCH<ACC11>
extern volatile __bit                   ACC11               __at(0xE8BB);	// @ (0x1D17 * 8 + 3)
#define                                 ACC11_bit           _BIT_ACCESS(ADACCH,3)
// ADACCH<ACC12>
extern volatile __bit                   ACC12               __at(0xE8BC);	// @ (0x1D17 * 8 + 4)
#define                                 ACC12_bit           _BIT_ACCESS(ADACCH,4)
// ADACCH<ACC13>
extern volatile __bit                   ACC13               __at(0xE8BD);	// @ (0x1D17 * 8 + 5)
#define                                 ACC13_bit           _BIT_ACCESS(ADACCH,5)
// ADACCH<ACC14>
extern volatile __bit                   ACC14               __at(0xE8BE);	// @ (0x1D17 * 8 + 6)
#define                                 ACC14_bit           _BIT_ACCESS(ADACCH,6)
// ADACCH<ACC15>
extern volatile __bit                   ACC15               __at(0xE8BF);	// @ (0x1D17 * 8 + 7)
#define                                 ACC15_bit           _BIT_ACCESS(ADACCH,7)
// ADACCU<ACC16>
extern volatile __bit                   ACC16               __at(0xE8C0);	// @ (0x1D18 * 8 + 0)
#define                                 ACC16_bit           _BIT_ACCESS(ADACCU,0)
// ADACCU<ACC17>
extern volatile __bit                   ACC17               __at(0xE8C1);	// @ (0x1D18 * 8 + 1)
#define                                 ACC17_bit           _BIT_ACCESS(ADACCU,1)
// ADACCL<ACC2>
extern volatile __bit                   ACC2                __at(0xE8B2);	// @ (0x1D16 * 8 + 2)
#define                                 ACC2_bit            _BIT_ACCESS(ADACCL,2)
// ADACCL<ACC3>
extern volatile __bit                   ACC3                __at(0xE8B3);	// @ (0x1D16 * 8 + 3)
#define                                 ACC3_bit            _BIT_ACCESS(ADACCL,3)
// ADACCL<ACC4>
extern volatile __bit                   ACC4                __at(0xE8B4);	// @ (0x1D16 * 8 + 4)
#define                                 ACC4_bit            _BIT_ACCESS(ADACCL,4)
// ADACCL<ACC5>
extern volatile __bit                   ACC5                __at(0xE8B5);	// @ (0x1D16 * 8 + 5)
#define                                 ACC5_bit            _BIT_ACCESS(ADACCL,5)
// ADACCL<ACC6>
extern volatile __bit                   ACC6                __at(0xE8B6);	// @ (0x1D16 * 8 + 6)
#define                                 ACC6_bit            _BIT_ACCESS(ADACCL,6)
// ADACCL<ACC7>
extern volatile __bit                   ACC7                __at(0xE8B7);	// @ (0x1D16 * 8 + 7)
#define                                 ACC7_bit            _BIT_ACCESS(ADACCL,7)
// ADACCH<ACC8>
extern volatile __bit                   ACC8                __at(0xE8B8);	// @ (0x1D17 * 8 + 0)
#define                                 ACC8_bit            _BIT_ACCESS(ADACCH,0)
// ADACCH<ACC9>
extern volatile __bit                   ACC9                __at(0xE8B9);	// @ (0x1D17 * 8 + 1)
#define                                 ACC9_bit            _BIT_ACCESS(ADACCH,1)
// CRCCON0<ACCM>
extern volatile __bit                   ACCM                __at(0xE52C);	// @ (0x1CA5 * 8 + 4)
#define                                 ACCM_bit            _BIT_ACCESS(CRCCON0,4)
// CRCCON0<ACCMOD>
extern volatile __bit                   ACCMOD              __at(0xE52C);	// @ (0x1CA5 * 8 + 4)
#define                                 ACCMOD_bit          _BIT_ACCESS(CRCCON0,4)
// SSP1CON2<ACKDT>
extern volatile __bit                   ACKDT               __at(0x3C8D);	// @ (0x791 * 8 + 5)
#define                                 ACKDT_bit           _BIT_ACCESS(SSP1CON2,5)
// SSP1CON2<ACKDT1>
extern volatile __bit                   ACKDT1              __at(0x3C8D);	// @ (0x791 * 8 + 5)
#define                                 ACKDT1_bit          _BIT_ACCESS(SSP1CON2,5)
// SSP1CON2<ACKEN>
extern volatile __bit                   ACKEN               __at(0x3C8C);	// @ (0x791 * 8 + 4)
#define                                 ACKEN_bit           _BIT_ACCESS(SSP1CON2,4)
// SSP1CON2<ACKEN1>
extern volatile __bit                   ACKEN1              __at(0x3C8C);	// @ (0x791 * 8 + 4)
#define                                 ACKEN1_bit          _BIT_ACCESS(SSP1CON2,4)
// SSP1CON2<ACKSTAT>
extern volatile __bit                   ACKSTAT             __at(0x3C8E);	// @ (0x791 * 8 + 6)
#define                                 ACKSTAT_bit         _BIT_ACCESS(SSP1CON2,6)
// SSP1CON2<ACKSTAT1>
extern volatile __bit                   ACKSTAT1            __at(0x3C8E);	// @ (0x791 * 8 + 6)
#define                                 ACKSTAT1_bit        _BIT_ACCESS(SSP1CON2,6)
// SSP1CON3<ACKTIM>
extern volatile __bit                   ACKTIM              __at(0x3C97);	// @ (0x792 * 8 + 7)
#define                                 ACKTIM_bit          _BIT_ACCESS(SSP1CON3,7)
// ADCON2<ACLR>
extern volatile __bit                   ACLR                __at(0xE943);	// @ (0x1D28 * 8 + 3)
#define                                 ACLR_bit            _BIT_ACCESS(ADCON2,3)
// ADACQL<ACQ0>
extern volatile __bit                   ACQ0                __at(0xE908);	// @ (0x1D21 * 8 + 0)
#define                                 ACQ0_bit            _BIT_ACCESS(ADACQL,0)
// ADACQL<ACQ1>
extern volatile __bit                   ACQ1                __at(0xE909);	// @ (0x1D21 * 8 + 1)
#define                                 ACQ1_bit            _BIT_ACCESS(ADACQL,1)
// ADACQH<ACQ10>
extern volatile __bit                   ACQ10               __at(0xE912);	// @ (0x1D22 * 8 + 2)
#define                                 ACQ10_bit           _BIT_ACCESS(ADACQH,2)
// ADACQH<ACQ11>
extern volatile __bit                   ACQ11               __at(0xE913);	// @ (0x1D22 * 8 + 3)
#define                                 ACQ11_bit           _BIT_ACCESS(ADACQH,3)
// ADACQH<ACQ12>
extern volatile __bit                   ACQ12               __at(0xE914);	// @ (0x1D22 * 8 + 4)
#define                                 ACQ12_bit           _BIT_ACCESS(ADACQH,4)
// ADACQL<ACQ2>
extern volatile __bit                   ACQ2                __at(0xE90A);	// @ (0x1D21 * 8 + 2)
#define                                 ACQ2_bit            _BIT_ACCESS(ADACQL,2)
// ADACQL<ACQ3>
extern volatile __bit                   ACQ3                __at(0xE90B);	// @ (0x1D21 * 8 + 3)
#define                                 ACQ3_bit            _BIT_ACCESS(ADACQL,3)
// ADACQL<ACQ4>
extern volatile __bit                   ACQ4                __at(0xE90C);	// @ (0x1D21 * 8 + 4)
#define                                 ACQ4_bit            _BIT_ACCESS(ADACQL,4)
// ADACQL<ACQ5>
extern volatile __bit                   ACQ5                __at(0xE90D);	// @ (0x1D21 * 8 + 5)
#define                                 ACQ5_bit            _BIT_ACCESS(ADACQL,5)
// ADACQL<ACQ6>
extern volatile __bit                   ACQ6                __at(0xE90E);	// @ (0x1D21 * 8 + 6)
#define                                 ACQ6_bit            _BIT_ACCESS(ADACQL,6)
// ADACQL<ACQ7>
extern volatile __bit                   ACQ7                __at(0xE90F);	// @ (0x1D21 * 8 + 7)
#define                                 ACQ7_bit            _BIT_ACCESS(ADACQL,7)
// ADACQH<ACQ8>
extern volatile __bit                   ACQ8                __at(0xE910);	// @ (0x1D22 * 8 + 0)
#define                                 ACQ8_bit            _BIT_ACCESS(ADACQH,0)
// ADACQH<ACQ9>
extern volatile __bit                   ACQ9                __at(0xE911);	// @ (0x1D22 * 8 + 1)
#define                                 ACQ9_bit            _BIT_ACCESS(ADACQH,1)
// ADACT<ACT0>
extern volatile __bit                   ACT0                __at(0xE960);	// @ (0x1D2C * 8 + 0)
#define                                 ACT0_bit            _BIT_ACCESS(ADACT,0)
// ADACT<ACT1>
extern volatile __bit                   ACT1                __at(0xE961);	// @ (0x1D2C * 8 + 1)
#define                                 ACT1_bit            _BIT_ACCESS(ADACT,1)
// ADACT<ACT2>
extern volatile __bit                   ACT2                __at(0xE962);	// @ (0x1D2C * 8 + 2)
#define                                 ACT2_bit            _BIT_ACCESS(ADACT,2)
// ADACT<ACT3>
extern volatile __bit                   ACT3                __at(0xE963);	// @ (0x1D2C * 8 + 3)
#define                                 ACT3_bit            _BIT_ACCESS(ADACT,3)
// ADACT<ACT4>
extern volatile __bit                   ACT4                __at(0xE964);	// @ (0x1D2C * 8 + 4)
#define                                 ACT4_bit            _BIT_ACCESS(ADACT,4)
// ADACT<ACT5>
extern volatile __bit                   ACT5                __at(0xE965);	// @ (0x1D2C * 8 + 5)
#define                                 ACT5_bit            _BIT_ACCESS(ADACT,5)
// ADACCL<ADACC0>
extern volatile __bit                   ADACC0              __at(0xE8B0);	// @ (0x1D16 * 8 + 0)
#define                                 ADACC0_bit          _BIT_ACCESS(ADACCL,0)
// ADACCL<ADACC1>
extern volatile __bit                   ADACC1              __at(0xE8B1);	// @ (0x1D16 * 8 + 1)
#define                                 ADACC1_bit          _BIT_ACCESS(ADACCL,1)
// ADACCH<ADACC10>
extern volatile __bit                   ADACC10             __at(0xE8BA);	// @ (0x1D17 * 8 + 2)
#define                                 ADACC10_bit         _BIT_ACCESS(ADACCH,2)
// ADACCH<ADACC11>
extern volatile __bit                   ADACC11             __at(0xE8BB);	// @ (0x1D17 * 8 + 3)
#define                                 ADACC11_bit         _BIT_ACCESS(ADACCH,3)
// ADACCH<ADACC12>
extern volatile __bit                   ADACC12             __at(0xE8BC);	// @ (0x1D17 * 8 + 4)
#define                                 ADACC12_bit         _BIT_ACCESS(ADACCH,4)
// ADACCH<ADACC13>
extern volatile __bit                   ADACC13             __at(0xE8BD);	// @ (0x1D17 * 8 + 5)
#define                                 ADACC13_bit         _BIT_ACCESS(ADACCH,5)
// ADACCH<ADACC14>
extern volatile __bit                   ADACC14             __at(0xE8BE);	// @ (0x1D17 * 8 + 6)
#define                                 ADACC14_bit         _BIT_ACCESS(ADACCH,6)
// ADACCH<ADACC15>
extern volatile __bit                   ADACC15             __at(0xE8BF);	// @ (0x1D17 * 8 + 7)
#define                                 ADACC15_bit         _BIT_ACCESS(ADACCH,7)
// ADACCU<ADACC16>
extern volatile __bit                   ADACC16             __at(0xE8C0);	// @ (0x1D18 * 8 + 0)
#define                                 ADACC16_bit         _BIT_ACCESS(ADACCU,0)
// ADACCU<ADACC17>
extern volatile __bit                   ADACC17             __at(0xE8C1);	// @ (0x1D18 * 8 + 1)
#define                                 ADACC17_bit         _BIT_ACCESS(ADACCU,1)
// ADACCL<ADACC2>
extern volatile __bit                   ADACC2              __at(0xE8B2);	// @ (0x1D16 * 8 + 2)
#define                                 ADACC2_bit          _BIT_ACCESS(ADACCL,2)
// ADACCL<ADACC3>
extern volatile __bit                   ADACC3              __at(0xE8B3);	// @ (0x1D16 * 8 + 3)
#define                                 ADACC3_bit          _BIT_ACCESS(ADACCL,3)
// ADACCL<ADACC4>
extern volatile __bit                   ADACC4              __at(0xE8B4);	// @ (0x1D16 * 8 + 4)
#define                                 ADACC4_bit          _BIT_ACCESS(ADACCL,4)
// ADACCL<ADACC5>
extern volatile __bit                   ADACC5              __at(0xE8B5);	// @ (0x1D16 * 8 + 5)
#define                                 ADACC5_bit          _BIT_ACCESS(ADACCL,5)
// ADACCL<ADACC6>
extern volatile __bit                   ADACC6              __at(0xE8B6);	// @ (0x1D16 * 8 + 6)
#define                                 ADACC6_bit          _BIT_ACCESS(ADACCL,6)
// ADACCL<ADACC7>
extern volatile __bit                   ADACC7              __at(0xE8B7);	// @ (0x1D16 * 8 + 7)
#define                                 ADACC7_bit          _BIT_ACCESS(ADACCL,7)
// ADACCH<ADACC8>
extern volatile __bit                   ADACC8              __at(0xE8B8);	// @ (0x1D17 * 8 + 0)
#define                                 ADACC8_bit          _BIT_ACCESS(ADACCH,0)
// ADACCH<ADACC9>
extern volatile __bit                   ADACC9              __at(0xE8B9);	// @ (0x1D17 * 8 + 1)
#define                                 ADACC9_bit          _BIT_ACCESS(ADACCH,1)
// ADCON2<ADACLR>
extern volatile __bit                   ADACLR              __at(0xE943);	// @ (0x1D28 * 8 + 3)
#define                                 ADACLR_bit          _BIT_ACCESS(ADCON2,3)
// ADACQL<ADACQ0>
extern volatile __bit                   ADACQ0              __at(0xE908);	// @ (0x1D21 * 8 + 0)
#define                                 ADACQ0_bit          _BIT_ACCESS(ADACQL,0)
// ADACQL<ADACQ1>
extern volatile __bit                   ADACQ1              __at(0xE909);	// @ (0x1D21 * 8 + 1)
#define                                 ADACQ1_bit          _BIT_ACCESS(ADACQL,1)
// ADACQH<ADACQ10>
extern volatile __bit                   ADACQ10             __at(0xE912);	// @ (0x1D22 * 8 + 2)
#define                                 ADACQ10_bit         _BIT_ACCESS(ADACQH,2)
// ADACQH<ADACQ11>
extern volatile __bit                   ADACQ11             __at(0xE913);	// @ (0x1D22 * 8 + 3)
#define                                 ADACQ11_bit         _BIT_ACCESS(ADACQH,3)
// ADACQH<ADACQ12>
extern volatile __bit                   ADACQ12             __at(0xE914);	// @ (0x1D22 * 8 + 4)
#define                                 ADACQ12_bit         _BIT_ACCESS(ADACQH,4)
// ADACQL<ADACQ2>
extern volatile __bit                   ADACQ2              __at(0xE90A);	// @ (0x1D21 * 8 + 2)
#define                                 ADACQ2_bit          _BIT_ACCESS(ADACQL,2)
// ADACQL<ADACQ3>
extern volatile __bit                   ADACQ3              __at(0xE90B);	// @ (0x1D21 * 8 + 3)
#define                                 ADACQ3_bit          _BIT_ACCESS(ADACQL,3)
// ADACQL<ADACQ4>
extern volatile __bit                   ADACQ4              __at(0xE90C);	// @ (0x1D21 * 8 + 4)
#define                                 ADACQ4_bit          _BIT_ACCESS(ADACQL,4)
// ADACQL<ADACQ5>
extern volatile __bit                   ADACQ5              __at(0xE90D);	// @ (0x1D21 * 8 + 5)
#define                                 ADACQ5_bit          _BIT_ACCESS(ADACQL,5)
// ADACQL<ADACQ6>
extern volatile __bit                   ADACQ6              __at(0xE90E);	// @ (0x1D21 * 8 + 6)
#define                                 ADACQ6_bit          _BIT_ACCESS(ADACQL,6)
// ADACQL<ADACQ7>
extern volatile __bit                   ADACQ7              __at(0xE90F);	// @ (0x1D21 * 8 + 7)
#define                                 ADACQ7_bit          _BIT_ACCESS(ADACQL,7)
// ADACQH<ADACQ8>
extern volatile __bit                   ADACQ8              __at(0xE910);	// @ (0x1D22 * 8 + 0)
#define                                 ADACQ8_bit          _BIT_ACCESS(ADACQH,0)
// ADACQH<ADACQ9>
extern volatile __bit                   ADACQ9              __at(0xE911);	// @ (0x1D22 * 8 + 1)
#define                                 ADACQ9_bit          _BIT_ACCESS(ADACQH,1)
// ADACT<ADACT0>
extern volatile __bit                   ADACT0              __at(0xE960);	// @ (0x1D2C * 8 + 0)
#define                                 ADACT0_bit          _BIT_ACCESS(ADACT,0)
// ADACT<ADACT1>
extern volatile __bit                   ADACT1              __at(0xE961);	// @ (0x1D2C * 8 + 1)
#define                                 ADACT1_bit          _BIT_ACCESS(ADACT,1)
// ADACT<ADACT2>
extern volatile __bit                   ADACT2              __at(0xE962);	// @ (0x1D2C * 8 + 2)
#define                                 ADACT2_bit          _BIT_ACCESS(ADACT,2)
// ADACT<ADACT3>
extern volatile __bit                   ADACT3              __at(0xE963);	// @ (0x1D2C * 8 + 3)
#define                                 ADACT3_bit          _BIT_ACCESS(ADACT,3)
// ADACT<ADACT4>
extern volatile __bit                   ADACT4              __at(0xE964);	// @ (0x1D2C * 8 + 4)
#define                                 ADACT4_bit          _BIT_ACCESS(ADACT,4)
// ADACT<ADACT5>
extern volatile __bit                   ADACT5              __at(0xE965);	// @ (0x1D2C * 8 + 5)
#define                                 ADACT5_bit          _BIT_ACCESS(ADACT,5)
// ADSTAT<ADAOV>
extern volatile __bit                   ADAOV               __at(0xE957);	// @ (0x1D2A * 8 + 7)
#define                                 ADAOV_bit           _BIT_ACCESS(ADSTAT,7)
// ADCON3<ADCALC0>
extern volatile __bit                   ADCALC0             __at(0xE94C);	// @ (0x1D29 * 8 + 4)
#define                                 ADCALC0_bit         _BIT_ACCESS(ADCON3,4)
// ADCON3<ADCALC1>
extern volatile __bit                   ADCALC1             __at(0xE94D);	// @ (0x1D29 * 8 + 5)
#define                                 ADCALC1_bit         _BIT_ACCESS(ADCON3,5)
// ADCON3<ADCALC2>
extern volatile __bit                   ADCALC2             __at(0xE94E);	// @ (0x1D29 * 8 + 6)
#define                                 ADCALC2_bit         _BIT_ACCESS(ADCON3,6)
// ADCAP<ADCAP0>
extern volatile __bit                   ADCAP0              __at(0xE918);	// @ (0x1D23 * 8 + 0)
#define                                 ADCAP0_bit          _BIT_ACCESS(ADCAP,0)
// ADCAP<ADCAP1>
extern volatile __bit                   ADCAP1              __at(0xE919);	// @ (0x1D23 * 8 + 1)
#define                                 ADCAP1_bit          _BIT_ACCESS(ADCAP,1)
// ADCAP<ADCAP2>
extern volatile __bit                   ADCAP2              __at(0xE91A);	// @ (0x1D23 * 8 + 2)
#define                                 ADCAP2_bit          _BIT_ACCESS(ADCAP,2)
// ADCAP<ADCAP3>
extern volatile __bit                   ADCAP3              __at(0xE91B);	// @ (0x1D23 * 8 + 3)
#define                                 ADCAP3_bit          _BIT_ACCESS(ADCAP,3)
// ADCAP<ADCAP4>
extern volatile __bit                   ADCAP4              __at(0xE91C);	// @ (0x1D23 * 8 + 4)
#define                                 ADCAP4_bit          _BIT_ACCESS(ADCAP,4)
// PMD4<ADCMD>
extern volatile __bit                   ADCMD               __at(0x880);	// @ (0x110 * 8 + 0)
#define                                 ADCMD_bit           _BIT_ACCESS(PMD4,0)
// ADCNT<ADCNT0>
extern volatile __bit                   ADCNT0              __at(0xE8C8);	// @ (0x1D19 * 8 + 0)
#define                                 ADCNT0_bit          _BIT_ACCESS(ADCNT,0)
// ADCNT<ADCNT1>
extern volatile __bit                   ADCNT1              __at(0xE8C9);	// @ (0x1D19 * 8 + 1)
#define                                 ADCNT1_bit          _BIT_ACCESS(ADCNT,1)
// ADCNT<ADCNT2>
extern volatile __bit                   ADCNT2              __at(0xE8CA);	// @ (0x1D19 * 8 + 2)
#define                                 ADCNT2_bit          _BIT_ACCESS(ADCNT,2)
// ADCNT<ADCNT3>
extern volatile __bit                   ADCNT3              __at(0xE8CB);	// @ (0x1D19 * 8 + 3)
#define                                 ADCNT3_bit          _BIT_ACCESS(ADCNT,3)
// ADCNT<ADCNT4>
extern volatile __bit                   ADCNT4              __at(0xE8CC);	// @ (0x1D19 * 8 + 4)
#define                                 ADCNT4_bit          _BIT_ACCESS(ADCNT,4)
// ADCNT<ADCNT5>
extern volatile __bit                   ADCNT5              __at(0xE8CD);	// @ (0x1D19 * 8 + 5)
#define                                 ADCNT5_bit          _BIT_ACCESS(ADCNT,5)
// ADCNT<ADCNT6>
extern volatile __bit                   ADCNT6              __at(0xE8CE);	// @ (0x1D19 * 8 + 6)
#define                                 ADCNT6_bit          _BIT_ACCESS(ADCNT,6)
// ADCNT<ADCNT7>
extern volatile __bit                   ADCNT7              __at(0xE8CF);	// @ (0x1D19 * 8 + 7)
#define                                 ADCNT7_bit          _BIT_ACCESS(ADCNT,7)
// ADCON0<ADCONT>
extern volatile __bit                   ADCONT              __at(0xE936);	// @ (0x1D26 * 8 + 6)
#define                                 ADCONT_bit          _BIT_ACCESS(ADCON0,6)
// ADCON2<ADCRS0>
extern volatile __bit                   ADCRS0              __at(0xE944);	// @ (0x1D28 * 8 + 4)
#define                                 ADCRS0_bit          _BIT_ACCESS(ADCON2,4)
// ADCON2<ADCRS1>
extern volatile __bit                   ADCRS1              __at(0xE945);	// @ (0x1D28 * 8 + 5)
#define                                 ADCRS1_bit          _BIT_ACCESS(ADCON2,5)
// ADCON2<ADCRS2>
extern volatile __bit                   ADCRS2              __at(0xE946);	// @ (0x1D28 * 8 + 6)
#define                                 ADCRS2_bit          _BIT_ACCESS(ADCON2,6)
// ADCON0<ADCS>
extern volatile __bit                   ADCS                __at(0xE934);	// @ (0x1D26 * 8 + 4)
#define                                 ADCS_bit            _BIT_ACCESS(ADCON0,4)
// ADCLK<ADCS0>
extern volatile __bit                   ADCS0               __at(0xE968);	// @ (0x1D2D * 8 + 0)
#define                                 ADCS0_bit           _BIT_ACCESS(ADCLK,0)
// ADCLK<ADCS1>
extern volatile __bit                   ADCS1               __at(0xE969);	// @ (0x1D2D * 8 + 1)
#define                                 ADCS1_bit           _BIT_ACCESS(ADCLK,1)
// ADCLK<ADCS2>
extern volatile __bit                   ADCS2               __at(0xE96A);	// @ (0x1D2D * 8 + 2)
#define                                 ADCS2_bit           _BIT_ACCESS(ADCLK,2)
// ADCLK<ADCS3>
extern volatile __bit                   ADCS3               __at(0xE96B);	// @ (0x1D2D * 8 + 3)
#define                                 ADCS3_bit           _BIT_ACCESS(ADCLK,3)
// ADCLK<ADCS4>
extern volatile __bit                   ADCS4               __at(0xE96C);	// @ (0x1D2D * 8 + 4)
#define                                 ADCS4_bit           _BIT_ACCESS(ADCLK,4)
// ADCLK<ADCS5>
extern volatile __bit                   ADCS5               __at(0xE96D);	// @ (0x1D2D * 8 + 5)
#define                                 ADCS5_bit           _BIT_ACCESS(ADCLK,5)
// RC1STA<ADDEN>
extern volatile __bit                   ADDEN               __at(0x3883);	// @ (0x710 * 8 + 3)
#define                                 ADDEN_bit           _BIT_ACCESS(RC1STA,3)
// ADCON1<ADDSEN>
extern volatile __bit                   ADDSEN              __at(0xE938);	// @ (0x1D27 * 8 + 0)
#define                                 ADDSEN_bit          _BIT_ACCESS(ADCON1,0)
// ADERRL<ADERR0>
extern volatile __bit                   ADERR0              __at(0xE880);	// @ (0x1D10 * 8 + 0)
#define                                 ADERR0_bit          _BIT_ACCESS(ADERRL,0)
// ADERRL<ADERR1>
extern volatile __bit                   ADERR1              __at(0xE881);	// @ (0x1D10 * 8 + 1)
#define                                 ADERR1_bit          _BIT_ACCESS(ADERRL,1)
// ADERRH<ADERR10>
extern volatile __bit                   ADERR10             __at(0xE88A);	// @ (0x1D11 * 8 + 2)
#define                                 ADERR10_bit         _BIT_ACCESS(ADERRH,2)
// ADERRH<ADERR11>
extern volatile __bit                   ADERR11             __at(0xE88B);	// @ (0x1D11 * 8 + 3)
#define                                 ADERR11_bit         _BIT_ACCESS(ADERRH,3)
// ADERRH<ADERR12>
extern volatile __bit                   ADERR12             __at(0xE88C);	// @ (0x1D11 * 8 + 4)
#define                                 ADERR12_bit         _BIT_ACCESS(ADERRH,4)
// ADERRH<ADERR13>
extern volatile __bit                   ADERR13             __at(0xE88D);	// @ (0x1D11 * 8 + 5)
#define                                 ADERR13_bit         _BIT_ACCESS(ADERRH,5)
// ADERRH<ADERR14>
extern volatile __bit                   ADERR14             __at(0xE88E);	// @ (0x1D11 * 8 + 6)
#define                                 ADERR14_bit         _BIT_ACCESS(ADERRH,6)
// ADERRH<ADERR15>
extern volatile __bit                   ADERR15             __at(0xE88F);	// @ (0x1D11 * 8 + 7)
#define                                 ADERR15_bit         _BIT_ACCESS(ADERRH,7)
// ADERRL<ADERR2>
extern volatile __bit                   ADERR2              __at(0xE882);	// @ (0x1D10 * 8 + 2)
#define                                 ADERR2_bit          _BIT_ACCESS(ADERRL,2)
// ADERRL<ADERR3>
extern volatile __bit                   ADERR3              __at(0xE883);	// @ (0x1D10 * 8 + 3)
#define                                 ADERR3_bit          _BIT_ACCESS(ADERRL,3)
// ADERRL<ADERR4>
extern volatile __bit                   ADERR4              __at(0xE884);	// @ (0x1D10 * 8 + 4)
#define                                 ADERR4_bit          _BIT_ACCESS(ADERRL,4)
// ADERRL<ADERR5>
extern volatile __bit                   ADERR5              __at(0xE885);	// @ (0x1D10 * 8 + 5)
#define                                 ADERR5_bit          _BIT_ACCESS(ADERRL,5)
// ADERRL<ADERR6>
extern volatile __bit                   ADERR6              __at(0xE886);	// @ (0x1D10 * 8 + 6)
#define                                 ADERR6_bit          _BIT_ACCESS(ADERRL,6)
// ADERRL<ADERR7>
extern volatile __bit                   ADERR7              __at(0xE887);	// @ (0x1D10 * 8 + 7)
#define                                 ADERR7_bit          _BIT_ACCESS(ADERRL,7)
// ADERRH<ADERR8>
extern volatile __bit                   ADERR8              __at(0xE888);	// @ (0x1D11 * 8 + 0)
#define                                 ADERR8_bit          _BIT_ACCESS(ADERRH,0)
// ADERRH<ADERR9>
extern volatile __bit                   ADERR9              __at(0xE889);	// @ (0x1D11 * 8 + 1)
#define                                 ADERR9_bit          _BIT_ACCESS(ADERRH,1)
// ADFLTRL<ADFLTR0>
extern volatile __bit                   ADFLTR0             __at(0xE8A0);	// @ (0x1D14 * 8 + 0)
#define                                 ADFLTR0_bit         _BIT_ACCESS(ADFLTRL,0)
// ADFLTRL<ADFLTR1>
extern volatile __bit                   ADFLTR1             __at(0xE8A1);	// @ (0x1D14 * 8 + 1)
#define                                 ADFLTR1_bit         _BIT_ACCESS(ADFLTRL,1)
// ADFLTRH<ADFLTR10>
extern volatile __bit                   ADFLTR10            __at(0xE8AA);	// @ (0x1D15 * 8 + 2)
#define                                 ADFLTR10_bit        _BIT_ACCESS(ADFLTRH,2)
// ADFLTRH<ADFLTR11>
extern volatile __bit                   ADFLTR11            __at(0xE8AB);	// @ (0x1D15 * 8 + 3)
#define                                 ADFLTR11_bit        _BIT_ACCESS(ADFLTRH,3)
// ADFLTRH<ADFLTR12>
extern volatile __bit                   ADFLTR12            __at(0xE8AC);	// @ (0x1D15 * 8 + 4)
#define                                 ADFLTR12_bit        _BIT_ACCESS(ADFLTRH,4)
// ADFLTRH<ADFLTR13>
extern volatile __bit                   ADFLTR13            __at(0xE8AD);	// @ (0x1D15 * 8 + 5)
#define                                 ADFLTR13_bit        _BIT_ACCESS(ADFLTRH,5)
// ADFLTRH<ADFLTR14>
extern volatile __bit                   ADFLTR14            __at(0xE8AE);	// @ (0x1D15 * 8 + 6)
#define                                 ADFLTR14_bit        _BIT_ACCESS(ADFLTRH,6)
// ADFLTRH<ADFLTR15>
extern volatile __bit                   ADFLTR15            __at(0xE8AF);	// @ (0x1D15 * 8 + 7)
#define                                 ADFLTR15_bit        _BIT_ACCESS(ADFLTRH,7)
// ADFLTRL<ADFLTR2>
extern volatile __bit                   ADFLTR2             __at(0xE8A2);	// @ (0x1D14 * 8 + 2)
#define                                 ADFLTR2_bit         _BIT_ACCESS(ADFLTRL,2)
// ADFLTRL<ADFLTR3>
extern volatile __bit                   ADFLTR3             __at(0xE8A3);	// @ (0x1D14 * 8 + 3)
#define                                 ADFLTR3_bit         _BIT_ACCESS(ADFLTRL,3)
// ADFLTRL<ADFLTR4>
extern volatile __bit                   ADFLTR4             __at(0xE8A4);	// @ (0x1D14 * 8 + 4)
#define                                 ADFLTR4_bit         _BIT_ACCESS(ADFLTRL,4)
// ADFLTRL<ADFLTR5>
extern volatile __bit                   ADFLTR5             __at(0xE8A5);	// @ (0x1D14 * 8 + 5)
#define                                 ADFLTR5_bit         _BIT_ACCESS(ADFLTRL,5)
// ADFLTRL<ADFLTR6>
extern volatile __bit                   ADFLTR6             __at(0xE8A6);	// @ (0x1D14 * 8 + 6)
#define                                 ADFLTR6_bit         _BIT_ACCESS(ADFLTRL,6)
// ADFLTRL<ADFLTR7>
extern volatile __bit                   ADFLTR7             __at(0xE8A7);	// @ (0x1D14 * 8 + 7)
#define                                 ADFLTR7_bit         _BIT_ACCESS(ADFLTRL,7)
// ADFLTRH<ADFLTR8>
extern volatile __bit                   ADFLTR8             __at(0xE8A8);	// @ (0x1D15 * 8 + 0)
#define                                 ADFLTR8_bit         _BIT_ACCESS(ADFLTRH,0)
// ADFLTRH<ADFLTR9>
extern volatile __bit                   ADFLTR9             __at(0xE8A9);	// @ (0x1D15 * 8 + 1)
#define                                 ADFLTR9_bit         _BIT_ACCESS(ADFLTRH,1)
// ADCON0<ADFM0>
extern volatile __bit                   ADFM0               __at(0xE932);	// @ (0x1D26 * 8 + 2)
#define                                 ADFM0_bit           _BIT_ACCESS(ADCON0,2)
// FVRCON<ADFVR0>
extern volatile __bit                   ADFVR0              __at(0x1060);	// @ (0x20C * 8 + 0)
#define                                 ADFVR0_bit          _BIT_ACCESS(FVRCON,0)
// FVRCON<ADFVR1>
extern volatile __bit                   ADFVR1              __at(0x1061);	// @ (0x20C * 8 + 1)
#define                                 ADFVR1_bit          _BIT_ACCESS(FVRCON,1)
// ADCON0<ADGO>
extern volatile __bit                   ADGO                __at(0xE930);	// @ (0x1D26 * 8 + 0)
#define                                 ADGO_bit            _BIT_ACCESS(ADCON0,0)
// ADCON1<ADGPOL>
extern volatile __bit                   ADGPOL              __at(0xE93D);	// @ (0x1D27 * 8 + 5)
#define                                 ADGPOL_bit          _BIT_ACCESS(ADCON1,5)
// PIE6<ADIE>
extern volatile __bit                   ADIE                __at(0x4E0);	// @ (0x9C * 8 + 0)
#define                                 ADIE_bit            _BIT_ACCESS(PIE6,0)
// PIR6<ADIF>
extern volatile __bit                   ADIF                __at(0x490);	// @ (0x92 * 8 + 0)
#define                                 ADIF_bit            _BIT_ACCESS(PIR6,0)
// ADCON1<ADIPEN>
extern volatile __bit                   ADIPEN              __at(0xE93E);	// @ (0x1D27 * 8 + 6)
#define                                 ADIPEN_bit          _BIT_ACCESS(ADCON1,6)
// ADLTHL<ADLTH0>
extern volatile __bit                   ADLTH0              __at(0xE860);	// @ (0x1D0C * 8 + 0)
#define                                 ADLTH0_bit          _BIT_ACCESS(ADLTHL,0)
// ADLTHL<ADLTH1>
extern volatile __bit                   ADLTH1              __at(0xE861);	// @ (0x1D0C * 8 + 1)
#define                                 ADLTH1_bit          _BIT_ACCESS(ADLTHL,1)
// ADLTHH<ADLTH10>
extern volatile __bit                   ADLTH10             __at(0xE86A);	// @ (0x1D0D * 8 + 2)
#define                                 ADLTH10_bit         _BIT_ACCESS(ADLTHH,2)
// ADLTHH<ADLTH11>
extern volatile __bit                   ADLTH11             __at(0xE86B);	// @ (0x1D0D * 8 + 3)
#define                                 ADLTH11_bit         _BIT_ACCESS(ADLTHH,3)
// ADLTHH<ADLTH12>
extern volatile __bit                   ADLTH12             __at(0xE86C);	// @ (0x1D0D * 8 + 4)
#define                                 ADLTH12_bit         _BIT_ACCESS(ADLTHH,4)
// ADLTHH<ADLTH13>
extern volatile __bit                   ADLTH13             __at(0xE86D);	// @ (0x1D0D * 8 + 5)
#define                                 ADLTH13_bit         _BIT_ACCESS(ADLTHH,5)
// ADLTHH<ADLTH14>
extern volatile __bit                   ADLTH14             __at(0xE86E);	// @ (0x1D0D * 8 + 6)
#define                                 ADLTH14_bit         _BIT_ACCESS(ADLTHH,6)
// ADLTHH<ADLTH15>
extern volatile __bit                   ADLTH15             __at(0xE86F);	// @ (0x1D0D * 8 + 7)
#define                                 ADLTH15_bit         _BIT_ACCESS(ADLTHH,7)
// ADLTHL<ADLTH2>
extern volatile __bit                   ADLTH2              __at(0xE862);	// @ (0x1D0C * 8 + 2)
#define                                 ADLTH2_bit          _BIT_ACCESS(ADLTHL,2)
// ADLTHL<ADLTH3>
extern volatile __bit                   ADLTH3              __at(0xE863);	// @ (0x1D0C * 8 + 3)
#define                                 ADLTH3_bit          _BIT_ACCESS(ADLTHL,3)
// ADLTHL<ADLTH4>
extern volatile __bit                   ADLTH4              __at(0xE864);	// @ (0x1D0C * 8 + 4)
#define                                 ADLTH4_bit          _BIT_ACCESS(ADLTHL,4)
// ADLTHL<ADLTH5>
extern volatile __bit                   ADLTH5              __at(0xE865);	// @ (0x1D0C * 8 + 5)
#define                                 ADLTH5_bit          _BIT_ACCESS(ADLTHL,5)
// ADLTHL<ADLTH6>
extern volatile __bit                   ADLTH6              __at(0xE866);	// @ (0x1D0C * 8 + 6)
#define                                 ADLTH6_bit          _BIT_ACCESS(ADLTHL,6)
// ADLTHL<ADLTH7>
extern volatile __bit                   ADLTH7              __at(0xE867);	// @ (0x1D0C * 8 + 7)
#define                                 ADLTH7_bit          _BIT_ACCESS(ADLTHL,7)
// ADLTHH<ADLTH8>
extern volatile __bit                   ADLTH8              __at(0xE868);	// @ (0x1D0D * 8 + 0)
#define                                 ADLTH8_bit          _BIT_ACCESS(ADLTHH,0)
// ADLTHH<ADLTH9>
extern volatile __bit                   ADLTH9              __at(0xE869);	// @ (0x1D0D * 8 + 1)
#define                                 ADLTH9_bit          _BIT_ACCESS(ADLTHH,1)
// ADSTAT<ADLTHR>
extern volatile __bit                   ADLTHR              __at(0xE955);	// @ (0x1D2A * 8 + 5)
#define                                 ADLTHR_bit          _BIT_ACCESS(ADSTAT,5)
// ADSTAT<ADMATH>
extern volatile __bit                   ADMATH              __at(0xE954);	// @ (0x1D2A * 8 + 4)
#define                                 ADMATH_bit          _BIT_ACCESS(ADSTAT,4)
// ADCON2<ADMD0>
extern volatile __bit                   ADMD0               __at(0xE940);	// @ (0x1D28 * 8 + 0)
#define                                 ADMD0_bit           _BIT_ACCESS(ADCON2,0)
// ADCON2<ADMD1>
extern volatile __bit                   ADMD1               __at(0xE941);	// @ (0x1D28 * 8 + 1)
#define                                 ADMD1_bit           _BIT_ACCESS(ADCON2,1)
// ADCON2<ADMD2>
extern volatile __bit                   ADMD2               __at(0xE942);	// @ (0x1D28 * 8 + 2)
#define                                 ADMD2_bit           _BIT_ACCESS(ADCON2,2)
// SSP1CON2<ADMSK1>
extern volatile __bit                   ADMSK1              __at(0x3C89);	// @ (0x791 * 8 + 1)
#define                                 ADMSK1_bit          _BIT_ACCESS(SSP1CON2,1)
// SSP1CON2<ADMSK11>
extern volatile __bit                   ADMSK11             __at(0x3C89);	// @ (0x791 * 8 + 1)
#define                                 ADMSK11_bit         _BIT_ACCESS(SSP1CON2,1)
// SSP1CON2<ADMSK2>
extern volatile __bit                   ADMSK2              __at(0x3C8A);	// @ (0x791 * 8 + 2)
#define                                 ADMSK2_bit          _BIT_ACCESS(SSP1CON2,2)
// SSP1CON2<ADMSK21>
extern volatile __bit                   ADMSK21             __at(0x3C8A);	// @ (0x791 * 8 + 2)
#define                                 ADMSK21_bit         _BIT_ACCESS(SSP1CON2,2)
// SSP1CON2<ADMSK3>
extern volatile __bit                   ADMSK3              __at(0x3C8B);	// @ (0x791 * 8 + 3)
#define                                 ADMSK3_bit          _BIT_ACCESS(SSP1CON2,3)
// SSP1CON2<ADMSK31>
extern volatile __bit                   ADMSK31             __at(0x3C8B);	// @ (0x791 * 8 + 3)
#define                                 ADMSK31_bit         _BIT_ACCESS(SSP1CON2,3)
// SSP1CON2<ADMSK4>
extern volatile __bit                   ADMSK4              __at(0x3C8C);	// @ (0x791 * 8 + 4)
#define                                 ADMSK4_bit          _BIT_ACCESS(SSP1CON2,4)
// SSP1CON2<ADMSK41>
extern volatile __bit                   ADMSK41             __at(0x3C8C);	// @ (0x791 * 8 + 4)
#define                                 ADMSK41_bit         _BIT_ACCESS(SSP1CON2,4)
// SSP1CON2<ADMSK5>
extern volatile __bit                   ADMSK5              __at(0x3C8D);	// @ (0x791 * 8 + 5)
#define                                 ADMSK5_bit          _BIT_ACCESS(SSP1CON2,5)
// SSP1CON2<ADMSK51>
extern volatile __bit                   ADMSK51             __at(0x3C8D);	// @ (0x791 * 8 + 5)
#define                                 ADMSK51_bit         _BIT_ACCESS(SSP1CON2,5)
// OSCEN<ADOEN>
extern volatile __bit                   ADOEN               __at(0x148A);	// @ (0x291 * 8 + 2)
#define                                 ADOEN_bit           _BIT_ACCESS(OSCEN,2)
// ADCON0<ADON>
extern volatile __bit                   ADON                __at(0xE937);	// @ (0x1D26 * 8 + 7)
#define                                 ADON_bit            _BIT_ACCESS(ADCON0,7)
// OSCSTAT<ADOR>
extern volatile __bit                   ADOR                __at(0x1482);	// @ (0x290 * 8 + 2)
#define                                 ADOR_bit            _BIT_ACCESS(OSCSTAT,2)
// ADSTAT<ADOV>
extern volatile __bit                   ADOV                __at(0xE957);	// @ (0x1D2A * 8 + 7)
#define                                 ADOV_bit            _BIT_ACCESS(ADSTAT,7)
// ADPCH<ADPCH0>
extern volatile __bit                   ADPCH0              __at(0xE8F8);	// @ (0x1D1F * 8 + 0)
#define                                 ADPCH0_bit          _BIT_ACCESS(ADPCH,0)
// ADPCH<ADPCH1>
extern volatile __bit                   ADPCH1              __at(0xE8F9);	// @ (0x1D1F * 8 + 1)
#define                                 ADPCH1_bit          _BIT_ACCESS(ADPCH,1)
// ADPCH<ADPCH2>
extern volatile __bit                   ADPCH2              __at(0xE8FA);	// @ (0x1D1F * 8 + 2)
#define                                 ADPCH2_bit          _BIT_ACCESS(ADPCH,2)
// ADPCH<ADPCH3>
extern volatile __bit                   ADPCH3              __at(0xE8FB);	// @ (0x1D1F * 8 + 3)
#define                                 ADPCH3_bit          _BIT_ACCESS(ADPCH,3)
// ADPCH<ADPCH4>
extern volatile __bit                   ADPCH4              __at(0xE8FC);	// @ (0x1D1F * 8 + 4)
#define                                 ADPCH4_bit          _BIT_ACCESS(ADPCH,4)
// ADPCH<ADPCH5>
extern volatile __bit                   ADPCH5              __at(0xE8FD);	// @ (0x1D1F * 8 + 5)
#define                                 ADPCH5_bit          _BIT_ACCESS(ADPCH,5)
// ADCON1<ADPPOL>
extern volatile __bit                   ADPPOL              __at(0xE93F);	// @ (0x1D27 * 8 + 7)
#define                                 ADPPOL_bit          _BIT_ACCESS(ADCON1,7)
// ADPREL<ADPRE0>
extern volatile __bit                   ADPRE0              __at(0xE920);	// @ (0x1D24 * 8 + 0)
#define                                 ADPRE0_bit          _BIT_ACCESS(ADPREL,0)
// ADPREL<ADPRE1>
extern volatile __bit                   ADPRE1              __at(0xE921);	// @ (0x1D24 * 8 + 1)
#define                                 ADPRE1_bit          _BIT_ACCESS(ADPREL,1)
// ADPREH<ADPRE10>
extern volatile __bit                   ADPRE10             __at(0xE92A);	// @ (0x1D25 * 8 + 2)
#define                                 ADPRE10_bit         _BIT_ACCESS(ADPREH,2)
// ADPREH<ADPRE11>
extern volatile __bit                   ADPRE11             __at(0xE92B);	// @ (0x1D25 * 8 + 3)
#define                                 ADPRE11_bit         _BIT_ACCESS(ADPREH,3)
// ADPREH<ADPRE12>
extern volatile __bit                   ADPRE12             __at(0xE92C);	// @ (0x1D25 * 8 + 4)
#define                                 ADPRE12_bit         _BIT_ACCESS(ADPREH,4)
// ADPREL<ADPRE2>
extern volatile __bit                   ADPRE2              __at(0xE922);	// @ (0x1D24 * 8 + 2)
#define                                 ADPRE2_bit          _BIT_ACCESS(ADPREL,2)
// ADPREL<ADPRE3>
extern volatile __bit                   ADPRE3              __at(0xE923);	// @ (0x1D24 * 8 + 3)
#define                                 ADPRE3_bit          _BIT_ACCESS(ADPREL,3)
// ADPREL<ADPRE4>
extern volatile __bit                   ADPRE4              __at(0xE924);	// @ (0x1D24 * 8 + 4)
#define                                 ADPRE4_bit          _BIT_ACCESS(ADPREL,4)
// ADPREL<ADPRE5>
extern volatile __bit                   ADPRE5              __at(0xE925);	// @ (0x1D24 * 8 + 5)
#define                                 ADPRE5_bit          _BIT_ACCESS(ADPREL,5)
// ADPREL<ADPRE6>
extern volatile __bit                   ADPRE6              __at(0xE926);	// @ (0x1D24 * 8 + 6)
#define                                 ADPRE6_bit          _BIT_ACCESS(ADPREL,6)
// ADPREL<ADPRE7>
extern volatile __bit                   ADPRE7              __at(0xE927);	// @ (0x1D24 * 8 + 7)
#define                                 ADPRE7_bit          _BIT_ACCESS(ADPREL,7)
// ADPREH<ADPRE8>
extern volatile __bit                   ADPRE8              __at(0xE928);	// @ (0x1D25 * 8 + 0)
#define                                 ADPRE8_bit          _BIT_ACCESS(ADPREH,0)
// ADPREH<ADPRE9>
extern volatile __bit                   ADPRE9              __at(0xE929);	// @ (0x1D25 * 8 + 1)
#define                                 ADPRE9_bit          _BIT_ACCESS(ADPREH,1)
// ADREF<ADPREF0>
extern volatile __bit                   ADPREF0             __at(0xE958);	// @ (0x1D2B * 8 + 0)
#define                                 ADPREF0_bit         _BIT_ACCESS(ADREF,0)
// ADREF<ADPREF1>
extern volatile __bit                   ADPREF1             __at(0xE959);	// @ (0x1D2B * 8 + 1)
#define                                 ADPREF1_bit         _BIT_ACCESS(ADREF,1)
// ADPREVL<ADPREV0>
extern volatile __bit                   ADPREV0             __at(0xE8D8);	// @ (0x1D1B * 8 + 0)
#define                                 ADPREV0_bit         _BIT_ACCESS(ADPREVL,0)
// ADPREVL<ADPREV1>
extern volatile __bit                   ADPREV1             __at(0xE8D9);	// @ (0x1D1B * 8 + 1)
#define                                 ADPREV1_bit         _BIT_ACCESS(ADPREVL,1)
// ADPREVH<ADPREV10>
extern volatile __bit                   ADPREV10            __at(0xE8E2);	// @ (0x1D1C * 8 + 2)
#define                                 ADPREV10_bit        _BIT_ACCESS(ADPREVH,2)
// ADPREVH<ADPREV11>
extern volatile __bit                   ADPREV11            __at(0xE8E3);	// @ (0x1D1C * 8 + 3)
#define                                 ADPREV11_bit        _BIT_ACCESS(ADPREVH,3)
// ADPREVH<ADPREV12>
extern volatile __bit                   ADPREV12            __at(0xE8E4);	// @ (0x1D1C * 8 + 4)
#define                                 ADPREV12_bit        _BIT_ACCESS(ADPREVH,4)
// ADPREVH<ADPREV13>
extern volatile __bit                   ADPREV13            __at(0xE8E5);	// @ (0x1D1C * 8 + 5)
#define                                 ADPREV13_bit        _BIT_ACCESS(ADPREVH,5)
// ADPREVH<ADPREV14>
extern volatile __bit                   ADPREV14            __at(0xE8E6);	// @ (0x1D1C * 8 + 6)
#define                                 ADPREV14_bit        _BIT_ACCESS(ADPREVH,6)
// ADPREVH<ADPREV15>
extern volatile __bit                   ADPREV15            __at(0xE8E7);	// @ (0x1D1C * 8 + 7)
#define                                 ADPREV15_bit        _BIT_ACCESS(ADPREVH,7)
// ADPREVL<ADPREV2>
extern volatile __bit                   ADPREV2             __at(0xE8DA);	// @ (0x1D1B * 8 + 2)
#define                                 ADPREV2_bit         _BIT_ACCESS(ADPREVL,2)
// ADPREVL<ADPREV3>
extern volatile __bit                   ADPREV3             __at(0xE8DB);	// @ (0x1D1B * 8 + 3)
#define                                 ADPREV3_bit         _BIT_ACCESS(ADPREVL,3)
// ADPREVL<ADPREV4>
extern volatile __bit                   ADPREV4             __at(0xE8DC);	// @ (0x1D1B * 8 + 4)
#define                                 ADPREV4_bit         _BIT_ACCESS(ADPREVL,4)
// ADPREVL<ADPREV5>
extern volatile __bit                   ADPREV5             __at(0xE8DD);	// @ (0x1D1B * 8 + 5)
#define                                 ADPREV5_bit         _BIT_ACCESS(ADPREVL,5)
// ADPREVL<ADPREV6>
extern volatile __bit                   ADPREV6             __at(0xE8DE);	// @ (0x1D1B * 8 + 6)
#define                                 ADPREV6_bit         _BIT_ACCESS(ADPREVL,6)
// ADPREVL<ADPREV7>
extern volatile __bit                   ADPREV7             __at(0xE8DF);	// @ (0x1D1B * 8 + 7)
#define                                 ADPREV7_bit         _BIT_ACCESS(ADPREVL,7)
// ADPREVH<ADPREV8>
extern volatile __bit                   ADPREV8             __at(0xE8E0);	// @ (0x1D1C * 8 + 0)
#define                                 ADPREV8_bit         _BIT_ACCESS(ADPREVH,0)
// ADPREVH<ADPREV9>
extern volatile __bit                   ADPREV9             __at(0xE8E1);	// @ (0x1D1C * 8 + 1)
#define                                 ADPREV9_bit         _BIT_ACCESS(ADPREVH,1)
// ADCON2<ADPSIS>
extern volatile __bit                   ADPSIS              __at(0xE947);	// @ (0x1D28 * 8 + 7)
#define                                 ADPSIS_bit          _BIT_ACCESS(ADCON2,7)
// ADRESL<ADRES0>
extern volatile __bit                   ADRES0              __at(0xE8E8);	// @ (0x1D1D * 8 + 0)
#define                                 ADRES0_bit          _BIT_ACCESS(ADRESL,0)
// ADRESL<ADRES1>
extern volatile __bit                   ADRES1              __at(0xE8E9);	// @ (0x1D1D * 8 + 1)
#define                                 ADRES1_bit          _BIT_ACCESS(ADRESL,1)
// ADRESH<ADRES10>
extern volatile __bit                   ADRES10             __at(0xE8F2);	// @ (0x1D1E * 8 + 2)
#define                                 ADRES10_bit         _BIT_ACCESS(ADRESH,2)
// ADRESH<ADRES11>
extern volatile __bit                   ADRES11             __at(0xE8F3);	// @ (0x1D1E * 8 + 3)
#define                                 ADRES11_bit         _BIT_ACCESS(ADRESH,3)
// ADRESH<ADRES12>
extern volatile __bit                   ADRES12             __at(0xE8F4);	// @ (0x1D1E * 8 + 4)
#define                                 ADRES12_bit         _BIT_ACCESS(ADRESH,4)
// ADRESH<ADRES13>
extern volatile __bit                   ADRES13             __at(0xE8F5);	// @ (0x1D1E * 8 + 5)
#define                                 ADRES13_bit         _BIT_ACCESS(ADRESH,5)
// ADRESH<ADRES14>
extern volatile __bit                   ADRES14             __at(0xE8F6);	// @ (0x1D1E * 8 + 6)
#define                                 ADRES14_bit         _BIT_ACCESS(ADRESH,6)
// ADRESH<ADRES15>
extern volatile __bit                   ADRES15             __at(0xE8F7);	// @ (0x1D1E * 8 + 7)
#define                                 ADRES15_bit         _BIT_ACCESS(ADRESH,7)
// ADRESL<ADRES2>
extern volatile __bit                   ADRES2              __at(0xE8EA);	// @ (0x1D1D * 8 + 2)
#define                                 ADRES2_bit          _BIT_ACCESS(ADRESL,2)
// ADRESL<ADRES3>
extern volatile __bit                   ADRES3              __at(0xE8EB);	// @ (0x1D1D * 8 + 3)
#define                                 ADRES3_bit          _BIT_ACCESS(ADRESL,3)
// ADRESL<ADRES4>
extern volatile __bit                   ADRES4              __at(0xE8EC);	// @ (0x1D1D * 8 + 4)
#define                                 ADRES4_bit          _BIT_ACCESS(ADRESL,4)
// ADRESL<ADRES5>
extern volatile __bit                   ADRES5              __at(0xE8ED);	// @ (0x1D1D * 8 + 5)
#define                                 ADRES5_bit          _BIT_ACCESS(ADRESL,5)
// ADRESL<ADRES6>
extern volatile __bit                   ADRES6              __at(0xE8EE);	// @ (0x1D1D * 8 + 6)
#define                                 ADRES6_bit          _BIT_ACCESS(ADRESL,6)
// ADRESL<ADRES7>
extern volatile __bit                   ADRES7              __at(0xE8EF);	// @ (0x1D1D * 8 + 7)
#define                                 ADRES7_bit          _BIT_ACCESS(ADRESL,7)
// ADRESH<ADRES8>
extern volatile __bit                   ADRES8              __at(0xE8F0);	// @ (0x1D1E * 8 + 0)
#define                                 ADRES8_bit          _BIT_ACCESS(ADRESH,0)
// ADRESH<ADRES9>
extern volatile __bit                   ADRES9              __at(0xE8F1);	// @ (0x1D1E * 8 + 1)
#define                                 ADRES9_bit          _BIT_ACCESS(ADRESH,1)
// ADRPT<ADRPT0>
extern volatile __bit                   ADRPT0              __at(0xE8D0);	// @ (0x1D1A * 8 + 0)
#define                                 ADRPT0_bit          _BIT_ACCESS(ADRPT,0)
// ADRPT<ADRPT1>
extern volatile __bit                   ADRPT1              __at(0xE8D1);	// @ (0x1D1A * 8 + 1)
#define                                 ADRPT1_bit          _BIT_ACCESS(ADRPT,1)
// ADRPT<ADRPT2>
extern volatile __bit                   ADRPT2              __at(0xE8D2);	// @ (0x1D1A * 8 + 2)
#define                                 ADRPT2_bit          _BIT_ACCESS(ADRPT,2)
// ADRPT<ADRPT3>
extern volatile __bit                   ADRPT3              __at(0xE8D3);	// @ (0x1D1A * 8 + 3)
#define                                 ADRPT3_bit          _BIT_ACCESS(ADRPT,3)
// ADRPT<ADRPT4>
extern volatile __bit                   ADRPT4              __at(0xE8D4);	// @ (0x1D1A * 8 + 4)
#define                                 ADRPT4_bit          _BIT_ACCESS(ADRPT,4)
// ADRPT<ADRPT5>
extern volatile __bit                   ADRPT5              __at(0xE8D5);	// @ (0x1D1A * 8 + 5)
#define                                 ADRPT5_bit          _BIT_ACCESS(ADRPT,5)
// ADRPT<ADRPT6>
extern volatile __bit                   ADRPT6              __at(0xE8D6);	// @ (0x1D1A * 8 + 6)
#define                                 ADRPT6_bit          _BIT_ACCESS(ADRPT,6)
// ADRPT<ADRPT7>
extern volatile __bit                   ADRPT7              __at(0xE8D7);	// @ (0x1D1A * 8 + 7)
#define                                 ADRPT7_bit          _BIT_ACCESS(ADRPT,7)
// ADCON3<ADSOI>
extern volatile __bit                   ADSOI               __at(0xE94B);	// @ (0x1D29 * 8 + 3)
#define                                 ADSOI_bit           _BIT_ACCESS(ADCON3,3)
// ADSTAT<ADSTAT0>
extern volatile __bit                   ADSTAT0             __at(0xE950);	// @ (0x1D2A * 8 + 0)
#define                                 ADSTAT0_bit         _BIT_ACCESS(ADSTAT,0)
// ADSTAT<ADSTAT1>
extern volatile __bit                   ADSTAT1             __at(0xE951);	// @ (0x1D2A * 8 + 1)
#define                                 ADSTAT1_bit         _BIT_ACCESS(ADSTAT,1)
// ADSTAT<ADSTAT2>
extern volatile __bit                   ADSTAT2             __at(0xE952);	// @ (0x1D2A * 8 + 2)
#define                                 ADSTAT2_bit         _BIT_ACCESS(ADSTAT,2)
// ADSTPTL<ADSTPT0>
extern volatile __bit                   ADSTPT0             __at(0xE890);	// @ (0x1D12 * 8 + 0)
#define                                 ADSTPT0_bit         _BIT_ACCESS(ADSTPTL,0)
// ADSTPTL<ADSTPT1>
extern volatile __bit                   ADSTPT1             __at(0xE891);	// @ (0x1D12 * 8 + 1)
#define                                 ADSTPT1_bit         _BIT_ACCESS(ADSTPTL,1)
// ADSTPTH<ADSTPT10>
extern volatile __bit                   ADSTPT10            __at(0xE89A);	// @ (0x1D13 * 8 + 2)
#define                                 ADSTPT10_bit        _BIT_ACCESS(ADSTPTH,2)
// ADSTPTH<ADSTPT11>
extern volatile __bit                   ADSTPT11            __at(0xE89B);	// @ (0x1D13 * 8 + 3)
#define                                 ADSTPT11_bit        _BIT_ACCESS(ADSTPTH,3)
// ADSTPTH<ADSTPT12>
extern volatile __bit                   ADSTPT12            __at(0xE89C);	// @ (0x1D13 * 8 + 4)
#define                                 ADSTPT12_bit        _BIT_ACCESS(ADSTPTH,4)
// ADSTPTH<ADSTPT13>
extern volatile __bit                   ADSTPT13            __at(0xE89D);	// @ (0x1D13 * 8 + 5)
#define                                 ADSTPT13_bit        _BIT_ACCESS(ADSTPTH,5)
// ADSTPTH<ADSTPT14>
extern volatile __bit                   ADSTPT14            __at(0xE89E);	// @ (0x1D13 * 8 + 6)
#define                                 ADSTPT14_bit        _BIT_ACCESS(ADSTPTH,6)
// ADSTPTH<ADSTPT15>
extern volatile __bit                   ADSTPT15            __at(0xE89F);	// @ (0x1D13 * 8 + 7)
#define                                 ADSTPT15_bit        _BIT_ACCESS(ADSTPTH,7)
// ADSTPTL<ADSTPT2>
extern volatile __bit                   ADSTPT2             __at(0xE892);	// @ (0x1D12 * 8 + 2)
#define                                 ADSTPT2_bit         _BIT_ACCESS(ADSTPTL,2)
// ADSTPTL<ADSTPT3>
extern volatile __bit                   ADSTPT3             __at(0xE893);	// @ (0x1D12 * 8 + 3)
#define                                 ADSTPT3_bit         _BIT_ACCESS(ADSTPTL,3)
// ADSTPTL<ADSTPT4>
extern volatile __bit                   ADSTPT4             __at(0xE894);	// @ (0x1D12 * 8 + 4)
#define                                 ADSTPT4_bit         _BIT_ACCESS(ADSTPTL,4)
// ADSTPTL<ADSTPT5>
extern volatile __bit                   ADSTPT5             __at(0xE895);	// @ (0x1D12 * 8 + 5)
#define                                 ADSTPT5_bit         _BIT_ACCESS(ADSTPTL,5)
// ADSTPTL<ADSTPT6>
extern volatile __bit                   ADSTPT6             __at(0xE896);	// @ (0x1D12 * 8 + 6)
#define                                 ADSTPT6_bit         _BIT_ACCESS(ADSTPTL,6)
// ADSTPTL<ADSTPT7>
extern volatile __bit                   ADSTPT7             __at(0xE897);	// @ (0x1D12 * 8 + 7)
#define                                 ADSTPT7_bit         _BIT_ACCESS(ADSTPTL,7)
// ADSTPTH<ADSTPT8>
extern volatile __bit                   ADSTPT8             __at(0xE898);	// @ (0x1D13 * 8 + 0)
#define                                 ADSTPT8_bit         _BIT_ACCESS(ADSTPTH,0)
// ADSTPTH<ADSTPT9>
extern volatile __bit                   ADSTPT9             __at(0xE899);	// @ (0x1D13 * 8 + 1)
#define                                 ADSTPT9_bit         _BIT_ACCESS(ADSTPTH,1)
// PIE6<ADTIE>
extern volatile __bit                   ADTIE               __at(0x4E1);	// @ (0x9C * 8 + 1)
#define                                 ADTIE_bit           _BIT_ACCESS(PIE6,1)
// PIR6<ADTIF>
extern volatile __bit                   ADTIF               __at(0x491);	// @ (0x92 * 8 + 1)
#define                                 ADTIF_bit           _BIT_ACCESS(PIR6,1)
// ADCON3<ADTMD0>
extern volatile __bit                   ADTMD0              __at(0xE948);	// @ (0x1D29 * 8 + 0)
#define                                 ADTMD0_bit          _BIT_ACCESS(ADCON3,0)
// ADCON3<ADTMD1>
extern volatile __bit                   ADTMD1              __at(0xE949);	// @ (0x1D29 * 8 + 1)
#define                                 ADTMD1_bit          _BIT_ACCESS(ADCON3,1)
// ADCON3<ADTMD2>
extern volatile __bit                   ADTMD2              __at(0xE94A);	// @ (0x1D29 * 8 + 2)
#define                                 ADTMD2_bit          _BIT_ACCESS(ADCON3,2)
// ADUTHL<ADUTH0>
extern volatile __bit                   ADUTH0              __at(0xE870);	// @ (0x1D0E * 8 + 0)
#define                                 ADUTH0_bit          _BIT_ACCESS(ADUTHL,0)
// ADUTHL<ADUTH1>
extern volatile __bit                   ADUTH1              __at(0xE871);	// @ (0x1D0E * 8 + 1)
#define                                 ADUTH1_bit          _BIT_ACCESS(ADUTHL,1)
// ADUTHH<ADUTH10>
extern volatile __bit                   ADUTH10             __at(0xE87A);	// @ (0x1D0F * 8 + 2)
#define                                 ADUTH10_bit         _BIT_ACCESS(ADUTHH,2)
// ADUTHH<ADUTH11>
extern volatile __bit                   ADUTH11             __at(0xE87B);	// @ (0x1D0F * 8 + 3)
#define                                 ADUTH11_bit         _BIT_ACCESS(ADUTHH,3)
// ADUTHH<ADUTH12>
extern volatile __bit                   ADUTH12             __at(0xE87C);	// @ (0x1D0F * 8 + 4)
#define                                 ADUTH12_bit         _BIT_ACCESS(ADUTHH,4)
// ADUTHH<ADUTH13>
extern volatile __bit                   ADUTH13             __at(0xE87D);	// @ (0x1D0F * 8 + 5)
#define                                 ADUTH13_bit         _BIT_ACCESS(ADUTHH,5)
// ADUTHH<ADUTH14>
extern volatile __bit                   ADUTH14             __at(0xE87E);	// @ (0x1D0F * 8 + 6)
#define                                 ADUTH14_bit         _BIT_ACCESS(ADUTHH,6)
// ADUTHH<ADUTH15>
extern volatile __bit                   ADUTH15             __at(0xE87F);	// @ (0x1D0F * 8 + 7)
#define                                 ADUTH15_bit         _BIT_ACCESS(ADUTHH,7)
// ADUTHL<ADUTH2>
extern volatile __bit                   ADUTH2              __at(0xE872);	// @ (0x1D0E * 8 + 2)
#define                                 ADUTH2_bit          _BIT_ACCESS(ADUTHL,2)
// ADUTHL<ADUTH3>
extern volatile __bit                   ADUTH3              __at(0xE873);	// @ (0x1D0E * 8 + 3)
#define                                 ADUTH3_bit          _BIT_ACCESS(ADUTHL,3)
// ADUTHL<ADUTH4>
extern volatile __bit                   ADUTH4              __at(0xE874);	// @ (0x1D0E * 8 + 4)
#define                                 ADUTH4_bit          _BIT_ACCESS(ADUTHL,4)
// ADUTHL<ADUTH5>
extern volatile __bit                   ADUTH5              __at(0xE875);	// @ (0x1D0E * 8 + 5)
#define                                 ADUTH5_bit          _BIT_ACCESS(ADUTHL,5)
// ADUTHL<ADUTH6>
extern volatile __bit                   ADUTH6              __at(0xE876);	// @ (0x1D0E * 8 + 6)
#define                                 ADUTH6_bit          _BIT_ACCESS(ADUTHL,6)
// ADUTHL<ADUTH7>
extern volatile __bit                   ADUTH7              __at(0xE877);	// @ (0x1D0E * 8 + 7)
#define                                 ADUTH7_bit          _BIT_ACCESS(ADUTHL,7)
// ADUTHH<ADUTH8>
extern volatile __bit                   ADUTH8              __at(0xE878);	// @ (0x1D0F * 8 + 0)
#define                                 ADUTH8_bit          _BIT_ACCESS(ADUTHH,0)
// ADUTHH<ADUTH9>
extern volatile __bit                   ADUTH9              __at(0xE879);	// @ (0x1D0F * 8 + 1)
#define                                 ADUTH9_bit          _BIT_ACCESS(ADUTHH,1)
// ADSTAT<ADUTHR>
extern volatile __bit                   ADUTHR              __at(0xE956);	// @ (0x1D2A * 8 + 6)
#define                                 ADUTHR_bit          _BIT_ACCESS(ADSTAT,6)
// SSP1CON3<AHEN>
extern volatile __bit                   AHEN                __at(0x3C91);	// @ (0x792 * 8 + 1)
#define                                 AHEN_bit            _BIT_ACCESS(SSP1CON3,1)
// ANSELA<ANSA0>
extern volatile __bit                   ANSA0               __at(0xF460);	// @ (0x1E8C * 8 + 0)
#define                                 ANSA0_bit           _BIT_ACCESS(ANSELA,0)
// ANSELA<ANSA1>
extern volatile __bit                   ANSA1               __at(0xF461);	// @ (0x1E8C * 8 + 1)
#define                                 ANSA1_bit           _BIT_ACCESS(ANSELA,1)
// ANSELA<ANSA2>
extern volatile __bit                   ANSA2               __at(0xF462);	// @ (0x1E8C * 8 + 2)
#define                                 ANSA2_bit           _BIT_ACCESS(ANSELA,2)
// ANSELA<ANSA4>
extern volatile __bit                   ANSA4               __at(0xF464);	// @ (0x1E8C * 8 + 4)
#define                                 ANSA4_bit           _BIT_ACCESS(ANSELA,4)
// ANSELA<ANSA5>
extern volatile __bit                   ANSA5               __at(0xF465);	// @ (0x1E8C * 8 + 5)
#define                                 ANSA5_bit           _BIT_ACCESS(ANSELA,5)
// ANSELC<ANSC0>
extern volatile __bit                   ANSC0               __at(0xF500);	// @ (0x1EA0 * 8 + 0)
#define                                 ANSC0_bit           _BIT_ACCESS(ANSELC,0)
// ANSELC<ANSC1>
extern volatile __bit                   ANSC1               __at(0xF501);	// @ (0x1EA0 * 8 + 1)
#define                                 ANSC1_bit           _BIT_ACCESS(ANSELC,1)
// ANSELC<ANSC2>
extern volatile __bit                   ANSC2               __at(0xF502);	// @ (0x1EA0 * 8 + 2)
#define                                 ANSC2_bit           _BIT_ACCESS(ANSELC,2)
// ANSELC<ANSC3>
extern volatile __bit                   ANSC3               __at(0xF503);	// @ (0x1EA0 * 8 + 3)
#define                                 ANSC3_bit           _BIT_ACCESS(ANSELC,3)
// ANSELC<ANSC4>
extern volatile __bit                   ANSC4               __at(0xF504);	// @ (0x1EA0 * 8 + 4)
#define                                 ANSC4_bit           _BIT_ACCESS(ANSELC,4)
// ANSELC<ANSC5>
extern volatile __bit                   ANSC5               __at(0xF505);	// @ (0x1EA0 * 8 + 5)
#define                                 ANSC5_bit           _BIT_ACCESS(ANSELC,5)
// ANSELC<ANSC6>
extern volatile __bit                   ANSC6               __at(0xF506);	// @ (0x1EA0 * 8 + 6)
#define                                 ANSC6_bit           _BIT_ACCESS(ANSELC,6)
// ANSELC<ANSC7>
extern volatile __bit                   ANSC7               __at(0xF507);	// @ (0x1EA0 * 8 + 7)
#define                                 ANSC7_bit           _BIT_ACCESS(ANSELC,7)
// ANSELA<ANSELA0>
extern volatile __bit                   ANSELA0             __at(0xF460);	// @ (0x1E8C * 8 + 0)
#define                                 ANSELA0_bit         _BIT_ACCESS(ANSELA,0)
// ANSELA<ANSELA1>
extern volatile __bit                   ANSELA1             __at(0xF461);	// @ (0x1E8C * 8 + 1)
#define                                 ANSELA1_bit         _BIT_ACCESS(ANSELA,1)
// ANSELA<ANSELA2>
extern volatile __bit                   ANSELA2             __at(0xF462);	// @ (0x1E8C * 8 + 2)
#define                                 ANSELA2_bit         _BIT_ACCESS(ANSELA,2)
// ANSELA<ANSELA4>
extern volatile __bit                   ANSELA4             __at(0xF464);	// @ (0x1E8C * 8 + 4)
#define                                 ANSELA4_bit         _BIT_ACCESS(ANSELA,4)
// ANSELA<ANSELA5>
extern volatile __bit                   ANSELA5             __at(0xF465);	// @ (0x1E8C * 8 + 5)
#define                                 ANSELA5_bit         _BIT_ACCESS(ANSELA,5)
// ANSELC<ANSELC0>
extern volatile __bit                   ANSELC0             __at(0xF500);	// @ (0x1EA0 * 8 + 0)
#define                                 ANSELC0_bit         _BIT_ACCESS(ANSELC,0)
// ANSELC<ANSELC1>
extern volatile __bit                   ANSELC1             __at(0xF501);	// @ (0x1EA0 * 8 + 1)
#define                                 ANSELC1_bit         _BIT_ACCESS(ANSELC,1)
// ANSELC<ANSELC2>
extern volatile __bit                   ANSELC2             __at(0xF502);	// @ (0x1EA0 * 8 + 2)
#define                                 ANSELC2_bit         _BIT_ACCESS(ANSELC,2)
// ANSELC<ANSELC3>
extern volatile __bit                   ANSELC3             __at(0xF503);	// @ (0x1EA0 * 8 + 3)
#define                                 ANSELC3_bit         _BIT_ACCESS(ANSELC,3)
// ANSELC<ANSELC4>
extern volatile __bit                   ANSELC4             __at(0xF504);	// @ (0x1EA0 * 8 + 4)
#define                                 ANSELC4_bit         _BIT_ACCESS(ANSELC,4)
// ANSELC<ANSELC5>
extern volatile __bit                   ANSELC5             __at(0xF505);	// @ (0x1EA0 * 8 + 5)
#define                                 ANSELC5_bit         _BIT_ACCESS(ANSELC,5)
// ADSTAT<AOV>
extern volatile __bit                   AOV                 __at(0xE957);	// @ (0x1D2A * 8 + 7)
#define                                 AOV_bit             _BIT_ACCESS(ADSTAT,7)
// T0CON1<ASYNC>
extern volatile __bit                   ASYNC               __at(0xCFC);	// @ (0x19F * 8 + 4)
#define                                 ASYNC_bit           _BIT_ACCESS(T0CON1,4)
// PIE5<BCL1IE>
extern volatile __bit                   BCL1IE              __at(0x4DB);	// @ (0x9B * 8 + 3)
#define                                 BCL1IE_bit          _BIT_ACCESS(PIE5,3)
// PIR5<BCL1IF>
extern volatile __bit                   BCL1IF              __at(0x48B);	// @ (0x91 * 8 + 3)
#define                                 BCL1IF_bit          _BIT_ACCESS(PIR5,3)
// SSP1STAT<BF>
extern volatile __bit                   BF                  __at(0x3C78);	// @ (0x78F * 8 + 0)
#define                                 BF_bit              _BIT_ACCESS(SSP1STAT,0)
// SSP1STAT<BF1>
extern volatile __bit                   BF1                 __at(0x3C78);	// @ (0x78F * 8 + 0)
#define                                 BF1_bit             _BIT_ACCESS(SSP1STAT,0)
// SSP1CON3<BOEN>
extern volatile __bit                   BOEN                __at(0x3C94);	// @ (0x792 * 8 + 4)
#define                                 BOEN_bit            _BIT_ACCESS(SSP1CON3,4)
// BORCON<BORRDY>
extern volatile __bit                   BORRDY              __at(0xC88);	// @ (0x191 * 8 + 0)
#define                                 BORRDY_bit          _BIT_ACCESS(BORCON,0)
// BAUD1CON<BRG16>
extern volatile __bit                   BRG16               __at(0x3893);	// @ (0x712 * 8 + 3)
#define                                 BRG16_bit           _BIT_ACCESS(BAUD1CON,3)
// TX1STA<BRGH>
extern volatile __bit                   BRGH                __at(0x388A);	// @ (0x711 * 8 + 2)
#define                                 BRGH_bit            _BIT_ACCESS(TX1STA,2)
// BSR<BSR0>
extern volatile __bit                   BSR0                __at(0x40);	// @ (0x8 * 8 + 0)
#define                                 BSR0_bit            _BIT_ACCESS(BSR,0)
// BSR<BSR1>
extern volatile __bit                   BSR1                __at(0x41);	// @ (0x8 * 8 + 1)
#define                                 BSR1_bit            _BIT_ACCESS(BSR,1)
// BSR<BSR2>
extern volatile __bit                   BSR2                __at(0x42);	// @ (0x8 * 8 + 2)
#define                                 BSR2_bit            _BIT_ACCESS(BSR,2)
// BSR<BSR3>
extern volatile __bit                   BSR3                __at(0x43);	// @ (0x8 * 8 + 3)
#define                                 BSR3_bit            _BIT_ACCESS(BSR,3)
// BSR<BSR4>
extern volatile __bit                   BSR4                __at(0x44);	// @ (0x8 * 8 + 4)
#define                                 BSR4_bit            _BIT_ACCESS(BSR,4)
// BSR<BSR5>
extern volatile __bit                   BSR5                __at(0x45);	// @ (0x8 * 8 + 5)
#define                                 BSR5_bit            _BIT_ACCESS(BSR,5)
// CM1CON0<C1EN>
extern volatile __bit                   C1EN                __at(0x4067);	// @ (0x80C * 8 + 7)
#define                                 C1EN_bit            _BIT_ACCESS(CM1CON0,7)
// CM1CON0<C1HYS>
extern volatile __bit                   C1HYS               __at(0x4061);	// @ (0x80C * 8 + 1)
#define                                 C1HYS_bit           _BIT_ACCESS(CM1CON0,1)
// CM1CON1<C1INTN>
extern volatile __bit                   C1INTN              __at(0x4068);	// @ (0x80D * 8 + 0)
#define                                 C1INTN_bit          _BIT_ACCESS(CM1CON1,0)
// CM1CON1<C1INTP>
extern volatile __bit                   C1INTP              __at(0x4069);	// @ (0x80D * 8 + 1)
#define                                 C1INTP_bit          _BIT_ACCESS(CM1CON1,1)
// CM1NCH<C1NCH0>
extern volatile __bit                   C1NCH0              __at(0x4070);	// @ (0x80E * 8 + 0)
#define                                 C1NCH0_bit          _BIT_ACCESS(CM1NCH,0)
// CM1NCH<C1NCH1>
extern volatile __bit                   C1NCH1              __at(0x4071);	// @ (0x80E * 8 + 1)
#define                                 C1NCH1_bit          _BIT_ACCESS(CM1NCH,1)
// CM1NCH<C1NCH2>
extern volatile __bit                   C1NCH2              __at(0x4072);	// @ (0x80E * 8 + 2)
#define                                 C1NCH2_bit          _BIT_ACCESS(CM1NCH,2)
// CM1PCH<C1PCH0>
extern volatile __bit                   C1PCH0              __at(0x4078);	// @ (0x80F * 8 + 0)
#define                                 C1PCH0_bit          _BIT_ACCESS(CM1PCH,0)
// CM1PCH<C1PCH1>
extern volatile __bit                   C1PCH1              __at(0x4079);	// @ (0x80F * 8 + 1)
#define                                 C1PCH1_bit          _BIT_ACCESS(CM1PCH,1)
// CM1PCH<C1PCH2>
extern volatile __bit                   C1PCH2              __at(0x407A);	// @ (0x80F * 8 + 2)
#define                                 C1PCH2_bit          _BIT_ACCESS(CM1PCH,2)
// CM1CON0<C1POL>
extern volatile __bit                   C1POL               __at(0x4064);	// @ (0x80C * 8 + 4)
#define                                 C1POL_bit           _BIT_ACCESS(CM1CON0,4)
// CM1CON0<C1SP>
extern volatile __bit                   C1SP                __at(0x4062);	// @ (0x80C * 8 + 2)
#define                                 C1SP_bit            _BIT_ACCESS(CM1CON0,2)
// CM1CON0<C1SYNC>
extern volatile __bit                   C1SYNC              __at(0x4060);	// @ (0x80C * 8 + 0)
#define                                 C1SYNC_bit          _BIT_ACCESS(CM1CON0,0)
// CM2CON0<C2EN>
extern volatile __bit                   C2EN                __at(0x4087);	// @ (0x810 * 8 + 7)
#define                                 C2EN_bit            _BIT_ACCESS(CM2CON0,7)
// CM2CON0<C2HYS>
extern volatile __bit                   C2HYS               __at(0x4081);	// @ (0x810 * 8 + 1)
#define                                 C2HYS_bit           _BIT_ACCESS(CM2CON0,1)
// CM2CON1<C2INTN>
extern volatile __bit                   C2INTN              __at(0x4088);	// @ (0x811 * 8 + 0)
#define                                 C2INTN_bit          _BIT_ACCESS(CM2CON1,0)
// CM2CON1<C2INTP>
extern volatile __bit                   C2INTP              __at(0x4089);	// @ (0x811 * 8 + 1)
#define                                 C2INTP_bit          _BIT_ACCESS(CM2CON1,1)
// CM2NCH<C2NCH0>
extern volatile __bit                   C2NCH0              __at(0x4090);	// @ (0x812 * 8 + 0)
#define                                 C2NCH0_bit          _BIT_ACCESS(CM2NCH,0)
// CM2NCH<C2NCH1>
extern volatile __bit                   C2NCH1              __at(0x4091);	// @ (0x812 * 8 + 1)
#define                                 C2NCH1_bit          _BIT_ACCESS(CM2NCH,1)
// CM2NCH<C2NCH2>
extern volatile __bit                   C2NCH2              __at(0x4092);	// @ (0x812 * 8 + 2)
#define                                 C2NCH2_bit          _BIT_ACCESS(CM2NCH,2)
// CM2PCH<C2PCH0>
extern volatile __bit                   C2PCH0              __at(0x4098);	// @ (0x813 * 8 + 0)
#define                                 C2PCH0_bit          _BIT_ACCESS(CM2PCH,0)
// CM2PCH<C2PCH1>
extern volatile __bit                   C2PCH1              __at(0x4099);	// @ (0x813 * 8 + 1)
#define                                 C2PCH1_bit          _BIT_ACCESS(CM2PCH,1)
// CM2PCH<C2PCH2>
extern volatile __bit                   C2PCH2              __at(0x409A);	// @ (0x813 * 8 + 2)
#define                                 C2PCH2_bit          _BIT_ACCESS(CM2PCH,2)
// CM2CON0<C2POL>
extern volatile __bit                   C2POL               __at(0x4084);	// @ (0x810 * 8 + 4)
#define                                 C2POL_bit           _BIT_ACCESS(CM2CON0,4)
// CM2CON0<C2SP>
extern volatile __bit                   C2SP                __at(0x4082);	// @ (0x810 * 8 + 2)
#define                                 C2SP_bit            _BIT_ACCESS(CM2CON0,2)
// CM2CON0<C2SYNC>
extern volatile __bit                   C2SYNC              __at(0x4080);	// @ (0x810 * 8 + 0)
#define                                 C2SYNC_bit          _BIT_ACCESS(CM2CON0,0)
// TMR1L<CAL01>
extern volatile __bit                   CAL01               __at(0x1860);	// @ (0x30C * 8 + 0)
#define                                 CAL01_bit           _BIT_ACCESS(TMR1L,0)
// TMR1L<CAL11>
extern volatile __bit                   CAL11               __at(0x1861);	// @ (0x30C * 8 + 1)
#define                                 CAL11_bit           _BIT_ACCESS(TMR1L,1)
// TMR1L<CAL21>
extern volatile __bit                   CAL21               __at(0x1862);	// @ (0x30C * 8 + 2)
#define                                 CAL21_bit           _BIT_ACCESS(TMR1L,2)
// TMR1L<CAL31>
extern volatile __bit                   CAL31               __at(0x1863);	// @ (0x30C * 8 + 3)
#define                                 CAL31_bit           _BIT_ACCESS(TMR1L,3)
// TMR1L<CAL41>
extern volatile __bit                   CAL41               __at(0x1864);	// @ (0x30C * 8 + 4)
#define                                 CAL41_bit           _BIT_ACCESS(TMR1L,4)
// TMR1L<CAL51>
extern volatile __bit                   CAL51               __at(0x1865);	// @ (0x30C * 8 + 5)
#define                                 CAL51_bit           _BIT_ACCESS(TMR1L,5)
// TMR1L<CAL61>
extern volatile __bit                   CAL61               __at(0x1866);	// @ (0x30C * 8 + 6)
#define                                 CAL61_bit           _BIT_ACCESS(TMR1L,6)
// TMR1L<CAL71>
extern volatile __bit                   CAL71               __at(0x1867);	// @ (0x30C * 8 + 7)
#define                                 CAL71_bit           _BIT_ACCESS(TMR1L,7)
// ADCON3<CALC0>
extern volatile __bit                   CALC0               __at(0xE94C);	// @ (0x1D29 * 8 + 4)
#define                                 CALC0_bit           _BIT_ACCESS(ADCON3,4)
// ADCON3<CALC1>
extern volatile __bit                   CALC1               __at(0xE94D);	// @ (0x1D29 * 8 + 5)
#define                                 CALC1_bit           _BIT_ACCESS(ADCON3,5)
// ADCON3<CALC2>
extern volatile __bit                   CALC2               __at(0xE94E);	// @ (0x1D29 * 8 + 6)
#define                                 CALC2_bit           _BIT_ACCESS(ADCON3,6)
// STATUS<CARRY>
extern volatile __bit                   CARRY               __at(0x18);	// @ (0x3 * 8 + 0)
#define                                 CARRY_bit           _BIT_ACCESS(STATUS,0)
// CCP1CAP<CCP1CTS0>
extern volatile __bit                   CCP1CTS0            __at(0x2078);	// @ (0x40F * 8 + 0)
#define                                 CCP1CTS0_bit        _BIT_ACCESS(CCP1CAP,0)
// CCP1CAP<CCP1CTS1>
extern volatile __bit                   CCP1CTS1            __at(0x2079);	// @ (0x40F * 8 + 1)
#define                                 CCP1CTS1_bit        _BIT_ACCESS(CCP1CAP,1)
// CCP1CAP<CCP1CTS2>
extern volatile __bit                   CCP1CTS2            __at(0x207A);	// @ (0x40F * 8 + 2)
#define                                 CCP1CTS2_bit        _BIT_ACCESS(CCP1CAP,2)
// CCP1CAP<CCP1CTS3>
extern volatile __bit                   CCP1CTS3            __at(0x207B);	// @ (0x40F * 8 + 3)
#define                                 CCP1CTS3_bit        _BIT_ACCESS(CCP1CAP,3)
// CCP1CON<CCP1EN>
extern volatile __bit                   CCP1EN              __at(0x2077);	// @ (0x40E * 8 + 7)
#define                                 CCP1EN_bit          _BIT_ACCESS(CCP1CON,7)
// CCP1CON<CCP1FMT>
extern volatile __bit                   CCP1FMT             __at(0x2074);	// @ (0x40E * 8 + 4)
#define                                 CCP1FMT_bit         _BIT_ACCESS(CCP1CON,4)
// PIE2<CCP1IE>
extern volatile __bit                   CCP1IE              __at(0x4C5);	// @ (0x98 * 8 + 5)
#define                                 CCP1IE_bit          _BIT_ACCESS(PIE2,5)
// PIR2<CCP1IF>
extern volatile __bit                   CCP1IF              __at(0x475);	// @ (0x8E * 8 + 5)
#define                                 CCP1IF_bit          _BIT_ACCESS(PIR2,5)
// PMD1<CCP1MD>
extern volatile __bit                   CCP1MD              __at(0x86D);	// @ (0x10D * 8 + 5)
#define                                 CCP1MD_bit          _BIT_ACCESS(PMD1,5)
// CCP1CON<CCP1MODE0>
extern volatile __bit                   CCP1MODE0           __at(0x2070);	// @ (0x40E * 8 + 0)
#define                                 CCP1MODE0_bit       _BIT_ACCESS(CCP1CON,0)
// CCP1CON<CCP1MODE1>
extern volatile __bit                   CCP1MODE1           __at(0x2071);	// @ (0x40E * 8 + 1)
#define                                 CCP1MODE1_bit       _BIT_ACCESS(CCP1CON,1)
// CCP1CON<CCP1MODE2>
extern volatile __bit                   CCP1MODE2           __at(0x2072);	// @ (0x40E * 8 + 2)
#define                                 CCP1MODE2_bit       _BIT_ACCESS(CCP1CON,2)
// CCP1CON<CCP1MODE3>
extern volatile __bit                   CCP1MODE3           __at(0x2073);	// @ (0x40E * 8 + 3)
#define                                 CCP1MODE3_bit       _BIT_ACCESS(CCP1CON,3)
// CCP1CON<CCP1OUT>
extern volatile __bit                   CCP1OUT             __at(0x2075);	// @ (0x40E * 8 + 5)
#define                                 CCP1OUT_bit         _BIT_ACCESS(CCP1CON,5)
// CCP1PPS<CCP1PPS0>
extern volatile __bit                   CCP1PPS0            __at(0xF0F0);	// @ (0x1E1E * 8 + 0)
#define                                 CCP1PPS0_bit        _BIT_ACCESS(CCP1PPS,0)
// CCP1PPS<CCP1PPS1>
extern volatile __bit                   CCP1PPS1            __at(0xF0F1);	// @ (0x1E1E * 8 + 1)
#define                                 CCP1PPS1_bit        _BIT_ACCESS(CCP1PPS,1)
// CCP1PPS<CCP1PPS2>
extern volatile __bit                   CCP1PPS2            __at(0xF0F2);	// @ (0x1E1E * 8 + 2)
#define                                 CCP1PPS2_bit        _BIT_ACCESS(CCP1PPS,2)
// CCP1PPS<CCP1PPS3>
extern volatile __bit                   CCP1PPS3            __at(0xF0F3);	// @ (0x1E1E * 8 + 3)
#define                                 CCP1PPS3_bit        _BIT_ACCESS(CCP1PPS,3)
// CCP1PPS<CCP1PPS4>
extern volatile __bit                   CCP1PPS4            __at(0xF0F4);	// @ (0x1E1E * 8 + 4)
#define                                 CCP1PPS4_bit        _BIT_ACCESS(CCP1PPS,4)
// CCP2CAP<CCP2CTS0>
extern volatile __bit                   CCP2CTS0            __at(0x2098);	// @ (0x413 * 8 + 0)
#define                                 CCP2CTS0_bit        _BIT_ACCESS(CCP2CAP,0)
// CCP2CAP<CCP2CTS1>
extern volatile __bit                   CCP2CTS1            __at(0x2099);	// @ (0x413 * 8 + 1)
#define                                 CCP2CTS1_bit        _BIT_ACCESS(CCP2CAP,1)
// CCP2CAP<CCP2CTS2>
extern volatile __bit                   CCP2CTS2            __at(0x209A);	// @ (0x413 * 8 + 2)
#define                                 CCP2CTS2_bit        _BIT_ACCESS(CCP2CAP,2)
// CCP2CAP<CCP2CTS3>
extern volatile __bit                   CCP2CTS3            __at(0x209B);	// @ (0x413 * 8 + 3)
#define                                 CCP2CTS3_bit        _BIT_ACCESS(CCP2CAP,3)
// CCP2CON<CCP2EN>
extern volatile __bit                   CCP2EN              __at(0x2097);	// @ (0x412 * 8 + 7)
#define                                 CCP2EN_bit          _BIT_ACCESS(CCP2CON,7)
// CCP2CON<CCP2FMT>
extern volatile __bit                   CCP2FMT             __at(0x2094);	// @ (0x412 * 8 + 4)
#define                                 CCP2FMT_bit         _BIT_ACCESS(CCP2CON,4)
// PIE2<CCP2IE>
extern volatile __bit                   CCP2IE              __at(0x4C6);	// @ (0x98 * 8 + 6)
#define                                 CCP2IE_bit          _BIT_ACCESS(PIE2,6)
// PIR2<CCP2IF>
extern volatile __bit                   CCP2IF              __at(0x476);	// @ (0x8E * 8 + 6)
#define                                 CCP2IF_bit          _BIT_ACCESS(PIR2,6)
// PMD1<CCP2MD>
extern volatile __bit                   CCP2MD              __at(0x86E);	// @ (0x10D * 8 + 6)
#define                                 CCP2MD_bit          _BIT_ACCESS(PMD1,6)
// CCP2CON<CCP2MODE0>
extern volatile __bit                   CCP2MODE0           __at(0x2090);	// @ (0x412 * 8 + 0)
#define                                 CCP2MODE0_bit       _BIT_ACCESS(CCP2CON,0)
// CCP2CON<CCP2MODE1>
extern volatile __bit                   CCP2MODE1           __at(0x2091);	// @ (0x412 * 8 + 1)
#define                                 CCP2MODE1_bit       _BIT_ACCESS(CCP2CON,1)
// CCP2CON<CCP2MODE2>
extern volatile __bit                   CCP2MODE2           __at(0x2092);	// @ (0x412 * 8 + 2)
#define                                 CCP2MODE2_bit       _BIT_ACCESS(CCP2CON,2)
// CCP2CON<CCP2MODE3>
extern volatile __bit                   CCP2MODE3           __at(0x2093);	// @ (0x412 * 8 + 3)
#define                                 CCP2MODE3_bit       _BIT_ACCESS(CCP2CON,3)
// CCP2CON<CCP2OUT>
extern volatile __bit                   CCP2OUT             __at(0x2095);	// @ (0x412 * 8 + 5)
#define                                 CCP2OUT_bit         _BIT_ACCESS(CCP2CON,5)
// CCP2PPS<CCP2PPS0>
extern volatile __bit                   CCP2PPS0            __at(0xF0F8);	// @ (0x1E1F * 8 + 0)
#define                                 CCP2PPS0_bit        _BIT_ACCESS(CCP2PPS,0)
// CCP2PPS<CCP2PPS1>
extern volatile __bit                   CCP2PPS1            __at(0xF0F9);	// @ (0x1E1F * 8 + 1)
#define                                 CCP2PPS1_bit        _BIT_ACCESS(CCP2PPS,1)
// CCP2PPS<CCP2PPS2>
extern volatile __bit                   CCP2PPS2            __at(0xF0FA);	// @ (0x1E1F * 8 + 2)
#define                                 CCP2PPS2_bit        _BIT_ACCESS(CCP2PPS,2)
// CCP2PPS<CCP2PPS3>
extern volatile __bit                   CCP2PPS3            __at(0xF0FB);	// @ (0x1E1F * 8 + 3)
#define                                 CCP2PPS3_bit        _BIT_ACCESS(CCP2PPS,3)
// CCP2PPS<CCP2PPS4>
extern volatile __bit                   CCP2PPS4            __at(0xF0FC);	// @ (0x1E1F * 8 + 4)
#define                                 CCP2PPS4_bit        _BIT_ACCESS(CCP2PPS,4)
// FVRCON<CDAFVR0>
extern volatile __bit                   CDAFVR0             __at(0x1062);	// @ (0x20C * 8 + 2)
#define                                 CDAFVR0_bit         _BIT_ACCESS(FVRCON,2)
// FVRCON<CDAFVR1>
extern volatile __bit                   CDAFVR1             __at(0x1063);	// @ (0x20C * 8 + 3)
#define                                 CDAFVR1_bit         _BIT_ACCESS(FVRCON,3)
// OSCCON2<CDIV0>
extern volatile __bit                   CDIV0               __at(0x1470);	// @ (0x28E * 8 + 0)
#define                                 CDIV0_bit           _BIT_ACCESS(OSCCON2,0)
// OSCCON2<CDIV1>
extern volatile __bit                   CDIV1               __at(0x1471);	// @ (0x28E * 8 + 1)
#define                                 CDIV1_bit           _BIT_ACCESS(OSCCON2,1)
// OSCCON2<CDIV2>
extern volatile __bit                   CDIV2               __at(0x1472);	// @ (0x28E * 8 + 2)
#define                                 CDIV2_bit           _BIT_ACCESS(OSCCON2,2)
// OSCCON2<CDIV3>
extern volatile __bit                   CDIV3               __at(0x1473);	// @ (0x28E * 8 + 3)
#define                                 CDIV3_bit           _BIT_ACCESS(OSCCON2,3)
// ADCG1A<CGA0>
extern volatile __bit                   CGA0                __at(0xE970);	// @ (0x1D2E * 8 + 0)
#define                                 CGA0_bit            _BIT_ACCESS(ADCG1A,0)
// ADCG1A<CGA1>
extern volatile __bit                   CGA1                __at(0xE971);	// @ (0x1D2E * 8 + 1)
#define                                 CGA1_bit            _BIT_ACCESS(ADCG1A,1)
// ADCG1A<CGA2>
extern volatile __bit                   CGA2                __at(0xE972);	// @ (0x1D2E * 8 + 2)
#define                                 CGA2_bit            _BIT_ACCESS(ADCG1A,2)
// ADCG1A<CGA4>
extern volatile __bit                   CGA4                __at(0xE974);	// @ (0x1D2E * 8 + 4)
#define                                 CGA4_bit            _BIT_ACCESS(ADCG1A,4)
// ADCG1A<CGA5>
extern volatile __bit                   CGA5                __at(0xE975);	// @ (0x1D2E * 8 + 5)
#define                                 CGA5_bit            _BIT_ACCESS(ADCG1A,5)
// ADCG1C<CGC0>
extern volatile __bit                   CGC0                __at(0xE980);	// @ (0x1D30 * 8 + 0)
#define                                 CGC0_bit            _BIT_ACCESS(ADCG1C,0)
// ADCG1C<CGC1>
extern volatile __bit                   CGC1                __at(0xE981);	// @ (0x1D30 * 8 + 1)
#define                                 CGC1_bit            _BIT_ACCESS(ADCG1C,1)
// ADCG1C<CGC2>
extern volatile __bit                   CGC2                __at(0xE982);	// @ (0x1D30 * 8 + 2)
#define                                 CGC2_bit            _BIT_ACCESS(ADCG1C,2)
// ADCG1C<CGC3>
extern volatile __bit                   CGC3                __at(0xE983);	// @ (0x1D30 * 8 + 3)
#define                                 CGC3_bit            _BIT_ACCESS(ADCG1C,3)
// ADCG1C<CGC4>
extern volatile __bit                   CGC4                __at(0xE984);	// @ (0x1D30 * 8 + 4)
#define                                 CGC4_bit            _BIT_ACCESS(ADCG1C,4)
// ADCG1C<CGC5>
extern volatile __bit                   CGC5                __at(0xE985);	// @ (0x1D30 * 8 + 5)
#define                                 CGC5_bit            _BIT_ACCESS(ADCG1C,5)
// SSP1STAT<CKE>
extern volatile __bit                   CKE                 __at(0x3C7E);	// @ (0x78F * 8 + 6)
#define                                 CKE_bit             _BIT_ACCESS(SSP1STAT,6)
// SSP1STAT<CKE1>
extern volatile __bit                   CKE1                __at(0x3C7E);	// @ (0x78F * 8 + 6)
#define                                 CKE1_bit            _BIT_ACCESS(SSP1STAT,6)
// SSP1CON1<CKP>
extern volatile __bit                   CKP                 __at(0x3C84);	// @ (0x790 * 8 + 4)
#define                                 CKP_bit             _BIT_ACCESS(SSP1CON1,4)
// SSP1CON1<CKP1>
extern volatile __bit                   CKP1                __at(0x3C84);	// @ (0x790 * 8 + 4)
#define                                 CKP1_bit            _BIT_ACCESS(SSP1CON1,4)
// T2HLT<CKPOL>
extern volatile __bit                   CKPOL               __at(0x1C7E);	// @ (0x38F * 8 + 6)
#define                                 CKPOL_bit           _BIT_ACCESS(T2HLT,6)
// T0CON1<CKPS3>
extern volatile __bit                   CKPS3               __at(0xCFB);	// @ (0x19F * 8 + 3)
#define                                 CKPS3_bit           _BIT_ACCESS(T0CON1,3)
// T2HLT<CKSYNC>
extern volatile __bit                   CKSYNC              __at(0x1C7D);	// @ (0x38F * 8 + 5)
#define                                 CKSYNC_bit          _BIT_ACCESS(T2HLT,5)
// PIE7<CLB1IE0>
extern volatile __bit                   CLB1IE0             __at(0x4E8);	// @ (0x9D * 8 + 0)
#define                                 CLB1IE0_bit         _BIT_ACCESS(PIE7,0)
// PIE7<CLB1IE1>
extern volatile __bit                   CLB1IE1             __at(0x4E9);	// @ (0x9D * 8 + 1)
#define                                 CLB1IE1_bit         _BIT_ACCESS(PIE7,1)
// PIE7<CLB1IE2>
extern volatile __bit                   CLB1IE2             __at(0x4EA);	// @ (0x9D * 8 + 2)
#define                                 CLB1IE2_bit         _BIT_ACCESS(PIE7,2)
// PIE7<CLB1IE3>
extern volatile __bit                   CLB1IE3             __at(0x4EB);	// @ (0x9D * 8 + 3)
#define                                 CLB1IE3_bit         _BIT_ACCESS(PIE7,3)
// PIR7<CLB1IF0>
extern volatile __bit                   CLB1IF0             __at(0x498);	// @ (0x93 * 8 + 0)
#define                                 CLB1IF0_bit         _BIT_ACCESS(PIR7,0)
// PIR7<CLB1IF1>
extern volatile __bit                   CLB1IF1             __at(0x499);	// @ (0x93 * 8 + 1)
#define                                 CLB1IF1_bit         _BIT_ACCESS(PIR7,1)
// PIR7<CLB1IF2>
extern volatile __bit                   CLB1IF2             __at(0x49A);	// @ (0x93 * 8 + 2)
#define                                 CLB1IF2_bit         _BIT_ACCESS(PIR7,2)
// PIR7<CLB1IF3>
extern volatile __bit                   CLB1IF3             __at(0x49B);	// @ (0x93 * 8 + 3)
#define                                 CLB1IF3_bit         _BIT_ACCESS(PIR7,3)
// CLBCON<CLBEN>
extern volatile __bit                   CLBEN               __at(0x2867);	// @ (0x50C * 8 + 7)
#define                                 CLBEN_bit           _BIT_ACCESS(CLBCON,7)
// PMD4<CLBMD>
extern volatile __bit                   CLBMD               __at(0x887);	// @ (0x110 * 8 + 7)
#define                                 CLBMD_bit           _BIT_ACCESS(PMD4,7)
// CLBSWINL<CLBSWIN0>
extern volatile __bit                   CLBSWIN0            __at(0x2880);	// @ (0x510 * 8 + 0)
#define                                 CLBSWIN0_bit        _BIT_ACCESS(CLBSWINL,0)
// CLBSWINL<CLBSWIN1>
extern volatile __bit                   CLBSWIN1            __at(0x2881);	// @ (0x510 * 8 + 1)
#define                                 CLBSWIN1_bit        _BIT_ACCESS(CLBSWINL,1)
// CLBSWINM<CLBSWIN10>
extern volatile __bit                   CLBSWIN10           __at(0x287A);	// @ (0x50F * 8 + 2)
#define                                 CLBSWIN10_bit       _BIT_ACCESS(CLBSWINM,2)
// CLBSWINM<CLBSWIN11>
extern volatile __bit                   CLBSWIN11           __at(0x287B);	// @ (0x50F * 8 + 3)
#define                                 CLBSWIN11_bit       _BIT_ACCESS(CLBSWINM,3)
// CLBSWINM<CLBSWIN12>
extern volatile __bit                   CLBSWIN12           __at(0x287C);	// @ (0x50F * 8 + 4)
#define                                 CLBSWIN12_bit       _BIT_ACCESS(CLBSWINM,4)
// CLBSWINM<CLBSWIN13>
extern volatile __bit                   CLBSWIN13           __at(0x287D);	// @ (0x50F * 8 + 5)
#define                                 CLBSWIN13_bit       _BIT_ACCESS(CLBSWINM,5)
// CLBSWINM<CLBSWIN14>
extern volatile __bit                   CLBSWIN14           __at(0x287E);	// @ (0x50F * 8 + 6)
#define                                 CLBSWIN14_bit       _BIT_ACCESS(CLBSWINM,6)
// CLBSWINM<CLBSWIN15>
extern volatile __bit                   CLBSWIN15           __at(0x287F);	// @ (0x50F * 8 + 7)
#define                                 CLBSWIN15_bit       _BIT_ACCESS(CLBSWINM,7)
// CLBSWINH<CLBSWIN16>
extern volatile __bit                   CLBSWIN16           __at(0x2870);	// @ (0x50E * 8 + 0)
#define                                 CLBSWIN16_bit       _BIT_ACCESS(CLBSWINH,0)
// CLBSWINH<CLBSWIN17>
extern volatile __bit                   CLBSWIN17           __at(0x2871);	// @ (0x50E * 8 + 1)
#define                                 CLBSWIN17_bit       _BIT_ACCESS(CLBSWINH,1)
// CLBSWINH<CLBSWIN18>
extern volatile __bit                   CLBSWIN18           __at(0x2872);	// @ (0x50E * 8 + 2)
#define                                 CLBSWIN18_bit       _BIT_ACCESS(CLBSWINH,2)
// CLBSWINH<CLBSWIN19>
extern volatile __bit                   CLBSWIN19           __at(0x2873);	// @ (0x50E * 8 + 3)
#define                                 CLBSWIN19_bit       _BIT_ACCESS(CLBSWINH,3)
// CLBSWINL<CLBSWIN2>
extern volatile __bit                   CLBSWIN2            __at(0x2882);	// @ (0x510 * 8 + 2)
#define                                 CLBSWIN2_bit        _BIT_ACCESS(CLBSWINL,2)
// CLBSWINH<CLBSWIN20>
extern volatile __bit                   CLBSWIN20           __at(0x2874);	// @ (0x50E * 8 + 4)
#define                                 CLBSWIN20_bit       _BIT_ACCESS(CLBSWINH,4)
// CLBSWINH<CLBSWIN21>
extern volatile __bit                   CLBSWIN21           __at(0x2875);	// @ (0x50E * 8 + 5)
#define                                 CLBSWIN21_bit       _BIT_ACCESS(CLBSWINH,5)
// CLBSWINH<CLBSWIN22>
extern volatile __bit                   CLBSWIN22           __at(0x2876);	// @ (0x50E * 8 + 6)
#define                                 CLBSWIN22_bit       _BIT_ACCESS(CLBSWINH,6)
// CLBSWINH<CLBSWIN23>
extern volatile __bit                   CLBSWIN23           __at(0x2877);	// @ (0x50E * 8 + 7)
#define                                 CLBSWIN23_bit       _BIT_ACCESS(CLBSWINH,7)
// CLBSWINU<CLBSWIN24>
extern volatile __bit                   CLBSWIN24           __at(0x2868);	// @ (0x50D * 8 + 0)
#define                                 CLBSWIN24_bit       _BIT_ACCESS(CLBSWINU,0)
// CLBSWINU<CLBSWIN25>
extern volatile __bit                   CLBSWIN25           __at(0x2869);	// @ (0x50D * 8 + 1)
#define                                 CLBSWIN25_bit       _BIT_ACCESS(CLBSWINU,1)
// CLBSWINU<CLBSWIN26>
extern volatile __bit                   CLBSWIN26           __at(0x286A);	// @ (0x50D * 8 + 2)
#define                                 CLBSWIN26_bit       _BIT_ACCESS(CLBSWINU,2)
// CLBSWINU<CLBSWIN27>
extern volatile __bit                   CLBSWIN27           __at(0x286B);	// @ (0x50D * 8 + 3)
#define                                 CLBSWIN27_bit       _BIT_ACCESS(CLBSWINU,3)
// CLBSWINU<CLBSWIN28>
extern volatile __bit                   CLBSWIN28           __at(0x286C);	// @ (0x50D * 8 + 4)
#define                                 CLBSWIN28_bit       _BIT_ACCESS(CLBSWINU,4)
// CLBSWINU<CLBSWIN29>
extern volatile __bit                   CLBSWIN29           __at(0x286D);	// @ (0x50D * 8 + 5)
#define                                 CLBSWIN29_bit       _BIT_ACCESS(CLBSWINU,5)
// CLBSWINL<CLBSWIN3>
extern volatile __bit                   CLBSWIN3            __at(0x2883);	// @ (0x510 * 8 + 3)
#define                                 CLBSWIN3_bit        _BIT_ACCESS(CLBSWINL,3)
// CLBSWINU<CLBSWIN30>
extern volatile __bit                   CLBSWIN30           __at(0x286E);	// @ (0x50D * 8 + 6)
#define                                 CLBSWIN30_bit       _BIT_ACCESS(CLBSWINU,6)
// CLBSWINU<CLBSWIN31>
extern volatile __bit                   CLBSWIN31           __at(0x286F);	// @ (0x50D * 8 + 7)
#define                                 CLBSWIN31_bit       _BIT_ACCESS(CLBSWINU,7)
// CLBSWINL<CLBSWIN4>
extern volatile __bit                   CLBSWIN4            __at(0x2884);	// @ (0x510 * 8 + 4)
#define                                 CLBSWIN4_bit        _BIT_ACCESS(CLBSWINL,4)
// CLBSWINL<CLBSWIN5>
extern volatile __bit                   CLBSWIN5            __at(0x2885);	// @ (0x510 * 8 + 5)
#define                                 CLBSWIN5_bit        _BIT_ACCESS(CLBSWINL,5)
// CLBSWINL<CLBSWIN6>
extern volatile __bit                   CLBSWIN6            __at(0x2886);	// @ (0x510 * 8 + 6)
#define                                 CLBSWIN6_bit        _BIT_ACCESS(CLBSWINL,6)
// CLBSWINL<CLBSWIN7>
extern volatile __bit                   CLBSWIN7            __at(0x2887);	// @ (0x510 * 8 + 7)
#define                                 CLBSWIN7_bit        _BIT_ACCESS(CLBSWINL,7)
// CLBSWINM<CLBSWIN8>
extern volatile __bit                   CLBSWIN8            __at(0x2878);	// @ (0x50F * 8 + 0)
#define                                 CLBSWIN8_bit        _BIT_ACCESS(CLBSWINM,0)
// CLBSWINM<CLBSWIN9>
extern volatile __bit                   CLBSWIN9            __at(0x2879);	// @ (0x50F * 8 + 1)
#define                                 CLBSWIN9_bit        _BIT_ACCESS(CLBSWINM,1)
// PIE4<CLC1IE>
extern volatile __bit                   CLC1IE              __at(0x4D2);	// @ (0x9A * 8 + 2)
#define                                 CLC1IE_bit          _BIT_ACCESS(PIE4,2)
// PIR4<CLC1IF>
extern volatile __bit                   CLC1IF              __at(0x482);	// @ (0x90 * 8 + 2)
#define                                 CLC1IF_bit          _BIT_ACCESS(PIR4,2)
// PMD2<CLC1MD>
extern volatile __bit                   CLC1MD              __at(0x875);	// @ (0x10E * 8 + 5)
#define                                 CLC1MD_bit          _BIT_ACCESS(PMD2,5)
// CLCDATA<CLC1OUT>
extern volatile __bit                   CLC1OUT             __at(0x34B8);	// @ (0x697 * 8 + 0)
#define                                 CLC1OUT_bit         _BIT_ACCESS(CLCDATA,0)
// PIE4<CLC2IE>
extern volatile __bit                   CLC2IE              __at(0x4D3);	// @ (0x9A * 8 + 3)
#define                                 CLC2IE_bit          _BIT_ACCESS(PIE4,3)
// PIR4<CLC2IF>
extern volatile __bit                   CLC2IF              __at(0x483);	// @ (0x90 * 8 + 3)
#define                                 CLC2IF_bit          _BIT_ACCESS(PIR4,3)
// PMD2<CLC2MD>
extern volatile __bit                   CLC2MD              __at(0x876);	// @ (0x10E * 8 + 6)
#define                                 CLC2MD_bit          _BIT_ACCESS(PMD2,6)
// CLCDATA<CLC2OUT>
extern volatile __bit                   CLC2OUT             __at(0x34B9);	// @ (0x697 * 8 + 1)
#define                                 CLC2OUT_bit         _BIT_ACCESS(CLCDATA,1)
// PIE4<CLC3IE>
extern volatile __bit                   CLC3IE              __at(0x4D4);	// @ (0x9A * 8 + 4)
#define                                 CLC3IE_bit          _BIT_ACCESS(PIE4,4)
// PIR4<CLC3IF>
extern volatile __bit                   CLC3IF              __at(0x484);	// @ (0x90 * 8 + 4)
#define                                 CLC3IF_bit          _BIT_ACCESS(PIR4,4)
// PMD2<CLC3MD>
extern volatile __bit                   CLC3MD              __at(0x877);	// @ (0x10E * 8 + 7)
#define                                 CLC3MD_bit          _BIT_ACCESS(PMD2,7)
// CLCDATA<CLC3OUT>
extern volatile __bit                   CLC3OUT             __at(0x34BA);	// @ (0x697 * 8 + 2)
#define                                 CLC3OUT_bit         _BIT_ACCESS(CLCDATA,2)
// PIE4<CLC4IE>
extern volatile __bit                   CLC4IE              __at(0x4D5);	// @ (0x9A * 8 + 5)
#define                                 CLC4IE_bit          _BIT_ACCESS(PIE4,5)
// PIR4<CLC4IF>
extern volatile __bit                   CLC4IF              __at(0x485);	// @ (0x90 * 8 + 5)
#define                                 CLC4IF_bit          _BIT_ACCESS(PIR4,5)
// PMD3<CLC4MD>
extern volatile __bit                   CLC4MD              __at(0x878);	// @ (0x10F * 8 + 0)
#define                                 CLC4MD_bit          _BIT_ACCESS(PMD3,0)
// CLCDATA<CLC4OUT>
extern volatile __bit                   CLC4OUT             __at(0x34BB);	// @ (0x697 * 8 + 3)
#define                                 CLC4OUT_bit         _BIT_ACCESS(CLCDATA,3)
// CLCIN0PPS<CLCIN0PPS0>
extern volatile __bit                   CLCIN0PPS0          __at(0xF1E8);	// @ (0x1E3D * 8 + 0)
#define                                 CLCIN0PPS0_bit      _BIT_ACCESS(CLCIN0PPS,0)
// CLCIN0PPS<CLCIN0PPS1>
extern volatile __bit                   CLCIN0PPS1          __at(0xF1E9);	// @ (0x1E3D * 8 + 1)
#define                                 CLCIN0PPS1_bit      _BIT_ACCESS(CLCIN0PPS,1)
// CLCIN0PPS<CLCIN0PPS2>
extern volatile __bit                   CLCIN0PPS2          __at(0xF1EA);	// @ (0x1E3D * 8 + 2)
#define                                 CLCIN0PPS2_bit      _BIT_ACCESS(CLCIN0PPS,2)
// CLCIN0PPS<CLCIN0PPS3>
extern volatile __bit                   CLCIN0PPS3          __at(0xF1EB);	// @ (0x1E3D * 8 + 3)
#define                                 CLCIN0PPS3_bit      _BIT_ACCESS(CLCIN0PPS,3)
// CLCIN0PPS<CLCIN0PPS4>
extern volatile __bit                   CLCIN0PPS4          __at(0xF1EC);	// @ (0x1E3D * 8 + 4)
#define                                 CLCIN0PPS4_bit      _BIT_ACCESS(CLCIN0PPS,4)
// CLCIN1PPS<CLCIN1PPS0>
extern volatile __bit                   CLCIN1PPS0          __at(0xF1F0);	// @ (0x1E3E * 8 + 0)
#define                                 CLCIN1PPS0_bit      _BIT_ACCESS(CLCIN1PPS,0)
// CLCIN1PPS<CLCIN1PPS1>
extern volatile __bit                   CLCIN1PPS1          __at(0xF1F1);	// @ (0x1E3E * 8 + 1)
#define                                 CLCIN1PPS1_bit      _BIT_ACCESS(CLCIN1PPS,1)
// CLCIN1PPS<CLCIN1PPS2>
extern volatile __bit                   CLCIN1PPS2          __at(0xF1F2);	// @ (0x1E3E * 8 + 2)
#define                                 CLCIN1PPS2_bit      _BIT_ACCESS(CLCIN1PPS,2)
// CLCIN1PPS<CLCIN1PPS3>
extern volatile __bit                   CLCIN1PPS3          __at(0xF1F3);	// @ (0x1E3E * 8 + 3)
#define                                 CLCIN1PPS3_bit      _BIT_ACCESS(CLCIN1PPS,3)
// CLCIN1PPS<CLCIN1PPS4>
extern volatile __bit                   CLCIN1PPS4          __at(0xF1F4);	// @ (0x1E3E * 8 + 4)
#define                                 CLCIN1PPS4_bit      _BIT_ACCESS(CLCIN1PPS,4)
// CLCIN2PPS<CLCIN2PPS0>
extern volatile __bit                   CLCIN2PPS0          __at(0xF1F8);	// @ (0x1E3F * 8 + 0)
#define                                 CLCIN2PPS0_bit      _BIT_ACCESS(CLCIN2PPS,0)
// CLCIN2PPS<CLCIN2PPS1>
extern volatile __bit                   CLCIN2PPS1          __at(0xF1F9);	// @ (0x1E3F * 8 + 1)
#define                                 CLCIN2PPS1_bit      _BIT_ACCESS(CLCIN2PPS,1)
// CLCIN2PPS<CLCIN2PPS2>
extern volatile __bit                   CLCIN2PPS2          __at(0xF1FA);	// @ (0x1E3F * 8 + 2)
#define                                 CLCIN2PPS2_bit      _BIT_ACCESS(CLCIN2PPS,2)
// CLCIN2PPS<CLCIN2PPS3>
extern volatile __bit                   CLCIN2PPS3          __at(0xF1FB);	// @ (0x1E3F * 8 + 3)
#define                                 CLCIN2PPS3_bit      _BIT_ACCESS(CLCIN2PPS,3)
// CLCIN2PPS<CLCIN2PPS4>
extern volatile __bit                   CLCIN2PPS4          __at(0xF1FC);	// @ (0x1E3F * 8 + 4)
#define                                 CLCIN2PPS4_bit      _BIT_ACCESS(CLCIN2PPS,4)
// CLCIN3PPS<CLCIN3PPS0>
extern volatile __bit                   CLCIN3PPS0          __at(0xF200);	// @ (0x1E40 * 8 + 0)
#define                                 CLCIN3PPS0_bit      _BIT_ACCESS(CLCIN3PPS,0)
// CLCIN3PPS<CLCIN3PPS1>
extern volatile __bit                   CLCIN3PPS1          __at(0xF201);	// @ (0x1E40 * 8 + 1)
#define                                 CLCIN3PPS1_bit      _BIT_ACCESS(CLCIN3PPS,1)
// CLCIN3PPS<CLCIN3PPS2>
extern volatile __bit                   CLCIN3PPS2          __at(0xF202);	// @ (0x1E40 * 8 + 2)
#define                                 CLCIN3PPS2_bit      _BIT_ACCESS(CLCIN3PPS,2)
// CLCIN3PPS<CLCIN3PPS3>
extern volatile __bit                   CLCIN3PPS3          __at(0xF203);	// @ (0x1E40 * 8 + 3)
#define                                 CLCIN3PPS3_bit      _BIT_ACCESS(CLCIN3PPS,3)
// CLCIN3PPS<CLCIN3PPS4>
extern volatile __bit                   CLCIN3PPS4          __at(0xF204);	// @ (0x1E40 * 8 + 4)
#define                                 CLCIN3PPS4_bit      _BIT_ACCESS(CLCIN3PPS,4)
// CLBCLK<CLK0>
extern volatile __bit                   CLK0                __at(0x28A8);	// @ (0x515 * 8 + 0)
#define                                 CLK0_bit            _BIT_ACCESS(CLBCLK,0)
// CLBCLK<CLK1>
extern volatile __bit                   CLK1                __at(0x28A9);	// @ (0x515 * 8 + 1)
#define                                 CLK1_bit            _BIT_ACCESS(CLBCLK,1)
// CLBCLK<CLK2>
extern volatile __bit                   CLK2                __at(0x28AA);	// @ (0x515 * 8 + 2)
#define                                 CLK2_bit            _BIT_ACCESS(CLBCLK,2)
// CLBCLK<CLK3>
extern volatile __bit                   CLK3                __at(0x28AB);	// @ (0x515 * 8 + 3)
#define                                 CLK3_bit            _BIT_ACCESS(CLBCLK,3)
// PIE5<CM1IE>
extern volatile __bit                   CM1IE               __at(0x4DE);	// @ (0x9B * 8 + 6)
#define                                 CM1IE_bit           _BIT_ACCESS(PIE5,6)
// PIR5<CM1IF>
extern volatile __bit                   CM1IF               __at(0x48E);	// @ (0x91 * 8 + 6)
#define                                 CM1IF_bit           _BIT_ACCESS(PIR5,6)
// PMD3<CM1MD>
extern volatile __bit                   CM1MD               __at(0x87E);	// @ (0x10F * 8 + 6)
#define                                 CM1MD_bit           _BIT_ACCESS(PMD3,6)
// PIE5<CM2IE>
extern volatile __bit                   CM2IE               __at(0x4DF);	// @ (0x9B * 8 + 7)
#define                                 CM2IE_bit           _BIT_ACCESS(PIE5,7)
// PIR5<CM2IF>
extern volatile __bit                   CM2IF               __at(0x48F);	// @ (0x91 * 8 + 7)
#define                                 CM2IF_bit           _BIT_ACCESS(PIR5,7)
// PMD3<CM2MD>
extern volatile __bit                   CM2MD               __at(0x87F);	// @ (0x10F * 8 + 7)
#define                                 CM2MD_bit           _BIT_ACCESS(PMD3,7)
// ADCNT<CNT0>
extern volatile __bit                   CNT0                __at(0xE8C8);	// @ (0x1D19 * 8 + 0)
#define                                 CNT0_bit            _BIT_ACCESS(ADCNT,0)
// ADCNT<CNT1>
extern volatile __bit                   CNT1                __at(0xE8C9);	// @ (0x1D19 * 8 + 1)
#define                                 CNT1_bit            _BIT_ACCESS(ADCNT,1)
// ADCNT<CNT2>
extern volatile __bit                   CNT2                __at(0xE8CA);	// @ (0x1D19 * 8 + 2)
#define                                 CNT2_bit            _BIT_ACCESS(ADCNT,2)
// ADCNT<CNT3>
extern volatile __bit                   CNT3                __at(0xE8CB);	// @ (0x1D19 * 8 + 3)
#define                                 CNT3_bit            _BIT_ACCESS(ADCNT,3)
// ADCNT<CNT4>
extern volatile __bit                   CNT4                __at(0xE8CC);	// @ (0x1D19 * 8 + 4)
#define                                 CNT4_bit            _BIT_ACCESS(ADCNT,4)
// ADCNT<CNT5>
extern volatile __bit                   CNT5                __at(0xE8CD);	// @ (0x1D19 * 8 + 5)
#define                                 CNT5_bit            _BIT_ACCESS(ADCNT,5)
// ADCNT<CNT6>
extern volatile __bit                   CNT6                __at(0xE8CE);	// @ (0x1D19 * 8 + 6)
#define                                 CNT6_bit            _BIT_ACCESS(ADCNT,6)
// ADCNT<CNT7>
extern volatile __bit                   CNT7                __at(0xE8CF);	// @ (0x1D19 * 8 + 7)
#define                                 CNT7_bit            _BIT_ACCESS(ADCNT,7)
// ADCON0<CONT>
extern volatile __bit                   CONT                __at(0xE936);	// @ (0x1D26 * 8 + 6)
#define                                 CONT_bit            _BIT_ACCESS(ADCON0,6)
// OSCCON2<COSC0>
extern volatile __bit                   COSC0               __at(0x1474);	// @ (0x28E * 8 + 4)
#define                                 COSC0_bit           _BIT_ACCESS(OSCCON2,4)
// OSCCON2<COSC1>
extern volatile __bit                   COSC1               __at(0x1475);	// @ (0x28E * 8 + 5)
#define                                 COSC1_bit           _BIT_ACCESS(OSCCON2,5)
// OSCCON2<COSC2>
extern volatile __bit                   COSC2               __at(0x1476);	// @ (0x28E * 8 + 6)
#define                                 COSC2_bit           _BIT_ACCESS(OSCCON2,6)
// T2HLT<CPOL>
extern volatile __bit                   CPOL                __at(0x1C7E);	// @ (0x38F * 8 + 6)
#define                                 CPOL_bit            _BIT_ACCESS(T2HLT,6)
// CPCON<CPOS>
extern volatile __bit                   CPOS                __at(0x106D);	// @ (0x20D * 8 + 5)
#define                                 CPOS_bit            _BIT_ACCESS(CPCON,5)
// CPCON<CPRDY>
extern volatile __bit                   CPRDY               __at(0x1068);	// @ (0x20D * 8 + 0)
#define                                 CPRDY_bit           _BIT_ACCESS(CPCON,0)
// CPCON<CPREQ>
extern volatile __bit                   CPREQ               __at(0x106A);	// @ (0x20D * 8 + 2)
#define                                 CPREQ_bit           _BIT_ACCESS(CPCON,2)
// CPCON<CPT>
extern volatile __bit                   CPT                 __at(0x1069);	// @ (0x20D * 8 + 1)
#define                                 CPT_bit             _BIT_ACCESS(CPCON,1)
// CRCCON0<CRCBUSY>
extern volatile __bit                   CRCBUSY             __at(0xE52D);	// @ (0x1CA5 * 8 + 5)
#define                                 CRCBUSY_bit         _BIT_ACCESS(CRCCON0,5)
// CRCCON0<CRCEN>
extern volatile __bit                   CRCEN               __at(0xE52F);	// @ (0x1CA5 * 8 + 7)
#define                                 CRCEN_bit           _BIT_ACCESS(CRCCON0,7)
// CRCCON0<CRCGO>
extern volatile __bit                   CRCGO               __at(0xE52E);	// @ (0x1CA5 * 8 + 6)
#define                                 CRCGO_bit           _BIT_ACCESS(CRCCON0,6)
// PIE1<CRCIE>
extern volatile __bit                   CRCIE               __at(0x4B9);	// @ (0x97 * 8 + 1)
#define                                 CRCIE_bit           _BIT_ACCESS(PIE1,1)
// PIR1<CRCIF>
extern volatile __bit                   CRCIF               __at(0x469);	// @ (0x8D * 8 + 1)
#define                                 CRCIF_bit           _BIT_ACCESS(PIR1,1)
// PMD0<CRCMD>
extern volatile __bit                   CRCMD               __at(0x861);	// @ (0x10C * 8 + 1)
#define                                 CRCMD_bit           _BIT_ACCESS(PMD0,1)
// RC1STA<CREN>
extern volatile __bit                   CREN                __at(0x3884);	// @ (0x710 * 8 + 4)
#define                                 CREN_bit            _BIT_ACCESS(RC1STA,4)
// ADCON2<CRS0>
extern volatile __bit                   CRS0                __at(0xE944);	// @ (0x1D28 * 8 + 4)
#define                                 CRS0_bit            _BIT_ACCESS(ADCON2,4)
// ADCON2<CRS1>
extern volatile __bit                   CRS1                __at(0xE945);	// @ (0x1D28 * 8 + 5)
#define                                 CRS1_bit            _BIT_ACCESS(ADCON2,5)
// ADCON2<CRS2>
extern volatile __bit                   CRS2                __at(0xE946);	// @ (0x1D28 * 8 + 6)
#define                                 CRS2_bit            _BIT_ACCESS(ADCON2,6)
// ADCON0<CS>
extern volatile __bit                   CS                  __at(0xE934);	// @ (0x1D26 * 8 + 4)
#define                                 CS_bit              _BIT_ACCESS(ADCON0,4)
// ADCLK<CS5>
extern volatile __bit                   CS5                 __at(0xE96D);	// @ (0x1D2D * 8 + 5)
#define                                 CS5_bit             _BIT_ACCESS(ADCLK,5)
// TX1STA<CSRC>
extern volatile __bit                   CSRC                __at(0x388F);	// @ (0x711 * 8 + 7)
#define                                 CSRC_bit            _BIT_ACCESS(TX1STA,7)
// OSCCON3<CSWHOLD>
extern volatile __bit                   CSWHOLD             __at(0x147F);	// @ (0x28F * 8 + 7)
#define                                 CSWHOLD_bit         _BIT_ACCESS(OSCCON3,7)
// PIE1<CSWIE>
extern volatile __bit                   CSWIE               __at(0x4BC);	// @ (0x97 * 8 + 4)
#define                                 CSWIE_bit           _BIT_ACCESS(PIE1,4)
// PIR1<CSWIF>
extern volatile __bit                   CSWIF               __at(0x46C);	// @ (0x8D * 8 + 4)
#define                                 CSWIF_bit           _BIT_ACCESS(PIR1,4)
// T2HLT<CSYNC>
extern volatile __bit                   CSYNC               __at(0x1C7D);	// @ (0x38F * 8 + 5)
#define                                 CSYNC_bit           _BIT_ACCESS(T2HLT,5)
// CLCnSEL0<D1S0>
extern volatile __bit                   D1S0                __at(0x3470);	// @ (0x68E * 8 + 0)
#define                                 D1S0_bit            _BIT_ACCESS(CLCnSEL0,0)
// CLCnSEL0<D1S1>
extern volatile __bit                   D1S1                __at(0x3471);	// @ (0x68E * 8 + 1)
#define                                 D1S1_bit            _BIT_ACCESS(CLCnSEL0,1)
// CLCnSEL0<D1S2>
extern volatile __bit                   D1S2                __at(0x3472);	// @ (0x68E * 8 + 2)
#define                                 D1S2_bit            _BIT_ACCESS(CLCnSEL0,2)
// CLCnSEL0<D1S3>
extern volatile __bit                   D1S3                __at(0x3473);	// @ (0x68E * 8 + 3)
#define                                 D1S3_bit            _BIT_ACCESS(CLCnSEL0,3)
// CLCnSEL0<D1S4>
extern volatile __bit                   D1S4                __at(0x3474);	// @ (0x68E * 8 + 4)
#define                                 D1S4_bit            _BIT_ACCESS(CLCnSEL0,4)
// CLCnSEL0<D1S5>
extern volatile __bit                   D1S5                __at(0x3475);	// @ (0x68E * 8 + 5)
#define                                 D1S5_bit            _BIT_ACCESS(CLCnSEL0,5)
// CLCnSEL0<D1S6>
extern volatile __bit                   D1S6                __at(0x3476);	// @ (0x68E * 8 + 6)
#define                                 D1S6_bit            _BIT_ACCESS(CLCnSEL0,6)
// CLCnSEL1<D2S0>
extern volatile __bit                   D2S0                __at(0x3478);	// @ (0x68F * 8 + 0)
#define                                 D2S0_bit            _BIT_ACCESS(CLCnSEL1,0)
// CLCnSEL1<D2S1>
extern volatile __bit                   D2S1                __at(0x3479);	// @ (0x68F * 8 + 1)
#define                                 D2S1_bit            _BIT_ACCESS(CLCnSEL1,1)
// CLCnSEL1<D2S2>
extern volatile __bit                   D2S2                __at(0x347A);	// @ (0x68F * 8 + 2)
#define                                 D2S2_bit            _BIT_ACCESS(CLCnSEL1,2)
// CLCnSEL1<D2S3>
extern volatile __bit                   D2S3                __at(0x347B);	// @ (0x68F * 8 + 3)
#define                                 D2S3_bit            _BIT_ACCESS(CLCnSEL1,3)
// CLCnSEL1<D2S4>
extern volatile __bit                   D2S4                __at(0x347C);	// @ (0x68F * 8 + 4)
#define                                 D2S4_bit            _BIT_ACCESS(CLCnSEL1,4)
// CLCnSEL1<D2S5>
extern volatile __bit                   D2S5                __at(0x347D);	// @ (0x68F * 8 + 5)
#define                                 D2S5_bit            _BIT_ACCESS(CLCnSEL1,5)
// CLCnSEL1<D2S6>
extern volatile __bit                   D2S6                __at(0x347E);	// @ (0x68F * 8 + 6)
#define                                 D2S6_bit            _BIT_ACCESS(CLCnSEL1,6)
// CLCnSEL2<D3S0>
extern volatile __bit                   D3S0                __at(0x3480);	// @ (0x690 * 8 + 0)
#define                                 D3S0_bit            _BIT_ACCESS(CLCnSEL2,0)
// CLCnSEL2<D3S1>
extern volatile __bit                   D3S1                __at(0x3481);	// @ (0x690 * 8 + 1)
#define                                 D3S1_bit            _BIT_ACCESS(CLCnSEL2,1)
// CLCnSEL2<D3S2>
extern volatile __bit                   D3S2                __at(0x3482);	// @ (0x690 * 8 + 2)
#define                                 D3S2_bit            _BIT_ACCESS(CLCnSEL2,2)
// CLCnSEL2<D3S3>
extern volatile __bit                   D3S3                __at(0x3483);	// @ (0x690 * 8 + 3)
#define                                 D3S3_bit            _BIT_ACCESS(CLCnSEL2,3)
// CLCnSEL2<D3S4>
extern volatile __bit                   D3S4                __at(0x3484);	// @ (0x690 * 8 + 4)
#define                                 D3S4_bit            _BIT_ACCESS(CLCnSEL2,4)
// CLCnSEL2<D3S5>
extern volatile __bit                   D3S5                __at(0x3485);	// @ (0x690 * 8 + 5)
#define                                 D3S5_bit            _BIT_ACCESS(CLCnSEL2,5)
// CLCnSEL2<D3S6>
extern volatile __bit                   D3S6                __at(0x3486);	// @ (0x690 * 8 + 6)
#define                                 D3S6_bit            _BIT_ACCESS(CLCnSEL2,6)
// CLCnSEL3<D4S0>
extern volatile __bit                   D4S0                __at(0x3488);	// @ (0x691 * 8 + 0)
#define                                 D4S0_bit            _BIT_ACCESS(CLCnSEL3,0)
// CLCnSEL3<D4S1>
extern volatile __bit                   D4S1                __at(0x3489);	// @ (0x691 * 8 + 1)
#define                                 D4S1_bit            _BIT_ACCESS(CLCnSEL3,1)
// CLCnSEL3<D4S2>
extern volatile __bit                   D4S2                __at(0x348A);	// @ (0x691 * 8 + 2)
#define                                 D4S2_bit            _BIT_ACCESS(CLCnSEL3,2)
// CLCnSEL3<D4S3>
extern volatile __bit                   D4S3                __at(0x348B);	// @ (0x691 * 8 + 3)
#define                                 D4S3_bit            _BIT_ACCESS(CLCnSEL3,3)
// CLCnSEL3<D4S4>
extern volatile __bit                   D4S4                __at(0x348C);	// @ (0x691 * 8 + 4)
#define                                 D4S4_bit            _BIT_ACCESS(CLCnSEL3,4)
// CLCnSEL3<D4S5>
extern volatile __bit                   D4S5                __at(0x348D);	// @ (0x691 * 8 + 5)
#define                                 D4S5_bit            _BIT_ACCESS(CLCnSEL3,5)
// CLCnSEL3<D4S6>
extern volatile __bit                   D4S6                __at(0x348E);	// @ (0x691 * 8 + 6)
#define                                 D4S6_bit            _BIT_ACCESS(CLCnSEL3,6)
// SSP1STAT<DA>
extern volatile __bit                   DA                  __at(0x3C7D);	// @ (0x78F * 8 + 5)
#define                                 DA_bit              _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<DA1>
extern volatile __bit                   DA1                 __at(0x3C7D);	// @ (0x78F * 8 + 5)
#define                                 DA1_bit             _BIT_ACCESS(SSP1STAT,5)
// SCANCON0<DABORT>
extern volatile __bit                   DABORT              __at(0xE494);	// @ (0x1C92 * 8 + 4)
#define                                 DABORT_bit          _BIT_ACCESS(SCANCON0,4)
// PMD4<DAC1MD>
extern volatile __bit                   DAC1MD              __at(0x881);	// @ (0x110 * 8 + 1)
#define                                 DAC1MD_bit          _BIT_ACCESS(PMD4,1)
// CRCDATAL<DATA0>
extern volatile __bit                   DATA0               __at(0xE4E8);	// @ (0x1C9D * 8 + 0)
#define                                 DATA0_bit           _BIT_ACCESS(CRCDATAL,0)
// CRCDATAL<DATA1>
extern volatile __bit                   DATA1               __at(0xE4E9);	// @ (0x1C9D * 8 + 1)
#define                                 DATA1_bit           _BIT_ACCESS(CRCDATAL,1)
// CRCDATAH<DATA10>
extern volatile __bit                   DATA10              __at(0xE4F2);	// @ (0x1C9E * 8 + 2)
#define                                 DATA10_bit          _BIT_ACCESS(CRCDATAH,2)
// CRCDATAH<DATA11>
extern volatile __bit                   DATA11              __at(0xE4F3);	// @ (0x1C9E * 8 + 3)
#define                                 DATA11_bit          _BIT_ACCESS(CRCDATAH,3)
// CRCDATAH<DATA12>
extern volatile __bit                   DATA12              __at(0xE4F4);	// @ (0x1C9E * 8 + 4)
#define                                 DATA12_bit          _BIT_ACCESS(CRCDATAH,4)
// CRCDATAH<DATA13>
extern volatile __bit                   DATA13              __at(0xE4F5);	// @ (0x1C9E * 8 + 5)
#define                                 DATA13_bit          _BIT_ACCESS(CRCDATAH,5)
// CRCDATAH<DATA14>
extern volatile __bit                   DATA14              __at(0xE4F6);	// @ (0x1C9E * 8 + 6)
#define                                 DATA14_bit          _BIT_ACCESS(CRCDATAH,6)
// CRCDATAH<DATA15>
extern volatile __bit                   DATA15              __at(0xE4F7);	// @ (0x1C9E * 8 + 7)
#define                                 DATA15_bit          _BIT_ACCESS(CRCDATAH,7)
// CRCDATAU<DATA16>
extern volatile __bit                   DATA16              __at(0xE4F8);	// @ (0x1C9F * 8 + 0)
#define                                 DATA16_bit          _BIT_ACCESS(CRCDATAU,0)
// CRCDATAU<DATA17>
extern volatile __bit                   DATA17              __at(0xE4F9);	// @ (0x1C9F * 8 + 1)
#define                                 DATA17_bit          _BIT_ACCESS(CRCDATAU,1)
// CRCDATAU<DATA18>
extern volatile __bit                   DATA18              __at(0xE4FA);	// @ (0x1C9F * 8 + 2)
#define                                 DATA18_bit          _BIT_ACCESS(CRCDATAU,2)
// CRCDATAU<DATA19>
extern volatile __bit                   DATA19              __at(0xE4FB);	// @ (0x1C9F * 8 + 3)
#define                                 DATA19_bit          _BIT_ACCESS(CRCDATAU,3)
// CRCDATAL<DATA2>
extern volatile __bit                   DATA2               __at(0xE4EA);	// @ (0x1C9D * 8 + 2)
#define                                 DATA2_bit           _BIT_ACCESS(CRCDATAL,2)
// CRCDATAU<DATA20>
extern volatile __bit                   DATA20              __at(0xE4FC);	// @ (0x1C9F * 8 + 4)
#define                                 DATA20_bit          _BIT_ACCESS(CRCDATAU,4)
// CRCDATAU<DATA21>
extern volatile __bit                   DATA21              __at(0xE4FD);	// @ (0x1C9F * 8 + 5)
#define                                 DATA21_bit          _BIT_ACCESS(CRCDATAU,5)
// CRCDATAU<DATA22>
extern volatile __bit                   DATA22              __at(0xE4FE);	// @ (0x1C9F * 8 + 6)
#define                                 DATA22_bit          _BIT_ACCESS(CRCDATAU,6)
// CRCDATAU<DATA23>
extern volatile __bit                   DATA23              __at(0xE4FF);	// @ (0x1C9F * 8 + 7)
#define                                 DATA23_bit          _BIT_ACCESS(CRCDATAU,7)
// CRCDATAT<DATA24>
extern volatile __bit                   DATA24              __at(0xE500);	// @ (0x1CA0 * 8 + 0)
#define                                 DATA24_bit          _BIT_ACCESS(CRCDATAT,0)
// CRCDATAT<DATA25>
extern volatile __bit                   DATA25              __at(0xE501);	// @ (0x1CA0 * 8 + 1)
#define                                 DATA25_bit          _BIT_ACCESS(CRCDATAT,1)
// CRCDATAT<DATA26>
extern volatile __bit                   DATA26              __at(0xE502);	// @ (0x1CA0 * 8 + 2)
#define                                 DATA26_bit          _BIT_ACCESS(CRCDATAT,2)
// CRCDATAT<DATA27>
extern volatile __bit                   DATA27              __at(0xE503);	// @ (0x1CA0 * 8 + 3)
#define                                 DATA27_bit          _BIT_ACCESS(CRCDATAT,3)
// CRCDATAT<DATA28>
extern volatile __bit                   DATA28              __at(0xE504);	// @ (0x1CA0 * 8 + 4)
#define                                 DATA28_bit          _BIT_ACCESS(CRCDATAT,4)
// CRCDATAT<DATA29>
extern volatile __bit                   DATA29              __at(0xE505);	// @ (0x1CA0 * 8 + 5)
#define                                 DATA29_bit          _BIT_ACCESS(CRCDATAT,5)
// CRCDATAL<DATA3>
extern volatile __bit                   DATA3               __at(0xE4EB);	// @ (0x1C9D * 8 + 3)
#define                                 DATA3_bit           _BIT_ACCESS(CRCDATAL,3)
// CRCDATAT<DATA30>
extern volatile __bit                   DATA30              __at(0xE506);	// @ (0x1CA0 * 8 + 6)
#define                                 DATA30_bit          _BIT_ACCESS(CRCDATAT,6)
// CRCDATAT<DATA31>
extern volatile __bit                   DATA31              __at(0xE507);	// @ (0x1CA0 * 8 + 7)
#define                                 DATA31_bit          _BIT_ACCESS(CRCDATAT,7)
// CRCDATAL<DATA4>
extern volatile __bit                   DATA4               __at(0xE4EC);	// @ (0x1C9D * 8 + 4)
#define                                 DATA4_bit           _BIT_ACCESS(CRCDATAL,4)
// CRCDATAL<DATA5>
extern volatile __bit                   DATA5               __at(0xE4ED);	// @ (0x1C9D * 8 + 5)
#define                                 DATA5_bit           _BIT_ACCESS(CRCDATAL,5)
// CRCDATAL<DATA6>
extern volatile __bit                   DATA6               __at(0xE4EE);	// @ (0x1C9D * 8 + 6)
#define                                 DATA6_bit           _BIT_ACCESS(CRCDATAL,6)
// CRCDATAL<DATA7>
extern volatile __bit                   DATA7               __at(0xE4EF);	// @ (0x1C9D * 8 + 7)
#define                                 DATA7_bit           _BIT_ACCESS(CRCDATAL,7)
// CRCDATAH<DATA8>
extern volatile __bit                   DATA8               __at(0xE4F0);	// @ (0x1C9E * 8 + 0)
#define                                 DATA8_bit           _BIT_ACCESS(CRCDATAH,0)
// CRCDATAH<DATA9>
extern volatile __bit                   DATA9               __at(0xE4F1);	// @ (0x1C9E * 8 + 1)
#define                                 DATA9_bit           _BIT_ACCESS(CRCDATAH,1)
// SSP1STAT<DATA_ADDRESS>
extern volatile __bit                   DATA_ADDRESS        __at(0x3C7D);	// @ (0x78F * 8 + 5)
#define                                 DATA_ADDRESS_bit    _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<DATA_ADDRESS1>
extern volatile __bit                   DATA_ADDRESS1       __at(0x3C7D);	// @ (0x78F * 8 + 5)
#define                                 DATA_ADDRESS1_bit   _BIT_ACCESS(SSP1STAT,5)
// STATUS<DC>
extern volatile __bit                   DC                  __at(0x19);	// @ (0x3 * 8 + 1)
#define                                 DC_bit              _BIT_ACCESS(STATUS,1)
// SSP1CON3<DHEN>
extern volatile __bit                   DHEN                __at(0x3C90);	// @ (0x792 * 8 + 0)
#define                                 DHEN_bit            _BIT_ACCESS(SSP1CON3,0)
// CRCCON2<DLEN0>
extern volatile __bit                   DLEN0               __at(0xE538);	// @ (0x1CA7 * 8 + 0)
#define                                 DLEN0_bit           _BIT_ACCESS(CRCCON2,0)
// CRCCON2<DLEN1>
extern volatile __bit                   DLEN1               __at(0xE539);	// @ (0x1CA7 * 8 + 1)
#define                                 DLEN1_bit           _BIT_ACCESS(CRCCON2,1)
// CRCCON2<DLEN2>
extern volatile __bit                   DLEN2               __at(0xE53A);	// @ (0x1CA7 * 8 + 2)
#define                                 DLEN2_bit           _BIT_ACCESS(CRCCON2,2)
// CRCCON2<DLEN3>
extern volatile __bit                   DLEN3               __at(0xE53B);	// @ (0x1CA7 * 8 + 3)
#define                                 DLEN3_bit           _BIT_ACCESS(CRCCON2,3)
// CRCCON2<DLEN4>
extern volatile __bit                   DLEN4               __at(0xE53C);	// @ (0x1CA7 * 8 + 4)
#define                                 DLEN4_bit           _BIT_ACCESS(CRCCON2,4)
// CPUDOZE<DOE>
extern volatile __bit                   DOE                 __at(0x1464);	// @ (0x28C * 8 + 4)
#define                                 DOE_bit             _BIT_ACCESS(CPUDOZE,4)
// ADCON0<DONE>
extern volatile __bit                   DONE                __at(0xE930);	// @ (0x1D26 * 8 + 0)
#define                                 DONE_bit            _BIT_ACCESS(ADCON0,0)
// CPUDOZE<DOZEN>
extern volatile __bit                   DOZEN               __at(0x1466);	// @ (0x28C * 8 + 6)
#define                                 DOZEN_bit           _BIT_ACCESS(CPUDOZE,6)
// SCANDPS<DPS>
extern volatile __bit                   DPS                 __at(0xE4C8);	// @ (0x1C99 * 8 + 0)
#define                                 DPS_bit             _BIT_ACCESS(SCANDPS,0)
// ADCON1<DSEN>
extern volatile __bit                   DSEN                __at(0xE938);	// @ (0x1D27 * 8 + 0)
#define                                 DSEN_bit            _BIT_ACCESS(ADCON1,0)
// SSP1STAT<D_A>
extern volatile __bit                   D_A                 __at(0x3C7D);	// @ (0x78F * 8 + 5)
#define                                 D_A_bit             _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<D_A1>
extern volatile __bit                   D_A1                __at(0x3C7D);	// @ (0x78F * 8 + 5)
#define                                 D_A1_bit            _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<D_nA>
extern volatile __bit                   D_nA                __at(0x3C7D);	// @ (0x78F * 8 + 5)
#define                                 D_nA_bit            _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<D_nA1>
extern volatile __bit                   D_nA1               __at(0x3C7D);	// @ (0x78F * 8 + 5)
#define                                 D_nA1_bit           _BIT_ACCESS(SSP1STAT,5)
// ADERRL<ERR0>
extern volatile __bit                   ERR0                __at(0xE880);	// @ (0x1D10 * 8 + 0)
#define                                 ERR0_bit            _BIT_ACCESS(ADERRL,0)
// ADERRL<ERR1>
extern volatile __bit                   ERR1                __at(0xE881);	// @ (0x1D10 * 8 + 1)
#define                                 ERR1_bit            _BIT_ACCESS(ADERRL,1)
// ADERRH<ERR10>
extern volatile __bit                   ERR10               __at(0xE88A);	// @ (0x1D11 * 8 + 2)
#define                                 ERR10_bit           _BIT_ACCESS(ADERRH,2)
// ADERRH<ERR11>
extern volatile __bit                   ERR11               __at(0xE88B);	// @ (0x1D11 * 8 + 3)
#define                                 ERR11_bit           _BIT_ACCESS(ADERRH,3)
// ADERRH<ERR12>
extern volatile __bit                   ERR12               __at(0xE88C);	// @ (0x1D11 * 8 + 4)
#define                                 ERR12_bit           _BIT_ACCESS(ADERRH,4)
// ADERRH<ERR13>
extern volatile __bit                   ERR13               __at(0xE88D);	// @ (0x1D11 * 8 + 5)
#define                                 ERR13_bit           _BIT_ACCESS(ADERRH,5)
// ADERRH<ERR14>
extern volatile __bit                   ERR14               __at(0xE88E);	// @ (0x1D11 * 8 + 6)
#define                                 ERR14_bit           _BIT_ACCESS(ADERRH,6)
// ADERRH<ERR15>
extern volatile __bit                   ERR15               __at(0xE88F);	// @ (0x1D11 * 8 + 7)
#define                                 ERR15_bit           _BIT_ACCESS(ADERRH,7)
// ADERRL<ERR2>
extern volatile __bit                   ERR2                __at(0xE882);	// @ (0x1D10 * 8 + 2)
#define                                 ERR2_bit            _BIT_ACCESS(ADERRL,2)
// ADERRL<ERR3>
extern volatile __bit                   ERR3                __at(0xE883);	// @ (0x1D10 * 8 + 3)
#define                                 ERR3_bit            _BIT_ACCESS(ADERRL,3)
// ADERRL<ERR4>
extern volatile __bit                   ERR4                __at(0xE884);	// @ (0x1D10 * 8 + 4)
#define                                 ERR4_bit            _BIT_ACCESS(ADERRL,4)
// ADERRL<ERR5>
extern volatile __bit                   ERR5                __at(0xE885);	// @ (0x1D10 * 8 + 5)
#define                                 ERR5_bit            _BIT_ACCESS(ADERRL,5)
// ADERRL<ERR6>
extern volatile __bit                   ERR6                __at(0xE886);	// @ (0x1D10 * 8 + 6)
#define                                 ERR6_bit            _BIT_ACCESS(ADERRL,6)
// ADERRL<ERR7>
extern volatile __bit                   ERR7                __at(0xE887);	// @ (0x1D10 * 8 + 7)
#define                                 ERR7_bit            _BIT_ACCESS(ADERRL,7)
// ADERRH<ERR8>
extern volatile __bit                   ERR8                __at(0xE888);	// @ (0x1D11 * 8 + 0)
#define                                 ERR8_bit            _BIT_ACCESS(ADERRH,0)
// ADERRH<ERR9>
extern volatile __bit                   ERR9                __at(0xE889);	// @ (0x1D11 * 8 + 1)
#define                                 ERR9_bit            _BIT_ACCESS(ADERRH,1)
// OSCEN<EXTOEN>
extern volatile __bit                   EXTOEN              __at(0x148F);	// @ (0x291 * 8 + 7)
#define                                 EXTOEN_bit          _BIT_ACCESS(OSCEN,7)
// OSCSTAT<EXTOR>
extern volatile __bit                   EXTOR               __at(0x1487);	// @ (0x290 * 8 + 7)
#define                                 EXTOR_bit           _BIT_ACCESS(OSCSTAT,7)
// RC1STA<FERR>
extern volatile __bit                   FERR                __at(0x3882);	// @ (0x710 * 8 + 2)
#define                                 FERR_bit            _BIT_ACCESS(RC1STA,2)
// ADFLTRL<FLTR0>
extern volatile __bit                   FLTR0               __at(0xE8A0);	// @ (0x1D14 * 8 + 0)
#define                                 FLTR0_bit           _BIT_ACCESS(ADFLTRL,0)
// ADFLTRL<FLTR1>
extern volatile __bit                   FLTR1               __at(0xE8A1);	// @ (0x1D14 * 8 + 1)
#define                                 FLTR1_bit           _BIT_ACCESS(ADFLTRL,1)
// ADFLTRH<FLTR10>
extern volatile __bit                   FLTR10              __at(0xE8AA);	// @ (0x1D15 * 8 + 2)
#define                                 FLTR10_bit          _BIT_ACCESS(ADFLTRH,2)
// ADFLTRH<FLTR11>
extern volatile __bit                   FLTR11              __at(0xE8AB);	// @ (0x1D15 * 8 + 3)
#define                                 FLTR11_bit          _BIT_ACCESS(ADFLTRH,3)
// ADFLTRH<FLTR12>
extern volatile __bit                   FLTR12              __at(0xE8AC);	// @ (0x1D15 * 8 + 4)
#define                                 FLTR12_bit          _BIT_ACCESS(ADFLTRH,4)
// ADFLTRH<FLTR13>
extern volatile __bit                   FLTR13              __at(0xE8AD);	// @ (0x1D15 * 8 + 5)
#define                                 FLTR13_bit          _BIT_ACCESS(ADFLTRH,5)
// ADFLTRH<FLTR14>
extern volatile __bit                   FLTR14              __at(0xE8AE);	// @ (0x1D15 * 8 + 6)
#define                                 FLTR14_bit          _BIT_ACCESS(ADFLTRH,6)
// ADFLTRH<FLTR15>
extern volatile __bit                   FLTR15              __at(0xE8AF);	// @ (0x1D15 * 8 + 7)
#define                                 FLTR15_bit          _BIT_ACCESS(ADFLTRH,7)
// ADFLTRL<FLTR2>
extern volatile __bit                   FLTR2               __at(0xE8A2);	// @ (0x1D14 * 8 + 2)
#define                                 FLTR2_bit           _BIT_ACCESS(ADFLTRL,2)
// ADFLTRL<FLTR3>
extern volatile __bit                   FLTR3               __at(0xE8A3);	// @ (0x1D14 * 8 + 3)
#define                                 FLTR3_bit           _BIT_ACCESS(ADFLTRL,3)
// ADFLTRL<FLTR4>
extern volatile __bit                   FLTR4               __at(0xE8A4);	// @ (0x1D14 * 8 + 4)
#define                                 FLTR4_bit           _BIT_ACCESS(ADFLTRL,4)
// ADFLTRL<FLTR5>
extern volatile __bit                   FLTR5               __at(0xE8A5);	// @ (0x1D14 * 8 + 5)
#define                                 FLTR5_bit           _BIT_ACCESS(ADFLTRL,5)
// ADFLTRL<FLTR6>
extern volatile __bit                   FLTR6               __at(0xE8A6);	// @ (0x1D14 * 8 + 6)
#define                                 FLTR6_bit           _BIT_ACCESS(ADFLTRL,6)
// ADFLTRL<FLTR7>
extern volatile __bit                   FLTR7               __at(0xE8A7);	// @ (0x1D14 * 8 + 7)
#define                                 FLTR7_bit           _BIT_ACCESS(ADFLTRL,7)
// ADFLTRH<FLTR8>
extern volatile __bit                   FLTR8               __at(0xE8A8);	// @ (0x1D15 * 8 + 0)
#define                                 FLTR8_bit           _BIT_ACCESS(ADFLTRH,0)
// ADFLTRH<FLTR9>
extern volatile __bit                   FLTR9               __at(0xE8A9);	// @ (0x1D15 * 8 + 1)
#define                                 FLTR9_bit           _BIT_ACCESS(ADFLTRH,1)
// ADCON0<FM0>
extern volatile __bit                   FM0                 __at(0xE932);	// @ (0x1D26 * 8 + 2)
#define                                 FM0_bit             _BIT_ACCESS(ADCON0,2)
// NVMCON1<FREE>
extern volatile __bit                   FREE                __at(0xE484);	// @ (0x1C90 * 8 + 4)
#define                                 FREE_bit            _BIT_ACCESS(NVMCON1,4)
// OSCFRQ<FRQ0>
extern volatile __bit                   FRQ0                __at(0x1498);	// @ (0x293 * 8 + 0)
#define                                 FRQ0_bit            _BIT_ACCESS(OSCFRQ,0)
// OSCFRQ<FRQ1>
extern volatile __bit                   FRQ1                __at(0x1499);	// @ (0x293 * 8 + 1)
#define                                 FRQ1_bit            _BIT_ACCESS(OSCFRQ,1)
// OSCFRQ<FRQ2>
extern volatile __bit                   FRQ2                __at(0x149A);	// @ (0x293 * 8 + 2)
#define                                 FRQ2_bit            _BIT_ACCESS(OSCFRQ,2)
// CRCCON0<FULL>
extern volatile __bit                   FULL                __at(0xE528);	// @ (0x1CA5 * 8 + 0)
#define                                 FULL_bit            _BIT_ACCESS(CRCCON0,0)
// FVRCON<FVREN>
extern volatile __bit                   FVREN               __at(0x1067);	// @ (0x20C * 8 + 7)
#define                                 FVREN_bit           _BIT_ACCESS(FVRCON,7)
// PMD3<FVRMD>
extern volatile __bit                   FVRMD               __at(0x87D);	// @ (0x10F * 8 + 5)
#define                                 FVRMD_bit           _BIT_ACCESS(PMD3,5)
// FVRCON<FVRRDY>
extern volatile __bit                   FVRRDY              __at(0x1066);	// @ (0x20C * 8 + 6)
#define                                 FVRRDY_bit          _BIT_ACCESS(FVRCON,6)
// CLCnGLS0<G1D1N>
extern volatile __bit                   G1D1N               __at(0x3490);	// @ (0x692 * 8 + 0)
#define                                 G1D1N_bit           _BIT_ACCESS(CLCnGLS0,0)
// CLCnGLS0<G1D1T>
extern volatile __bit                   G1D1T               __at(0x3491);	// @ (0x692 * 8 + 1)
#define                                 G1D1T_bit           _BIT_ACCESS(CLCnGLS0,1)
// CLCnGLS0<G1D2N>
extern volatile __bit                   G1D2N               __at(0x3492);	// @ (0x692 * 8 + 2)
#define                                 G1D2N_bit           _BIT_ACCESS(CLCnGLS0,2)
// CLCnGLS0<G1D2T>
extern volatile __bit                   G1D2T               __at(0x3493);	// @ (0x692 * 8 + 3)
#define                                 G1D2T_bit           _BIT_ACCESS(CLCnGLS0,3)
// CLCnGLS0<G1D3N>
extern volatile __bit                   G1D3N               __at(0x3494);	// @ (0x692 * 8 + 4)
#define                                 G1D3N_bit           _BIT_ACCESS(CLCnGLS0,4)
// CLCnGLS0<G1D3T>
extern volatile __bit                   G1D3T               __at(0x3495);	// @ (0x692 * 8 + 5)
#define                                 G1D3T_bit           _BIT_ACCESS(CLCnGLS0,5)
// CLCnGLS0<G1D4N>
extern volatile __bit                   G1D4N               __at(0x3496);	// @ (0x692 * 8 + 6)
#define                                 G1D4N_bit           _BIT_ACCESS(CLCnGLS0,6)
// CLCnGLS0<G1D4T>
extern volatile __bit                   G1D4T               __at(0x3497);	// @ (0x692 * 8 + 7)
#define                                 G1D4T_bit           _BIT_ACCESS(CLCnGLS0,7)
// CLCnPOL<G1POL>
extern volatile __bit                   G1POL               __at(0x3468);	// @ (0x68D * 8 + 0)
#define                                 G1POL_bit           _BIT_ACCESS(CLCnPOL,0)
// CLCnGLS1<G2D1N>
extern volatile __bit                   G2D1N               __at(0x3498);	// @ (0x693 * 8 + 0)
#define                                 G2D1N_bit           _BIT_ACCESS(CLCnGLS1,0)
// CLCnGLS1<G2D1T>
extern volatile __bit                   G2D1T               __at(0x3499);	// @ (0x693 * 8 + 1)
#define                                 G2D1T_bit           _BIT_ACCESS(CLCnGLS1,1)
// CLCnGLS1<G2D2N>
extern volatile __bit                   G2D2N               __at(0x349A);	// @ (0x693 * 8 + 2)
#define                                 G2D2N_bit           _BIT_ACCESS(CLCnGLS1,2)
// CLCnGLS1<G2D2T>
extern volatile __bit                   G2D2T               __at(0x349B);	// @ (0x693 * 8 + 3)
#define                                 G2D2T_bit           _BIT_ACCESS(CLCnGLS1,3)
// CLCnGLS1<G2D3N>
extern volatile __bit                   G2D3N               __at(0x349C);	// @ (0x693 * 8 + 4)
#define                                 G2D3N_bit           _BIT_ACCESS(CLCnGLS1,4)
// CLCnGLS1<G2D3T>
extern volatile __bit                   G2D3T               __at(0x349D);	// @ (0x693 * 8 + 5)
#define                                 G2D3T_bit           _BIT_ACCESS(CLCnGLS1,5)
// CLCnGLS1<G2D4N>
extern volatile __bit                   G2D4N               __at(0x349E);	// @ (0x693 * 8 + 6)
#define                                 G2D4N_bit           _BIT_ACCESS(CLCnGLS1,6)
// CLCnGLS1<G2D4T>
extern volatile __bit                   G2D4T               __at(0x349F);	// @ (0x693 * 8 + 7)
#define                                 G2D4T_bit           _BIT_ACCESS(CLCnGLS1,7)
// CLCnPOL<G2POL>
extern volatile __bit                   G2POL               __at(0x3469);	// @ (0x68D * 8 + 1)
#define                                 G2POL_bit           _BIT_ACCESS(CLCnPOL,1)
// CLCnGLS2<G3D1N>
extern volatile __bit                   G3D1N               __at(0x34A0);	// @ (0x694 * 8 + 0)
#define                                 G3D1N_bit           _BIT_ACCESS(CLCnGLS2,0)
// CLCnGLS2<G3D1T>
extern volatile __bit                   G3D1T               __at(0x34A1);	// @ (0x694 * 8 + 1)
#define                                 G3D1T_bit           _BIT_ACCESS(CLCnGLS2,1)
// CLCnGLS2<G3D2N>
extern volatile __bit                   G3D2N               __at(0x34A2);	// @ (0x694 * 8 + 2)
#define                                 G3D2N_bit           _BIT_ACCESS(CLCnGLS2,2)
// CLCnGLS2<G3D2T>
extern volatile __bit                   G3D2T               __at(0x34A3);	// @ (0x694 * 8 + 3)
#define                                 G3D2T_bit           _BIT_ACCESS(CLCnGLS2,3)
// CLCnGLS2<G3D3N>
extern volatile __bit                   G3D3N               __at(0x34A4);	// @ (0x694 * 8 + 4)
#define                                 G3D3N_bit           _BIT_ACCESS(CLCnGLS2,4)
// CLCnGLS2<G3D3T>
extern volatile __bit                   G3D3T               __at(0x34A5);	// @ (0x694 * 8 + 5)
#define                                 G3D3T_bit           _BIT_ACCESS(CLCnGLS2,5)
// CLCnGLS2<G3D4N>
extern volatile __bit                   G3D4N               __at(0x34A6);	// @ (0x694 * 8 + 6)
#define                                 G3D4N_bit           _BIT_ACCESS(CLCnGLS2,6)
// CLCnGLS2<G3D4T>
extern volatile __bit                   G3D4T               __at(0x34A7);	// @ (0x694 * 8 + 7)
#define                                 G3D4T_bit           _BIT_ACCESS(CLCnGLS2,7)
// CLCnPOL<G3POL>
extern volatile __bit                   G3POL               __at(0x346A);	// @ (0x68D * 8 + 2)
#define                                 G3POL_bit           _BIT_ACCESS(CLCnPOL,2)
// CLCnGLS3<G4D1N>
extern volatile __bit                   G4D1N               __at(0x34A8);	// @ (0x695 * 8 + 0)
#define                                 G4D1N_bit           _BIT_ACCESS(CLCnGLS3,0)
// CLCnGLS3<G4D1T>
extern volatile __bit                   G4D1T               __at(0x34A9);	// @ (0x695 * 8 + 1)
#define                                 G4D1T_bit           _BIT_ACCESS(CLCnGLS3,1)
// CLCnGLS3<G4D2N>
extern volatile __bit                   G4D2N               __at(0x34AA);	// @ (0x695 * 8 + 2)
#define                                 G4D2N_bit           _BIT_ACCESS(CLCnGLS3,2)
// CLCnGLS3<G4D2T>
extern volatile __bit                   G4D2T               __at(0x34AB);	// @ (0x695 * 8 + 3)
#define                                 G4D2T_bit           _BIT_ACCESS(CLCnGLS3,3)
// CLCnGLS3<G4D3N>
extern volatile __bit                   G4D3N               __at(0x34AC);	// @ (0x695 * 8 + 4)
#define                                 G4D3N_bit           _BIT_ACCESS(CLCnGLS3,4)
// CLCnGLS3<G4D3T>
extern volatile __bit                   G4D3T               __at(0x34AD);	// @ (0x695 * 8 + 5)
#define                                 G4D3T_bit           _BIT_ACCESS(CLCnGLS3,5)
// CLCnGLS3<G4D4N>
extern volatile __bit                   G4D4N               __at(0x34AE);	// @ (0x695 * 8 + 6)
#define                                 G4D4N_bit           _BIT_ACCESS(CLCnGLS3,6)
// CLCnGLS3<G4D4T>
extern volatile __bit                   G4D4T               __at(0x34AF);	// @ (0x695 * 8 + 7)
#define                                 G4D4T_bit           _BIT_ACCESS(CLCnGLS3,7)
// CLCnPOL<G4POL>
extern volatile __bit                   G4POL               __at(0x346B);	// @ (0x68D * 8 + 3)
#define                                 G4POL_bit           _BIT_ACCESS(CLCnPOL,3)
// SSP1CON2<GCEN>
extern volatile __bit                   GCEN                __at(0x3C8F);	// @ (0x791 * 8 + 7)
#define                                 GCEN_bit            _BIT_ACCESS(SSP1CON2,7)
// SSP1CON2<GCEN1>
extern volatile __bit                   GCEN1               __at(0x3C8F);	// @ (0x791 * 8 + 7)
#define                                 GCEN1_bit           _BIT_ACCESS(SSP1CON2,7)
// T1GCON<GE>
extern volatile __bit                   GE                  __at(0x187F);	// @ (0x30F * 8 + 7)
#define                                 GE_bit              _BIT_ACCESS(T1GCON,7)
// T1GCON<GGO_nDONE>
extern volatile __bit                   GGO_nDONE           __at(0x187B);	// @ (0x30F * 8 + 3)
#define                                 GGO_nDONE_bit       _BIT_ACCESS(T1GCON,3)
// INTCON<GIE>
extern volatile __bit                   GIE                 __at(0x5F);	// @ (0xB * 8 + 7)
#define                                 GIE_bit             _BIT_ACCESS(INTCON,7)
// ADCON0<GO_nDONE>
extern volatile __bit                   GO_nDONE            __at(0xE930);	// @ (0x1D26 * 8 + 0)
#define                                 GO_nDONE_bit        _BIT_ACCESS(ADCON0,0)
// T1GCON<GSPM>
extern volatile __bit                   GSPM                __at(0x187C);	// @ (0x30F * 8 + 4)
#define                                 GSPM_bit            _BIT_ACCESS(T1GCON,4)
// T1GATE<GSS0>
extern volatile __bit                   GSS0                __at(0x1880);	// @ (0x310 * 8 + 0)
#define                                 GSS0_bit            _BIT_ACCESS(T1GATE,0)
// T1GATE<GSS1>
extern volatile __bit                   GSS1                __at(0x1881);	// @ (0x310 * 8 + 1)
#define                                 GSS1_bit            _BIT_ACCESS(T1GATE,1)
// T1GATE<GSS2>
extern volatile __bit                   GSS2                __at(0x1882);	// @ (0x310 * 8 + 2)
#define                                 GSS2_bit            _BIT_ACCESS(T1GATE,2)
// T1GATE<GSS3>
extern volatile __bit                   GSS3                __at(0x1883);	// @ (0x310 * 8 + 3)
#define                                 GSS3_bit            _BIT_ACCESS(T1GATE,3)
// T1GATE<GSS4>
extern volatile __bit                   GSS4                __at(0x1884);	// @ (0x310 * 8 + 4)
#define                                 GSS4_bit            _BIT_ACCESS(T1GATE,4)
// T1GCON<GTM>
extern volatile __bit                   GTM                 __at(0x187D);	// @ (0x30F * 8 + 5)
#define                                 GTM_bit             _BIT_ACCESS(T1GCON,5)
// T1GCON<GVAL>
extern volatile __bit                   GVAL                __at(0x187A);	// @ (0x30F * 8 + 2)
#define                                 GVAL_bit            _BIT_ACCESS(T1GCON,2)
// OSCEN<HFOEN>
extern volatile __bit                   HFOEN               __at(0x148E);	// @ (0x291 * 8 + 6)
#define                                 HFOEN_bit           _BIT_ACCESS(OSCEN,6)
// OSCSTAT<HFOR>
extern volatile __bit                   HFOR                __at(0x1486);	// @ (0x290 * 8 + 6)
#define                                 HFOR_bit            _BIT_ACCESS(OSCSTAT,6)
// SSP1STAT<I2C_DAT>
extern volatile __bit                   I2C_DAT             __at(0x3C7D);	// @ (0x78F * 8 + 5)
#define                                 I2C_DAT_bit         _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<I2C_DAT1>
extern volatile __bit                   I2C_DAT1            __at(0x3C7D);	// @ (0x78F * 8 + 5)
#define                                 I2C_DAT1_bit        _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<I2C_READ>
extern volatile __bit                   I2C_READ            __at(0x3C7A);	// @ (0x78F * 8 + 2)
#define                                 I2C_READ_bit        _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<I2C_READ1>
extern volatile __bit                   I2C_READ1           __at(0x3C7A);	// @ (0x78F * 8 + 2)
#define                                 I2C_READ1_bit       _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<I2C_START>
extern volatile __bit                   I2C_START           __at(0x3C7B);	// @ (0x78F * 8 + 3)
#define                                 I2C_START_bit       _BIT_ACCESS(SSP1STAT,3)
// SSP1STAT<I2C_START1>
extern volatile __bit                   I2C_START1          __at(0x3C7B);	// @ (0x78F * 8 + 3)
#define                                 I2C_START1_bit      _BIT_ACCESS(SSP1STAT,3)
// SSP1STAT<I2C_STOP>
extern volatile __bit                   I2C_STOP            __at(0x3C7C);	// @ (0x78F * 8 + 4)
#define                                 I2C_STOP_bit        _BIT_ACCESS(SSP1STAT,4)
// SSP1STAT<I2C_STOP2>
extern volatile __bit                   I2C_STOP2           __at(0x3C7C);	// @ (0x78F * 8 + 4)
#define                                 I2C_STOP2_bit       _BIT_ACCESS(SSP1STAT,4)
// CPUDOZE<IDLEN>
extern volatile __bit                   IDLEN               __at(0x1467);	// @ (0x28C * 8 + 7)
#define                                 IDLEN_bit           _BIT_ACCESS(CPUDOZE,7)
// INLVLA<INLVLA0>
extern volatile __bit                   INLVLA0             __at(0xF480);	// @ (0x1E90 * 8 + 0)
#define                                 INLVLA0_bit         _BIT_ACCESS(INLVLA,0)
// INLVLA<INLVLA1>
extern volatile __bit                   INLVLA1             __at(0xF481);	// @ (0x1E90 * 8 + 1)
#define                                 INLVLA1_bit         _BIT_ACCESS(INLVLA,1)
// INLVLA<INLVLA2>
extern volatile __bit                   INLVLA2             __at(0xF482);	// @ (0x1E90 * 8 + 2)
#define                                 INLVLA2_bit         _BIT_ACCESS(INLVLA,2)
// INLVLA<INLVLA3>
extern volatile __bit                   INLVLA3             __at(0xF483);	// @ (0x1E90 * 8 + 3)
#define                                 INLVLA3_bit         _BIT_ACCESS(INLVLA,3)
// INLVLA<INLVLA4>
extern volatile __bit                   INLVLA4             __at(0xF484);	// @ (0x1E90 * 8 + 4)
#define                                 INLVLA4_bit         _BIT_ACCESS(INLVLA,4)
// INLVLA<INLVLA5>
extern volatile __bit                   INLVLA5             __at(0xF485);	// @ (0x1E90 * 8 + 5)
#define                                 INLVLA5_bit         _BIT_ACCESS(INLVLA,5)
// INLVLC<INLVLC0>
extern volatile __bit                   INLVLC0             __at(0xF520);	// @ (0x1EA4 * 8 + 0)
#define                                 INLVLC0_bit         _BIT_ACCESS(INLVLC,0)
// INLVLC<INLVLC1>
extern volatile __bit                   INLVLC1             __at(0xF521);	// @ (0x1EA4 * 8 + 1)
#define                                 INLVLC1_bit         _BIT_ACCESS(INLVLC,1)
// INLVLC<INLVLC2>
extern volatile __bit                   INLVLC2             __at(0xF522);	// @ (0x1EA4 * 8 + 2)
#define                                 INLVLC2_bit         _BIT_ACCESS(INLVLC,2)
// INLVLC<INLVLC3>
extern volatile __bit                   INLVLC3             __at(0xF523);	// @ (0x1EA4 * 8 + 3)
#define                                 INLVLC3_bit         _BIT_ACCESS(INLVLC,3)
// INLVLC<INLVLC4>
extern volatile __bit                   INLVLC4             __at(0xF524);	// @ (0x1EA4 * 8 + 4)
#define                                 INLVLC4_bit         _BIT_ACCESS(INLVLC,4)
// INLVLC<INLVLC5>
extern volatile __bit                   INLVLC5             __at(0xF525);	// @ (0x1EA4 * 8 + 5)
#define                                 INLVLC5_bit         _BIT_ACCESS(INLVLC,5)
// PIE0<INTE>
extern volatile __bit                   INTE                __at(0x4B0);	// @ (0x96 * 8 + 0)
#define                                 INTE_bit            _BIT_ACCESS(PIE0,0)
// INTCON<INTEDG>
extern volatile __bit                   INTEDG              __at(0x58);	// @ (0xB * 8 + 0)
#define                                 INTEDG_bit          _BIT_ACCESS(INTCON,0)
// PIR0<INTF>
extern volatile __bit                   INTF                __at(0x460);	// @ (0x8C * 8 + 0)
#define                                 INTF_bit            _BIT_ACCESS(PIR0,0)
// SCANCON0<INTM>
extern volatile __bit                   INTM                __at(0xE493);	// @ (0x1C92 * 8 + 3)
#define                                 INTM_bit            _BIT_ACCESS(SCANCON0,3)
// INTPPS<INTPPS0>
extern volatile __bit                   INTPPS0             __at(0xF068);	// @ (0x1E0D * 8 + 0)
#define                                 INTPPS0_bit         _BIT_ACCESS(INTPPS,0)
// INTPPS<INTPPS1>
extern volatile __bit                   INTPPS1             __at(0xF069);	// @ (0x1E0D * 8 + 1)
#define                                 INTPPS1_bit         _BIT_ACCESS(INTPPS,1)
// INTPPS<INTPPS2>
extern volatile __bit                   INTPPS2             __at(0xF06A);	// @ (0x1E0D * 8 + 2)
#define                                 INTPPS2_bit         _BIT_ACCESS(INTPPS,2)
// INTPPS<INTPPS3>
extern volatile __bit                   INTPPS3             __at(0xF06B);	// @ (0x1E0D * 8 + 3)
#define                                 INTPPS3_bit         _BIT_ACCESS(INTPPS,3)
// INTPPS<INTPPS4>
extern volatile __bit                   INTPPS4             __at(0xF06C);	// @ (0x1E0D * 8 + 4)
#define                                 INTPPS4_bit         _BIT_ACCESS(INTPPS,4)
// IOCAF<IOCAF0>
extern volatile __bit                   IOCAF0              __at(0xF498);	// @ (0x1E93 * 8 + 0)
#define                                 IOCAF0_bit          _BIT_ACCESS(IOCAF,0)
// IOCAF<IOCAF1>
extern volatile __bit                   IOCAF1              __at(0xF499);	// @ (0x1E93 * 8 + 1)
#define                                 IOCAF1_bit          _BIT_ACCESS(IOCAF,1)
// IOCAF<IOCAF2>
extern volatile __bit                   IOCAF2              __at(0xF49A);	// @ (0x1E93 * 8 + 2)
#define                                 IOCAF2_bit          _BIT_ACCESS(IOCAF,2)
// IOCAF<IOCAF3>
extern volatile __bit                   IOCAF3              __at(0xF49B);	// @ (0x1E93 * 8 + 3)
#define                                 IOCAF3_bit          _BIT_ACCESS(IOCAF,3)
// IOCAF<IOCAF4>
extern volatile __bit                   IOCAF4              __at(0xF49C);	// @ (0x1E93 * 8 + 4)
#define                                 IOCAF4_bit          _BIT_ACCESS(IOCAF,4)
// IOCAF<IOCAF5>
extern volatile __bit                   IOCAF5              __at(0xF49D);	// @ (0x1E93 * 8 + 5)
#define                                 IOCAF5_bit          _BIT_ACCESS(IOCAF,5)
// IOCAN<IOCAN0>
extern volatile __bit                   IOCAN0              __at(0xF490);	// @ (0x1E92 * 8 + 0)
#define                                 IOCAN0_bit          _BIT_ACCESS(IOCAN,0)
// IOCAN<IOCAN1>
extern volatile __bit                   IOCAN1              __at(0xF491);	// @ (0x1E92 * 8 + 1)
#define                                 IOCAN1_bit          _BIT_ACCESS(IOCAN,1)
// IOCAN<IOCAN2>
extern volatile __bit                   IOCAN2              __at(0xF492);	// @ (0x1E92 * 8 + 2)
#define                                 IOCAN2_bit          _BIT_ACCESS(IOCAN,2)
// IOCAN<IOCAN3>
extern volatile __bit                   IOCAN3              __at(0xF493);	// @ (0x1E92 * 8 + 3)
#define                                 IOCAN3_bit          _BIT_ACCESS(IOCAN,3)
// IOCAN<IOCAN4>
extern volatile __bit                   IOCAN4              __at(0xF494);	// @ (0x1E92 * 8 + 4)
#define                                 IOCAN4_bit          _BIT_ACCESS(IOCAN,4)
// IOCAN<IOCAN5>
extern volatile __bit                   IOCAN5              __at(0xF495);	// @ (0x1E92 * 8 + 5)
#define                                 IOCAN5_bit          _BIT_ACCESS(IOCAN,5)
// IOCAP<IOCAP0>
extern volatile __bit                   IOCAP0              __at(0xF488);	// @ (0x1E91 * 8 + 0)
#define                                 IOCAP0_bit          _BIT_ACCESS(IOCAP,0)
// IOCAP<IOCAP1>
extern volatile __bit                   IOCAP1              __at(0xF489);	// @ (0x1E91 * 8 + 1)
#define                                 IOCAP1_bit          _BIT_ACCESS(IOCAP,1)
// IOCAP<IOCAP2>
extern volatile __bit                   IOCAP2              __at(0xF48A);	// @ (0x1E91 * 8 + 2)
#define                                 IOCAP2_bit          _BIT_ACCESS(IOCAP,2)
// IOCAP<IOCAP3>
extern volatile __bit                   IOCAP3              __at(0xF48B);	// @ (0x1E91 * 8 + 3)
#define                                 IOCAP3_bit          _BIT_ACCESS(IOCAP,3)
// IOCAP<IOCAP4>
extern volatile __bit                   IOCAP4              __at(0xF48C);	// @ (0x1E91 * 8 + 4)
#define                                 IOCAP4_bit          _BIT_ACCESS(IOCAP,4)
// IOCAP<IOCAP5>
extern volatile __bit                   IOCAP5              __at(0xF48D);	// @ (0x1E91 * 8 + 5)
#define                                 IOCAP5_bit          _BIT_ACCESS(IOCAP,5)
// IOCCF<IOCCF0>
extern volatile __bit                   IOCCF0              __at(0xF538);	// @ (0x1EA7 * 8 + 0)
#define                                 IOCCF0_bit          _BIT_ACCESS(IOCCF,0)
// IOCCF<IOCCF1>
extern volatile __bit                   IOCCF1              __at(0xF539);	// @ (0x1EA7 * 8 + 1)
#define                                 IOCCF1_bit          _BIT_ACCESS(IOCCF,1)
// IOCCF<IOCCF2>
extern volatile __bit                   IOCCF2              __at(0xF53A);	// @ (0x1EA7 * 8 + 2)
#define                                 IOCCF2_bit          _BIT_ACCESS(IOCCF,2)
// IOCCF<IOCCF3>
extern volatile __bit                   IOCCF3              __at(0xF53B);	// @ (0x1EA7 * 8 + 3)
#define                                 IOCCF3_bit          _BIT_ACCESS(IOCCF,3)
// IOCCF<IOCCF4>
extern volatile __bit                   IOCCF4              __at(0xF53C);	// @ (0x1EA7 * 8 + 4)
#define                                 IOCCF4_bit          _BIT_ACCESS(IOCCF,4)
// IOCCF<IOCCF5>
extern volatile __bit                   IOCCF5              __at(0xF53D);	// @ (0x1EA7 * 8 + 5)
#define                                 IOCCF5_bit          _BIT_ACCESS(IOCCF,5)
// IOCCN<IOCCN0>
extern volatile __bit                   IOCCN0              __at(0xF530);	// @ (0x1EA6 * 8 + 0)
#define                                 IOCCN0_bit          _BIT_ACCESS(IOCCN,0)
// IOCCN<IOCCN1>
extern volatile __bit                   IOCCN1              __at(0xF531);	// @ (0x1EA6 * 8 + 1)
#define                                 IOCCN1_bit          _BIT_ACCESS(IOCCN,1)
// IOCCN<IOCCN2>
extern volatile __bit                   IOCCN2              __at(0xF532);	// @ (0x1EA6 * 8 + 2)
#define                                 IOCCN2_bit          _BIT_ACCESS(IOCCN,2)
// IOCCN<IOCCN3>
extern volatile __bit                   IOCCN3              __at(0xF533);	// @ (0x1EA6 * 8 + 3)
#define                                 IOCCN3_bit          _BIT_ACCESS(IOCCN,3)
// IOCCN<IOCCN4>
extern volatile __bit                   IOCCN4              __at(0xF534);	// @ (0x1EA6 * 8 + 4)
#define                                 IOCCN4_bit          _BIT_ACCESS(IOCCN,4)
// IOCCN<IOCCN5>
extern volatile __bit                   IOCCN5              __at(0xF535);	// @ (0x1EA6 * 8 + 5)
#define                                 IOCCN5_bit          _BIT_ACCESS(IOCCN,5)
// IOCCP<IOCCP0>
extern volatile __bit                   IOCCP0              __at(0xF528);	// @ (0x1EA5 * 8 + 0)
#define                                 IOCCP0_bit          _BIT_ACCESS(IOCCP,0)
// IOCCP<IOCCP1>
extern volatile __bit                   IOCCP1              __at(0xF529);	// @ (0x1EA5 * 8 + 1)
#define                                 IOCCP1_bit          _BIT_ACCESS(IOCCP,1)
// IOCCP<IOCCP2>
extern volatile __bit                   IOCCP2              __at(0xF52A);	// @ (0x1EA5 * 8 + 2)
#define                                 IOCCP2_bit          _BIT_ACCESS(IOCCP,2)
// IOCCP<IOCCP3>
extern volatile __bit                   IOCCP3              __at(0xF52B);	// @ (0x1EA5 * 8 + 3)
#define                                 IOCCP3_bit          _BIT_ACCESS(IOCCP,3)
// IOCCP<IOCCP4>
extern volatile __bit                   IOCCP4              __at(0xF52C);	// @ (0x1EA5 * 8 + 4)
#define                                 IOCCP4_bit          _BIT_ACCESS(IOCCP,4)
// IOCCP<IOCCP5>
extern volatile __bit                   IOCCP5              __at(0xF52D);	// @ (0x1EA5 * 8 + 5)
#define                                 IOCCP5_bit          _BIT_ACCESS(IOCCP,5)
// PIE0<IOCIE>
extern volatile __bit                   IOCIE               __at(0x4B4);	// @ (0x96 * 8 + 4)
#define                                 IOCIE_bit           _BIT_ACCESS(PIE0,4)
// PIR0<IOCIF>
extern volatile __bit                   IOCIF               __at(0x464);	// @ (0x8C * 8 + 4)
#define                                 IOCIF_bit           _BIT_ACCESS(PIR0,4)
// PMD0<IOCMD>
extern volatile __bit                   IOCMD               __at(0x865);	// @ (0x10C * 8 + 5)
#define                                 IOCMD_bit           _BIT_ACCESS(PMD0,5)
// ADCON1<IPEN>
extern volatile __bit                   IPEN                __at(0xE93E);	// @ (0x1D27 * 8 + 6)
#define                                 IPEN_bit            _BIT_ACCESS(ADCON1,6)
// LATA<LATA0>
extern volatile __bit                   LATA0               __at(0xC0);	// @ (0x18 * 8 + 0)
#define                                 LATA0_bit           _BIT_ACCESS(LATA,0)
// LATA<LATA1>
extern volatile __bit                   LATA1               __at(0xC1);	// @ (0x18 * 8 + 1)
#define                                 LATA1_bit           _BIT_ACCESS(LATA,1)
// LATA<LATA2>
extern volatile __bit                   LATA2               __at(0xC2);	// @ (0x18 * 8 + 2)
#define                                 LATA2_bit           _BIT_ACCESS(LATA,2)
// LATA<LATA4>
extern volatile __bit                   LATA4               __at(0xC4);	// @ (0x18 * 8 + 4)
#define                                 LATA4_bit           _BIT_ACCESS(LATA,4)
// LATA<LATA5>
extern volatile __bit                   LATA5               __at(0xC5);	// @ (0x18 * 8 + 5)
#define                                 LATA5_bit           _BIT_ACCESS(LATA,5)
// LATC<LATC0>
extern volatile __bit                   LATC0               __at(0xD0);	// @ (0x1A * 8 + 0)
#define                                 LATC0_bit           _BIT_ACCESS(LATC,0)
// LATC<LATC1>
extern volatile __bit                   LATC1               __at(0xD1);	// @ (0x1A * 8 + 1)
#define                                 LATC1_bit           _BIT_ACCESS(LATC,1)
// LATC<LATC2>
extern volatile __bit                   LATC2               __at(0xD2);	// @ (0x1A * 8 + 2)
#define                                 LATC2_bit           _BIT_ACCESS(LATC,2)
// LATC<LATC3>
extern volatile __bit                   LATC3               __at(0xD3);	// @ (0x1A * 8 + 3)
#define                                 LATC3_bit           _BIT_ACCESS(LATC,3)
// LATC<LATC4>
extern volatile __bit                   LATC4               __at(0xD4);	// @ (0x1A * 8 + 4)
#define                                 LATC4_bit           _BIT_ACCESS(LATC,4)
// LATC<LATC5>
extern volatile __bit                   LATC5               __at(0xD5);	// @ (0x1A * 8 + 5)
#define                                 LATC5_bit           _BIT_ACCESS(LATC,5)
// CRCCON0<LENDIAN>
extern volatile __bit                   LENDIAN             __at(0xE529);	// @ (0x1CA5 * 8 + 1)
#define                                 LENDIAN_bit         _BIT_ACCESS(CRCCON0,1)
// OSCEN<LFOEN>
extern volatile __bit                   LFOEN               __at(0x148C);	// @ (0x291 * 8 + 4)
#define                                 LFOEN_bit           _BIT_ACCESS(OSCEN,4)
// OSCSTAT<LFOR>
extern volatile __bit                   LFOR                __at(0x1484);	// @ (0x290 * 8 + 4)
#define                                 LFOR_bit            _BIT_ACCESS(OSCSTAT,4)
// ADLTHL<LTH0>
extern volatile __bit                   LTH0                __at(0xE860);	// @ (0x1D0C * 8 + 0)
#define                                 LTH0_bit            _BIT_ACCESS(ADLTHL,0)
// ADLTHL<LTH1>
extern volatile __bit                   LTH1                __at(0xE861);	// @ (0x1D0C * 8 + 1)
#define                                 LTH1_bit            _BIT_ACCESS(ADLTHL,1)
// ADLTHH<LTH10>
extern volatile __bit                   LTH10               __at(0xE86A);	// @ (0x1D0D * 8 + 2)
#define                                 LTH10_bit           _BIT_ACCESS(ADLTHH,2)
// ADLTHH<LTH11>
extern volatile __bit                   LTH11               __at(0xE86B);	// @ (0x1D0D * 8 + 3)
#define                                 LTH11_bit           _BIT_ACCESS(ADLTHH,3)
// ADLTHH<LTH12>
extern volatile __bit                   LTH12               __at(0xE86C);	// @ (0x1D0D * 8 + 4)
#define                                 LTH12_bit           _BIT_ACCESS(ADLTHH,4)
// ADLTHH<LTH13>
extern volatile __bit                   LTH13               __at(0xE86D);	// @ (0x1D0D * 8 + 5)
#define                                 LTH13_bit           _BIT_ACCESS(ADLTHH,5)
// ADLTHH<LTH14>
extern volatile __bit                   LTH14               __at(0xE86E);	// @ (0x1D0D * 8 + 6)
#define                                 LTH14_bit           _BIT_ACCESS(ADLTHH,6)
// ADLTHH<LTH15>
extern volatile __bit                   LTH15               __at(0xE86F);	// @ (0x1D0D * 8 + 7)
#define                                 LTH15_bit           _BIT_ACCESS(ADLTHH,7)
// ADLTHL<LTH2>
extern volatile __bit                   LTH2                __at(0xE862);	// @ (0x1D0C * 8 + 2)
#define                                 LTH2_bit            _BIT_ACCESS(ADLTHL,2)
// ADLTHL<LTH3>
extern volatile __bit                   LTH3                __at(0xE863);	// @ (0x1D0C * 8 + 3)
#define                                 LTH3_bit            _BIT_ACCESS(ADLTHL,3)
// ADLTHL<LTH4>
extern volatile __bit                   LTH4                __at(0xE864);	// @ (0x1D0C * 8 + 4)
#define                                 LTH4_bit            _BIT_ACCESS(ADLTHL,4)
// ADLTHL<LTH5>
extern volatile __bit                   LTH5                __at(0xE865);	// @ (0x1D0C * 8 + 5)
#define                                 LTH5_bit            _BIT_ACCESS(ADLTHL,5)
// ADLTHL<LTH6>
extern volatile __bit                   LTH6                __at(0xE866);	// @ (0x1D0C * 8 + 6)
#define                                 LTH6_bit            _BIT_ACCESS(ADLTHL,6)
// ADLTHL<LTH7>
extern volatile __bit                   LTH7                __at(0xE867);	// @ (0x1D0C * 8 + 7)
#define                                 LTH7_bit            _BIT_ACCESS(ADLTHL,7)
// ADLTHH<LTH8>
extern volatile __bit                   LTH8                __at(0xE868);	// @ (0x1D0D * 8 + 0)
#define                                 LTH8_bit            _BIT_ACCESS(ADLTHH,0)
// ADLTHH<LTH9>
extern volatile __bit                   LTH9                __at(0xE869);	// @ (0x1D0D * 8 + 1)
#define                                 LTH9_bit            _BIT_ACCESS(ADLTHH,1)
// ADSTAT<LTHR>
extern volatile __bit                   LTHR                __at(0xE955);	// @ (0x1D2A * 8 + 5)
#define                                 LTHR_bit            _BIT_ACCESS(ADSTAT,5)
// NVMCON1<LWLO>
extern volatile __bit                   LWLO                __at(0xE485);	// @ (0x1C90 * 8 + 5)
#define                                 LWLO_bit            _BIT_ACCESS(NVMCON1,5)
// ADSTAT<MATH>
extern volatile __bit                   MATH                __at(0xE954);	// @ (0x1D2A * 8 + 4)
#define                                 MATH_bit            _BIT_ACCESS(ADSTAT,4)
// T0CON0<MD16>
extern volatile __bit                   MD16                __at(0xCF4);	// @ (0x19E * 8 + 4)
#define                                 MD16_bit            _BIT_ACCESS(T0CON0,4)
// ADCON2<MD2>
extern volatile __bit                   MD2                 __at(0xE942);	// @ (0x1D28 * 8 + 2)
#define                                 MD2_bit             _BIT_ACCESS(ADCON2,2)
// OSCEN<MFOEN>
extern volatile __bit                   MFOEN               __at(0x148D);	// @ (0x291 * 8 + 5)
#define                                 MFOEN_bit           _BIT_ACCESS(OSCEN,5)
// OSCSTAT<MFOR>
extern volatile __bit                   MFOR                __at(0x1485);	// @ (0x290 * 8 + 5)
#define                                 MFOR_bit            _BIT_ACCESS(OSCSTAT,5)
// T2HLT<MODE4>
extern volatile __bit                   MODE4               __at(0x1C7C);	// @ (0x38F * 8 + 4)
#define                                 MODE4_bit           _BIT_ACCESS(T2HLT,4)
// SSP1ADD<MSK01>
extern volatile __bit                   MSK01               __at(0x3C68);	// @ (0x78D * 8 + 0)
#define                                 MSK01_bit           _BIT_ACCESS(SSP1ADD,0)
// SSP1ADD<MSK11>
extern volatile __bit                   MSK11               __at(0x3C69);	// @ (0x78D * 8 + 1)
#define                                 MSK11_bit           _BIT_ACCESS(SSP1ADD,1)
// SSP1ADD<MSK21>
extern volatile __bit                   MSK21               __at(0x3C6A);	// @ (0x78D * 8 + 2)
#define                                 MSK21_bit           _BIT_ACCESS(SSP1ADD,2)
// SSP1ADD<MSK31>
extern volatile __bit                   MSK31               __at(0x3C6B);	// @ (0x78D * 8 + 3)
#define                                 MSK31_bit           _BIT_ACCESS(SSP1ADD,3)
// SSP1ADD<MSK41>
extern volatile __bit                   MSK41               __at(0x3C6C);	// @ (0x78D * 8 + 4)
#define                                 MSK41_bit           _BIT_ACCESS(SSP1ADD,4)
// SSP1ADD<MSK51>
extern volatile __bit                   MSK51               __at(0x3C6D);	// @ (0x78D * 8 + 5)
#define                                 MSK51_bit           _BIT_ACCESS(SSP1ADD,5)
// SSP1ADD<MSK61>
extern volatile __bit                   MSK61               __at(0x3C6E);	// @ (0x78D * 8 + 6)
#define                                 MSK61_bit           _BIT_ACCESS(SSP1ADD,6)
// SSP1ADD<MSK71>
extern volatile __bit                   MSK71               __at(0x3C6F);	// @ (0x78D * 8 + 7)
#define                                 MSK71_bit           _BIT_ACCESS(SSP1ADD,7)
// PMD3<MSSP1MD>
extern volatile __bit                   MSSP1MD             __at(0x87B);	// @ (0x10F * 8 + 3)
#define                                 MSSP1MD_bit         _BIT_ACCESS(PMD3,3)
// OSCCON1<NDIV0>
extern volatile __bit                   NDIV0               __at(0x1468);	// @ (0x28D * 8 + 0)
#define                                 NDIV0_bit           _BIT_ACCESS(OSCCON1,0)
// OSCCON1<NDIV1>
extern volatile __bit                   NDIV1               __at(0x1469);	// @ (0x28D * 8 + 1)
#define                                 NDIV1_bit           _BIT_ACCESS(OSCCON1,1)
// OSCCON1<NDIV2>
extern volatile __bit                   NDIV2               __at(0x146A);	// @ (0x28D * 8 + 2)
#define                                 NDIV2_bit           _BIT_ACCESS(OSCCON1,2)
// OSCCON1<NDIV3>
extern volatile __bit                   NDIV3               __at(0x146B);	// @ (0x28D * 8 + 3)
#define                                 NDIV3_bit           _BIT_ACCESS(OSCCON1,3)
// OSCCON1<NOSC0>
extern volatile __bit                   NOSC0               __at(0x146C);	// @ (0x28D * 8 + 4)
#define                                 NOSC0_bit           _BIT_ACCESS(OSCCON1,4)
// OSCCON1<NOSC1>
extern volatile __bit                   NOSC1               __at(0x146D);	// @ (0x28D * 8 + 5)
#define                                 NOSC1_bit           _BIT_ACCESS(OSCCON1,5)
// OSCCON1<NOSC2>
extern volatile __bit                   NOSC2               __at(0x146E);	// @ (0x28D * 8 + 6)
#define                                 NOSC2_bit           _BIT_ACCESS(OSCCON1,6)
// OSCCON3<NOSCR>
extern volatile __bit                   NOSCR               __at(0x147B);	// @ (0x28F * 8 + 3)
#define                                 NOSCR_bit           _BIT_ACCESS(OSCCON3,3)
// NVMADRL<NVMADR0>
extern volatile __bit                   NVMADR0             __at(0xE460);	// @ (0x1C8C * 8 + 0)
#define                                 NVMADR0_bit         _BIT_ACCESS(NVMADRL,0)
// NVMADRL<NVMADR1>
extern volatile __bit                   NVMADR1             __at(0xE461);	// @ (0x1C8C * 8 + 1)
#define                                 NVMADR1_bit         _BIT_ACCESS(NVMADRL,1)
// NVMADRH<NVMADR10>
extern volatile __bit                   NVMADR10            __at(0xE46A);	// @ (0x1C8D * 8 + 2)
#define                                 NVMADR10_bit        _BIT_ACCESS(NVMADRH,2)
// NVMADRH<NVMADR11>
extern volatile __bit                   NVMADR11            __at(0xE46B);	// @ (0x1C8D * 8 + 3)
#define                                 NVMADR11_bit        _BIT_ACCESS(NVMADRH,3)
// NVMADRH<NVMADR12>
extern volatile __bit                   NVMADR12            __at(0xE46C);	// @ (0x1C8D * 8 + 4)
#define                                 NVMADR12_bit        _BIT_ACCESS(NVMADRH,4)
// NVMADRH<NVMADR13>
extern volatile __bit                   NVMADR13            __at(0xE46D);	// @ (0x1C8D * 8 + 5)
#define                                 NVMADR13_bit        _BIT_ACCESS(NVMADRH,5)
// NVMADRH<NVMADR14>
extern volatile __bit                   NVMADR14            __at(0xE46E);	// @ (0x1C8D * 8 + 6)
#define                                 NVMADR14_bit        _BIT_ACCESS(NVMADRH,6)
// NVMADRL<NVMADR2>
extern volatile __bit                   NVMADR2             __at(0xE462);	// @ (0x1C8C * 8 + 2)
#define                                 NVMADR2_bit         _BIT_ACCESS(NVMADRL,2)
// NVMADRL<NVMADR3>
extern volatile __bit                   NVMADR3             __at(0xE463);	// @ (0x1C8C * 8 + 3)
#define                                 NVMADR3_bit         _BIT_ACCESS(NVMADRL,3)
// NVMADRL<NVMADR4>
extern volatile __bit                   NVMADR4             __at(0xE464);	// @ (0x1C8C * 8 + 4)
#define                                 NVMADR4_bit         _BIT_ACCESS(NVMADRL,4)
// NVMADRL<NVMADR5>
extern volatile __bit                   NVMADR5             __at(0xE465);	// @ (0x1C8C * 8 + 5)
#define                                 NVMADR5_bit         _BIT_ACCESS(NVMADRL,5)
// NVMADRL<NVMADR6>
extern volatile __bit                   NVMADR6             __at(0xE466);	// @ (0x1C8C * 8 + 6)
#define                                 NVMADR6_bit         _BIT_ACCESS(NVMADRL,6)
// NVMADRL<NVMADR7>
extern volatile __bit                   NVMADR7             __at(0xE467);	// @ (0x1C8C * 8 + 7)
#define                                 NVMADR7_bit         _BIT_ACCESS(NVMADRL,7)
// NVMADRH<NVMADR8>
extern volatile __bit                   NVMADR8             __at(0xE468);	// @ (0x1C8D * 8 + 0)
#define                                 NVMADR8_bit         _BIT_ACCESS(NVMADRH,0)
// NVMADRH<NVMADR9>
extern volatile __bit                   NVMADR9             __at(0xE469);	// @ (0x1C8D * 8 + 1)
#define                                 NVMADR9_bit         _BIT_ACCESS(NVMADRH,1)
// NVMDATL<NVMDAT0>
extern volatile __bit                   NVMDAT0             __at(0xE470);	// @ (0x1C8E * 8 + 0)
#define                                 NVMDAT0_bit         _BIT_ACCESS(NVMDATL,0)
// NVMDATL<NVMDAT1>
extern volatile __bit                   NVMDAT1             __at(0xE471);	// @ (0x1C8E * 8 + 1)
#define                                 NVMDAT1_bit         _BIT_ACCESS(NVMDATL,1)
// NVMDATH<NVMDAT10>
extern volatile __bit                   NVMDAT10            __at(0xE47A);	// @ (0x1C8F * 8 + 2)
#define                                 NVMDAT10_bit        _BIT_ACCESS(NVMDATH,2)
// NVMDATH<NVMDAT11>
extern volatile __bit                   NVMDAT11            __at(0xE47B);	// @ (0x1C8F * 8 + 3)
#define                                 NVMDAT11_bit        _BIT_ACCESS(NVMDATH,3)
// NVMDATH<NVMDAT12>
extern volatile __bit                   NVMDAT12            __at(0xE47C);	// @ (0x1C8F * 8 + 4)
#define                                 NVMDAT12_bit        _BIT_ACCESS(NVMDATH,4)
// NVMDATH<NVMDAT13>
extern volatile __bit                   NVMDAT13            __at(0xE47D);	// @ (0x1C8F * 8 + 5)
#define                                 NVMDAT13_bit        _BIT_ACCESS(NVMDATH,5)
// NVMDATL<NVMDAT2>
extern volatile __bit                   NVMDAT2             __at(0xE472);	// @ (0x1C8E * 8 + 2)
#define                                 NVMDAT2_bit         _BIT_ACCESS(NVMDATL,2)
// NVMDATL<NVMDAT3>
extern volatile __bit                   NVMDAT3             __at(0xE473);	// @ (0x1C8E * 8 + 3)
#define                                 NVMDAT3_bit         _BIT_ACCESS(NVMDATL,3)
// NVMDATL<NVMDAT4>
extern volatile __bit                   NVMDAT4             __at(0xE474);	// @ (0x1C8E * 8 + 4)
#define                                 NVMDAT4_bit         _BIT_ACCESS(NVMDATL,4)
// NVMDATL<NVMDAT5>
extern volatile __bit                   NVMDAT5             __at(0xE475);	// @ (0x1C8E * 8 + 5)
#define                                 NVMDAT5_bit         _BIT_ACCESS(NVMDATL,5)
// NVMDATL<NVMDAT6>
extern volatile __bit                   NVMDAT6             __at(0xE476);	// @ (0x1C8E * 8 + 6)
#define                                 NVMDAT6_bit         _BIT_ACCESS(NVMDATL,6)
// NVMDATL<NVMDAT7>
extern volatile __bit                   NVMDAT7             __at(0xE477);	// @ (0x1C8E * 8 + 7)
#define                                 NVMDAT7_bit         _BIT_ACCESS(NVMDATL,7)
// NVMDATH<NVMDAT8>
extern volatile __bit                   NVMDAT8             __at(0xE478);	// @ (0x1C8F * 8 + 0)
#define                                 NVMDAT8_bit         _BIT_ACCESS(NVMDATH,0)
// NVMDATH<NVMDAT9>
extern volatile __bit                   NVMDAT9             __at(0xE479);	// @ (0x1C8F * 8 + 1)
#define                                 NVMDAT9_bit         _BIT_ACCESS(NVMDATH,1)
// PIE1<NVMIE>
extern volatile __bit                   NVMIE               __at(0x4B8);	// @ (0x97 * 8 + 0)
#define                                 NVMIE_bit           _BIT_ACCESS(PIE1,0)
// PIR1<NVMIF>
extern volatile __bit                   NVMIF               __at(0x468);	// @ (0x8D * 8 + 0)
#define                                 NVMIF_bit           _BIT_ACCESS(PIR1,0)
// PMD0<NVMMD>
extern volatile __bit                   NVMMD               __at(0x860);	// @ (0x10C * 8 + 0)
#define                                 NVMMD_bit           _BIT_ACCESS(PMD0,0)
// NVMCON1<NVMREGS>
extern volatile __bit                   NVMREGS             __at(0xE486);	// @ (0x1C90 * 8 + 6)
#define                                 NVMREGS_bit         _BIT_ACCESS(NVMCON1,6)
// ODCONA<ODCA0>
extern volatile __bit                   ODCA0               __at(0xF470);	// @ (0x1E8E * 8 + 0)
#define                                 ODCA0_bit           _BIT_ACCESS(ODCONA,0)
// ODCONA<ODCA1>
extern volatile __bit                   ODCA1               __at(0xF471);	// @ (0x1E8E * 8 + 1)
#define                                 ODCA1_bit           _BIT_ACCESS(ODCONA,1)
// ODCONA<ODCA2>
extern volatile __bit                   ODCA2               __at(0xF472);	// @ (0x1E8E * 8 + 2)
#define                                 ODCA2_bit           _BIT_ACCESS(ODCONA,2)
// ODCONA<ODCA4>
extern volatile __bit                   ODCA4               __at(0xF474);	// @ (0x1E8E * 8 + 4)
#define                                 ODCA4_bit           _BIT_ACCESS(ODCONA,4)
// ODCONA<ODCA5>
extern volatile __bit                   ODCA5               __at(0xF475);	// @ (0x1E8E * 8 + 5)
#define                                 ODCA5_bit           _BIT_ACCESS(ODCONA,5)
// ODCONC<ODCC0>
extern volatile __bit                   ODCC0               __at(0xF510);	// @ (0x1EA2 * 8 + 0)
#define                                 ODCC0_bit           _BIT_ACCESS(ODCONC,0)
// ODCONC<ODCC1>
extern volatile __bit                   ODCC1               __at(0xF511);	// @ (0x1EA2 * 8 + 1)
#define                                 ODCC1_bit           _BIT_ACCESS(ODCONC,1)
// ODCONC<ODCC2>
extern volatile __bit                   ODCC2               __at(0xF512);	// @ (0x1EA2 * 8 + 2)
#define                                 ODCC2_bit           _BIT_ACCESS(ODCONC,2)
// ODCONC<ODCC3>
extern volatile __bit                   ODCC3               __at(0xF513);	// @ (0x1EA2 * 8 + 3)
#define                                 ODCC3_bit           _BIT_ACCESS(ODCONC,3)
// ODCONC<ODCC4>
extern volatile __bit                   ODCC4               __at(0xF514);	// @ (0x1EA2 * 8 + 4)
#define                                 ODCC4_bit           _BIT_ACCESS(ODCONC,4)
// ODCONC<ODCC5>
extern volatile __bit                   ODCC5               __at(0xF515);	// @ (0x1EA2 * 8 + 5)
#define                                 ODCC5_bit           _BIT_ACCESS(ODCONC,5)
// DAC1CON<OE0>
extern volatile __bit                   OE0                 __at(0x4464);	// @ (0x88C * 8 + 4)
#define                                 OE0_bit             _BIT_ACCESS(DAC1CON,4)
// DAC1CON<OE1>
extern volatile __bit                   OE1                 __at(0x4465);	// @ (0x88C * 8 + 5)
#define                                 OE1_bit             _BIT_ACCESS(DAC1CON,5)
// RC1STA<OERR>
extern volatile __bit                   OERR                __at(0x3881);	// @ (0x710 * 8 + 1)
#define                                 OERR_bit            _BIT_ACCESS(RC1STA,1)
// OSCCON3<ORDY>
extern volatile __bit                   ORDY                __at(0x147C);	// @ (0x28F * 8 + 4)
#define                                 ORDY_bit            _BIT_ACCESS(OSCCON3,4)
// PIE1<OSFIE>
extern volatile __bit                   OSFIE               __at(0x4BD);	// @ (0x97 * 8 + 5)
#define                                 OSFIE_bit           _BIT_ACCESS(PIE1,5)
// PIR1<OSFIF>
extern volatile __bit                   OSFIF               __at(0x46D);	// @ (0x8D * 8 + 5)
#define                                 OSFIF_bit           _BIT_ACCESS(PIR1,5)
// CRCOUTL<OUT0>
extern volatile __bit                   OUT0                __at(0xE508);	// @ (0x1CA1 * 8 + 0)
#define                                 OUT0_bit            _BIT_ACCESS(CRCOUTL,0)
// CRCOUTL<OUT1>
extern volatile __bit                   OUT1                __at(0xE509);	// @ (0x1CA1 * 8 + 1)
#define                                 OUT1_bit            _BIT_ACCESS(CRCOUTL,1)
// CRCOUTH<OUT10>
extern volatile __bit                   OUT10               __at(0xE512);	// @ (0x1CA2 * 8 + 2)
#define                                 OUT10_bit           _BIT_ACCESS(CRCOUTH,2)
// CRCOUTH<OUT11>
extern volatile __bit                   OUT11               __at(0xE513);	// @ (0x1CA2 * 8 + 3)
#define                                 OUT11_bit           _BIT_ACCESS(CRCOUTH,3)
// CRCOUTH<OUT12>
extern volatile __bit                   OUT12               __at(0xE514);	// @ (0x1CA2 * 8 + 4)
#define                                 OUT12_bit           _BIT_ACCESS(CRCOUTH,4)
// CRCOUTH<OUT13>
extern volatile __bit                   OUT13               __at(0xE515);	// @ (0x1CA2 * 8 + 5)
#define                                 OUT13_bit           _BIT_ACCESS(CRCOUTH,5)
// CRCOUTH<OUT14>
extern volatile __bit                   OUT14               __at(0xE516);	// @ (0x1CA2 * 8 + 6)
#define                                 OUT14_bit           _BIT_ACCESS(CRCOUTH,6)
// CRCOUTH<OUT15>
extern volatile __bit                   OUT15               __at(0xE517);	// @ (0x1CA2 * 8 + 7)
#define                                 OUT15_bit           _BIT_ACCESS(CRCOUTH,7)
// CRCOUTU<OUT16>
extern volatile __bit                   OUT16               __at(0xE518);	// @ (0x1CA3 * 8 + 0)
#define                                 OUT16_bit           _BIT_ACCESS(CRCOUTU,0)
// CRCOUTU<OUT17>
extern volatile __bit                   OUT17               __at(0xE519);	// @ (0x1CA3 * 8 + 1)
#define                                 OUT17_bit           _BIT_ACCESS(CRCOUTU,1)
// CRCOUTU<OUT18>
extern volatile __bit                   OUT18               __at(0xE51A);	// @ (0x1CA3 * 8 + 2)
#define                                 OUT18_bit           _BIT_ACCESS(CRCOUTU,2)
// CRCOUTU<OUT19>
extern volatile __bit                   OUT19               __at(0xE51B);	// @ (0x1CA3 * 8 + 3)
#define                                 OUT19_bit           _BIT_ACCESS(CRCOUTU,3)
// CRCOUTL<OUT2>
extern volatile __bit                   OUT2                __at(0xE50A);	// @ (0x1CA1 * 8 + 2)
#define                                 OUT2_bit            _BIT_ACCESS(CRCOUTL,2)
// CRCOUTU<OUT20>
extern volatile __bit                   OUT20               __at(0xE51C);	// @ (0x1CA3 * 8 + 4)
#define                                 OUT20_bit           _BIT_ACCESS(CRCOUTU,4)
// CRCOUTU<OUT21>
extern volatile __bit                   OUT21               __at(0xE51D);	// @ (0x1CA3 * 8 + 5)
#define                                 OUT21_bit           _BIT_ACCESS(CRCOUTU,5)
// CRCOUTU<OUT22>
extern volatile __bit                   OUT22               __at(0xE51E);	// @ (0x1CA3 * 8 + 6)
#define                                 OUT22_bit           _BIT_ACCESS(CRCOUTU,6)
// CRCOUTU<OUT23>
extern volatile __bit                   OUT23               __at(0xE51F);	// @ (0x1CA3 * 8 + 7)
#define                                 OUT23_bit           _BIT_ACCESS(CRCOUTU,7)
// CRCOUTT<OUT24>
extern volatile __bit                   OUT24               __at(0xE520);	// @ (0x1CA4 * 8 + 0)
#define                                 OUT24_bit           _BIT_ACCESS(CRCOUTT,0)
// CRCOUTT<OUT25>
extern volatile __bit                   OUT25               __at(0xE521);	// @ (0x1CA4 * 8 + 1)
#define                                 OUT25_bit           _BIT_ACCESS(CRCOUTT,1)
// CRCOUTT<OUT26>
extern volatile __bit                   OUT26               __at(0xE522);	// @ (0x1CA4 * 8 + 2)
#define                                 OUT26_bit           _BIT_ACCESS(CRCOUTT,2)
// CRCOUTT<OUT27>
extern volatile __bit                   OUT27               __at(0xE523);	// @ (0x1CA4 * 8 + 3)
#define                                 OUT27_bit           _BIT_ACCESS(CRCOUTT,3)
// CRCOUTT<OUT28>
extern volatile __bit                   OUT28               __at(0xE524);	// @ (0x1CA4 * 8 + 4)
#define                                 OUT28_bit           _BIT_ACCESS(CRCOUTT,4)
// CRCOUTT<OUT29>
extern volatile __bit                   OUT29               __at(0xE525);	// @ (0x1CA4 * 8 + 5)
#define                                 OUT29_bit           _BIT_ACCESS(CRCOUTT,5)
// CRCOUTL<OUT3>
extern volatile __bit                   OUT3                __at(0xE50B);	// @ (0x1CA1 * 8 + 3)
#define                                 OUT3_bit            _BIT_ACCESS(CRCOUTL,3)
// CRCOUTT<OUT30>
extern volatile __bit                   OUT30               __at(0xE526);	// @ (0x1CA4 * 8 + 6)
#define                                 OUT30_bit           _BIT_ACCESS(CRCOUTT,6)
// CRCOUTT<OUT31>
extern volatile __bit                   OUT31               __at(0xE527);	// @ (0x1CA4 * 8 + 7)
#define                                 OUT31_bit           _BIT_ACCESS(CRCOUTT,7)
// CRCOUTL<OUT4>
extern volatile __bit                   OUT4                __at(0xE50C);	// @ (0x1CA1 * 8 + 4)
#define                                 OUT4_bit            _BIT_ACCESS(CRCOUTL,4)
// CRCOUTL<OUT5>
extern volatile __bit                   OUT5                __at(0xE50D);	// @ (0x1CA1 * 8 + 5)
#define                                 OUT5_bit            _BIT_ACCESS(CRCOUTL,5)
// CRCOUTL<OUT6>
extern volatile __bit                   OUT6                __at(0xE50E);	// @ (0x1CA1 * 8 + 6)
#define                                 OUT6_bit            _BIT_ACCESS(CRCOUTL,6)
// CRCOUTL<OUT7>
extern volatile __bit                   OUT7                __at(0xE50F);	// @ (0x1CA1 * 8 + 7)
#define                                 OUT7_bit            _BIT_ACCESS(CRCOUTL,7)
// CRCOUTH<OUT8>
extern volatile __bit                   OUT8                __at(0xE510);	// @ (0x1CA2 * 8 + 0)
#define                                 OUT8_bit            _BIT_ACCESS(CRCOUTH,0)
// CRCOUTH<OUT9>
extern volatile __bit                   OUT9                __at(0xE511);	// @ (0x1CA2 * 8 + 1)
#define                                 OUT9_bit            _BIT_ACCESS(CRCOUTH,1)
// ADSTAT<OV>
extern volatile __bit                   OV                  __at(0xE957);	// @ (0x1D2A * 8 + 7)
#define                                 OV_bit              _BIT_ACCESS(ADSTAT,7)
// CCP1CON<P1M1>
extern volatile __bit                   P1M1                __at(0x2077);	// @ (0x40E * 8 + 7)
#define                                 P1M1_bit            _BIT_ACCESS(CCP1CON,7)
// SSP1STAT<P2>
extern volatile __bit                   P2                  __at(0x3C7C);	// @ (0x78F * 8 + 4)
#define                                 P2_bit              _BIT_ACCESS(SSP1STAT,4)
// CCP2CON<P2M1>
extern volatile __bit                   P2M1                __at(0x2097);	// @ (0x412 * 8 + 7)
#define                                 P2M1_bit            _BIT_ACCESS(CCP2CON,7)
// SSP1CON3<PCIE>
extern volatile __bit                   PCIE                __at(0x3C96);	// @ (0x792 * 8 + 6)
#define                                 PCIE_bit            _BIT_ACCESS(SSP1CON3,6)
// ADCON1<PCSC>
extern volatile __bit                   PCSC                __at(0xE939);	// @ (0x1D27 * 8 + 1)
#define                                 PCSC_bit            _BIT_ACCESS(ADCON1,1)
// INTCON<PEIE>
extern volatile __bit                   PEIE                __at(0x5E);	// @ (0xB * 8 + 6)
#define                                 PEIE_bit            _BIT_ACCESS(INTCON,6)
// SSP1CON2<PEN>
extern volatile __bit                   PEN                 __at(0x3C8A);	// @ (0x791 * 8 + 2)
#define                                 PEN_bit             _BIT_ACCESS(SSP1CON2,2)
// SSP1CON2<PEN1>
extern volatile __bit                   PEN1                __at(0x3C8A);	// @ (0x791 * 8 + 2)
#define                                 PEN1_bit            _BIT_ACCESS(SSP1CON2,2)
// CRCCON1<PLEN0>
extern volatile __bit                   PLEN0               __at(0xE530);	// @ (0x1CA6 * 8 + 0)
#define                                 PLEN0_bit           _BIT_ACCESS(CRCCON1,0)
// CRCCON1<PLEN1>
extern volatile __bit                   PLEN1               __at(0xE531);	// @ (0x1CA6 * 8 + 1)
#define                                 PLEN1_bit           _BIT_ACCESS(CRCCON1,1)
// CRCCON1<PLEN2>
extern volatile __bit                   PLEN2               __at(0xE532);	// @ (0x1CA6 * 8 + 2)
#define                                 PLEN2_bit           _BIT_ACCESS(CRCCON1,2)
// CRCCON1<PLEN3>
extern volatile __bit                   PLEN3               __at(0xE533);	// @ (0x1CA6 * 8 + 3)
#define                                 PLEN3_bit           _BIT_ACCESS(CRCCON1,3)
// CRCCON1<PLEN4>
extern volatile __bit                   PLEN4               __at(0xE534);	// @ (0x1CA6 * 8 + 4)
#define                                 PLEN4_bit           _BIT_ACCESS(CRCCON1,4)
// OSCEN<PLLEN>
extern volatile __bit                   PLLEN               __at(0x1488);	// @ (0x291 * 8 + 0)
#define                                 PLLEN_bit           _BIT_ACCESS(OSCEN,0)
// OSCSTAT<PLLR>
extern volatile __bit                   PLLR                __at(0x1480);	// @ (0x290 * 8 + 0)
#define                                 PLLR_bit            _BIT_ACCESS(OSCSTAT,0)
// ADCON1<PPOL>
extern volatile __bit                   PPOL                __at(0xE93F);	// @ (0x1D27 * 8 + 7)
#define                                 PPOL_bit            _BIT_ACCESS(ADCON1,7)
// PPSLOCK<PPSLOCKED>
extern volatile __bit                   PPSLOCKED           __at(0xF060);	// @ (0x1E0C * 8 + 0)
#define                                 PPSLOCKED_bit       _BIT_ACCESS(PPSLOCK,0)
// ADPREL<PRE0>
extern volatile __bit                   PRE0                __at(0xE920);	// @ (0x1D24 * 8 + 0)
#define                                 PRE0_bit            _BIT_ACCESS(ADPREL,0)
// ADPREL<PRE1>
extern volatile __bit                   PRE1                __at(0xE921);	// @ (0x1D24 * 8 + 1)
#define                                 PRE1_bit            _BIT_ACCESS(ADPREL,1)
// ADPREH<PRE10>
extern volatile __bit                   PRE10               __at(0xE92A);	// @ (0x1D25 * 8 + 2)
#define                                 PRE10_bit           _BIT_ACCESS(ADPREH,2)
// ADPREH<PRE11>
extern volatile __bit                   PRE11               __at(0xE92B);	// @ (0x1D25 * 8 + 3)
#define                                 PRE11_bit           _BIT_ACCESS(ADPREH,3)
// ADPREH<PRE12>
extern volatile __bit                   PRE12               __at(0xE92C);	// @ (0x1D25 * 8 + 4)
#define                                 PRE12_bit           _BIT_ACCESS(ADPREH,4)
// ADPREL<PRE2>
extern volatile __bit                   PRE2                __at(0xE922);	// @ (0x1D24 * 8 + 2)
#define                                 PRE2_bit            _BIT_ACCESS(ADPREL,2)
// ADPREL<PRE3>
extern volatile __bit                   PRE3                __at(0xE923);	// @ (0x1D24 * 8 + 3)
#define                                 PRE3_bit            _BIT_ACCESS(ADPREL,3)
// ADPREL<PRE4>
extern volatile __bit                   PRE4                __at(0xE924);	// @ (0x1D24 * 8 + 4)
#define                                 PRE4_bit            _BIT_ACCESS(ADPREL,4)
// ADPREL<PRE5>
extern volatile __bit                   PRE5                __at(0xE925);	// @ (0x1D24 * 8 + 5)
#define                                 PRE5_bit            _BIT_ACCESS(ADPREL,5)
// ADPREL<PRE6>
extern volatile __bit                   PRE6                __at(0xE926);	// @ (0x1D24 * 8 + 6)
#define                                 PRE6_bit            _BIT_ACCESS(ADPREL,6)
// ADPREL<PRE7>
extern volatile __bit                   PRE7                __at(0xE927);	// @ (0x1D24 * 8 + 7)
#define                                 PRE7_bit            _BIT_ACCESS(ADPREL,7)
// ADPREH<PRE8>
extern volatile __bit                   PRE8                __at(0xE928);	// @ (0x1D25 * 8 + 0)
#define                                 PRE8_bit            _BIT_ACCESS(ADPREH,0)
// ADPREH<PRE9>
extern volatile __bit                   PRE9                __at(0xE929);	// @ (0x1D25 * 8 + 1)
#define                                 PRE9_bit            _BIT_ACCESS(ADPREH,1)
// ADREF<PREF0>
extern volatile __bit                   PREF0               __at(0xE958);	// @ (0x1D2B * 8 + 0)
#define                                 PREF0_bit           _BIT_ACCESS(ADREF,0)
// ADREF<PREF1>
extern volatile __bit                   PREF1               __at(0xE959);	// @ (0x1D2B * 8 + 1)
#define                                 PREF1_bit           _BIT_ACCESS(ADREF,1)
// ADPREVL<PREV0>
extern volatile __bit                   PREV0               __at(0xE8D8);	// @ (0x1D1B * 8 + 0)
#define                                 PREV0_bit           _BIT_ACCESS(ADPREVL,0)
// ADPREVL<PREV1>
extern volatile __bit                   PREV1               __at(0xE8D9);	// @ (0x1D1B * 8 + 1)
#define                                 PREV1_bit           _BIT_ACCESS(ADPREVL,1)
// ADPREVH<PREV10>
extern volatile __bit                   PREV10              __at(0xE8E2);	// @ (0x1D1C * 8 + 2)
#define                                 PREV10_bit          _BIT_ACCESS(ADPREVH,2)
// ADPREVH<PREV11>
extern volatile __bit                   PREV11              __at(0xE8E3);	// @ (0x1D1C * 8 + 3)
#define                                 PREV11_bit          _BIT_ACCESS(ADPREVH,3)
// ADPREVH<PREV12>
extern volatile __bit                   PREV12              __at(0xE8E4);	// @ (0x1D1C * 8 + 4)
#define                                 PREV12_bit          _BIT_ACCESS(ADPREVH,4)
// ADPREVH<PREV13>
extern volatile __bit                   PREV13              __at(0xE8E5);	// @ (0x1D1C * 8 + 5)
#define                                 PREV13_bit          _BIT_ACCESS(ADPREVH,5)
// ADPREVH<PREV14>
extern volatile __bit                   PREV14              __at(0xE8E6);	// @ (0x1D1C * 8 + 6)
#define                                 PREV14_bit          _BIT_ACCESS(ADPREVH,6)
// ADPREVH<PREV15>
extern volatile __bit                   PREV15              __at(0xE8E7);	// @ (0x1D1C * 8 + 7)
#define                                 PREV15_bit          _BIT_ACCESS(ADPREVH,7)
// ADPREVL<PREV2>
extern volatile __bit                   PREV2               __at(0xE8DA);	// @ (0x1D1B * 8 + 2)
#define                                 PREV2_bit           _BIT_ACCESS(ADPREVL,2)
// ADPREVL<PREV3>
extern volatile __bit                   PREV3               __at(0xE8DB);	// @ (0x1D1B * 8 + 3)
#define                                 PREV3_bit           _BIT_ACCESS(ADPREVL,3)
// ADPREVL<PREV4>
extern volatile __bit                   PREV4               __at(0xE8DC);	// @ (0x1D1B * 8 + 4)
#define                                 PREV4_bit           _BIT_ACCESS(ADPREVL,4)
// ADPREVL<PREV5>
extern volatile __bit                   PREV5               __at(0xE8DD);	// @ (0x1D1B * 8 + 5)
#define                                 PREV5_bit           _BIT_ACCESS(ADPREVL,5)
// ADPREVL<PREV6>
extern volatile __bit                   PREV6               __at(0xE8DE);	// @ (0x1D1B * 8 + 6)
#define                                 PREV6_bit           _BIT_ACCESS(ADPREVL,6)
// ADPREVL<PREV7>
extern volatile __bit                   PREV7               __at(0xE8DF);	// @ (0x1D1B * 8 + 7)
#define                                 PREV7_bit           _BIT_ACCESS(ADPREVL,7)
// ADPREVH<PREV8>
extern volatile __bit                   PREV8               __at(0xE8E0);	// @ (0x1D1C * 8 + 0)
#define                                 PREV8_bit           _BIT_ACCESS(ADPREVH,0)
// ADPREVH<PREV9>
extern volatile __bit                   PREV9               __at(0xE8E1);	// @ (0x1D1C * 8 + 1)
#define                                 PREV9_bit           _BIT_ACCESS(ADPREVH,1)
// WDTCON0<PS0>
extern volatile __bit                   PS0                 __at(0xC61);	// @ (0x18C * 8 + 1)
#define                                 PS0_bit             _BIT_ACCESS(WDTCON0,1)
// WDTCON0<PS1>
extern volatile __bit                   PS1                 __at(0xC62);	// @ (0x18C * 8 + 2)
#define                                 PS1_bit             _BIT_ACCESS(WDTCON0,2)
// WDTCON0<PS2>
extern volatile __bit                   PS2                 __at(0xC63);	// @ (0x18C * 8 + 3)
#define                                 PS2_bit             _BIT_ACCESS(WDTCON0,3)
// WDTCON0<PS3>
extern volatile __bit                   PS3                 __at(0xC64);	// @ (0x18C * 8 + 4)
#define                                 PS3_bit             _BIT_ACCESS(WDTCON0,4)
// WDTCON0<PS4>
extern volatile __bit                   PS4                 __at(0xC65);	// @ (0x18C * 8 + 5)
#define                                 PS4_bit             _BIT_ACCESS(WDTCON0,5)
// WDTPSL<PSCNT0>
extern volatile __bit                   PSCNT0              __at(0xC70);	// @ (0x18E * 8 + 0)
#define                                 PSCNT0_bit          _BIT_ACCESS(WDTPSL,0)
// WDTPSL<PSCNT1>
extern volatile __bit                   PSCNT1              __at(0xC71);	// @ (0x18E * 8 + 1)
#define                                 PSCNT1_bit          _BIT_ACCESS(WDTPSL,1)
// WDTPSH<PSCNT10>
extern volatile __bit                   PSCNT10             __at(0xC7A);	// @ (0x18F * 8 + 2)
#define                                 PSCNT10_bit         _BIT_ACCESS(WDTPSH,2)
// WDTPSH<PSCNT11>
extern volatile __bit                   PSCNT11             __at(0xC7B);	// @ (0x18F * 8 + 3)
#define                                 PSCNT11_bit         _BIT_ACCESS(WDTPSH,3)
// WDTPSH<PSCNT12>
extern volatile __bit                   PSCNT12             __at(0xC7C);	// @ (0x18F * 8 + 4)
#define                                 PSCNT12_bit         _BIT_ACCESS(WDTPSH,4)
// WDTPSH<PSCNT13>
extern volatile __bit                   PSCNT13             __at(0xC7D);	// @ (0x18F * 8 + 5)
#define                                 PSCNT13_bit         _BIT_ACCESS(WDTPSH,5)
// WDTPSH<PSCNT14>
extern volatile __bit                   PSCNT14             __at(0xC7E);	// @ (0x18F * 8 + 6)
#define                                 PSCNT14_bit         _BIT_ACCESS(WDTPSH,6)
// WDTPSH<PSCNT15>
extern volatile __bit                   PSCNT15             __at(0xC7F);	// @ (0x18F * 8 + 7)
#define                                 PSCNT15_bit         _BIT_ACCESS(WDTPSH,7)
// WDTTMR<PSCNT16>
extern volatile __bit                   PSCNT16             __at(0xC80);	// @ (0x190 * 8 + 0)
#define                                 PSCNT16_bit         _BIT_ACCESS(WDTTMR,0)
// WDTTMR<PSCNT17>
extern volatile __bit                   PSCNT17             __at(0xC81);	// @ (0x190 * 8 + 1)
#define                                 PSCNT17_bit         _BIT_ACCESS(WDTTMR,1)
// WDTPSL<PSCNT2>
extern volatile __bit                   PSCNT2              __at(0xC72);	// @ (0x18E * 8 + 2)
#define                                 PSCNT2_bit          _BIT_ACCESS(WDTPSL,2)
// WDTPSL<PSCNT3>
extern volatile __bit                   PSCNT3              __at(0xC73);	// @ (0x18E * 8 + 3)
#define                                 PSCNT3_bit          _BIT_ACCESS(WDTPSL,3)
// WDTPSL<PSCNT4>
extern volatile __bit                   PSCNT4              __at(0xC74);	// @ (0x18E * 8 + 4)
#define                                 PSCNT4_bit          _BIT_ACCESS(WDTPSL,4)
// WDTPSL<PSCNT5>
extern volatile __bit                   PSCNT5              __at(0xC75);	// @ (0x18E * 8 + 5)
#define                                 PSCNT5_bit          _BIT_ACCESS(WDTPSL,5)
// WDTPSL<PSCNT6>
extern volatile __bit                   PSCNT6              __at(0xC76);	// @ (0x18E * 8 + 6)
#define                                 PSCNT6_bit          _BIT_ACCESS(WDTPSL,6)
// WDTPSL<PSCNT7>
extern volatile __bit                   PSCNT7              __at(0xC77);	// @ (0x18E * 8 + 7)
#define                                 PSCNT7_bit          _BIT_ACCESS(WDTPSL,7)
// WDTPSH<PSCNT8>
extern volatile __bit                   PSCNT8              __at(0xC78);	// @ (0x18F * 8 + 0)
#define                                 PSCNT8_bit          _BIT_ACCESS(WDTPSH,0)
// WDTPSH<PSCNT9>
extern volatile __bit                   PSCNT9              __at(0xC79);	// @ (0x18F * 8 + 1)
#define                                 PSCNT9_bit          _BIT_ACCESS(WDTPSH,1)
// ADCON2<PSIS>
extern volatile __bit                   PSIS                __at(0xE947);	// @ (0x1D28 * 8 + 7)
#define                                 PSIS_bit            _BIT_ACCESS(ADCON2,7)
// DAC1CON<PSS0>
extern volatile __bit                   PSS0                __at(0x4462);	// @ (0x88C * 8 + 2)
#define                                 PSS0_bit            _BIT_ACCESS(DAC1CON,2)
// DAC1CON<PSS1>
extern volatile __bit                   PSS1                __at(0x4463);	// @ (0x88C * 8 + 3)
#define                                 PSS1_bit            _BIT_ACCESS(DAC1CON,3)
// T2HLT<PSYNC>
extern volatile __bit                   PSYNC               __at(0x1C7F);	// @ (0x38F * 8 + 7)
#define                                 PSYNC_bit           _BIT_ACCESS(T2HLT,7)
// PWM1CON<PWM1EN>
extern volatile __bit                   PWM1EN              __at(0x4117);	// @ (0x822 * 8 + 7)
#define                                 PWM1EN_bit          _BIT_ACCESS(PWM1CON,7)
// PMD5<PWM1MD>
extern volatile __bit                   PWM1MD              __at(0x888);	// @ (0x111 * 8 + 0)
#define                                 PWM1MD_bit          _BIT_ACCESS(PMD5,0)
// PWM1CON<PWM1OUT>
extern volatile __bit                   PWM1OUT             __at(0x4115);	// @ (0x822 * 8 + 5)
#define                                 PWM1OUT_bit         _BIT_ACCESS(PWM1CON,5)
// PWM1CON<PWM1POL>
extern volatile __bit                   PWM1POL             __at(0x4114);	// @ (0x822 * 8 + 4)
#define                                 PWM1POL_bit         _BIT_ACCESS(PWM1CON,4)
// PWM2CON<PWM2EN>
extern volatile __bit                   PWM2EN              __at(0x412F);	// @ (0x825 * 8 + 7)
#define                                 PWM2EN_bit          _BIT_ACCESS(PWM2CON,7)
// PMD5<PWM2MD>
extern volatile __bit                   PWM2MD              __at(0x889);	// @ (0x111 * 8 + 1)
#define                                 PWM2MD_bit          _BIT_ACCESS(PMD5,1)
// PWM2CON<PWM2OUT>
extern volatile __bit                   PWM2OUT             __at(0x412D);	// @ (0x825 * 8 + 5)
#define                                 PWM2OUT_bit         _BIT_ACCESS(PWM2CON,5)
// PWM2CON<PWM2POL>
extern volatile __bit                   PWM2POL             __at(0x412C);	// @ (0x825 * 8 + 4)
#define                                 PWM2POL_bit         _BIT_ACCESS(PWM2CON,4)
// PORTA<RA0>
extern volatile __bit                   RA0                 __at(0x60);	// @ (0xC * 8 + 0)
#define                                 RA0_bit             _BIT_ACCESS(PORTA,0)
// PORTA<RA1>
extern volatile __bit                   RA1                 __at(0x61);	// @ (0xC * 8 + 1)
#define                                 RA1_bit             _BIT_ACCESS(PORTA,1)
// PORTA<RA2>
extern volatile __bit                   RA2                 __at(0x62);	// @ (0xC * 8 + 2)
#define                                 RA2_bit             _BIT_ACCESS(PORTA,2)
// PORTA<RA3>
extern volatile __bit                   RA3                 __at(0x63);	// @ (0xC * 8 + 3)
#define                                 RA3_bit             _BIT_ACCESS(PORTA,3)
// PORTA<RA4>
extern volatile __bit                   RA4                 __at(0x64);	// @ (0xC * 8 + 4)
#define                                 RA4_bit             _BIT_ACCESS(PORTA,4)
// PORTA<RA5>
extern volatile __bit                   RA5                 __at(0x65);	// @ (0xC * 8 + 5)
#define                                 RA5_bit             _BIT_ACCESS(PORTA,5)
// PORTC<RC0>
extern volatile __bit                   RC0                 __at(0x70);	// @ (0xE * 8 + 0)
#define                                 RC0_bit             _BIT_ACCESS(PORTC,0)
// PORTC<RC1>
extern volatile __bit                   RC1                 __at(0x71);	// @ (0xE * 8 + 1)
#define                                 RC1_bit             _BIT_ACCESS(PORTC,1)
// PIE4<RC1IE>
extern volatile __bit                   RC1IE               __at(0x4D7);	// @ (0x9A * 8 + 7)
#define                                 RC1IE_bit           _BIT_ACCESS(PIE4,7)
// PIR4<RC1IF>
extern volatile __bit                   RC1IF               __at(0x487);	// @ (0x90 * 8 + 7)
#define                                 RC1IF_bit           _BIT_ACCESS(PIR4,7)
// PORTC<RC2>
extern volatile __bit                   RC2                 __at(0x72);	// @ (0xE * 8 + 2)
#define                                 RC2_bit             _BIT_ACCESS(PORTC,2)
// PORTC<RC3>
extern volatile __bit                   RC3                 __at(0x73);	// @ (0xE * 8 + 3)
#define                                 RC3_bit             _BIT_ACCESS(PORTC,3)
// PORTC<RC4>
extern volatile __bit                   RC4                 __at(0x74);	// @ (0xE * 8 + 4)
#define                                 RC4_bit             _BIT_ACCESS(PORTC,4)
// PORTC<RC5>
extern volatile __bit                   RC5                 __at(0x75);	// @ (0xE * 8 + 5)
#define                                 RC5_bit             _BIT_ACCESS(PORTC,5)
// SSP1CON2<RCEN>
extern volatile __bit                   RCEN                __at(0x3C8B);	// @ (0x791 * 8 + 3)
#define                                 RCEN_bit            _BIT_ACCESS(SSP1CON2,3)
// SSP1CON2<RCEN1>
extern volatile __bit                   RCEN1               __at(0x3C8B);	// @ (0x791 * 8 + 3)
#define                                 RCEN1_bit           _BIT_ACCESS(SSP1CON2,3)
// BAUD1CON<RCIDL>
extern volatile __bit                   RCIDL               __at(0x3896);	// @ (0x712 * 8 + 6)
#define                                 RCIDL_bit           _BIT_ACCESS(BAUD1CON,6)
// NVMCON1<RD>
extern volatile __bit                   RD                  __at(0xE480);	// @ (0x1C90 * 8 + 0)
#define                                 RD_bit              _BIT_ACCESS(NVMCON1,0)
// T1CON<RD16>
extern volatile __bit                   RD16                __at(0x1871);	// @ (0x30E * 8 + 1)
#define                                 RD16_bit            _BIT_ACCESS(T1CON,1)
// T1CON<RD161>
extern volatile __bit                   RD161               __at(0x1871);	// @ (0x30E * 8 + 1)
#define                                 RD161_bit           _BIT_ACCESS(T1CON,1)
// CLBCON<RDHOLD>
extern volatile __bit                   RDHOLD              __at(0x2861);	// @ (0x50C * 8 + 1)
#define                                 RDHOLD_bit          _BIT_ACCESS(CLBCON,1)
// FVRCON<RDY>
extern volatile __bit                   RDY                 __at(0x1066);	// @ (0x20C * 8 + 6)
#define                                 RDY_bit             _BIT_ACCESS(FVRCON,6)
// SSP1STAT<READ_WRITE>
extern volatile __bit                   READ_WRITE          __at(0x3C7A);	// @ (0x78F * 8 + 2)
#define                                 READ_WRITE_bit      _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<READ_WRITE1>
extern volatile __bit                   READ_WRITE1         __at(0x3C7A);	// @ (0x78F * 8 + 2)
#define                                 READ_WRITE1_bit     _BIT_ACCESS(SSP1STAT,2)
// DAC1CON<REFRNG>
extern volatile __bit                   REFRNG              __at(0x4466);	// @ (0x88C * 8 + 6)
#define                                 REFRNG_bit          _BIT_ACCESS(DAC1CON,6)
// ADRESL<RES0>
extern volatile __bit                   RES0                __at(0xE8E8);	// @ (0x1D1D * 8 + 0)
#define                                 RES0_bit            _BIT_ACCESS(ADRESL,0)
// ADRESL<RES1>
extern volatile __bit                   RES1                __at(0xE8E9);	// @ (0x1D1D * 8 + 1)
#define                                 RES1_bit            _BIT_ACCESS(ADRESL,1)
// ADRESH<RES10>
extern volatile __bit                   RES10               __at(0xE8F2);	// @ (0x1D1E * 8 + 2)
#define                                 RES10_bit           _BIT_ACCESS(ADRESH,2)
// ADRESH<RES11>
extern volatile __bit                   RES11               __at(0xE8F3);	// @ (0x1D1E * 8 + 3)
#define                                 RES11_bit           _BIT_ACCESS(ADRESH,3)
// ADRESH<RES12>
extern volatile __bit                   RES12               __at(0xE8F4);	// @ (0x1D1E * 8 + 4)
#define                                 RES12_bit           _BIT_ACCESS(ADRESH,4)
// ADRESH<RES13>
extern volatile __bit                   RES13               __at(0xE8F5);	// @ (0x1D1E * 8 + 5)
#define                                 RES13_bit           _BIT_ACCESS(ADRESH,5)
// ADRESH<RES14>
extern volatile __bit                   RES14               __at(0xE8F6);	// @ (0x1D1E * 8 + 6)
#define                                 RES14_bit           _BIT_ACCESS(ADRESH,6)
// ADRESH<RES15>
extern volatile __bit                   RES15               __at(0xE8F7);	// @ (0x1D1E * 8 + 7)
#define                                 RES15_bit           _BIT_ACCESS(ADRESH,7)
// ADRESL<RES2>
extern volatile __bit                   RES2                __at(0xE8EA);	// @ (0x1D1D * 8 + 2)
#define                                 RES2_bit            _BIT_ACCESS(ADRESL,2)
// ADRESL<RES3>
extern volatile __bit                   RES3                __at(0xE8EB);	// @ (0x1D1D * 8 + 3)
#define                                 RES3_bit            _BIT_ACCESS(ADRESL,3)
// ADRESL<RES4>
extern volatile __bit                   RES4                __at(0xE8EC);	// @ (0x1D1D * 8 + 4)
#define                                 RES4_bit            _BIT_ACCESS(ADRESL,4)
// ADRESL<RES5>
extern volatile __bit                   RES5                __at(0xE8ED);	// @ (0x1D1D * 8 + 5)
#define                                 RES5_bit            _BIT_ACCESS(ADRESL,5)
// ADRESL<RES6>
extern volatile __bit                   RES6                __at(0xE8EE);	// @ (0x1D1D * 8 + 6)
#define                                 RES6_bit            _BIT_ACCESS(ADRESL,6)
// ADRESL<RES7>
extern volatile __bit                   RES7                __at(0xE8EF);	// @ (0x1D1D * 8 + 7)
#define                                 RES7_bit            _BIT_ACCESS(ADRESL,7)
// ADRESH<RES8>
extern volatile __bit                   RES8                __at(0xE8F0);	// @ (0x1D1E * 8 + 0)
#define                                 RES8_bit            _BIT_ACCESS(ADRESH,0)
// ADRESH<RES9>
extern volatile __bit                   RES9                __at(0xE8F1);	// @ (0x1D1E * 8 + 1)
#define                                 RES9_bit            _BIT_ACCESS(ADRESH,1)
// CPUDOZE<ROI>
extern volatile __bit                   ROI                 __at(0x1465);	// @ (0x28C * 8 + 5)
#define                                 ROI_bit             _BIT_ACCESS(CPUDOZE,5)
// ADRPT<RPT0>
extern volatile __bit                   RPT0                __at(0xE8D0);	// @ (0x1D1A * 8 + 0)
#define                                 RPT0_bit            _BIT_ACCESS(ADRPT,0)
// ADRPT<RPT1>
extern volatile __bit                   RPT1                __at(0xE8D1);	// @ (0x1D1A * 8 + 1)
#define                                 RPT1_bit            _BIT_ACCESS(ADRPT,1)
// ADRPT<RPT2>
extern volatile __bit                   RPT2                __at(0xE8D2);	// @ (0x1D1A * 8 + 2)
#define                                 RPT2_bit            _BIT_ACCESS(ADRPT,2)
// ADRPT<RPT3>
extern volatile __bit                   RPT3                __at(0xE8D3);	// @ (0x1D1A * 8 + 3)
#define                                 RPT3_bit            _BIT_ACCESS(ADRPT,3)
// ADRPT<RPT4>
extern volatile __bit                   RPT4                __at(0xE8D4);	// @ (0x1D1A * 8 + 4)
#define                                 RPT4_bit            _BIT_ACCESS(ADRPT,4)
// ADRPT<RPT5>
extern volatile __bit                   RPT5                __at(0xE8D5);	// @ (0x1D1A * 8 + 5)
#define                                 RPT5_bit            _BIT_ACCESS(ADRPT,5)
// ADRPT<RPT6>
extern volatile __bit                   RPT6                __at(0xE8D6);	// @ (0x1D1A * 8 + 6)
#define                                 RPT6_bit            _BIT_ACCESS(ADRPT,6)
// ADRPT<RPT7>
extern volatile __bit                   RPT7                __at(0xE8D7);	// @ (0x1D1A * 8 + 7)
#define                                 RPT7_bit            _BIT_ACCESS(ADRPT,7)
// T2RST<RSEL0>
extern volatile __bit                   RSEL0               __at(0x1C88);	// @ (0x391 * 8 + 0)
#define                                 RSEL0_bit           _BIT_ACCESS(T2RST,0)
// T2RST<RSEL1>
extern volatile __bit                   RSEL1               __at(0x1C89);	// @ (0x391 * 8 + 1)
#define                                 RSEL1_bit           _BIT_ACCESS(T2RST,1)
// T2RST<RSEL2>
extern volatile __bit                   RSEL2               __at(0x1C8A);	// @ (0x391 * 8 + 2)
#define                                 RSEL2_bit           _BIT_ACCESS(T2RST,2)
// T2RST<RSEL3>
extern volatile __bit                   RSEL3               __at(0x1C8B);	// @ (0x391 * 8 + 3)
#define                                 RSEL3_bit           _BIT_ACCESS(T2RST,3)
// T2RST<RSEL4>
extern volatile __bit                   RSEL4               __at(0x1C8C);	// @ (0x391 * 8 + 4)
#define                                 RSEL4_bit           _BIT_ACCESS(T2RST,4)
// SSP1CON2<RSEN>
extern volatile __bit                   RSEN                __at(0x3C89);	// @ (0x791 * 8 + 1)
#define                                 RSEN_bit            _BIT_ACCESS(SSP1CON2,1)
// SSP1CON2<RSEN1>
extern volatile __bit                   RSEN1               __at(0x3C89);	// @ (0x791 * 8 + 1)
#define                                 RSEN1_bit           _BIT_ACCESS(SSP1CON2,1)
// SSP1STAT<RW>
extern volatile __bit                   RW                  __at(0x3C7A);	// @ (0x78F * 8 + 2)
#define                                 RW_bit              _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<RW1>
extern volatile __bit                   RW1                 __at(0x3C7A);	// @ (0x78F * 8 + 2)
#define                                 RW1_bit             _BIT_ACCESS(SSP1STAT,2)
// RC1STA<RX9>
extern volatile __bit                   RX9                 __at(0x3886);	// @ (0x710 * 8 + 6)
#define                                 RX9_bit             _BIT_ACCESS(RC1STA,6)
// RC1STA<RX9D>
extern volatile __bit                   RX9D                __at(0x3880);	// @ (0x710 * 8 + 0)
#define                                 RX9D_bit            _BIT_ACCESS(RC1STA,0)
// SSP1STAT<R_W>
extern volatile __bit                   R_W                 __at(0x3C7A);	// @ (0x78F * 8 + 2)
#define                                 R_W_bit             _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<R_W1>
extern volatile __bit                   R_W1                __at(0x3C7A);	// @ (0x78F * 8 + 2)
#define                                 R_W1_bit            _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<R_nW>
extern volatile __bit                   R_nW                __at(0x3C7A);	// @ (0x78F * 8 + 2)
#define                                 R_nW_bit            _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<R_nW1>
extern volatile __bit                   R_nW1               __at(0x3C7A);	// @ (0x78F * 8 + 2)
#define                                 R_nW1_bit           _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<S2>
extern volatile __bit                   S2                  __at(0x3C7B);	// @ (0x78F * 8 + 3)
#define                                 S2_bit              _BIT_ACCESS(SSP1STAT,3)
// SSP1CON3<SBCDE>
extern volatile __bit                   SBCDE               __at(0x3C92);	// @ (0x792 * 8 + 2)
#define                                 SBCDE_bit           _BIT_ACCESS(SSP1CON3,2)
// BORCON<SBOREN>
extern volatile __bit                   SBOREN              __at(0xC8F);	// @ (0x191 * 8 + 7)
#define                                 SBOREN_bit          _BIT_ACCESS(BORCON,7)
// PIE1<SCANIE>
extern volatile __bit                   SCANIE              __at(0x4BA);	// @ (0x97 * 8 + 2)
#define                                 SCANIE_bit          _BIT_ACCESS(PIE1,2)
// PIR1<SCANIF>
extern volatile __bit                   SCANIF              __at(0x46A);	// @ (0x8D * 8 + 2)
#define                                 SCANIF_bit          _BIT_ACCESS(PIR1,2)
// PMD0<SCANMD>
extern volatile __bit                   SCANMD              __at(0x862);	// @ (0x10C * 8 + 2)
#define                                 SCANMD_bit          _BIT_ACCESS(PMD0,2)
// SSP1CON3<SCIE>
extern volatile __bit                   SCIE                __at(0x3C95);	// @ (0x792 * 8 + 5)
#define                                 SCIE_bit            _BIT_ACCESS(SSP1CON3,5)
// BAUD1CON<SCKP>
extern volatile __bit                   SCKP                __at(0x3894);	// @ (0x712 * 8 + 4)
#define                                 SCKP_bit            _BIT_ACCESS(BAUD1CON,4)
// SSP1CON3<SDAHT>
extern volatile __bit                   SDAHT               __at(0x3C93);	// @ (0x792 * 8 + 3)
#define                                 SDAHT_bit           _BIT_ACCESS(SSP1CON3,3)
// SSP1CON2<SEN1>
extern volatile __bit                   SEN1                __at(0x3C88);	// @ (0x791 * 8 + 0)
#define                                 SEN1_bit            _BIT_ACCESS(SSP1CON2,0)
// TX1STA<SENDB>
extern volatile __bit                   SENDB               __at(0x388B);	// @ (0x711 * 8 + 3)
#define                                 SENDB_bit           _BIT_ACCESS(TX1STA,3)
// CRCCON0<SETUP0>
extern volatile __bit                   SETUP0              __at(0xE52A);	// @ (0x1CA5 * 8 + 2)
#define                                 SETUP0_bit          _BIT_ACCESS(CRCCON0,2)
// CRCCON0<SETUP1>
extern volatile __bit                   SETUP1              __at(0xE52B);	// @ (0x1CA5 * 8 + 3)
#define                                 SETUP1_bit          _BIT_ACCESS(CRCCON0,3)
// OSCSTAT<SFOR>
extern volatile __bit                   SFOR                __at(0x1481);	// @ (0x290 * 8 + 1)
#define                                 SFOR_bit            _BIT_ACCESS(OSCSTAT,1)
// SCANCON0<SGO>
extern volatile __bit                   SGO                 __at(0xE496);	// @ (0x1C92 * 8 + 6)
#define                                 SGO_bit             _BIT_ACCESS(SCANCON0,6)
// CRCSHFTL<SHIFT0>
extern volatile __bit                   SHIFT0              __at(0xE508);	// @ (0x1CA1 * 8 + 0)
#define                                 SHIFT0_bit          _BIT_ACCESS(CRCSHFTL,0)
// CRCSHFTL<SHIFT1>
extern volatile __bit                   SHIFT1              __at(0xE509);	// @ (0x1CA1 * 8 + 1)
#define                                 SHIFT1_bit          _BIT_ACCESS(CRCSHFTL,1)
// CRCSHFTH<SHIFT10>
extern volatile __bit                   SHIFT10             __at(0xE512);	// @ (0x1CA2 * 8 + 2)
#define                                 SHIFT10_bit         _BIT_ACCESS(CRCSHFTH,2)
// CRCSHFTH<SHIFT11>
extern volatile __bit                   SHIFT11             __at(0xE513);	// @ (0x1CA2 * 8 + 3)
#define                                 SHIFT11_bit         _BIT_ACCESS(CRCSHFTH,3)
// CRCSHFTH<SHIFT12>
extern volatile __bit                   SHIFT12             __at(0xE514);	// @ (0x1CA2 * 8 + 4)
#define                                 SHIFT12_bit         _BIT_ACCESS(CRCSHFTH,4)
// CRCSHFTH<SHIFT13>
extern volatile __bit                   SHIFT13             __at(0xE515);	// @ (0x1CA2 * 8 + 5)
#define                                 SHIFT13_bit         _BIT_ACCESS(CRCSHFTH,5)
// CRCSHFTH<SHIFT14>
extern volatile __bit                   SHIFT14             __at(0xE516);	// @ (0x1CA2 * 8 + 6)
#define                                 SHIFT14_bit         _BIT_ACCESS(CRCSHFTH,6)
// CRCSHFTH<SHIFT15>
extern volatile __bit                   SHIFT15             __at(0xE517);	// @ (0x1CA2 * 8 + 7)
#define                                 SHIFT15_bit         _BIT_ACCESS(CRCSHFTH,7)
// CRCSHFTU<SHIFT16>
extern volatile __bit                   SHIFT16             __at(0xE518);	// @ (0x1CA3 * 8 + 0)
#define                                 SHIFT16_bit         _BIT_ACCESS(CRCSHFTU,0)
// CRCSHFTU<SHIFT17>
extern volatile __bit                   SHIFT17             __at(0xE519);	// @ (0x1CA3 * 8 + 1)
#define                                 SHIFT17_bit         _BIT_ACCESS(CRCSHFTU,1)
// CRCSHFTU<SHIFT18>
extern volatile __bit                   SHIFT18             __at(0xE51A);	// @ (0x1CA3 * 8 + 2)
#define                                 SHIFT18_bit         _BIT_ACCESS(CRCSHFTU,2)
// CRCSHFTU<SHIFT19>
extern volatile __bit                   SHIFT19             __at(0xE51B);	// @ (0x1CA3 * 8 + 3)
#define                                 SHIFT19_bit         _BIT_ACCESS(CRCSHFTU,3)
// CRCSHFTL<SHIFT2>
extern volatile __bit                   SHIFT2              __at(0xE50A);	// @ (0x1CA1 * 8 + 2)
#define                                 SHIFT2_bit          _BIT_ACCESS(CRCSHFTL,2)
// CRCSHFTU<SHIFT20>
extern volatile __bit                   SHIFT20             __at(0xE51C);	// @ (0x1CA3 * 8 + 4)
#define                                 SHIFT20_bit         _BIT_ACCESS(CRCSHFTU,4)
// CRCSHFTU<SHIFT21>
extern volatile __bit                   SHIFT21             __at(0xE51D);	// @ (0x1CA3 * 8 + 5)
#define                                 SHIFT21_bit         _BIT_ACCESS(CRCSHFTU,5)
// CRCSHFTU<SHIFT22>
extern volatile __bit                   SHIFT22             __at(0xE51E);	// @ (0x1CA3 * 8 + 6)
#define                                 SHIFT22_bit         _BIT_ACCESS(CRCSHFTU,6)
// CRCSHFTU<SHIFT23>
extern volatile __bit                   SHIFT23             __at(0xE51F);	// @ (0x1CA3 * 8 + 7)
#define                                 SHIFT23_bit         _BIT_ACCESS(CRCSHFTU,7)
// CRCSHFTT<SHIFT24>
extern volatile __bit                   SHIFT24             __at(0xE520);	// @ (0x1CA4 * 8 + 0)
#define                                 SHIFT24_bit         _BIT_ACCESS(CRCSHFTT,0)
// CRCSHFTT<SHIFT25>
extern volatile __bit                   SHIFT25             __at(0xE521);	// @ (0x1CA4 * 8 + 1)
#define                                 SHIFT25_bit         _BIT_ACCESS(CRCSHFTT,1)
// CRCSHFTT<SHIFT26>
extern volatile __bit                   SHIFT26             __at(0xE522);	// @ (0x1CA4 * 8 + 2)
#define                                 SHIFT26_bit         _BIT_ACCESS(CRCSHFTT,2)
// CRCSHFTT<SHIFT27>
extern volatile __bit                   SHIFT27             __at(0xE523);	// @ (0x1CA4 * 8 + 3)
#define                                 SHIFT27_bit         _BIT_ACCESS(CRCSHFTT,3)
// CRCSHFTT<SHIFT28>
extern volatile __bit                   SHIFT28             __at(0xE524);	// @ (0x1CA4 * 8 + 4)
#define                                 SHIFT28_bit         _BIT_ACCESS(CRCSHFTT,4)
// CRCSHFTT<SHIFT29>
extern volatile __bit                   SHIFT29             __at(0xE525);	// @ (0x1CA4 * 8 + 5)
#define                                 SHIFT29_bit         _BIT_ACCESS(CRCSHFTT,5)
// CRCSHFTL<SHIFT3>
extern volatile __bit                   SHIFT3              __at(0xE50B);	// @ (0x1CA1 * 8 + 3)
#define                                 SHIFT3_bit          _BIT_ACCESS(CRCSHFTL,3)
// CRCSHFTT<SHIFT30>
extern volatile __bit                   SHIFT30             __at(0xE526);	// @ (0x1CA4 * 8 + 6)
#define                                 SHIFT30_bit         _BIT_ACCESS(CRCSHFTT,6)
// CRCSHFTT<SHIFT31>
extern volatile __bit                   SHIFT31             __at(0xE527);	// @ (0x1CA4 * 8 + 7)
#define                                 SHIFT31_bit         _BIT_ACCESS(CRCSHFTT,7)
// CRCSHFTL<SHIFT4>
extern volatile __bit                   SHIFT4              __at(0xE50C);	// @ (0x1CA1 * 8 + 4)
#define                                 SHIFT4_bit          _BIT_ACCESS(CRCSHFTL,4)
// CRCSHFTL<SHIFT5>
extern volatile __bit                   SHIFT5              __at(0xE50D);	// @ (0x1CA1 * 8 + 5)
#define                                 SHIFT5_bit          _BIT_ACCESS(CRCSHFTL,5)
// CRCSHFTL<SHIFT6>
extern volatile __bit                   SHIFT6              __at(0xE50E);	// @ (0x1CA1 * 8 + 6)
#define                                 SHIFT6_bit          _BIT_ACCESS(CRCSHFTL,6)
// CRCSHFTL<SHIFT7>
extern volatile __bit                   SHIFT7              __at(0xE50F);	// @ (0x1CA1 * 8 + 7)
#define                                 SHIFT7_bit          _BIT_ACCESS(CRCSHFTL,7)
// CRCSHFTH<SHIFT8>
extern volatile __bit                   SHIFT8              __at(0xE510);	// @ (0x1CA2 * 8 + 0)
#define                                 SHIFT8_bit          _BIT_ACCESS(CRCSHFTH,0)
// CRCSHFTH<SHIFT9>
extern volatile __bit                   SHIFT9              __at(0xE511);	// @ (0x1CA2 * 8 + 1)
#define                                 SHIFT9_bit          _BIT_ACCESS(CRCSHFTH,1)
// CRCCON0<SHIFTM>
extern volatile __bit                   SHIFTM              __at(0xE529);	// @ (0x1CA5 * 8 + 1)
#define                                 SHIFTM_bit          _BIT_ACCESS(CRCCON0,1)
// CLCSELECT<SLCT0>
extern volatile __bit                   SLCT0               __at(0x34B0);	// @ (0x696 * 8 + 0)
#define                                 SLCT0_bit           _BIT_ACCESS(CLCSELECT,0)
// CLCSELECT<SLCT1>
extern volatile __bit                   SLCT1               __at(0x34B1);	// @ (0x696 * 8 + 1)
#define                                 SLCT1_bit           _BIT_ACCESS(CLCSELECT,1)
// SLRCONA<SLRA0>
extern volatile __bit                   SLRA0               __at(0xF478);	// @ (0x1E8F * 8 + 0)
#define                                 SLRA0_bit           _BIT_ACCESS(SLRCONA,0)
// SLRCONA<SLRA1>
extern volatile __bit                   SLRA1               __at(0xF479);	// @ (0x1E8F * 8 + 1)
#define                                 SLRA1_bit           _BIT_ACCESS(SLRCONA,1)
// SLRCONA<SLRA2>
extern volatile __bit                   SLRA2               __at(0xF47A);	// @ (0x1E8F * 8 + 2)
#define                                 SLRA2_bit           _BIT_ACCESS(SLRCONA,2)
// SLRCONA<SLRA4>
extern volatile __bit                   SLRA4               __at(0xF47C);	// @ (0x1E8F * 8 + 4)
#define                                 SLRA4_bit           _BIT_ACCESS(SLRCONA,4)
// SLRCONA<SLRA5>
extern volatile __bit                   SLRA5               __at(0xF47D);	// @ (0x1E8F * 8 + 5)
#define                                 SLRA5_bit           _BIT_ACCESS(SLRCONA,5)
// SLRCONC<SLRC0>
extern volatile __bit                   SLRC0               __at(0xF518);	// @ (0x1EA3 * 8 + 0)
#define                                 SLRC0_bit           _BIT_ACCESS(SLRCONC,0)
// SLRCONC<SLRC1>
extern volatile __bit                   SLRC1               __at(0xF519);	// @ (0x1EA3 * 8 + 1)
#define                                 SLRC1_bit           _BIT_ACCESS(SLRCONC,1)
// SLRCONC<SLRC2>
extern volatile __bit                   SLRC2               __at(0xF51A);	// @ (0x1EA3 * 8 + 2)
#define                                 SLRC2_bit           _BIT_ACCESS(SLRCONC,2)
// SLRCONC<SLRC3>
extern volatile __bit                   SLRC3               __at(0xF51B);	// @ (0x1EA3 * 8 + 3)
#define                                 SLRC3_bit           _BIT_ACCESS(SLRCONC,3)
// SLRCONC<SLRC4>
extern volatile __bit                   SLRC4               __at(0xF51C);	// @ (0x1EA3 * 8 + 4)
#define                                 SLRC4_bit           _BIT_ACCESS(SLRCONC,4)
// SLRCONC<SLRC5>
extern volatile __bit                   SLRC5               __at(0xF51D);	// @ (0x1EA3 * 8 + 5)
#define                                 SLRC5_bit           _BIT_ACCESS(SLRCONC,5)
// SSP1STAT<SMP>
extern volatile __bit                   SMP                 __at(0x3C7F);	// @ (0x78F * 8 + 7)
#define                                 SMP_bit             _BIT_ACCESS(SSP1STAT,7)
// SSP1STAT<SMP1>
extern volatile __bit                   SMP1                __at(0x3C7F);	// @ (0x78F * 8 + 7)
#define                                 SMP1_bit            _BIT_ACCESS(SSP1STAT,7)
// ADCON3<SOI>
extern volatile __bit                   SOI                 __at(0xE94B);	// @ (0x1D29 * 8 + 3)
#define                                 SOI_bit             _BIT_ACCESS(ADCON3,3)
// RC1STA<SPEN>
extern volatile __bit                   SPEN                __at(0x3887);	// @ (0x710 * 8 + 7)
#define                                 SPEN_bit            _BIT_ACCESS(RC1STA,7)
// RC1STA<SREN>
extern volatile __bit                   SREN                __at(0x3885);	// @ (0x710 * 8 + 5)
#define                                 SREN_bit            _BIT_ACCESS(RC1STA,5)
// SSP1CLKPPS<SSP1CLKPPS0>
extern volatile __bit                   SSP1CLKPPS0         __at(0xF238);	// @ (0x1E47 * 8 + 0)
#define                                 SSP1CLKPPS0_bit     _BIT_ACCESS(SSP1CLKPPS,0)
// SSP1CLKPPS<SSP1CLKPPS1>
extern volatile __bit                   SSP1CLKPPS1         __at(0xF239);	// @ (0x1E47 * 8 + 1)
#define                                 SSP1CLKPPS1_bit     _BIT_ACCESS(SSP1CLKPPS,1)
// SSP1CLKPPS<SSP1CLKPPS2>
extern volatile __bit                   SSP1CLKPPS2         __at(0xF23A);	// @ (0x1E47 * 8 + 2)
#define                                 SSP1CLKPPS2_bit     _BIT_ACCESS(SSP1CLKPPS,2)
// SSP1CLKPPS<SSP1CLKPPS3>
extern volatile __bit                   SSP1CLKPPS3         __at(0xF23B);	// @ (0x1E47 * 8 + 3)
#define                                 SSP1CLKPPS3_bit     _BIT_ACCESS(SSP1CLKPPS,3)
// SSP1CLKPPS<SSP1CLKPPS4>
extern volatile __bit                   SSP1CLKPPS4         __at(0xF23C);	// @ (0x1E47 * 8 + 4)
#define                                 SSP1CLKPPS4_bit     _BIT_ACCESS(SSP1CLKPPS,4)
// SSP1DATPPS<SSP1DATPPS0>
extern volatile __bit                   SSP1DATPPS0         __at(0xF240);	// @ (0x1E48 * 8 + 0)
#define                                 SSP1DATPPS0_bit     _BIT_ACCESS(SSP1DATPPS,0)
// SSP1DATPPS<SSP1DATPPS1>
extern volatile __bit                   SSP1DATPPS1         __at(0xF241);	// @ (0x1E48 * 8 + 1)
#define                                 SSP1DATPPS1_bit     _BIT_ACCESS(SSP1DATPPS,1)
// SSP1DATPPS<SSP1DATPPS2>
extern volatile __bit                   SSP1DATPPS2         __at(0xF242);	// @ (0x1E48 * 8 + 2)
#define                                 SSP1DATPPS2_bit     _BIT_ACCESS(SSP1DATPPS,2)
// SSP1DATPPS<SSP1DATPPS3>
extern volatile __bit                   SSP1DATPPS3         __at(0xF243);	// @ (0x1E48 * 8 + 3)
#define                                 SSP1DATPPS3_bit     _BIT_ACCESS(SSP1DATPPS,3)
// SSP1DATPPS<SSP1DATPPS4>
extern volatile __bit                   SSP1DATPPS4         __at(0xF244);	// @ (0x1E48 * 8 + 4)
#define                                 SSP1DATPPS4_bit     _BIT_ACCESS(SSP1DATPPS,4)
// PIE5<SSP1IE>
extern volatile __bit                   SSP1IE              __at(0x4DA);	// @ (0x9B * 8 + 2)
#define                                 SSP1IE_bit          _BIT_ACCESS(PIE5,2)
// PIR5<SSP1IF>
extern volatile __bit                   SSP1IF              __at(0x48A);	// @ (0x91 * 8 + 2)
#define                                 SSP1IF_bit          _BIT_ACCESS(PIR5,2)
// SSP1SSPPS<SSP1SSPPS0>
extern volatile __bit                   SSP1SSPPS0          __at(0xF248);	// @ (0x1E49 * 8 + 0)
#define                                 SSP1SSPPS0_bit      _BIT_ACCESS(SSP1SSPPS,0)
// SSP1SSPPS<SSP1SSPPS1>
extern volatile __bit                   SSP1SSPPS1          __at(0xF249);	// @ (0x1E49 * 8 + 1)
#define                                 SSP1SSPPS1_bit      _BIT_ACCESS(SSP1SSPPS,1)
// SSP1SSPPS<SSP1SSPPS2>
extern volatile __bit                   SSP1SSPPS2          __at(0xF24A);	// @ (0x1E49 * 8 + 2)
#define                                 SSP1SSPPS2_bit      _BIT_ACCESS(SSP1SSPPS,2)
// SSP1SSPPS<SSP1SSPPS3>
extern volatile __bit                   SSP1SSPPS3          __at(0xF24B);	// @ (0x1E49 * 8 + 3)
#define                                 SSP1SSPPS3_bit      _BIT_ACCESS(SSP1SSPPS,3)
// SSP1SSPPS<SSP1SSPPS4>
extern volatile __bit                   SSP1SSPPS4          __at(0xF24C);	// @ (0x1E49 * 8 + 4)
#define                                 SSP1SSPPS4_bit      _BIT_ACCESS(SSP1SSPPS,4)
// SSP1CON1<SSPEN>
extern volatile __bit                   SSPEN               __at(0x3C85);	// @ (0x790 * 8 + 5)
#define                                 SSPEN_bit           _BIT_ACCESS(SSP1CON1,5)
// SSP1CON1<SSPEN1>
extern volatile __bit                   SSPEN1              __at(0x3C85);	// @ (0x790 * 8 + 5)
#define                                 SSPEN1_bit          _BIT_ACCESS(SSP1CON1,5)
// SSP1CON1<SSPM0>
extern volatile __bit                   SSPM0               __at(0x3C80);	// @ (0x790 * 8 + 0)
#define                                 SSPM0_bit           _BIT_ACCESS(SSP1CON1,0)
// SSP1CON1<SSPM01>
extern volatile __bit                   SSPM01              __at(0x3C80);	// @ (0x790 * 8 + 0)
#define                                 SSPM01_bit          _BIT_ACCESS(SSP1CON1,0)
// SSP1CON1<SSPM1>
extern volatile __bit                   SSPM1               __at(0x3C81);	// @ (0x790 * 8 + 1)
#define                                 SSPM1_bit           _BIT_ACCESS(SSP1CON1,1)
// SSP1CON1<SSPM11>
extern volatile __bit                   SSPM11              __at(0x3C81);	// @ (0x790 * 8 + 1)
#define                                 SSPM11_bit          _BIT_ACCESS(SSP1CON1,1)
// SSP1CON1<SSPM2>
extern volatile __bit                   SSPM2               __at(0x3C82);	// @ (0x790 * 8 + 2)
#define                                 SSPM2_bit           _BIT_ACCESS(SSP1CON1,2)
// SSP1CON1<SSPM21>
extern volatile __bit                   SSPM21              __at(0x3C82);	// @ (0x790 * 8 + 2)
#define                                 SSPM21_bit          _BIT_ACCESS(SSP1CON1,2)
// SSP1CON1<SSPM3>
extern volatile __bit                   SSPM3               __at(0x3C83);	// @ (0x790 * 8 + 3)
#define                                 SSPM3_bit           _BIT_ACCESS(SSP1CON1,3)
// SSP1CON1<SSPM31>
extern volatile __bit                   SSPM31              __at(0x3C83);	// @ (0x790 * 8 + 3)
#define                                 SSPM31_bit          _BIT_ACCESS(SSP1CON1,3)
// SSP1CON1<SSPOV>
extern volatile __bit                   SSPOV               __at(0x3C86);	// @ (0x790 * 8 + 6)
#define                                 SSPOV_bit           _BIT_ACCESS(SSP1CON1,6)
// SSP1CON1<SSPOV1>
extern volatile __bit                   SSPOV1              __at(0x3C86);	// @ (0x790 * 8 + 6)
#define                                 SSPOV1_bit          _BIT_ACCESS(SSP1CON1,6)
// SSP1STAT<START>
extern volatile __bit                   START               __at(0x3C7B);	// @ (0x78F * 8 + 3)
#define                                 START_bit           _BIT_ACCESS(SSP1STAT,3)
// SSP1STAT<START1>
extern volatile __bit                   START1              __at(0x3C7B);	// @ (0x78F * 8 + 3)
#define                                 START1_bit          _BIT_ACCESS(SSP1STAT,3)
// ADSTAT<STAT0>
extern volatile __bit                   STAT0               __at(0xE950);	// @ (0x1D2A * 8 + 0)
#define                                 STAT0_bit           _BIT_ACCESS(ADSTAT,0)
// ADSTAT<STAT1>
extern volatile __bit                   STAT1               __at(0xE951);	// @ (0x1D2A * 8 + 1)
#define                                 STAT1_bit           _BIT_ACCESS(ADSTAT,1)
// ADSTAT<STAT2>
extern volatile __bit                   STAT2               __at(0xE952);	// @ (0x1D2A * 8 + 2)
#define                                 STAT2_bit           _BIT_ACCESS(ADSTAT,2)
// WDTTMR<STATE>
extern volatile __bit                   STATE               __at(0xC82);	// @ (0x190 * 8 + 2)
#define                                 STATE_bit           _BIT_ACCESS(WDTTMR,2)
// STATUS_SHAD<STATUS_SHAD0>
extern volatile __bit                   STATUS_SHAD0        __at(0xFF20);	// @ (0x1FE4 * 8 + 0)
#define                                 STATUS_SHAD0_bit    _BIT_ACCESS(STATUS_SHAD,0)
// STATUS_SHAD<STATUS_SHAD1>
extern volatile __bit                   STATUS_SHAD1        __at(0xFF21);	// @ (0x1FE4 * 8 + 1)
#define                                 STATUS_SHAD1_bit    _BIT_ACCESS(STATUS_SHAD,1)
// STATUS_SHAD<STATUS_SHAD2>
extern volatile __bit                   STATUS_SHAD2        __at(0xFF22);	// @ (0x1FE4 * 8 + 2)
#define                                 STATUS_SHAD2_bit    _BIT_ACCESS(STATUS_SHAD,2)
// PCON0<STKOVF>
extern volatile __bit                   STKOVF              __at(0xC97);	// @ (0x192 * 8 + 7)
#define                                 STKOVF_bit          _BIT_ACCESS(PCON0,7)
// STKPTR<STKPTR0>
extern volatile __bit                   STKPTR0             __at(0xFF68);	// @ (0x1FED * 8 + 0)
#define                                 STKPTR0_bit         _BIT_ACCESS(STKPTR,0)
// STKPTR<STKPTR1>
extern volatile __bit                   STKPTR1             __at(0xFF69);	// @ (0x1FED * 8 + 1)
#define                                 STKPTR1_bit         _BIT_ACCESS(STKPTR,1)
// STKPTR<STKPTR2>
extern volatile __bit                   STKPTR2             __at(0xFF6A);	// @ (0x1FED * 8 + 2)
#define                                 STKPTR2_bit         _BIT_ACCESS(STKPTR,2)
// STKPTR<STKPTR3>
extern volatile __bit                   STKPTR3             __at(0xFF6B);	// @ (0x1FED * 8 + 3)
#define                                 STKPTR3_bit         _BIT_ACCESS(STKPTR,3)
// STKPTR<STKPTR4>
extern volatile __bit                   STKPTR4             __at(0xFF6C);	// @ (0x1FED * 8 + 4)
#define                                 STKPTR4_bit         _BIT_ACCESS(STKPTR,4)
// PCON0<STKUNF>
extern volatile __bit                   STKUNF              __at(0xC96);	// @ (0x192 * 8 + 6)
#define                                 STKUNF_bit          _BIT_ACCESS(PCON0,6)
// SSP1STAT<STOP>
extern volatile __bit                   STOP                __at(0x3C7C);	// @ (0x78F * 8 + 4)
#define                                 STOP_bit            _BIT_ACCESS(SSP1STAT,4)
// SSP1STAT<STOP1>
extern volatile __bit                   STOP1               __at(0x3C7C);	// @ (0x78F * 8 + 4)
#define                                 STOP1_bit           _BIT_ACCESS(SSP1STAT,4)
// ADSTPTL<STPT0>
extern volatile __bit                   STPT0               __at(0xE890);	// @ (0x1D12 * 8 + 0)
#define                                 STPT0_bit           _BIT_ACCESS(ADSTPTL,0)
// ADSTPTL<STPT1>
extern volatile __bit                   STPT1               __at(0xE891);	// @ (0x1D12 * 8 + 1)
#define                                 STPT1_bit           _BIT_ACCESS(ADSTPTL,1)
// ADSTPTH<STPT10>
extern volatile __bit                   STPT10              __at(0xE89A);	// @ (0x1D13 * 8 + 2)
#define                                 STPT10_bit          _BIT_ACCESS(ADSTPTH,2)
// ADSTPTH<STPT11>
extern volatile __bit                   STPT11              __at(0xE89B);	// @ (0x1D13 * 8 + 3)
#define                                 STPT11_bit          _BIT_ACCESS(ADSTPTH,3)
// ADSTPTH<STPT12>
extern volatile __bit                   STPT12              __at(0xE89C);	// @ (0x1D13 * 8 + 4)
#define                                 STPT12_bit          _BIT_ACCESS(ADSTPTH,4)
// ADSTPTH<STPT13>
extern volatile __bit                   STPT13              __at(0xE89D);	// @ (0x1D13 * 8 + 5)
#define                                 STPT13_bit          _BIT_ACCESS(ADSTPTH,5)
// ADSTPTH<STPT15>
extern volatile __bit                   STPT15              __at(0xE89E);	// @ (0x1D13 * 8 + 6)
#define                                 STPT15_bit          _BIT_ACCESS(ADSTPTH,6)
// ADSTPTH<STPT16>
extern volatile __bit                   STPT16              __at(0xE89F);	// @ (0x1D13 * 8 + 7)
#define                                 STPT16_bit          _BIT_ACCESS(ADSTPTH,7)
// ADSTPTL<STPT2>
extern volatile __bit                   STPT2               __at(0xE892);	// @ (0x1D12 * 8 + 2)
#define                                 STPT2_bit           _BIT_ACCESS(ADSTPTL,2)
// ADSTPTL<STPT3>
extern volatile __bit                   STPT3               __at(0xE893);	// @ (0x1D12 * 8 + 3)
#define                                 STPT3_bit           _BIT_ACCESS(ADSTPTL,3)
// ADSTPTL<STPT4>
extern volatile __bit                   STPT4               __at(0xE894);	// @ (0x1D12 * 8 + 4)
#define                                 STPT4_bit           _BIT_ACCESS(ADSTPTL,4)
// ADSTPTL<STPT5>
extern volatile __bit                   STPT5               __at(0xE895);	// @ (0x1D12 * 8 + 5)
#define                                 STPT5_bit           _BIT_ACCESS(ADSTPTL,5)
// ADSTPTL<STPT6>
extern volatile __bit                   STPT6               __at(0xE896);	// @ (0x1D12 * 8 + 6)
#define                                 STPT6_bit           _BIT_ACCESS(ADSTPTL,6)
// ADSTPTL<STPT7>
extern volatile __bit                   STPT7               __at(0xE897);	// @ (0x1D12 * 8 + 7)
#define                                 STPT7_bit           _BIT_ACCESS(ADSTPTL,7)
// ADSTPTH<STPT8>
extern volatile __bit                   STPT8               __at(0xE898);	// @ (0x1D13 * 8 + 0)
#define                                 STPT8_bit           _BIT_ACCESS(ADSTPTH,0)
// ADSTPTH<STPT9>
extern volatile __bit                   STPT9               __at(0xE899);	// @ (0x1D13 * 8 + 1)
#define                                 STPT9_bit           _BIT_ACCESS(ADSTPTH,1)
// WDTCON0<SWDTEN>
extern volatile __bit                   SWDTEN              __at(0xC60);	// @ (0x18C * 8 + 0)
#define                                 SWDTEN_bit          _BIT_ACCESS(WDTCON0,0)
// PMD0<SYSCMD>
extern volatile __bit                   SYSCMD              __at(0x863);	// @ (0x10C * 8 + 3)
#define                                 SYSCMD_bit          _BIT_ACCESS(PMD0,3)
// T0CON0<T016BIT>
extern volatile __bit                   T016BIT             __at(0xCF4);	// @ (0x19E * 8 + 4)
#define                                 T016BIT_bit         _BIT_ACCESS(T0CON0,4)
// T0CON1<T0ASYNC>
extern volatile __bit                   T0ASYNC             __at(0xCFC);	// @ (0x19F * 8 + 4)
#define                                 T0ASYNC_bit         _BIT_ACCESS(T0CON1,4)
// T0CKIPPS<T0CKIPPS0>
extern volatile __bit                   T0CKIPPS0           __at(0xF070);	// @ (0x1E0E * 8 + 0)
#define                                 T0CKIPPS0_bit       _BIT_ACCESS(T0CKIPPS,0)
// T0CKIPPS<T0CKIPPS1>
extern volatile __bit                   T0CKIPPS1           __at(0xF071);	// @ (0x1E0E * 8 + 1)
#define                                 T0CKIPPS1_bit       _BIT_ACCESS(T0CKIPPS,1)
// T0CKIPPS<T0CKIPPS2>
extern volatile __bit                   T0CKIPPS2           __at(0xF072);	// @ (0x1E0E * 8 + 2)
#define                                 T0CKIPPS2_bit       _BIT_ACCESS(T0CKIPPS,2)
// T0CKIPPS<T0CKIPPS3>
extern volatile __bit                   T0CKIPPS3           __at(0xF073);	// @ (0x1E0E * 8 + 3)
#define                                 T0CKIPPS3_bit       _BIT_ACCESS(T0CKIPPS,3)
// T0CKIPPS<T0CKIPPS4>
extern volatile __bit                   T0CKIPPS4           __at(0xF074);	// @ (0x1E0E * 8 + 4)
#define                                 T0CKIPPS4_bit       _BIT_ACCESS(T0CKIPPS,4)
// T0CON1<T0CKPS0>
extern volatile __bit                   T0CKPS0             __at(0xCF8);	// @ (0x19F * 8 + 0)
#define                                 T0CKPS0_bit         _BIT_ACCESS(T0CON1,0)
// T0CON1<T0CKPS1>
extern volatile __bit                   T0CKPS1             __at(0xCF9);	// @ (0x19F * 8 + 1)
#define                                 T0CKPS1_bit         _BIT_ACCESS(T0CON1,1)
// T0CON1<T0CKPS2>
extern volatile __bit                   T0CKPS2             __at(0xCFA);	// @ (0x19F * 8 + 2)
#define                                 T0CKPS2_bit         _BIT_ACCESS(T0CON1,2)
// T0CON1<T0CKPS3>
extern volatile __bit                   T0CKPS3             __at(0xCFB);	// @ (0x19F * 8 + 3)
#define                                 T0CKPS3_bit         _BIT_ACCESS(T0CON1,3)
// T0CON1<T0CS0>
extern volatile __bit                   T0CS0               __at(0xCFD);	// @ (0x19F * 8 + 5)
#define                                 T0CS0_bit           _BIT_ACCESS(T0CON1,5)
// T0CON1<T0CS1>
extern volatile __bit                   T0CS1               __at(0xCFE);	// @ (0x19F * 8 + 6)
#define                                 T0CS1_bit           _BIT_ACCESS(T0CON1,6)
// T0CON1<T0CS2>
extern volatile __bit                   T0CS2               __at(0xCFF);	// @ (0x19F * 8 + 7)
#define                                 T0CS2_bit           _BIT_ACCESS(T0CON1,7)
// T0CON0<T0EN>
extern volatile __bit                   T0EN                __at(0xCF7);	// @ (0x19E * 8 + 7)
#define                                 T0EN_bit            _BIT_ACCESS(T0CON0,7)
// T0CON0<T0MD16>
extern volatile __bit                   T0MD16              __at(0xCF4);	// @ (0x19E * 8 + 4)
#define                                 T0MD16_bit          _BIT_ACCESS(T0CON0,4)
// T0CON0<T0OUT>
extern volatile __bit                   T0OUT               __at(0xCF5);	// @ (0x19E * 8 + 5)
#define                                 T0OUT_bit           _BIT_ACCESS(T0CON0,5)
// T0CON0<T0OUTPS0>
extern volatile __bit                   T0OUTPS0            __at(0xCF0);	// @ (0x19E * 8 + 0)
#define                                 T0OUTPS0_bit        _BIT_ACCESS(T0CON0,0)
// T0CON0<T0OUTPS1>
extern volatile __bit                   T0OUTPS1            __at(0xCF1);	// @ (0x19E * 8 + 1)
#define                                 T0OUTPS1_bit        _BIT_ACCESS(T0CON0,1)
// T0CON0<T0OUTPS2>
extern volatile __bit                   T0OUTPS2            __at(0xCF2);	// @ (0x19E * 8 + 2)
#define                                 T0OUTPS2_bit        _BIT_ACCESS(T0CON0,2)
// T0CON0<T0OUTPS3>
extern volatile __bit                   T0OUTPS3            __at(0xCF3);	// @ (0x19E * 8 + 3)
#define                                 T0OUTPS3_bit        _BIT_ACCESS(T0CON0,3)
// TMR0H<T0PR0>
extern volatile __bit                   T0PR0               __at(0xCE8);	// @ (0x19D * 8 + 0)
#define                                 T0PR0_bit           _BIT_ACCESS(TMR0H,0)
// TMR0H<T0PR1>
extern volatile __bit                   T0PR1               __at(0xCE9);	// @ (0x19D * 8 + 1)
#define                                 T0PR1_bit           _BIT_ACCESS(TMR0H,1)
// TMR0H<T0PR2>
extern volatile __bit                   T0PR2               __at(0xCEA);	// @ (0x19D * 8 + 2)
#define                                 T0PR2_bit           _BIT_ACCESS(TMR0H,2)
// TMR0H<T0PR3>
extern volatile __bit                   T0PR3               __at(0xCEB);	// @ (0x19D * 8 + 3)
#define                                 T0PR3_bit           _BIT_ACCESS(TMR0H,3)
// TMR0H<T0PR4>
extern volatile __bit                   T0PR4               __at(0xCEC);	// @ (0x19D * 8 + 4)
#define                                 T0PR4_bit           _BIT_ACCESS(TMR0H,4)
// TMR0H<T0PR5>
extern volatile __bit                   T0PR5               __at(0xCED);	// @ (0x19D * 8 + 5)
#define                                 T0PR5_bit           _BIT_ACCESS(TMR0H,5)
// TMR0H<T0PR6>
extern volatile __bit                   T0PR6               __at(0xCEE);	// @ (0x19D * 8 + 6)
#define                                 T0PR6_bit           _BIT_ACCESS(TMR0H,6)
// TMR0H<T0PR7>
extern volatile __bit                   T0PR7               __at(0xCEF);	// @ (0x19D * 8 + 7)
#define                                 T0PR7_bit           _BIT_ACCESS(TMR0H,7)
// T1CKIPPS<T1CKIPPS0>
extern volatile __bit                   T1CKIPPS0           __at(0xF078);	// @ (0x1E0F * 8 + 0)
#define                                 T1CKIPPS0_bit       _BIT_ACCESS(T1CKIPPS,0)
// T1CKIPPS<T1CKIPPS1>
extern volatile __bit                   T1CKIPPS1           __at(0xF079);	// @ (0x1E0F * 8 + 1)
#define                                 T1CKIPPS1_bit       _BIT_ACCESS(T1CKIPPS,1)
// T1CKIPPS<T1CKIPPS2>
extern volatile __bit                   T1CKIPPS2           __at(0xF07A);	// @ (0x1E0F * 8 + 2)
#define                                 T1CKIPPS2_bit       _BIT_ACCESS(T1CKIPPS,2)
// T1CKIPPS<T1CKIPPS3>
extern volatile __bit                   T1CKIPPS3           __at(0xF07B);	// @ (0x1E0F * 8 + 3)
#define                                 T1CKIPPS3_bit       _BIT_ACCESS(T1CKIPPS,3)
// T1CKIPPS<T1CKIPPS4>
extern volatile __bit                   T1CKIPPS4           __at(0xF07C);	// @ (0x1E0F * 8 + 4)
#define                                 T1CKIPPS4_bit       _BIT_ACCESS(T1CKIPPS,4)
// T1CON<T1CKPS0>
extern volatile __bit                   T1CKPS0             __at(0x1874);	// @ (0x30E * 8 + 4)
#define                                 T1CKPS0_bit         _BIT_ACCESS(T1CON,4)
// T1CON<T1CKPS1>
extern volatile __bit                   T1CKPS1             __at(0x1875);	// @ (0x30E * 8 + 5)
#define                                 T1CKPS1_bit         _BIT_ACCESS(T1CON,5)
// T1CLK<T1CS0>
extern volatile __bit                   T1CS0               __at(0x1888);	// @ (0x311 * 8 + 0)
#define                                 T1CS0_bit           _BIT_ACCESS(T1CLK,0)
// T1CLK<T1CS1>
extern volatile __bit                   T1CS1               __at(0x1889);	// @ (0x311 * 8 + 1)
#define                                 T1CS1_bit           _BIT_ACCESS(T1CLK,1)
// T1CLK<T1CS2>
extern volatile __bit                   T1CS2               __at(0x188A);	// @ (0x311 * 8 + 2)
#define                                 T1CS2_bit           _BIT_ACCESS(T1CLK,2)
// T1CLK<T1CS3>
extern volatile __bit                   T1CS3               __at(0x188B);	// @ (0x311 * 8 + 3)
#define                                 T1CS3_bit           _BIT_ACCESS(T1CLK,3)
// T1CLK<T1CS4>
extern volatile __bit                   T1CS4               __at(0x188C);	// @ (0x311 * 8 + 4)
#define                                 T1CS4_bit           _BIT_ACCESS(T1CLK,4)
// T1GCON<T1GE>
extern volatile __bit                   T1GE                __at(0x187F);	// @ (0x30F * 8 + 7)
#define                                 T1GE_bit            _BIT_ACCESS(T1GCON,7)
// T1GCON<T1GGO>
extern volatile __bit                   T1GGO               __at(0x187B);	// @ (0x30F * 8 + 3)
#define                                 T1GGO_bit           _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GGO_nDONE>
extern volatile __bit                   T1GGO_nDONE         __at(0x187B);	// @ (0x30F * 8 + 3)
#define                                 T1GGO_nDONE_bit     _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GPOL>
extern volatile __bit                   T1GPOL              __at(0x187E);	// @ (0x30F * 8 + 6)
#define                                 T1GPOL_bit          _BIT_ACCESS(T1GCON,6)
// T1GPPS<T1GPPS0>
extern volatile __bit                   T1GPPS0             __at(0xF080);	// @ (0x1E10 * 8 + 0)
#define                                 T1GPPS0_bit         _BIT_ACCESS(T1GPPS,0)
// T1GPPS<T1GPPS1>
extern volatile __bit                   T1GPPS1             __at(0xF081);	// @ (0x1E10 * 8 + 1)
#define                                 T1GPPS1_bit         _BIT_ACCESS(T1GPPS,1)
// T1GPPS<T1GPPS2>
extern volatile __bit                   T1GPPS2             __at(0xF082);	// @ (0x1E10 * 8 + 2)
#define                                 T1GPPS2_bit         _BIT_ACCESS(T1GPPS,2)
// T1GPPS<T1GPPS3>
extern volatile __bit                   T1GPPS3             __at(0xF083);	// @ (0x1E10 * 8 + 3)
#define                                 T1GPPS3_bit         _BIT_ACCESS(T1GPPS,3)
// T1GPPS<T1GPPS4>
extern volatile __bit                   T1GPPS4             __at(0xF084);	// @ (0x1E10 * 8 + 4)
#define                                 T1GPPS4_bit         _BIT_ACCESS(T1GPPS,4)
// T1GCON<T1GSPM>
extern volatile __bit                   T1GSPM              __at(0x187C);	// @ (0x30F * 8 + 4)
#define                                 T1GSPM_bit          _BIT_ACCESS(T1GCON,4)
// T1GATE<T1GSS0>
extern volatile __bit                   T1GSS0              __at(0x1880);	// @ (0x310 * 8 + 0)
#define                                 T1GSS0_bit          _BIT_ACCESS(T1GATE,0)
// T1GATE<T1GSS1>
extern volatile __bit                   T1GSS1              __at(0x1881);	// @ (0x310 * 8 + 1)
#define                                 T1GSS1_bit          _BIT_ACCESS(T1GATE,1)
// T1GATE<T1GSS2>
extern volatile __bit                   T1GSS2              __at(0x1882);	// @ (0x310 * 8 + 2)
#define                                 T1GSS2_bit          _BIT_ACCESS(T1GATE,2)
// T1GATE<T1GSS3>
extern volatile __bit                   T1GSS3              __at(0x1883);	// @ (0x310 * 8 + 3)
#define                                 T1GSS3_bit          _BIT_ACCESS(T1GATE,3)
// T1GATE<T1GSS4>
extern volatile __bit                   T1GSS4              __at(0x1884);	// @ (0x310 * 8 + 4)
#define                                 T1GSS4_bit          _BIT_ACCESS(T1GATE,4)
// T1GCON<T1GTM>
extern volatile __bit                   T1GTM               __at(0x187D);	// @ (0x30F * 8 + 5)
#define                                 T1GTM_bit           _BIT_ACCESS(T1GCON,5)
// T1GCON<T1GVAL>
extern volatile __bit                   T1GVAL              __at(0x187A);	// @ (0x30F * 8 + 2)
#define                                 T1GVAL_bit          _BIT_ACCESS(T1GCON,2)
// T1CON<T1RD16>
extern volatile __bit                   T1RD16              __at(0x1871);	// @ (0x30E * 8 + 1)
#define                                 T1RD16_bit          _BIT_ACCESS(T1CON,1)
// T2CON<T2CKPS0>
extern volatile __bit                   T2CKPS0             __at(0x1C74);	// @ (0x38E * 8 + 4)
#define                                 T2CKPS0_bit         _BIT_ACCESS(T2CON,4)
// T2CON<T2CKPS1>
extern volatile __bit                   T2CKPS1             __at(0x1C75);	// @ (0x38E * 8 + 5)
#define                                 T2CKPS1_bit         _BIT_ACCESS(T2CON,5)
// T2CON<T2CKPS2>
extern volatile __bit                   T2CKPS2             __at(0x1C76);	// @ (0x38E * 8 + 6)
#define                                 T2CKPS2_bit         _BIT_ACCESS(T2CON,6)
// T2HLT<T2CPOL>
extern volatile __bit                   T2CPOL              __at(0x1C7E);	// @ (0x38F * 8 + 6)
#define                                 T2CPOL_bit          _BIT_ACCESS(T2HLT,6)
// T2CLKCON<T2CS0>
extern volatile __bit                   T2CS0               __at(0x1C80);	// @ (0x390 * 8 + 0)
#define                                 T2CS0_bit           _BIT_ACCESS(T2CLKCON,0)
// T2CLKCON<T2CS1>
extern volatile __bit                   T2CS1               __at(0x1C81);	// @ (0x390 * 8 + 1)
#define                                 T2CS1_bit           _BIT_ACCESS(T2CLKCON,1)
// T2CLKCON<T2CS2>
extern volatile __bit                   T2CS2               __at(0x1C82);	// @ (0x390 * 8 + 2)
#define                                 T2CS2_bit           _BIT_ACCESS(T2CLKCON,2)
// T2CLKCON<T2CS3>
extern volatile __bit                   T2CS3               __at(0x1C83);	// @ (0x390 * 8 + 3)
#define                                 T2CS3_bit           _BIT_ACCESS(T2CLKCON,3)
// T2CLKCON<T2CS4>
extern volatile __bit                   T2CS4               __at(0x1C84);	// @ (0x390 * 8 + 4)
#define                                 T2CS4_bit           _BIT_ACCESS(T2CLKCON,4)
// T2HLT<T2CSYNC>
extern volatile __bit                   T2CSYNC             __at(0x1C7D);	// @ (0x38F * 8 + 5)
#define                                 T2CSYNC_bit         _BIT_ACCESS(T2HLT,5)
// T2INPPS<T2INPPS0>
extern volatile __bit                   T2INPPS0            __at(0xF0C8);	// @ (0x1E19 * 8 + 0)
#define                                 T2INPPS0_bit        _BIT_ACCESS(T2INPPS,0)
// T2INPPS<T2INPPS1>
extern volatile __bit                   T2INPPS1            __at(0xF0C9);	// @ (0x1E19 * 8 + 1)
#define                                 T2INPPS1_bit        _BIT_ACCESS(T2INPPS,1)
// T2INPPS<T2INPPS2>
extern volatile __bit                   T2INPPS2            __at(0xF0CA);	// @ (0x1E19 * 8 + 2)
#define                                 T2INPPS2_bit        _BIT_ACCESS(T2INPPS,2)
// T2INPPS<T2INPPS3>
extern volatile __bit                   T2INPPS3            __at(0xF0CB);	// @ (0x1E19 * 8 + 3)
#define                                 T2INPPS3_bit        _BIT_ACCESS(T2INPPS,3)
// T2INPPS<T2INPPS4>
extern volatile __bit                   T2INPPS4            __at(0xF0CC);	// @ (0x1E19 * 8 + 4)
#define                                 T2INPPS4_bit        _BIT_ACCESS(T2INPPS,4)
// T2HLT<T2MODE0>
extern volatile __bit                   T2MODE0             __at(0x1C78);	// @ (0x38F * 8 + 0)
#define                                 T2MODE0_bit         _BIT_ACCESS(T2HLT,0)
// T2HLT<T2MODE1>
extern volatile __bit                   T2MODE1             __at(0x1C79);	// @ (0x38F * 8 + 1)
#define                                 T2MODE1_bit         _BIT_ACCESS(T2HLT,1)
// T2HLT<T2MODE2>
extern volatile __bit                   T2MODE2             __at(0x1C7A);	// @ (0x38F * 8 + 2)
#define                                 T2MODE2_bit         _BIT_ACCESS(T2HLT,2)
// T2HLT<T2MODE3>
extern volatile __bit                   T2MODE3             __at(0x1C7B);	// @ (0x38F * 8 + 3)
#define                                 T2MODE3_bit         _BIT_ACCESS(T2HLT,3)
// T2HLT<T2MODE4>
extern volatile __bit                   T2MODE4             __at(0x1C7C);	// @ (0x38F * 8 + 4)
#define                                 T2MODE4_bit         _BIT_ACCESS(T2HLT,4)
// T2CON<T2ON>
extern volatile __bit                   T2ON                __at(0x1C77);	// @ (0x38E * 8 + 7)
#define                                 T2ON_bit            _BIT_ACCESS(T2CON,7)
// T2CON<T2OUTPS0>
extern volatile __bit                   T2OUTPS0            __at(0x1C70);	// @ (0x38E * 8 + 0)
#define                                 T2OUTPS0_bit        _BIT_ACCESS(T2CON,0)
// T2CON<T2OUTPS1>
extern volatile __bit                   T2OUTPS1            __at(0x1C71);	// @ (0x38E * 8 + 1)
#define                                 T2OUTPS1_bit        _BIT_ACCESS(T2CON,1)
// T2CON<T2OUTPS2>
extern volatile __bit                   T2OUTPS2            __at(0x1C72);	// @ (0x38E * 8 + 2)
#define                                 T2OUTPS2_bit        _BIT_ACCESS(T2CON,2)
// T2CON<T2OUTPS3>
extern volatile __bit                   T2OUTPS3            __at(0x1C73);	// @ (0x38E * 8 + 3)
#define                                 T2OUTPS3_bit        _BIT_ACCESS(T2CON,3)
// T2HLT<T2PSYNC>
extern volatile __bit                   T2PSYNC             __at(0x1C7F);	// @ (0x38F * 8 + 7)
#define                                 T2PSYNC_bit         _BIT_ACCESS(T2HLT,7)
// T2RST<T2RSEL0>
extern volatile __bit                   T2RSEL0             __at(0x1C88);	// @ (0x391 * 8 + 0)
#define                                 T2RSEL0_bit         _BIT_ACCESS(T2RST,0)
// T2RST<T2RSEL1>
extern volatile __bit                   T2RSEL1             __at(0x1C89);	// @ (0x391 * 8 + 1)
#define                                 T2RSEL1_bit         _BIT_ACCESS(T2RST,1)
// T2RST<T2RSEL2>
extern volatile __bit                   T2RSEL2             __at(0x1C8A);	// @ (0x391 * 8 + 2)
#define                                 T2RSEL2_bit         _BIT_ACCESS(T2RST,2)
// T2RST<T2RSEL3>
extern volatile __bit                   T2RSEL3             __at(0x1C8B);	// @ (0x391 * 8 + 3)
#define                                 T2RSEL3_bit         _BIT_ACCESS(T2RST,3)
// T2RST<T2RSEL4>
extern volatile __bit                   T2RSEL4             __at(0x1C8C);	// @ (0x391 * 8 + 4)
#define                                 T2RSEL4_bit         _BIT_ACCESS(T2RST,4)
// ADCON3<TMD0>
extern volatile __bit                   TMD0                __at(0xE948);	// @ (0x1D29 * 8 + 0)
#define                                 TMD0_bit            _BIT_ACCESS(ADCON3,0)
// ADCON3<TMD1>
extern volatile __bit                   TMD1                __at(0xE949);	// @ (0x1D29 * 8 + 1)
#define                                 TMD1_bit            _BIT_ACCESS(ADCON3,1)
// ADCON3<TMD2>
extern volatile __bit                   TMD2                __at(0xE94A);	// @ (0x1D29 * 8 + 2)
#define                                 TMD2_bit            _BIT_ACCESS(ADCON3,2)
// TMR0H<TMR0H0>
extern volatile __bit                   TMR0H0              __at(0xCE8);	// @ (0x19D * 8 + 0)
#define                                 TMR0H0_bit          _BIT_ACCESS(TMR0H,0)
// TMR0H<TMR0H1>
extern volatile __bit                   TMR0H1              __at(0xCE9);	// @ (0x19D * 8 + 1)
#define                                 TMR0H1_bit          _BIT_ACCESS(TMR0H,1)
// TMR0H<TMR0H2>
extern volatile __bit                   TMR0H2              __at(0xCEA);	// @ (0x19D * 8 + 2)
#define                                 TMR0H2_bit          _BIT_ACCESS(TMR0H,2)
// TMR0H<TMR0H3>
extern volatile __bit                   TMR0H3              __at(0xCEB);	// @ (0x19D * 8 + 3)
#define                                 TMR0H3_bit          _BIT_ACCESS(TMR0H,3)
// TMR0H<TMR0H4>
extern volatile __bit                   TMR0H4              __at(0xCEC);	// @ (0x19D * 8 + 4)
#define                                 TMR0H4_bit          _BIT_ACCESS(TMR0H,4)
// TMR0H<TMR0H5>
extern volatile __bit                   TMR0H5              __at(0xCED);	// @ (0x19D * 8 + 5)
#define                                 TMR0H5_bit          _BIT_ACCESS(TMR0H,5)
// TMR0H<TMR0H6>
extern volatile __bit                   TMR0H6              __at(0xCEE);	// @ (0x19D * 8 + 6)
#define                                 TMR0H6_bit          _BIT_ACCESS(TMR0H,6)
// TMR0H<TMR0H7>
extern volatile __bit                   TMR0H7              __at(0xCEF);	// @ (0x19D * 8 + 7)
#define                                 TMR0H7_bit          _BIT_ACCESS(TMR0H,7)
// PIE0<TMR0IE>
extern volatile __bit                   TMR0IE              __at(0x4B5);	// @ (0x96 * 8 + 5)
#define                                 TMR0IE_bit          _BIT_ACCESS(PIE0,5)
// PIR0<TMR0IF>
extern volatile __bit                   TMR0IF              __at(0x465);	// @ (0x8C * 8 + 5)
#define                                 TMR0IF_bit          _BIT_ACCESS(PIR0,5)
// TMR0L<TMR0L0>
extern volatile __bit                   TMR0L0              __at(0xCE0);	// @ (0x19C * 8 + 0)
#define                                 TMR0L0_bit          _BIT_ACCESS(TMR0L,0)
// TMR0L<TMR0L1>
extern volatile __bit                   TMR0L1              __at(0xCE1);	// @ (0x19C * 8 + 1)
#define                                 TMR0L1_bit          _BIT_ACCESS(TMR0L,1)
// TMR0L<TMR0L2>
extern volatile __bit                   TMR0L2              __at(0xCE2);	// @ (0x19C * 8 + 2)
#define                                 TMR0L2_bit          _BIT_ACCESS(TMR0L,2)
// TMR0L<TMR0L3>
extern volatile __bit                   TMR0L3              __at(0xCE3);	// @ (0x19C * 8 + 3)
#define                                 TMR0L3_bit          _BIT_ACCESS(TMR0L,3)
// TMR0L<TMR0L4>
extern volatile __bit                   TMR0L4              __at(0xCE4);	// @ (0x19C * 8 + 4)
#define                                 TMR0L4_bit          _BIT_ACCESS(TMR0L,4)
// TMR0L<TMR0L5>
extern volatile __bit                   TMR0L5              __at(0xCE5);	// @ (0x19C * 8 + 5)
#define                                 TMR0L5_bit          _BIT_ACCESS(TMR0L,5)
// TMR0L<TMR0L6>
extern volatile __bit                   TMR0L6              __at(0xCE6);	// @ (0x19C * 8 + 6)
#define                                 TMR0L6_bit          _BIT_ACCESS(TMR0L,6)
// TMR0L<TMR0L7>
extern volatile __bit                   TMR0L7              __at(0xCE7);	// @ (0x19C * 8 + 7)
#define                                 TMR0L7_bit          _BIT_ACCESS(TMR0L,7)
// PMD0<TMR0MD>
extern volatile __bit                   TMR0MD              __at(0x867);	// @ (0x10C * 8 + 7)
#define                                 TMR0MD_bit          _BIT_ACCESS(PMD0,7)
// TMR1L<TMR10>
extern volatile __bit                   TMR10               __at(0x1860);	// @ (0x30C * 8 + 0)
#define                                 TMR10_bit           _BIT_ACCESS(TMR1L,0)
// TMR1L<TMR11>
extern volatile __bit                   TMR11               __at(0x1861);	// @ (0x30C * 8 + 1)
#define                                 TMR11_bit           _BIT_ACCESS(TMR1L,1)
// TMR1H<TMR110>
extern volatile __bit                   TMR110              __at(0x186A);	// @ (0x30D * 8 + 2)
#define                                 TMR110_bit          _BIT_ACCESS(TMR1H,2)
// TMR1H<TMR111>
extern volatile __bit                   TMR111              __at(0x186B);	// @ (0x30D * 8 + 3)
#define                                 TMR111_bit          _BIT_ACCESS(TMR1H,3)
// TMR1H<TMR112>
extern volatile __bit                   TMR112              __at(0x186C);	// @ (0x30D * 8 + 4)
#define                                 TMR112_bit          _BIT_ACCESS(TMR1H,4)
// TMR1H<TMR113>
extern volatile __bit                   TMR113              __at(0x186D);	// @ (0x30D * 8 + 5)
#define                                 TMR113_bit          _BIT_ACCESS(TMR1H,5)
// TMR1H<TMR114>
extern volatile __bit                   TMR114              __at(0x186E);	// @ (0x30D * 8 + 6)
#define                                 TMR114_bit          _BIT_ACCESS(TMR1H,6)
// TMR1H<TMR115>
extern volatile __bit                   TMR115              __at(0x186F);	// @ (0x30D * 8 + 7)
#define                                 TMR115_bit          _BIT_ACCESS(TMR1H,7)
// TMR1L<TMR12>
extern volatile __bit                   TMR12               __at(0x1862);	// @ (0x30C * 8 + 2)
#define                                 TMR12_bit           _BIT_ACCESS(TMR1L,2)
// TMR1L<TMR13>
extern volatile __bit                   TMR13               __at(0x1863);	// @ (0x30C * 8 + 3)
#define                                 TMR13_bit           _BIT_ACCESS(TMR1L,3)
// TMR1L<TMR14>
extern volatile __bit                   TMR14               __at(0x1864);	// @ (0x30C * 8 + 4)
#define                                 TMR14_bit           _BIT_ACCESS(TMR1L,4)
// TMR1L<TMR15>
extern volatile __bit                   TMR15               __at(0x1865);	// @ (0x30C * 8 + 5)
#define                                 TMR15_bit           _BIT_ACCESS(TMR1L,5)
// TMR1L<TMR16>
extern volatile __bit                   TMR16               __at(0x1866);	// @ (0x30C * 8 + 6)
#define                                 TMR16_bit           _BIT_ACCESS(TMR1L,6)
// TMR1L<TMR17>
extern volatile __bit                   TMR17               __at(0x1867);	// @ (0x30C * 8 + 7)
#define                                 TMR17_bit           _BIT_ACCESS(TMR1L,7)
// TMR1H<TMR18>
extern volatile __bit                   TMR18               __at(0x1868);	// @ (0x30D * 8 + 0)
#define                                 TMR18_bit           _BIT_ACCESS(TMR1H,0)
// TMR1H<TMR19>
extern volatile __bit                   TMR19               __at(0x1869);	// @ (0x30D * 8 + 1)
#define                                 TMR19_bit           _BIT_ACCESS(TMR1H,1)
// PIE1<TMR1GIE>
extern volatile __bit                   TMR1GIE             __at(0x4BF);	// @ (0x97 * 8 + 7)
#define                                 TMR1GIE_bit         _BIT_ACCESS(PIE1,7)
// PIR1<TMR1GIF>
extern volatile __bit                   TMR1GIF             __at(0x46F);	// @ (0x8D * 8 + 7)
#define                                 TMR1GIF_bit         _BIT_ACCESS(PIR1,7)
// TMR1H<TMR1H0>
extern volatile __bit                   TMR1H0              __at(0x1868);	// @ (0x30D * 8 + 0)
#define                                 TMR1H0_bit          _BIT_ACCESS(TMR1H,0)
// TMR1H<TMR1H1>
extern volatile __bit                   TMR1H1              __at(0x1869);	// @ (0x30D * 8 + 1)
#define                                 TMR1H1_bit          _BIT_ACCESS(TMR1H,1)
// TMR1H<TMR1H2>
extern volatile __bit                   TMR1H2              __at(0x186A);	// @ (0x30D * 8 + 2)
#define                                 TMR1H2_bit          _BIT_ACCESS(TMR1H,2)
// TMR1H<TMR1H3>
extern volatile __bit                   TMR1H3              __at(0x186B);	// @ (0x30D * 8 + 3)
#define                                 TMR1H3_bit          _BIT_ACCESS(TMR1H,3)
// TMR1H<TMR1H4>
extern volatile __bit                   TMR1H4              __at(0x186C);	// @ (0x30D * 8 + 4)
#define                                 TMR1H4_bit          _BIT_ACCESS(TMR1H,4)
// TMR1H<TMR1H5>
extern volatile __bit                   TMR1H5              __at(0x186D);	// @ (0x30D * 8 + 5)
#define                                 TMR1H5_bit          _BIT_ACCESS(TMR1H,5)
// TMR1H<TMR1H6>
extern volatile __bit                   TMR1H6              __at(0x186E);	// @ (0x30D * 8 + 6)
#define                                 TMR1H6_bit          _BIT_ACCESS(TMR1H,6)
// TMR1H<TMR1H7>
extern volatile __bit                   TMR1H7              __at(0x186F);	// @ (0x30D * 8 + 7)
#define                                 TMR1H7_bit          _BIT_ACCESS(TMR1H,7)
// PIE1<TMR1IE>
extern volatile __bit                   TMR1IE              __at(0x4BE);	// @ (0x97 * 8 + 6)
#define                                 TMR1IE_bit          _BIT_ACCESS(PIE1,6)
// PIR1<TMR1IF>
extern volatile __bit                   TMR1IF              __at(0x46E);	// @ (0x8D * 8 + 6)
#define                                 TMR1IF_bit          _BIT_ACCESS(PIR1,6)
// TMR1L<TMR1L0>
extern volatile __bit                   TMR1L0              __at(0x1860);	// @ (0x30C * 8 + 0)
#define                                 TMR1L0_bit          _BIT_ACCESS(TMR1L,0)
// TMR1L<TMR1L1>
extern volatile __bit                   TMR1L1              __at(0x1861);	// @ (0x30C * 8 + 1)
#define                                 TMR1L1_bit          _BIT_ACCESS(TMR1L,1)
// TMR1L<TMR1L2>
extern volatile __bit                   TMR1L2              __at(0x1862);	// @ (0x30C * 8 + 2)
#define                                 TMR1L2_bit          _BIT_ACCESS(TMR1L,2)
// TMR1L<TMR1L3>
extern volatile __bit                   TMR1L3              __at(0x1863);	// @ (0x30C * 8 + 3)
#define                                 TMR1L3_bit          _BIT_ACCESS(TMR1L,3)
// TMR1L<TMR1L4>
extern volatile __bit                   TMR1L4              __at(0x1864);	// @ (0x30C * 8 + 4)
#define                                 TMR1L4_bit          _BIT_ACCESS(TMR1L,4)
// TMR1L<TMR1L5>
extern volatile __bit                   TMR1L5              __at(0x1865);	// @ (0x30C * 8 + 5)
#define                                 TMR1L5_bit          _BIT_ACCESS(TMR1L,5)
// TMR1L<TMR1L6>
extern volatile __bit                   TMR1L6              __at(0x1866);	// @ (0x30C * 8 + 6)
#define                                 TMR1L6_bit          _BIT_ACCESS(TMR1L,6)
// TMR1L<TMR1L7>
extern volatile __bit                   TMR1L7              __at(0x1867);	// @ (0x30C * 8 + 7)
#define                                 TMR1L7_bit          _BIT_ACCESS(TMR1L,7)
// PMD1<TMR1MD>
extern volatile __bit                   TMR1MD              __at(0x868);	// @ (0x10D * 8 + 0)
#define                                 TMR1MD_bit          _BIT_ACCESS(PMD1,0)
// T1CON<TMR1ON>
extern volatile __bit                   TMR1ON              __at(0x1870);	// @ (0x30E * 8 + 0)
#define                                 TMR1ON_bit          _BIT_ACCESS(T1CON,0)
// PIE2<TMR2IE>
extern volatile __bit                   TMR2IE              __at(0x4C2);	// @ (0x98 * 8 + 2)
#define                                 TMR2IE_bit          _BIT_ACCESS(PIE2,2)
// PIR2<TMR2IF>
extern volatile __bit                   TMR2IF              __at(0x472);	// @ (0x8E * 8 + 2)
#define                                 TMR2IF_bit          _BIT_ACCESS(PIR2,2)
// PMD1<TMR2MD>
extern volatile __bit                   TMR2MD              __at(0x86A);	// @ (0x10D * 8 + 2)
#define                                 TMR2MD_bit          _BIT_ACCESS(PMD1,2)
// T2CON<TMR2ON>
extern volatile __bit                   TMR2ON              __at(0x1C77);	// @ (0x38E * 8 + 7)
#define                                 TMR2ON_bit          _BIT_ACCESS(T2CON,7)
// TOSH<TOSH0>
extern volatile __bit                   TOSH0               __at(0xFF78);	// @ (0x1FEF * 8 + 0)
#define                                 TOSH0_bit           _BIT_ACCESS(TOSH,0)
// TOSH<TOSH1>
extern volatile __bit                   TOSH1               __at(0xFF79);	// @ (0x1FEF * 8 + 1)
#define                                 TOSH1_bit           _BIT_ACCESS(TOSH,1)
// TOSH<TOSH2>
extern volatile __bit                   TOSH2               __at(0xFF7A);	// @ (0x1FEF * 8 + 2)
#define                                 TOSH2_bit           _BIT_ACCESS(TOSH,2)
// TOSH<TOSH3>
extern volatile __bit                   TOSH3               __at(0xFF7B);	// @ (0x1FEF * 8 + 3)
#define                                 TOSH3_bit           _BIT_ACCESS(TOSH,3)
// TOSH<TOSH4>
extern volatile __bit                   TOSH4               __at(0xFF7C);	// @ (0x1FEF * 8 + 4)
#define                                 TOSH4_bit           _BIT_ACCESS(TOSH,4)
// TOSH<TOSH5>
extern volatile __bit                   TOSH5               __at(0xFF7D);	// @ (0x1FEF * 8 + 5)
#define                                 TOSH5_bit           _BIT_ACCESS(TOSH,5)
// TOSH<TOSH6>
extern volatile __bit                   TOSH6               __at(0xFF7E);	// @ (0x1FEF * 8 + 6)
#define                                 TOSH6_bit           _BIT_ACCESS(TOSH,6)
// TOSH<TOSH7>
extern volatile __bit                   TOSH7               __at(0xFF7F);	// @ (0x1FEF * 8 + 7)
#define                                 TOSH7_bit           _BIT_ACCESS(TOSH,7)
// TOSL<TOSL0>
extern volatile __bit                   TOSL0               __at(0xFF70);	// @ (0x1FEE * 8 + 0)
#define                                 TOSL0_bit           _BIT_ACCESS(TOSL,0)
// TOSL<TOSL1>
extern volatile __bit                   TOSL1               __at(0xFF71);	// @ (0x1FEE * 8 + 1)
#define                                 TOSL1_bit           _BIT_ACCESS(TOSL,1)
// TOSL<TOSL2>
extern volatile __bit                   TOSL2               __at(0xFF72);	// @ (0x1FEE * 8 + 2)
#define                                 TOSL2_bit           _BIT_ACCESS(TOSL,2)
// TOSL<TOSL3>
extern volatile __bit                   TOSL3               __at(0xFF73);	// @ (0x1FEE * 8 + 3)
#define                                 TOSL3_bit           _BIT_ACCESS(TOSL,3)
// TOSL<TOSL4>
extern volatile __bit                   TOSL4               __at(0xFF74);	// @ (0x1FEE * 8 + 4)
#define                                 TOSL4_bit           _BIT_ACCESS(TOSL,4)
// TOSL<TOSL5>
extern volatile __bit                   TOSL5               __at(0xFF75);	// @ (0x1FEE * 8 + 5)
#define                                 TOSL5_bit           _BIT_ACCESS(TOSL,5)
// TOSL<TOSL6>
extern volatile __bit                   TOSL6               __at(0xFF76);	// @ (0x1FEE * 8 + 6)
#define                                 TOSL6_bit           _BIT_ACCESS(TOSL,6)
// TOSL<TOSL7>
extern volatile __bit                   TOSL7               __at(0xFF77);	// @ (0x1FEE * 8 + 7)
#define                                 TOSL7_bit           _BIT_ACCESS(TOSL,7)
// TRISA<TRISA0>
extern volatile __bit                   TRISA0              __at(0x90);	// @ (0x12 * 8 + 0)
#define                                 TRISA0_bit          _BIT_ACCESS(TRISA,0)
// TRISA<TRISA1>
extern volatile __bit                   TRISA1              __at(0x91);	// @ (0x12 * 8 + 1)
#define                                 TRISA1_bit          _BIT_ACCESS(TRISA,1)
// TRISA<TRISA2>
extern volatile __bit                   TRISA2              __at(0x92);	// @ (0x12 * 8 + 2)
#define                                 TRISA2_bit          _BIT_ACCESS(TRISA,2)
// TRISA<TRISA4>
extern volatile __bit                   TRISA4              __at(0x94);	// @ (0x12 * 8 + 4)
#define                                 TRISA4_bit          _BIT_ACCESS(TRISA,4)
// TRISA<TRISA5>
extern volatile __bit                   TRISA5              __at(0x95);	// @ (0x12 * 8 + 5)
#define                                 TRISA5_bit          _BIT_ACCESS(TRISA,5)
// TRISC<TRISC0>
extern volatile __bit                   TRISC0              __at(0xA0);	// @ (0x14 * 8 + 0)
#define                                 TRISC0_bit          _BIT_ACCESS(TRISC,0)
// TRISC<TRISC1>
extern volatile __bit                   TRISC1              __at(0xA1);	// @ (0x14 * 8 + 1)
#define                                 TRISC1_bit          _BIT_ACCESS(TRISC,1)
// TRISC<TRISC2>
extern volatile __bit                   TRISC2              __at(0xA2);	// @ (0x14 * 8 + 2)
#define                                 TRISC2_bit          _BIT_ACCESS(TRISC,2)
// TRISC<TRISC3>
extern volatile __bit                   TRISC3              __at(0xA3);	// @ (0x14 * 8 + 3)
#define                                 TRISC3_bit          _BIT_ACCESS(TRISC,3)
// TRISC<TRISC4>
extern volatile __bit                   TRISC4              __at(0xA4);	// @ (0x14 * 8 + 4)
#define                                 TRISC4_bit          _BIT_ACCESS(TRISC,4)
// TRISC<TRISC5>
extern volatile __bit                   TRISC5              __at(0xA5);	// @ (0x14 * 8 + 5)
#define                                 TRISC5_bit          _BIT_ACCESS(TRISC,5)
// TX1STA<TRMT>
extern volatile __bit                   TRMT                __at(0x3889);	// @ (0x711 * 8 + 1)
#define                                 TRMT_bit            _BIT_ACCESS(TX1STA,1)
// FVRCON<TSEN>
extern volatile __bit                   TSEN                __at(0x1065);	// @ (0x20C * 8 + 5)
#define                                 TSEN_bit            _BIT_ACCESS(FVRCON,5)
// FVRCON<TSRNG>
extern volatile __bit                   TSRNG               __at(0x1064);	// @ (0x20C * 8 + 4)
#define                                 TSRNG_bit           _BIT_ACCESS(FVRCON,4)
// OSCTUNE<TUN0>
extern volatile __bit                   TUN0                __at(0x1490);	// @ (0x292 * 8 + 0)
#define                                 TUN0_bit            _BIT_ACCESS(OSCTUNE,0)
// OSCTUNE<TUN1>
extern volatile __bit                   TUN1                __at(0x1491);	// @ (0x292 * 8 + 1)
#define                                 TUN1_bit            _BIT_ACCESS(OSCTUNE,1)
// OSCTUNE<TUN2>
extern volatile __bit                   TUN2                __at(0x1492);	// @ (0x292 * 8 + 2)
#define                                 TUN2_bit            _BIT_ACCESS(OSCTUNE,2)
// OSCTUNE<TUN3>
extern volatile __bit                   TUN3                __at(0x1493);	// @ (0x292 * 8 + 3)
#define                                 TUN3_bit            _BIT_ACCESS(OSCTUNE,3)
// OSCTUNE<TUN4>
extern volatile __bit                   TUN4                __at(0x1494);	// @ (0x292 * 8 + 4)
#define                                 TUN4_bit            _BIT_ACCESS(OSCTUNE,4)
// OSCTUNE<TUN5>
extern volatile __bit                   TUN5                __at(0x1495);	// @ (0x292 * 8 + 5)
#define                                 TUN5_bit            _BIT_ACCESS(OSCTUNE,5)
// PIE4<TX1IE>
extern volatile __bit                   TX1IE               __at(0x4D6);	// @ (0x9A * 8 + 6)
#define                                 TX1IE_bit           _BIT_ACCESS(PIE4,6)
// PIR4<TX1IF>
extern volatile __bit                   TX1IF               __at(0x486);	// @ (0x90 * 8 + 6)
#define                                 TX1IF_bit           _BIT_ACCESS(PIR4,6)
// TX1STA<TX9>
extern volatile __bit                   TX9                 __at(0x388E);	// @ (0x711 * 8 + 6)
#define                                 TX9_bit             _BIT_ACCESS(TX1STA,6)
// TX1STA<TX9D>
extern volatile __bit                   TX9D                __at(0x3888);	// @ (0x711 * 8 + 0)
#define                                 TX9D_bit            _BIT_ACCESS(TX1STA,0)
// TX1STA<TXEN>
extern volatile __bit                   TXEN                __at(0x388D);	// @ (0x711 * 8 + 5)
#define                                 TXEN_bit            _BIT_ACCESS(TX1STA,5)
// SSP1STAT<UA>
extern volatile __bit                   UA                  __at(0x3C79);	// @ (0x78F * 8 + 1)
#define                                 UA_bit              _BIT_ACCESS(SSP1STAT,1)
// SSP1STAT<UA1>
extern volatile __bit                   UA1                 __at(0x3C79);	// @ (0x78F * 8 + 1)
#define                                 UA1_bit             _BIT_ACCESS(SSP1STAT,1)
// PMD3<UART1MD>
extern volatile __bit                   UART1MD             __at(0x879);	// @ (0x10F * 8 + 1)
#define                                 UART1MD_bit         _BIT_ACCESS(PMD3,1)
// ADUTHL<UTH0>
extern volatile __bit                   UTH0                __at(0xE870);	// @ (0x1D0E * 8 + 0)
#define                                 UTH0_bit            _BIT_ACCESS(ADUTHL,0)
// ADUTHL<UTH1>
extern volatile __bit                   UTH1                __at(0xE871);	// @ (0x1D0E * 8 + 1)
#define                                 UTH1_bit            _BIT_ACCESS(ADUTHL,1)
// ADUTHH<UTH10>
extern volatile __bit                   UTH10               __at(0xE87A);	// @ (0x1D0F * 8 + 2)
#define                                 UTH10_bit           _BIT_ACCESS(ADUTHH,2)
// ADUTHH<UTH11>
extern volatile __bit                   UTH11               __at(0xE87B);	// @ (0x1D0F * 8 + 3)
#define                                 UTH11_bit           _BIT_ACCESS(ADUTHH,3)
// ADUTHH<UTH12>
extern volatile __bit                   UTH12               __at(0xE87C);	// @ (0x1D0F * 8 + 4)
#define                                 UTH12_bit           _BIT_ACCESS(ADUTHH,4)
// ADUTHH<UTH13>
extern volatile __bit                   UTH13               __at(0xE87D);	// @ (0x1D0F * 8 + 5)
#define                                 UTH13_bit           _BIT_ACCESS(ADUTHH,5)
// ADUTHH<UTH14>
extern volatile __bit                   UTH14               __at(0xE87E);	// @ (0x1D0F * 8 + 6)
#define                                 UTH14_bit           _BIT_ACCESS(ADUTHH,6)
// ADUTHH<UTH15>
extern volatile __bit                   UTH15               __at(0xE87F);	// @ (0x1D0F * 8 + 7)
#define                                 UTH15_bit           _BIT_ACCESS(ADUTHH,7)
// ADUTHL<UTH2>
extern volatile __bit                   UTH2                __at(0xE872);	// @ (0x1D0E * 8 + 2)
#define                                 UTH2_bit            _BIT_ACCESS(ADUTHL,2)
// ADUTHL<UTH3>
extern volatile __bit                   UTH3                __at(0xE873);	// @ (0x1D0E * 8 + 3)
#define                                 UTH3_bit            _BIT_ACCESS(ADUTHL,3)
// ADUTHL<UTH4>
extern volatile __bit                   UTH4                __at(0xE874);	// @ (0x1D0E * 8 + 4)
#define                                 UTH4_bit            _BIT_ACCESS(ADUTHL,4)
// ADUTHL<UTH5>
extern volatile __bit                   UTH5                __at(0xE875);	// @ (0x1D0E * 8 + 5)
#define                                 UTH5_bit            _BIT_ACCESS(ADUTHL,5)
// ADUTHL<UTH6>
extern volatile __bit                   UTH6                __at(0xE876);	// @ (0x1D0E * 8 + 6)
#define                                 UTH6_bit            _BIT_ACCESS(ADUTHL,6)
// ADUTHL<UTH7>
extern volatile __bit                   UTH7                __at(0xE877);	// @ (0x1D0E * 8 + 7)
#define                                 UTH7_bit            _BIT_ACCESS(ADUTHL,7)
// ADUTHH<UTH8>
extern volatile __bit                   UTH8                __at(0xE878);	// @ (0x1D0F * 8 + 0)
#define                                 UTH8_bit            _BIT_ACCESS(ADUTHH,0)
// ADUTHH<UTH9>
extern volatile __bit                   UTH9                __at(0xE879);	// @ (0x1D0F * 8 + 1)
#define                                 UTH9_bit            _BIT_ACCESS(ADUTHH,1)
// ADSTAT<UTHR>
extern volatile __bit                   UTHR                __at(0xE956);	// @ (0x1D2A * 8 + 6)
#define                                 UTHR_bit            _BIT_ACCESS(ADSTAT,6)
// SSP1CON1<WCOL>
extern volatile __bit                   WCOL                __at(0x3C87);	// @ (0x790 * 8 + 7)
#define                                 WCOL_bit            _BIT_ACCESS(SSP1CON1,7)
// SSP1CON1<WCOL1>
extern volatile __bit                   WCOL1               __at(0x3C87);	// @ (0x790 * 8 + 7)
#define                                 WCOL1_bit           _BIT_ACCESS(SSP1CON1,7)
// WDTCON1<WDTCS0>
extern volatile __bit                   WDTCS0              __at(0xC6C);	// @ (0x18D * 8 + 4)
#define                                 WDTCS0_bit          _BIT_ACCESS(WDTCON1,4)
// WDTCON1<WDTCS1>
extern volatile __bit                   WDTCS1              __at(0xC6D);	// @ (0x18D * 8 + 5)
#define                                 WDTCS1_bit          _BIT_ACCESS(WDTCON1,5)
// WDTCON1<WDTCS2>
extern volatile __bit                   WDTCS2              __at(0xC6E);	// @ (0x18D * 8 + 6)
#define                                 WDTCS2_bit          _BIT_ACCESS(WDTCON1,6)
// WDTCON0<WDTPS0>
extern volatile __bit                   WDTPS0              __at(0xC61);	// @ (0x18C * 8 + 1)
#define                                 WDTPS0_bit          _BIT_ACCESS(WDTCON0,1)
// WDTCON0<WDTPS1>
extern volatile __bit                   WDTPS1              __at(0xC62);	// @ (0x18C * 8 + 2)
#define                                 WDTPS1_bit          _BIT_ACCESS(WDTCON0,2)
// WDTCON0<WDTPS2>
extern volatile __bit                   WDTPS2              __at(0xC63);	// @ (0x18C * 8 + 3)
#define                                 WDTPS2_bit          _BIT_ACCESS(WDTCON0,3)
// WDTCON0<WDTPS3>
extern volatile __bit                   WDTPS3              __at(0xC64);	// @ (0x18C * 8 + 4)
#define                                 WDTPS3_bit          _BIT_ACCESS(WDTCON0,4)
// WDTCON0<WDTPS4>
extern volatile __bit                   WDTPS4              __at(0xC65);	// @ (0x18C * 8 + 5)
#define                                 WDTPS4_bit          _BIT_ACCESS(WDTCON0,5)
// WDTTMR<WDTPSCNT16>
extern volatile __bit                   WDTPSCNT16          __at(0xC80);	// @ (0x190 * 8 + 0)
#define                                 WDTPSCNT16_bit      _BIT_ACCESS(WDTTMR,0)
// WDTTMR<WDTPSCNT17>
extern volatile __bit                   WDTPSCNT17          __at(0xC81);	// @ (0x190 * 8 + 1)
#define                                 WDTPSCNT17_bit      _BIT_ACCESS(WDTTMR,1)
// WDTCON0<WDTSEN>
extern volatile __bit                   WDTSEN              __at(0xC60);	// @ (0x18C * 8 + 0)
#define                                 WDTSEN_bit          _BIT_ACCESS(WDTCON0,0)
// WDTTMR<WDTSTATE>
extern volatile __bit                   WDTSTATE            __at(0xC82);	// @ (0x190 * 8 + 2)
#define                                 WDTSTATE_bit        _BIT_ACCESS(WDTTMR,2)
// WDTTMR<WDTTMR0>
extern volatile __bit                   WDTTMR0             __at(0xC83);	// @ (0x190 * 8 + 3)
#define                                 WDTTMR0_bit         _BIT_ACCESS(WDTTMR,3)
// WDTTMR<WDTTMR1>
extern volatile __bit                   WDTTMR1             __at(0xC84);	// @ (0x190 * 8 + 4)
#define                                 WDTTMR1_bit         _BIT_ACCESS(WDTTMR,4)
// WDTTMR<WDTTMR2>
extern volatile __bit                   WDTTMR2             __at(0xC85);	// @ (0x190 * 8 + 5)
#define                                 WDTTMR2_bit         _BIT_ACCESS(WDTTMR,5)
// WDTTMR<WDTTMR3>
extern volatile __bit                   WDTTMR3             __at(0xC86);	// @ (0x190 * 8 + 6)
#define                                 WDTTMR3_bit         _BIT_ACCESS(WDTTMR,6)
// WDTTMR<WDTTMR4>
extern volatile __bit                   WDTTMR4             __at(0xC87);	// @ (0x190 * 8 + 7)
#define                                 WDTTMR4_bit         _BIT_ACCESS(WDTTMR,7)
// WDTCON1<WDTWINDOW0>
extern volatile __bit                   WDTWINDOW0          __at(0xC68);	// @ (0x18D * 8 + 0)
#define                                 WDTWINDOW0_bit      _BIT_ACCESS(WDTCON1,0)
// WDTCON1<WDTWINDOW1>
extern volatile __bit                   WDTWINDOW1          __at(0xC69);	// @ (0x18D * 8 + 1)
#define                                 WDTWINDOW1_bit      _BIT_ACCESS(WDTCON1,1)
// WDTCON1<WDTWINDOW2>
extern volatile __bit                   WDTWINDOW2          __at(0xC6A);	// @ (0x18D * 8 + 2)
#define                                 WDTWINDOW2_bit      _BIT_ACCESS(WDTCON1,2)
// WDTCON1<WINDOW0>
extern volatile __bit                   WINDOW0             __at(0xC68);	// @ (0x18D * 8 + 0)
#define                                 WINDOW0_bit         _BIT_ACCESS(WDTCON1,0)
// WDTCON1<WINDOW1>
extern volatile __bit                   WINDOW1             __at(0xC69);	// @ (0x18D * 8 + 1)
#define                                 WINDOW1_bit         _BIT_ACCESS(WDTCON1,1)
// WDTCON1<WINDOW2>
extern volatile __bit                   WINDOW2             __at(0xC6A);	// @ (0x18D * 8 + 2)
#define                                 WINDOW2_bit         _BIT_ACCESS(WDTCON1,2)
// WPUA<WPUA0>
extern volatile __bit                   WPUA0               __at(0xF468);	// @ (0x1E8D * 8 + 0)
#define                                 WPUA0_bit           _BIT_ACCESS(WPUA,0)
// WPUA<WPUA1>
extern volatile __bit                   WPUA1               __at(0xF469);	// @ (0x1E8D * 8 + 1)
#define                                 WPUA1_bit           _BIT_ACCESS(WPUA,1)
// WPUA<WPUA2>
extern volatile __bit                   WPUA2               __at(0xF46A);	// @ (0x1E8D * 8 + 2)
#define                                 WPUA2_bit           _BIT_ACCESS(WPUA,2)
// WPUA<WPUA3>
extern volatile __bit                   WPUA3               __at(0xF46B);	// @ (0x1E8D * 8 + 3)
#define                                 WPUA3_bit           _BIT_ACCESS(WPUA,3)
// WPUA<WPUA4>
extern volatile __bit                   WPUA4               __at(0xF46C);	// @ (0x1E8D * 8 + 4)
#define                                 WPUA4_bit           _BIT_ACCESS(WPUA,4)
// WPUA<WPUA5>
extern volatile __bit                   WPUA5               __at(0xF46D);	// @ (0x1E8D * 8 + 5)
#define                                 WPUA5_bit           _BIT_ACCESS(WPUA,5)
// WPUC<WPUC0>
extern volatile __bit                   WPUC0               __at(0xF508);	// @ (0x1EA1 * 8 + 0)
#define                                 WPUC0_bit           _BIT_ACCESS(WPUC,0)
// WPUC<WPUC1>
extern volatile __bit                   WPUC1               __at(0xF509);	// @ (0x1EA1 * 8 + 1)
#define                                 WPUC1_bit           _BIT_ACCESS(WPUC,1)
// WPUC<WPUC2>
extern volatile __bit                   WPUC2               __at(0xF50A);	// @ (0x1EA1 * 8 + 2)
#define                                 WPUC2_bit           _BIT_ACCESS(WPUC,2)
// WPUC<WPUC3>
extern volatile __bit                   WPUC3               __at(0xF50B);	// @ (0x1EA1 * 8 + 3)
#define                                 WPUC3_bit           _BIT_ACCESS(WPUC,3)
// WPUC<WPUC4>
extern volatile __bit                   WPUC4               __at(0xF50C);	// @ (0x1EA1 * 8 + 4)
#define                                 WPUC4_bit           _BIT_ACCESS(WPUC,4)
// WPUC<WPUC5>
extern volatile __bit                   WPUC5               __at(0xF50D);	// @ (0x1EA1 * 8 + 5)
#define                                 WPUC5_bit           _BIT_ACCESS(WPUC,5)
// NVMCON1<WR>
extern volatile __bit                   WR                  __at(0xE481);	// @ (0x1C90 * 8 + 1)
#define                                 WR_bit              _BIT_ACCESS(NVMCON1,1)
// NVMCON1<WREN>
extern volatile __bit                   WREN                __at(0xE482);	// @ (0x1C90 * 8 + 2)
#define                                 WREN_bit            _BIT_ACCESS(NVMCON1,2)
// NVMCON1<WRERR>
extern volatile __bit                   WRERR               __at(0xE483);	// @ (0x1C90 * 8 + 3)
#define                                 WRERR_bit           _BIT_ACCESS(NVMCON1,3)
// BAUD1CON<WUE>
extern volatile __bit                   WUE                 __at(0x3891);	// @ (0x712 * 8 + 1)
#define                                 WUE_bit             _BIT_ACCESS(BAUD1CON,1)
// CRCXORL<XOR0>
extern volatile __bit                   XOR0                __at(0xE508);	// @ (0x1CA1 * 8 + 0)
#define                                 XOR0_bit            _BIT_ACCESS(CRCXORL,0)
// CRCXORL<XOR1>
extern volatile __bit                   XOR1                __at(0xE509);	// @ (0x1CA1 * 8 + 1)
#define                                 XOR1_bit            _BIT_ACCESS(CRCXORL,1)
// CRCXORH<XOR10>
extern volatile __bit                   XOR10               __at(0xE512);	// @ (0x1CA2 * 8 + 2)
#define                                 XOR10_bit           _BIT_ACCESS(CRCXORH,2)
// CRCXORH<XOR11>
extern volatile __bit                   XOR11               __at(0xE513);	// @ (0x1CA2 * 8 + 3)
#define                                 XOR11_bit           _BIT_ACCESS(CRCXORH,3)
// CRCXORH<XOR12>
extern volatile __bit                   XOR12               __at(0xE514);	// @ (0x1CA2 * 8 + 4)
#define                                 XOR12_bit           _BIT_ACCESS(CRCXORH,4)
// CRCXORH<XOR13>
extern volatile __bit                   XOR13               __at(0xE515);	// @ (0x1CA2 * 8 + 5)
#define                                 XOR13_bit           _BIT_ACCESS(CRCXORH,5)
// CRCXORH<XOR14>
extern volatile __bit                   XOR14               __at(0xE516);	// @ (0x1CA2 * 8 + 6)
#define                                 XOR14_bit           _BIT_ACCESS(CRCXORH,6)
// CRCXORH<XOR15>
extern volatile __bit                   XOR15               __at(0xE517);	// @ (0x1CA2 * 8 + 7)
#define                                 XOR15_bit           _BIT_ACCESS(CRCXORH,7)
// CRCXORU<XOR16>
extern volatile __bit                   XOR16               __at(0xE518);	// @ (0x1CA3 * 8 + 0)
#define                                 XOR16_bit           _BIT_ACCESS(CRCXORU,0)
// CRCXORU<XOR17>
extern volatile __bit                   XOR17               __at(0xE519);	// @ (0x1CA3 * 8 + 1)
#define                                 XOR17_bit           _BIT_ACCESS(CRCXORU,1)
// CRCXORU<XOR18>
extern volatile __bit                   XOR18               __at(0xE51A);	// @ (0x1CA3 * 8 + 2)
#define                                 XOR18_bit           _BIT_ACCESS(CRCXORU,2)
// CRCXORU<XOR19>
extern volatile __bit                   XOR19               __at(0xE51B);	// @ (0x1CA3 * 8 + 3)
#define                                 XOR19_bit           _BIT_ACCESS(CRCXORU,3)
// CRCXORL<XOR2>
extern volatile __bit                   XOR2                __at(0xE50A);	// @ (0x1CA1 * 8 + 2)
#define                                 XOR2_bit            _BIT_ACCESS(CRCXORL,2)
// CRCXORU<XOR20>
extern volatile __bit                   XOR20               __at(0xE51C);	// @ (0x1CA3 * 8 + 4)
#define                                 XOR20_bit           _BIT_ACCESS(CRCXORU,4)
// CRCXORU<XOR21>
extern volatile __bit                   XOR21               __at(0xE51D);	// @ (0x1CA3 * 8 + 5)
#define                                 XOR21_bit           _BIT_ACCESS(CRCXORU,5)
// CRCXORU<XOR22>
extern volatile __bit                   XOR22               __at(0xE51E);	// @ (0x1CA3 * 8 + 6)
#define                                 XOR22_bit           _BIT_ACCESS(CRCXORU,6)
// CRCXORU<XOR23>
extern volatile __bit                   XOR23               __at(0xE51F);	// @ (0x1CA3 * 8 + 7)
#define                                 XOR23_bit           _BIT_ACCESS(CRCXORU,7)
// CRCXORT<XOR24>
extern volatile __bit                   XOR24               __at(0xE520);	// @ (0x1CA4 * 8 + 0)
#define                                 XOR24_bit           _BIT_ACCESS(CRCXORT,0)
// CRCXORT<XOR25>
extern volatile __bit                   XOR25               __at(0xE521);	// @ (0x1CA4 * 8 + 1)
#define                                 XOR25_bit           _BIT_ACCESS(CRCXORT,1)
// CRCXORT<XOR26>
extern volatile __bit                   XOR26               __at(0xE522);	// @ (0x1CA4 * 8 + 2)
#define                                 XOR26_bit           _BIT_ACCESS(CRCXORT,2)
// CRCXORT<XOR27>
extern volatile __bit                   XOR27               __at(0xE523);	// @ (0x1CA4 * 8 + 3)
#define                                 XOR27_bit           _BIT_ACCESS(CRCXORT,3)
// CRCXORT<XOR28>
extern volatile __bit                   XOR28               __at(0xE524);	// @ (0x1CA4 * 8 + 4)
#define                                 XOR28_bit           _BIT_ACCESS(CRCXORT,4)
// CRCXORT<XOR29>
extern volatile __bit                   XOR29               __at(0xE525);	// @ (0x1CA4 * 8 + 5)
#define                                 XOR29_bit           _BIT_ACCESS(CRCXORT,5)
// CRCXORL<XOR3>
extern volatile __bit                   XOR3                __at(0xE50B);	// @ (0x1CA1 * 8 + 3)
#define                                 XOR3_bit            _BIT_ACCESS(CRCXORL,3)
// CRCXORT<XOR30>
extern volatile __bit                   XOR30               __at(0xE526);	// @ (0x1CA4 * 8 + 6)
#define                                 XOR30_bit           _BIT_ACCESS(CRCXORT,6)
// CRCXORT<XOR31>
extern volatile __bit                   XOR31               __at(0xE527);	// @ (0x1CA4 * 8 + 7)
#define                                 XOR31_bit           _BIT_ACCESS(CRCXORT,7)
// CRCXORL<XOR4>
extern volatile __bit                   XOR4                __at(0xE50C);	// @ (0x1CA1 * 8 + 4)
#define                                 XOR4_bit            _BIT_ACCESS(CRCXORL,4)
// CRCXORL<XOR5>
extern volatile __bit                   XOR5                __at(0xE50D);	// @ (0x1CA1 * 8 + 5)
#define                                 XOR5_bit            _BIT_ACCESS(CRCXORL,5)
// CRCXORL<XOR6>
extern volatile __bit                   XOR6                __at(0xE50E);	// @ (0x1CA1 * 8 + 6)
#define                                 XOR6_bit            _BIT_ACCESS(CRCXORL,6)
// CRCXORL<XOR7>
extern volatile __bit                   XOR7                __at(0xE50F);	// @ (0x1CA1 * 8 + 7)
#define                                 XOR7_bit            _BIT_ACCESS(CRCXORL,7)
// CRCXORH<XOR8>
extern volatile __bit                   XOR8                __at(0xE510);	// @ (0x1CA2 * 8 + 0)
#define                                 XOR8_bit            _BIT_ACCESS(CRCXORH,0)
// CRCXORH<XOR9>
extern volatile __bit                   XOR9                __at(0xE511);	// @ (0x1CA2 * 8 + 1)
#define                                 XOR9_bit            _BIT_ACCESS(CRCXORH,1)
// STATUS<ZERO>
extern volatile __bit                   ZERO                __at(0x1A);	// @ (0x3 * 8 + 2)
#define                                 ZERO_bit            _BIT_ACCESS(STATUS,2)
// SSP1STAT<nA>
extern volatile __bit                   nA                  __at(0x3C7D);	// @ (0x78F * 8 + 5)
#define                                 nA_bit              _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<nA2>
extern volatile __bit                   nA2                 __at(0x3C7D);	// @ (0x78F * 8 + 5)
#define                                 nA2_bit             _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<nADDRESS>
extern volatile __bit                   nADDRESS            __at(0x3C7D);	// @ (0x78F * 8 + 5)
#define                                 nADDRESS_bit        _BIT_ACCESS(SSP1STAT,5)
// SSP1STAT<nADDRESS1>
extern volatile __bit                   nADDRESS1           __at(0x3C7D);	// @ (0x78F * 8 + 5)
#define                                 nADDRESS1_bit       _BIT_ACCESS(SSP1STAT,5)
// PCON0<nBOR>
extern volatile __bit                   nBOR                __at(0xC90);	// @ (0x192 * 8 + 0)
#define                                 nBOR_bit            _BIT_ACCESS(PCON0,0)
// PCON1<nMEMV>
extern volatile __bit                   nMEMV               __at(0xC99);	// @ (0x193 * 8 + 1)
#define                                 nMEMV_bit           _BIT_ACCESS(PCON1,1)
// STATUS<nPD>
extern volatile __bit                   nPD                 __at(0x1B);	// @ (0x3 * 8 + 3)
#define                                 nPD_bit             _BIT_ACCESS(STATUS,3)
// PCON0<nPOR>
extern volatile __bit                   nPOR                __at(0xC91);	// @ (0x192 * 8 + 1)
#define                                 nPOR_bit            _BIT_ACCESS(PCON0,1)
// PCON0<nRI>
extern volatile __bit                   nRI                 __at(0xC92);	// @ (0x192 * 8 + 2)
#define                                 nRI_bit             _BIT_ACCESS(PCON0,2)
// PCON0<nRMCLR>
extern volatile __bit                   nRMCLR              __at(0xC93);	// @ (0x192 * 8 + 3)
#define                                 nRMCLR_bit          _BIT_ACCESS(PCON0,3)
// PCON0<nRWDT>
extern volatile __bit                   nRWDT               __at(0xC94);	// @ (0x192 * 8 + 4)
#define                                 nRWDT_bit           _BIT_ACCESS(PCON0,4)
// T1CON<nSYNC>
extern volatile __bit                   nSYNC               __at(0x1872);	// @ (0x30E * 8 + 2)
#define                                 nSYNC_bit           _BIT_ACCESS(T1CON,2)
// T1CON<nT1SYNC>
extern volatile __bit                   nT1SYNC             __at(0x1872);	// @ (0x30E * 8 + 2)
#define                                 nT1SYNC_bit         _BIT_ACCESS(T1CON,2)
// STATUS<nTO>
extern volatile __bit                   nTO                 __at(0x1C);	// @ (0x3 * 8 + 4)
#define                                 nTO_bit             _BIT_ACCESS(STATUS,4)
// SSP1STAT<nW>
extern volatile __bit                   nW                  __at(0x3C7A);	// @ (0x78F * 8 + 2)
#define                                 nW_bit              _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<nW2>
extern volatile __bit                   nW2                 __at(0x3C7A);	// @ (0x78F * 8 + 2)
#define                                 nW2_bit             _BIT_ACCESS(SSP1STAT,2)
// PCON0<nWDTWV>
extern volatile __bit                   nWDTWV              __at(0xC95);	// @ (0x192 * 8 + 5)
#define                                 nWDTWV_bit          _BIT_ACCESS(PCON0,5)
// SSP1STAT<nWRITE>
extern volatile __bit                   nWRITE              __at(0x3C7A);	// @ (0x78F * 8 + 2)
#define                                 nWRITE_bit          _BIT_ACCESS(SSP1STAT,2)
// SSP1STAT<nWRITE1>
extern volatile __bit                   nWRITE1             __at(0x3C7A);	// @ (0x78F * 8 + 2)
#define                                 nWRITE1_bit         _BIT_ACCESS(SSP1STAT,2)

#endif // _PIC16F13124_H_
