// Generated 05/12/2024 GMT

/*
 * Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
 * All rights reserved.
 * 
 * This software is developed by Microchip Technology Inc. and its subsidiaries ("Microchip").
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 *     1. Redistributions of source code must retain the above copyright notice, this list of
 *        conditions and the following disclaimer.
 * 
 *     2. Redistributions in binary form must reproduce the above copyright notice, this list
 *        of conditions and the following disclaimer in the documentation and/or other
 *        materials provided with the distribution. Publication is not required when
 *        this file is used in an embedded application.
 * 
 *     3. Microchip's name may not be used to endorse or promote products derived from this
 *        software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _PIC18F05Q20_H_
#define _PIC18F05Q20_H_

/*
 * C Header file for the Microchip PIC Microcontroller
 * PIC18F05Q20
 */
#ifndef _XC_H_
#warning Header file pic18f05q20.h included directly. Use #include <xc.h> instead.
#endif

/*
 * Interrupt Source IRQ numbers
 */

// Software Interrupt
#define                                 IRQ_SW              0
// External Interrupt 0
#define                                 IRQ_INT0            1
// External Interrupt 1
#define                                 IRQ_INT1            2
// External Interrupt 2
#define                                 IRQ_INT2            3
// DMA1 Source Count Interrupt
#define                                 IRQ_DMA1SCNT        4
// DMA1 Destination Count Interrupt
#define                                 IRQ_DMA1DCNT        5
// DMA1 Overflow Interrupt
#define                                 IRQ_DMA1OR          6
// DMA1 Abort Interrupt
#define                                 IRQ_DMA1A           7
// DMA2 Source Count Interrupt
#define                                 IRQ_DMA2SCNT        8
// DMA2 Destination Count Interrupt
#define                                 IRQ_DMA2DCNT        9
// DMA2 Overflow Interrupt
#define                                 IRQ_DMA2OR          10
// DMA2 Abort Interrupt
#define                                 IRQ_DMA2A           11
// DMA3 Source Count Interrupt
#define                                 IRQ_DMA3SCNT        12
// DMA3 Destination Count Interrupt
#define                                 IRQ_DMA3DCNT        13
// DMA3 Overflow Interrupt
#define                                 IRQ_DMA3OR          14
// DMA3 Abort Interrupt
#define                                 IRQ_DMA3A           15
// DMA4 Source Count Interrupt
#define                                 IRQ_DMA4SCNT        16
// DMA4 Destination Count Interrupt
#define                                 IRQ_DMA4DCNT        17
// DMA4 Overflow Interrupt
#define                                 IRQ_DMA4OR          18
// DMA4 Abort Interrupt
#define                                 IRQ_DMA4A           19
// NVM Interrupt
#define                                 IRQ_NVM             20
// CRC Interrupt
#define                                 IRQ_CRC             21
// Scanner Interrupt
#define                                 IRQ_SCAN            22
// Active Clock Tuning Interrupt
#define                                 IRQ_ACT             23
// Clock Switch Interrupt
#define                                 IRQ_CSW             24
// Oscillator Failure Interrupt
#define                                 IRQ_OSF             25
// VDDIO2 Interrupt
#define                                 IRQ_VDDIO2          26
// Interrupt on Change
#define                                 IRQ_IOC             28
// Timer0 Interrupt
#define                                 IRQ_TMR0            29
// Timer1 Interrupt
#define                                 IRQ_TMR1            30
// Timer1 Gate Interrupt
#define                                 IRQ_TMR1G           31
// Timer2 Interrupt
#define                                 IRQ_TMR2            32
// Timer4 Interrupt
#define                                 IRQ_TMR4            33
// 16-Bit Universal Timer A Interrupt
#define                                 IRQ_TU16A           34
// 16-Bit Universal Timer B Interrupt
#define                                 IRQ_TU16B           35
// CCP1 Interrupt
#define                                 IRQ_CCP1            36
// CCP2 Interrupt
#define                                 IRQ_CCP2            37
// PWM1 Period Interrupt
#define                                 IRQ_PWM1P           38
// PWM1 Interrupt
#define                                 IRQ_PWM1            39
// PWM2 Period Interrupt
#define                                 IRQ_PWM2P           40
// PWM2 Interrupt
#define                                 IRQ_PWM2            41
// CWG1 Interrupt
#define                                 IRQ_CWG1            42
// CLC1 Interrupt
#define                                 IRQ_CLC1            43
// CLC2 Interrupt
#define                                 IRQ_CLC2            44
// CLC3 Interrupt
#define                                 IRQ_CLC3            45
// CLC4 Interrupt
#define                                 IRQ_CLC4            46
// Signal Routing Port Interrupt on Change
#define                                 IRQ_IOCSR           47
// UART1 Receive Interrupt
#define                                 IRQ_U1RX            48
// UART1 Transmit Interrupt
#define                                 IRQ_U1TX            49
// UART1 Interrupt
#define                                 IRQ_U1              50
// UART1 Error Interrupt
#define                                 IRQ_U1E             51
// UART2 Receive Interrupt
#define                                 IRQ_U2RX            52
// UART2 Transmit Interrupt
#define                                 IRQ_U2TX            53
// UART2 Interrupt
#define                                 IRQ_U2              54
// UART2 Error Interrupt
#define                                 IRQ_U2E             55
// SPI1 Receive Interrupt
#define                                 IRQ_SPI1RX          56
// SPI1 Transmit Interrupt
#define                                 IRQ_SPI1TX          57
// SPI1 Interrupt
#define                                 IRQ_SPI1            58
// I2C1 Receive Interrupt
#define                                 IRQ_I2C1RX          59
// I2C1 Transmit Interrupt
#define                                 IRQ_I2C1TX          60
// I2C1 Interrupt
#define                                 IRQ_I2C1            61
// I2C1 Error Interrupt
#define                                 IRQ_I2C1E           62
// I3C1 Receive Interrupt
#define                                 IRQ_I3C1RX          64
// I3C1 Transmit Interrupt
#define                                 IRQ_I3C1TX          65
// I3C1 General Interrupt
#define                                 IRQ_I3C1            66
// I3C1 Error Interrupt
#define                                 IRQ_I3C1E           67
// I3C1 Reset Interrupt
#define                                 IRQ_I3C1R           68
// HLVD Interrupt
#define                                 IRQ_HLVD            77
// ADC Interrupt
#define                                 IRQ_AD              78
// ADC Threshold Interrupt
#define                                 IRQ_ADT             79
/*
 * Register Definitions
 */

// Register: PRLOCK
#define PRLOCK PRLOCK
extern volatile unsigned char           PRLOCK              __at(0x038);
#ifndef _LIB_BUILD
asm("PRLOCK equ 038h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRLOCKED               :1;
    };
} PRLOCKbits_t;
extern volatile PRLOCKbits_t PRLOCKbits __at(0x038);
// bitfield macros
#define _PRLOCK_PRLOCKED_POSN                               0x0
#define _PRLOCK_PRLOCKED_POSITION                           0x0
#define _PRLOCK_PRLOCKED_SIZE                               0x1
#define _PRLOCK_PRLOCKED_LENGTH                             0x1
#define _PRLOCK_PRLOCKED_MASK                               0x1

// Register: MAINPR
#define MAINPR MAINPR
extern volatile unsigned char           MAINPR              __at(0x039);
#ifndef _LIB_BUILD
asm("MAINPR equ 039h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned MAINPR                 :3;
    };
    struct {
        unsigned MAINPR0                :1;
        unsigned MAINPR1                :1;
        unsigned MAINPR2                :1;
    };
} MAINPRbits_t;
extern volatile MAINPRbits_t MAINPRbits __at(0x039);
// bitfield macros
#define _MAINPR_PR_POSN                                     0x0
#define _MAINPR_PR_POSITION                                 0x0
#define _MAINPR_PR_SIZE                                     0x3
#define _MAINPR_PR_LENGTH                                   0x3
#define _MAINPR_PR_MASK                                     0x7
#define _MAINPR_PR0_POSN                                    0x0
#define _MAINPR_PR0_POSITION                                0x0
#define _MAINPR_PR0_SIZE                                    0x1
#define _MAINPR_PR0_LENGTH                                  0x1
#define _MAINPR_PR0_MASK                                    0x1
#define _MAINPR_PR1_POSN                                    0x1
#define _MAINPR_PR1_POSITION                                0x1
#define _MAINPR_PR1_SIZE                                    0x1
#define _MAINPR_PR1_LENGTH                                  0x1
#define _MAINPR_PR1_MASK                                    0x2
#define _MAINPR_PR2_POSN                                    0x2
#define _MAINPR_PR2_POSITION                                0x2
#define _MAINPR_PR2_SIZE                                    0x1
#define _MAINPR_PR2_LENGTH                                  0x1
#define _MAINPR_PR2_MASK                                    0x4
#define _MAINPR_MAINPR_POSN                                 0x0
#define _MAINPR_MAINPR_POSITION                             0x0
#define _MAINPR_MAINPR_SIZE                                 0x3
#define _MAINPR_MAINPR_LENGTH                               0x3
#define _MAINPR_MAINPR_MASK                                 0x7
#define _MAINPR_MAINPR0_POSN                                0x0
#define _MAINPR_MAINPR0_POSITION                            0x0
#define _MAINPR_MAINPR0_SIZE                                0x1
#define _MAINPR_MAINPR0_LENGTH                              0x1
#define _MAINPR_MAINPR0_MASK                                0x1
#define _MAINPR_MAINPR1_POSN                                0x1
#define _MAINPR_MAINPR1_POSITION                            0x1
#define _MAINPR_MAINPR1_SIZE                                0x1
#define _MAINPR_MAINPR1_LENGTH                              0x1
#define _MAINPR_MAINPR1_MASK                                0x2
#define _MAINPR_MAINPR2_POSN                                0x2
#define _MAINPR_MAINPR2_POSITION                            0x2
#define _MAINPR_MAINPR2_SIZE                                0x1
#define _MAINPR_MAINPR2_LENGTH                              0x1
#define _MAINPR_MAINPR2_MASK                                0x4

// Register: ISRPR
#define ISRPR ISRPR
extern volatile unsigned char           ISRPR               __at(0x03A);
#ifndef _LIB_BUILD
asm("ISRPR equ 03Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned ISRPR                  :3;
    };
    struct {
        unsigned ISRPR0                 :1;
        unsigned ISRPR1                 :1;
        unsigned ISRPR2                 :1;
    };
} ISRPRbits_t;
extern volatile ISRPRbits_t ISRPRbits __at(0x03A);
// bitfield macros
#define _ISRPR_PR_POSN                                      0x0
#define _ISRPR_PR_POSITION                                  0x0
#define _ISRPR_PR_SIZE                                      0x3
#define _ISRPR_PR_LENGTH                                    0x3
#define _ISRPR_PR_MASK                                      0x7
#define _ISRPR_PR0_POSN                                     0x0
#define _ISRPR_PR0_POSITION                                 0x0
#define _ISRPR_PR0_SIZE                                     0x1
#define _ISRPR_PR0_LENGTH                                   0x1
#define _ISRPR_PR0_MASK                                     0x1
#define _ISRPR_PR1_POSN                                     0x1
#define _ISRPR_PR1_POSITION                                 0x1
#define _ISRPR_PR1_SIZE                                     0x1
#define _ISRPR_PR1_LENGTH                                   0x1
#define _ISRPR_PR1_MASK                                     0x2
#define _ISRPR_PR2_POSN                                     0x2
#define _ISRPR_PR2_POSITION                                 0x2
#define _ISRPR_PR2_SIZE                                     0x1
#define _ISRPR_PR2_LENGTH                                   0x1
#define _ISRPR_PR2_MASK                                     0x4
#define _ISRPR_ISRPR_POSN                                   0x0
#define _ISRPR_ISRPR_POSITION                               0x0
#define _ISRPR_ISRPR_SIZE                                   0x3
#define _ISRPR_ISRPR_LENGTH                                 0x3
#define _ISRPR_ISRPR_MASK                                   0x7
#define _ISRPR_ISRPR0_POSN                                  0x0
#define _ISRPR_ISRPR0_POSITION                              0x0
#define _ISRPR_ISRPR0_SIZE                                  0x1
#define _ISRPR_ISRPR0_LENGTH                                0x1
#define _ISRPR_ISRPR0_MASK                                  0x1
#define _ISRPR_ISRPR1_POSN                                  0x1
#define _ISRPR_ISRPR1_POSITION                              0x1
#define _ISRPR_ISRPR1_SIZE                                  0x1
#define _ISRPR_ISRPR1_LENGTH                                0x1
#define _ISRPR_ISRPR1_MASK                                  0x2
#define _ISRPR_ISRPR2_POSN                                  0x2
#define _ISRPR_ISRPR2_POSITION                              0x2
#define _ISRPR_ISRPR2_SIZE                                  0x1
#define _ISRPR_ISRPR2_LENGTH                                0x1
#define _ISRPR_ISRPR2_MASK                                  0x4

// Register: DMA1PR
#define DMA1PR DMA1PR
extern volatile unsigned char           DMA1PR              __at(0x03B);
#ifndef _LIB_BUILD
asm("DMA1PR equ 03Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned DMA1PR                 :3;
    };
    struct {
        unsigned DMA1PR0                :1;
        unsigned DMA1PR1                :1;
        unsigned DMA1PR2                :1;
    };
} DMA1PRbits_t;
extern volatile DMA1PRbits_t DMA1PRbits __at(0x03B);
// bitfield macros
#define _DMA1PR_PR_POSN                                     0x0
#define _DMA1PR_PR_POSITION                                 0x0
#define _DMA1PR_PR_SIZE                                     0x3
#define _DMA1PR_PR_LENGTH                                   0x3
#define _DMA1PR_PR_MASK                                     0x7
#define _DMA1PR_PR0_POSN                                    0x0
#define _DMA1PR_PR0_POSITION                                0x0
#define _DMA1PR_PR0_SIZE                                    0x1
#define _DMA1PR_PR0_LENGTH                                  0x1
#define _DMA1PR_PR0_MASK                                    0x1
#define _DMA1PR_PR1_POSN                                    0x1
#define _DMA1PR_PR1_POSITION                                0x1
#define _DMA1PR_PR1_SIZE                                    0x1
#define _DMA1PR_PR1_LENGTH                                  0x1
#define _DMA1PR_PR1_MASK                                    0x2
#define _DMA1PR_PR2_POSN                                    0x2
#define _DMA1PR_PR2_POSITION                                0x2
#define _DMA1PR_PR2_SIZE                                    0x1
#define _DMA1PR_PR2_LENGTH                                  0x1
#define _DMA1PR_PR2_MASK                                    0x4
#define _DMA1PR_DMA1PR_POSN                                 0x0
#define _DMA1PR_DMA1PR_POSITION                             0x0
#define _DMA1PR_DMA1PR_SIZE                                 0x3
#define _DMA1PR_DMA1PR_LENGTH                               0x3
#define _DMA1PR_DMA1PR_MASK                                 0x7
#define _DMA1PR_DMA1PR0_POSN                                0x0
#define _DMA1PR_DMA1PR0_POSITION                            0x0
#define _DMA1PR_DMA1PR0_SIZE                                0x1
#define _DMA1PR_DMA1PR0_LENGTH                              0x1
#define _DMA1PR_DMA1PR0_MASK                                0x1
#define _DMA1PR_DMA1PR1_POSN                                0x1
#define _DMA1PR_DMA1PR1_POSITION                            0x1
#define _DMA1PR_DMA1PR1_SIZE                                0x1
#define _DMA1PR_DMA1PR1_LENGTH                              0x1
#define _DMA1PR_DMA1PR1_MASK                                0x2
#define _DMA1PR_DMA1PR2_POSN                                0x2
#define _DMA1PR_DMA1PR2_POSITION                            0x2
#define _DMA1PR_DMA1PR2_SIZE                                0x1
#define _DMA1PR_DMA1PR2_LENGTH                              0x1
#define _DMA1PR_DMA1PR2_MASK                                0x4

// Register: DMA2PR
#define DMA2PR DMA2PR
extern volatile unsigned char           DMA2PR              __at(0x03C);
#ifndef _LIB_BUILD
asm("DMA2PR equ 03Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned DMA2PR                 :3;
    };
    struct {
        unsigned DMA2PR0                :1;
        unsigned DMA2PR1                :1;
        unsigned DMA2PR2                :1;
    };
} DMA2PRbits_t;
extern volatile DMA2PRbits_t DMA2PRbits __at(0x03C);
// bitfield macros
#define _DMA2PR_PR_POSN                                     0x0
#define _DMA2PR_PR_POSITION                                 0x0
#define _DMA2PR_PR_SIZE                                     0x3
#define _DMA2PR_PR_LENGTH                                   0x3
#define _DMA2PR_PR_MASK                                     0x7
#define _DMA2PR_PR0_POSN                                    0x0
#define _DMA2PR_PR0_POSITION                                0x0
#define _DMA2PR_PR0_SIZE                                    0x1
#define _DMA2PR_PR0_LENGTH                                  0x1
#define _DMA2PR_PR0_MASK                                    0x1
#define _DMA2PR_PR1_POSN                                    0x1
#define _DMA2PR_PR1_POSITION                                0x1
#define _DMA2PR_PR1_SIZE                                    0x1
#define _DMA2PR_PR1_LENGTH                                  0x1
#define _DMA2PR_PR1_MASK                                    0x2
#define _DMA2PR_PR2_POSN                                    0x2
#define _DMA2PR_PR2_POSITION                                0x2
#define _DMA2PR_PR2_SIZE                                    0x1
#define _DMA2PR_PR2_LENGTH                                  0x1
#define _DMA2PR_PR2_MASK                                    0x4
#define _DMA2PR_DMA2PR_POSN                                 0x0
#define _DMA2PR_DMA2PR_POSITION                             0x0
#define _DMA2PR_DMA2PR_SIZE                                 0x3
#define _DMA2PR_DMA2PR_LENGTH                               0x3
#define _DMA2PR_DMA2PR_MASK                                 0x7
#define _DMA2PR_DMA2PR0_POSN                                0x0
#define _DMA2PR_DMA2PR0_POSITION                            0x0
#define _DMA2PR_DMA2PR0_SIZE                                0x1
#define _DMA2PR_DMA2PR0_LENGTH                              0x1
#define _DMA2PR_DMA2PR0_MASK                                0x1
#define _DMA2PR_DMA2PR1_POSN                                0x1
#define _DMA2PR_DMA2PR1_POSITION                            0x1
#define _DMA2PR_DMA2PR1_SIZE                                0x1
#define _DMA2PR_DMA2PR1_LENGTH                              0x1
#define _DMA2PR_DMA2PR1_MASK                                0x2
#define _DMA2PR_DMA2PR2_POSN                                0x2
#define _DMA2PR_DMA2PR2_POSITION                            0x2
#define _DMA2PR_DMA2PR2_SIZE                                0x1
#define _DMA2PR_DMA2PR2_LENGTH                              0x1
#define _DMA2PR_DMA2PR2_MASK                                0x4

// Register: DMA3PR
#define DMA3PR DMA3PR
extern volatile unsigned char           DMA3PR              __at(0x03D);
#ifndef _LIB_BUILD
asm("DMA3PR equ 03Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned DMA3PR                 :3;
    };
    struct {
        unsigned DMA3PR0                :1;
        unsigned DMA3PR1                :1;
        unsigned DMA3PR2                :1;
    };
} DMA3PRbits_t;
extern volatile DMA3PRbits_t DMA3PRbits __at(0x03D);
// bitfield macros
#define _DMA3PR_PR_POSN                                     0x0
#define _DMA3PR_PR_POSITION                                 0x0
#define _DMA3PR_PR_SIZE                                     0x3
#define _DMA3PR_PR_LENGTH                                   0x3
#define _DMA3PR_PR_MASK                                     0x7
#define _DMA3PR_PR0_POSN                                    0x0
#define _DMA3PR_PR0_POSITION                                0x0
#define _DMA3PR_PR0_SIZE                                    0x1
#define _DMA3PR_PR0_LENGTH                                  0x1
#define _DMA3PR_PR0_MASK                                    0x1
#define _DMA3PR_PR1_POSN                                    0x1
#define _DMA3PR_PR1_POSITION                                0x1
#define _DMA3PR_PR1_SIZE                                    0x1
#define _DMA3PR_PR1_LENGTH                                  0x1
#define _DMA3PR_PR1_MASK                                    0x2
#define _DMA3PR_PR2_POSN                                    0x2
#define _DMA3PR_PR2_POSITION                                0x2
#define _DMA3PR_PR2_SIZE                                    0x1
#define _DMA3PR_PR2_LENGTH                                  0x1
#define _DMA3PR_PR2_MASK                                    0x4
#define _DMA3PR_DMA3PR_POSN                                 0x0
#define _DMA3PR_DMA3PR_POSITION                             0x0
#define _DMA3PR_DMA3PR_SIZE                                 0x3
#define _DMA3PR_DMA3PR_LENGTH                               0x3
#define _DMA3PR_DMA3PR_MASK                                 0x7
#define _DMA3PR_DMA3PR0_POSN                                0x0
#define _DMA3PR_DMA3PR0_POSITION                            0x0
#define _DMA3PR_DMA3PR0_SIZE                                0x1
#define _DMA3PR_DMA3PR0_LENGTH                              0x1
#define _DMA3PR_DMA3PR0_MASK                                0x1
#define _DMA3PR_DMA3PR1_POSN                                0x1
#define _DMA3PR_DMA3PR1_POSITION                            0x1
#define _DMA3PR_DMA3PR1_SIZE                                0x1
#define _DMA3PR_DMA3PR1_LENGTH                              0x1
#define _DMA3PR_DMA3PR1_MASK                                0x2
#define _DMA3PR_DMA3PR2_POSN                                0x2
#define _DMA3PR_DMA3PR2_POSITION                            0x2
#define _DMA3PR_DMA3PR2_SIZE                                0x1
#define _DMA3PR_DMA3PR2_LENGTH                              0x1
#define _DMA3PR_DMA3PR2_MASK                                0x4

// Register: DMA4PR
#define DMA4PR DMA4PR
extern volatile unsigned char           DMA4PR              __at(0x03E);
#ifndef _LIB_BUILD
asm("DMA4PR equ 03Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned DMA4PR                 :3;
    };
    struct {
        unsigned DMA4PR0                :1;
        unsigned DMA4PR1                :1;
        unsigned DMA4PR2                :1;
    };
} DMA4PRbits_t;
extern volatile DMA4PRbits_t DMA4PRbits __at(0x03E);
// bitfield macros
#define _DMA4PR_PR_POSN                                     0x0
#define _DMA4PR_PR_POSITION                                 0x0
#define _DMA4PR_PR_SIZE                                     0x3
#define _DMA4PR_PR_LENGTH                                   0x3
#define _DMA4PR_PR_MASK                                     0x7
#define _DMA4PR_PR0_POSN                                    0x0
#define _DMA4PR_PR0_POSITION                                0x0
#define _DMA4PR_PR0_SIZE                                    0x1
#define _DMA4PR_PR0_LENGTH                                  0x1
#define _DMA4PR_PR0_MASK                                    0x1
#define _DMA4PR_PR1_POSN                                    0x1
#define _DMA4PR_PR1_POSITION                                0x1
#define _DMA4PR_PR1_SIZE                                    0x1
#define _DMA4PR_PR1_LENGTH                                  0x1
#define _DMA4PR_PR1_MASK                                    0x2
#define _DMA4PR_PR2_POSN                                    0x2
#define _DMA4PR_PR2_POSITION                                0x2
#define _DMA4PR_PR2_SIZE                                    0x1
#define _DMA4PR_PR2_LENGTH                                  0x1
#define _DMA4PR_PR2_MASK                                    0x4
#define _DMA4PR_DMA4PR_POSN                                 0x0
#define _DMA4PR_DMA4PR_POSITION                             0x0
#define _DMA4PR_DMA4PR_SIZE                                 0x3
#define _DMA4PR_DMA4PR_LENGTH                               0x3
#define _DMA4PR_DMA4PR_MASK                                 0x7
#define _DMA4PR_DMA4PR0_POSN                                0x0
#define _DMA4PR_DMA4PR0_POSITION                            0x0
#define _DMA4PR_DMA4PR0_SIZE                                0x1
#define _DMA4PR_DMA4PR0_LENGTH                              0x1
#define _DMA4PR_DMA4PR0_MASK                                0x1
#define _DMA4PR_DMA4PR1_POSN                                0x1
#define _DMA4PR_DMA4PR1_POSITION                            0x1
#define _DMA4PR_DMA4PR1_SIZE                                0x1
#define _DMA4PR_DMA4PR1_LENGTH                              0x1
#define _DMA4PR_DMA4PR1_MASK                                0x2
#define _DMA4PR_DMA4PR2_POSN                                0x2
#define _DMA4PR_DMA4PR2_POSITION                            0x2
#define _DMA4PR_DMA4PR2_SIZE                                0x1
#define _DMA4PR_DMA4PR2_LENGTH                              0x1
#define _DMA4PR_DMA4PR2_MASK                                0x4

// Register: SCANPR
#define SCANPR SCANPR
extern volatile unsigned char           SCANPR              __at(0x03F);
#ifndef _LIB_BUILD
asm("SCANPR equ 03Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR                     :3;
    };
    struct {
        unsigned PR0                    :1;
        unsigned PR1                    :1;
        unsigned PR2                    :1;
    };
    struct {
        unsigned SCANPR                 :3;
    };
    struct {
        unsigned SCANPR0                :1;
        unsigned SCANPR1                :1;
        unsigned SCANPR2                :1;
    };
} SCANPRbits_t;
extern volatile SCANPRbits_t SCANPRbits __at(0x03F);
// bitfield macros
#define _SCANPR_PR_POSN                                     0x0
#define _SCANPR_PR_POSITION                                 0x0
#define _SCANPR_PR_SIZE                                     0x3
#define _SCANPR_PR_LENGTH                                   0x3
#define _SCANPR_PR_MASK                                     0x7
#define _SCANPR_PR0_POSN                                    0x0
#define _SCANPR_PR0_POSITION                                0x0
#define _SCANPR_PR0_SIZE                                    0x1
#define _SCANPR_PR0_LENGTH                                  0x1
#define _SCANPR_PR0_MASK                                    0x1
#define _SCANPR_PR1_POSN                                    0x1
#define _SCANPR_PR1_POSITION                                0x1
#define _SCANPR_PR1_SIZE                                    0x1
#define _SCANPR_PR1_LENGTH                                  0x1
#define _SCANPR_PR1_MASK                                    0x2
#define _SCANPR_PR2_POSN                                    0x2
#define _SCANPR_PR2_POSITION                                0x2
#define _SCANPR_PR2_SIZE                                    0x1
#define _SCANPR_PR2_LENGTH                                  0x1
#define _SCANPR_PR2_MASK                                    0x4
#define _SCANPR_SCANPR_POSN                                 0x0
#define _SCANPR_SCANPR_POSITION                             0x0
#define _SCANPR_SCANPR_SIZE                                 0x3
#define _SCANPR_SCANPR_LENGTH                               0x3
#define _SCANPR_SCANPR_MASK                                 0x7
#define _SCANPR_SCANPR0_POSN                                0x0
#define _SCANPR_SCANPR0_POSITION                            0x0
#define _SCANPR_SCANPR0_SIZE                                0x1
#define _SCANPR_SCANPR0_LENGTH                              0x1
#define _SCANPR_SCANPR0_MASK                                0x1
#define _SCANPR_SCANPR1_POSN                                0x1
#define _SCANPR_SCANPR1_POSITION                            0x1
#define _SCANPR_SCANPR1_SIZE                                0x1
#define _SCANPR_SCANPR1_LENGTH                              0x1
#define _SCANPR_SCANPR1_MASK                                0x2
#define _SCANPR_SCANPR2_POSN                                0x2
#define _SCANPR_SCANPR2_POSITION                            0x2
#define _SCANPR_SCANPR2_SIZE                                0x1
#define _SCANPR_SCANPR2_LENGTH                              0x1
#define _SCANPR_SCANPR2_MASK                                0x4

// Register: DMASELECT
#define DMASELECT DMASELECT
extern volatile unsigned char           DMASELECT           __at(0x040);
#ifndef _LIB_BUILD
asm("DMASELECT equ 040h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLCT                   :8;
    };
    struct {
        unsigned SLCT0                  :1;
        unsigned SLCT1                  :1;
        unsigned SLCT2                  :1;
    };
} DMASELECTbits_t;
extern volatile DMASELECTbits_t DMASELECTbits __at(0x040);
// bitfield macros
#define _DMASELECT_SLCT_POSN                                0x0
#define _DMASELECT_SLCT_POSITION                            0x0
#define _DMASELECT_SLCT_SIZE                                0x8
#define _DMASELECT_SLCT_LENGTH                              0x8
#define _DMASELECT_SLCT_MASK                                0xFF
#define _DMASELECT_SLCT0_POSN                               0x0
#define _DMASELECT_SLCT0_POSITION                           0x0
#define _DMASELECT_SLCT0_SIZE                               0x1
#define _DMASELECT_SLCT0_LENGTH                             0x1
#define _DMASELECT_SLCT0_MASK                               0x1
#define _DMASELECT_SLCT1_POSN                               0x1
#define _DMASELECT_SLCT1_POSITION                           0x1
#define _DMASELECT_SLCT1_SIZE                               0x1
#define _DMASELECT_SLCT1_LENGTH                             0x1
#define _DMASELECT_SLCT1_MASK                               0x2
#define _DMASELECT_SLCT2_POSN                               0x2
#define _DMASELECT_SLCT2_POSITION                           0x2
#define _DMASELECT_SLCT2_SIZE                               0x1
#define _DMASELECT_SLCT2_LENGTH                             0x1
#define _DMASELECT_SLCT2_MASK                               0x4

// Register: DMAnBUF
#define DMAnBUF DMAnBUF
extern volatile unsigned char           DMAnBUF             __at(0x041);
#ifndef _LIB_BUILD
asm("DMAnBUF equ 041h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BUF                    :8;
    };
    struct {
        unsigned BUF0                   :1;
        unsigned BUF1                   :1;
        unsigned BUF2                   :1;
        unsigned BUF3                   :1;
        unsigned BUF4                   :1;
        unsigned BUF5                   :1;
        unsigned BUF6                   :1;
        unsigned BUF7                   :1;
    };
} DMAnBUFbits_t;
extern volatile DMAnBUFbits_t DMAnBUFbits __at(0x041);
// bitfield macros
#define _DMAnBUF_BUF_POSN                                   0x0
#define _DMAnBUF_BUF_POSITION                               0x0
#define _DMAnBUF_BUF_SIZE                                   0x8
#define _DMAnBUF_BUF_LENGTH                                 0x8
#define _DMAnBUF_BUF_MASK                                   0xFF
#define _DMAnBUF_BUF0_POSN                                  0x0
#define _DMAnBUF_BUF0_POSITION                              0x0
#define _DMAnBUF_BUF0_SIZE                                  0x1
#define _DMAnBUF_BUF0_LENGTH                                0x1
#define _DMAnBUF_BUF0_MASK                                  0x1
#define _DMAnBUF_BUF1_POSN                                  0x1
#define _DMAnBUF_BUF1_POSITION                              0x1
#define _DMAnBUF_BUF1_SIZE                                  0x1
#define _DMAnBUF_BUF1_LENGTH                                0x1
#define _DMAnBUF_BUF1_MASK                                  0x2
#define _DMAnBUF_BUF2_POSN                                  0x2
#define _DMAnBUF_BUF2_POSITION                              0x2
#define _DMAnBUF_BUF2_SIZE                                  0x1
#define _DMAnBUF_BUF2_LENGTH                                0x1
#define _DMAnBUF_BUF2_MASK                                  0x4
#define _DMAnBUF_BUF3_POSN                                  0x3
#define _DMAnBUF_BUF3_POSITION                              0x3
#define _DMAnBUF_BUF3_SIZE                                  0x1
#define _DMAnBUF_BUF3_LENGTH                                0x1
#define _DMAnBUF_BUF3_MASK                                  0x8
#define _DMAnBUF_BUF4_POSN                                  0x4
#define _DMAnBUF_BUF4_POSITION                              0x4
#define _DMAnBUF_BUF4_SIZE                                  0x1
#define _DMAnBUF_BUF4_LENGTH                                0x1
#define _DMAnBUF_BUF4_MASK                                  0x10
#define _DMAnBUF_BUF5_POSN                                  0x5
#define _DMAnBUF_BUF5_POSITION                              0x5
#define _DMAnBUF_BUF5_SIZE                                  0x1
#define _DMAnBUF_BUF5_LENGTH                                0x1
#define _DMAnBUF_BUF5_MASK                                  0x20
#define _DMAnBUF_BUF6_POSN                                  0x6
#define _DMAnBUF_BUF6_POSITION                              0x6
#define _DMAnBUF_BUF6_SIZE                                  0x1
#define _DMAnBUF_BUF6_LENGTH                                0x1
#define _DMAnBUF_BUF6_MASK                                  0x40
#define _DMAnBUF_BUF7_POSN                                  0x7
#define _DMAnBUF_BUF7_POSITION                              0x7
#define _DMAnBUF_BUF7_SIZE                                  0x1
#define _DMAnBUF_BUF7_LENGTH                                0x1
#define _DMAnBUF_BUF7_MASK                                  0x80

// Register: DMAnDCNT
#define DMAnDCNT DMAnDCNT
extern volatile unsigned short          DMAnDCNT            __at(0x042);
#ifndef _LIB_BUILD
asm("DMAnDCNT equ 042h");
#endif

// Register: DMAnDCNTL
#define DMAnDCNTL DMAnDCNTL
extern volatile unsigned char           DMAnDCNTL           __at(0x042);
#ifndef _LIB_BUILD
asm("DMAnDCNTL equ 042h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DCNT                   :8;
    };
    struct {
        unsigned DCNT0                  :1;
        unsigned DCNT1                  :1;
        unsigned DCNT2                  :1;
        unsigned DCNT3                  :1;
        unsigned DCNT4                  :1;
        unsigned DCNT5                  :1;
        unsigned DCNT6                  :1;
        unsigned DCNT7                  :1;
    };
} DMAnDCNTLbits_t;
extern volatile DMAnDCNTLbits_t DMAnDCNTLbits __at(0x042);
// bitfield macros
#define _DMAnDCNTL_DCNT_POSN                                0x0
#define _DMAnDCNTL_DCNT_POSITION                            0x0
#define _DMAnDCNTL_DCNT_SIZE                                0x8
#define _DMAnDCNTL_DCNT_LENGTH                              0x8
#define _DMAnDCNTL_DCNT_MASK                                0xFF
#define _DMAnDCNTL_DCNT0_POSN                               0x0
#define _DMAnDCNTL_DCNT0_POSITION                           0x0
#define _DMAnDCNTL_DCNT0_SIZE                               0x1
#define _DMAnDCNTL_DCNT0_LENGTH                             0x1
#define _DMAnDCNTL_DCNT0_MASK                               0x1
#define _DMAnDCNTL_DCNT1_POSN                               0x1
#define _DMAnDCNTL_DCNT1_POSITION                           0x1
#define _DMAnDCNTL_DCNT1_SIZE                               0x1
#define _DMAnDCNTL_DCNT1_LENGTH                             0x1
#define _DMAnDCNTL_DCNT1_MASK                               0x2
#define _DMAnDCNTL_DCNT2_POSN                               0x2
#define _DMAnDCNTL_DCNT2_POSITION                           0x2
#define _DMAnDCNTL_DCNT2_SIZE                               0x1
#define _DMAnDCNTL_DCNT2_LENGTH                             0x1
#define _DMAnDCNTL_DCNT2_MASK                               0x4
#define _DMAnDCNTL_DCNT3_POSN                               0x3
#define _DMAnDCNTL_DCNT3_POSITION                           0x3
#define _DMAnDCNTL_DCNT3_SIZE                               0x1
#define _DMAnDCNTL_DCNT3_LENGTH                             0x1
#define _DMAnDCNTL_DCNT3_MASK                               0x8
#define _DMAnDCNTL_DCNT4_POSN                               0x4
#define _DMAnDCNTL_DCNT4_POSITION                           0x4
#define _DMAnDCNTL_DCNT4_SIZE                               0x1
#define _DMAnDCNTL_DCNT4_LENGTH                             0x1
#define _DMAnDCNTL_DCNT4_MASK                               0x10
#define _DMAnDCNTL_DCNT5_POSN                               0x5
#define _DMAnDCNTL_DCNT5_POSITION                           0x5
#define _DMAnDCNTL_DCNT5_SIZE                               0x1
#define _DMAnDCNTL_DCNT5_LENGTH                             0x1
#define _DMAnDCNTL_DCNT5_MASK                               0x20
#define _DMAnDCNTL_DCNT6_POSN                               0x6
#define _DMAnDCNTL_DCNT6_POSITION                           0x6
#define _DMAnDCNTL_DCNT6_SIZE                               0x1
#define _DMAnDCNTL_DCNT6_LENGTH                             0x1
#define _DMAnDCNTL_DCNT6_MASK                               0x40
#define _DMAnDCNTL_DCNT7_POSN                               0x7
#define _DMAnDCNTL_DCNT7_POSITION                           0x7
#define _DMAnDCNTL_DCNT7_SIZE                               0x1
#define _DMAnDCNTL_DCNT7_LENGTH                             0x1
#define _DMAnDCNTL_DCNT7_MASK                               0x80

// Register: DMAnDCNTH
#define DMAnDCNTH DMAnDCNTH
extern volatile unsigned char           DMAnDCNTH           __at(0x043);
#ifndef _LIB_BUILD
asm("DMAnDCNTH equ 043h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DCNT                   :8;
    };
    struct {
        unsigned DCNT8                  :1;
        unsigned DCNT9                  :1;
        unsigned DCNT10                 :1;
        unsigned DCNT11                 :1;
    };
} DMAnDCNTHbits_t;
extern volatile DMAnDCNTHbits_t DMAnDCNTHbits __at(0x043);
// bitfield macros
#define _DMAnDCNTH_DCNT_POSN                                0x0
#define _DMAnDCNTH_DCNT_POSITION                            0x0
#define _DMAnDCNTH_DCNT_SIZE                                0x8
#define _DMAnDCNTH_DCNT_LENGTH                              0x8
#define _DMAnDCNTH_DCNT_MASK                                0xFF
#define _DMAnDCNTH_DCNT8_POSN                               0x0
#define _DMAnDCNTH_DCNT8_POSITION                           0x0
#define _DMAnDCNTH_DCNT8_SIZE                               0x1
#define _DMAnDCNTH_DCNT8_LENGTH                             0x1
#define _DMAnDCNTH_DCNT8_MASK                               0x1
#define _DMAnDCNTH_DCNT9_POSN                               0x1
#define _DMAnDCNTH_DCNT9_POSITION                           0x1
#define _DMAnDCNTH_DCNT9_SIZE                               0x1
#define _DMAnDCNTH_DCNT9_LENGTH                             0x1
#define _DMAnDCNTH_DCNT9_MASK                               0x2
#define _DMAnDCNTH_DCNT10_POSN                              0x2
#define _DMAnDCNTH_DCNT10_POSITION                          0x2
#define _DMAnDCNTH_DCNT10_SIZE                              0x1
#define _DMAnDCNTH_DCNT10_LENGTH                            0x1
#define _DMAnDCNTH_DCNT10_MASK                              0x4
#define _DMAnDCNTH_DCNT11_POSN                              0x3
#define _DMAnDCNTH_DCNT11_POSITION                          0x3
#define _DMAnDCNTH_DCNT11_SIZE                              0x1
#define _DMAnDCNTH_DCNT11_LENGTH                            0x1
#define _DMAnDCNTH_DCNT11_MASK                              0x8

// Register: DMAnDPTR
#define DMAnDPTR DMAnDPTR
extern volatile unsigned short          DMAnDPTR            __at(0x044);
#ifndef _LIB_BUILD
asm("DMAnDPTR equ 044h");
#endif

// Register: DMAnDPTRL
#define DMAnDPTRL DMAnDPTRL
extern volatile unsigned char           DMAnDPTRL           __at(0x044);
#ifndef _LIB_BUILD
asm("DMAnDPTRL equ 044h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DPTR                   :8;
    };
    struct {
        unsigned DPTR0                  :1;
        unsigned DPTR1                  :1;
        unsigned DPTR2                  :1;
        unsigned DPTR3                  :1;
        unsigned DPTR4                  :1;
        unsigned DPTR5                  :1;
        unsigned DPTR6                  :1;
        unsigned DPTR7                  :1;
    };
} DMAnDPTRLbits_t;
extern volatile DMAnDPTRLbits_t DMAnDPTRLbits __at(0x044);
// bitfield macros
#define _DMAnDPTRL_DPTR_POSN                                0x0
#define _DMAnDPTRL_DPTR_POSITION                            0x0
#define _DMAnDPTRL_DPTR_SIZE                                0x8
#define _DMAnDPTRL_DPTR_LENGTH                              0x8
#define _DMAnDPTRL_DPTR_MASK                                0xFF
#define _DMAnDPTRL_DPTR0_POSN                               0x0
#define _DMAnDPTRL_DPTR0_POSITION                           0x0
#define _DMAnDPTRL_DPTR0_SIZE                               0x1
#define _DMAnDPTRL_DPTR0_LENGTH                             0x1
#define _DMAnDPTRL_DPTR0_MASK                               0x1
#define _DMAnDPTRL_DPTR1_POSN                               0x1
#define _DMAnDPTRL_DPTR1_POSITION                           0x1
#define _DMAnDPTRL_DPTR1_SIZE                               0x1
#define _DMAnDPTRL_DPTR1_LENGTH                             0x1
#define _DMAnDPTRL_DPTR1_MASK                               0x2
#define _DMAnDPTRL_DPTR2_POSN                               0x2
#define _DMAnDPTRL_DPTR2_POSITION                           0x2
#define _DMAnDPTRL_DPTR2_SIZE                               0x1
#define _DMAnDPTRL_DPTR2_LENGTH                             0x1
#define _DMAnDPTRL_DPTR2_MASK                               0x4
#define _DMAnDPTRL_DPTR3_POSN                               0x3
#define _DMAnDPTRL_DPTR3_POSITION                           0x3
#define _DMAnDPTRL_DPTR3_SIZE                               0x1
#define _DMAnDPTRL_DPTR3_LENGTH                             0x1
#define _DMAnDPTRL_DPTR3_MASK                               0x8
#define _DMAnDPTRL_DPTR4_POSN                               0x4
#define _DMAnDPTRL_DPTR4_POSITION                           0x4
#define _DMAnDPTRL_DPTR4_SIZE                               0x1
#define _DMAnDPTRL_DPTR4_LENGTH                             0x1
#define _DMAnDPTRL_DPTR4_MASK                               0x10
#define _DMAnDPTRL_DPTR5_POSN                               0x5
#define _DMAnDPTRL_DPTR5_POSITION                           0x5
#define _DMAnDPTRL_DPTR5_SIZE                               0x1
#define _DMAnDPTRL_DPTR5_LENGTH                             0x1
#define _DMAnDPTRL_DPTR5_MASK                               0x20
#define _DMAnDPTRL_DPTR6_POSN                               0x6
#define _DMAnDPTRL_DPTR6_POSITION                           0x6
#define _DMAnDPTRL_DPTR6_SIZE                               0x1
#define _DMAnDPTRL_DPTR6_LENGTH                             0x1
#define _DMAnDPTRL_DPTR6_MASK                               0x40
#define _DMAnDPTRL_DPTR7_POSN                               0x7
#define _DMAnDPTRL_DPTR7_POSITION                           0x7
#define _DMAnDPTRL_DPTR7_SIZE                               0x1
#define _DMAnDPTRL_DPTR7_LENGTH                             0x1
#define _DMAnDPTRL_DPTR7_MASK                               0x80

// Register: DMAnDPTRH
#define DMAnDPTRH DMAnDPTRH
extern volatile unsigned char           DMAnDPTRH           __at(0x045);
#ifndef _LIB_BUILD
asm("DMAnDPTRH equ 045h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DPTR                   :8;
    };
    struct {
        unsigned DPTR8                  :1;
        unsigned DPTR9                  :1;
        unsigned DPTR10                 :1;
        unsigned DPTR11                 :1;
        unsigned DPTR12                 :1;
        unsigned DPTR13                 :1;
        unsigned DPTR14                 :1;
        unsigned DPTR15                 :1;
    };
} DMAnDPTRHbits_t;
extern volatile DMAnDPTRHbits_t DMAnDPTRHbits __at(0x045);
// bitfield macros
#define _DMAnDPTRH_DPTR_POSN                                0x0
#define _DMAnDPTRH_DPTR_POSITION                            0x0
#define _DMAnDPTRH_DPTR_SIZE                                0x8
#define _DMAnDPTRH_DPTR_LENGTH                              0x8
#define _DMAnDPTRH_DPTR_MASK                                0xFF
#define _DMAnDPTRH_DPTR8_POSN                               0x0
#define _DMAnDPTRH_DPTR8_POSITION                           0x0
#define _DMAnDPTRH_DPTR8_SIZE                               0x1
#define _DMAnDPTRH_DPTR8_LENGTH                             0x1
#define _DMAnDPTRH_DPTR8_MASK                               0x1
#define _DMAnDPTRH_DPTR9_POSN                               0x1
#define _DMAnDPTRH_DPTR9_POSITION                           0x1
#define _DMAnDPTRH_DPTR9_SIZE                               0x1
#define _DMAnDPTRH_DPTR9_LENGTH                             0x1
#define _DMAnDPTRH_DPTR9_MASK                               0x2
#define _DMAnDPTRH_DPTR10_POSN                              0x2
#define _DMAnDPTRH_DPTR10_POSITION                          0x2
#define _DMAnDPTRH_DPTR10_SIZE                              0x1
#define _DMAnDPTRH_DPTR10_LENGTH                            0x1
#define _DMAnDPTRH_DPTR10_MASK                              0x4
#define _DMAnDPTRH_DPTR11_POSN                              0x3
#define _DMAnDPTRH_DPTR11_POSITION                          0x3
#define _DMAnDPTRH_DPTR11_SIZE                              0x1
#define _DMAnDPTRH_DPTR11_LENGTH                            0x1
#define _DMAnDPTRH_DPTR11_MASK                              0x8
#define _DMAnDPTRH_DPTR12_POSN                              0x4
#define _DMAnDPTRH_DPTR12_POSITION                          0x4
#define _DMAnDPTRH_DPTR12_SIZE                              0x1
#define _DMAnDPTRH_DPTR12_LENGTH                            0x1
#define _DMAnDPTRH_DPTR12_MASK                              0x10
#define _DMAnDPTRH_DPTR13_POSN                              0x5
#define _DMAnDPTRH_DPTR13_POSITION                          0x5
#define _DMAnDPTRH_DPTR13_SIZE                              0x1
#define _DMAnDPTRH_DPTR13_LENGTH                            0x1
#define _DMAnDPTRH_DPTR13_MASK                              0x20
#define _DMAnDPTRH_DPTR14_POSN                              0x6
#define _DMAnDPTRH_DPTR14_POSITION                          0x6
#define _DMAnDPTRH_DPTR14_SIZE                              0x1
#define _DMAnDPTRH_DPTR14_LENGTH                            0x1
#define _DMAnDPTRH_DPTR14_MASK                              0x40
#define _DMAnDPTRH_DPTR15_POSN                              0x7
#define _DMAnDPTRH_DPTR15_POSITION                          0x7
#define _DMAnDPTRH_DPTR15_SIZE                              0x1
#define _DMAnDPTRH_DPTR15_LENGTH                            0x1
#define _DMAnDPTRH_DPTR15_MASK                              0x80

// Register: DMAnDSZ
#define DMAnDSZ DMAnDSZ
extern volatile unsigned short          DMAnDSZ             __at(0x046);
#ifndef _LIB_BUILD
asm("DMAnDSZ equ 046h");
#endif

// Register: DMAnDSZL
#define DMAnDSZL DMAnDSZL
extern volatile unsigned char           DMAnDSZL            __at(0x046);
#ifndef _LIB_BUILD
asm("DMAnDSZL equ 046h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSZ                    :8;
    };
    struct {
        unsigned DSZ0                   :1;
        unsigned DSZ1                   :1;
        unsigned DSZ2                   :1;
        unsigned DSZ3                   :1;
        unsigned DSZ4                   :1;
        unsigned DSZ5                   :1;
        unsigned DSZ6                   :1;
        unsigned DSZ7                   :1;
    };
} DMAnDSZLbits_t;
extern volatile DMAnDSZLbits_t DMAnDSZLbits __at(0x046);
// bitfield macros
#define _DMAnDSZL_DSZ_POSN                                  0x0
#define _DMAnDSZL_DSZ_POSITION                              0x0
#define _DMAnDSZL_DSZ_SIZE                                  0x8
#define _DMAnDSZL_DSZ_LENGTH                                0x8
#define _DMAnDSZL_DSZ_MASK                                  0xFF
#define _DMAnDSZL_DSZ0_POSN                                 0x0
#define _DMAnDSZL_DSZ0_POSITION                             0x0
#define _DMAnDSZL_DSZ0_SIZE                                 0x1
#define _DMAnDSZL_DSZ0_LENGTH                               0x1
#define _DMAnDSZL_DSZ0_MASK                                 0x1
#define _DMAnDSZL_DSZ1_POSN                                 0x1
#define _DMAnDSZL_DSZ1_POSITION                             0x1
#define _DMAnDSZL_DSZ1_SIZE                                 0x1
#define _DMAnDSZL_DSZ1_LENGTH                               0x1
#define _DMAnDSZL_DSZ1_MASK                                 0x2
#define _DMAnDSZL_DSZ2_POSN                                 0x2
#define _DMAnDSZL_DSZ2_POSITION                             0x2
#define _DMAnDSZL_DSZ2_SIZE                                 0x1
#define _DMAnDSZL_DSZ2_LENGTH                               0x1
#define _DMAnDSZL_DSZ2_MASK                                 0x4
#define _DMAnDSZL_DSZ3_POSN                                 0x3
#define _DMAnDSZL_DSZ3_POSITION                             0x3
#define _DMAnDSZL_DSZ3_SIZE                                 0x1
#define _DMAnDSZL_DSZ3_LENGTH                               0x1
#define _DMAnDSZL_DSZ3_MASK                                 0x8
#define _DMAnDSZL_DSZ4_POSN                                 0x4
#define _DMAnDSZL_DSZ4_POSITION                             0x4
#define _DMAnDSZL_DSZ4_SIZE                                 0x1
#define _DMAnDSZL_DSZ4_LENGTH                               0x1
#define _DMAnDSZL_DSZ4_MASK                                 0x10
#define _DMAnDSZL_DSZ5_POSN                                 0x5
#define _DMAnDSZL_DSZ5_POSITION                             0x5
#define _DMAnDSZL_DSZ5_SIZE                                 0x1
#define _DMAnDSZL_DSZ5_LENGTH                               0x1
#define _DMAnDSZL_DSZ5_MASK                                 0x20
#define _DMAnDSZL_DSZ6_POSN                                 0x6
#define _DMAnDSZL_DSZ6_POSITION                             0x6
#define _DMAnDSZL_DSZ6_SIZE                                 0x1
#define _DMAnDSZL_DSZ6_LENGTH                               0x1
#define _DMAnDSZL_DSZ6_MASK                                 0x40
#define _DMAnDSZL_DSZ7_POSN                                 0x7
#define _DMAnDSZL_DSZ7_POSITION                             0x7
#define _DMAnDSZL_DSZ7_SIZE                                 0x1
#define _DMAnDSZL_DSZ7_LENGTH                               0x1
#define _DMAnDSZL_DSZ7_MASK                                 0x80

// Register: DMAnDSZH
#define DMAnDSZH DMAnDSZH
extern volatile unsigned char           DMAnDSZH            __at(0x047);
#ifndef _LIB_BUILD
asm("DMAnDSZH equ 047h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSZ                    :8;
    };
    struct {
        unsigned DSZ8                   :1;
        unsigned DSZ9                   :1;
        unsigned DSZ10                  :1;
        unsigned DSZ11                  :1;
    };
} DMAnDSZHbits_t;
extern volatile DMAnDSZHbits_t DMAnDSZHbits __at(0x047);
// bitfield macros
#define _DMAnDSZH_DSZ_POSN                                  0x0
#define _DMAnDSZH_DSZ_POSITION                              0x0
#define _DMAnDSZH_DSZ_SIZE                                  0x8
#define _DMAnDSZH_DSZ_LENGTH                                0x8
#define _DMAnDSZH_DSZ_MASK                                  0xFF
#define _DMAnDSZH_DSZ8_POSN                                 0x0
#define _DMAnDSZH_DSZ8_POSITION                             0x0
#define _DMAnDSZH_DSZ8_SIZE                                 0x1
#define _DMAnDSZH_DSZ8_LENGTH                               0x1
#define _DMAnDSZH_DSZ8_MASK                                 0x1
#define _DMAnDSZH_DSZ9_POSN                                 0x1
#define _DMAnDSZH_DSZ9_POSITION                             0x1
#define _DMAnDSZH_DSZ9_SIZE                                 0x1
#define _DMAnDSZH_DSZ9_LENGTH                               0x1
#define _DMAnDSZH_DSZ9_MASK                                 0x2
#define _DMAnDSZH_DSZ10_POSN                                0x2
#define _DMAnDSZH_DSZ10_POSITION                            0x2
#define _DMAnDSZH_DSZ10_SIZE                                0x1
#define _DMAnDSZH_DSZ10_LENGTH                              0x1
#define _DMAnDSZH_DSZ10_MASK                                0x4
#define _DMAnDSZH_DSZ11_POSN                                0x3
#define _DMAnDSZH_DSZ11_POSITION                            0x3
#define _DMAnDSZH_DSZ11_SIZE                                0x1
#define _DMAnDSZH_DSZ11_LENGTH                              0x1
#define _DMAnDSZH_DSZ11_MASK                                0x8

// Register: DMAnDSA
#define DMAnDSA DMAnDSA
extern volatile unsigned short          DMAnDSA             __at(0x048);
#ifndef _LIB_BUILD
asm("DMAnDSA equ 048h");
#endif

// Register: DMAnDSAL
#define DMAnDSAL DMAnDSAL
extern volatile unsigned char           DMAnDSAL            __at(0x048);
#ifndef _LIB_BUILD
asm("DMAnDSAL equ 048h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSA                    :8;
    };
    struct {
        unsigned DSA0                   :1;
        unsigned DSA1                   :1;
        unsigned DSA2                   :1;
        unsigned DSA3                   :1;
        unsigned DSA4                   :1;
        unsigned DSA5                   :1;
        unsigned DSA6                   :1;
        unsigned DSA7                   :1;
    };
} DMAnDSALbits_t;
extern volatile DMAnDSALbits_t DMAnDSALbits __at(0x048);
// bitfield macros
#define _DMAnDSAL_DSA_POSN                                  0x0
#define _DMAnDSAL_DSA_POSITION                              0x0
#define _DMAnDSAL_DSA_SIZE                                  0x8
#define _DMAnDSAL_DSA_LENGTH                                0x8
#define _DMAnDSAL_DSA_MASK                                  0xFF
#define _DMAnDSAL_DSA0_POSN                                 0x0
#define _DMAnDSAL_DSA0_POSITION                             0x0
#define _DMAnDSAL_DSA0_SIZE                                 0x1
#define _DMAnDSAL_DSA0_LENGTH                               0x1
#define _DMAnDSAL_DSA0_MASK                                 0x1
#define _DMAnDSAL_DSA1_POSN                                 0x1
#define _DMAnDSAL_DSA1_POSITION                             0x1
#define _DMAnDSAL_DSA1_SIZE                                 0x1
#define _DMAnDSAL_DSA1_LENGTH                               0x1
#define _DMAnDSAL_DSA1_MASK                                 0x2
#define _DMAnDSAL_DSA2_POSN                                 0x2
#define _DMAnDSAL_DSA2_POSITION                             0x2
#define _DMAnDSAL_DSA2_SIZE                                 0x1
#define _DMAnDSAL_DSA2_LENGTH                               0x1
#define _DMAnDSAL_DSA2_MASK                                 0x4
#define _DMAnDSAL_DSA3_POSN                                 0x3
#define _DMAnDSAL_DSA3_POSITION                             0x3
#define _DMAnDSAL_DSA3_SIZE                                 0x1
#define _DMAnDSAL_DSA3_LENGTH                               0x1
#define _DMAnDSAL_DSA3_MASK                                 0x8
#define _DMAnDSAL_DSA4_POSN                                 0x4
#define _DMAnDSAL_DSA4_POSITION                             0x4
#define _DMAnDSAL_DSA4_SIZE                                 0x1
#define _DMAnDSAL_DSA4_LENGTH                               0x1
#define _DMAnDSAL_DSA4_MASK                                 0x10
#define _DMAnDSAL_DSA5_POSN                                 0x5
#define _DMAnDSAL_DSA5_POSITION                             0x5
#define _DMAnDSAL_DSA5_SIZE                                 0x1
#define _DMAnDSAL_DSA5_LENGTH                               0x1
#define _DMAnDSAL_DSA5_MASK                                 0x20
#define _DMAnDSAL_DSA6_POSN                                 0x6
#define _DMAnDSAL_DSA6_POSITION                             0x6
#define _DMAnDSAL_DSA6_SIZE                                 0x1
#define _DMAnDSAL_DSA6_LENGTH                               0x1
#define _DMAnDSAL_DSA6_MASK                                 0x40
#define _DMAnDSAL_DSA7_POSN                                 0x7
#define _DMAnDSAL_DSA7_POSITION                             0x7
#define _DMAnDSAL_DSA7_SIZE                                 0x1
#define _DMAnDSAL_DSA7_LENGTH                               0x1
#define _DMAnDSAL_DSA7_MASK                                 0x80

// Register: DMAnDSAH
#define DMAnDSAH DMAnDSAH
extern volatile unsigned char           DMAnDSAH            __at(0x049);
#ifndef _LIB_BUILD
asm("DMAnDSAH equ 049h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSA                    :8;
    };
    struct {
        unsigned DSA8                   :1;
        unsigned DSA9                   :1;
        unsigned DSA10                  :1;
        unsigned DSA11                  :1;
        unsigned DSA12                  :1;
        unsigned DSA13                  :1;
        unsigned DSA14                  :1;
        unsigned DSA15                  :1;
    };
} DMAnDSAHbits_t;
extern volatile DMAnDSAHbits_t DMAnDSAHbits __at(0x049);
// bitfield macros
#define _DMAnDSAH_DSA_POSN                                  0x0
#define _DMAnDSAH_DSA_POSITION                              0x0
#define _DMAnDSAH_DSA_SIZE                                  0x8
#define _DMAnDSAH_DSA_LENGTH                                0x8
#define _DMAnDSAH_DSA_MASK                                  0xFF
#define _DMAnDSAH_DSA8_POSN                                 0x0
#define _DMAnDSAH_DSA8_POSITION                             0x0
#define _DMAnDSAH_DSA8_SIZE                                 0x1
#define _DMAnDSAH_DSA8_LENGTH                               0x1
#define _DMAnDSAH_DSA8_MASK                                 0x1
#define _DMAnDSAH_DSA9_POSN                                 0x1
#define _DMAnDSAH_DSA9_POSITION                             0x1
#define _DMAnDSAH_DSA9_SIZE                                 0x1
#define _DMAnDSAH_DSA9_LENGTH                               0x1
#define _DMAnDSAH_DSA9_MASK                                 0x2
#define _DMAnDSAH_DSA10_POSN                                0x2
#define _DMAnDSAH_DSA10_POSITION                            0x2
#define _DMAnDSAH_DSA10_SIZE                                0x1
#define _DMAnDSAH_DSA10_LENGTH                              0x1
#define _DMAnDSAH_DSA10_MASK                                0x4
#define _DMAnDSAH_DSA11_POSN                                0x3
#define _DMAnDSAH_DSA11_POSITION                            0x3
#define _DMAnDSAH_DSA11_SIZE                                0x1
#define _DMAnDSAH_DSA11_LENGTH                              0x1
#define _DMAnDSAH_DSA11_MASK                                0x8
#define _DMAnDSAH_DSA12_POSN                                0x4
#define _DMAnDSAH_DSA12_POSITION                            0x4
#define _DMAnDSAH_DSA12_SIZE                                0x1
#define _DMAnDSAH_DSA12_LENGTH                              0x1
#define _DMAnDSAH_DSA12_MASK                                0x10
#define _DMAnDSAH_DSA13_POSN                                0x5
#define _DMAnDSAH_DSA13_POSITION                            0x5
#define _DMAnDSAH_DSA13_SIZE                                0x1
#define _DMAnDSAH_DSA13_LENGTH                              0x1
#define _DMAnDSAH_DSA13_MASK                                0x20
#define _DMAnDSAH_DSA14_POSN                                0x6
#define _DMAnDSAH_DSA14_POSITION                            0x6
#define _DMAnDSAH_DSA14_SIZE                                0x1
#define _DMAnDSAH_DSA14_LENGTH                              0x1
#define _DMAnDSAH_DSA14_MASK                                0x40
#define _DMAnDSAH_DSA15_POSN                                0x7
#define _DMAnDSAH_DSA15_POSITION                            0x7
#define _DMAnDSAH_DSA15_SIZE                                0x1
#define _DMAnDSAH_DSA15_LENGTH                              0x1
#define _DMAnDSAH_DSA15_MASK                                0x80

// Register: DMAnSCNT
#define DMAnSCNT DMAnSCNT
extern volatile unsigned short          DMAnSCNT            __at(0x04A);
#ifndef _LIB_BUILD
asm("DMAnSCNT equ 04Ah");
#endif

// Register: DMAnSCNTL
#define DMAnSCNTL DMAnSCNTL
extern volatile unsigned char           DMAnSCNTL           __at(0x04A);
#ifndef _LIB_BUILD
asm("DMAnSCNTL equ 04Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCNT                   :8;
    };
    struct {
        unsigned SCNT0                  :1;
        unsigned SCNT1                  :1;
        unsigned SCNT2                  :1;
        unsigned SCNT3                  :1;
        unsigned SCNT4                  :1;
        unsigned SCNT5                  :1;
        unsigned SCNT6                  :1;
        unsigned SCNT7                  :1;
    };
} DMAnSCNTLbits_t;
extern volatile DMAnSCNTLbits_t DMAnSCNTLbits __at(0x04A);
// bitfield macros
#define _DMAnSCNTL_SCNT_POSN                                0x0
#define _DMAnSCNTL_SCNT_POSITION                            0x0
#define _DMAnSCNTL_SCNT_SIZE                                0x8
#define _DMAnSCNTL_SCNT_LENGTH                              0x8
#define _DMAnSCNTL_SCNT_MASK                                0xFF
#define _DMAnSCNTL_SCNT0_POSN                               0x0
#define _DMAnSCNTL_SCNT0_POSITION                           0x0
#define _DMAnSCNTL_SCNT0_SIZE                               0x1
#define _DMAnSCNTL_SCNT0_LENGTH                             0x1
#define _DMAnSCNTL_SCNT0_MASK                               0x1
#define _DMAnSCNTL_SCNT1_POSN                               0x1
#define _DMAnSCNTL_SCNT1_POSITION                           0x1
#define _DMAnSCNTL_SCNT1_SIZE                               0x1
#define _DMAnSCNTL_SCNT1_LENGTH                             0x1
#define _DMAnSCNTL_SCNT1_MASK                               0x2
#define _DMAnSCNTL_SCNT2_POSN                               0x2
#define _DMAnSCNTL_SCNT2_POSITION                           0x2
#define _DMAnSCNTL_SCNT2_SIZE                               0x1
#define _DMAnSCNTL_SCNT2_LENGTH                             0x1
#define _DMAnSCNTL_SCNT2_MASK                               0x4
#define _DMAnSCNTL_SCNT3_POSN                               0x3
#define _DMAnSCNTL_SCNT3_POSITION                           0x3
#define _DMAnSCNTL_SCNT3_SIZE                               0x1
#define _DMAnSCNTL_SCNT3_LENGTH                             0x1
#define _DMAnSCNTL_SCNT3_MASK                               0x8
#define _DMAnSCNTL_SCNT4_POSN                               0x4
#define _DMAnSCNTL_SCNT4_POSITION                           0x4
#define _DMAnSCNTL_SCNT4_SIZE                               0x1
#define _DMAnSCNTL_SCNT4_LENGTH                             0x1
#define _DMAnSCNTL_SCNT4_MASK                               0x10
#define _DMAnSCNTL_SCNT5_POSN                               0x5
#define _DMAnSCNTL_SCNT5_POSITION                           0x5
#define _DMAnSCNTL_SCNT5_SIZE                               0x1
#define _DMAnSCNTL_SCNT5_LENGTH                             0x1
#define _DMAnSCNTL_SCNT5_MASK                               0x20
#define _DMAnSCNTL_SCNT6_POSN                               0x6
#define _DMAnSCNTL_SCNT6_POSITION                           0x6
#define _DMAnSCNTL_SCNT6_SIZE                               0x1
#define _DMAnSCNTL_SCNT6_LENGTH                             0x1
#define _DMAnSCNTL_SCNT6_MASK                               0x40
#define _DMAnSCNTL_SCNT7_POSN                               0x7
#define _DMAnSCNTL_SCNT7_POSITION                           0x7
#define _DMAnSCNTL_SCNT7_SIZE                               0x1
#define _DMAnSCNTL_SCNT7_LENGTH                             0x1
#define _DMAnSCNTL_SCNT7_MASK                               0x80

// Register: DMAnSCNTH
#define DMAnSCNTH DMAnSCNTH
extern volatile unsigned char           DMAnSCNTH           __at(0x04B);
#ifndef _LIB_BUILD
asm("DMAnSCNTH equ 04Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCNT                   :8;
    };
    struct {
        unsigned SCNT8                  :1;
        unsigned SCNT9                  :1;
        unsigned SCNT10                 :1;
        unsigned SCNT11                 :1;
    };
} DMAnSCNTHbits_t;
extern volatile DMAnSCNTHbits_t DMAnSCNTHbits __at(0x04B);
// bitfield macros
#define _DMAnSCNTH_SCNT_POSN                                0x0
#define _DMAnSCNTH_SCNT_POSITION                            0x0
#define _DMAnSCNTH_SCNT_SIZE                                0x8
#define _DMAnSCNTH_SCNT_LENGTH                              0x8
#define _DMAnSCNTH_SCNT_MASK                                0xFF
#define _DMAnSCNTH_SCNT8_POSN                               0x0
#define _DMAnSCNTH_SCNT8_POSITION                           0x0
#define _DMAnSCNTH_SCNT8_SIZE                               0x1
#define _DMAnSCNTH_SCNT8_LENGTH                             0x1
#define _DMAnSCNTH_SCNT8_MASK                               0x1
#define _DMAnSCNTH_SCNT9_POSN                               0x1
#define _DMAnSCNTH_SCNT9_POSITION                           0x1
#define _DMAnSCNTH_SCNT9_SIZE                               0x1
#define _DMAnSCNTH_SCNT9_LENGTH                             0x1
#define _DMAnSCNTH_SCNT9_MASK                               0x2
#define _DMAnSCNTH_SCNT10_POSN                              0x2
#define _DMAnSCNTH_SCNT10_POSITION                          0x2
#define _DMAnSCNTH_SCNT10_SIZE                              0x1
#define _DMAnSCNTH_SCNT10_LENGTH                            0x1
#define _DMAnSCNTH_SCNT10_MASK                              0x4
#define _DMAnSCNTH_SCNT11_POSN                              0x3
#define _DMAnSCNTH_SCNT11_POSITION                          0x3
#define _DMAnSCNTH_SCNT11_SIZE                              0x1
#define _DMAnSCNTH_SCNT11_LENGTH                            0x1
#define _DMAnSCNTH_SCNT11_MASK                              0x8

// Register: DMAnSPTR
#define DMAnSPTR DMAnSPTR
#ifndef __CCI__
extern volatile __uint24                DMAnSPTR            __at(0x04C);
#endif
#ifndef _LIB_BUILD
asm("DMAnSPTR equ 04Ch");
#endif

// Register: DMAnSPTRL
#define DMAnSPTRL DMAnSPTRL
extern volatile unsigned char           DMAnSPTRL           __at(0x04C);
#ifndef _LIB_BUILD
asm("DMAnSPTRL equ 04Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPTR                   :8;
    };
    struct {
        unsigned SPTR0                  :1;
        unsigned SPTR1                  :1;
        unsigned SPTR2                  :1;
        unsigned SPTR3                  :1;
        unsigned SPTR4                  :1;
        unsigned SPTR5                  :1;
        unsigned SPTR6                  :1;
        unsigned SPTR7                  :1;
    };
} DMAnSPTRLbits_t;
extern volatile DMAnSPTRLbits_t DMAnSPTRLbits __at(0x04C);
// bitfield macros
#define _DMAnSPTRL_SPTR_POSN                                0x0
#define _DMAnSPTRL_SPTR_POSITION                            0x0
#define _DMAnSPTRL_SPTR_SIZE                                0x8
#define _DMAnSPTRL_SPTR_LENGTH                              0x8
#define _DMAnSPTRL_SPTR_MASK                                0xFF
#define _DMAnSPTRL_SPTR0_POSN                               0x0
#define _DMAnSPTRL_SPTR0_POSITION                           0x0
#define _DMAnSPTRL_SPTR0_SIZE                               0x1
#define _DMAnSPTRL_SPTR0_LENGTH                             0x1
#define _DMAnSPTRL_SPTR0_MASK                               0x1
#define _DMAnSPTRL_SPTR1_POSN                               0x1
#define _DMAnSPTRL_SPTR1_POSITION                           0x1
#define _DMAnSPTRL_SPTR1_SIZE                               0x1
#define _DMAnSPTRL_SPTR1_LENGTH                             0x1
#define _DMAnSPTRL_SPTR1_MASK                               0x2
#define _DMAnSPTRL_SPTR2_POSN                               0x2
#define _DMAnSPTRL_SPTR2_POSITION                           0x2
#define _DMAnSPTRL_SPTR2_SIZE                               0x1
#define _DMAnSPTRL_SPTR2_LENGTH                             0x1
#define _DMAnSPTRL_SPTR2_MASK                               0x4
#define _DMAnSPTRL_SPTR3_POSN                               0x3
#define _DMAnSPTRL_SPTR3_POSITION                           0x3
#define _DMAnSPTRL_SPTR3_SIZE                               0x1
#define _DMAnSPTRL_SPTR3_LENGTH                             0x1
#define _DMAnSPTRL_SPTR3_MASK                               0x8
#define _DMAnSPTRL_SPTR4_POSN                               0x4
#define _DMAnSPTRL_SPTR4_POSITION                           0x4
#define _DMAnSPTRL_SPTR4_SIZE                               0x1
#define _DMAnSPTRL_SPTR4_LENGTH                             0x1
#define _DMAnSPTRL_SPTR4_MASK                               0x10
#define _DMAnSPTRL_SPTR5_POSN                               0x5
#define _DMAnSPTRL_SPTR5_POSITION                           0x5
#define _DMAnSPTRL_SPTR5_SIZE                               0x1
#define _DMAnSPTRL_SPTR5_LENGTH                             0x1
#define _DMAnSPTRL_SPTR5_MASK                               0x20
#define _DMAnSPTRL_SPTR6_POSN                               0x6
#define _DMAnSPTRL_SPTR6_POSITION                           0x6
#define _DMAnSPTRL_SPTR6_SIZE                               0x1
#define _DMAnSPTRL_SPTR6_LENGTH                             0x1
#define _DMAnSPTRL_SPTR6_MASK                               0x40
#define _DMAnSPTRL_SPTR7_POSN                               0x7
#define _DMAnSPTRL_SPTR7_POSITION                           0x7
#define _DMAnSPTRL_SPTR7_SIZE                               0x1
#define _DMAnSPTRL_SPTR7_LENGTH                             0x1
#define _DMAnSPTRL_SPTR7_MASK                               0x80

// Register: DMAnSPTRH
#define DMAnSPTRH DMAnSPTRH
extern volatile unsigned char           DMAnSPTRH           __at(0x04D);
#ifndef _LIB_BUILD
asm("DMAnSPTRH equ 04Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPTR                   :8;
    };
    struct {
        unsigned SPTR8                  :1;
        unsigned SPTR9                  :1;
        unsigned SPTR10                 :1;
        unsigned SPTR11                 :1;
        unsigned SPTR12                 :1;
        unsigned SPTR13                 :1;
        unsigned SPTR14                 :1;
        unsigned SPTR15                 :1;
    };
} DMAnSPTRHbits_t;
extern volatile DMAnSPTRHbits_t DMAnSPTRHbits __at(0x04D);
// bitfield macros
#define _DMAnSPTRH_SPTR_POSN                                0x0
#define _DMAnSPTRH_SPTR_POSITION                            0x0
#define _DMAnSPTRH_SPTR_SIZE                                0x8
#define _DMAnSPTRH_SPTR_LENGTH                              0x8
#define _DMAnSPTRH_SPTR_MASK                                0xFF
#define _DMAnSPTRH_SPTR8_POSN                               0x0
#define _DMAnSPTRH_SPTR8_POSITION                           0x0
#define _DMAnSPTRH_SPTR8_SIZE                               0x1
#define _DMAnSPTRH_SPTR8_LENGTH                             0x1
#define _DMAnSPTRH_SPTR8_MASK                               0x1
#define _DMAnSPTRH_SPTR9_POSN                               0x1
#define _DMAnSPTRH_SPTR9_POSITION                           0x1
#define _DMAnSPTRH_SPTR9_SIZE                               0x1
#define _DMAnSPTRH_SPTR9_LENGTH                             0x1
#define _DMAnSPTRH_SPTR9_MASK                               0x2
#define _DMAnSPTRH_SPTR10_POSN                              0x2
#define _DMAnSPTRH_SPTR10_POSITION                          0x2
#define _DMAnSPTRH_SPTR10_SIZE                              0x1
#define _DMAnSPTRH_SPTR10_LENGTH                            0x1
#define _DMAnSPTRH_SPTR10_MASK                              0x4
#define _DMAnSPTRH_SPTR11_POSN                              0x3
#define _DMAnSPTRH_SPTR11_POSITION                          0x3
#define _DMAnSPTRH_SPTR11_SIZE                              0x1
#define _DMAnSPTRH_SPTR11_LENGTH                            0x1
#define _DMAnSPTRH_SPTR11_MASK                              0x8
#define _DMAnSPTRH_SPTR12_POSN                              0x4
#define _DMAnSPTRH_SPTR12_POSITION                          0x4
#define _DMAnSPTRH_SPTR12_SIZE                              0x1
#define _DMAnSPTRH_SPTR12_LENGTH                            0x1
#define _DMAnSPTRH_SPTR12_MASK                              0x10
#define _DMAnSPTRH_SPTR13_POSN                              0x5
#define _DMAnSPTRH_SPTR13_POSITION                          0x5
#define _DMAnSPTRH_SPTR13_SIZE                              0x1
#define _DMAnSPTRH_SPTR13_LENGTH                            0x1
#define _DMAnSPTRH_SPTR13_MASK                              0x20
#define _DMAnSPTRH_SPTR14_POSN                              0x6
#define _DMAnSPTRH_SPTR14_POSITION                          0x6
#define _DMAnSPTRH_SPTR14_SIZE                              0x1
#define _DMAnSPTRH_SPTR14_LENGTH                            0x1
#define _DMAnSPTRH_SPTR14_MASK                              0x40
#define _DMAnSPTRH_SPTR15_POSN                              0x7
#define _DMAnSPTRH_SPTR15_POSITION                          0x7
#define _DMAnSPTRH_SPTR15_SIZE                              0x1
#define _DMAnSPTRH_SPTR15_LENGTH                            0x1
#define _DMAnSPTRH_SPTR15_MASK                              0x80

// Register: DMAnSPTRU
#define DMAnSPTRU DMAnSPTRU
extern volatile unsigned char           DMAnSPTRU           __at(0x04E);
#ifndef _LIB_BUILD
asm("DMAnSPTRU equ 04Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPTR                   :8;
    };
    struct {
        unsigned SPTR16                 :1;
        unsigned SPTR17                 :1;
        unsigned SPTR18                 :1;
        unsigned SPTR19                 :1;
        unsigned SPTR20                 :1;
        unsigned SPTR21                 :1;
    };
} DMAnSPTRUbits_t;
extern volatile DMAnSPTRUbits_t DMAnSPTRUbits __at(0x04E);
// bitfield macros
#define _DMAnSPTRU_SPTR_POSN                                0x0
#define _DMAnSPTRU_SPTR_POSITION                            0x0
#define _DMAnSPTRU_SPTR_SIZE                                0x8
#define _DMAnSPTRU_SPTR_LENGTH                              0x8
#define _DMAnSPTRU_SPTR_MASK                                0xFF
#define _DMAnSPTRU_SPTR16_POSN                              0x0
#define _DMAnSPTRU_SPTR16_POSITION                          0x0
#define _DMAnSPTRU_SPTR16_SIZE                              0x1
#define _DMAnSPTRU_SPTR16_LENGTH                            0x1
#define _DMAnSPTRU_SPTR16_MASK                              0x1
#define _DMAnSPTRU_SPTR17_POSN                              0x1
#define _DMAnSPTRU_SPTR17_POSITION                          0x1
#define _DMAnSPTRU_SPTR17_SIZE                              0x1
#define _DMAnSPTRU_SPTR17_LENGTH                            0x1
#define _DMAnSPTRU_SPTR17_MASK                              0x2
#define _DMAnSPTRU_SPTR18_POSN                              0x2
#define _DMAnSPTRU_SPTR18_POSITION                          0x2
#define _DMAnSPTRU_SPTR18_SIZE                              0x1
#define _DMAnSPTRU_SPTR18_LENGTH                            0x1
#define _DMAnSPTRU_SPTR18_MASK                              0x4
#define _DMAnSPTRU_SPTR19_POSN                              0x3
#define _DMAnSPTRU_SPTR19_POSITION                          0x3
#define _DMAnSPTRU_SPTR19_SIZE                              0x1
#define _DMAnSPTRU_SPTR19_LENGTH                            0x1
#define _DMAnSPTRU_SPTR19_MASK                              0x8
#define _DMAnSPTRU_SPTR20_POSN                              0x4
#define _DMAnSPTRU_SPTR20_POSITION                          0x4
#define _DMAnSPTRU_SPTR20_SIZE                              0x1
#define _DMAnSPTRU_SPTR20_LENGTH                            0x1
#define _DMAnSPTRU_SPTR20_MASK                              0x10
#define _DMAnSPTRU_SPTR21_POSN                              0x5
#define _DMAnSPTRU_SPTR21_POSITION                          0x5
#define _DMAnSPTRU_SPTR21_SIZE                              0x1
#define _DMAnSPTRU_SPTR21_LENGTH                            0x1
#define _DMAnSPTRU_SPTR21_MASK                              0x20

// Register: DMAnSSZ
#define DMAnSSZ DMAnSSZ
extern volatile unsigned short          DMAnSSZ             __at(0x04F);
#ifndef _LIB_BUILD
asm("DMAnSSZ equ 04Fh");
#endif

// Register: DMAnSSZL
#define DMAnSSZL DMAnSSZL
extern volatile unsigned char           DMAnSSZL            __at(0x04F);
#ifndef _LIB_BUILD
asm("DMAnSSZL equ 04Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSZ                    :8;
    };
    struct {
        unsigned SSZ0                   :1;
        unsigned SSZ1                   :1;
        unsigned SSZ2                   :1;
        unsigned SSZ3                   :1;
        unsigned SSZ4                   :1;
        unsigned SSZ5                   :1;
        unsigned SSZ6                   :1;
        unsigned SSZ7                   :1;
    };
} DMAnSSZLbits_t;
extern volatile DMAnSSZLbits_t DMAnSSZLbits __at(0x04F);
// bitfield macros
#define _DMAnSSZL_SSZ_POSN                                  0x0
#define _DMAnSSZL_SSZ_POSITION                              0x0
#define _DMAnSSZL_SSZ_SIZE                                  0x8
#define _DMAnSSZL_SSZ_LENGTH                                0x8
#define _DMAnSSZL_SSZ_MASK                                  0xFF
#define _DMAnSSZL_SSZ0_POSN                                 0x0
#define _DMAnSSZL_SSZ0_POSITION                             0x0
#define _DMAnSSZL_SSZ0_SIZE                                 0x1
#define _DMAnSSZL_SSZ0_LENGTH                               0x1
#define _DMAnSSZL_SSZ0_MASK                                 0x1
#define _DMAnSSZL_SSZ1_POSN                                 0x1
#define _DMAnSSZL_SSZ1_POSITION                             0x1
#define _DMAnSSZL_SSZ1_SIZE                                 0x1
#define _DMAnSSZL_SSZ1_LENGTH                               0x1
#define _DMAnSSZL_SSZ1_MASK                                 0x2
#define _DMAnSSZL_SSZ2_POSN                                 0x2
#define _DMAnSSZL_SSZ2_POSITION                             0x2
#define _DMAnSSZL_SSZ2_SIZE                                 0x1
#define _DMAnSSZL_SSZ2_LENGTH                               0x1
#define _DMAnSSZL_SSZ2_MASK                                 0x4
#define _DMAnSSZL_SSZ3_POSN                                 0x3
#define _DMAnSSZL_SSZ3_POSITION                             0x3
#define _DMAnSSZL_SSZ3_SIZE                                 0x1
#define _DMAnSSZL_SSZ3_LENGTH                               0x1
#define _DMAnSSZL_SSZ3_MASK                                 0x8
#define _DMAnSSZL_SSZ4_POSN                                 0x4
#define _DMAnSSZL_SSZ4_POSITION                             0x4
#define _DMAnSSZL_SSZ4_SIZE                                 0x1
#define _DMAnSSZL_SSZ4_LENGTH                               0x1
#define _DMAnSSZL_SSZ4_MASK                                 0x10
#define _DMAnSSZL_SSZ5_POSN                                 0x5
#define _DMAnSSZL_SSZ5_POSITION                             0x5
#define _DMAnSSZL_SSZ5_SIZE                                 0x1
#define _DMAnSSZL_SSZ5_LENGTH                               0x1
#define _DMAnSSZL_SSZ5_MASK                                 0x20
#define _DMAnSSZL_SSZ6_POSN                                 0x6
#define _DMAnSSZL_SSZ6_POSITION                             0x6
#define _DMAnSSZL_SSZ6_SIZE                                 0x1
#define _DMAnSSZL_SSZ6_LENGTH                               0x1
#define _DMAnSSZL_SSZ6_MASK                                 0x40
#define _DMAnSSZL_SSZ7_POSN                                 0x7
#define _DMAnSSZL_SSZ7_POSITION                             0x7
#define _DMAnSSZL_SSZ7_SIZE                                 0x1
#define _DMAnSSZL_SSZ7_LENGTH                               0x1
#define _DMAnSSZL_SSZ7_MASK                                 0x80

// Register: DMAnSSZH
#define DMAnSSZH DMAnSSZH
extern volatile unsigned char           DMAnSSZH            __at(0x050);
#ifndef _LIB_BUILD
asm("DMAnSSZH equ 050h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSZ                    :8;
    };
    struct {
        unsigned SSZ8                   :1;
        unsigned SSZ9                   :1;
        unsigned SSZ10                  :1;
        unsigned SSZ11                  :1;
    };
} DMAnSSZHbits_t;
extern volatile DMAnSSZHbits_t DMAnSSZHbits __at(0x050);
// bitfield macros
#define _DMAnSSZH_SSZ_POSN                                  0x0
#define _DMAnSSZH_SSZ_POSITION                              0x0
#define _DMAnSSZH_SSZ_SIZE                                  0x8
#define _DMAnSSZH_SSZ_LENGTH                                0x8
#define _DMAnSSZH_SSZ_MASK                                  0xFF
#define _DMAnSSZH_SSZ8_POSN                                 0x0
#define _DMAnSSZH_SSZ8_POSITION                             0x0
#define _DMAnSSZH_SSZ8_SIZE                                 0x1
#define _DMAnSSZH_SSZ8_LENGTH                               0x1
#define _DMAnSSZH_SSZ8_MASK                                 0x1
#define _DMAnSSZH_SSZ9_POSN                                 0x1
#define _DMAnSSZH_SSZ9_POSITION                             0x1
#define _DMAnSSZH_SSZ9_SIZE                                 0x1
#define _DMAnSSZH_SSZ9_LENGTH                               0x1
#define _DMAnSSZH_SSZ9_MASK                                 0x2
#define _DMAnSSZH_SSZ10_POSN                                0x2
#define _DMAnSSZH_SSZ10_POSITION                            0x2
#define _DMAnSSZH_SSZ10_SIZE                                0x1
#define _DMAnSSZH_SSZ10_LENGTH                              0x1
#define _DMAnSSZH_SSZ10_MASK                                0x4
#define _DMAnSSZH_SSZ11_POSN                                0x3
#define _DMAnSSZH_SSZ11_POSITION                            0x3
#define _DMAnSSZH_SSZ11_SIZE                                0x1
#define _DMAnSSZH_SSZ11_LENGTH                              0x1
#define _DMAnSSZH_SSZ11_MASK                                0x8

// Register: DMAnSSA
#define DMAnSSA DMAnSSA
#ifndef __CCI__
extern volatile __uint24                DMAnSSA             __at(0x051);
#endif
#ifndef _LIB_BUILD
asm("DMAnSSA equ 051h");
#endif

// Register: DMAnSSAL
#define DMAnSSAL DMAnSSAL
extern volatile unsigned char           DMAnSSAL            __at(0x051);
#ifndef _LIB_BUILD
asm("DMAnSSAL equ 051h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSA                    :8;
    };
    struct {
        unsigned SSA0                   :1;
        unsigned SSA1                   :1;
        unsigned SSA2                   :1;
        unsigned SSA3                   :1;
        unsigned SSA4                   :1;
        unsigned SSA5                   :1;
        unsigned SSA6                   :1;
        unsigned SSA7                   :1;
    };
} DMAnSSALbits_t;
extern volatile DMAnSSALbits_t DMAnSSALbits __at(0x051);
// bitfield macros
#define _DMAnSSAL_SSA_POSN                                  0x0
#define _DMAnSSAL_SSA_POSITION                              0x0
#define _DMAnSSAL_SSA_SIZE                                  0x8
#define _DMAnSSAL_SSA_LENGTH                                0x8
#define _DMAnSSAL_SSA_MASK                                  0xFF
#define _DMAnSSAL_SSA0_POSN                                 0x0
#define _DMAnSSAL_SSA0_POSITION                             0x0
#define _DMAnSSAL_SSA0_SIZE                                 0x1
#define _DMAnSSAL_SSA0_LENGTH                               0x1
#define _DMAnSSAL_SSA0_MASK                                 0x1
#define _DMAnSSAL_SSA1_POSN                                 0x1
#define _DMAnSSAL_SSA1_POSITION                             0x1
#define _DMAnSSAL_SSA1_SIZE                                 0x1
#define _DMAnSSAL_SSA1_LENGTH                               0x1
#define _DMAnSSAL_SSA1_MASK                                 0x2
#define _DMAnSSAL_SSA2_POSN                                 0x2
#define _DMAnSSAL_SSA2_POSITION                             0x2
#define _DMAnSSAL_SSA2_SIZE                                 0x1
#define _DMAnSSAL_SSA2_LENGTH                               0x1
#define _DMAnSSAL_SSA2_MASK                                 0x4
#define _DMAnSSAL_SSA3_POSN                                 0x3
#define _DMAnSSAL_SSA3_POSITION                             0x3
#define _DMAnSSAL_SSA3_SIZE                                 0x1
#define _DMAnSSAL_SSA3_LENGTH                               0x1
#define _DMAnSSAL_SSA3_MASK                                 0x8
#define _DMAnSSAL_SSA4_POSN                                 0x4
#define _DMAnSSAL_SSA4_POSITION                             0x4
#define _DMAnSSAL_SSA4_SIZE                                 0x1
#define _DMAnSSAL_SSA4_LENGTH                               0x1
#define _DMAnSSAL_SSA4_MASK                                 0x10
#define _DMAnSSAL_SSA5_POSN                                 0x5
#define _DMAnSSAL_SSA5_POSITION                             0x5
#define _DMAnSSAL_SSA5_SIZE                                 0x1
#define _DMAnSSAL_SSA5_LENGTH                               0x1
#define _DMAnSSAL_SSA5_MASK                                 0x20
#define _DMAnSSAL_SSA6_POSN                                 0x6
#define _DMAnSSAL_SSA6_POSITION                             0x6
#define _DMAnSSAL_SSA6_SIZE                                 0x1
#define _DMAnSSAL_SSA6_LENGTH                               0x1
#define _DMAnSSAL_SSA6_MASK                                 0x40
#define _DMAnSSAL_SSA7_POSN                                 0x7
#define _DMAnSSAL_SSA7_POSITION                             0x7
#define _DMAnSSAL_SSA7_SIZE                                 0x1
#define _DMAnSSAL_SSA7_LENGTH                               0x1
#define _DMAnSSAL_SSA7_MASK                                 0x80

// Register: DMAnSSAH
#define DMAnSSAH DMAnSSAH
extern volatile unsigned char           DMAnSSAH            __at(0x052);
#ifndef _LIB_BUILD
asm("DMAnSSAH equ 052h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSA                    :8;
    };
    struct {
        unsigned SSA8                   :1;
        unsigned SSA9                   :1;
        unsigned SSA10                  :1;
        unsigned SSA11                  :1;
        unsigned SSA12                  :1;
        unsigned SSA13                  :1;
        unsigned SSA14                  :1;
        unsigned SSA15                  :1;
    };
} DMAnSSAHbits_t;
extern volatile DMAnSSAHbits_t DMAnSSAHbits __at(0x052);
// bitfield macros
#define _DMAnSSAH_SSA_POSN                                  0x0
#define _DMAnSSAH_SSA_POSITION                              0x0
#define _DMAnSSAH_SSA_SIZE                                  0x8
#define _DMAnSSAH_SSA_LENGTH                                0x8
#define _DMAnSSAH_SSA_MASK                                  0xFF
#define _DMAnSSAH_SSA8_POSN                                 0x0
#define _DMAnSSAH_SSA8_POSITION                             0x0
#define _DMAnSSAH_SSA8_SIZE                                 0x1
#define _DMAnSSAH_SSA8_LENGTH                               0x1
#define _DMAnSSAH_SSA8_MASK                                 0x1
#define _DMAnSSAH_SSA9_POSN                                 0x1
#define _DMAnSSAH_SSA9_POSITION                             0x1
#define _DMAnSSAH_SSA9_SIZE                                 0x1
#define _DMAnSSAH_SSA9_LENGTH                               0x1
#define _DMAnSSAH_SSA9_MASK                                 0x2
#define _DMAnSSAH_SSA10_POSN                                0x2
#define _DMAnSSAH_SSA10_POSITION                            0x2
#define _DMAnSSAH_SSA10_SIZE                                0x1
#define _DMAnSSAH_SSA10_LENGTH                              0x1
#define _DMAnSSAH_SSA10_MASK                                0x4
#define _DMAnSSAH_SSA11_POSN                                0x3
#define _DMAnSSAH_SSA11_POSITION                            0x3
#define _DMAnSSAH_SSA11_SIZE                                0x1
#define _DMAnSSAH_SSA11_LENGTH                              0x1
#define _DMAnSSAH_SSA11_MASK                                0x8
#define _DMAnSSAH_SSA12_POSN                                0x4
#define _DMAnSSAH_SSA12_POSITION                            0x4
#define _DMAnSSAH_SSA12_SIZE                                0x1
#define _DMAnSSAH_SSA12_LENGTH                              0x1
#define _DMAnSSAH_SSA12_MASK                                0x10
#define _DMAnSSAH_SSA13_POSN                                0x5
#define _DMAnSSAH_SSA13_POSITION                            0x5
#define _DMAnSSAH_SSA13_SIZE                                0x1
#define _DMAnSSAH_SSA13_LENGTH                              0x1
#define _DMAnSSAH_SSA13_MASK                                0x20
#define _DMAnSSAH_SSA14_POSN                                0x6
#define _DMAnSSAH_SSA14_POSITION                            0x6
#define _DMAnSSAH_SSA14_SIZE                                0x1
#define _DMAnSSAH_SSA14_LENGTH                              0x1
#define _DMAnSSAH_SSA14_MASK                                0x40
#define _DMAnSSAH_SSA15_POSN                                0x7
#define _DMAnSSAH_SSA15_POSITION                            0x7
#define _DMAnSSAH_SSA15_SIZE                                0x1
#define _DMAnSSAH_SSA15_LENGTH                              0x1
#define _DMAnSSAH_SSA15_MASK                                0x80

// Register: DMAnSSAU
#define DMAnSSAU DMAnSSAU
extern volatile unsigned char           DMAnSSAU            __at(0x053);
#ifndef _LIB_BUILD
asm("DMAnSSAU equ 053h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSA                    :8;
    };
    struct {
        unsigned SSA16                  :1;
        unsigned SSA17                  :1;
        unsigned SSA18                  :1;
        unsigned SSA19                  :1;
        unsigned SSA20                  :1;
        unsigned SSA21                  :1;
    };
} DMAnSSAUbits_t;
extern volatile DMAnSSAUbits_t DMAnSSAUbits __at(0x053);
// bitfield macros
#define _DMAnSSAU_SSA_POSN                                  0x0
#define _DMAnSSAU_SSA_POSITION                              0x0
#define _DMAnSSAU_SSA_SIZE                                  0x8
#define _DMAnSSAU_SSA_LENGTH                                0x8
#define _DMAnSSAU_SSA_MASK                                  0xFF
#define _DMAnSSAU_SSA16_POSN                                0x0
#define _DMAnSSAU_SSA16_POSITION                            0x0
#define _DMAnSSAU_SSA16_SIZE                                0x1
#define _DMAnSSAU_SSA16_LENGTH                              0x1
#define _DMAnSSAU_SSA16_MASK                                0x1
#define _DMAnSSAU_SSA17_POSN                                0x1
#define _DMAnSSAU_SSA17_POSITION                            0x1
#define _DMAnSSAU_SSA17_SIZE                                0x1
#define _DMAnSSAU_SSA17_LENGTH                              0x1
#define _DMAnSSAU_SSA17_MASK                                0x2
#define _DMAnSSAU_SSA18_POSN                                0x2
#define _DMAnSSAU_SSA18_POSITION                            0x2
#define _DMAnSSAU_SSA18_SIZE                                0x1
#define _DMAnSSAU_SSA18_LENGTH                              0x1
#define _DMAnSSAU_SSA18_MASK                                0x4
#define _DMAnSSAU_SSA19_POSN                                0x3
#define _DMAnSSAU_SSA19_POSITION                            0x3
#define _DMAnSSAU_SSA19_SIZE                                0x1
#define _DMAnSSAU_SSA19_LENGTH                              0x1
#define _DMAnSSAU_SSA19_MASK                                0x8
#define _DMAnSSAU_SSA20_POSN                                0x4
#define _DMAnSSAU_SSA20_POSITION                            0x4
#define _DMAnSSAU_SSA20_SIZE                                0x1
#define _DMAnSSAU_SSA20_LENGTH                              0x1
#define _DMAnSSAU_SSA20_MASK                                0x10
#define _DMAnSSAU_SSA21_POSN                                0x5
#define _DMAnSSAU_SSA21_POSITION                            0x5
#define _DMAnSSAU_SSA21_SIZE                                0x1
#define _DMAnSSAU_SSA21_LENGTH                              0x1
#define _DMAnSSAU_SSA21_MASK                                0x20

// Register: DMAnCON0
#define DMAnCON0 DMAnCON0
extern volatile unsigned char           DMAnCON0            __at(0x054);
#ifndef _LIB_BUILD
asm("DMAnCON0 equ 054h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned XIP                    :1;
        unsigned                        :1;
        unsigned AIRQEN                 :1;
        unsigned                        :2;
        unsigned DGO                    :1;
        unsigned SIRQEN                 :1;
        unsigned EN                     :1;
    };
} DMAnCON0bits_t;
extern volatile DMAnCON0bits_t DMAnCON0bits __at(0x054);
// bitfield macros
#define _DMAnCON0_XIP_POSN                                  0x0
#define _DMAnCON0_XIP_POSITION                              0x0
#define _DMAnCON0_XIP_SIZE                                  0x1
#define _DMAnCON0_XIP_LENGTH                                0x1
#define _DMAnCON0_XIP_MASK                                  0x1
#define _DMAnCON0_AIRQEN_POSN                               0x2
#define _DMAnCON0_AIRQEN_POSITION                           0x2
#define _DMAnCON0_AIRQEN_SIZE                               0x1
#define _DMAnCON0_AIRQEN_LENGTH                             0x1
#define _DMAnCON0_AIRQEN_MASK                               0x4
#define _DMAnCON0_DGO_POSN                                  0x5
#define _DMAnCON0_DGO_POSITION                              0x5
#define _DMAnCON0_DGO_SIZE                                  0x1
#define _DMAnCON0_DGO_LENGTH                                0x1
#define _DMAnCON0_DGO_MASK                                  0x20
#define _DMAnCON0_SIRQEN_POSN                               0x6
#define _DMAnCON0_SIRQEN_POSITION                           0x6
#define _DMAnCON0_SIRQEN_SIZE                               0x1
#define _DMAnCON0_SIRQEN_LENGTH                             0x1
#define _DMAnCON0_SIRQEN_MASK                               0x40
#define _DMAnCON0_EN_POSN                                   0x7
#define _DMAnCON0_EN_POSITION                               0x7
#define _DMAnCON0_EN_SIZE                                   0x1
#define _DMAnCON0_EN_LENGTH                                 0x1
#define _DMAnCON0_EN_MASK                                   0x80

// Register: DMAnCON1
#define DMAnCON1 DMAnCON1
extern volatile unsigned char           DMAnCON1            __at(0x055);
#ifndef _LIB_BUILD
asm("DMAnCON1 equ 055h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SSTP                   :1;
        unsigned SMODE                  :2;
        unsigned SMR                    :2;
        unsigned DSTP                   :1;
        unsigned DMODE                  :2;
    };
} DMAnCON1bits_t;
extern volatile DMAnCON1bits_t DMAnCON1bits __at(0x055);
// bitfield macros
#define _DMAnCON1_SSTP_POSN                                 0x0
#define _DMAnCON1_SSTP_POSITION                             0x0
#define _DMAnCON1_SSTP_SIZE                                 0x1
#define _DMAnCON1_SSTP_LENGTH                               0x1
#define _DMAnCON1_SSTP_MASK                                 0x1
#define _DMAnCON1_SMODE_POSN                                0x1
#define _DMAnCON1_SMODE_POSITION                            0x1
#define _DMAnCON1_SMODE_SIZE                                0x2
#define _DMAnCON1_SMODE_LENGTH                              0x2
#define _DMAnCON1_SMODE_MASK                                0x6
#define _DMAnCON1_SMR_POSN                                  0x3
#define _DMAnCON1_SMR_POSITION                              0x3
#define _DMAnCON1_SMR_SIZE                                  0x2
#define _DMAnCON1_SMR_LENGTH                                0x2
#define _DMAnCON1_SMR_MASK                                  0x18
#define _DMAnCON1_DSTP_POSN                                 0x5
#define _DMAnCON1_DSTP_POSITION                             0x5
#define _DMAnCON1_DSTP_SIZE                                 0x1
#define _DMAnCON1_DSTP_LENGTH                               0x1
#define _DMAnCON1_DSTP_MASK                                 0x20
#define _DMAnCON1_DMODE_POSN                                0x6
#define _DMAnCON1_DMODE_POSITION                            0x6
#define _DMAnCON1_DMODE_SIZE                                0x2
#define _DMAnCON1_DMODE_LENGTH                              0x2
#define _DMAnCON1_DMODE_MASK                                0xC0

// Register: DMAnAIRQ
#define DMAnAIRQ DMAnAIRQ
extern volatile unsigned char           DMAnAIRQ            __at(0x056);
#ifndef _LIB_BUILD
asm("DMAnAIRQ equ 056h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AIRQ                   :8;
    };
    struct {
        unsigned AIRQ0                  :1;
        unsigned AIRQ1                  :1;
        unsigned AIRQ2                  :1;
        unsigned AIRQ3                  :1;
        unsigned AIRQ4                  :1;
        unsigned AIRQ5                  :1;
        unsigned AIRQ6                  :1;
        unsigned AIRQ7                  :1;
    };
} DMAnAIRQbits_t;
extern volatile DMAnAIRQbits_t DMAnAIRQbits __at(0x056);
// bitfield macros
#define _DMAnAIRQ_AIRQ_POSN                                 0x0
#define _DMAnAIRQ_AIRQ_POSITION                             0x0
#define _DMAnAIRQ_AIRQ_SIZE                                 0x8
#define _DMAnAIRQ_AIRQ_LENGTH                               0x8
#define _DMAnAIRQ_AIRQ_MASK                                 0xFF
#define _DMAnAIRQ_AIRQ0_POSN                                0x0
#define _DMAnAIRQ_AIRQ0_POSITION                            0x0
#define _DMAnAIRQ_AIRQ0_SIZE                                0x1
#define _DMAnAIRQ_AIRQ0_LENGTH                              0x1
#define _DMAnAIRQ_AIRQ0_MASK                                0x1
#define _DMAnAIRQ_AIRQ1_POSN                                0x1
#define _DMAnAIRQ_AIRQ1_POSITION                            0x1
#define _DMAnAIRQ_AIRQ1_SIZE                                0x1
#define _DMAnAIRQ_AIRQ1_LENGTH                              0x1
#define _DMAnAIRQ_AIRQ1_MASK                                0x2
#define _DMAnAIRQ_AIRQ2_POSN                                0x2
#define _DMAnAIRQ_AIRQ2_POSITION                            0x2
#define _DMAnAIRQ_AIRQ2_SIZE                                0x1
#define _DMAnAIRQ_AIRQ2_LENGTH                              0x1
#define _DMAnAIRQ_AIRQ2_MASK                                0x4
#define _DMAnAIRQ_AIRQ3_POSN                                0x3
#define _DMAnAIRQ_AIRQ3_POSITION                            0x3
#define _DMAnAIRQ_AIRQ3_SIZE                                0x1
#define _DMAnAIRQ_AIRQ3_LENGTH                              0x1
#define _DMAnAIRQ_AIRQ3_MASK                                0x8
#define _DMAnAIRQ_AIRQ4_POSN                                0x4
#define _DMAnAIRQ_AIRQ4_POSITION                            0x4
#define _DMAnAIRQ_AIRQ4_SIZE                                0x1
#define _DMAnAIRQ_AIRQ4_LENGTH                              0x1
#define _DMAnAIRQ_AIRQ4_MASK                                0x10
#define _DMAnAIRQ_AIRQ5_POSN                                0x5
#define _DMAnAIRQ_AIRQ5_POSITION                            0x5
#define _DMAnAIRQ_AIRQ5_SIZE                                0x1
#define _DMAnAIRQ_AIRQ5_LENGTH                              0x1
#define _DMAnAIRQ_AIRQ5_MASK                                0x20
#define _DMAnAIRQ_AIRQ6_POSN                                0x6
#define _DMAnAIRQ_AIRQ6_POSITION                            0x6
#define _DMAnAIRQ_AIRQ6_SIZE                                0x1
#define _DMAnAIRQ_AIRQ6_LENGTH                              0x1
#define _DMAnAIRQ_AIRQ6_MASK                                0x40
#define _DMAnAIRQ_AIRQ7_POSN                                0x7
#define _DMAnAIRQ_AIRQ7_POSITION                            0x7
#define _DMAnAIRQ_AIRQ7_SIZE                                0x1
#define _DMAnAIRQ_AIRQ7_LENGTH                              0x1
#define _DMAnAIRQ_AIRQ7_MASK                                0x80

// Register: DMAnSIRQ
#define DMAnSIRQ DMAnSIRQ
extern volatile unsigned char           DMAnSIRQ            __at(0x057);
#ifndef _LIB_BUILD
asm("DMAnSIRQ equ 057h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SIRQ                   :8;
    };
    struct {
        unsigned SIRQ0                  :1;
        unsigned SIRQ1                  :1;
        unsigned SIRQ2                  :1;
        unsigned SIRQ3                  :1;
        unsigned SIRQ4                  :1;
        unsigned SIRQ5                  :1;
        unsigned SIRQ6                  :1;
        unsigned SIRQ7                  :1;
    };
} DMAnSIRQbits_t;
extern volatile DMAnSIRQbits_t DMAnSIRQbits __at(0x057);
// bitfield macros
#define _DMAnSIRQ_SIRQ_POSN                                 0x0
#define _DMAnSIRQ_SIRQ_POSITION                             0x0
#define _DMAnSIRQ_SIRQ_SIZE                                 0x8
#define _DMAnSIRQ_SIRQ_LENGTH                               0x8
#define _DMAnSIRQ_SIRQ_MASK                                 0xFF
#define _DMAnSIRQ_SIRQ0_POSN                                0x0
#define _DMAnSIRQ_SIRQ0_POSITION                            0x0
#define _DMAnSIRQ_SIRQ0_SIZE                                0x1
#define _DMAnSIRQ_SIRQ0_LENGTH                              0x1
#define _DMAnSIRQ_SIRQ0_MASK                                0x1
#define _DMAnSIRQ_SIRQ1_POSN                                0x1
#define _DMAnSIRQ_SIRQ1_POSITION                            0x1
#define _DMAnSIRQ_SIRQ1_SIZE                                0x1
#define _DMAnSIRQ_SIRQ1_LENGTH                              0x1
#define _DMAnSIRQ_SIRQ1_MASK                                0x2
#define _DMAnSIRQ_SIRQ2_POSN                                0x2
#define _DMAnSIRQ_SIRQ2_POSITION                            0x2
#define _DMAnSIRQ_SIRQ2_SIZE                                0x1
#define _DMAnSIRQ_SIRQ2_LENGTH                              0x1
#define _DMAnSIRQ_SIRQ2_MASK                                0x4
#define _DMAnSIRQ_SIRQ3_POSN                                0x3
#define _DMAnSIRQ_SIRQ3_POSITION                            0x3
#define _DMAnSIRQ_SIRQ3_SIZE                                0x1
#define _DMAnSIRQ_SIRQ3_LENGTH                              0x1
#define _DMAnSIRQ_SIRQ3_MASK                                0x8
#define _DMAnSIRQ_SIRQ4_POSN                                0x4
#define _DMAnSIRQ_SIRQ4_POSITION                            0x4
#define _DMAnSIRQ_SIRQ4_SIZE                                0x1
#define _DMAnSIRQ_SIRQ4_LENGTH                              0x1
#define _DMAnSIRQ_SIRQ4_MASK                                0x10
#define _DMAnSIRQ_SIRQ5_POSN                                0x5
#define _DMAnSIRQ_SIRQ5_POSITION                            0x5
#define _DMAnSIRQ_SIRQ5_SIZE                                0x1
#define _DMAnSIRQ_SIRQ5_LENGTH                              0x1
#define _DMAnSIRQ_SIRQ5_MASK                                0x20
#define _DMAnSIRQ_SIRQ6_POSN                                0x6
#define _DMAnSIRQ_SIRQ6_POSITION                            0x6
#define _DMAnSIRQ_SIRQ6_SIZE                                0x1
#define _DMAnSIRQ_SIRQ6_LENGTH                              0x1
#define _DMAnSIRQ_SIRQ6_MASK                                0x40
#define _DMAnSIRQ_SIRQ7_POSN                                0x7
#define _DMAnSIRQ_SIRQ7_POSITION                            0x7
#define _DMAnSIRQ_SIRQ7_SIZE                                0x1
#define _DMAnSIRQ_SIRQ7_LENGTH                              0x1
#define _DMAnSIRQ_SIRQ7_MASK                                0x80

// Register: NVMCON0
#define NVMCON0 NVMCON0
extern volatile unsigned char           NVMCON0             __at(0x058);
#ifndef _LIB_BUILD
asm("NVMCON0 equ 058h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GO                     :1;
    };
    struct {
        unsigned NOT_DONE               :1;
    };
    struct {
        unsigned nDONE                  :1;
    };
    struct {
        unsigned NVMGO                  :1;
    };
} NVMCON0bits_t;
extern volatile NVMCON0bits_t NVMCON0bits __at(0x058);
// bitfield macros
#define _NVMCON0_GO_POSN                                    0x0
#define _NVMCON0_GO_POSITION                                0x0
#define _NVMCON0_GO_SIZE                                    0x1
#define _NVMCON0_GO_LENGTH                                  0x1
#define _NVMCON0_GO_MASK                                    0x1
#define _NVMCON0_NOT_DONE_POSN                              0x0
#define _NVMCON0_NOT_DONE_POSITION                          0x0
#define _NVMCON0_NOT_DONE_SIZE                              0x1
#define _NVMCON0_NOT_DONE_LENGTH                            0x1
#define _NVMCON0_NOT_DONE_MASK                              0x1
#define _NVMCON0_nDONE_POSN                                 0x0
#define _NVMCON0_nDONE_POSITION                             0x0
#define _NVMCON0_nDONE_SIZE                                 0x1
#define _NVMCON0_nDONE_LENGTH                               0x1
#define _NVMCON0_nDONE_MASK                                 0x1
#define _NVMCON0_NVMGO_POSN                                 0x0
#define _NVMCON0_NVMGO_POSITION                             0x0
#define _NVMCON0_NVMGO_SIZE                                 0x1
#define _NVMCON0_NVMGO_LENGTH                               0x1
#define _NVMCON0_NVMGO_MASK                                 0x1

// Register: NVMCON1
#define NVMCON1 NVMCON1
extern volatile unsigned char           NVMCON1             __at(0x059);
#ifndef _LIB_BUILD
asm("NVMCON1 equ 059h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CMD                    :3;
        unsigned                        :4;
        unsigned WRERR                  :1;
    };
    struct {
        unsigned NVMCMD                 :3;
    };
} NVMCON1bits_t;
extern volatile NVMCON1bits_t NVMCON1bits __at(0x059);
// bitfield macros
#define _NVMCON1_CMD_POSN                                   0x0
#define _NVMCON1_CMD_POSITION                               0x0
#define _NVMCON1_CMD_SIZE                                   0x3
#define _NVMCON1_CMD_LENGTH                                 0x3
#define _NVMCON1_CMD_MASK                                   0x7
#define _NVMCON1_WRERR_POSN                                 0x7
#define _NVMCON1_WRERR_POSITION                             0x7
#define _NVMCON1_WRERR_SIZE                                 0x1
#define _NVMCON1_WRERR_LENGTH                               0x1
#define _NVMCON1_WRERR_MASK                                 0x80
#define _NVMCON1_NVMCMD_POSN                                0x0
#define _NVMCON1_NVMCMD_POSITION                            0x0
#define _NVMCON1_NVMCMD_SIZE                                0x3
#define _NVMCON1_NVMCMD_LENGTH                              0x3
#define _NVMCON1_NVMCMD_MASK                                0x7

// Register: NVMLOCK
#define NVMLOCK NVMLOCK
extern volatile unsigned char           NVMLOCK             __at(0x05A);
#ifndef _LIB_BUILD
asm("NVMLOCK equ 05Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LOCK                   :8;
    };
    struct {
        unsigned NVMLOCK                :8;
    };
} NVMLOCKbits_t;
extern volatile NVMLOCKbits_t NVMLOCKbits __at(0x05A);
// bitfield macros
#define _NVMLOCK_LOCK_POSN                                  0x0
#define _NVMLOCK_LOCK_POSITION                              0x0
#define _NVMLOCK_LOCK_SIZE                                  0x8
#define _NVMLOCK_LOCK_LENGTH                                0x8
#define _NVMLOCK_LOCK_MASK                                  0xFF
#define _NVMLOCK_NVMLOCK_POSN                               0x0
#define _NVMLOCK_NVMLOCK_POSITION                           0x0
#define _NVMLOCK_NVMLOCK_SIZE                               0x8
#define _NVMLOCK_NVMLOCK_LENGTH                             0x8
#define _NVMLOCK_NVMLOCK_MASK                               0xFF

// Register: NVMADR
#define NVMADR NVMADR
#ifndef __CCI__
extern volatile __uint24                NVMADR              __at(0x05B);
#endif
#ifndef _LIB_BUILD
asm("NVMADR equ 05Bh");
#endif

// Register: NVMADRL
#define NVMADRL NVMADRL
extern volatile unsigned char           NVMADRL             __at(0x05B);
#ifndef _LIB_BUILD
asm("NVMADRL equ 05Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMADRL                :8;
    };
    struct {
        unsigned NVMADR0                :1;
        unsigned NVMADR1                :1;
        unsigned NVMADR2                :1;
        unsigned NVMADR3                :1;
        unsigned NVMADR4                :1;
        unsigned NVMADR5                :1;
        unsigned NVMADR6                :1;
        unsigned NVMADR7                :1;
    };
} NVMADRLbits_t;
extern volatile NVMADRLbits_t NVMADRLbits __at(0x05B);
// bitfield macros
#define _NVMADRL_NVMADRL_POSN                               0x0
#define _NVMADRL_NVMADRL_POSITION                           0x0
#define _NVMADRL_NVMADRL_SIZE                               0x8
#define _NVMADRL_NVMADRL_LENGTH                             0x8
#define _NVMADRL_NVMADRL_MASK                               0xFF
#define _NVMADRL_NVMADR0_POSN                               0x0
#define _NVMADRL_NVMADR0_POSITION                           0x0
#define _NVMADRL_NVMADR0_SIZE                               0x1
#define _NVMADRL_NVMADR0_LENGTH                             0x1
#define _NVMADRL_NVMADR0_MASK                               0x1
#define _NVMADRL_NVMADR1_POSN                               0x1
#define _NVMADRL_NVMADR1_POSITION                           0x1
#define _NVMADRL_NVMADR1_SIZE                               0x1
#define _NVMADRL_NVMADR1_LENGTH                             0x1
#define _NVMADRL_NVMADR1_MASK                               0x2
#define _NVMADRL_NVMADR2_POSN                               0x2
#define _NVMADRL_NVMADR2_POSITION                           0x2
#define _NVMADRL_NVMADR2_SIZE                               0x1
#define _NVMADRL_NVMADR2_LENGTH                             0x1
#define _NVMADRL_NVMADR2_MASK                               0x4
#define _NVMADRL_NVMADR3_POSN                               0x3
#define _NVMADRL_NVMADR3_POSITION                           0x3
#define _NVMADRL_NVMADR3_SIZE                               0x1
#define _NVMADRL_NVMADR3_LENGTH                             0x1
#define _NVMADRL_NVMADR3_MASK                               0x8
#define _NVMADRL_NVMADR4_POSN                               0x4
#define _NVMADRL_NVMADR4_POSITION                           0x4
#define _NVMADRL_NVMADR4_SIZE                               0x1
#define _NVMADRL_NVMADR4_LENGTH                             0x1
#define _NVMADRL_NVMADR4_MASK                               0x10
#define _NVMADRL_NVMADR5_POSN                               0x5
#define _NVMADRL_NVMADR5_POSITION                           0x5
#define _NVMADRL_NVMADR5_SIZE                               0x1
#define _NVMADRL_NVMADR5_LENGTH                             0x1
#define _NVMADRL_NVMADR5_MASK                               0x20
#define _NVMADRL_NVMADR6_POSN                               0x6
#define _NVMADRL_NVMADR6_POSITION                           0x6
#define _NVMADRL_NVMADR6_SIZE                               0x1
#define _NVMADRL_NVMADR6_LENGTH                             0x1
#define _NVMADRL_NVMADR6_MASK                               0x40
#define _NVMADRL_NVMADR7_POSN                               0x7
#define _NVMADRL_NVMADR7_POSITION                           0x7
#define _NVMADRL_NVMADR7_SIZE                               0x1
#define _NVMADRL_NVMADR7_LENGTH                             0x1
#define _NVMADRL_NVMADR7_MASK                               0x80

// Register: NVMADRH
#define NVMADRH NVMADRH
extern volatile unsigned char           NVMADRH             __at(0x05C);
#ifndef _LIB_BUILD
asm("NVMADRH equ 05Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMADRH                :8;
    };
    struct {
        unsigned NVMADR8                :1;
        unsigned NVMADR9                :1;
        unsigned NVMADR10               :1;
        unsigned NVMADR11               :1;
        unsigned NVMADR12               :1;
        unsigned NVMADR13               :1;
        unsigned NVMADR14               :1;
        unsigned NVMADR15               :1;
    };
} NVMADRHbits_t;
extern volatile NVMADRHbits_t NVMADRHbits __at(0x05C);
// bitfield macros
#define _NVMADRH_NVMADRH_POSN                               0x0
#define _NVMADRH_NVMADRH_POSITION                           0x0
#define _NVMADRH_NVMADRH_SIZE                               0x8
#define _NVMADRH_NVMADRH_LENGTH                             0x8
#define _NVMADRH_NVMADRH_MASK                               0xFF
#define _NVMADRH_NVMADR8_POSN                               0x0
#define _NVMADRH_NVMADR8_POSITION                           0x0
#define _NVMADRH_NVMADR8_SIZE                               0x1
#define _NVMADRH_NVMADR8_LENGTH                             0x1
#define _NVMADRH_NVMADR8_MASK                               0x1
#define _NVMADRH_NVMADR9_POSN                               0x1
#define _NVMADRH_NVMADR9_POSITION                           0x1
#define _NVMADRH_NVMADR9_SIZE                               0x1
#define _NVMADRH_NVMADR9_LENGTH                             0x1
#define _NVMADRH_NVMADR9_MASK                               0x2
#define _NVMADRH_NVMADR10_POSN                              0x2
#define _NVMADRH_NVMADR10_POSITION                          0x2
#define _NVMADRH_NVMADR10_SIZE                              0x1
#define _NVMADRH_NVMADR10_LENGTH                            0x1
#define _NVMADRH_NVMADR10_MASK                              0x4
#define _NVMADRH_NVMADR11_POSN                              0x3
#define _NVMADRH_NVMADR11_POSITION                          0x3
#define _NVMADRH_NVMADR11_SIZE                              0x1
#define _NVMADRH_NVMADR11_LENGTH                            0x1
#define _NVMADRH_NVMADR11_MASK                              0x8
#define _NVMADRH_NVMADR12_POSN                              0x4
#define _NVMADRH_NVMADR12_POSITION                          0x4
#define _NVMADRH_NVMADR12_SIZE                              0x1
#define _NVMADRH_NVMADR12_LENGTH                            0x1
#define _NVMADRH_NVMADR12_MASK                              0x10
#define _NVMADRH_NVMADR13_POSN                              0x5
#define _NVMADRH_NVMADR13_POSITION                          0x5
#define _NVMADRH_NVMADR13_SIZE                              0x1
#define _NVMADRH_NVMADR13_LENGTH                            0x1
#define _NVMADRH_NVMADR13_MASK                              0x20
#define _NVMADRH_NVMADR14_POSN                              0x6
#define _NVMADRH_NVMADR14_POSITION                          0x6
#define _NVMADRH_NVMADR14_SIZE                              0x1
#define _NVMADRH_NVMADR14_LENGTH                            0x1
#define _NVMADRH_NVMADR14_MASK                              0x40
#define _NVMADRH_NVMADR15_POSN                              0x7
#define _NVMADRH_NVMADR15_POSITION                          0x7
#define _NVMADRH_NVMADR15_SIZE                              0x1
#define _NVMADRH_NVMADR15_LENGTH                            0x1
#define _NVMADRH_NVMADR15_MASK                              0x80

// Register: NVMADRU
#define NVMADRU NVMADRU
extern volatile unsigned char           NVMADRU             __at(0x05D);
#ifndef _LIB_BUILD
asm("NVMADRU equ 05Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMADRU                :6;
    };
    struct {
        unsigned NVMADR16               :1;
        unsigned NVMADR17               :1;
        unsigned NVMADR18               :1;
        unsigned NVMADR19               :1;
        unsigned NVMADR20               :1;
        unsigned NVMADR21               :1;
    };
} NVMADRUbits_t;
extern volatile NVMADRUbits_t NVMADRUbits __at(0x05D);
// bitfield macros
#define _NVMADRU_NVMADRU_POSN                               0x0
#define _NVMADRU_NVMADRU_POSITION                           0x0
#define _NVMADRU_NVMADRU_SIZE                               0x6
#define _NVMADRU_NVMADRU_LENGTH                             0x6
#define _NVMADRU_NVMADRU_MASK                               0x3F
#define _NVMADRU_NVMADR16_POSN                              0x0
#define _NVMADRU_NVMADR16_POSITION                          0x0
#define _NVMADRU_NVMADR16_SIZE                              0x1
#define _NVMADRU_NVMADR16_LENGTH                            0x1
#define _NVMADRU_NVMADR16_MASK                              0x1
#define _NVMADRU_NVMADR17_POSN                              0x1
#define _NVMADRU_NVMADR17_POSITION                          0x1
#define _NVMADRU_NVMADR17_SIZE                              0x1
#define _NVMADRU_NVMADR17_LENGTH                            0x1
#define _NVMADRU_NVMADR17_MASK                              0x2
#define _NVMADRU_NVMADR18_POSN                              0x2
#define _NVMADRU_NVMADR18_POSITION                          0x2
#define _NVMADRU_NVMADR18_SIZE                              0x1
#define _NVMADRU_NVMADR18_LENGTH                            0x1
#define _NVMADRU_NVMADR18_MASK                              0x4
#define _NVMADRU_NVMADR19_POSN                              0x3
#define _NVMADRU_NVMADR19_POSITION                          0x3
#define _NVMADRU_NVMADR19_SIZE                              0x1
#define _NVMADRU_NVMADR19_LENGTH                            0x1
#define _NVMADRU_NVMADR19_MASK                              0x8
#define _NVMADRU_NVMADR20_POSN                              0x4
#define _NVMADRU_NVMADR20_POSITION                          0x4
#define _NVMADRU_NVMADR20_SIZE                              0x1
#define _NVMADRU_NVMADR20_LENGTH                            0x1
#define _NVMADRU_NVMADR20_MASK                              0x10
#define _NVMADRU_NVMADR21_POSN                              0x5
#define _NVMADRU_NVMADR21_POSITION                          0x5
#define _NVMADRU_NVMADR21_SIZE                              0x1
#define _NVMADRU_NVMADR21_LENGTH                            0x1
#define _NVMADRU_NVMADR21_MASK                              0x20

// Register: NVMDAT
#define NVMDAT NVMDAT
extern volatile unsigned short          NVMDAT              __at(0x05E);
#ifndef _LIB_BUILD
asm("NVMDAT equ 05Eh");
#endif

// Register: NVMDATL
#define NVMDATL NVMDATL
extern volatile unsigned char           NVMDATL             __at(0x05E);
#ifndef _LIB_BUILD
asm("NVMDATL equ 05Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMDATL                :8;
    };
    struct {
        unsigned NVMDAT0                :1;
        unsigned NVMDAT1                :1;
        unsigned NVMDAT2                :1;
        unsigned NVMDAT3                :1;
        unsigned NVMDAT4                :1;
        unsigned NVMDAT5                :1;
        unsigned NVMDAT6                :1;
        unsigned NVMDAT7                :1;
    };
} NVMDATLbits_t;
extern volatile NVMDATLbits_t NVMDATLbits __at(0x05E);
// bitfield macros
#define _NVMDATL_NVMDATL_POSN                               0x0
#define _NVMDATL_NVMDATL_POSITION                           0x0
#define _NVMDATL_NVMDATL_SIZE                               0x8
#define _NVMDATL_NVMDATL_LENGTH                             0x8
#define _NVMDATL_NVMDATL_MASK                               0xFF
#define _NVMDATL_NVMDAT0_POSN                               0x0
#define _NVMDATL_NVMDAT0_POSITION                           0x0
#define _NVMDATL_NVMDAT0_SIZE                               0x1
#define _NVMDATL_NVMDAT0_LENGTH                             0x1
#define _NVMDATL_NVMDAT0_MASK                               0x1
#define _NVMDATL_NVMDAT1_POSN                               0x1
#define _NVMDATL_NVMDAT1_POSITION                           0x1
#define _NVMDATL_NVMDAT1_SIZE                               0x1
#define _NVMDATL_NVMDAT1_LENGTH                             0x1
#define _NVMDATL_NVMDAT1_MASK                               0x2
#define _NVMDATL_NVMDAT2_POSN                               0x2
#define _NVMDATL_NVMDAT2_POSITION                           0x2
#define _NVMDATL_NVMDAT2_SIZE                               0x1
#define _NVMDATL_NVMDAT2_LENGTH                             0x1
#define _NVMDATL_NVMDAT2_MASK                               0x4
#define _NVMDATL_NVMDAT3_POSN                               0x3
#define _NVMDATL_NVMDAT3_POSITION                           0x3
#define _NVMDATL_NVMDAT3_SIZE                               0x1
#define _NVMDATL_NVMDAT3_LENGTH                             0x1
#define _NVMDATL_NVMDAT3_MASK                               0x8
#define _NVMDATL_NVMDAT4_POSN                               0x4
#define _NVMDATL_NVMDAT4_POSITION                           0x4
#define _NVMDATL_NVMDAT4_SIZE                               0x1
#define _NVMDATL_NVMDAT4_LENGTH                             0x1
#define _NVMDATL_NVMDAT4_MASK                               0x10
#define _NVMDATL_NVMDAT5_POSN                               0x5
#define _NVMDATL_NVMDAT5_POSITION                           0x5
#define _NVMDATL_NVMDAT5_SIZE                               0x1
#define _NVMDATL_NVMDAT5_LENGTH                             0x1
#define _NVMDATL_NVMDAT5_MASK                               0x20
#define _NVMDATL_NVMDAT6_POSN                               0x6
#define _NVMDATL_NVMDAT6_POSITION                           0x6
#define _NVMDATL_NVMDAT6_SIZE                               0x1
#define _NVMDATL_NVMDAT6_LENGTH                             0x1
#define _NVMDATL_NVMDAT6_MASK                               0x40
#define _NVMDATL_NVMDAT7_POSN                               0x7
#define _NVMDATL_NVMDAT7_POSITION                           0x7
#define _NVMDATL_NVMDAT7_SIZE                               0x1
#define _NVMDATL_NVMDAT7_LENGTH                             0x1
#define _NVMDATL_NVMDAT7_MASK                               0x80

// Register: NVMDATH
#define NVMDATH NVMDATH
extern volatile unsigned char           NVMDATH             __at(0x05F);
#ifndef _LIB_BUILD
asm("NVMDATH equ 05Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NVMDATH                :8;
    };
    struct {
        unsigned NVMDAT8                :1;
        unsigned NVMDAT9                :1;
        unsigned NVMDAT10               :1;
        unsigned NVMDAT11               :1;
        unsigned NVMDAT12               :1;
        unsigned NVMDAT13               :1;
        unsigned NVMDAT14               :1;
        unsigned NVMDAT15               :1;
    };
} NVMDATHbits_t;
extern volatile NVMDATHbits_t NVMDATHbits __at(0x05F);
// bitfield macros
#define _NVMDATH_NVMDATH_POSN                               0x0
#define _NVMDATH_NVMDATH_POSITION                           0x0
#define _NVMDATH_NVMDATH_SIZE                               0x8
#define _NVMDATH_NVMDATH_LENGTH                             0x8
#define _NVMDATH_NVMDATH_MASK                               0xFF
#define _NVMDATH_NVMDAT8_POSN                               0x0
#define _NVMDATH_NVMDAT8_POSITION                           0x0
#define _NVMDATH_NVMDAT8_SIZE                               0x1
#define _NVMDATH_NVMDAT8_LENGTH                             0x1
#define _NVMDATH_NVMDAT8_MASK                               0x1
#define _NVMDATH_NVMDAT9_POSN                               0x1
#define _NVMDATH_NVMDAT9_POSITION                           0x1
#define _NVMDATH_NVMDAT9_SIZE                               0x1
#define _NVMDATH_NVMDAT9_LENGTH                             0x1
#define _NVMDATH_NVMDAT9_MASK                               0x2
#define _NVMDATH_NVMDAT10_POSN                              0x2
#define _NVMDATH_NVMDAT10_POSITION                          0x2
#define _NVMDATH_NVMDAT10_SIZE                              0x1
#define _NVMDATH_NVMDAT10_LENGTH                            0x1
#define _NVMDATH_NVMDAT10_MASK                              0x4
#define _NVMDATH_NVMDAT11_POSN                              0x3
#define _NVMDATH_NVMDAT11_POSITION                          0x3
#define _NVMDATH_NVMDAT11_SIZE                              0x1
#define _NVMDATH_NVMDAT11_LENGTH                            0x1
#define _NVMDATH_NVMDAT11_MASK                              0x8
#define _NVMDATH_NVMDAT12_POSN                              0x4
#define _NVMDATH_NVMDAT12_POSITION                          0x4
#define _NVMDATH_NVMDAT12_SIZE                              0x1
#define _NVMDATH_NVMDAT12_LENGTH                            0x1
#define _NVMDATH_NVMDAT12_MASK                              0x10
#define _NVMDATH_NVMDAT13_POSN                              0x5
#define _NVMDATH_NVMDAT13_POSITION                          0x5
#define _NVMDATH_NVMDAT13_SIZE                              0x1
#define _NVMDATH_NVMDAT13_LENGTH                            0x1
#define _NVMDATH_NVMDAT13_MASK                              0x20
#define _NVMDATH_NVMDAT14_POSN                              0x6
#define _NVMDATH_NVMDAT14_POSITION                          0x6
#define _NVMDATH_NVMDAT14_SIZE                              0x1
#define _NVMDATH_NVMDAT14_LENGTH                            0x1
#define _NVMDATH_NVMDAT14_MASK                              0x40
#define _NVMDATH_NVMDAT15_POSN                              0x7
#define _NVMDATH_NVMDAT15_POSITION                          0x7
#define _NVMDATH_NVMDAT15_SIZE                              0x1
#define _NVMDATH_NVMDAT15_LENGTH                            0x1
#define _NVMDATH_NVMDAT15_MASK                              0x80

// Register: CRCDATA
#define CRCDATA CRCDATA
extern volatile unsigned long           CRCDATA             __at(0x060);
#ifndef _LIB_BUILD
asm("CRCDATA equ 060h");
#endif

// Register: CRCDATAL
#define CRCDATAL CRCDATAL
extern volatile unsigned char           CRCDATAL            __at(0x060);
#ifndef _LIB_BUILD
asm("CRCDATAL equ 060h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DATA                   :8;
    };
    struct {
        unsigned DATA0                  :1;
        unsigned DATA1                  :1;
        unsigned DATA2                  :1;
        unsigned DATA3                  :1;
        unsigned DATA4                  :1;
        unsigned DATA5                  :1;
        unsigned DATA6                  :1;
        unsigned DATA7                  :1;
    };
} CRCDATALbits_t;
extern volatile CRCDATALbits_t CRCDATALbits __at(0x060);
// bitfield macros
#define _CRCDATAL_DATA_POSN                                 0x0
#define _CRCDATAL_DATA_POSITION                             0x0
#define _CRCDATAL_DATA_SIZE                                 0x8
#define _CRCDATAL_DATA_LENGTH                               0x8
#define _CRCDATAL_DATA_MASK                                 0xFF
#define _CRCDATAL_DATA0_POSN                                0x0
#define _CRCDATAL_DATA0_POSITION                            0x0
#define _CRCDATAL_DATA0_SIZE                                0x1
#define _CRCDATAL_DATA0_LENGTH                              0x1
#define _CRCDATAL_DATA0_MASK                                0x1
#define _CRCDATAL_DATA1_POSN                                0x1
#define _CRCDATAL_DATA1_POSITION                            0x1
#define _CRCDATAL_DATA1_SIZE                                0x1
#define _CRCDATAL_DATA1_LENGTH                              0x1
#define _CRCDATAL_DATA1_MASK                                0x2
#define _CRCDATAL_DATA2_POSN                                0x2
#define _CRCDATAL_DATA2_POSITION                            0x2
#define _CRCDATAL_DATA2_SIZE                                0x1
#define _CRCDATAL_DATA2_LENGTH                              0x1
#define _CRCDATAL_DATA2_MASK                                0x4
#define _CRCDATAL_DATA3_POSN                                0x3
#define _CRCDATAL_DATA3_POSITION                            0x3
#define _CRCDATAL_DATA3_SIZE                                0x1
#define _CRCDATAL_DATA3_LENGTH                              0x1
#define _CRCDATAL_DATA3_MASK                                0x8
#define _CRCDATAL_DATA4_POSN                                0x4
#define _CRCDATAL_DATA4_POSITION                            0x4
#define _CRCDATAL_DATA4_SIZE                                0x1
#define _CRCDATAL_DATA4_LENGTH                              0x1
#define _CRCDATAL_DATA4_MASK                                0x10
#define _CRCDATAL_DATA5_POSN                                0x5
#define _CRCDATAL_DATA5_POSITION                            0x5
#define _CRCDATAL_DATA5_SIZE                                0x1
#define _CRCDATAL_DATA5_LENGTH                              0x1
#define _CRCDATAL_DATA5_MASK                                0x20
#define _CRCDATAL_DATA6_POSN                                0x6
#define _CRCDATAL_DATA6_POSITION                            0x6
#define _CRCDATAL_DATA6_SIZE                                0x1
#define _CRCDATAL_DATA6_LENGTH                              0x1
#define _CRCDATAL_DATA6_MASK                                0x40
#define _CRCDATAL_DATA7_POSN                                0x7
#define _CRCDATAL_DATA7_POSITION                            0x7
#define _CRCDATAL_DATA7_SIZE                                0x1
#define _CRCDATAL_DATA7_LENGTH                              0x1
#define _CRCDATAL_DATA7_MASK                                0x80

// Register: CRCDATAH
#define CRCDATAH CRCDATAH
extern volatile unsigned char           CRCDATAH            __at(0x061);
#ifndef _LIB_BUILD
asm("CRCDATAH equ 061h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DATA                   :8;
    };
    struct {
        unsigned DATA8                  :1;
        unsigned DATA9                  :1;
        unsigned DATA10                 :1;
        unsigned DATA11                 :1;
        unsigned DATA12                 :1;
        unsigned DATA13                 :1;
        unsigned DATA14                 :1;
        unsigned DATA15                 :1;
    };
} CRCDATAHbits_t;
extern volatile CRCDATAHbits_t CRCDATAHbits __at(0x061);
// bitfield macros
#define _CRCDATAH_DATA_POSN                                 0x0
#define _CRCDATAH_DATA_POSITION                             0x0
#define _CRCDATAH_DATA_SIZE                                 0x8
#define _CRCDATAH_DATA_LENGTH                               0x8
#define _CRCDATAH_DATA_MASK                                 0xFF
#define _CRCDATAH_DATA8_POSN                                0x0
#define _CRCDATAH_DATA8_POSITION                            0x0
#define _CRCDATAH_DATA8_SIZE                                0x1
#define _CRCDATAH_DATA8_LENGTH                              0x1
#define _CRCDATAH_DATA8_MASK                                0x1
#define _CRCDATAH_DATA9_POSN                                0x1
#define _CRCDATAH_DATA9_POSITION                            0x1
#define _CRCDATAH_DATA9_SIZE                                0x1
#define _CRCDATAH_DATA9_LENGTH                              0x1
#define _CRCDATAH_DATA9_MASK                                0x2
#define _CRCDATAH_DATA10_POSN                               0x2
#define _CRCDATAH_DATA10_POSITION                           0x2
#define _CRCDATAH_DATA10_SIZE                               0x1
#define _CRCDATAH_DATA10_LENGTH                             0x1
#define _CRCDATAH_DATA10_MASK                               0x4
#define _CRCDATAH_DATA11_POSN                               0x3
#define _CRCDATAH_DATA11_POSITION                           0x3
#define _CRCDATAH_DATA11_SIZE                               0x1
#define _CRCDATAH_DATA11_LENGTH                             0x1
#define _CRCDATAH_DATA11_MASK                               0x8
#define _CRCDATAH_DATA12_POSN                               0x4
#define _CRCDATAH_DATA12_POSITION                           0x4
#define _CRCDATAH_DATA12_SIZE                               0x1
#define _CRCDATAH_DATA12_LENGTH                             0x1
#define _CRCDATAH_DATA12_MASK                               0x10
#define _CRCDATAH_DATA13_POSN                               0x5
#define _CRCDATAH_DATA13_POSITION                           0x5
#define _CRCDATAH_DATA13_SIZE                               0x1
#define _CRCDATAH_DATA13_LENGTH                             0x1
#define _CRCDATAH_DATA13_MASK                               0x20
#define _CRCDATAH_DATA14_POSN                               0x6
#define _CRCDATAH_DATA14_POSITION                           0x6
#define _CRCDATAH_DATA14_SIZE                               0x1
#define _CRCDATAH_DATA14_LENGTH                             0x1
#define _CRCDATAH_DATA14_MASK                               0x40
#define _CRCDATAH_DATA15_POSN                               0x7
#define _CRCDATAH_DATA15_POSITION                           0x7
#define _CRCDATAH_DATA15_SIZE                               0x1
#define _CRCDATAH_DATA15_LENGTH                             0x1
#define _CRCDATAH_DATA15_MASK                               0x80

// Register: CRCDATAU
#define CRCDATAU CRCDATAU
extern volatile unsigned char           CRCDATAU            __at(0x062);
#ifndef _LIB_BUILD
asm("CRCDATAU equ 062h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DATA                   :8;
    };
    struct {
        unsigned DATA16                 :1;
        unsigned DATA17                 :1;
        unsigned DATA18                 :1;
        unsigned DATA19                 :1;
        unsigned DATA20                 :1;
        unsigned DATA21                 :1;
        unsigned DATA22                 :1;
        unsigned DATA23                 :1;
    };
} CRCDATAUbits_t;
extern volatile CRCDATAUbits_t CRCDATAUbits __at(0x062);
// bitfield macros
#define _CRCDATAU_DATA_POSN                                 0x0
#define _CRCDATAU_DATA_POSITION                             0x0
#define _CRCDATAU_DATA_SIZE                                 0x8
#define _CRCDATAU_DATA_LENGTH                               0x8
#define _CRCDATAU_DATA_MASK                                 0xFF
#define _CRCDATAU_DATA16_POSN                               0x0
#define _CRCDATAU_DATA16_POSITION                           0x0
#define _CRCDATAU_DATA16_SIZE                               0x1
#define _CRCDATAU_DATA16_LENGTH                             0x1
#define _CRCDATAU_DATA16_MASK                               0x1
#define _CRCDATAU_DATA17_POSN                               0x1
#define _CRCDATAU_DATA17_POSITION                           0x1
#define _CRCDATAU_DATA17_SIZE                               0x1
#define _CRCDATAU_DATA17_LENGTH                             0x1
#define _CRCDATAU_DATA17_MASK                               0x2
#define _CRCDATAU_DATA18_POSN                               0x2
#define _CRCDATAU_DATA18_POSITION                           0x2
#define _CRCDATAU_DATA18_SIZE                               0x1
#define _CRCDATAU_DATA18_LENGTH                             0x1
#define _CRCDATAU_DATA18_MASK                               0x4
#define _CRCDATAU_DATA19_POSN                               0x3
#define _CRCDATAU_DATA19_POSITION                           0x3
#define _CRCDATAU_DATA19_SIZE                               0x1
#define _CRCDATAU_DATA19_LENGTH                             0x1
#define _CRCDATAU_DATA19_MASK                               0x8
#define _CRCDATAU_DATA20_POSN                               0x4
#define _CRCDATAU_DATA20_POSITION                           0x4
#define _CRCDATAU_DATA20_SIZE                               0x1
#define _CRCDATAU_DATA20_LENGTH                             0x1
#define _CRCDATAU_DATA20_MASK                               0x10
#define _CRCDATAU_DATA21_POSN                               0x5
#define _CRCDATAU_DATA21_POSITION                           0x5
#define _CRCDATAU_DATA21_SIZE                               0x1
#define _CRCDATAU_DATA21_LENGTH                             0x1
#define _CRCDATAU_DATA21_MASK                               0x20
#define _CRCDATAU_DATA22_POSN                               0x6
#define _CRCDATAU_DATA22_POSITION                           0x6
#define _CRCDATAU_DATA22_SIZE                               0x1
#define _CRCDATAU_DATA22_LENGTH                             0x1
#define _CRCDATAU_DATA22_MASK                               0x40
#define _CRCDATAU_DATA23_POSN                               0x7
#define _CRCDATAU_DATA23_POSITION                           0x7
#define _CRCDATAU_DATA23_SIZE                               0x1
#define _CRCDATAU_DATA23_LENGTH                             0x1
#define _CRCDATAU_DATA23_MASK                               0x80

// Register: CRCDATAT
#define CRCDATAT CRCDATAT
extern volatile unsigned char           CRCDATAT            __at(0x063);
#ifndef _LIB_BUILD
asm("CRCDATAT equ 063h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DATA                   :8;
    };
    struct {
        unsigned DATA24                 :1;
        unsigned DATA25                 :1;
        unsigned DATA26                 :1;
        unsigned DATA27                 :1;
        unsigned DATA28                 :1;
        unsigned DATA29                 :1;
        unsigned DATA30                 :1;
        unsigned DATA31                 :1;
    };
} CRCDATATbits_t;
extern volatile CRCDATATbits_t CRCDATATbits __at(0x063);
// bitfield macros
#define _CRCDATAT_DATA_POSN                                 0x0
#define _CRCDATAT_DATA_POSITION                             0x0
#define _CRCDATAT_DATA_SIZE                                 0x8
#define _CRCDATAT_DATA_LENGTH                               0x8
#define _CRCDATAT_DATA_MASK                                 0xFF
#define _CRCDATAT_DATA24_POSN                               0x0
#define _CRCDATAT_DATA24_POSITION                           0x0
#define _CRCDATAT_DATA24_SIZE                               0x1
#define _CRCDATAT_DATA24_LENGTH                             0x1
#define _CRCDATAT_DATA24_MASK                               0x1
#define _CRCDATAT_DATA25_POSN                               0x1
#define _CRCDATAT_DATA25_POSITION                           0x1
#define _CRCDATAT_DATA25_SIZE                               0x1
#define _CRCDATAT_DATA25_LENGTH                             0x1
#define _CRCDATAT_DATA25_MASK                               0x2
#define _CRCDATAT_DATA26_POSN                               0x2
#define _CRCDATAT_DATA26_POSITION                           0x2
#define _CRCDATAT_DATA26_SIZE                               0x1
#define _CRCDATAT_DATA26_LENGTH                             0x1
#define _CRCDATAT_DATA26_MASK                               0x4
#define _CRCDATAT_DATA27_POSN                               0x3
#define _CRCDATAT_DATA27_POSITION                           0x3
#define _CRCDATAT_DATA27_SIZE                               0x1
#define _CRCDATAT_DATA27_LENGTH                             0x1
#define _CRCDATAT_DATA27_MASK                               0x8
#define _CRCDATAT_DATA28_POSN                               0x4
#define _CRCDATAT_DATA28_POSITION                           0x4
#define _CRCDATAT_DATA28_SIZE                               0x1
#define _CRCDATAT_DATA28_LENGTH                             0x1
#define _CRCDATAT_DATA28_MASK                               0x10
#define _CRCDATAT_DATA29_POSN                               0x5
#define _CRCDATAT_DATA29_POSITION                           0x5
#define _CRCDATAT_DATA29_SIZE                               0x1
#define _CRCDATAT_DATA29_LENGTH                             0x1
#define _CRCDATAT_DATA29_MASK                               0x20
#define _CRCDATAT_DATA30_POSN                               0x6
#define _CRCDATAT_DATA30_POSITION                           0x6
#define _CRCDATAT_DATA30_SIZE                               0x1
#define _CRCDATAT_DATA30_LENGTH                             0x1
#define _CRCDATAT_DATA30_MASK                               0x40
#define _CRCDATAT_DATA31_POSN                               0x7
#define _CRCDATAT_DATA31_POSITION                           0x7
#define _CRCDATAT_DATA31_SIZE                               0x1
#define _CRCDATAT_DATA31_LENGTH                             0x1
#define _CRCDATAT_DATA31_MASK                               0x80

// Register: CRCOUT
#define CRCOUT CRCOUT
extern volatile unsigned long           CRCOUT              __at(0x064);
#ifndef _LIB_BUILD
asm("CRCOUT equ 064h");
#endif
// aliases
extern volatile unsigned long           CRCSHFT             __at(0x064);
#ifndef _LIB_BUILD
asm("CRCSHFT equ 064h");
#endif
extern volatile unsigned long           CRCXOR              __at(0x064);
#ifndef _LIB_BUILD
asm("CRCXOR equ 064h");
#endif

// Register: CRCOUTL
#define CRCOUTL CRCOUTL
extern volatile unsigned char           CRCOUTL             __at(0x064);
#ifndef _LIB_BUILD
asm("CRCOUTL equ 064h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUT                    :8;
    };
    struct {
        unsigned OUT0                   :1;
        unsigned OUT1                   :1;
        unsigned OUT2                   :1;
        unsigned OUT3                   :1;
        unsigned OUT4                   :1;
        unsigned OUT5                   :1;
        unsigned OUT6                   :1;
        unsigned OUT7                   :1;
    };
} CRCOUTLbits_t;
extern volatile CRCOUTLbits_t CRCOUTLbits __at(0x064);
// bitfield macros
#define _CRCOUTL_OUT_POSN                                   0x0
#define _CRCOUTL_OUT_POSITION                               0x0
#define _CRCOUTL_OUT_SIZE                                   0x8
#define _CRCOUTL_OUT_LENGTH                                 0x8
#define _CRCOUTL_OUT_MASK                                   0xFF
#define _CRCOUTL_OUT0_POSN                                  0x0
#define _CRCOUTL_OUT0_POSITION                              0x0
#define _CRCOUTL_OUT0_SIZE                                  0x1
#define _CRCOUTL_OUT0_LENGTH                                0x1
#define _CRCOUTL_OUT0_MASK                                  0x1
#define _CRCOUTL_OUT1_POSN                                  0x1
#define _CRCOUTL_OUT1_POSITION                              0x1
#define _CRCOUTL_OUT1_SIZE                                  0x1
#define _CRCOUTL_OUT1_LENGTH                                0x1
#define _CRCOUTL_OUT1_MASK                                  0x2
#define _CRCOUTL_OUT2_POSN                                  0x2
#define _CRCOUTL_OUT2_POSITION                              0x2
#define _CRCOUTL_OUT2_SIZE                                  0x1
#define _CRCOUTL_OUT2_LENGTH                                0x1
#define _CRCOUTL_OUT2_MASK                                  0x4
#define _CRCOUTL_OUT3_POSN                                  0x3
#define _CRCOUTL_OUT3_POSITION                              0x3
#define _CRCOUTL_OUT3_SIZE                                  0x1
#define _CRCOUTL_OUT3_LENGTH                                0x1
#define _CRCOUTL_OUT3_MASK                                  0x8
#define _CRCOUTL_OUT4_POSN                                  0x4
#define _CRCOUTL_OUT4_POSITION                              0x4
#define _CRCOUTL_OUT4_SIZE                                  0x1
#define _CRCOUTL_OUT4_LENGTH                                0x1
#define _CRCOUTL_OUT4_MASK                                  0x10
#define _CRCOUTL_OUT5_POSN                                  0x5
#define _CRCOUTL_OUT5_POSITION                              0x5
#define _CRCOUTL_OUT5_SIZE                                  0x1
#define _CRCOUTL_OUT5_LENGTH                                0x1
#define _CRCOUTL_OUT5_MASK                                  0x20
#define _CRCOUTL_OUT6_POSN                                  0x6
#define _CRCOUTL_OUT6_POSITION                              0x6
#define _CRCOUTL_OUT6_SIZE                                  0x1
#define _CRCOUTL_OUT6_LENGTH                                0x1
#define _CRCOUTL_OUT6_MASK                                  0x40
#define _CRCOUTL_OUT7_POSN                                  0x7
#define _CRCOUTL_OUT7_POSITION                              0x7
#define _CRCOUTL_OUT7_SIZE                                  0x1
#define _CRCOUTL_OUT7_LENGTH                                0x1
#define _CRCOUTL_OUT7_MASK                                  0x80

// Register: CRCSHFTL
#define CRCSHFTL CRCSHFTL
extern volatile unsigned char           CRCSHFTL            __at(0x064);
#ifndef _LIB_BUILD
asm("CRCSHFTL equ 064h");
#endif
// aliases
extern volatile unsigned char           CRCSHIFTL           __at(0x064);
#ifndef _LIB_BUILD
asm("CRCSHIFTL equ 064h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHIFT                  :8;
    };
    struct {
        unsigned SHIFT0                 :1;
        unsigned SHIFT1                 :1;
        unsigned SHIFT2                 :1;
        unsigned SHIFT3                 :1;
        unsigned SHIFT4                 :1;
        unsigned SHIFT5                 :1;
        unsigned SHIFT6                 :1;
        unsigned SHIFT7                 :1;
    };
} CRCSHFTLbits_t;
extern volatile CRCSHFTLbits_t CRCSHFTLbits __at(0x064);
// bitfield macros
#define _CRCSHFTL_SHIFT_POSN                                0x0
#define _CRCSHFTL_SHIFT_POSITION                            0x0
#define _CRCSHFTL_SHIFT_SIZE                                0x8
#define _CRCSHFTL_SHIFT_LENGTH                              0x8
#define _CRCSHFTL_SHIFT_MASK                                0xFF
#define _CRCSHFTL_SHIFT0_POSN                               0x0
#define _CRCSHFTL_SHIFT0_POSITION                           0x0
#define _CRCSHFTL_SHIFT0_SIZE                               0x1
#define _CRCSHFTL_SHIFT0_LENGTH                             0x1
#define _CRCSHFTL_SHIFT0_MASK                               0x1
#define _CRCSHFTL_SHIFT1_POSN                               0x1
#define _CRCSHFTL_SHIFT1_POSITION                           0x1
#define _CRCSHFTL_SHIFT1_SIZE                               0x1
#define _CRCSHFTL_SHIFT1_LENGTH                             0x1
#define _CRCSHFTL_SHIFT1_MASK                               0x2
#define _CRCSHFTL_SHIFT2_POSN                               0x2
#define _CRCSHFTL_SHIFT2_POSITION                           0x2
#define _CRCSHFTL_SHIFT2_SIZE                               0x1
#define _CRCSHFTL_SHIFT2_LENGTH                             0x1
#define _CRCSHFTL_SHIFT2_MASK                               0x4
#define _CRCSHFTL_SHIFT3_POSN                               0x3
#define _CRCSHFTL_SHIFT3_POSITION                           0x3
#define _CRCSHFTL_SHIFT3_SIZE                               0x1
#define _CRCSHFTL_SHIFT3_LENGTH                             0x1
#define _CRCSHFTL_SHIFT3_MASK                               0x8
#define _CRCSHFTL_SHIFT4_POSN                               0x4
#define _CRCSHFTL_SHIFT4_POSITION                           0x4
#define _CRCSHFTL_SHIFT4_SIZE                               0x1
#define _CRCSHFTL_SHIFT4_LENGTH                             0x1
#define _CRCSHFTL_SHIFT4_MASK                               0x10
#define _CRCSHFTL_SHIFT5_POSN                               0x5
#define _CRCSHFTL_SHIFT5_POSITION                           0x5
#define _CRCSHFTL_SHIFT5_SIZE                               0x1
#define _CRCSHFTL_SHIFT5_LENGTH                             0x1
#define _CRCSHFTL_SHIFT5_MASK                               0x20
#define _CRCSHFTL_SHIFT6_POSN                               0x6
#define _CRCSHFTL_SHIFT6_POSITION                           0x6
#define _CRCSHFTL_SHIFT6_SIZE                               0x1
#define _CRCSHFTL_SHIFT6_LENGTH                             0x1
#define _CRCSHFTL_SHIFT6_MASK                               0x40
#define _CRCSHFTL_SHIFT7_POSN                               0x7
#define _CRCSHFTL_SHIFT7_POSITION                           0x7
#define _CRCSHFTL_SHIFT7_SIZE                               0x1
#define _CRCSHFTL_SHIFT7_LENGTH                             0x1
#define _CRCSHFTL_SHIFT7_MASK                               0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned SHIFT                  :8;
    };
    struct {
        unsigned SHIFT0                 :1;
        unsigned SHIFT1                 :1;
        unsigned SHIFT2                 :1;
        unsigned SHIFT3                 :1;
        unsigned SHIFT4                 :1;
        unsigned SHIFT5                 :1;
        unsigned SHIFT6                 :1;
        unsigned SHIFT7                 :1;
    };
} CRCSHIFTLbits_t;
extern volatile CRCSHIFTLbits_t CRCSHIFTLbits __at(0x064);
// bitfield macros
#define _CRCSHIFTL_SHIFT_POSN                               0x0
#define _CRCSHIFTL_SHIFT_POSITION                           0x0
#define _CRCSHIFTL_SHIFT_SIZE                               0x8
#define _CRCSHIFTL_SHIFT_LENGTH                             0x8
#define _CRCSHIFTL_SHIFT_MASK                               0xFF
#define _CRCSHIFTL_SHIFT0_POSN                              0x0
#define _CRCSHIFTL_SHIFT0_POSITION                          0x0
#define _CRCSHIFTL_SHIFT0_SIZE                              0x1
#define _CRCSHIFTL_SHIFT0_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT0_MASK                              0x1
#define _CRCSHIFTL_SHIFT1_POSN                              0x1
#define _CRCSHIFTL_SHIFT1_POSITION                          0x1
#define _CRCSHIFTL_SHIFT1_SIZE                              0x1
#define _CRCSHIFTL_SHIFT1_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT1_MASK                              0x2
#define _CRCSHIFTL_SHIFT2_POSN                              0x2
#define _CRCSHIFTL_SHIFT2_POSITION                          0x2
#define _CRCSHIFTL_SHIFT2_SIZE                              0x1
#define _CRCSHIFTL_SHIFT2_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT2_MASK                              0x4
#define _CRCSHIFTL_SHIFT3_POSN                              0x3
#define _CRCSHIFTL_SHIFT3_POSITION                          0x3
#define _CRCSHIFTL_SHIFT3_SIZE                              0x1
#define _CRCSHIFTL_SHIFT3_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT3_MASK                              0x8
#define _CRCSHIFTL_SHIFT4_POSN                              0x4
#define _CRCSHIFTL_SHIFT4_POSITION                          0x4
#define _CRCSHIFTL_SHIFT4_SIZE                              0x1
#define _CRCSHIFTL_SHIFT4_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT4_MASK                              0x10
#define _CRCSHIFTL_SHIFT5_POSN                              0x5
#define _CRCSHIFTL_SHIFT5_POSITION                          0x5
#define _CRCSHIFTL_SHIFT5_SIZE                              0x1
#define _CRCSHIFTL_SHIFT5_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT5_MASK                              0x20
#define _CRCSHIFTL_SHIFT6_POSN                              0x6
#define _CRCSHIFTL_SHIFT6_POSITION                          0x6
#define _CRCSHIFTL_SHIFT6_SIZE                              0x1
#define _CRCSHIFTL_SHIFT6_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT6_MASK                              0x40
#define _CRCSHIFTL_SHIFT7_POSN                              0x7
#define _CRCSHIFTL_SHIFT7_POSITION                          0x7
#define _CRCSHIFTL_SHIFT7_SIZE                              0x1
#define _CRCSHIFTL_SHIFT7_LENGTH                            0x1
#define _CRCSHIFTL_SHIFT7_MASK                              0x80

// Register: CRCXORL
#define CRCXORL CRCXORL
extern volatile unsigned char           CRCXORL             __at(0x064);
#ifndef _LIB_BUILD
asm("CRCXORL equ 064h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned XOR                    :8;
    };
    struct {
        unsigned XOR0                   :1;
        unsigned XOR1                   :1;
        unsigned XOR2                   :1;
        unsigned XOR3                   :1;
        unsigned XOR4                   :1;
        unsigned XOR5                   :1;
        unsigned XOR6                   :1;
        unsigned XOR7                   :1;
    };
} CRCXORLbits_t;
extern volatile CRCXORLbits_t CRCXORLbits __at(0x064);
// bitfield macros
#define _CRCXORL_XOR_POSN                                   0x0
#define _CRCXORL_XOR_POSITION                               0x0
#define _CRCXORL_XOR_SIZE                                   0x8
#define _CRCXORL_XOR_LENGTH                                 0x8
#define _CRCXORL_XOR_MASK                                   0xFF
#define _CRCXORL_XOR0_POSN                                  0x0
#define _CRCXORL_XOR0_POSITION                              0x0
#define _CRCXORL_XOR0_SIZE                                  0x1
#define _CRCXORL_XOR0_LENGTH                                0x1
#define _CRCXORL_XOR0_MASK                                  0x1
#define _CRCXORL_XOR1_POSN                                  0x1
#define _CRCXORL_XOR1_POSITION                              0x1
#define _CRCXORL_XOR1_SIZE                                  0x1
#define _CRCXORL_XOR1_LENGTH                                0x1
#define _CRCXORL_XOR1_MASK                                  0x2
#define _CRCXORL_XOR2_POSN                                  0x2
#define _CRCXORL_XOR2_POSITION                              0x2
#define _CRCXORL_XOR2_SIZE                                  0x1
#define _CRCXORL_XOR2_LENGTH                                0x1
#define _CRCXORL_XOR2_MASK                                  0x4
#define _CRCXORL_XOR3_POSN                                  0x3
#define _CRCXORL_XOR3_POSITION                              0x3
#define _CRCXORL_XOR3_SIZE                                  0x1
#define _CRCXORL_XOR3_LENGTH                                0x1
#define _CRCXORL_XOR3_MASK                                  0x8
#define _CRCXORL_XOR4_POSN                                  0x4
#define _CRCXORL_XOR4_POSITION                              0x4
#define _CRCXORL_XOR4_SIZE                                  0x1
#define _CRCXORL_XOR4_LENGTH                                0x1
#define _CRCXORL_XOR4_MASK                                  0x10
#define _CRCXORL_XOR5_POSN                                  0x5
#define _CRCXORL_XOR5_POSITION                              0x5
#define _CRCXORL_XOR5_SIZE                                  0x1
#define _CRCXORL_XOR5_LENGTH                                0x1
#define _CRCXORL_XOR5_MASK                                  0x20
#define _CRCXORL_XOR6_POSN                                  0x6
#define _CRCXORL_XOR6_POSITION                              0x6
#define _CRCXORL_XOR6_SIZE                                  0x1
#define _CRCXORL_XOR6_LENGTH                                0x1
#define _CRCXORL_XOR6_MASK                                  0x40
#define _CRCXORL_XOR7_POSN                                  0x7
#define _CRCXORL_XOR7_POSITION                              0x7
#define _CRCXORL_XOR7_SIZE                                  0x1
#define _CRCXORL_XOR7_LENGTH                                0x1
#define _CRCXORL_XOR7_MASK                                  0x80

// Register: CRCOUTH
#define CRCOUTH CRCOUTH
extern volatile unsigned char           CRCOUTH             __at(0x065);
#ifndef _LIB_BUILD
asm("CRCOUTH equ 065h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUT                    :8;
    };
    struct {
        unsigned OUT8                   :1;
        unsigned OUT9                   :1;
        unsigned OUT10                  :1;
        unsigned OUT11                  :1;
        unsigned OUT12                  :1;
        unsigned OUT13                  :1;
        unsigned OUT14                  :1;
        unsigned OUT15                  :1;
    };
} CRCOUTHbits_t;
extern volatile CRCOUTHbits_t CRCOUTHbits __at(0x065);
// bitfield macros
#define _CRCOUTH_OUT_POSN                                   0x0
#define _CRCOUTH_OUT_POSITION                               0x0
#define _CRCOUTH_OUT_SIZE                                   0x8
#define _CRCOUTH_OUT_LENGTH                                 0x8
#define _CRCOUTH_OUT_MASK                                   0xFF
#define _CRCOUTH_OUT8_POSN                                  0x0
#define _CRCOUTH_OUT8_POSITION                              0x0
#define _CRCOUTH_OUT8_SIZE                                  0x1
#define _CRCOUTH_OUT8_LENGTH                                0x1
#define _CRCOUTH_OUT8_MASK                                  0x1
#define _CRCOUTH_OUT9_POSN                                  0x1
#define _CRCOUTH_OUT9_POSITION                              0x1
#define _CRCOUTH_OUT9_SIZE                                  0x1
#define _CRCOUTH_OUT9_LENGTH                                0x1
#define _CRCOUTH_OUT9_MASK                                  0x2
#define _CRCOUTH_OUT10_POSN                                 0x2
#define _CRCOUTH_OUT10_POSITION                             0x2
#define _CRCOUTH_OUT10_SIZE                                 0x1
#define _CRCOUTH_OUT10_LENGTH                               0x1
#define _CRCOUTH_OUT10_MASK                                 0x4
#define _CRCOUTH_OUT11_POSN                                 0x3
#define _CRCOUTH_OUT11_POSITION                             0x3
#define _CRCOUTH_OUT11_SIZE                                 0x1
#define _CRCOUTH_OUT11_LENGTH                               0x1
#define _CRCOUTH_OUT11_MASK                                 0x8
#define _CRCOUTH_OUT12_POSN                                 0x4
#define _CRCOUTH_OUT12_POSITION                             0x4
#define _CRCOUTH_OUT12_SIZE                                 0x1
#define _CRCOUTH_OUT12_LENGTH                               0x1
#define _CRCOUTH_OUT12_MASK                                 0x10
#define _CRCOUTH_OUT13_POSN                                 0x5
#define _CRCOUTH_OUT13_POSITION                             0x5
#define _CRCOUTH_OUT13_SIZE                                 0x1
#define _CRCOUTH_OUT13_LENGTH                               0x1
#define _CRCOUTH_OUT13_MASK                                 0x20
#define _CRCOUTH_OUT14_POSN                                 0x6
#define _CRCOUTH_OUT14_POSITION                             0x6
#define _CRCOUTH_OUT14_SIZE                                 0x1
#define _CRCOUTH_OUT14_LENGTH                               0x1
#define _CRCOUTH_OUT14_MASK                                 0x40
#define _CRCOUTH_OUT15_POSN                                 0x7
#define _CRCOUTH_OUT15_POSITION                             0x7
#define _CRCOUTH_OUT15_SIZE                                 0x1
#define _CRCOUTH_OUT15_LENGTH                               0x1
#define _CRCOUTH_OUT15_MASK                                 0x80

// Register: CRCSHFTH
#define CRCSHFTH CRCSHFTH
extern volatile unsigned char           CRCSHFTH            __at(0x065);
#ifndef _LIB_BUILD
asm("CRCSHFTH equ 065h");
#endif
// aliases
extern volatile unsigned char           CRCSHIFTH           __at(0x065);
#ifndef _LIB_BUILD
asm("CRCSHIFTH equ 065h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHIFT                  :8;
    };
    struct {
        unsigned SHIFT8                 :1;
        unsigned SHIFT9                 :1;
        unsigned SHIFT10                :1;
        unsigned SHIFT11                :1;
        unsigned SHIFT12                :1;
        unsigned SHIFT13                :1;
        unsigned SHIFT14                :1;
        unsigned SHIFT15                :1;
    };
} CRCSHFTHbits_t;
extern volatile CRCSHFTHbits_t CRCSHFTHbits __at(0x065);
// bitfield macros
#define _CRCSHFTH_SHIFT_POSN                                0x0
#define _CRCSHFTH_SHIFT_POSITION                            0x0
#define _CRCSHFTH_SHIFT_SIZE                                0x8
#define _CRCSHFTH_SHIFT_LENGTH                              0x8
#define _CRCSHFTH_SHIFT_MASK                                0xFF
#define _CRCSHFTH_SHIFT8_POSN                               0x0
#define _CRCSHFTH_SHIFT8_POSITION                           0x0
#define _CRCSHFTH_SHIFT8_SIZE                               0x1
#define _CRCSHFTH_SHIFT8_LENGTH                             0x1
#define _CRCSHFTH_SHIFT8_MASK                               0x1
#define _CRCSHFTH_SHIFT9_POSN                               0x1
#define _CRCSHFTH_SHIFT9_POSITION                           0x1
#define _CRCSHFTH_SHIFT9_SIZE                               0x1
#define _CRCSHFTH_SHIFT9_LENGTH                             0x1
#define _CRCSHFTH_SHIFT9_MASK                               0x2
#define _CRCSHFTH_SHIFT10_POSN                              0x2
#define _CRCSHFTH_SHIFT10_POSITION                          0x2
#define _CRCSHFTH_SHIFT10_SIZE                              0x1
#define _CRCSHFTH_SHIFT10_LENGTH                            0x1
#define _CRCSHFTH_SHIFT10_MASK                              0x4
#define _CRCSHFTH_SHIFT11_POSN                              0x3
#define _CRCSHFTH_SHIFT11_POSITION                          0x3
#define _CRCSHFTH_SHIFT11_SIZE                              0x1
#define _CRCSHFTH_SHIFT11_LENGTH                            0x1
#define _CRCSHFTH_SHIFT11_MASK                              0x8
#define _CRCSHFTH_SHIFT12_POSN                              0x4
#define _CRCSHFTH_SHIFT12_POSITION                          0x4
#define _CRCSHFTH_SHIFT12_SIZE                              0x1
#define _CRCSHFTH_SHIFT12_LENGTH                            0x1
#define _CRCSHFTH_SHIFT12_MASK                              0x10
#define _CRCSHFTH_SHIFT13_POSN                              0x5
#define _CRCSHFTH_SHIFT13_POSITION                          0x5
#define _CRCSHFTH_SHIFT13_SIZE                              0x1
#define _CRCSHFTH_SHIFT13_LENGTH                            0x1
#define _CRCSHFTH_SHIFT13_MASK                              0x20
#define _CRCSHFTH_SHIFT14_POSN                              0x6
#define _CRCSHFTH_SHIFT14_POSITION                          0x6
#define _CRCSHFTH_SHIFT14_SIZE                              0x1
#define _CRCSHFTH_SHIFT14_LENGTH                            0x1
#define _CRCSHFTH_SHIFT14_MASK                              0x40
#define _CRCSHFTH_SHIFT15_POSN                              0x7
#define _CRCSHFTH_SHIFT15_POSITION                          0x7
#define _CRCSHFTH_SHIFT15_SIZE                              0x1
#define _CRCSHFTH_SHIFT15_LENGTH                            0x1
#define _CRCSHFTH_SHIFT15_MASK                              0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned SHIFT                  :8;
    };
    struct {
        unsigned SHIFT8                 :1;
        unsigned SHIFT9                 :1;
        unsigned SHIFT10                :1;
        unsigned SHIFT11                :1;
        unsigned SHIFT12                :1;
        unsigned SHIFT13                :1;
        unsigned SHIFT14                :1;
        unsigned SHIFT15                :1;
    };
} CRCSHIFTHbits_t;
extern volatile CRCSHIFTHbits_t CRCSHIFTHbits __at(0x065);
// bitfield macros
#define _CRCSHIFTH_SHIFT_POSN                               0x0
#define _CRCSHIFTH_SHIFT_POSITION                           0x0
#define _CRCSHIFTH_SHIFT_SIZE                               0x8
#define _CRCSHIFTH_SHIFT_LENGTH                             0x8
#define _CRCSHIFTH_SHIFT_MASK                               0xFF
#define _CRCSHIFTH_SHIFT8_POSN                              0x0
#define _CRCSHIFTH_SHIFT8_POSITION                          0x0
#define _CRCSHIFTH_SHIFT8_SIZE                              0x1
#define _CRCSHIFTH_SHIFT8_LENGTH                            0x1
#define _CRCSHIFTH_SHIFT8_MASK                              0x1
#define _CRCSHIFTH_SHIFT9_POSN                              0x1
#define _CRCSHIFTH_SHIFT9_POSITION                          0x1
#define _CRCSHIFTH_SHIFT9_SIZE                              0x1
#define _CRCSHIFTH_SHIFT9_LENGTH                            0x1
#define _CRCSHIFTH_SHIFT9_MASK                              0x2
#define _CRCSHIFTH_SHIFT10_POSN                             0x2
#define _CRCSHIFTH_SHIFT10_POSITION                         0x2
#define _CRCSHIFTH_SHIFT10_SIZE                             0x1
#define _CRCSHIFTH_SHIFT10_LENGTH                           0x1
#define _CRCSHIFTH_SHIFT10_MASK                             0x4
#define _CRCSHIFTH_SHIFT11_POSN                             0x3
#define _CRCSHIFTH_SHIFT11_POSITION                         0x3
#define _CRCSHIFTH_SHIFT11_SIZE                             0x1
#define _CRCSHIFTH_SHIFT11_LENGTH                           0x1
#define _CRCSHIFTH_SHIFT11_MASK                             0x8
#define _CRCSHIFTH_SHIFT12_POSN                             0x4
#define _CRCSHIFTH_SHIFT12_POSITION                         0x4
#define _CRCSHIFTH_SHIFT12_SIZE                             0x1
#define _CRCSHIFTH_SHIFT12_LENGTH                           0x1
#define _CRCSHIFTH_SHIFT12_MASK                             0x10
#define _CRCSHIFTH_SHIFT13_POSN                             0x5
#define _CRCSHIFTH_SHIFT13_POSITION                         0x5
#define _CRCSHIFTH_SHIFT13_SIZE                             0x1
#define _CRCSHIFTH_SHIFT13_LENGTH                           0x1
#define _CRCSHIFTH_SHIFT13_MASK                             0x20
#define _CRCSHIFTH_SHIFT14_POSN                             0x6
#define _CRCSHIFTH_SHIFT14_POSITION                         0x6
#define _CRCSHIFTH_SHIFT14_SIZE                             0x1
#define _CRCSHIFTH_SHIFT14_LENGTH                           0x1
#define _CRCSHIFTH_SHIFT14_MASK                             0x40
#define _CRCSHIFTH_SHIFT15_POSN                             0x7
#define _CRCSHIFTH_SHIFT15_POSITION                         0x7
#define _CRCSHIFTH_SHIFT15_SIZE                             0x1
#define _CRCSHIFTH_SHIFT15_LENGTH                           0x1
#define _CRCSHIFTH_SHIFT15_MASK                             0x80

// Register: CRCXORH
#define CRCXORH CRCXORH
extern volatile unsigned char           CRCXORH             __at(0x065);
#ifndef _LIB_BUILD
asm("CRCXORH equ 065h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned XOR                    :8;
    };
    struct {
        unsigned XOR8                   :1;
        unsigned XOR9                   :1;
        unsigned XOR10                  :1;
        unsigned XOR11                  :1;
        unsigned XOR12                  :1;
        unsigned XOR13                  :1;
        unsigned XOR14                  :1;
        unsigned XOR15                  :1;
    };
} CRCXORHbits_t;
extern volatile CRCXORHbits_t CRCXORHbits __at(0x065);
// bitfield macros
#define _CRCXORH_XOR_POSN                                   0x0
#define _CRCXORH_XOR_POSITION                               0x0
#define _CRCXORH_XOR_SIZE                                   0x8
#define _CRCXORH_XOR_LENGTH                                 0x8
#define _CRCXORH_XOR_MASK                                   0xFF
#define _CRCXORH_XOR8_POSN                                  0x0
#define _CRCXORH_XOR8_POSITION                              0x0
#define _CRCXORH_XOR8_SIZE                                  0x1
#define _CRCXORH_XOR8_LENGTH                                0x1
#define _CRCXORH_XOR8_MASK                                  0x1
#define _CRCXORH_XOR9_POSN                                  0x1
#define _CRCXORH_XOR9_POSITION                              0x1
#define _CRCXORH_XOR9_SIZE                                  0x1
#define _CRCXORH_XOR9_LENGTH                                0x1
#define _CRCXORH_XOR9_MASK                                  0x2
#define _CRCXORH_XOR10_POSN                                 0x2
#define _CRCXORH_XOR10_POSITION                             0x2
#define _CRCXORH_XOR10_SIZE                                 0x1
#define _CRCXORH_XOR10_LENGTH                               0x1
#define _CRCXORH_XOR10_MASK                                 0x4
#define _CRCXORH_XOR11_POSN                                 0x3
#define _CRCXORH_XOR11_POSITION                             0x3
#define _CRCXORH_XOR11_SIZE                                 0x1
#define _CRCXORH_XOR11_LENGTH                               0x1
#define _CRCXORH_XOR11_MASK                                 0x8
#define _CRCXORH_XOR12_POSN                                 0x4
#define _CRCXORH_XOR12_POSITION                             0x4
#define _CRCXORH_XOR12_SIZE                                 0x1
#define _CRCXORH_XOR12_LENGTH                               0x1
#define _CRCXORH_XOR12_MASK                                 0x10
#define _CRCXORH_XOR13_POSN                                 0x5
#define _CRCXORH_XOR13_POSITION                             0x5
#define _CRCXORH_XOR13_SIZE                                 0x1
#define _CRCXORH_XOR13_LENGTH                               0x1
#define _CRCXORH_XOR13_MASK                                 0x20
#define _CRCXORH_XOR14_POSN                                 0x6
#define _CRCXORH_XOR14_POSITION                             0x6
#define _CRCXORH_XOR14_SIZE                                 0x1
#define _CRCXORH_XOR14_LENGTH                               0x1
#define _CRCXORH_XOR14_MASK                                 0x40
#define _CRCXORH_XOR15_POSN                                 0x7
#define _CRCXORH_XOR15_POSITION                             0x7
#define _CRCXORH_XOR15_SIZE                                 0x1
#define _CRCXORH_XOR15_LENGTH                               0x1
#define _CRCXORH_XOR15_MASK                                 0x80

// Register: CRCOUTU
#define CRCOUTU CRCOUTU
extern volatile unsigned char           CRCOUTU             __at(0x066);
#ifndef _LIB_BUILD
asm("CRCOUTU equ 066h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUT                    :8;
    };
    struct {
        unsigned OUT16                  :1;
        unsigned OUT17                  :1;
        unsigned OUT18                  :1;
        unsigned OUT19                  :1;
        unsigned OUT20                  :1;
        unsigned OUT21                  :1;
        unsigned OUT22                  :1;
        unsigned OUT23                  :1;
    };
} CRCOUTUbits_t;
extern volatile CRCOUTUbits_t CRCOUTUbits __at(0x066);
// bitfield macros
#define _CRCOUTU_OUT_POSN                                   0x0
#define _CRCOUTU_OUT_POSITION                               0x0
#define _CRCOUTU_OUT_SIZE                                   0x8
#define _CRCOUTU_OUT_LENGTH                                 0x8
#define _CRCOUTU_OUT_MASK                                   0xFF
#define _CRCOUTU_OUT16_POSN                                 0x0
#define _CRCOUTU_OUT16_POSITION                             0x0
#define _CRCOUTU_OUT16_SIZE                                 0x1
#define _CRCOUTU_OUT16_LENGTH                               0x1
#define _CRCOUTU_OUT16_MASK                                 0x1
#define _CRCOUTU_OUT17_POSN                                 0x1
#define _CRCOUTU_OUT17_POSITION                             0x1
#define _CRCOUTU_OUT17_SIZE                                 0x1
#define _CRCOUTU_OUT17_LENGTH                               0x1
#define _CRCOUTU_OUT17_MASK                                 0x2
#define _CRCOUTU_OUT18_POSN                                 0x2
#define _CRCOUTU_OUT18_POSITION                             0x2
#define _CRCOUTU_OUT18_SIZE                                 0x1
#define _CRCOUTU_OUT18_LENGTH                               0x1
#define _CRCOUTU_OUT18_MASK                                 0x4
#define _CRCOUTU_OUT19_POSN                                 0x3
#define _CRCOUTU_OUT19_POSITION                             0x3
#define _CRCOUTU_OUT19_SIZE                                 0x1
#define _CRCOUTU_OUT19_LENGTH                               0x1
#define _CRCOUTU_OUT19_MASK                                 0x8
#define _CRCOUTU_OUT20_POSN                                 0x4
#define _CRCOUTU_OUT20_POSITION                             0x4
#define _CRCOUTU_OUT20_SIZE                                 0x1
#define _CRCOUTU_OUT20_LENGTH                               0x1
#define _CRCOUTU_OUT20_MASK                                 0x10
#define _CRCOUTU_OUT21_POSN                                 0x5
#define _CRCOUTU_OUT21_POSITION                             0x5
#define _CRCOUTU_OUT21_SIZE                                 0x1
#define _CRCOUTU_OUT21_LENGTH                               0x1
#define _CRCOUTU_OUT21_MASK                                 0x20
#define _CRCOUTU_OUT22_POSN                                 0x6
#define _CRCOUTU_OUT22_POSITION                             0x6
#define _CRCOUTU_OUT22_SIZE                                 0x1
#define _CRCOUTU_OUT22_LENGTH                               0x1
#define _CRCOUTU_OUT22_MASK                                 0x40
#define _CRCOUTU_OUT23_POSN                                 0x7
#define _CRCOUTU_OUT23_POSITION                             0x7
#define _CRCOUTU_OUT23_SIZE                                 0x1
#define _CRCOUTU_OUT23_LENGTH                               0x1
#define _CRCOUTU_OUT23_MASK                                 0x80

// Register: CRCSHFTU
#define CRCSHFTU CRCSHFTU
extern volatile unsigned char           CRCSHFTU            __at(0x066);
#ifndef _LIB_BUILD
asm("CRCSHFTU equ 066h");
#endif
// aliases
extern volatile unsigned char           CRCSHIFTU           __at(0x066);
#ifndef _LIB_BUILD
asm("CRCSHIFTU equ 066h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHIFT                  :8;
    };
    struct {
        unsigned SHIFT16                :1;
        unsigned SHIFT17                :1;
        unsigned SHIFT18                :1;
        unsigned SHIFT19                :1;
        unsigned SHIFT20                :1;
        unsigned SHIFT21                :1;
        unsigned SHIFT22                :1;
        unsigned SHIFT23                :1;
    };
} CRCSHFTUbits_t;
extern volatile CRCSHFTUbits_t CRCSHFTUbits __at(0x066);
// bitfield macros
#define _CRCSHFTU_SHIFT_POSN                                0x0
#define _CRCSHFTU_SHIFT_POSITION                            0x0
#define _CRCSHFTU_SHIFT_SIZE                                0x8
#define _CRCSHFTU_SHIFT_LENGTH                              0x8
#define _CRCSHFTU_SHIFT_MASK                                0xFF
#define _CRCSHFTU_SHIFT16_POSN                              0x0
#define _CRCSHFTU_SHIFT16_POSITION                          0x0
#define _CRCSHFTU_SHIFT16_SIZE                              0x1
#define _CRCSHFTU_SHIFT16_LENGTH                            0x1
#define _CRCSHFTU_SHIFT16_MASK                              0x1
#define _CRCSHFTU_SHIFT17_POSN                              0x1
#define _CRCSHFTU_SHIFT17_POSITION                          0x1
#define _CRCSHFTU_SHIFT17_SIZE                              0x1
#define _CRCSHFTU_SHIFT17_LENGTH                            0x1
#define _CRCSHFTU_SHIFT17_MASK                              0x2
#define _CRCSHFTU_SHIFT18_POSN                              0x2
#define _CRCSHFTU_SHIFT18_POSITION                          0x2
#define _CRCSHFTU_SHIFT18_SIZE                              0x1
#define _CRCSHFTU_SHIFT18_LENGTH                            0x1
#define _CRCSHFTU_SHIFT18_MASK                              0x4
#define _CRCSHFTU_SHIFT19_POSN                              0x3
#define _CRCSHFTU_SHIFT19_POSITION                          0x3
#define _CRCSHFTU_SHIFT19_SIZE                              0x1
#define _CRCSHFTU_SHIFT19_LENGTH                            0x1
#define _CRCSHFTU_SHIFT19_MASK                              0x8
#define _CRCSHFTU_SHIFT20_POSN                              0x4
#define _CRCSHFTU_SHIFT20_POSITION                          0x4
#define _CRCSHFTU_SHIFT20_SIZE                              0x1
#define _CRCSHFTU_SHIFT20_LENGTH                            0x1
#define _CRCSHFTU_SHIFT20_MASK                              0x10
#define _CRCSHFTU_SHIFT21_POSN                              0x5
#define _CRCSHFTU_SHIFT21_POSITION                          0x5
#define _CRCSHFTU_SHIFT21_SIZE                              0x1
#define _CRCSHFTU_SHIFT21_LENGTH                            0x1
#define _CRCSHFTU_SHIFT21_MASK                              0x20
#define _CRCSHFTU_SHIFT22_POSN                              0x6
#define _CRCSHFTU_SHIFT22_POSITION                          0x6
#define _CRCSHFTU_SHIFT22_SIZE                              0x1
#define _CRCSHFTU_SHIFT22_LENGTH                            0x1
#define _CRCSHFTU_SHIFT22_MASK                              0x40
#define _CRCSHFTU_SHIFT23_POSN                              0x7
#define _CRCSHFTU_SHIFT23_POSITION                          0x7
#define _CRCSHFTU_SHIFT23_SIZE                              0x1
#define _CRCSHFTU_SHIFT23_LENGTH                            0x1
#define _CRCSHFTU_SHIFT23_MASK                              0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned SHIFT                  :8;
    };
    struct {
        unsigned SHIFT16                :1;
        unsigned SHIFT17                :1;
        unsigned SHIFT18                :1;
        unsigned SHIFT19                :1;
        unsigned SHIFT20                :1;
        unsigned SHIFT21                :1;
        unsigned SHIFT22                :1;
        unsigned SHIFT23                :1;
    };
} CRCSHIFTUbits_t;
extern volatile CRCSHIFTUbits_t CRCSHIFTUbits __at(0x066);
// bitfield macros
#define _CRCSHIFTU_SHIFT_POSN                               0x0
#define _CRCSHIFTU_SHIFT_POSITION                           0x0
#define _CRCSHIFTU_SHIFT_SIZE                               0x8
#define _CRCSHIFTU_SHIFT_LENGTH                             0x8
#define _CRCSHIFTU_SHIFT_MASK                               0xFF
#define _CRCSHIFTU_SHIFT16_POSN                             0x0
#define _CRCSHIFTU_SHIFT16_POSITION                         0x0
#define _CRCSHIFTU_SHIFT16_SIZE                             0x1
#define _CRCSHIFTU_SHIFT16_LENGTH                           0x1
#define _CRCSHIFTU_SHIFT16_MASK                             0x1
#define _CRCSHIFTU_SHIFT17_POSN                             0x1
#define _CRCSHIFTU_SHIFT17_POSITION                         0x1
#define _CRCSHIFTU_SHIFT17_SIZE                             0x1
#define _CRCSHIFTU_SHIFT17_LENGTH                           0x1
#define _CRCSHIFTU_SHIFT17_MASK                             0x2
#define _CRCSHIFTU_SHIFT18_POSN                             0x2
#define _CRCSHIFTU_SHIFT18_POSITION                         0x2
#define _CRCSHIFTU_SHIFT18_SIZE                             0x1
#define _CRCSHIFTU_SHIFT18_LENGTH                           0x1
#define _CRCSHIFTU_SHIFT18_MASK                             0x4
#define _CRCSHIFTU_SHIFT19_POSN                             0x3
#define _CRCSHIFTU_SHIFT19_POSITION                         0x3
#define _CRCSHIFTU_SHIFT19_SIZE                             0x1
#define _CRCSHIFTU_SHIFT19_LENGTH                           0x1
#define _CRCSHIFTU_SHIFT19_MASK                             0x8
#define _CRCSHIFTU_SHIFT20_POSN                             0x4
#define _CRCSHIFTU_SHIFT20_POSITION                         0x4
#define _CRCSHIFTU_SHIFT20_SIZE                             0x1
#define _CRCSHIFTU_SHIFT20_LENGTH                           0x1
#define _CRCSHIFTU_SHIFT20_MASK                             0x10
#define _CRCSHIFTU_SHIFT21_POSN                             0x5
#define _CRCSHIFTU_SHIFT21_POSITION                         0x5
#define _CRCSHIFTU_SHIFT21_SIZE                             0x1
#define _CRCSHIFTU_SHIFT21_LENGTH                           0x1
#define _CRCSHIFTU_SHIFT21_MASK                             0x20
#define _CRCSHIFTU_SHIFT22_POSN                             0x6
#define _CRCSHIFTU_SHIFT22_POSITION                         0x6
#define _CRCSHIFTU_SHIFT22_SIZE                             0x1
#define _CRCSHIFTU_SHIFT22_LENGTH                           0x1
#define _CRCSHIFTU_SHIFT22_MASK                             0x40
#define _CRCSHIFTU_SHIFT23_POSN                             0x7
#define _CRCSHIFTU_SHIFT23_POSITION                         0x7
#define _CRCSHIFTU_SHIFT23_SIZE                             0x1
#define _CRCSHIFTU_SHIFT23_LENGTH                           0x1
#define _CRCSHIFTU_SHIFT23_MASK                             0x80

// Register: CRCXORU
#define CRCXORU CRCXORU
extern volatile unsigned char           CRCXORU             __at(0x066);
#ifndef _LIB_BUILD
asm("CRCXORU equ 066h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned XOR                    :8;
    };
    struct {
        unsigned XOR16                  :1;
        unsigned XOR17                  :1;
        unsigned XOR18                  :1;
        unsigned XOR19                  :1;
        unsigned XOR20                  :1;
        unsigned XOR21                  :1;
        unsigned XOR22                  :1;
        unsigned XOR23                  :1;
    };
} CRCXORUbits_t;
extern volatile CRCXORUbits_t CRCXORUbits __at(0x066);
// bitfield macros
#define _CRCXORU_XOR_POSN                                   0x0
#define _CRCXORU_XOR_POSITION                               0x0
#define _CRCXORU_XOR_SIZE                                   0x8
#define _CRCXORU_XOR_LENGTH                                 0x8
#define _CRCXORU_XOR_MASK                                   0xFF
#define _CRCXORU_XOR16_POSN                                 0x0
#define _CRCXORU_XOR16_POSITION                             0x0
#define _CRCXORU_XOR16_SIZE                                 0x1
#define _CRCXORU_XOR16_LENGTH                               0x1
#define _CRCXORU_XOR16_MASK                                 0x1
#define _CRCXORU_XOR17_POSN                                 0x1
#define _CRCXORU_XOR17_POSITION                             0x1
#define _CRCXORU_XOR17_SIZE                                 0x1
#define _CRCXORU_XOR17_LENGTH                               0x1
#define _CRCXORU_XOR17_MASK                                 0x2
#define _CRCXORU_XOR18_POSN                                 0x2
#define _CRCXORU_XOR18_POSITION                             0x2
#define _CRCXORU_XOR18_SIZE                                 0x1
#define _CRCXORU_XOR18_LENGTH                               0x1
#define _CRCXORU_XOR18_MASK                                 0x4
#define _CRCXORU_XOR19_POSN                                 0x3
#define _CRCXORU_XOR19_POSITION                             0x3
#define _CRCXORU_XOR19_SIZE                                 0x1
#define _CRCXORU_XOR19_LENGTH                               0x1
#define _CRCXORU_XOR19_MASK                                 0x8
#define _CRCXORU_XOR20_POSN                                 0x4
#define _CRCXORU_XOR20_POSITION                             0x4
#define _CRCXORU_XOR20_SIZE                                 0x1
#define _CRCXORU_XOR20_LENGTH                               0x1
#define _CRCXORU_XOR20_MASK                                 0x10
#define _CRCXORU_XOR21_POSN                                 0x5
#define _CRCXORU_XOR21_POSITION                             0x5
#define _CRCXORU_XOR21_SIZE                                 0x1
#define _CRCXORU_XOR21_LENGTH                               0x1
#define _CRCXORU_XOR21_MASK                                 0x20
#define _CRCXORU_XOR22_POSN                                 0x6
#define _CRCXORU_XOR22_POSITION                             0x6
#define _CRCXORU_XOR22_SIZE                                 0x1
#define _CRCXORU_XOR22_LENGTH                               0x1
#define _CRCXORU_XOR22_MASK                                 0x40
#define _CRCXORU_XOR23_POSN                                 0x7
#define _CRCXORU_XOR23_POSITION                             0x7
#define _CRCXORU_XOR23_SIZE                                 0x1
#define _CRCXORU_XOR23_LENGTH                               0x1
#define _CRCXORU_XOR23_MASK                                 0x80

// Register: CRCOUTT
#define CRCOUTT CRCOUTT
extern volatile unsigned char           CRCOUTT             __at(0x067);
#ifndef _LIB_BUILD
asm("CRCOUTT equ 067h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUT                    :8;
    };
    struct {
        unsigned OUT24                  :1;
        unsigned OUT25                  :1;
        unsigned OUT26                  :1;
        unsigned OUT27                  :1;
        unsigned OUT28                  :1;
        unsigned OUT29                  :1;
        unsigned OUT30                  :1;
        unsigned OUT31                  :1;
    };
} CRCOUTTbits_t;
extern volatile CRCOUTTbits_t CRCOUTTbits __at(0x067);
// bitfield macros
#define _CRCOUTT_OUT_POSN                                   0x0
#define _CRCOUTT_OUT_POSITION                               0x0
#define _CRCOUTT_OUT_SIZE                                   0x8
#define _CRCOUTT_OUT_LENGTH                                 0x8
#define _CRCOUTT_OUT_MASK                                   0xFF
#define _CRCOUTT_OUT24_POSN                                 0x0
#define _CRCOUTT_OUT24_POSITION                             0x0
#define _CRCOUTT_OUT24_SIZE                                 0x1
#define _CRCOUTT_OUT24_LENGTH                               0x1
#define _CRCOUTT_OUT24_MASK                                 0x1
#define _CRCOUTT_OUT25_POSN                                 0x1
#define _CRCOUTT_OUT25_POSITION                             0x1
#define _CRCOUTT_OUT25_SIZE                                 0x1
#define _CRCOUTT_OUT25_LENGTH                               0x1
#define _CRCOUTT_OUT25_MASK                                 0x2
#define _CRCOUTT_OUT26_POSN                                 0x2
#define _CRCOUTT_OUT26_POSITION                             0x2
#define _CRCOUTT_OUT26_SIZE                                 0x1
#define _CRCOUTT_OUT26_LENGTH                               0x1
#define _CRCOUTT_OUT26_MASK                                 0x4
#define _CRCOUTT_OUT27_POSN                                 0x3
#define _CRCOUTT_OUT27_POSITION                             0x3
#define _CRCOUTT_OUT27_SIZE                                 0x1
#define _CRCOUTT_OUT27_LENGTH                               0x1
#define _CRCOUTT_OUT27_MASK                                 0x8
#define _CRCOUTT_OUT28_POSN                                 0x4
#define _CRCOUTT_OUT28_POSITION                             0x4
#define _CRCOUTT_OUT28_SIZE                                 0x1
#define _CRCOUTT_OUT28_LENGTH                               0x1
#define _CRCOUTT_OUT28_MASK                                 0x10
#define _CRCOUTT_OUT29_POSN                                 0x5
#define _CRCOUTT_OUT29_POSITION                             0x5
#define _CRCOUTT_OUT29_SIZE                                 0x1
#define _CRCOUTT_OUT29_LENGTH                               0x1
#define _CRCOUTT_OUT29_MASK                                 0x20
#define _CRCOUTT_OUT30_POSN                                 0x6
#define _CRCOUTT_OUT30_POSITION                             0x6
#define _CRCOUTT_OUT30_SIZE                                 0x1
#define _CRCOUTT_OUT30_LENGTH                               0x1
#define _CRCOUTT_OUT30_MASK                                 0x40
#define _CRCOUTT_OUT31_POSN                                 0x7
#define _CRCOUTT_OUT31_POSITION                             0x7
#define _CRCOUTT_OUT31_SIZE                                 0x1
#define _CRCOUTT_OUT31_LENGTH                               0x1
#define _CRCOUTT_OUT31_MASK                                 0x80

// Register: CRCSHFTT
#define CRCSHFTT CRCSHFTT
extern volatile unsigned char           CRCSHFTT            __at(0x067);
#ifndef _LIB_BUILD
asm("CRCSHFTT equ 067h");
#endif
// aliases
extern volatile unsigned char           CRCSHIFTT           __at(0x067);
#ifndef _LIB_BUILD
asm("CRCSHIFTT equ 067h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHIFT                  :8;
    };
    struct {
        unsigned SHIFT24                :1;
        unsigned SHIFT25                :1;
        unsigned SHIFT26                :1;
        unsigned SHIFT27                :1;
        unsigned SHIFT28                :1;
        unsigned SHIFT29                :1;
        unsigned SHIFT30                :1;
        unsigned SHIFT31                :1;
    };
} CRCSHFTTbits_t;
extern volatile CRCSHFTTbits_t CRCSHFTTbits __at(0x067);
// bitfield macros
#define _CRCSHFTT_SHIFT_POSN                                0x0
#define _CRCSHFTT_SHIFT_POSITION                            0x0
#define _CRCSHFTT_SHIFT_SIZE                                0x8
#define _CRCSHFTT_SHIFT_LENGTH                              0x8
#define _CRCSHFTT_SHIFT_MASK                                0xFF
#define _CRCSHFTT_SHIFT24_POSN                              0x0
#define _CRCSHFTT_SHIFT24_POSITION                          0x0
#define _CRCSHFTT_SHIFT24_SIZE                              0x1
#define _CRCSHFTT_SHIFT24_LENGTH                            0x1
#define _CRCSHFTT_SHIFT24_MASK                              0x1
#define _CRCSHFTT_SHIFT25_POSN                              0x1
#define _CRCSHFTT_SHIFT25_POSITION                          0x1
#define _CRCSHFTT_SHIFT25_SIZE                              0x1
#define _CRCSHFTT_SHIFT25_LENGTH                            0x1
#define _CRCSHFTT_SHIFT25_MASK                              0x2
#define _CRCSHFTT_SHIFT26_POSN                              0x2
#define _CRCSHFTT_SHIFT26_POSITION                          0x2
#define _CRCSHFTT_SHIFT26_SIZE                              0x1
#define _CRCSHFTT_SHIFT26_LENGTH                            0x1
#define _CRCSHFTT_SHIFT26_MASK                              0x4
#define _CRCSHFTT_SHIFT27_POSN                              0x3
#define _CRCSHFTT_SHIFT27_POSITION                          0x3
#define _CRCSHFTT_SHIFT27_SIZE                              0x1
#define _CRCSHFTT_SHIFT27_LENGTH                            0x1
#define _CRCSHFTT_SHIFT27_MASK                              0x8
#define _CRCSHFTT_SHIFT28_POSN                              0x4
#define _CRCSHFTT_SHIFT28_POSITION                          0x4
#define _CRCSHFTT_SHIFT28_SIZE                              0x1
#define _CRCSHFTT_SHIFT28_LENGTH                            0x1
#define _CRCSHFTT_SHIFT28_MASK                              0x10
#define _CRCSHFTT_SHIFT29_POSN                              0x5
#define _CRCSHFTT_SHIFT29_POSITION                          0x5
#define _CRCSHFTT_SHIFT29_SIZE                              0x1
#define _CRCSHFTT_SHIFT29_LENGTH                            0x1
#define _CRCSHFTT_SHIFT29_MASK                              0x20
#define _CRCSHFTT_SHIFT30_POSN                              0x6
#define _CRCSHFTT_SHIFT30_POSITION                          0x6
#define _CRCSHFTT_SHIFT30_SIZE                              0x1
#define _CRCSHFTT_SHIFT30_LENGTH                            0x1
#define _CRCSHFTT_SHIFT30_MASK                              0x40
#define _CRCSHFTT_SHIFT31_POSN                              0x7
#define _CRCSHFTT_SHIFT31_POSITION                          0x7
#define _CRCSHFTT_SHIFT31_SIZE                              0x1
#define _CRCSHFTT_SHIFT31_LENGTH                            0x1
#define _CRCSHFTT_SHIFT31_MASK                              0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned SHIFT                  :8;
    };
    struct {
        unsigned SHIFT24                :1;
        unsigned SHIFT25                :1;
        unsigned SHIFT26                :1;
        unsigned SHIFT27                :1;
        unsigned SHIFT28                :1;
        unsigned SHIFT29                :1;
        unsigned SHIFT30                :1;
        unsigned SHIFT31                :1;
    };
} CRCSHIFTTbits_t;
extern volatile CRCSHIFTTbits_t CRCSHIFTTbits __at(0x067);
// bitfield macros
#define _CRCSHIFTT_SHIFT_POSN                               0x0
#define _CRCSHIFTT_SHIFT_POSITION                           0x0
#define _CRCSHIFTT_SHIFT_SIZE                               0x8
#define _CRCSHIFTT_SHIFT_LENGTH                             0x8
#define _CRCSHIFTT_SHIFT_MASK                               0xFF
#define _CRCSHIFTT_SHIFT24_POSN                             0x0
#define _CRCSHIFTT_SHIFT24_POSITION                         0x0
#define _CRCSHIFTT_SHIFT24_SIZE                             0x1
#define _CRCSHIFTT_SHIFT24_LENGTH                           0x1
#define _CRCSHIFTT_SHIFT24_MASK                             0x1
#define _CRCSHIFTT_SHIFT25_POSN                             0x1
#define _CRCSHIFTT_SHIFT25_POSITION                         0x1
#define _CRCSHIFTT_SHIFT25_SIZE                             0x1
#define _CRCSHIFTT_SHIFT25_LENGTH                           0x1
#define _CRCSHIFTT_SHIFT25_MASK                             0x2
#define _CRCSHIFTT_SHIFT26_POSN                             0x2
#define _CRCSHIFTT_SHIFT26_POSITION                         0x2
#define _CRCSHIFTT_SHIFT26_SIZE                             0x1
#define _CRCSHIFTT_SHIFT26_LENGTH                           0x1
#define _CRCSHIFTT_SHIFT26_MASK                             0x4
#define _CRCSHIFTT_SHIFT27_POSN                             0x3
#define _CRCSHIFTT_SHIFT27_POSITION                         0x3
#define _CRCSHIFTT_SHIFT27_SIZE                             0x1
#define _CRCSHIFTT_SHIFT27_LENGTH                           0x1
#define _CRCSHIFTT_SHIFT27_MASK                             0x8
#define _CRCSHIFTT_SHIFT28_POSN                             0x4
#define _CRCSHIFTT_SHIFT28_POSITION                         0x4
#define _CRCSHIFTT_SHIFT28_SIZE                             0x1
#define _CRCSHIFTT_SHIFT28_LENGTH                           0x1
#define _CRCSHIFTT_SHIFT28_MASK                             0x10
#define _CRCSHIFTT_SHIFT29_POSN                             0x5
#define _CRCSHIFTT_SHIFT29_POSITION                         0x5
#define _CRCSHIFTT_SHIFT29_SIZE                             0x1
#define _CRCSHIFTT_SHIFT29_LENGTH                           0x1
#define _CRCSHIFTT_SHIFT29_MASK                             0x20
#define _CRCSHIFTT_SHIFT30_POSN                             0x6
#define _CRCSHIFTT_SHIFT30_POSITION                         0x6
#define _CRCSHIFTT_SHIFT30_SIZE                             0x1
#define _CRCSHIFTT_SHIFT30_LENGTH                           0x1
#define _CRCSHIFTT_SHIFT30_MASK                             0x40
#define _CRCSHIFTT_SHIFT31_POSN                             0x7
#define _CRCSHIFTT_SHIFT31_POSITION                         0x7
#define _CRCSHIFTT_SHIFT31_SIZE                             0x1
#define _CRCSHIFTT_SHIFT31_LENGTH                           0x1
#define _CRCSHIFTT_SHIFT31_MASK                             0x80

// Register: CRCXORT
#define CRCXORT CRCXORT
extern volatile unsigned char           CRCXORT             __at(0x067);
#ifndef _LIB_BUILD
asm("CRCXORT equ 067h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned XOR                    :8;
    };
    struct {
        unsigned XOR24                  :1;
        unsigned XOR25                  :1;
        unsigned XOR26                  :1;
        unsigned XOR27                  :1;
        unsigned XOR28                  :1;
        unsigned XOR29                  :1;
        unsigned XOR30                  :1;
        unsigned XOR31                  :1;
    };
} CRCXORTbits_t;
extern volatile CRCXORTbits_t CRCXORTbits __at(0x067);
// bitfield macros
#define _CRCXORT_XOR_POSN                                   0x0
#define _CRCXORT_XOR_POSITION                               0x0
#define _CRCXORT_XOR_SIZE                                   0x8
#define _CRCXORT_XOR_LENGTH                                 0x8
#define _CRCXORT_XOR_MASK                                   0xFF
#define _CRCXORT_XOR24_POSN                                 0x0
#define _CRCXORT_XOR24_POSITION                             0x0
#define _CRCXORT_XOR24_SIZE                                 0x1
#define _CRCXORT_XOR24_LENGTH                               0x1
#define _CRCXORT_XOR24_MASK                                 0x1
#define _CRCXORT_XOR25_POSN                                 0x1
#define _CRCXORT_XOR25_POSITION                             0x1
#define _CRCXORT_XOR25_SIZE                                 0x1
#define _CRCXORT_XOR25_LENGTH                               0x1
#define _CRCXORT_XOR25_MASK                                 0x2
#define _CRCXORT_XOR26_POSN                                 0x2
#define _CRCXORT_XOR26_POSITION                             0x2
#define _CRCXORT_XOR26_SIZE                                 0x1
#define _CRCXORT_XOR26_LENGTH                               0x1
#define _CRCXORT_XOR26_MASK                                 0x4
#define _CRCXORT_XOR27_POSN                                 0x3
#define _CRCXORT_XOR27_POSITION                             0x3
#define _CRCXORT_XOR27_SIZE                                 0x1
#define _CRCXORT_XOR27_LENGTH                               0x1
#define _CRCXORT_XOR27_MASK                                 0x8
#define _CRCXORT_XOR28_POSN                                 0x4
#define _CRCXORT_XOR28_POSITION                             0x4
#define _CRCXORT_XOR28_SIZE                                 0x1
#define _CRCXORT_XOR28_LENGTH                               0x1
#define _CRCXORT_XOR28_MASK                                 0x10
#define _CRCXORT_XOR29_POSN                                 0x5
#define _CRCXORT_XOR29_POSITION                             0x5
#define _CRCXORT_XOR29_SIZE                                 0x1
#define _CRCXORT_XOR29_LENGTH                               0x1
#define _CRCXORT_XOR29_MASK                                 0x20
#define _CRCXORT_XOR30_POSN                                 0x6
#define _CRCXORT_XOR30_POSITION                             0x6
#define _CRCXORT_XOR30_SIZE                                 0x1
#define _CRCXORT_XOR30_LENGTH                               0x1
#define _CRCXORT_XOR30_MASK                                 0x40
#define _CRCXORT_XOR31_POSN                                 0x7
#define _CRCXORT_XOR31_POSITION                             0x7
#define _CRCXORT_XOR31_SIZE                                 0x1
#define _CRCXORT_XOR31_LENGTH                               0x1
#define _CRCXORT_XOR31_MASK                                 0x80

// Register: CRCCON0
#define CRCCON0 CRCCON0
extern volatile unsigned char           CRCCON0             __at(0x068);
#ifndef _LIB_BUILD
asm("CRCCON0 equ 068h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FULL                   :1;
        unsigned SHIFTM                 :1;
        unsigned SETUP                  :2;
        unsigned ACCMOD                 :1;
        unsigned CRCBUSY                :1;
        unsigned CRCGO                  :1;
        unsigned CRCEN                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned LENDIAN                :1;
        unsigned SETUP0                 :1;
        unsigned SETUP1                 :1;
        unsigned ACCM                   :1;
        unsigned BUSY                   :1;
        unsigned GO                     :1;
        unsigned EN                     :1;
    };
} CRCCON0bits_t;
extern volatile CRCCON0bits_t CRCCON0bits __at(0x068);
// bitfield macros
#define _CRCCON0_FULL_POSN                                  0x0
#define _CRCCON0_FULL_POSITION                              0x0
#define _CRCCON0_FULL_SIZE                                  0x1
#define _CRCCON0_FULL_LENGTH                                0x1
#define _CRCCON0_FULL_MASK                                  0x1
#define _CRCCON0_SHIFTM_POSN                                0x1
#define _CRCCON0_SHIFTM_POSITION                            0x1
#define _CRCCON0_SHIFTM_SIZE                                0x1
#define _CRCCON0_SHIFTM_LENGTH                              0x1
#define _CRCCON0_SHIFTM_MASK                                0x2
#define _CRCCON0_SETUP_POSN                                 0x2
#define _CRCCON0_SETUP_POSITION                             0x2
#define _CRCCON0_SETUP_SIZE                                 0x2
#define _CRCCON0_SETUP_LENGTH                               0x2
#define _CRCCON0_SETUP_MASK                                 0xC
#define _CRCCON0_ACCMOD_POSN                                0x4
#define _CRCCON0_ACCMOD_POSITION                            0x4
#define _CRCCON0_ACCMOD_SIZE                                0x1
#define _CRCCON0_ACCMOD_LENGTH                              0x1
#define _CRCCON0_ACCMOD_MASK                                0x10
#define _CRCCON0_CRCBUSY_POSN                               0x5
#define _CRCCON0_CRCBUSY_POSITION                           0x5
#define _CRCCON0_CRCBUSY_SIZE                               0x1
#define _CRCCON0_CRCBUSY_LENGTH                             0x1
#define _CRCCON0_CRCBUSY_MASK                               0x20
#define _CRCCON0_CRCGO_POSN                                 0x6
#define _CRCCON0_CRCGO_POSITION                             0x6
#define _CRCCON0_CRCGO_SIZE                                 0x1
#define _CRCCON0_CRCGO_LENGTH                               0x1
#define _CRCCON0_CRCGO_MASK                                 0x40
#define _CRCCON0_CRCEN_POSN                                 0x7
#define _CRCCON0_CRCEN_POSITION                             0x7
#define _CRCCON0_CRCEN_SIZE                                 0x1
#define _CRCCON0_CRCEN_LENGTH                               0x1
#define _CRCCON0_CRCEN_MASK                                 0x80
#define _CRCCON0_LENDIAN_POSN                               0x1
#define _CRCCON0_LENDIAN_POSITION                           0x1
#define _CRCCON0_LENDIAN_SIZE                               0x1
#define _CRCCON0_LENDIAN_LENGTH                             0x1
#define _CRCCON0_LENDIAN_MASK                               0x2
#define _CRCCON0_SETUP0_POSN                                0x2
#define _CRCCON0_SETUP0_POSITION                            0x2
#define _CRCCON0_SETUP0_SIZE                                0x1
#define _CRCCON0_SETUP0_LENGTH                              0x1
#define _CRCCON0_SETUP0_MASK                                0x4
#define _CRCCON0_SETUP1_POSN                                0x3
#define _CRCCON0_SETUP1_POSITION                            0x3
#define _CRCCON0_SETUP1_SIZE                                0x1
#define _CRCCON0_SETUP1_LENGTH                              0x1
#define _CRCCON0_SETUP1_MASK                                0x8
#define _CRCCON0_ACCM_POSN                                  0x4
#define _CRCCON0_ACCM_POSITION                              0x4
#define _CRCCON0_ACCM_SIZE                                  0x1
#define _CRCCON0_ACCM_LENGTH                                0x1
#define _CRCCON0_ACCM_MASK                                  0x10
#define _CRCCON0_BUSY_POSN                                  0x5
#define _CRCCON0_BUSY_POSITION                              0x5
#define _CRCCON0_BUSY_SIZE                                  0x1
#define _CRCCON0_BUSY_LENGTH                                0x1
#define _CRCCON0_BUSY_MASK                                  0x20
#define _CRCCON0_GO_POSN                                    0x6
#define _CRCCON0_GO_POSITION                                0x6
#define _CRCCON0_GO_SIZE                                    0x1
#define _CRCCON0_GO_LENGTH                                  0x1
#define _CRCCON0_GO_MASK                                    0x40
#define _CRCCON0_EN_POSN                                    0x7
#define _CRCCON0_EN_POSITION                                0x7
#define _CRCCON0_EN_SIZE                                    0x1
#define _CRCCON0_EN_LENGTH                                  0x1
#define _CRCCON0_EN_MASK                                    0x80

// Register: CRCCON1
#define CRCCON1 CRCCON1
extern volatile unsigned char           CRCCON1             __at(0x069);
#ifndef _LIB_BUILD
asm("CRCCON1 equ 069h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLEN                   :5;
    };
    struct {
        unsigned PLEN0                  :1;
        unsigned PLEN1                  :1;
        unsigned PLEN2                  :1;
        unsigned PLEN3                  :1;
        unsigned PLEN4                  :1;
    };
} CRCCON1bits_t;
extern volatile CRCCON1bits_t CRCCON1bits __at(0x069);
// bitfield macros
#define _CRCCON1_PLEN_POSN                                  0x0
#define _CRCCON1_PLEN_POSITION                              0x0
#define _CRCCON1_PLEN_SIZE                                  0x5
#define _CRCCON1_PLEN_LENGTH                                0x5
#define _CRCCON1_PLEN_MASK                                  0x1F
#define _CRCCON1_PLEN0_POSN                                 0x0
#define _CRCCON1_PLEN0_POSITION                             0x0
#define _CRCCON1_PLEN0_SIZE                                 0x1
#define _CRCCON1_PLEN0_LENGTH                               0x1
#define _CRCCON1_PLEN0_MASK                                 0x1
#define _CRCCON1_PLEN1_POSN                                 0x1
#define _CRCCON1_PLEN1_POSITION                             0x1
#define _CRCCON1_PLEN1_SIZE                                 0x1
#define _CRCCON1_PLEN1_LENGTH                               0x1
#define _CRCCON1_PLEN1_MASK                                 0x2
#define _CRCCON1_PLEN2_POSN                                 0x2
#define _CRCCON1_PLEN2_POSITION                             0x2
#define _CRCCON1_PLEN2_SIZE                                 0x1
#define _CRCCON1_PLEN2_LENGTH                               0x1
#define _CRCCON1_PLEN2_MASK                                 0x4
#define _CRCCON1_PLEN3_POSN                                 0x3
#define _CRCCON1_PLEN3_POSITION                             0x3
#define _CRCCON1_PLEN3_SIZE                                 0x1
#define _CRCCON1_PLEN3_LENGTH                               0x1
#define _CRCCON1_PLEN3_MASK                                 0x8
#define _CRCCON1_PLEN4_POSN                                 0x4
#define _CRCCON1_PLEN4_POSITION                             0x4
#define _CRCCON1_PLEN4_SIZE                                 0x1
#define _CRCCON1_PLEN4_LENGTH                               0x1
#define _CRCCON1_PLEN4_MASK                                 0x10

// Register: CRCCON2
#define CRCCON2 CRCCON2
extern volatile unsigned char           CRCCON2             __at(0x06A);
#ifndef _LIB_BUILD
asm("CRCCON2 equ 06Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DLEN                   :5;
    };
    struct {
        unsigned DLEN0                  :1;
        unsigned DLEN1                  :1;
        unsigned DLEN2                  :1;
        unsigned DLEN3                  :1;
        unsigned DLEN4                  :1;
    };
} CRCCON2bits_t;
extern volatile CRCCON2bits_t CRCCON2bits __at(0x06A);
// bitfield macros
#define _CRCCON2_DLEN_POSN                                  0x0
#define _CRCCON2_DLEN_POSITION                              0x0
#define _CRCCON2_DLEN_SIZE                                  0x5
#define _CRCCON2_DLEN_LENGTH                                0x5
#define _CRCCON2_DLEN_MASK                                  0x1F
#define _CRCCON2_DLEN0_POSN                                 0x0
#define _CRCCON2_DLEN0_POSITION                             0x0
#define _CRCCON2_DLEN0_SIZE                                 0x1
#define _CRCCON2_DLEN0_LENGTH                               0x1
#define _CRCCON2_DLEN0_MASK                                 0x1
#define _CRCCON2_DLEN1_POSN                                 0x1
#define _CRCCON2_DLEN1_POSITION                             0x1
#define _CRCCON2_DLEN1_SIZE                                 0x1
#define _CRCCON2_DLEN1_LENGTH                               0x1
#define _CRCCON2_DLEN1_MASK                                 0x2
#define _CRCCON2_DLEN2_POSN                                 0x2
#define _CRCCON2_DLEN2_POSITION                             0x2
#define _CRCCON2_DLEN2_SIZE                                 0x1
#define _CRCCON2_DLEN2_LENGTH                               0x1
#define _CRCCON2_DLEN2_MASK                                 0x4
#define _CRCCON2_DLEN3_POSN                                 0x3
#define _CRCCON2_DLEN3_POSITION                             0x3
#define _CRCCON2_DLEN3_SIZE                                 0x1
#define _CRCCON2_DLEN3_LENGTH                               0x1
#define _CRCCON2_DLEN3_MASK                                 0x8
#define _CRCCON2_DLEN4_POSN                                 0x4
#define _CRCCON2_DLEN4_POSITION                             0x4
#define _CRCCON2_DLEN4_SIZE                                 0x1
#define _CRCCON2_DLEN4_LENGTH                               0x1
#define _CRCCON2_DLEN4_MASK                                 0x10

// Register: SCANLADR
#define SCANLADR SCANLADR
#ifndef __CCI__
extern volatile __uint24                SCANLADR            __at(0x06B);
#endif
#ifndef _LIB_BUILD
asm("SCANLADR equ 06Bh");
#endif

// Register: SCANLADRL
#define SCANLADRL SCANLADRL
extern volatile unsigned char           SCANLADRL           __at(0x06B);
#ifndef _LIB_BUILD
asm("SCANLADRL equ 06Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LADR                   :8;
    };
    struct {
        unsigned LADR0                  :1;
        unsigned LADR1                  :1;
        unsigned LADR2                  :1;
        unsigned LADR3                  :1;
        unsigned LADR4                  :1;
        unsigned LADR5                  :1;
        unsigned LADR6                  :1;
        unsigned LADR7                  :1;
    };
    struct {
        unsigned SCANLADR               :8;
    };
    struct {
        unsigned SCANLADR0              :1;
        unsigned SCANLADR1              :1;
        unsigned SCANLADR2              :1;
        unsigned SCANLADR3              :1;
        unsigned SCANLADR4              :1;
        unsigned SCANLADR5              :1;
        unsigned SCANLADR6              :1;
        unsigned SCANLADR7              :1;
    };
} SCANLADRLbits_t;
extern volatile SCANLADRLbits_t SCANLADRLbits __at(0x06B);
// bitfield macros
#define _SCANLADRL_LADR_POSN                                0x0
#define _SCANLADRL_LADR_POSITION                            0x0
#define _SCANLADRL_LADR_SIZE                                0x8
#define _SCANLADRL_LADR_LENGTH                              0x8
#define _SCANLADRL_LADR_MASK                                0xFF
#define _SCANLADRL_LADR0_POSN                               0x0
#define _SCANLADRL_LADR0_POSITION                           0x0
#define _SCANLADRL_LADR0_SIZE                               0x1
#define _SCANLADRL_LADR0_LENGTH                             0x1
#define _SCANLADRL_LADR0_MASK                               0x1
#define _SCANLADRL_LADR1_POSN                               0x1
#define _SCANLADRL_LADR1_POSITION                           0x1
#define _SCANLADRL_LADR1_SIZE                               0x1
#define _SCANLADRL_LADR1_LENGTH                             0x1
#define _SCANLADRL_LADR1_MASK                               0x2
#define _SCANLADRL_LADR2_POSN                               0x2
#define _SCANLADRL_LADR2_POSITION                           0x2
#define _SCANLADRL_LADR2_SIZE                               0x1
#define _SCANLADRL_LADR2_LENGTH                             0x1
#define _SCANLADRL_LADR2_MASK                               0x4
#define _SCANLADRL_LADR3_POSN                               0x3
#define _SCANLADRL_LADR3_POSITION                           0x3
#define _SCANLADRL_LADR3_SIZE                               0x1
#define _SCANLADRL_LADR3_LENGTH                             0x1
#define _SCANLADRL_LADR3_MASK                               0x8
#define _SCANLADRL_LADR4_POSN                               0x4
#define _SCANLADRL_LADR4_POSITION                           0x4
#define _SCANLADRL_LADR4_SIZE                               0x1
#define _SCANLADRL_LADR4_LENGTH                             0x1
#define _SCANLADRL_LADR4_MASK                               0x10
#define _SCANLADRL_LADR5_POSN                               0x5
#define _SCANLADRL_LADR5_POSITION                           0x5
#define _SCANLADRL_LADR5_SIZE                               0x1
#define _SCANLADRL_LADR5_LENGTH                             0x1
#define _SCANLADRL_LADR5_MASK                               0x20
#define _SCANLADRL_LADR6_POSN                               0x6
#define _SCANLADRL_LADR6_POSITION                           0x6
#define _SCANLADRL_LADR6_SIZE                               0x1
#define _SCANLADRL_LADR6_LENGTH                             0x1
#define _SCANLADRL_LADR6_MASK                               0x40
#define _SCANLADRL_LADR7_POSN                               0x7
#define _SCANLADRL_LADR7_POSITION                           0x7
#define _SCANLADRL_LADR7_SIZE                               0x1
#define _SCANLADRL_LADR7_LENGTH                             0x1
#define _SCANLADRL_LADR7_MASK                               0x80
#define _SCANLADRL_SCANLADR_POSN                            0x0
#define _SCANLADRL_SCANLADR_POSITION                        0x0
#define _SCANLADRL_SCANLADR_SIZE                            0x8
#define _SCANLADRL_SCANLADR_LENGTH                          0x8
#define _SCANLADRL_SCANLADR_MASK                            0xFF
#define _SCANLADRL_SCANLADR0_POSN                           0x0
#define _SCANLADRL_SCANLADR0_POSITION                       0x0
#define _SCANLADRL_SCANLADR0_SIZE                           0x1
#define _SCANLADRL_SCANLADR0_LENGTH                         0x1
#define _SCANLADRL_SCANLADR0_MASK                           0x1
#define _SCANLADRL_SCANLADR1_POSN                           0x1
#define _SCANLADRL_SCANLADR1_POSITION                       0x1
#define _SCANLADRL_SCANLADR1_SIZE                           0x1
#define _SCANLADRL_SCANLADR1_LENGTH                         0x1
#define _SCANLADRL_SCANLADR1_MASK                           0x2
#define _SCANLADRL_SCANLADR2_POSN                           0x2
#define _SCANLADRL_SCANLADR2_POSITION                       0x2
#define _SCANLADRL_SCANLADR2_SIZE                           0x1
#define _SCANLADRL_SCANLADR2_LENGTH                         0x1
#define _SCANLADRL_SCANLADR2_MASK                           0x4
#define _SCANLADRL_SCANLADR3_POSN                           0x3
#define _SCANLADRL_SCANLADR3_POSITION                       0x3
#define _SCANLADRL_SCANLADR3_SIZE                           0x1
#define _SCANLADRL_SCANLADR3_LENGTH                         0x1
#define _SCANLADRL_SCANLADR3_MASK                           0x8
#define _SCANLADRL_SCANLADR4_POSN                           0x4
#define _SCANLADRL_SCANLADR4_POSITION                       0x4
#define _SCANLADRL_SCANLADR4_SIZE                           0x1
#define _SCANLADRL_SCANLADR4_LENGTH                         0x1
#define _SCANLADRL_SCANLADR4_MASK                           0x10
#define _SCANLADRL_SCANLADR5_POSN                           0x5
#define _SCANLADRL_SCANLADR5_POSITION                       0x5
#define _SCANLADRL_SCANLADR5_SIZE                           0x1
#define _SCANLADRL_SCANLADR5_LENGTH                         0x1
#define _SCANLADRL_SCANLADR5_MASK                           0x20
#define _SCANLADRL_SCANLADR6_POSN                           0x6
#define _SCANLADRL_SCANLADR6_POSITION                       0x6
#define _SCANLADRL_SCANLADR6_SIZE                           0x1
#define _SCANLADRL_SCANLADR6_LENGTH                         0x1
#define _SCANLADRL_SCANLADR6_MASK                           0x40
#define _SCANLADRL_SCANLADR7_POSN                           0x7
#define _SCANLADRL_SCANLADR7_POSITION                       0x7
#define _SCANLADRL_SCANLADR7_SIZE                           0x1
#define _SCANLADRL_SCANLADR7_LENGTH                         0x1
#define _SCANLADRL_SCANLADR7_MASK                           0x80

// Register: SCANLADRH
#define SCANLADRH SCANLADRH
extern volatile unsigned char           SCANLADRH           __at(0x06C);
#ifndef _LIB_BUILD
asm("SCANLADRH equ 06Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LADR                   :8;
    };
    struct {
        unsigned LADR8                  :1;
        unsigned LADR9                  :1;
        unsigned LADR10                 :1;
        unsigned LADR11                 :1;
        unsigned LADR12                 :1;
        unsigned LADR13                 :1;
        unsigned LADR14                 :1;
        unsigned LADR15                 :1;
    };
    struct {
        unsigned SCANLADR               :8;
    };
    struct {
        unsigned SCANLADR8              :1;
        unsigned SCANLADR9              :1;
        unsigned SCANLADR10             :1;
        unsigned SCANLADR11             :1;
        unsigned SCANLADR12             :1;
        unsigned SCANLADR13             :1;
        unsigned SCANLADR14             :1;
        unsigned SCANLADR15             :1;
    };
} SCANLADRHbits_t;
extern volatile SCANLADRHbits_t SCANLADRHbits __at(0x06C);
// bitfield macros
#define _SCANLADRH_LADR_POSN                                0x0
#define _SCANLADRH_LADR_POSITION                            0x0
#define _SCANLADRH_LADR_SIZE                                0x8
#define _SCANLADRH_LADR_LENGTH                              0x8
#define _SCANLADRH_LADR_MASK                                0xFF
#define _SCANLADRH_LADR8_POSN                               0x0
#define _SCANLADRH_LADR8_POSITION                           0x0
#define _SCANLADRH_LADR8_SIZE                               0x1
#define _SCANLADRH_LADR8_LENGTH                             0x1
#define _SCANLADRH_LADR8_MASK                               0x1
#define _SCANLADRH_LADR9_POSN                               0x1
#define _SCANLADRH_LADR9_POSITION                           0x1
#define _SCANLADRH_LADR9_SIZE                               0x1
#define _SCANLADRH_LADR9_LENGTH                             0x1
#define _SCANLADRH_LADR9_MASK                               0x2
#define _SCANLADRH_LADR10_POSN                              0x2
#define _SCANLADRH_LADR10_POSITION                          0x2
#define _SCANLADRH_LADR10_SIZE                              0x1
#define _SCANLADRH_LADR10_LENGTH                            0x1
#define _SCANLADRH_LADR10_MASK                              0x4
#define _SCANLADRH_LADR11_POSN                              0x3
#define _SCANLADRH_LADR11_POSITION                          0x3
#define _SCANLADRH_LADR11_SIZE                              0x1
#define _SCANLADRH_LADR11_LENGTH                            0x1
#define _SCANLADRH_LADR11_MASK                              0x8
#define _SCANLADRH_LADR12_POSN                              0x4
#define _SCANLADRH_LADR12_POSITION                          0x4
#define _SCANLADRH_LADR12_SIZE                              0x1
#define _SCANLADRH_LADR12_LENGTH                            0x1
#define _SCANLADRH_LADR12_MASK                              0x10
#define _SCANLADRH_LADR13_POSN                              0x5
#define _SCANLADRH_LADR13_POSITION                          0x5
#define _SCANLADRH_LADR13_SIZE                              0x1
#define _SCANLADRH_LADR13_LENGTH                            0x1
#define _SCANLADRH_LADR13_MASK                              0x20
#define _SCANLADRH_LADR14_POSN                              0x6
#define _SCANLADRH_LADR14_POSITION                          0x6
#define _SCANLADRH_LADR14_SIZE                              0x1
#define _SCANLADRH_LADR14_LENGTH                            0x1
#define _SCANLADRH_LADR14_MASK                              0x40
#define _SCANLADRH_LADR15_POSN                              0x7
#define _SCANLADRH_LADR15_POSITION                          0x7
#define _SCANLADRH_LADR15_SIZE                              0x1
#define _SCANLADRH_LADR15_LENGTH                            0x1
#define _SCANLADRH_LADR15_MASK                              0x80
#define _SCANLADRH_SCANLADR_POSN                            0x0
#define _SCANLADRH_SCANLADR_POSITION                        0x0
#define _SCANLADRH_SCANLADR_SIZE                            0x8
#define _SCANLADRH_SCANLADR_LENGTH                          0x8
#define _SCANLADRH_SCANLADR_MASK                            0xFF
#define _SCANLADRH_SCANLADR8_POSN                           0x0
#define _SCANLADRH_SCANLADR8_POSITION                       0x0
#define _SCANLADRH_SCANLADR8_SIZE                           0x1
#define _SCANLADRH_SCANLADR8_LENGTH                         0x1
#define _SCANLADRH_SCANLADR8_MASK                           0x1
#define _SCANLADRH_SCANLADR9_POSN                           0x1
#define _SCANLADRH_SCANLADR9_POSITION                       0x1
#define _SCANLADRH_SCANLADR9_SIZE                           0x1
#define _SCANLADRH_SCANLADR9_LENGTH                         0x1
#define _SCANLADRH_SCANLADR9_MASK                           0x2
#define _SCANLADRH_SCANLADR10_POSN                          0x2
#define _SCANLADRH_SCANLADR10_POSITION                      0x2
#define _SCANLADRH_SCANLADR10_SIZE                          0x1
#define _SCANLADRH_SCANLADR10_LENGTH                        0x1
#define _SCANLADRH_SCANLADR10_MASK                          0x4
#define _SCANLADRH_SCANLADR11_POSN                          0x3
#define _SCANLADRH_SCANLADR11_POSITION                      0x3
#define _SCANLADRH_SCANLADR11_SIZE                          0x1
#define _SCANLADRH_SCANLADR11_LENGTH                        0x1
#define _SCANLADRH_SCANLADR11_MASK                          0x8
#define _SCANLADRH_SCANLADR12_POSN                          0x4
#define _SCANLADRH_SCANLADR12_POSITION                      0x4
#define _SCANLADRH_SCANLADR12_SIZE                          0x1
#define _SCANLADRH_SCANLADR12_LENGTH                        0x1
#define _SCANLADRH_SCANLADR12_MASK                          0x10
#define _SCANLADRH_SCANLADR13_POSN                          0x5
#define _SCANLADRH_SCANLADR13_POSITION                      0x5
#define _SCANLADRH_SCANLADR13_SIZE                          0x1
#define _SCANLADRH_SCANLADR13_LENGTH                        0x1
#define _SCANLADRH_SCANLADR13_MASK                          0x20
#define _SCANLADRH_SCANLADR14_POSN                          0x6
#define _SCANLADRH_SCANLADR14_POSITION                      0x6
#define _SCANLADRH_SCANLADR14_SIZE                          0x1
#define _SCANLADRH_SCANLADR14_LENGTH                        0x1
#define _SCANLADRH_SCANLADR14_MASK                          0x40
#define _SCANLADRH_SCANLADR15_POSN                          0x7
#define _SCANLADRH_SCANLADR15_POSITION                      0x7
#define _SCANLADRH_SCANLADR15_SIZE                          0x1
#define _SCANLADRH_SCANLADR15_LENGTH                        0x1
#define _SCANLADRH_SCANLADR15_MASK                          0x80

// Register: SCANLADRU
#define SCANLADRU SCANLADRU
extern volatile unsigned char           SCANLADRU           __at(0x06D);
#ifndef _LIB_BUILD
asm("SCANLADRU equ 06Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LADR                   :6;
    };
    struct {
        unsigned LADR16                 :1;
        unsigned LADR17                 :1;
        unsigned LADR18                 :1;
        unsigned LADR19                 :1;
        unsigned LADR20                 :1;
        unsigned LADR21                 :1;
    };
    struct {
        unsigned SCANLADR               :6;
    };
    struct {
        unsigned SCANLADR16             :1;
        unsigned SCANLADR17             :1;
        unsigned SCANLADR18             :1;
        unsigned SCANLADR19             :1;
        unsigned SCANLADR20             :1;
        unsigned SCANLADR21             :1;
    };
} SCANLADRUbits_t;
extern volatile SCANLADRUbits_t SCANLADRUbits __at(0x06D);
// bitfield macros
#define _SCANLADRU_LADR_POSN                                0x0
#define _SCANLADRU_LADR_POSITION                            0x0
#define _SCANLADRU_LADR_SIZE                                0x6
#define _SCANLADRU_LADR_LENGTH                              0x6
#define _SCANLADRU_LADR_MASK                                0x3F
#define _SCANLADRU_LADR16_POSN                              0x0
#define _SCANLADRU_LADR16_POSITION                          0x0
#define _SCANLADRU_LADR16_SIZE                              0x1
#define _SCANLADRU_LADR16_LENGTH                            0x1
#define _SCANLADRU_LADR16_MASK                              0x1
#define _SCANLADRU_LADR17_POSN                              0x1
#define _SCANLADRU_LADR17_POSITION                          0x1
#define _SCANLADRU_LADR17_SIZE                              0x1
#define _SCANLADRU_LADR17_LENGTH                            0x1
#define _SCANLADRU_LADR17_MASK                              0x2
#define _SCANLADRU_LADR18_POSN                              0x2
#define _SCANLADRU_LADR18_POSITION                          0x2
#define _SCANLADRU_LADR18_SIZE                              0x1
#define _SCANLADRU_LADR18_LENGTH                            0x1
#define _SCANLADRU_LADR18_MASK                              0x4
#define _SCANLADRU_LADR19_POSN                              0x3
#define _SCANLADRU_LADR19_POSITION                          0x3
#define _SCANLADRU_LADR19_SIZE                              0x1
#define _SCANLADRU_LADR19_LENGTH                            0x1
#define _SCANLADRU_LADR19_MASK                              0x8
#define _SCANLADRU_LADR20_POSN                              0x4
#define _SCANLADRU_LADR20_POSITION                          0x4
#define _SCANLADRU_LADR20_SIZE                              0x1
#define _SCANLADRU_LADR20_LENGTH                            0x1
#define _SCANLADRU_LADR20_MASK                              0x10
#define _SCANLADRU_LADR21_POSN                              0x5
#define _SCANLADRU_LADR21_POSITION                          0x5
#define _SCANLADRU_LADR21_SIZE                              0x1
#define _SCANLADRU_LADR21_LENGTH                            0x1
#define _SCANLADRU_LADR21_MASK                              0x20
#define _SCANLADRU_SCANLADR_POSN                            0x0
#define _SCANLADRU_SCANLADR_POSITION                        0x0
#define _SCANLADRU_SCANLADR_SIZE                            0x6
#define _SCANLADRU_SCANLADR_LENGTH                          0x6
#define _SCANLADRU_SCANLADR_MASK                            0x3F
#define _SCANLADRU_SCANLADR16_POSN                          0x0
#define _SCANLADRU_SCANLADR16_POSITION                      0x0
#define _SCANLADRU_SCANLADR16_SIZE                          0x1
#define _SCANLADRU_SCANLADR16_LENGTH                        0x1
#define _SCANLADRU_SCANLADR16_MASK                          0x1
#define _SCANLADRU_SCANLADR17_POSN                          0x1
#define _SCANLADRU_SCANLADR17_POSITION                      0x1
#define _SCANLADRU_SCANLADR17_SIZE                          0x1
#define _SCANLADRU_SCANLADR17_LENGTH                        0x1
#define _SCANLADRU_SCANLADR17_MASK                          0x2
#define _SCANLADRU_SCANLADR18_POSN                          0x2
#define _SCANLADRU_SCANLADR18_POSITION                      0x2
#define _SCANLADRU_SCANLADR18_SIZE                          0x1
#define _SCANLADRU_SCANLADR18_LENGTH                        0x1
#define _SCANLADRU_SCANLADR18_MASK                          0x4
#define _SCANLADRU_SCANLADR19_POSN                          0x3
#define _SCANLADRU_SCANLADR19_POSITION                      0x3
#define _SCANLADRU_SCANLADR19_SIZE                          0x1
#define _SCANLADRU_SCANLADR19_LENGTH                        0x1
#define _SCANLADRU_SCANLADR19_MASK                          0x8
#define _SCANLADRU_SCANLADR20_POSN                          0x4
#define _SCANLADRU_SCANLADR20_POSITION                      0x4
#define _SCANLADRU_SCANLADR20_SIZE                          0x1
#define _SCANLADRU_SCANLADR20_LENGTH                        0x1
#define _SCANLADRU_SCANLADR20_MASK                          0x10
#define _SCANLADRU_SCANLADR21_POSN                          0x5
#define _SCANLADRU_SCANLADR21_POSITION                      0x5
#define _SCANLADRU_SCANLADR21_SIZE                          0x1
#define _SCANLADRU_SCANLADR21_LENGTH                        0x1
#define _SCANLADRU_SCANLADR21_MASK                          0x20

// Register: SCANHADR
#define SCANHADR SCANHADR
#ifndef __CCI__
extern volatile __uint24                SCANHADR            __at(0x06E);
#endif
#ifndef _LIB_BUILD
asm("SCANHADR equ 06Eh");
#endif

// Register: SCANHADRL
#define SCANHADRL SCANHADRL
extern volatile unsigned char           SCANHADRL           __at(0x06E);
#ifndef _LIB_BUILD
asm("SCANHADRL equ 06Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HADR                   :8;
    };
    struct {
        unsigned HADR0                  :1;
        unsigned HADR1                  :1;
        unsigned HADR2                  :1;
        unsigned HADR3                  :1;
        unsigned HADR4                  :1;
        unsigned HADR5                  :1;
        unsigned HADR6                  :1;
        unsigned HADR7                  :1;
    };
    struct {
        unsigned SCANHADR               :8;
    };
    struct {
        unsigned SCANHADR0              :1;
        unsigned SCANHADR1              :1;
        unsigned SCANHADR2              :1;
        unsigned SCANHADR3              :1;
        unsigned SCANHADR4              :1;
        unsigned SCANHADR5              :1;
        unsigned SCANHADR6              :1;
        unsigned SCANHADR7              :1;
    };
} SCANHADRLbits_t;
extern volatile SCANHADRLbits_t SCANHADRLbits __at(0x06E);
// bitfield macros
#define _SCANHADRL_HADR_POSN                                0x0
#define _SCANHADRL_HADR_POSITION                            0x0
#define _SCANHADRL_HADR_SIZE                                0x8
#define _SCANHADRL_HADR_LENGTH                              0x8
#define _SCANHADRL_HADR_MASK                                0xFF
#define _SCANHADRL_HADR0_POSN                               0x0
#define _SCANHADRL_HADR0_POSITION                           0x0
#define _SCANHADRL_HADR0_SIZE                               0x1
#define _SCANHADRL_HADR0_LENGTH                             0x1
#define _SCANHADRL_HADR0_MASK                               0x1
#define _SCANHADRL_HADR1_POSN                               0x1
#define _SCANHADRL_HADR1_POSITION                           0x1
#define _SCANHADRL_HADR1_SIZE                               0x1
#define _SCANHADRL_HADR1_LENGTH                             0x1
#define _SCANHADRL_HADR1_MASK                               0x2
#define _SCANHADRL_HADR2_POSN                               0x2
#define _SCANHADRL_HADR2_POSITION                           0x2
#define _SCANHADRL_HADR2_SIZE                               0x1
#define _SCANHADRL_HADR2_LENGTH                             0x1
#define _SCANHADRL_HADR2_MASK                               0x4
#define _SCANHADRL_HADR3_POSN                               0x3
#define _SCANHADRL_HADR3_POSITION                           0x3
#define _SCANHADRL_HADR3_SIZE                               0x1
#define _SCANHADRL_HADR3_LENGTH                             0x1
#define _SCANHADRL_HADR3_MASK                               0x8
#define _SCANHADRL_HADR4_POSN                               0x4
#define _SCANHADRL_HADR4_POSITION                           0x4
#define _SCANHADRL_HADR4_SIZE                               0x1
#define _SCANHADRL_HADR4_LENGTH                             0x1
#define _SCANHADRL_HADR4_MASK                               0x10
#define _SCANHADRL_HADR5_POSN                               0x5
#define _SCANHADRL_HADR5_POSITION                           0x5
#define _SCANHADRL_HADR5_SIZE                               0x1
#define _SCANHADRL_HADR5_LENGTH                             0x1
#define _SCANHADRL_HADR5_MASK                               0x20
#define _SCANHADRL_HADR6_POSN                               0x6
#define _SCANHADRL_HADR6_POSITION                           0x6
#define _SCANHADRL_HADR6_SIZE                               0x1
#define _SCANHADRL_HADR6_LENGTH                             0x1
#define _SCANHADRL_HADR6_MASK                               0x40
#define _SCANHADRL_HADR7_POSN                               0x7
#define _SCANHADRL_HADR7_POSITION                           0x7
#define _SCANHADRL_HADR7_SIZE                               0x1
#define _SCANHADRL_HADR7_LENGTH                             0x1
#define _SCANHADRL_HADR7_MASK                               0x80
#define _SCANHADRL_SCANHADR_POSN                            0x0
#define _SCANHADRL_SCANHADR_POSITION                        0x0
#define _SCANHADRL_SCANHADR_SIZE                            0x8
#define _SCANHADRL_SCANHADR_LENGTH                          0x8
#define _SCANHADRL_SCANHADR_MASK                            0xFF
#define _SCANHADRL_SCANHADR0_POSN                           0x0
#define _SCANHADRL_SCANHADR0_POSITION                       0x0
#define _SCANHADRL_SCANHADR0_SIZE                           0x1
#define _SCANHADRL_SCANHADR0_LENGTH                         0x1
#define _SCANHADRL_SCANHADR0_MASK                           0x1
#define _SCANHADRL_SCANHADR1_POSN                           0x1
#define _SCANHADRL_SCANHADR1_POSITION                       0x1
#define _SCANHADRL_SCANHADR1_SIZE                           0x1
#define _SCANHADRL_SCANHADR1_LENGTH                         0x1
#define _SCANHADRL_SCANHADR1_MASK                           0x2
#define _SCANHADRL_SCANHADR2_POSN                           0x2
#define _SCANHADRL_SCANHADR2_POSITION                       0x2
#define _SCANHADRL_SCANHADR2_SIZE                           0x1
#define _SCANHADRL_SCANHADR2_LENGTH                         0x1
#define _SCANHADRL_SCANHADR2_MASK                           0x4
#define _SCANHADRL_SCANHADR3_POSN                           0x3
#define _SCANHADRL_SCANHADR3_POSITION                       0x3
#define _SCANHADRL_SCANHADR3_SIZE                           0x1
#define _SCANHADRL_SCANHADR3_LENGTH                         0x1
#define _SCANHADRL_SCANHADR3_MASK                           0x8
#define _SCANHADRL_SCANHADR4_POSN                           0x4
#define _SCANHADRL_SCANHADR4_POSITION                       0x4
#define _SCANHADRL_SCANHADR4_SIZE                           0x1
#define _SCANHADRL_SCANHADR4_LENGTH                         0x1
#define _SCANHADRL_SCANHADR4_MASK                           0x10
#define _SCANHADRL_SCANHADR5_POSN                           0x5
#define _SCANHADRL_SCANHADR5_POSITION                       0x5
#define _SCANHADRL_SCANHADR5_SIZE                           0x1
#define _SCANHADRL_SCANHADR5_LENGTH                         0x1
#define _SCANHADRL_SCANHADR5_MASK                           0x20
#define _SCANHADRL_SCANHADR6_POSN                           0x6
#define _SCANHADRL_SCANHADR6_POSITION                       0x6
#define _SCANHADRL_SCANHADR6_SIZE                           0x1
#define _SCANHADRL_SCANHADR6_LENGTH                         0x1
#define _SCANHADRL_SCANHADR6_MASK                           0x40
#define _SCANHADRL_SCANHADR7_POSN                           0x7
#define _SCANHADRL_SCANHADR7_POSITION                       0x7
#define _SCANHADRL_SCANHADR7_SIZE                           0x1
#define _SCANHADRL_SCANHADR7_LENGTH                         0x1
#define _SCANHADRL_SCANHADR7_MASK                           0x80

// Register: SCANHADRH
#define SCANHADRH SCANHADRH
extern volatile unsigned char           SCANHADRH           __at(0x06F);
#ifndef _LIB_BUILD
asm("SCANHADRH equ 06Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HADR                   :8;
    };
    struct {
        unsigned HADR8                  :1;
        unsigned HADR9                  :1;
        unsigned HADR10                 :1;
        unsigned HADR11                 :1;
        unsigned HADR12                 :1;
        unsigned HADR13                 :1;
        unsigned HADR14                 :1;
        unsigned HADR15                 :1;
    };
    struct {
        unsigned SCANHADR               :8;
    };
    struct {
        unsigned SCANHADR8              :1;
        unsigned SCANHADR9              :1;
        unsigned SCANHADR10             :1;
        unsigned SCANHADR11             :1;
        unsigned SCANHADR12             :1;
        unsigned SCANHADR13             :1;
        unsigned SCANHADR14             :1;
        unsigned SCANHADR15             :1;
    };
} SCANHADRHbits_t;
extern volatile SCANHADRHbits_t SCANHADRHbits __at(0x06F);
// bitfield macros
#define _SCANHADRH_HADR_POSN                                0x0
#define _SCANHADRH_HADR_POSITION                            0x0
#define _SCANHADRH_HADR_SIZE                                0x8
#define _SCANHADRH_HADR_LENGTH                              0x8
#define _SCANHADRH_HADR_MASK                                0xFF
#define _SCANHADRH_HADR8_POSN                               0x0
#define _SCANHADRH_HADR8_POSITION                           0x0
#define _SCANHADRH_HADR8_SIZE                               0x1
#define _SCANHADRH_HADR8_LENGTH                             0x1
#define _SCANHADRH_HADR8_MASK                               0x1
#define _SCANHADRH_HADR9_POSN                               0x1
#define _SCANHADRH_HADR9_POSITION                           0x1
#define _SCANHADRH_HADR9_SIZE                               0x1
#define _SCANHADRH_HADR9_LENGTH                             0x1
#define _SCANHADRH_HADR9_MASK                               0x2
#define _SCANHADRH_HADR10_POSN                              0x2
#define _SCANHADRH_HADR10_POSITION                          0x2
#define _SCANHADRH_HADR10_SIZE                              0x1
#define _SCANHADRH_HADR10_LENGTH                            0x1
#define _SCANHADRH_HADR10_MASK                              0x4
#define _SCANHADRH_HADR11_POSN                              0x3
#define _SCANHADRH_HADR11_POSITION                          0x3
#define _SCANHADRH_HADR11_SIZE                              0x1
#define _SCANHADRH_HADR11_LENGTH                            0x1
#define _SCANHADRH_HADR11_MASK                              0x8
#define _SCANHADRH_HADR12_POSN                              0x4
#define _SCANHADRH_HADR12_POSITION                          0x4
#define _SCANHADRH_HADR12_SIZE                              0x1
#define _SCANHADRH_HADR12_LENGTH                            0x1
#define _SCANHADRH_HADR12_MASK                              0x10
#define _SCANHADRH_HADR13_POSN                              0x5
#define _SCANHADRH_HADR13_POSITION                          0x5
#define _SCANHADRH_HADR13_SIZE                              0x1
#define _SCANHADRH_HADR13_LENGTH                            0x1
#define _SCANHADRH_HADR13_MASK                              0x20
#define _SCANHADRH_HADR14_POSN                              0x6
#define _SCANHADRH_HADR14_POSITION                          0x6
#define _SCANHADRH_HADR14_SIZE                              0x1
#define _SCANHADRH_HADR14_LENGTH                            0x1
#define _SCANHADRH_HADR14_MASK                              0x40
#define _SCANHADRH_HADR15_POSN                              0x7
#define _SCANHADRH_HADR15_POSITION                          0x7
#define _SCANHADRH_HADR15_SIZE                              0x1
#define _SCANHADRH_HADR15_LENGTH                            0x1
#define _SCANHADRH_HADR15_MASK                              0x80
#define _SCANHADRH_SCANHADR_POSN                            0x0
#define _SCANHADRH_SCANHADR_POSITION                        0x0
#define _SCANHADRH_SCANHADR_SIZE                            0x8
#define _SCANHADRH_SCANHADR_LENGTH                          0x8
#define _SCANHADRH_SCANHADR_MASK                            0xFF
#define _SCANHADRH_SCANHADR8_POSN                           0x0
#define _SCANHADRH_SCANHADR8_POSITION                       0x0
#define _SCANHADRH_SCANHADR8_SIZE                           0x1
#define _SCANHADRH_SCANHADR8_LENGTH                         0x1
#define _SCANHADRH_SCANHADR8_MASK                           0x1
#define _SCANHADRH_SCANHADR9_POSN                           0x1
#define _SCANHADRH_SCANHADR9_POSITION                       0x1
#define _SCANHADRH_SCANHADR9_SIZE                           0x1
#define _SCANHADRH_SCANHADR9_LENGTH                         0x1
#define _SCANHADRH_SCANHADR9_MASK                           0x2
#define _SCANHADRH_SCANHADR10_POSN                          0x2
#define _SCANHADRH_SCANHADR10_POSITION                      0x2
#define _SCANHADRH_SCANHADR10_SIZE                          0x1
#define _SCANHADRH_SCANHADR10_LENGTH                        0x1
#define _SCANHADRH_SCANHADR10_MASK                          0x4
#define _SCANHADRH_SCANHADR11_POSN                          0x3
#define _SCANHADRH_SCANHADR11_POSITION                      0x3
#define _SCANHADRH_SCANHADR11_SIZE                          0x1
#define _SCANHADRH_SCANHADR11_LENGTH                        0x1
#define _SCANHADRH_SCANHADR11_MASK                          0x8
#define _SCANHADRH_SCANHADR12_POSN                          0x4
#define _SCANHADRH_SCANHADR12_POSITION                      0x4
#define _SCANHADRH_SCANHADR12_SIZE                          0x1
#define _SCANHADRH_SCANHADR12_LENGTH                        0x1
#define _SCANHADRH_SCANHADR12_MASK                          0x10
#define _SCANHADRH_SCANHADR13_POSN                          0x5
#define _SCANHADRH_SCANHADR13_POSITION                      0x5
#define _SCANHADRH_SCANHADR13_SIZE                          0x1
#define _SCANHADRH_SCANHADR13_LENGTH                        0x1
#define _SCANHADRH_SCANHADR13_MASK                          0x20
#define _SCANHADRH_SCANHADR14_POSN                          0x6
#define _SCANHADRH_SCANHADR14_POSITION                      0x6
#define _SCANHADRH_SCANHADR14_SIZE                          0x1
#define _SCANHADRH_SCANHADR14_LENGTH                        0x1
#define _SCANHADRH_SCANHADR14_MASK                          0x40
#define _SCANHADRH_SCANHADR15_POSN                          0x7
#define _SCANHADRH_SCANHADR15_POSITION                      0x7
#define _SCANHADRH_SCANHADR15_SIZE                          0x1
#define _SCANHADRH_SCANHADR15_LENGTH                        0x1
#define _SCANHADRH_SCANHADR15_MASK                          0x80

// Register: SCANHADRU
#define SCANHADRU SCANHADRU
extern volatile unsigned char           SCANHADRU           __at(0x070);
#ifndef _LIB_BUILD
asm("SCANHADRU equ 070h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HADR                   :6;
    };
    struct {
        unsigned HADR16                 :1;
        unsigned HADR17                 :1;
        unsigned HADR18                 :1;
        unsigned HADR19                 :1;
        unsigned HADR20                 :1;
        unsigned HADR21                 :1;
    };
    struct {
        unsigned SCANHADR               :6;
    };
    struct {
        unsigned SCANHADR16             :1;
        unsigned SCANHADR17             :1;
        unsigned SCANHADR18             :1;
        unsigned SCANHADR19             :1;
        unsigned SCANHADR20             :1;
        unsigned SCANHADR21             :1;
    };
} SCANHADRUbits_t;
extern volatile SCANHADRUbits_t SCANHADRUbits __at(0x070);
// bitfield macros
#define _SCANHADRU_HADR_POSN                                0x0
#define _SCANHADRU_HADR_POSITION                            0x0
#define _SCANHADRU_HADR_SIZE                                0x6
#define _SCANHADRU_HADR_LENGTH                              0x6
#define _SCANHADRU_HADR_MASK                                0x3F
#define _SCANHADRU_HADR16_POSN                              0x0
#define _SCANHADRU_HADR16_POSITION                          0x0
#define _SCANHADRU_HADR16_SIZE                              0x1
#define _SCANHADRU_HADR16_LENGTH                            0x1
#define _SCANHADRU_HADR16_MASK                              0x1
#define _SCANHADRU_HADR17_POSN                              0x1
#define _SCANHADRU_HADR17_POSITION                          0x1
#define _SCANHADRU_HADR17_SIZE                              0x1
#define _SCANHADRU_HADR17_LENGTH                            0x1
#define _SCANHADRU_HADR17_MASK                              0x2
#define _SCANHADRU_HADR18_POSN                              0x2
#define _SCANHADRU_HADR18_POSITION                          0x2
#define _SCANHADRU_HADR18_SIZE                              0x1
#define _SCANHADRU_HADR18_LENGTH                            0x1
#define _SCANHADRU_HADR18_MASK                              0x4
#define _SCANHADRU_HADR19_POSN                              0x3
#define _SCANHADRU_HADR19_POSITION                          0x3
#define _SCANHADRU_HADR19_SIZE                              0x1
#define _SCANHADRU_HADR19_LENGTH                            0x1
#define _SCANHADRU_HADR19_MASK                              0x8
#define _SCANHADRU_HADR20_POSN                              0x4
#define _SCANHADRU_HADR20_POSITION                          0x4
#define _SCANHADRU_HADR20_SIZE                              0x1
#define _SCANHADRU_HADR20_LENGTH                            0x1
#define _SCANHADRU_HADR20_MASK                              0x10
#define _SCANHADRU_HADR21_POSN                              0x5
#define _SCANHADRU_HADR21_POSITION                          0x5
#define _SCANHADRU_HADR21_SIZE                              0x1
#define _SCANHADRU_HADR21_LENGTH                            0x1
#define _SCANHADRU_HADR21_MASK                              0x20
#define _SCANHADRU_SCANHADR_POSN                            0x0
#define _SCANHADRU_SCANHADR_POSITION                        0x0
#define _SCANHADRU_SCANHADR_SIZE                            0x6
#define _SCANHADRU_SCANHADR_LENGTH                          0x6
#define _SCANHADRU_SCANHADR_MASK                            0x3F
#define _SCANHADRU_SCANHADR16_POSN                          0x0
#define _SCANHADRU_SCANHADR16_POSITION                      0x0
#define _SCANHADRU_SCANHADR16_SIZE                          0x1
#define _SCANHADRU_SCANHADR16_LENGTH                        0x1
#define _SCANHADRU_SCANHADR16_MASK                          0x1
#define _SCANHADRU_SCANHADR17_POSN                          0x1
#define _SCANHADRU_SCANHADR17_POSITION                      0x1
#define _SCANHADRU_SCANHADR17_SIZE                          0x1
#define _SCANHADRU_SCANHADR17_LENGTH                        0x1
#define _SCANHADRU_SCANHADR17_MASK                          0x2
#define _SCANHADRU_SCANHADR18_POSN                          0x2
#define _SCANHADRU_SCANHADR18_POSITION                      0x2
#define _SCANHADRU_SCANHADR18_SIZE                          0x1
#define _SCANHADRU_SCANHADR18_LENGTH                        0x1
#define _SCANHADRU_SCANHADR18_MASK                          0x4
#define _SCANHADRU_SCANHADR19_POSN                          0x3
#define _SCANHADRU_SCANHADR19_POSITION                      0x3
#define _SCANHADRU_SCANHADR19_SIZE                          0x1
#define _SCANHADRU_SCANHADR19_LENGTH                        0x1
#define _SCANHADRU_SCANHADR19_MASK                          0x8
#define _SCANHADRU_SCANHADR20_POSN                          0x4
#define _SCANHADRU_SCANHADR20_POSITION                      0x4
#define _SCANHADRU_SCANHADR20_SIZE                          0x1
#define _SCANHADRU_SCANHADR20_LENGTH                        0x1
#define _SCANHADRU_SCANHADR20_MASK                          0x10
#define _SCANHADRU_SCANHADR21_POSN                          0x5
#define _SCANHADRU_SCANHADR21_POSITION                      0x5
#define _SCANHADRU_SCANHADR21_SIZE                          0x1
#define _SCANHADRU_SCANHADR21_LENGTH                        0x1
#define _SCANHADRU_SCANHADR21_MASK                          0x20

// Register: SCANCON0
#define SCANCON0 SCANCON0
extern volatile unsigned char           SCANCON0            __at(0x071);
#ifndef _LIB_BUILD
asm("SCANCON0 equ 071h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BUSY                   :1;
        unsigned BURSTMD                :1;
        unsigned MREG                   :1;
        unsigned                        :2;
        unsigned SGO                    :1;
        unsigned TRIGEN                 :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :7;
        unsigned SCANEN                 :1;
    };
} SCANCON0bits_t;
extern volatile SCANCON0bits_t SCANCON0bits __at(0x071);
// bitfield macros
#define _SCANCON0_BUSY_POSN                                 0x0
#define _SCANCON0_BUSY_POSITION                             0x0
#define _SCANCON0_BUSY_SIZE                                 0x1
#define _SCANCON0_BUSY_LENGTH                               0x1
#define _SCANCON0_BUSY_MASK                                 0x1
#define _SCANCON0_BURSTMD_POSN                              0x1
#define _SCANCON0_BURSTMD_POSITION                          0x1
#define _SCANCON0_BURSTMD_SIZE                              0x1
#define _SCANCON0_BURSTMD_LENGTH                            0x1
#define _SCANCON0_BURSTMD_MASK                              0x2
#define _SCANCON0_MREG_POSN                                 0x2
#define _SCANCON0_MREG_POSITION                             0x2
#define _SCANCON0_MREG_SIZE                                 0x1
#define _SCANCON0_MREG_LENGTH                               0x1
#define _SCANCON0_MREG_MASK                                 0x4
#define _SCANCON0_SGO_POSN                                  0x5
#define _SCANCON0_SGO_POSITION                              0x5
#define _SCANCON0_SGO_SIZE                                  0x1
#define _SCANCON0_SGO_LENGTH                                0x1
#define _SCANCON0_SGO_MASK                                  0x20
#define _SCANCON0_TRIGEN_POSN                               0x6
#define _SCANCON0_TRIGEN_POSITION                           0x6
#define _SCANCON0_TRIGEN_SIZE                               0x1
#define _SCANCON0_TRIGEN_LENGTH                             0x1
#define _SCANCON0_TRIGEN_MASK                               0x40
#define _SCANCON0_EN_POSN                                   0x7
#define _SCANCON0_EN_POSITION                               0x7
#define _SCANCON0_EN_SIZE                                   0x1
#define _SCANCON0_EN_LENGTH                                 0x1
#define _SCANCON0_EN_MASK                                   0x80
#define _SCANCON0_SCANEN_POSN                               0x7
#define _SCANCON0_SCANEN_POSITION                           0x7
#define _SCANCON0_SCANEN_SIZE                               0x1
#define _SCANCON0_SCANEN_LENGTH                             0x1
#define _SCANCON0_SCANEN_MASK                               0x80

// Register: SCANTRIG
#define SCANTRIG SCANTRIG
extern volatile unsigned char           SCANTRIG            __at(0x072);
#ifndef _LIB_BUILD
asm("SCANTRIG equ 072h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TSEL                   :8;
    };
    struct {
        unsigned TSEL0                  :1;
        unsigned TSEL1                  :1;
        unsigned TSEL2                  :1;
        unsigned TSEL3                  :1;
    };
    struct {
        unsigned SCANTSEL               :8;
    };
} SCANTRIGbits_t;
extern volatile SCANTRIGbits_t SCANTRIGbits __at(0x072);
// bitfield macros
#define _SCANTRIG_TSEL_POSN                                 0x0
#define _SCANTRIG_TSEL_POSITION                             0x0
#define _SCANTRIG_TSEL_SIZE                                 0x8
#define _SCANTRIG_TSEL_LENGTH                               0x8
#define _SCANTRIG_TSEL_MASK                                 0xFF
#define _SCANTRIG_TSEL0_POSN                                0x0
#define _SCANTRIG_TSEL0_POSITION                            0x0
#define _SCANTRIG_TSEL0_SIZE                                0x1
#define _SCANTRIG_TSEL0_LENGTH                              0x1
#define _SCANTRIG_TSEL0_MASK                                0x1
#define _SCANTRIG_TSEL1_POSN                                0x1
#define _SCANTRIG_TSEL1_POSITION                            0x1
#define _SCANTRIG_TSEL1_SIZE                                0x1
#define _SCANTRIG_TSEL1_LENGTH                              0x1
#define _SCANTRIG_TSEL1_MASK                                0x2
#define _SCANTRIG_TSEL2_POSN                                0x2
#define _SCANTRIG_TSEL2_POSITION                            0x2
#define _SCANTRIG_TSEL2_SIZE                                0x1
#define _SCANTRIG_TSEL2_LENGTH                              0x1
#define _SCANTRIG_TSEL2_MASK                                0x4
#define _SCANTRIG_TSEL3_POSN                                0x3
#define _SCANTRIG_TSEL3_POSITION                            0x3
#define _SCANTRIG_TSEL3_SIZE                                0x1
#define _SCANTRIG_TSEL3_LENGTH                              0x1
#define _SCANTRIG_TSEL3_MASK                                0x8
#define _SCANTRIG_SCANTSEL_POSN                             0x0
#define _SCANTRIG_SCANTSEL_POSITION                         0x0
#define _SCANTRIG_SCANTSEL_SIZE                             0x8
#define _SCANTRIG_SCANTSEL_LENGTH                           0x8
#define _SCANTRIG_SCANTSEL_MASK                             0xFF

// Register: BORCON
#define BORCON BORCON
extern volatile unsigned char           BORCON              __at(0x073);
#ifndef _LIB_BUILD
asm("BORCON equ 073h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BORRDY                 :1;
        unsigned                        :6;
        unsigned SBOREN                 :1;
    };
} BORCONbits_t;
extern volatile BORCONbits_t BORCONbits __at(0x073);
// bitfield macros
#define _BORCON_BORRDY_POSN                                 0x0
#define _BORCON_BORRDY_POSITION                             0x0
#define _BORCON_BORRDY_SIZE                                 0x1
#define _BORCON_BORRDY_LENGTH                               0x1
#define _BORCON_BORRDY_MASK                                 0x1
#define _BORCON_SBOREN_POSN                                 0x7
#define _BORCON_SBOREN_POSITION                             0x7
#define _BORCON_SBOREN_SIZE                                 0x1
#define _BORCON_SBOREN_LENGTH                               0x1
#define _BORCON_SBOREN_MASK                                 0x80

// Register: WDTCON0
#define WDTCON0 WDTCON0
extern volatile unsigned char           WDTCON0             __at(0x074);
#ifndef _LIB_BUILD
asm("WDTCON0 equ 074h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEN                    :1;
        unsigned PS                     :5;
    };
    struct {
        unsigned SWDTEN                 :1;
        unsigned WDTPS                  :5;
    };
    struct {
        unsigned WDTSEN                 :1;
        unsigned PS0                    :1;
        unsigned PS1                    :1;
        unsigned PS2                    :1;
        unsigned PS3                    :1;
        unsigned PS4                    :1;
    };
    struct {
        unsigned                        :1;
        unsigned WDTPS0                 :1;
        unsigned WDTPS1                 :1;
        unsigned WDTPS2                 :1;
        unsigned WDTPS3                 :1;
        unsigned WDTPS4                 :1;
    };
} WDTCON0bits_t;
extern volatile WDTCON0bits_t WDTCON0bits __at(0x074);
// bitfield macros
#define _WDTCON0_SEN_POSN                                   0x0
#define _WDTCON0_SEN_POSITION                               0x0
#define _WDTCON0_SEN_SIZE                                   0x1
#define _WDTCON0_SEN_LENGTH                                 0x1
#define _WDTCON0_SEN_MASK                                   0x1
#define _WDTCON0_PS_POSN                                    0x1
#define _WDTCON0_PS_POSITION                                0x1
#define _WDTCON0_PS_SIZE                                    0x5
#define _WDTCON0_PS_LENGTH                                  0x5
#define _WDTCON0_PS_MASK                                    0x3E
#define _WDTCON0_SWDTEN_POSN                                0x0
#define _WDTCON0_SWDTEN_POSITION                            0x0
#define _WDTCON0_SWDTEN_SIZE                                0x1
#define _WDTCON0_SWDTEN_LENGTH                              0x1
#define _WDTCON0_SWDTEN_MASK                                0x1
#define _WDTCON0_WDTPS_POSN                                 0x1
#define _WDTCON0_WDTPS_POSITION                             0x1
#define _WDTCON0_WDTPS_SIZE                                 0x5
#define _WDTCON0_WDTPS_LENGTH                               0x5
#define _WDTCON0_WDTPS_MASK                                 0x3E
#define _WDTCON0_WDTSEN_POSN                                0x0
#define _WDTCON0_WDTSEN_POSITION                            0x0
#define _WDTCON0_WDTSEN_SIZE                                0x1
#define _WDTCON0_WDTSEN_LENGTH                              0x1
#define _WDTCON0_WDTSEN_MASK                                0x1
#define _WDTCON0_PS0_POSN                                   0x1
#define _WDTCON0_PS0_POSITION                               0x1
#define _WDTCON0_PS0_SIZE                                   0x1
#define _WDTCON0_PS0_LENGTH                                 0x1
#define _WDTCON0_PS0_MASK                                   0x2
#define _WDTCON0_PS1_POSN                                   0x2
#define _WDTCON0_PS1_POSITION                               0x2
#define _WDTCON0_PS1_SIZE                                   0x1
#define _WDTCON0_PS1_LENGTH                                 0x1
#define _WDTCON0_PS1_MASK                                   0x4
#define _WDTCON0_PS2_POSN                                   0x3
#define _WDTCON0_PS2_POSITION                               0x3
#define _WDTCON0_PS2_SIZE                                   0x1
#define _WDTCON0_PS2_LENGTH                                 0x1
#define _WDTCON0_PS2_MASK                                   0x8
#define _WDTCON0_PS3_POSN                                   0x4
#define _WDTCON0_PS3_POSITION                               0x4
#define _WDTCON0_PS3_SIZE                                   0x1
#define _WDTCON0_PS3_LENGTH                                 0x1
#define _WDTCON0_PS3_MASK                                   0x10
#define _WDTCON0_PS4_POSN                                   0x5
#define _WDTCON0_PS4_POSITION                               0x5
#define _WDTCON0_PS4_SIZE                                   0x1
#define _WDTCON0_PS4_LENGTH                                 0x1
#define _WDTCON0_PS4_MASK                                   0x20
#define _WDTCON0_WDTPS0_POSN                                0x1
#define _WDTCON0_WDTPS0_POSITION                            0x1
#define _WDTCON0_WDTPS0_SIZE                                0x1
#define _WDTCON0_WDTPS0_LENGTH                              0x1
#define _WDTCON0_WDTPS0_MASK                                0x2
#define _WDTCON0_WDTPS1_POSN                                0x2
#define _WDTCON0_WDTPS1_POSITION                            0x2
#define _WDTCON0_WDTPS1_SIZE                                0x1
#define _WDTCON0_WDTPS1_LENGTH                              0x1
#define _WDTCON0_WDTPS1_MASK                                0x4
#define _WDTCON0_WDTPS2_POSN                                0x3
#define _WDTCON0_WDTPS2_POSITION                            0x3
#define _WDTCON0_WDTPS2_SIZE                                0x1
#define _WDTCON0_WDTPS2_LENGTH                              0x1
#define _WDTCON0_WDTPS2_MASK                                0x8
#define _WDTCON0_WDTPS3_POSN                                0x4
#define _WDTCON0_WDTPS3_POSITION                            0x4
#define _WDTCON0_WDTPS3_SIZE                                0x1
#define _WDTCON0_WDTPS3_LENGTH                              0x1
#define _WDTCON0_WDTPS3_MASK                                0x10
#define _WDTCON0_WDTPS4_POSN                                0x5
#define _WDTCON0_WDTPS4_POSITION                            0x5
#define _WDTCON0_WDTPS4_SIZE                                0x1
#define _WDTCON0_WDTPS4_LENGTH                              0x1
#define _WDTCON0_WDTPS4_MASK                                0x20

// Register: WDTCON1
#define WDTCON1 WDTCON1
extern volatile unsigned char           WDTCON1             __at(0x075);
#ifndef _LIB_BUILD
asm("WDTCON1 equ 075h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WINDOW                 :3;
        unsigned                        :1;
        unsigned CS                     :3;
    };
    struct {
        unsigned WINDOW0                :1;
        unsigned WINDOW1                :1;
        unsigned WINDOW2                :1;
        unsigned                        :1;
        unsigned WDTCS                  :3;
    };
    struct {
        unsigned WDTWINDOW              :3;
        unsigned                        :1;
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
    };
    struct {
        unsigned WDTWINDOW0             :1;
        unsigned WDTWINDOW1             :1;
        unsigned WDTWINDOW2             :1;
        unsigned                        :1;
        unsigned WDTCS0                 :1;
        unsigned WDTCS1                 :1;
        unsigned WDTCS2                 :1;
    };
} WDTCON1bits_t;
extern volatile WDTCON1bits_t WDTCON1bits __at(0x075);
// bitfield macros
#define _WDTCON1_WINDOW_POSN                                0x0
#define _WDTCON1_WINDOW_POSITION                            0x0
#define _WDTCON1_WINDOW_SIZE                                0x3
#define _WDTCON1_WINDOW_LENGTH                              0x3
#define _WDTCON1_WINDOW_MASK                                0x7
#define _WDTCON1_CS_POSN                                    0x4
#define _WDTCON1_CS_POSITION                                0x4
#define _WDTCON1_CS_SIZE                                    0x3
#define _WDTCON1_CS_LENGTH                                  0x3
#define _WDTCON1_CS_MASK                                    0x70
#define _WDTCON1_WINDOW0_POSN                               0x0
#define _WDTCON1_WINDOW0_POSITION                           0x0
#define _WDTCON1_WINDOW0_SIZE                               0x1
#define _WDTCON1_WINDOW0_LENGTH                             0x1
#define _WDTCON1_WINDOW0_MASK                               0x1
#define _WDTCON1_WINDOW1_POSN                               0x1
#define _WDTCON1_WINDOW1_POSITION                           0x1
#define _WDTCON1_WINDOW1_SIZE                               0x1
#define _WDTCON1_WINDOW1_LENGTH                             0x1
#define _WDTCON1_WINDOW1_MASK                               0x2
#define _WDTCON1_WINDOW2_POSN                               0x2
#define _WDTCON1_WINDOW2_POSITION                           0x2
#define _WDTCON1_WINDOW2_SIZE                               0x1
#define _WDTCON1_WINDOW2_LENGTH                             0x1
#define _WDTCON1_WINDOW2_MASK                               0x4
#define _WDTCON1_WDTCS_POSN                                 0x4
#define _WDTCON1_WDTCS_POSITION                             0x4
#define _WDTCON1_WDTCS_SIZE                                 0x3
#define _WDTCON1_WDTCS_LENGTH                               0x3
#define _WDTCON1_WDTCS_MASK                                 0x70
#define _WDTCON1_WDTWINDOW_POSN                             0x0
#define _WDTCON1_WDTWINDOW_POSITION                         0x0
#define _WDTCON1_WDTWINDOW_SIZE                             0x3
#define _WDTCON1_WDTWINDOW_LENGTH                           0x3
#define _WDTCON1_WDTWINDOW_MASK                             0x7
#define _WDTCON1_CS0_POSN                                   0x4
#define _WDTCON1_CS0_POSITION                               0x4
#define _WDTCON1_CS0_SIZE                                   0x1
#define _WDTCON1_CS0_LENGTH                                 0x1
#define _WDTCON1_CS0_MASK                                   0x10
#define _WDTCON1_CS1_POSN                                   0x5
#define _WDTCON1_CS1_POSITION                               0x5
#define _WDTCON1_CS1_SIZE                                   0x1
#define _WDTCON1_CS1_LENGTH                                 0x1
#define _WDTCON1_CS1_MASK                                   0x20
#define _WDTCON1_CS2_POSN                                   0x6
#define _WDTCON1_CS2_POSITION                               0x6
#define _WDTCON1_CS2_SIZE                                   0x1
#define _WDTCON1_CS2_LENGTH                                 0x1
#define _WDTCON1_CS2_MASK                                   0x40
#define _WDTCON1_WDTWINDOW0_POSN                            0x0
#define _WDTCON1_WDTWINDOW0_POSITION                        0x0
#define _WDTCON1_WDTWINDOW0_SIZE                            0x1
#define _WDTCON1_WDTWINDOW0_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW0_MASK                            0x1
#define _WDTCON1_WDTWINDOW1_POSN                            0x1
#define _WDTCON1_WDTWINDOW1_POSITION                        0x1
#define _WDTCON1_WDTWINDOW1_SIZE                            0x1
#define _WDTCON1_WDTWINDOW1_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW1_MASK                            0x2
#define _WDTCON1_WDTWINDOW2_POSN                            0x2
#define _WDTCON1_WDTWINDOW2_POSITION                        0x2
#define _WDTCON1_WDTWINDOW2_SIZE                            0x1
#define _WDTCON1_WDTWINDOW2_LENGTH                          0x1
#define _WDTCON1_WDTWINDOW2_MASK                            0x4
#define _WDTCON1_WDTCS0_POSN                                0x4
#define _WDTCON1_WDTCS0_POSITION                            0x4
#define _WDTCON1_WDTCS0_SIZE                                0x1
#define _WDTCON1_WDTCS0_LENGTH                              0x1
#define _WDTCON1_WDTCS0_MASK                                0x10
#define _WDTCON1_WDTCS1_POSN                                0x5
#define _WDTCON1_WDTCS1_POSITION                            0x5
#define _WDTCON1_WDTCS1_SIZE                                0x1
#define _WDTCON1_WDTCS1_LENGTH                              0x1
#define _WDTCON1_WDTCS1_MASK                                0x20
#define _WDTCON1_WDTCS2_POSN                                0x6
#define _WDTCON1_WDTCS2_POSITION                            0x6
#define _WDTCON1_WDTCS2_SIZE                                0x1
#define _WDTCON1_WDTCS2_LENGTH                              0x1
#define _WDTCON1_WDTCS2_MASK                                0x40

// Register: WDTPS
#define WDTPS WDTPS
extern volatile unsigned short          WDTPS               __at(0x076);
#ifndef _LIB_BUILD
asm("WDTPS equ 076h");
#endif

// Register: WDTPSL
#define WDTPSL WDTPSL
extern volatile unsigned char           WDTPSL              __at(0x076);
#ifndef _LIB_BUILD
asm("WDTPSL equ 076h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNTL                 :8;
    };
    struct {
        unsigned WDTPSCNTL              :8;
    };
    struct {
        unsigned PSCNT0                 :1;
        unsigned PSCNT1                 :1;
        unsigned PSCNT2                 :1;
        unsigned PSCNT3                 :1;
        unsigned PSCNT4                 :1;
        unsigned PSCNT5                 :1;
        unsigned PSCNT6                 :1;
        unsigned PSCNT7                 :1;
    };
} WDTPSLbits_t;
extern volatile WDTPSLbits_t WDTPSLbits __at(0x076);
// bitfield macros
#define _WDTPSL_PSCNTL_POSN                                 0x0
#define _WDTPSL_PSCNTL_POSITION                             0x0
#define _WDTPSL_PSCNTL_SIZE                                 0x8
#define _WDTPSL_PSCNTL_LENGTH                               0x8
#define _WDTPSL_PSCNTL_MASK                                 0xFF
#define _WDTPSL_WDTPSCNTL_POSN                              0x0
#define _WDTPSL_WDTPSCNTL_POSITION                          0x0
#define _WDTPSL_WDTPSCNTL_SIZE                              0x8
#define _WDTPSL_WDTPSCNTL_LENGTH                            0x8
#define _WDTPSL_WDTPSCNTL_MASK                              0xFF
#define _WDTPSL_PSCNT0_POSN                                 0x0
#define _WDTPSL_PSCNT0_POSITION                             0x0
#define _WDTPSL_PSCNT0_SIZE                                 0x1
#define _WDTPSL_PSCNT0_LENGTH                               0x1
#define _WDTPSL_PSCNT0_MASK                                 0x1
#define _WDTPSL_PSCNT1_POSN                                 0x1
#define _WDTPSL_PSCNT1_POSITION                             0x1
#define _WDTPSL_PSCNT1_SIZE                                 0x1
#define _WDTPSL_PSCNT1_LENGTH                               0x1
#define _WDTPSL_PSCNT1_MASK                                 0x2
#define _WDTPSL_PSCNT2_POSN                                 0x2
#define _WDTPSL_PSCNT2_POSITION                             0x2
#define _WDTPSL_PSCNT2_SIZE                                 0x1
#define _WDTPSL_PSCNT2_LENGTH                               0x1
#define _WDTPSL_PSCNT2_MASK                                 0x4
#define _WDTPSL_PSCNT3_POSN                                 0x3
#define _WDTPSL_PSCNT3_POSITION                             0x3
#define _WDTPSL_PSCNT3_SIZE                                 0x1
#define _WDTPSL_PSCNT3_LENGTH                               0x1
#define _WDTPSL_PSCNT3_MASK                                 0x8
#define _WDTPSL_PSCNT4_POSN                                 0x4
#define _WDTPSL_PSCNT4_POSITION                             0x4
#define _WDTPSL_PSCNT4_SIZE                                 0x1
#define _WDTPSL_PSCNT4_LENGTH                               0x1
#define _WDTPSL_PSCNT4_MASK                                 0x10
#define _WDTPSL_PSCNT5_POSN                                 0x5
#define _WDTPSL_PSCNT5_POSITION                             0x5
#define _WDTPSL_PSCNT5_SIZE                                 0x1
#define _WDTPSL_PSCNT5_LENGTH                               0x1
#define _WDTPSL_PSCNT5_MASK                                 0x20
#define _WDTPSL_PSCNT6_POSN                                 0x6
#define _WDTPSL_PSCNT6_POSITION                             0x6
#define _WDTPSL_PSCNT6_SIZE                                 0x1
#define _WDTPSL_PSCNT6_LENGTH                               0x1
#define _WDTPSL_PSCNT6_MASK                                 0x40
#define _WDTPSL_PSCNT7_POSN                                 0x7
#define _WDTPSL_PSCNT7_POSITION                             0x7
#define _WDTPSL_PSCNT7_SIZE                                 0x1
#define _WDTPSL_PSCNT7_LENGTH                               0x1
#define _WDTPSL_PSCNT7_MASK                                 0x80

// Register: WDTPSH
#define WDTPSH WDTPSH
extern volatile unsigned char           WDTPSH              __at(0x077);
#ifndef _LIB_BUILD
asm("WDTPSH equ 077h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNTH                 :8;
    };
    struct {
        unsigned WDTPSCNTH              :8;
    };
    struct {
        unsigned PSCNT8                 :1;
        unsigned PSCNT9                 :1;
        unsigned PSCNT10                :1;
        unsigned PSCNT11                :1;
        unsigned PSCNT12                :1;
        unsigned PSCNT13                :1;
        unsigned PSCNT14                :1;
        unsigned PSCNT15                :1;
    };
} WDTPSHbits_t;
extern volatile WDTPSHbits_t WDTPSHbits __at(0x077);
// bitfield macros
#define _WDTPSH_PSCNTH_POSN                                 0x0
#define _WDTPSH_PSCNTH_POSITION                             0x0
#define _WDTPSH_PSCNTH_SIZE                                 0x8
#define _WDTPSH_PSCNTH_LENGTH                               0x8
#define _WDTPSH_PSCNTH_MASK                                 0xFF
#define _WDTPSH_WDTPSCNTH_POSN                              0x0
#define _WDTPSH_WDTPSCNTH_POSITION                          0x0
#define _WDTPSH_WDTPSCNTH_SIZE                              0x8
#define _WDTPSH_WDTPSCNTH_LENGTH                            0x8
#define _WDTPSH_WDTPSCNTH_MASK                              0xFF
#define _WDTPSH_PSCNT8_POSN                                 0x0
#define _WDTPSH_PSCNT8_POSITION                             0x0
#define _WDTPSH_PSCNT8_SIZE                                 0x1
#define _WDTPSH_PSCNT8_LENGTH                               0x1
#define _WDTPSH_PSCNT8_MASK                                 0x1
#define _WDTPSH_PSCNT9_POSN                                 0x1
#define _WDTPSH_PSCNT9_POSITION                             0x1
#define _WDTPSH_PSCNT9_SIZE                                 0x1
#define _WDTPSH_PSCNT9_LENGTH                               0x1
#define _WDTPSH_PSCNT9_MASK                                 0x2
#define _WDTPSH_PSCNT10_POSN                                0x2
#define _WDTPSH_PSCNT10_POSITION                            0x2
#define _WDTPSH_PSCNT10_SIZE                                0x1
#define _WDTPSH_PSCNT10_LENGTH                              0x1
#define _WDTPSH_PSCNT10_MASK                                0x4
#define _WDTPSH_PSCNT11_POSN                                0x3
#define _WDTPSH_PSCNT11_POSITION                            0x3
#define _WDTPSH_PSCNT11_SIZE                                0x1
#define _WDTPSH_PSCNT11_LENGTH                              0x1
#define _WDTPSH_PSCNT11_MASK                                0x8
#define _WDTPSH_PSCNT12_POSN                                0x4
#define _WDTPSH_PSCNT12_POSITION                            0x4
#define _WDTPSH_PSCNT12_SIZE                                0x1
#define _WDTPSH_PSCNT12_LENGTH                              0x1
#define _WDTPSH_PSCNT12_MASK                                0x10
#define _WDTPSH_PSCNT13_POSN                                0x5
#define _WDTPSH_PSCNT13_POSITION                            0x5
#define _WDTPSH_PSCNT13_SIZE                                0x1
#define _WDTPSH_PSCNT13_LENGTH                              0x1
#define _WDTPSH_PSCNT13_MASK                                0x20
#define _WDTPSH_PSCNT14_POSN                                0x6
#define _WDTPSH_PSCNT14_POSITION                            0x6
#define _WDTPSH_PSCNT14_SIZE                                0x1
#define _WDTPSH_PSCNT14_LENGTH                              0x1
#define _WDTPSH_PSCNT14_MASK                                0x40
#define _WDTPSH_PSCNT15_POSN                                0x7
#define _WDTPSH_PSCNT15_POSITION                            0x7
#define _WDTPSH_PSCNT15_SIZE                                0x1
#define _WDTPSH_PSCNT15_LENGTH                              0x1
#define _WDTPSH_PSCNT15_MASK                                0x80

// Register: WDTTMR
#define WDTTMR WDTTMR
extern volatile unsigned char           WDTTMR              __at(0x078);
#ifndef _LIB_BUILD
asm("WDTTMR equ 078h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PSCNT16                :1;
        unsigned PSCNT17                :1;
        unsigned STATE                  :1;
        unsigned TMR                    :5;
    };
    struct {
        unsigned WDTPSCNT16             :1;
        unsigned WDTPSCNT17             :1;
        unsigned WDTSTATE               :1;
        unsigned WDTTMR0                :1;
        unsigned WDTTMR1                :1;
        unsigned WDTTMR2                :1;
        unsigned WDTTMR3                :1;
        unsigned WDTTMR4                :1;
    };
    struct {
        unsigned                        :3;
        unsigned WDTTMR                 :5;
    };
} WDTTMRbits_t;
extern volatile WDTTMRbits_t WDTTMRbits __at(0x078);
// bitfield macros
#define _WDTTMR_PSCNT16_POSN                                0x0
#define _WDTTMR_PSCNT16_POSITION                            0x0
#define _WDTTMR_PSCNT16_SIZE                                0x1
#define _WDTTMR_PSCNT16_LENGTH                              0x1
#define _WDTTMR_PSCNT16_MASK                                0x1
#define _WDTTMR_PSCNT17_POSN                                0x1
#define _WDTTMR_PSCNT17_POSITION                            0x1
#define _WDTTMR_PSCNT17_SIZE                                0x1
#define _WDTTMR_PSCNT17_LENGTH                              0x1
#define _WDTTMR_PSCNT17_MASK                                0x2
#define _WDTTMR_STATE_POSN                                  0x2
#define _WDTTMR_STATE_POSITION                              0x2
#define _WDTTMR_STATE_SIZE                                  0x1
#define _WDTTMR_STATE_LENGTH                                0x1
#define _WDTTMR_STATE_MASK                                  0x4
#define _WDTTMR_TMR_POSN                                    0x3
#define _WDTTMR_TMR_POSITION                                0x3
#define _WDTTMR_TMR_SIZE                                    0x5
#define _WDTTMR_TMR_LENGTH                                  0x5
#define _WDTTMR_TMR_MASK                                    0xF8
#define _WDTTMR_WDTPSCNT16_POSN                             0x0
#define _WDTTMR_WDTPSCNT16_POSITION                         0x0
#define _WDTTMR_WDTPSCNT16_SIZE                             0x1
#define _WDTTMR_WDTPSCNT16_LENGTH                           0x1
#define _WDTTMR_WDTPSCNT16_MASK                             0x1
#define _WDTTMR_WDTPSCNT17_POSN                             0x1
#define _WDTTMR_WDTPSCNT17_POSITION                         0x1
#define _WDTTMR_WDTPSCNT17_SIZE                             0x1
#define _WDTTMR_WDTPSCNT17_LENGTH                           0x1
#define _WDTTMR_WDTPSCNT17_MASK                             0x2
#define _WDTTMR_WDTSTATE_POSN                               0x2
#define _WDTTMR_WDTSTATE_POSITION                           0x2
#define _WDTTMR_WDTSTATE_SIZE                               0x1
#define _WDTTMR_WDTSTATE_LENGTH                             0x1
#define _WDTTMR_WDTSTATE_MASK                               0x4
#define _WDTTMR_WDTTMR0_POSN                                0x3
#define _WDTTMR_WDTTMR0_POSITION                            0x3
#define _WDTTMR_WDTTMR0_SIZE                                0x1
#define _WDTTMR_WDTTMR0_LENGTH                              0x1
#define _WDTTMR_WDTTMR0_MASK                                0x8
#define _WDTTMR_WDTTMR1_POSN                                0x4
#define _WDTTMR_WDTTMR1_POSITION                            0x4
#define _WDTTMR_WDTTMR1_SIZE                                0x1
#define _WDTTMR_WDTTMR1_LENGTH                              0x1
#define _WDTTMR_WDTTMR1_MASK                                0x10
#define _WDTTMR_WDTTMR2_POSN                                0x5
#define _WDTTMR_WDTTMR2_POSITION                            0x5
#define _WDTTMR_WDTTMR2_SIZE                                0x1
#define _WDTTMR_WDTTMR2_LENGTH                              0x1
#define _WDTTMR_WDTTMR2_MASK                                0x20
#define _WDTTMR_WDTTMR3_POSN                                0x6
#define _WDTTMR_WDTTMR3_POSITION                            0x6
#define _WDTTMR_WDTTMR3_SIZE                                0x1
#define _WDTTMR_WDTTMR3_LENGTH                              0x1
#define _WDTTMR_WDTTMR3_MASK                                0x40
#define _WDTTMR_WDTTMR4_POSN                                0x7
#define _WDTTMR_WDTTMR4_POSITION                            0x7
#define _WDTTMR_WDTTMR4_SIZE                                0x1
#define _WDTTMR_WDTTMR4_LENGTH                              0x1
#define _WDTTMR_WDTTMR4_MASK                                0x80
#define _WDTTMR_WDTTMR_POSN                                 0x3
#define _WDTTMR_WDTTMR_POSITION                             0x3
#define _WDTTMR_WDTTMR_SIZE                                 0x5
#define _WDTTMR_WDTTMR_LENGTH                               0x5
#define _WDTTMR_WDTTMR_MASK                                 0xF8

// Register: VREGCON
#define VREGCON VREGCON
extern volatile unsigned char           VREGCON             __at(0x079);
#ifndef _LIB_BUILD
asm("VREGCON equ 079h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned VREGPM                 :2;
        unsigned                        :2;
        unsigned PMSYS                  :2;
    };
    struct {
        unsigned VREGPM0                :1;
        unsigned VREGPM1                :1;
        unsigned                        :2;
        unsigned PMSYS0                 :1;
        unsigned PMSYS1                 :1;
    };
} VREGCONbits_t;
extern volatile VREGCONbits_t VREGCONbits __at(0x079);
// bitfield macros
#define _VREGCON_VREGPM_POSN                                0x0
#define _VREGCON_VREGPM_POSITION                            0x0
#define _VREGCON_VREGPM_SIZE                                0x2
#define _VREGCON_VREGPM_LENGTH                              0x2
#define _VREGCON_VREGPM_MASK                                0x3
#define _VREGCON_PMSYS_POSN                                 0x4
#define _VREGCON_PMSYS_POSITION                             0x4
#define _VREGCON_PMSYS_SIZE                                 0x2
#define _VREGCON_PMSYS_LENGTH                               0x2
#define _VREGCON_PMSYS_MASK                                 0x30
#define _VREGCON_VREGPM0_POSN                               0x0
#define _VREGCON_VREGPM0_POSITION                           0x0
#define _VREGCON_VREGPM0_SIZE                               0x1
#define _VREGCON_VREGPM0_LENGTH                             0x1
#define _VREGCON_VREGPM0_MASK                               0x1
#define _VREGCON_VREGPM1_POSN                               0x1
#define _VREGCON_VREGPM1_POSITION                           0x1
#define _VREGCON_VREGPM1_SIZE                               0x1
#define _VREGCON_VREGPM1_LENGTH                             0x1
#define _VREGCON_VREGPM1_MASK                               0x2
#define _VREGCON_PMSYS0_POSN                                0x4
#define _VREGCON_PMSYS0_POSITION                            0x4
#define _VREGCON_PMSYS0_SIZE                                0x1
#define _VREGCON_PMSYS0_LENGTH                              0x1
#define _VREGCON_PMSYS0_MASK                                0x10
#define _VREGCON_PMSYS1_POSN                                0x5
#define _VREGCON_PMSYS1_POSITION                            0x5
#define _VREGCON_PMSYS1_SIZE                                0x1
#define _VREGCON_PMSYS1_LENGTH                              0x1
#define _VREGCON_PMSYS1_MASK                                0x20

// Register: OSCCON1
#define OSCCON1 OSCCON1
extern volatile unsigned char           OSCCON1             __at(0x07A);
#ifndef _LIB_BUILD
asm("OSCCON1 equ 07Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NDIV                   :4;
        unsigned NOSC                   :3;
    };
    struct {
        unsigned NDIV0                  :1;
        unsigned NDIV1                  :1;
        unsigned NDIV2                  :1;
        unsigned NDIV3                  :1;
        unsigned NOSC0                  :1;
        unsigned NOSC1                  :1;
        unsigned NOSC2                  :1;
    };
} OSCCON1bits_t;
extern volatile OSCCON1bits_t OSCCON1bits __at(0x07A);
// bitfield macros
#define _OSCCON1_NDIV_POSN                                  0x0
#define _OSCCON1_NDIV_POSITION                              0x0
#define _OSCCON1_NDIV_SIZE                                  0x4
#define _OSCCON1_NDIV_LENGTH                                0x4
#define _OSCCON1_NDIV_MASK                                  0xF
#define _OSCCON1_NOSC_POSN                                  0x4
#define _OSCCON1_NOSC_POSITION                              0x4
#define _OSCCON1_NOSC_SIZE                                  0x3
#define _OSCCON1_NOSC_LENGTH                                0x3
#define _OSCCON1_NOSC_MASK                                  0x70
#define _OSCCON1_NDIV0_POSN                                 0x0
#define _OSCCON1_NDIV0_POSITION                             0x0
#define _OSCCON1_NDIV0_SIZE                                 0x1
#define _OSCCON1_NDIV0_LENGTH                               0x1
#define _OSCCON1_NDIV0_MASK                                 0x1
#define _OSCCON1_NDIV1_POSN                                 0x1
#define _OSCCON1_NDIV1_POSITION                             0x1
#define _OSCCON1_NDIV1_SIZE                                 0x1
#define _OSCCON1_NDIV1_LENGTH                               0x1
#define _OSCCON1_NDIV1_MASK                                 0x2
#define _OSCCON1_NDIV2_POSN                                 0x2
#define _OSCCON1_NDIV2_POSITION                             0x2
#define _OSCCON1_NDIV2_SIZE                                 0x1
#define _OSCCON1_NDIV2_LENGTH                               0x1
#define _OSCCON1_NDIV2_MASK                                 0x4
#define _OSCCON1_NDIV3_POSN                                 0x3
#define _OSCCON1_NDIV3_POSITION                             0x3
#define _OSCCON1_NDIV3_SIZE                                 0x1
#define _OSCCON1_NDIV3_LENGTH                               0x1
#define _OSCCON1_NDIV3_MASK                                 0x8
#define _OSCCON1_NOSC0_POSN                                 0x4
#define _OSCCON1_NOSC0_POSITION                             0x4
#define _OSCCON1_NOSC0_SIZE                                 0x1
#define _OSCCON1_NOSC0_LENGTH                               0x1
#define _OSCCON1_NOSC0_MASK                                 0x10
#define _OSCCON1_NOSC1_POSN                                 0x5
#define _OSCCON1_NOSC1_POSITION                             0x5
#define _OSCCON1_NOSC1_SIZE                                 0x1
#define _OSCCON1_NOSC1_LENGTH                               0x1
#define _OSCCON1_NOSC1_MASK                                 0x20
#define _OSCCON1_NOSC2_POSN                                 0x6
#define _OSCCON1_NOSC2_POSITION                             0x6
#define _OSCCON1_NOSC2_SIZE                                 0x1
#define _OSCCON1_NOSC2_LENGTH                               0x1
#define _OSCCON1_NOSC2_MASK                                 0x40

// Register: OSCCON2
#define OSCCON2 OSCCON2
extern volatile unsigned char           OSCCON2             __at(0x07B);
#ifndef _LIB_BUILD
asm("OSCCON2 equ 07Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CDIV                   :4;
        unsigned COSC                   :3;
    };
    struct {
        unsigned CDIV0                  :1;
        unsigned CDIV1                  :1;
        unsigned CDIV2                  :1;
        unsigned CDIV3                  :1;
        unsigned COSC0                  :1;
        unsigned COSC1                  :1;
        unsigned COSC2                  :1;
    };
} OSCCON2bits_t;
extern volatile OSCCON2bits_t OSCCON2bits __at(0x07B);
// bitfield macros
#define _OSCCON2_CDIV_POSN                                  0x0
#define _OSCCON2_CDIV_POSITION                              0x0
#define _OSCCON2_CDIV_SIZE                                  0x4
#define _OSCCON2_CDIV_LENGTH                                0x4
#define _OSCCON2_CDIV_MASK                                  0xF
#define _OSCCON2_COSC_POSN                                  0x4
#define _OSCCON2_COSC_POSITION                              0x4
#define _OSCCON2_COSC_SIZE                                  0x3
#define _OSCCON2_COSC_LENGTH                                0x3
#define _OSCCON2_COSC_MASK                                  0x70
#define _OSCCON2_CDIV0_POSN                                 0x0
#define _OSCCON2_CDIV0_POSITION                             0x0
#define _OSCCON2_CDIV0_SIZE                                 0x1
#define _OSCCON2_CDIV0_LENGTH                               0x1
#define _OSCCON2_CDIV0_MASK                                 0x1
#define _OSCCON2_CDIV1_POSN                                 0x1
#define _OSCCON2_CDIV1_POSITION                             0x1
#define _OSCCON2_CDIV1_SIZE                                 0x1
#define _OSCCON2_CDIV1_LENGTH                               0x1
#define _OSCCON2_CDIV1_MASK                                 0x2
#define _OSCCON2_CDIV2_POSN                                 0x2
#define _OSCCON2_CDIV2_POSITION                             0x2
#define _OSCCON2_CDIV2_SIZE                                 0x1
#define _OSCCON2_CDIV2_LENGTH                               0x1
#define _OSCCON2_CDIV2_MASK                                 0x4
#define _OSCCON2_CDIV3_POSN                                 0x3
#define _OSCCON2_CDIV3_POSITION                             0x3
#define _OSCCON2_CDIV3_SIZE                                 0x1
#define _OSCCON2_CDIV3_LENGTH                               0x1
#define _OSCCON2_CDIV3_MASK                                 0x8
#define _OSCCON2_COSC0_POSN                                 0x4
#define _OSCCON2_COSC0_POSITION                             0x4
#define _OSCCON2_COSC0_SIZE                                 0x1
#define _OSCCON2_COSC0_LENGTH                               0x1
#define _OSCCON2_COSC0_MASK                                 0x10
#define _OSCCON2_COSC1_POSN                                 0x5
#define _OSCCON2_COSC1_POSITION                             0x5
#define _OSCCON2_COSC1_SIZE                                 0x1
#define _OSCCON2_COSC1_LENGTH                               0x1
#define _OSCCON2_COSC1_MASK                                 0x20
#define _OSCCON2_COSC2_POSN                                 0x6
#define _OSCCON2_COSC2_POSITION                             0x6
#define _OSCCON2_COSC2_SIZE                                 0x1
#define _OSCCON2_COSC2_LENGTH                               0x1
#define _OSCCON2_COSC2_MASK                                 0x40

// Register: OSCCON3
#define OSCCON3 OSCCON3
extern volatile unsigned char           OSCCON3             __at(0x07C);
#ifndef _LIB_BUILD
asm("OSCCON3 equ 07Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned NOSCR                  :1;
        unsigned ORDY                   :1;
        unsigned                        :1;
        unsigned SOSCPWR                :1;
        unsigned CSWHOLD                :1;
    };
} OSCCON3bits_t;
extern volatile OSCCON3bits_t OSCCON3bits __at(0x07C);
// bitfield macros
#define _OSCCON3_NOSCR_POSN                                 0x3
#define _OSCCON3_NOSCR_POSITION                             0x3
#define _OSCCON3_NOSCR_SIZE                                 0x1
#define _OSCCON3_NOSCR_LENGTH                               0x1
#define _OSCCON3_NOSCR_MASK                                 0x8
#define _OSCCON3_ORDY_POSN                                  0x4
#define _OSCCON3_ORDY_POSITION                              0x4
#define _OSCCON3_ORDY_SIZE                                  0x1
#define _OSCCON3_ORDY_LENGTH                                0x1
#define _OSCCON3_ORDY_MASK                                  0x10
#define _OSCCON3_SOSCPWR_POSN                               0x6
#define _OSCCON3_SOSCPWR_POSITION                           0x6
#define _OSCCON3_SOSCPWR_SIZE                               0x1
#define _OSCCON3_SOSCPWR_LENGTH                             0x1
#define _OSCCON3_SOSCPWR_MASK                               0x40
#define _OSCCON3_CSWHOLD_POSN                               0x7
#define _OSCCON3_CSWHOLD_POSITION                           0x7
#define _OSCCON3_CSWHOLD_SIZE                               0x1
#define _OSCCON3_CSWHOLD_LENGTH                             0x1
#define _OSCCON3_CSWHOLD_MASK                               0x80

// Register: OSCSTAT
#define OSCSTAT OSCSTAT
extern volatile unsigned char           OSCSTAT             __at(0x07D);
#ifndef _LIB_BUILD
asm("OSCSTAT equ 07Dh");
#endif
// aliases
extern volatile unsigned char           OSCSTAT1            __at(0x07D);
#ifndef _LIB_BUILD
asm("OSCSTAT1 equ 07Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLLR                   :1;
        unsigned SFOR                   :1;
        unsigned ADOR                   :1;
        unsigned SOR                    :1;
        unsigned LFOR                   :1;
        unsigned MFOR                   :1;
        unsigned HFOR                   :1;
        unsigned EXTOR                  :1;
    };
} OSCSTATbits_t;
extern volatile OSCSTATbits_t OSCSTATbits __at(0x07D);
// bitfield macros
#define _OSCSTAT_PLLR_POSN                                  0x0
#define _OSCSTAT_PLLR_POSITION                              0x0
#define _OSCSTAT_PLLR_SIZE                                  0x1
#define _OSCSTAT_PLLR_LENGTH                                0x1
#define _OSCSTAT_PLLR_MASK                                  0x1
#define _OSCSTAT_SFOR_POSN                                  0x1
#define _OSCSTAT_SFOR_POSITION                              0x1
#define _OSCSTAT_SFOR_SIZE                                  0x1
#define _OSCSTAT_SFOR_LENGTH                                0x1
#define _OSCSTAT_SFOR_MASK                                  0x2
#define _OSCSTAT_ADOR_POSN                                  0x2
#define _OSCSTAT_ADOR_POSITION                              0x2
#define _OSCSTAT_ADOR_SIZE                                  0x1
#define _OSCSTAT_ADOR_LENGTH                                0x1
#define _OSCSTAT_ADOR_MASK                                  0x4
#define _OSCSTAT_SOR_POSN                                   0x3
#define _OSCSTAT_SOR_POSITION                               0x3
#define _OSCSTAT_SOR_SIZE                                   0x1
#define _OSCSTAT_SOR_LENGTH                                 0x1
#define _OSCSTAT_SOR_MASK                                   0x8
#define _OSCSTAT_LFOR_POSN                                  0x4
#define _OSCSTAT_LFOR_POSITION                              0x4
#define _OSCSTAT_LFOR_SIZE                                  0x1
#define _OSCSTAT_LFOR_LENGTH                                0x1
#define _OSCSTAT_LFOR_MASK                                  0x10
#define _OSCSTAT_MFOR_POSN                                  0x5
#define _OSCSTAT_MFOR_POSITION                              0x5
#define _OSCSTAT_MFOR_SIZE                                  0x1
#define _OSCSTAT_MFOR_LENGTH                                0x1
#define _OSCSTAT_MFOR_MASK                                  0x20
#define _OSCSTAT_HFOR_POSN                                  0x6
#define _OSCSTAT_HFOR_POSITION                              0x6
#define _OSCSTAT_HFOR_SIZE                                  0x1
#define _OSCSTAT_HFOR_LENGTH                                0x1
#define _OSCSTAT_HFOR_MASK                                  0x40
#define _OSCSTAT_EXTOR_POSN                                 0x7
#define _OSCSTAT_EXTOR_POSITION                             0x7
#define _OSCSTAT_EXTOR_SIZE                                 0x1
#define _OSCSTAT_EXTOR_LENGTH                               0x1
#define _OSCSTAT_EXTOR_MASK                                 0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned PLLR                   :1;
        unsigned SFOR                   :1;
        unsigned ADOR                   :1;
        unsigned SOR                    :1;
        unsigned LFOR                   :1;
        unsigned MFOR                   :1;
        unsigned HFOR                   :1;
        unsigned EXTOR                  :1;
    };
} OSCSTAT1bits_t;
extern volatile OSCSTAT1bits_t OSCSTAT1bits __at(0x07D);
// bitfield macros
#define _OSCSTAT1_PLLR_POSN                                 0x0
#define _OSCSTAT1_PLLR_POSITION                             0x0
#define _OSCSTAT1_PLLR_SIZE                                 0x1
#define _OSCSTAT1_PLLR_LENGTH                               0x1
#define _OSCSTAT1_PLLR_MASK                                 0x1
#define _OSCSTAT1_SFOR_POSN                                 0x1
#define _OSCSTAT1_SFOR_POSITION                             0x1
#define _OSCSTAT1_SFOR_SIZE                                 0x1
#define _OSCSTAT1_SFOR_LENGTH                               0x1
#define _OSCSTAT1_SFOR_MASK                                 0x2
#define _OSCSTAT1_ADOR_POSN                                 0x2
#define _OSCSTAT1_ADOR_POSITION                             0x2
#define _OSCSTAT1_ADOR_SIZE                                 0x1
#define _OSCSTAT1_ADOR_LENGTH                               0x1
#define _OSCSTAT1_ADOR_MASK                                 0x4
#define _OSCSTAT1_SOR_POSN                                  0x3
#define _OSCSTAT1_SOR_POSITION                              0x3
#define _OSCSTAT1_SOR_SIZE                                  0x1
#define _OSCSTAT1_SOR_LENGTH                                0x1
#define _OSCSTAT1_SOR_MASK                                  0x8
#define _OSCSTAT1_LFOR_POSN                                 0x4
#define _OSCSTAT1_LFOR_POSITION                             0x4
#define _OSCSTAT1_LFOR_SIZE                                 0x1
#define _OSCSTAT1_LFOR_LENGTH                               0x1
#define _OSCSTAT1_LFOR_MASK                                 0x10
#define _OSCSTAT1_MFOR_POSN                                 0x5
#define _OSCSTAT1_MFOR_POSITION                             0x5
#define _OSCSTAT1_MFOR_SIZE                                 0x1
#define _OSCSTAT1_MFOR_LENGTH                               0x1
#define _OSCSTAT1_MFOR_MASK                                 0x20
#define _OSCSTAT1_HFOR_POSN                                 0x6
#define _OSCSTAT1_HFOR_POSITION                             0x6
#define _OSCSTAT1_HFOR_SIZE                                 0x1
#define _OSCSTAT1_HFOR_LENGTH                               0x1
#define _OSCSTAT1_HFOR_MASK                                 0x40
#define _OSCSTAT1_EXTOR_POSN                                0x7
#define _OSCSTAT1_EXTOR_POSITION                            0x7
#define _OSCSTAT1_EXTOR_SIZE                                0x1
#define _OSCSTAT1_EXTOR_LENGTH                              0x1
#define _OSCSTAT1_EXTOR_MASK                                0x80

// Register: OSCEN
#define OSCEN OSCEN
extern volatile unsigned char           OSCEN               __at(0x07E);
#ifndef _LIB_BUILD
asm("OSCEN equ 07Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLLEN                  :1;
        unsigned                        :1;
        unsigned ADOEN                  :1;
        unsigned SOSCEN                 :1;
        unsigned LFOEN                  :1;
        unsigned MFOEN                  :1;
        unsigned HFOEN                  :1;
        unsigned EXTOEN                 :1;
    };
} OSCENbits_t;
extern volatile OSCENbits_t OSCENbits __at(0x07E);
// bitfield macros
#define _OSCEN_PLLEN_POSN                                   0x0
#define _OSCEN_PLLEN_POSITION                               0x0
#define _OSCEN_PLLEN_SIZE                                   0x1
#define _OSCEN_PLLEN_LENGTH                                 0x1
#define _OSCEN_PLLEN_MASK                                   0x1
#define _OSCEN_ADOEN_POSN                                   0x2
#define _OSCEN_ADOEN_POSITION                               0x2
#define _OSCEN_ADOEN_SIZE                                   0x1
#define _OSCEN_ADOEN_LENGTH                                 0x1
#define _OSCEN_ADOEN_MASK                                   0x4
#define _OSCEN_SOSCEN_POSN                                  0x3
#define _OSCEN_SOSCEN_POSITION                              0x3
#define _OSCEN_SOSCEN_SIZE                                  0x1
#define _OSCEN_SOSCEN_LENGTH                                0x1
#define _OSCEN_SOSCEN_MASK                                  0x8
#define _OSCEN_LFOEN_POSN                                   0x4
#define _OSCEN_LFOEN_POSITION                               0x4
#define _OSCEN_LFOEN_SIZE                                   0x1
#define _OSCEN_LFOEN_LENGTH                                 0x1
#define _OSCEN_LFOEN_MASK                                   0x10
#define _OSCEN_MFOEN_POSN                                   0x5
#define _OSCEN_MFOEN_POSITION                               0x5
#define _OSCEN_MFOEN_SIZE                                   0x1
#define _OSCEN_MFOEN_LENGTH                                 0x1
#define _OSCEN_MFOEN_MASK                                   0x20
#define _OSCEN_HFOEN_POSN                                   0x6
#define _OSCEN_HFOEN_POSITION                               0x6
#define _OSCEN_HFOEN_SIZE                                   0x1
#define _OSCEN_HFOEN_LENGTH                                 0x1
#define _OSCEN_HFOEN_MASK                                   0x40
#define _OSCEN_EXTOEN_POSN                                  0x7
#define _OSCEN_EXTOEN_POSITION                              0x7
#define _OSCEN_EXTOEN_SIZE                                  0x1
#define _OSCEN_EXTOEN_LENGTH                                0x1
#define _OSCEN_EXTOEN_MASK                                  0x80

// Register: OSCTUNE
#define OSCTUNE OSCTUNE
extern volatile unsigned char           OSCTUNE             __at(0x07F);
#ifndef _LIB_BUILD
asm("OSCTUNE equ 07Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TUN                    :6;
    };
    struct {
        unsigned TUN0                   :1;
        unsigned TUN1                   :1;
        unsigned TUN2                   :1;
        unsigned TUN3                   :1;
        unsigned TUN4                   :1;
        unsigned TUN5                   :1;
    };
} OSCTUNEbits_t;
extern volatile OSCTUNEbits_t OSCTUNEbits __at(0x07F);
// bitfield macros
#define _OSCTUNE_TUN_POSN                                   0x0
#define _OSCTUNE_TUN_POSITION                               0x0
#define _OSCTUNE_TUN_SIZE                                   0x6
#define _OSCTUNE_TUN_LENGTH                                 0x6
#define _OSCTUNE_TUN_MASK                                   0x3F
#define _OSCTUNE_TUN0_POSN                                  0x0
#define _OSCTUNE_TUN0_POSITION                              0x0
#define _OSCTUNE_TUN0_SIZE                                  0x1
#define _OSCTUNE_TUN0_LENGTH                                0x1
#define _OSCTUNE_TUN0_MASK                                  0x1
#define _OSCTUNE_TUN1_POSN                                  0x1
#define _OSCTUNE_TUN1_POSITION                              0x1
#define _OSCTUNE_TUN1_SIZE                                  0x1
#define _OSCTUNE_TUN1_LENGTH                                0x1
#define _OSCTUNE_TUN1_MASK                                  0x2
#define _OSCTUNE_TUN2_POSN                                  0x2
#define _OSCTUNE_TUN2_POSITION                              0x2
#define _OSCTUNE_TUN2_SIZE                                  0x1
#define _OSCTUNE_TUN2_LENGTH                                0x1
#define _OSCTUNE_TUN2_MASK                                  0x4
#define _OSCTUNE_TUN3_POSN                                  0x3
#define _OSCTUNE_TUN3_POSITION                              0x3
#define _OSCTUNE_TUN3_SIZE                                  0x1
#define _OSCTUNE_TUN3_LENGTH                                0x1
#define _OSCTUNE_TUN3_MASK                                  0x8
#define _OSCTUNE_TUN4_POSN                                  0x4
#define _OSCTUNE_TUN4_POSITION                              0x4
#define _OSCTUNE_TUN4_SIZE                                  0x1
#define _OSCTUNE_TUN4_LENGTH                                0x1
#define _OSCTUNE_TUN4_MASK                                  0x10
#define _OSCTUNE_TUN5_POSN                                  0x5
#define _OSCTUNE_TUN5_POSITION                              0x5
#define _OSCTUNE_TUN5_SIZE                                  0x1
#define _OSCTUNE_TUN5_LENGTH                                0x1
#define _OSCTUNE_TUN5_MASK                                  0x20

// Register: OSCFRQ
#define OSCFRQ OSCFRQ
extern volatile unsigned char           OSCFRQ              __at(0x080);
#ifndef _LIB_BUILD
asm("OSCFRQ equ 080h");
#endif
// aliases
extern volatile unsigned char           OSCFREQ             __at(0x080);
#ifndef _LIB_BUILD
asm("OSCFREQ equ 080h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FRQ                    :4;
    };
    struct {
        unsigned FRQ0                   :1;
        unsigned FRQ1                   :1;
        unsigned FRQ2                   :1;
        unsigned FRQ3                   :1;
    };
} OSCFRQbits_t;
extern volatile OSCFRQbits_t OSCFRQbits __at(0x080);
// bitfield macros
#define _OSCFRQ_FRQ_POSN                                    0x0
#define _OSCFRQ_FRQ_POSITION                                0x0
#define _OSCFRQ_FRQ_SIZE                                    0x4
#define _OSCFRQ_FRQ_LENGTH                                  0x4
#define _OSCFRQ_FRQ_MASK                                    0xF
#define _OSCFRQ_FRQ0_POSN                                   0x0
#define _OSCFRQ_FRQ0_POSITION                               0x0
#define _OSCFRQ_FRQ0_SIZE                                   0x1
#define _OSCFRQ_FRQ0_LENGTH                                 0x1
#define _OSCFRQ_FRQ0_MASK                                   0x1
#define _OSCFRQ_FRQ1_POSN                                   0x1
#define _OSCFRQ_FRQ1_POSITION                               0x1
#define _OSCFRQ_FRQ1_SIZE                                   0x1
#define _OSCFRQ_FRQ1_LENGTH                                 0x1
#define _OSCFRQ_FRQ1_MASK                                   0x2
#define _OSCFRQ_FRQ2_POSN                                   0x2
#define _OSCFRQ_FRQ2_POSITION                               0x2
#define _OSCFRQ_FRQ2_SIZE                                   0x1
#define _OSCFRQ_FRQ2_LENGTH                                 0x1
#define _OSCFRQ_FRQ2_MASK                                   0x4
#define _OSCFRQ_FRQ3_POSN                                   0x3
#define _OSCFRQ_FRQ3_POSITION                               0x3
#define _OSCFRQ_FRQ3_SIZE                                   0x1
#define _OSCFRQ_FRQ3_LENGTH                                 0x1
#define _OSCFRQ_FRQ3_MASK                                   0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned FRQ                    :4;
    };
    struct {
        unsigned FRQ0                   :1;
        unsigned FRQ1                   :1;
        unsigned FRQ2                   :1;
        unsigned FRQ3                   :1;
    };
} OSCFREQbits_t;
extern volatile OSCFREQbits_t OSCFREQbits __at(0x080);
// bitfield macros
#define _OSCFREQ_FRQ_POSN                                   0x0
#define _OSCFREQ_FRQ_POSITION                               0x0
#define _OSCFREQ_FRQ_SIZE                                   0x4
#define _OSCFREQ_FRQ_LENGTH                                 0x4
#define _OSCFREQ_FRQ_MASK                                   0xF
#define _OSCFREQ_FRQ0_POSN                                  0x0
#define _OSCFREQ_FRQ0_POSITION                              0x0
#define _OSCFREQ_FRQ0_SIZE                                  0x1
#define _OSCFREQ_FRQ0_LENGTH                                0x1
#define _OSCFREQ_FRQ0_MASK                                  0x1
#define _OSCFREQ_FRQ1_POSN                                  0x1
#define _OSCFREQ_FRQ1_POSITION                              0x1
#define _OSCFREQ_FRQ1_SIZE                                  0x1
#define _OSCFREQ_FRQ1_LENGTH                                0x1
#define _OSCFREQ_FRQ1_MASK                                  0x2
#define _OSCFREQ_FRQ2_POSN                                  0x2
#define _OSCFREQ_FRQ2_POSITION                              0x2
#define _OSCFREQ_FRQ2_SIZE                                  0x1
#define _OSCFREQ_FRQ2_LENGTH                                0x1
#define _OSCFREQ_FRQ2_MASK                                  0x4
#define _OSCFREQ_FRQ3_POSN                                  0x3
#define _OSCFREQ_FRQ3_POSITION                              0x3
#define _OSCFREQ_FRQ3_SIZE                                  0x1
#define _OSCFREQ_FRQ3_LENGTH                                0x1
#define _OSCFREQ_FRQ3_MASK                                  0x8

// Register: ACTCON
#define ACTCON ACTCON
extern volatile unsigned char           ACTCON              __at(0x081);
#ifndef _LIB_BUILD
asm("ACTCON equ 081h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned ORS                    :1;
        unsigned                        :1;
        unsigned LOCK                   :1;
        unsigned                        :2;
        unsigned UD                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned                        :1;
        unsigned ACTORS                 :1;
        unsigned                        :1;
        unsigned ACTLOCK                :1;
        unsigned                        :2;
        unsigned ACTUD                  :1;
        unsigned ACTEN                  :1;
    };
} ACTCONbits_t;
extern volatile ACTCONbits_t ACTCONbits __at(0x081);
// bitfield macros
#define _ACTCON_ORS_POSN                                    0x1
#define _ACTCON_ORS_POSITION                                0x1
#define _ACTCON_ORS_SIZE                                    0x1
#define _ACTCON_ORS_LENGTH                                  0x1
#define _ACTCON_ORS_MASK                                    0x2
#define _ACTCON_LOCK_POSN                                   0x3
#define _ACTCON_LOCK_POSITION                               0x3
#define _ACTCON_LOCK_SIZE                                   0x1
#define _ACTCON_LOCK_LENGTH                                 0x1
#define _ACTCON_LOCK_MASK                                   0x8
#define _ACTCON_UD_POSN                                     0x6
#define _ACTCON_UD_POSITION                                 0x6
#define _ACTCON_UD_SIZE                                     0x1
#define _ACTCON_UD_LENGTH                                   0x1
#define _ACTCON_UD_MASK                                     0x40
#define _ACTCON_EN_POSN                                     0x7
#define _ACTCON_EN_POSITION                                 0x7
#define _ACTCON_EN_SIZE                                     0x1
#define _ACTCON_EN_LENGTH                                   0x1
#define _ACTCON_EN_MASK                                     0x80
#define _ACTCON_ACTORS_POSN                                 0x1
#define _ACTCON_ACTORS_POSITION                             0x1
#define _ACTCON_ACTORS_SIZE                                 0x1
#define _ACTCON_ACTORS_LENGTH                               0x1
#define _ACTCON_ACTORS_MASK                                 0x2
#define _ACTCON_ACTLOCK_POSN                                0x3
#define _ACTCON_ACTLOCK_POSITION                            0x3
#define _ACTCON_ACTLOCK_SIZE                                0x1
#define _ACTCON_ACTLOCK_LENGTH                              0x1
#define _ACTCON_ACTLOCK_MASK                                0x8
#define _ACTCON_ACTUD_POSN                                  0x6
#define _ACTCON_ACTUD_POSITION                              0x6
#define _ACTCON_ACTUD_SIZE                                  0x1
#define _ACTCON_ACTUD_LENGTH                                0x1
#define _ACTCON_ACTUD_MASK                                  0x40
#define _ACTCON_ACTEN_POSN                                  0x7
#define _ACTCON_ACTEN_POSITION                              0x7
#define _ACTCON_ACTEN_SIZE                                  0x1
#define _ACTCON_ACTEN_LENGTH                                0x1
#define _ACTCON_ACTEN_MASK                                  0x80

// Register: FSCMCON
#define FSCMCON FSCMCON
extern volatile unsigned char           FSCMCON             __at(0x082);
#ifndef _LIB_BUILD
asm("FSCMCON equ 082h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSCMFEV                :1;
        unsigned FSCMFFI                :1;
        unsigned FSCMPEV                :1;
        unsigned FSCMPFI                :1;
        unsigned FSCMSEV                :1;
        unsigned FSCMSFI                :1;
    };
} FSCMCONbits_t;
extern volatile FSCMCONbits_t FSCMCONbits __at(0x082);
// bitfield macros
#define _FSCMCON_FSCMFEV_POSN                               0x0
#define _FSCMCON_FSCMFEV_POSITION                           0x0
#define _FSCMCON_FSCMFEV_SIZE                               0x1
#define _FSCMCON_FSCMFEV_LENGTH                             0x1
#define _FSCMCON_FSCMFEV_MASK                               0x1
#define _FSCMCON_FSCMFFI_POSN                               0x1
#define _FSCMCON_FSCMFFI_POSITION                           0x1
#define _FSCMCON_FSCMFFI_SIZE                               0x1
#define _FSCMCON_FSCMFFI_LENGTH                             0x1
#define _FSCMCON_FSCMFFI_MASK                               0x2
#define _FSCMCON_FSCMPEV_POSN                               0x2
#define _FSCMCON_FSCMPEV_POSITION                           0x2
#define _FSCMCON_FSCMPEV_SIZE                               0x1
#define _FSCMCON_FSCMPEV_LENGTH                             0x1
#define _FSCMCON_FSCMPEV_MASK                               0x4
#define _FSCMCON_FSCMPFI_POSN                               0x3
#define _FSCMCON_FSCMPFI_POSITION                           0x3
#define _FSCMCON_FSCMPFI_SIZE                               0x1
#define _FSCMCON_FSCMPFI_LENGTH                             0x1
#define _FSCMCON_FSCMPFI_MASK                               0x8
#define _FSCMCON_FSCMSEV_POSN                               0x4
#define _FSCMCON_FSCMSEV_POSITION                           0x4
#define _FSCMCON_FSCMSEV_SIZE                               0x1
#define _FSCMCON_FSCMSEV_LENGTH                             0x1
#define _FSCMCON_FSCMSEV_MASK                               0x10
#define _FSCMCON_FSCMSFI_POSN                               0x5
#define _FSCMCON_FSCMSFI_POSITION                           0x5
#define _FSCMCON_FSCMSFI_SIZE                               0x1
#define _FSCMCON_FSCMSFI_LENGTH                             0x1
#define _FSCMCON_FSCMSFI_MASK                               0x20

// Register: I3C1CON0
#define I3C1CON0 I3C1CON0
extern volatile unsigned char           I3C1CON0            __at(0x083);
#ifndef _LIB_BUILD
asm("I3C1CON0 equ 083h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IBIREQ                 :1;
        unsigned HJREQ                  :1;
        unsigned ACKP                   :1;
        unsigned CLRRXB                 :1;
        unsigned CLRTXB                 :1;
        unsigned RST                    :1;
        unsigned BTOEN                  :1;
        unsigned EN                     :1;
    };
} I3C1CON0bits_t;
extern volatile I3C1CON0bits_t I3C1CON0bits __at(0x083);
// bitfield macros
#define _I3C1CON0_IBIREQ_POSN                               0x0
#define _I3C1CON0_IBIREQ_POSITION                           0x0
#define _I3C1CON0_IBIREQ_SIZE                               0x1
#define _I3C1CON0_IBIREQ_LENGTH                             0x1
#define _I3C1CON0_IBIREQ_MASK                               0x1
#define _I3C1CON0_HJREQ_POSN                                0x1
#define _I3C1CON0_HJREQ_POSITION                            0x1
#define _I3C1CON0_HJREQ_SIZE                                0x1
#define _I3C1CON0_HJREQ_LENGTH                              0x1
#define _I3C1CON0_HJREQ_MASK                                0x2
#define _I3C1CON0_ACKP_POSN                                 0x2
#define _I3C1CON0_ACKP_POSITION                             0x2
#define _I3C1CON0_ACKP_SIZE                                 0x1
#define _I3C1CON0_ACKP_LENGTH                               0x1
#define _I3C1CON0_ACKP_MASK                                 0x4
#define _I3C1CON0_CLRRXB_POSN                               0x3
#define _I3C1CON0_CLRRXB_POSITION                           0x3
#define _I3C1CON0_CLRRXB_SIZE                               0x1
#define _I3C1CON0_CLRRXB_LENGTH                             0x1
#define _I3C1CON0_CLRRXB_MASK                               0x8
#define _I3C1CON0_CLRTXB_POSN                               0x4
#define _I3C1CON0_CLRTXB_POSITION                           0x4
#define _I3C1CON0_CLRTXB_SIZE                               0x1
#define _I3C1CON0_CLRTXB_LENGTH                             0x1
#define _I3C1CON0_CLRTXB_MASK                               0x10
#define _I3C1CON0_RST_POSN                                  0x5
#define _I3C1CON0_RST_POSITION                              0x5
#define _I3C1CON0_RST_SIZE                                  0x1
#define _I3C1CON0_RST_LENGTH                                0x1
#define _I3C1CON0_RST_MASK                                  0x20
#define _I3C1CON0_BTOEN_POSN                                0x6
#define _I3C1CON0_BTOEN_POSITION                            0x6
#define _I3C1CON0_BTOEN_SIZE                                0x1
#define _I3C1CON0_BTOEN_LENGTH                              0x1
#define _I3C1CON0_BTOEN_MASK                                0x40
#define _I3C1CON0_EN_POSN                                   0x7
#define _I3C1CON0_EN_POSITION                               0x7
#define _I3C1CON0_EN_SIZE                                   0x1
#define _I3C1CON0_EN_LENGTH                                 0x1
#define _I3C1CON0_EN_MASK                                   0x80

// Register: I3C1CON1
#define I3C1CON1 I3C1CON1
extern volatile unsigned char           I3C1CON1            __at(0x084);
#ifndef _LIB_BUILD
asm("I3C1CON1 equ 084h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACKPOS                 :1;
        unsigned SASDRMD                :1;
        unsigned FHDRE                  :1;
        unsigned BERRDET                :1;
    };
} I3C1CON1bits_t;
extern volatile I3C1CON1bits_t I3C1CON1bits __at(0x084);
// bitfield macros
#define _I3C1CON1_ACKPOS_POSN                               0x0
#define _I3C1CON1_ACKPOS_POSITION                           0x0
#define _I3C1CON1_ACKPOS_SIZE                               0x1
#define _I3C1CON1_ACKPOS_LENGTH                             0x1
#define _I3C1CON1_ACKPOS_MASK                               0x1
#define _I3C1CON1_SASDRMD_POSN                              0x1
#define _I3C1CON1_SASDRMD_POSITION                          0x1
#define _I3C1CON1_SASDRMD_SIZE                              0x1
#define _I3C1CON1_SASDRMD_LENGTH                            0x1
#define _I3C1CON1_SASDRMD_MASK                              0x2
#define _I3C1CON1_FHDRE_POSN                                0x2
#define _I3C1CON1_FHDRE_POSITION                            0x2
#define _I3C1CON1_FHDRE_SIZE                                0x1
#define _I3C1CON1_FHDRE_LENGTH                              0x1
#define _I3C1CON1_FHDRE_MASK                                0x4
#define _I3C1CON1_BERRDET_POSN                              0x3
#define _I3C1CON1_BERRDET_POSITION                          0x3
#define _I3C1CON1_BERRDET_SIZE                              0x1
#define _I3C1CON1_BERRDET_LENGTH                            0x1
#define _I3C1CON1_BERRDET_MASK                              0x8

// Register: I3C1RXB
#define I3C1RXB I3C1RXB
extern volatile unsigned char           I3C1RXB             __at(0x085);
#ifndef _LIB_BUILD
asm("I3C1RXB equ 085h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} I3C1RXBbits_t;
extern volatile I3C1RXBbits_t I3C1RXBbits __at(0x085);
// bitfield macros
#define _I3C1RXB_RXB_POSN                                   0x0
#define _I3C1RXB_RXB_POSITION                               0x0
#define _I3C1RXB_RXB_SIZE                                   0x8
#define _I3C1RXB_RXB_LENGTH                                 0x8
#define _I3C1RXB_RXB_MASK                                   0xFF

// Register: I3C1TXB
#define I3C1TXB I3C1TXB
extern volatile unsigned char           I3C1TXB             __at(0x086);
#ifndef _LIB_BUILD
asm("I3C1TXB equ 086h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} I3C1TXBbits_t;
extern volatile I3C1TXBbits_t I3C1TXBbits __at(0x086);
// bitfield macros
#define _I3C1TXB_TXB_POSN                                   0x0
#define _I3C1TXB_TXB_POSITION                               0x0
#define _I3C1TXB_TXB_SIZE                                   0x8
#define _I3C1TXB_TXB_LENGTH                                 0x8
#define _I3C1TXB_TXB_MASK                                   0xFF

// Register: I3C1STAT0
#define I3C1STAT0 I3C1STAT0
extern volatile unsigned char           I3C1STAT0           __at(0x087);
#ifndef _LIB_BUILD
asm("I3C1STAT0 equ 087h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RNW                    :2;
        unsigned RXBF                   :1;
        unsigned TXBE                   :1;
        unsigned RSTDET                 :1;
        unsigned OPMD                   :2;
        unsigned BFREE                  :1;
    };
} I3C1STAT0bits_t;
extern volatile I3C1STAT0bits_t I3C1STAT0bits __at(0x087);
// bitfield macros
#define _I3C1STAT0_RNW_POSN                                 0x0
#define _I3C1STAT0_RNW_POSITION                             0x0
#define _I3C1STAT0_RNW_SIZE                                 0x2
#define _I3C1STAT0_RNW_LENGTH                               0x2
#define _I3C1STAT0_RNW_MASK                                 0x3
#define _I3C1STAT0_RXBF_POSN                                0x2
#define _I3C1STAT0_RXBF_POSITION                            0x2
#define _I3C1STAT0_RXBF_SIZE                                0x1
#define _I3C1STAT0_RXBF_LENGTH                              0x1
#define _I3C1STAT0_RXBF_MASK                                0x4
#define _I3C1STAT0_TXBE_POSN                                0x3
#define _I3C1STAT0_TXBE_POSITION                            0x3
#define _I3C1STAT0_TXBE_SIZE                                0x1
#define _I3C1STAT0_TXBE_LENGTH                              0x1
#define _I3C1STAT0_TXBE_MASK                                0x8
#define _I3C1STAT0_RSTDET_POSN                              0x4
#define _I3C1STAT0_RSTDET_POSITION                          0x4
#define _I3C1STAT0_RSTDET_SIZE                              0x1
#define _I3C1STAT0_RSTDET_LENGTH                            0x1
#define _I3C1STAT0_RSTDET_MASK                              0x10
#define _I3C1STAT0_OPMD_POSN                                0x5
#define _I3C1STAT0_OPMD_POSITION                            0x5
#define _I3C1STAT0_OPMD_SIZE                                0x2
#define _I3C1STAT0_OPMD_LENGTH                              0x2
#define _I3C1STAT0_OPMD_MASK                                0x60
#define _I3C1STAT0_BFREE_POSN                               0x7
#define _I3C1STAT0_BFREE_POSITION                           0x7
#define _I3C1STAT0_BFREE_SIZE                               0x1
#define _I3C1STAT0_BFREE_LENGTH                             0x1
#define _I3C1STAT0_BFREE_MASK                               0x80

// Register: I3C1STAT1
#define I3C1STAT1 I3C1STAT1
extern volatile unsigned char           I3C1STAT1           __at(0x088);
#ifndef _LIB_BUILD
asm("I3C1STAT1 equ 088h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXFNE                  :1;
    };
} I3C1STAT1bits_t;
extern volatile I3C1STAT1bits_t I3C1STAT1bits __at(0x088);
// bitfield macros
#define _I3C1STAT1_TXFNE_POSN                               0x0
#define _I3C1STAT1_TXFNE_POSITION                           0x0
#define _I3C1STAT1_TXFNE_SIZE                               0x1
#define _I3C1STAT1_TXFNE_LENGTH                             0x1
#define _I3C1STAT1_TXFNE_MASK                               0x1

// Register: I3C1BSTAT
#define I3C1BSTAT I3C1BSTAT
extern volatile unsigned char           I3C1BSTAT           __at(0x089);
#ifndef _LIB_BUILD
asm("I3C1BSTAT equ 089h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TE0ERR                 :1;
        unsigned TE1ERR                 :1;
        unsigned TE2ERR                 :1;
        unsigned TE3ERR                 :1;
        unsigned TE4ERR                 :1;
        unsigned TE5ERR                 :1;
        unsigned TE6ERR                 :1;
    };
} I3C1BSTATbits_t;
extern volatile I3C1BSTATbits_t I3C1BSTATbits __at(0x089);
// bitfield macros
#define _I3C1BSTAT_TE0ERR_POSN                              0x0
#define _I3C1BSTAT_TE0ERR_POSITION                          0x0
#define _I3C1BSTAT_TE0ERR_SIZE                              0x1
#define _I3C1BSTAT_TE0ERR_LENGTH                            0x1
#define _I3C1BSTAT_TE0ERR_MASK                              0x1
#define _I3C1BSTAT_TE1ERR_POSN                              0x1
#define _I3C1BSTAT_TE1ERR_POSITION                          0x1
#define _I3C1BSTAT_TE1ERR_SIZE                              0x1
#define _I3C1BSTAT_TE1ERR_LENGTH                            0x1
#define _I3C1BSTAT_TE1ERR_MASK                              0x2
#define _I3C1BSTAT_TE2ERR_POSN                              0x2
#define _I3C1BSTAT_TE2ERR_POSITION                          0x2
#define _I3C1BSTAT_TE2ERR_SIZE                              0x1
#define _I3C1BSTAT_TE2ERR_LENGTH                            0x1
#define _I3C1BSTAT_TE2ERR_MASK                              0x4
#define _I3C1BSTAT_TE3ERR_POSN                              0x3
#define _I3C1BSTAT_TE3ERR_POSITION                          0x3
#define _I3C1BSTAT_TE3ERR_SIZE                              0x1
#define _I3C1BSTAT_TE3ERR_LENGTH                            0x1
#define _I3C1BSTAT_TE3ERR_MASK                              0x8
#define _I3C1BSTAT_TE4ERR_POSN                              0x4
#define _I3C1BSTAT_TE4ERR_POSITION                          0x4
#define _I3C1BSTAT_TE4ERR_SIZE                              0x1
#define _I3C1BSTAT_TE4ERR_LENGTH                            0x1
#define _I3C1BSTAT_TE4ERR_MASK                              0x10
#define _I3C1BSTAT_TE5ERR_POSN                              0x5
#define _I3C1BSTAT_TE5ERR_POSITION                          0x5
#define _I3C1BSTAT_TE5ERR_SIZE                              0x1
#define _I3C1BSTAT_TE5ERR_LENGTH                            0x1
#define _I3C1BSTAT_TE5ERR_MASK                              0x20
#define _I3C1BSTAT_TE6ERR_POSN                              0x6
#define _I3C1BSTAT_TE6ERR_POSITION                          0x6
#define _I3C1BSTAT_TE6ERR_SIZE                              0x1
#define _I3C1BSTAT_TE6ERR_LENGTH                            0x1
#define _I3C1BSTAT_TE6ERR_MASK                              0x40

// Register: I3C1PIR0
#define I3C1PIR0 I3C1PIR0
extern volatile unsigned char           I3C1PIR0            __at(0x08A);
#ifndef _LIB_BUILD
asm("I3C1PIR0 equ 08Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCCCIF                 :1;
        unsigned BTFIF                  :1;
        unsigned DADRIF                 :1;
        unsigned SADRIF                 :1;
        unsigned I2CACKIF               :1;
        unsigned RSCIF                  :1;
        unsigned PCIF                   :1;
        unsigned SCIF                   :1;
    };
} I3C1PIR0bits_t;
extern volatile I3C1PIR0bits_t I3C1PIR0bits __at(0x08A);
// bitfield macros
#define _I3C1PIR0_SCCCIF_POSN                               0x0
#define _I3C1PIR0_SCCCIF_POSITION                           0x0
#define _I3C1PIR0_SCCCIF_SIZE                               0x1
#define _I3C1PIR0_SCCCIF_LENGTH                             0x1
#define _I3C1PIR0_SCCCIF_MASK                               0x1
#define _I3C1PIR0_BTFIF_POSN                                0x1
#define _I3C1PIR0_BTFIF_POSITION                            0x1
#define _I3C1PIR0_BTFIF_SIZE                                0x1
#define _I3C1PIR0_BTFIF_LENGTH                              0x1
#define _I3C1PIR0_BTFIF_MASK                                0x2
#define _I3C1PIR0_DADRIF_POSN                               0x2
#define _I3C1PIR0_DADRIF_POSITION                           0x2
#define _I3C1PIR0_DADRIF_SIZE                               0x1
#define _I3C1PIR0_DADRIF_LENGTH                             0x1
#define _I3C1PIR0_DADRIF_MASK                               0x4
#define _I3C1PIR0_SADRIF_POSN                               0x3
#define _I3C1PIR0_SADRIF_POSITION                           0x3
#define _I3C1PIR0_SADRIF_SIZE                               0x1
#define _I3C1PIR0_SADRIF_LENGTH                             0x1
#define _I3C1PIR0_SADRIF_MASK                               0x8
#define _I3C1PIR0_I2CACKIF_POSN                             0x4
#define _I3C1PIR0_I2CACKIF_POSITION                         0x4
#define _I3C1PIR0_I2CACKIF_SIZE                             0x1
#define _I3C1PIR0_I2CACKIF_LENGTH                           0x1
#define _I3C1PIR0_I2CACKIF_MASK                             0x10
#define _I3C1PIR0_RSCIF_POSN                                0x5
#define _I3C1PIR0_RSCIF_POSITION                            0x5
#define _I3C1PIR0_RSCIF_SIZE                                0x1
#define _I3C1PIR0_RSCIF_LENGTH                              0x1
#define _I3C1PIR0_RSCIF_MASK                                0x20
#define _I3C1PIR0_PCIF_POSN                                 0x6
#define _I3C1PIR0_PCIF_POSITION                             0x6
#define _I3C1PIR0_PCIF_SIZE                                 0x1
#define _I3C1PIR0_PCIF_LENGTH                               0x1
#define _I3C1PIR0_PCIF_MASK                                 0x40
#define _I3C1PIR0_SCIF_POSN                                 0x7
#define _I3C1PIR0_SCIF_POSITION                             0x7
#define _I3C1PIR0_SCIF_SIZE                                 0x1
#define _I3C1PIR0_SCIF_LENGTH                               0x1
#define _I3C1PIR0_SCIF_MASK                                 0x80

// Register: I3C1PIR1
#define I3C1PIR1 I3C1PIR1
extern volatile unsigned char           I3C1PIR1            __at(0x08B);
#ifndef _LIB_BUILD
asm("I3C1PIR1 equ 08Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned IBIDONEIF              :1;
        unsigned DACHIF                 :1;
        unsigned TCOMPIF                :1;
    };
} I3C1PIR1bits_t;
extern volatile I3C1PIR1bits_t I3C1PIR1bits __at(0x08B);
// bitfield macros
#define _I3C1PIR1_IBIDONEIF_POSN                            0x5
#define _I3C1PIR1_IBIDONEIF_POSITION                        0x5
#define _I3C1PIR1_IBIDONEIF_SIZE                            0x1
#define _I3C1PIR1_IBIDONEIF_LENGTH                          0x1
#define _I3C1PIR1_IBIDONEIF_MASK                            0x20
#define _I3C1PIR1_DACHIF_POSN                               0x6
#define _I3C1PIR1_DACHIF_POSITION                           0x6
#define _I3C1PIR1_DACHIF_SIZE                               0x1
#define _I3C1PIR1_DACHIF_LENGTH                             0x1
#define _I3C1PIR1_DACHIF_MASK                               0x40
#define _I3C1PIR1_TCOMPIF_POSN                              0x7
#define _I3C1PIR1_TCOMPIF_POSITION                          0x7
#define _I3C1PIR1_TCOMPIF_SIZE                              0x1
#define _I3C1PIR1_TCOMPIF_LENGTH                            0x1
#define _I3C1PIR1_TCOMPIF_MASK                              0x80

// Register: I3C1ERRIR0
#define I3C1ERRIR0 I3C1ERRIR0
extern volatile unsigned char           I3C1ERRIR0          __at(0x08C);
#ifndef _LIB_BUILD
asm("I3C1ERRIR0 equ 08Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned UCCCIF                 :1;
        unsigned BTOIF                  :1;
        unsigned BUSEIF                 :1;
        unsigned IBIEIF                 :1;
        unsigned HJEIF                  :1;
        unsigned RXOIF                  :1;
        unsigned TXUIF                  :1;
        unsigned I2CNACKIF              :1;
    };
} I3C1ERRIR0bits_t;
extern volatile I3C1ERRIR0bits_t I3C1ERRIR0bits __at(0x08C);
// bitfield macros
#define _I3C1ERRIR0_UCCCIF_POSN                             0x0
#define _I3C1ERRIR0_UCCCIF_POSITION                         0x0
#define _I3C1ERRIR0_UCCCIF_SIZE                             0x1
#define _I3C1ERRIR0_UCCCIF_LENGTH                           0x1
#define _I3C1ERRIR0_UCCCIF_MASK                             0x1
#define _I3C1ERRIR0_BTOIF_POSN                              0x1
#define _I3C1ERRIR0_BTOIF_POSITION                          0x1
#define _I3C1ERRIR0_BTOIF_SIZE                              0x1
#define _I3C1ERRIR0_BTOIF_LENGTH                            0x1
#define _I3C1ERRIR0_BTOIF_MASK                              0x2
#define _I3C1ERRIR0_BUSEIF_POSN                             0x2
#define _I3C1ERRIR0_BUSEIF_POSITION                         0x2
#define _I3C1ERRIR0_BUSEIF_SIZE                             0x1
#define _I3C1ERRIR0_BUSEIF_LENGTH                           0x1
#define _I3C1ERRIR0_BUSEIF_MASK                             0x4
#define _I3C1ERRIR0_IBIEIF_POSN                             0x3
#define _I3C1ERRIR0_IBIEIF_POSITION                         0x3
#define _I3C1ERRIR0_IBIEIF_SIZE                             0x1
#define _I3C1ERRIR0_IBIEIF_LENGTH                           0x1
#define _I3C1ERRIR0_IBIEIF_MASK                             0x8
#define _I3C1ERRIR0_HJEIF_POSN                              0x4
#define _I3C1ERRIR0_HJEIF_POSITION                          0x4
#define _I3C1ERRIR0_HJEIF_SIZE                              0x1
#define _I3C1ERRIR0_HJEIF_LENGTH                            0x1
#define _I3C1ERRIR0_HJEIF_MASK                              0x10
#define _I3C1ERRIR0_RXOIF_POSN                              0x5
#define _I3C1ERRIR0_RXOIF_POSITION                          0x5
#define _I3C1ERRIR0_RXOIF_SIZE                              0x1
#define _I3C1ERRIR0_RXOIF_LENGTH                            0x1
#define _I3C1ERRIR0_RXOIF_MASK                              0x20
#define _I3C1ERRIR0_TXUIF_POSN                              0x6
#define _I3C1ERRIR0_TXUIF_POSITION                          0x6
#define _I3C1ERRIR0_TXUIF_SIZE                              0x1
#define _I3C1ERRIR0_TXUIF_LENGTH                            0x1
#define _I3C1ERRIR0_TXUIF_MASK                              0x40
#define _I3C1ERRIR0_I2CNACKIF_POSN                          0x7
#define _I3C1ERRIR0_I2CNACKIF_POSITION                      0x7
#define _I3C1ERRIR0_I2CNACKIF_SIZE                          0x1
#define _I3C1ERRIR0_I2CNACKIF_LENGTH                        0x1
#define _I3C1ERRIR0_I2CNACKIF_MASK                          0x80

// Register: I3C1ERRIR1
#define I3C1ERRIR1 I3C1ERRIR1
extern volatile unsigned char           I3C1ERRIR1          __at(0x08D);
#ifndef _LIB_BUILD
asm("I3C1ERRIR1 equ 08Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXREIF                 :1;
        unsigned TXWEIF                 :1;
        unsigned MWLOEIF                :1;
        unsigned ABEIF                  :1;
    };
} I3C1ERRIR1bits_t;
extern volatile I3C1ERRIR1bits_t I3C1ERRIR1bits __at(0x08D);
// bitfield macros
#define _I3C1ERRIR1_RXREIF_POSN                             0x0
#define _I3C1ERRIR1_RXREIF_POSITION                         0x0
#define _I3C1ERRIR1_RXREIF_SIZE                             0x1
#define _I3C1ERRIR1_RXREIF_LENGTH                           0x1
#define _I3C1ERRIR1_RXREIF_MASK                             0x1
#define _I3C1ERRIR1_TXWEIF_POSN                             0x1
#define _I3C1ERRIR1_TXWEIF_POSITION                         0x1
#define _I3C1ERRIR1_TXWEIF_SIZE                             0x1
#define _I3C1ERRIR1_TXWEIF_LENGTH                           0x1
#define _I3C1ERRIR1_TXWEIF_MASK                             0x2
#define _I3C1ERRIR1_MWLOEIF_POSN                            0x2
#define _I3C1ERRIR1_MWLOEIF_POSITION                        0x2
#define _I3C1ERRIR1_MWLOEIF_SIZE                            0x1
#define _I3C1ERRIR1_MWLOEIF_LENGTH                          0x1
#define _I3C1ERRIR1_MWLOEIF_MASK                            0x4
#define _I3C1ERRIR1_ABEIF_POSN                              0x3
#define _I3C1ERRIR1_ABEIF_POSITION                          0x3
#define _I3C1ERRIR1_ABEIF_SIZE                              0x1
#define _I3C1ERRIR1_ABEIF_LENGTH                            0x1
#define _I3C1ERRIR1_ABEIF_MASK                              0x8

// Register: I3C1PIE0
#define I3C1PIE0 I3C1PIE0
extern volatile unsigned char           I3C1PIE0            __at(0x08E);
#ifndef _LIB_BUILD
asm("I3C1PIE0 equ 08Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCCCIE                 :1;
        unsigned BTFIE                  :1;
        unsigned DADRIE                 :1;
        unsigned SADRIE                 :1;
        unsigned I2CACKIE               :1;
        unsigned RSCIE                  :1;
        unsigned PCIE                   :1;
        unsigned SCIE                   :1;
    };
} I3C1PIE0bits_t;
extern volatile I3C1PIE0bits_t I3C1PIE0bits __at(0x08E);
// bitfield macros
#define _I3C1PIE0_SCCCIE_POSN                               0x0
#define _I3C1PIE0_SCCCIE_POSITION                           0x0
#define _I3C1PIE0_SCCCIE_SIZE                               0x1
#define _I3C1PIE0_SCCCIE_LENGTH                             0x1
#define _I3C1PIE0_SCCCIE_MASK                               0x1
#define _I3C1PIE0_BTFIE_POSN                                0x1
#define _I3C1PIE0_BTFIE_POSITION                            0x1
#define _I3C1PIE0_BTFIE_SIZE                                0x1
#define _I3C1PIE0_BTFIE_LENGTH                              0x1
#define _I3C1PIE0_BTFIE_MASK                                0x2
#define _I3C1PIE0_DADRIE_POSN                               0x2
#define _I3C1PIE0_DADRIE_POSITION                           0x2
#define _I3C1PIE0_DADRIE_SIZE                               0x1
#define _I3C1PIE0_DADRIE_LENGTH                             0x1
#define _I3C1PIE0_DADRIE_MASK                               0x4
#define _I3C1PIE0_SADRIE_POSN                               0x3
#define _I3C1PIE0_SADRIE_POSITION                           0x3
#define _I3C1PIE0_SADRIE_SIZE                               0x1
#define _I3C1PIE0_SADRIE_LENGTH                             0x1
#define _I3C1PIE0_SADRIE_MASK                               0x8
#define _I3C1PIE0_I2CACKIE_POSN                             0x4
#define _I3C1PIE0_I2CACKIE_POSITION                         0x4
#define _I3C1PIE0_I2CACKIE_SIZE                             0x1
#define _I3C1PIE0_I2CACKIE_LENGTH                           0x1
#define _I3C1PIE0_I2CACKIE_MASK                             0x10
#define _I3C1PIE0_RSCIE_POSN                                0x5
#define _I3C1PIE0_RSCIE_POSITION                            0x5
#define _I3C1PIE0_RSCIE_SIZE                                0x1
#define _I3C1PIE0_RSCIE_LENGTH                              0x1
#define _I3C1PIE0_RSCIE_MASK                                0x20
#define _I3C1PIE0_PCIE_POSN                                 0x6
#define _I3C1PIE0_PCIE_POSITION                             0x6
#define _I3C1PIE0_PCIE_SIZE                                 0x1
#define _I3C1PIE0_PCIE_LENGTH                               0x1
#define _I3C1PIE0_PCIE_MASK                                 0x40
#define _I3C1PIE0_SCIE_POSN                                 0x7
#define _I3C1PIE0_SCIE_POSITION                             0x7
#define _I3C1PIE0_SCIE_SIZE                                 0x1
#define _I3C1PIE0_SCIE_LENGTH                               0x1
#define _I3C1PIE0_SCIE_MASK                                 0x80

// Register: I3C1PIE1
#define I3C1PIE1 I3C1PIE1
extern volatile unsigned char           I3C1PIE1            __at(0x08F);
#ifndef _LIB_BUILD
asm("I3C1PIE1 equ 08Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned IBIDONEIE              :1;
        unsigned DACHIE                 :1;
        unsigned TCOMPIE                :1;
    };
} I3C1PIE1bits_t;
extern volatile I3C1PIE1bits_t I3C1PIE1bits __at(0x08F);
// bitfield macros
#define _I3C1PIE1_IBIDONEIE_POSN                            0x5
#define _I3C1PIE1_IBIDONEIE_POSITION                        0x5
#define _I3C1PIE1_IBIDONEIE_SIZE                            0x1
#define _I3C1PIE1_IBIDONEIE_LENGTH                          0x1
#define _I3C1PIE1_IBIDONEIE_MASK                            0x20
#define _I3C1PIE1_DACHIE_POSN                               0x6
#define _I3C1PIE1_DACHIE_POSITION                           0x6
#define _I3C1PIE1_DACHIE_SIZE                               0x1
#define _I3C1PIE1_DACHIE_LENGTH                             0x1
#define _I3C1PIE1_DACHIE_MASK                               0x40
#define _I3C1PIE1_TCOMPIE_POSN                              0x7
#define _I3C1PIE1_TCOMPIE_POSITION                          0x7
#define _I3C1PIE1_TCOMPIE_SIZE                              0x1
#define _I3C1PIE1_TCOMPIE_LENGTH                            0x1
#define _I3C1PIE1_TCOMPIE_MASK                              0x80

// Register: I3C1ERRIE0
#define I3C1ERRIE0 I3C1ERRIE0
extern volatile unsigned char           I3C1ERRIE0          __at(0x090);
#ifndef _LIB_BUILD
asm("I3C1ERRIE0 equ 090h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned UCCCIE                 :1;
        unsigned BTOIE                  :1;
        unsigned BUSEIE                 :1;
        unsigned IBIEIE                 :1;
        unsigned HJEIE                  :1;
        unsigned RXOIE                  :1;
        unsigned TXUIE                  :1;
        unsigned I2CNACKIE              :1;
    };
} I3C1ERRIE0bits_t;
extern volatile I3C1ERRIE0bits_t I3C1ERRIE0bits __at(0x090);
// bitfield macros
#define _I3C1ERRIE0_UCCCIE_POSN                             0x0
#define _I3C1ERRIE0_UCCCIE_POSITION                         0x0
#define _I3C1ERRIE0_UCCCIE_SIZE                             0x1
#define _I3C1ERRIE0_UCCCIE_LENGTH                           0x1
#define _I3C1ERRIE0_UCCCIE_MASK                             0x1
#define _I3C1ERRIE0_BTOIE_POSN                              0x1
#define _I3C1ERRIE0_BTOIE_POSITION                          0x1
#define _I3C1ERRIE0_BTOIE_SIZE                              0x1
#define _I3C1ERRIE0_BTOIE_LENGTH                            0x1
#define _I3C1ERRIE0_BTOIE_MASK                              0x2
#define _I3C1ERRIE0_BUSEIE_POSN                             0x2
#define _I3C1ERRIE0_BUSEIE_POSITION                         0x2
#define _I3C1ERRIE0_BUSEIE_SIZE                             0x1
#define _I3C1ERRIE0_BUSEIE_LENGTH                           0x1
#define _I3C1ERRIE0_BUSEIE_MASK                             0x4
#define _I3C1ERRIE0_IBIEIE_POSN                             0x3
#define _I3C1ERRIE0_IBIEIE_POSITION                         0x3
#define _I3C1ERRIE0_IBIEIE_SIZE                             0x1
#define _I3C1ERRIE0_IBIEIE_LENGTH                           0x1
#define _I3C1ERRIE0_IBIEIE_MASK                             0x8
#define _I3C1ERRIE0_HJEIE_POSN                              0x4
#define _I3C1ERRIE0_HJEIE_POSITION                          0x4
#define _I3C1ERRIE0_HJEIE_SIZE                              0x1
#define _I3C1ERRIE0_HJEIE_LENGTH                            0x1
#define _I3C1ERRIE0_HJEIE_MASK                              0x10
#define _I3C1ERRIE0_RXOIE_POSN                              0x5
#define _I3C1ERRIE0_RXOIE_POSITION                          0x5
#define _I3C1ERRIE0_RXOIE_SIZE                              0x1
#define _I3C1ERRIE0_RXOIE_LENGTH                            0x1
#define _I3C1ERRIE0_RXOIE_MASK                              0x20
#define _I3C1ERRIE0_TXUIE_POSN                              0x6
#define _I3C1ERRIE0_TXUIE_POSITION                          0x6
#define _I3C1ERRIE0_TXUIE_SIZE                              0x1
#define _I3C1ERRIE0_TXUIE_LENGTH                            0x1
#define _I3C1ERRIE0_TXUIE_MASK                              0x40
#define _I3C1ERRIE0_I2CNACKIE_POSN                          0x7
#define _I3C1ERRIE0_I2CNACKIE_POSITION                      0x7
#define _I3C1ERRIE0_I2CNACKIE_SIZE                          0x1
#define _I3C1ERRIE0_I2CNACKIE_LENGTH                        0x1
#define _I3C1ERRIE0_I2CNACKIE_MASK                          0x80

// Register: I3C1ERRIE1
#define I3C1ERRIE1 I3C1ERRIE1
extern volatile unsigned char           I3C1ERRIE1          __at(0x091);
#ifndef _LIB_BUILD
asm("I3C1ERRIE1 equ 091h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXREIE                 :1;
        unsigned TXWEIE                 :1;
        unsigned MWLOEIE                :1;
        unsigned ABEIE                  :1;
    };
} I3C1ERRIE1bits_t;
extern volatile I3C1ERRIE1bits_t I3C1ERRIE1bits __at(0x091);
// bitfield macros
#define _I3C1ERRIE1_RXREIE_POSN                             0x0
#define _I3C1ERRIE1_RXREIE_POSITION                         0x0
#define _I3C1ERRIE1_RXREIE_SIZE                             0x1
#define _I3C1ERRIE1_RXREIE_LENGTH                           0x1
#define _I3C1ERRIE1_RXREIE_MASK                             0x1
#define _I3C1ERRIE1_TXWEIE_POSN                             0x1
#define _I3C1ERRIE1_TXWEIE_POSITION                         0x1
#define _I3C1ERRIE1_TXWEIE_SIZE                             0x1
#define _I3C1ERRIE1_TXWEIE_LENGTH                           0x1
#define _I3C1ERRIE1_TXWEIE_MASK                             0x2
#define _I3C1ERRIE1_MWLOEIE_POSN                            0x2
#define _I3C1ERRIE1_MWLOEIE_POSITION                        0x2
#define _I3C1ERRIE1_MWLOEIE_SIZE                            0x1
#define _I3C1ERRIE1_MWLOEIE_LENGTH                          0x1
#define _I3C1ERRIE1_MWLOEIE_MASK                            0x4
#define _I3C1ERRIE1_ABEIE_POSN                              0x3
#define _I3C1ERRIE1_ABEIE_POSITION                          0x3
#define _I3C1ERRIE1_ABEIE_SIZE                              0x1
#define _I3C1ERRIE1_ABEIE_LENGTH                            0x1
#define _I3C1ERRIE1_ABEIE_MASK                              0x8

// Register: I3C1BIDL
#define I3C1BIDL I3C1BIDL
extern volatile unsigned short          I3C1BIDL            __at(0x092);
#ifndef _LIB_BUILD
asm("I3C1BIDL equ 092h");
#endif

// Register: I3C1BIDLL
#define I3C1BIDLL I3C1BIDLL
extern volatile unsigned char           I3C1BIDLL           __at(0x092);
#ifndef _LIB_BUILD
asm("I3C1BIDLL equ 092h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BIDLL                  :8;
    };
} I3C1BIDLLbits_t;
extern volatile I3C1BIDLLbits_t I3C1BIDLLbits __at(0x092);
// bitfield macros
#define _I3C1BIDLL_BIDLL_POSN                               0x0
#define _I3C1BIDLL_BIDLL_POSITION                           0x0
#define _I3C1BIDLL_BIDLL_SIZE                               0x8
#define _I3C1BIDLL_BIDLL_LENGTH                             0x8
#define _I3C1BIDLL_BIDLL_MASK                               0xFF

// Register: I3C1BIDLH
#define I3C1BIDLH I3C1BIDLH
extern volatile unsigned char           I3C1BIDLH           __at(0x093);
#ifndef _LIB_BUILD
asm("I3C1BIDLH equ 093h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BIDLH                  :8;
    };
} I3C1BIDLHbits_t;
extern volatile I3C1BIDLHbits_t I3C1BIDLHbits __at(0x093);
// bitfield macros
#define _I3C1BIDLH_BIDLH_POSN                               0x0
#define _I3C1BIDLH_BIDLH_POSITION                           0x0
#define _I3C1BIDLH_BIDLH_SIZE                               0x8
#define _I3C1BIDLH_BIDLH_LENGTH                             0x8
#define _I3C1BIDLH_BIDLH_MASK                               0xFF

// Register: I3C1BAVL
#define I3C1BAVL I3C1BAVL
extern volatile unsigned char           I3C1BAVL            __at(0x094);
#ifndef _LIB_BUILD
asm("I3C1BAVL equ 094h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BAVL                   :8;
    };
} I3C1BAVLbits_t;
extern volatile I3C1BAVLbits_t I3C1BAVLbits __at(0x094);
// bitfield macros
#define _I3C1BAVL_BAVL_POSN                                 0x0
#define _I3C1BAVL_BAVL_POSITION                             0x0
#define _I3C1BAVL_BAVL_SIZE                                 0x8
#define _I3C1BAVL_BAVL_LENGTH                               0x8
#define _I3C1BAVL_BAVL_MASK                                 0xFF

// Register: I3C1BTO
#define I3C1BTO I3C1BTO
extern volatile unsigned short          I3C1BTO             __at(0x095);
#ifndef _LIB_BUILD
asm("I3C1BTO equ 095h");
#endif

// Register: I3C1BTOL
#define I3C1BTOL I3C1BTOL
extern volatile unsigned char           I3C1BTOL            __at(0x095);
#ifndef _LIB_BUILD
asm("I3C1BTOL equ 095h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BTOL                   :8;
    };
} I3C1BTOLbits_t;
extern volatile I3C1BTOLbits_t I3C1BTOLbits __at(0x095);
// bitfield macros
#define _I3C1BTOL_BTOL_POSN                                 0x0
#define _I3C1BTOL_BTOL_POSITION                             0x0
#define _I3C1BTOL_BTOL_SIZE                                 0x8
#define _I3C1BTOL_BTOL_LENGTH                               0x8
#define _I3C1BTOL_BTOL_MASK                                 0xFF

// Register: I3C1BTOH
#define I3C1BTOH I3C1BTOH
extern volatile unsigned char           I3C1BTOH            __at(0x096);
#ifndef _LIB_BUILD
asm("I3C1BTOH equ 096h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BTOH                   :8;
    };
} I3C1BTOHbits_t;
extern volatile I3C1BTOHbits_t I3C1BTOHbits __at(0x096);
// bitfield macros
#define _I3C1BTOH_BTOH_POSN                                 0x0
#define _I3C1BTOH_BTOH_POSITION                             0x0
#define _I3C1BTOH_BTOH_SIZE                                 0x8
#define _I3C1BTOH_BTOH_LENGTH                               0x8
#define _I3C1BTOH_BTOH_MASK                                 0xFF

// Register: I3C1IBIMDB
#define I3C1IBIMDB I3C1IBIMDB
extern volatile unsigned char           I3C1IBIMDB          __at(0x097);
#ifndef _LIB_BUILD
asm("I3C1IBIMDB equ 097h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IBIMDB                 :8;
    };
    struct {
        unsigned IBIMDB_4_0             :5;
        unsigned IBIMDB_7_5             :3;
    };
} I3C1IBIMDBbits_t;
extern volatile I3C1IBIMDBbits_t I3C1IBIMDBbits __at(0x097);
// bitfield macros
#define _I3C1IBIMDB_IBIMDB_POSN                             0x0
#define _I3C1IBIMDB_IBIMDB_POSITION                         0x0
#define _I3C1IBIMDB_IBIMDB_SIZE                             0x8
#define _I3C1IBIMDB_IBIMDB_LENGTH                           0x8
#define _I3C1IBIMDB_IBIMDB_MASK                             0xFF
#define _I3C1IBIMDB_IBIMDB_4_0_POSN                         0x0
#define _I3C1IBIMDB_IBIMDB_4_0_POSITION                     0x0
#define _I3C1IBIMDB_IBIMDB_4_0_SIZE                         0x5
#define _I3C1IBIMDB_IBIMDB_4_0_LENGTH                       0x5
#define _I3C1IBIMDB_IBIMDB_4_0_MASK                         0x1F
#define _I3C1IBIMDB_IBIMDB_7_5_POSN                         0x5
#define _I3C1IBIMDB_IBIMDB_7_5_POSITION                     0x5
#define _I3C1IBIMDB_IBIMDB_7_5_SIZE                         0x3
#define _I3C1IBIMDB_IBIMDB_7_5_LENGTH                       0x3
#define _I3C1IBIMDB_IBIMDB_7_5_MASK                         0xE0

// Register: I3C1RETRY
#define I3C1RETRY I3C1RETRY
extern volatile unsigned char           I3C1RETRY           __at(0x098);
#ifndef _LIB_BUILD
asm("I3C1RETRY equ 098h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RETRY                  :8;
    };
} I3C1RETRYbits_t;
extern volatile I3C1RETRYbits_t I3C1RETRYbits __at(0x098);
// bitfield macros
#define _I3C1RETRY_RETRY_POSN                               0x0
#define _I3C1RETRY_RETRY_POSITION                           0x0
#define _I3C1RETRY_RETRY_SIZE                               0x8
#define _I3C1RETRY_RETRY_LENGTH                             0x8
#define _I3C1RETRY_RETRY_MASK                               0xFF

// Register: I3C1FEAT
#define I3C1FEAT I3C1FEAT
extern volatile unsigned char           I3C1FEAT            __at(0x099);
#ifndef _LIB_BUILD
asm("I3C1FEAT equ 099h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned HJCAP                  :1;
        unsigned HDRCAP                 :1;
    };
} I3C1FEATbits_t;
extern volatile I3C1FEATbits_t I3C1FEATbits __at(0x099);
// bitfield macros
#define _I3C1FEAT_HJCAP_POSN                                0x0
#define _I3C1FEAT_HJCAP_POSITION                            0x0
#define _I3C1FEAT_HJCAP_SIZE                                0x1
#define _I3C1FEAT_HJCAP_LENGTH                              0x1
#define _I3C1FEAT_HJCAP_MASK                                0x1
#define _I3C1FEAT_HDRCAP_POSN                               0x1
#define _I3C1FEAT_HDRCAP_POSITION                           0x1
#define _I3C1FEAT_HDRCAP_SIZE                               0x1
#define _I3C1FEAT_HDRCAP_LENGTH                             0x1
#define _I3C1FEAT_HDRCAP_MASK                               0x2

// Register: I3C1SADR
#define I3C1SADR I3C1SADR
extern volatile unsigned char           I3C1SADR            __at(0x09A);
#ifndef _LIB_BUILD
asm("I3C1SADR equ 09Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SADR                   :7;
    };
} I3C1SADRbits_t;
extern volatile I3C1SADRbits_t I3C1SADRbits __at(0x09A);
// bitfield macros
#define _I3C1SADR_SADR_POSN                                 0x0
#define _I3C1SADR_SADR_POSITION                             0x0
#define _I3C1SADR_SADR_SIZE                                 0x7
#define _I3C1SADR_SADR_LENGTH                               0x7
#define _I3C1SADR_SADR_MASK                                 0x7F

// Register: I3C1DADR
#define I3C1DADR I3C1DADR
extern volatile unsigned char           I3C1DADR            __at(0x09B);
#ifndef _LIB_BUILD
asm("I3C1DADR equ 09Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DADR                   :7;
    };
} I3C1DADRbits_t;
extern volatile I3C1DADRbits_t I3C1DADRbits __at(0x09B);
// bitfield macros
#define _I3C1DADR_DADR_POSN                                 0x0
#define _I3C1DADR_DADR_POSITION                             0x0
#define _I3C1DADR_DADR_SIZE                                 0x7
#define _I3C1DADR_DADR_LENGTH                               0x7
#define _I3C1DADR_DADR_MASK                                 0x7F

// Register: I3C1EC
#define I3C1EC I3C1EC
extern volatile unsigned char           I3C1EC              __at(0x09C);
#ifndef _LIB_BUILD
asm("I3C1EC equ 09Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IBIEN                  :1;
        unsigned CREN                   :1;
        unsigned EC2                    :1;
        unsigned HJEN                   :1;
        unsigned EC_7_4                 :4;
    };
} I3C1ECbits_t;
extern volatile I3C1ECbits_t I3C1ECbits __at(0x09C);
// bitfield macros
#define _I3C1EC_IBIEN_POSN                                  0x0
#define _I3C1EC_IBIEN_POSITION                              0x0
#define _I3C1EC_IBIEN_SIZE                                  0x1
#define _I3C1EC_IBIEN_LENGTH                                0x1
#define _I3C1EC_IBIEN_MASK                                  0x1
#define _I3C1EC_CREN_POSN                                   0x1
#define _I3C1EC_CREN_POSITION                               0x1
#define _I3C1EC_CREN_SIZE                                   0x1
#define _I3C1EC_CREN_LENGTH                                 0x1
#define _I3C1EC_CREN_MASK                                   0x2
#define _I3C1EC_EC2_POSN                                    0x2
#define _I3C1EC_EC2_POSITION                                0x2
#define _I3C1EC_EC2_SIZE                                    0x1
#define _I3C1EC_EC2_LENGTH                                  0x1
#define _I3C1EC_EC2_MASK                                    0x4
#define _I3C1EC_HJEN_POSN                                   0x3
#define _I3C1EC_HJEN_POSITION                               0x3
#define _I3C1EC_HJEN_SIZE                                   0x1
#define _I3C1EC_HJEN_LENGTH                                 0x1
#define _I3C1EC_HJEN_MASK                                   0x8
#define _I3C1EC_EC_7_4_POSN                                 0x4
#define _I3C1EC_EC_7_4_POSITION                             0x4
#define _I3C1EC_EC_7_4_SIZE                                 0x4
#define _I3C1EC_EC_7_4_LENGTH                               0x4
#define _I3C1EC_EC_7_4_MASK                                 0xF0

// Register: I3C1MWL
#define I3C1MWL I3C1MWL
extern volatile unsigned short          I3C1MWL             __at(0x09D);
#ifndef _LIB_BUILD
asm("I3C1MWL equ 09Dh");
#endif

// Register: I3C1MWLL
#define I3C1MWLL I3C1MWLL
extern volatile unsigned char           I3C1MWLL            __at(0x09D);
#ifndef _LIB_BUILD
asm("I3C1MWLL equ 09Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MWLL                   :8;
    };
} I3C1MWLLbits_t;
extern volatile I3C1MWLLbits_t I3C1MWLLbits __at(0x09D);
// bitfield macros
#define _I3C1MWLL_MWLL_POSN                                 0x0
#define _I3C1MWLL_MWLL_POSITION                             0x0
#define _I3C1MWLL_MWLL_SIZE                                 0x8
#define _I3C1MWLL_MWLL_LENGTH                               0x8
#define _I3C1MWLL_MWLL_MASK                                 0xFF

// Register: I3C1MWLH
#define I3C1MWLH I3C1MWLH
extern volatile unsigned char           I3C1MWLH            __at(0x09E);
#ifndef _LIB_BUILD
asm("I3C1MWLH equ 09Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MWLH                   :8;
    };
} I3C1MWLHbits_t;
extern volatile I3C1MWLHbits_t I3C1MWLHbits __at(0x09E);
// bitfield macros
#define _I3C1MWLH_MWLH_POSN                                 0x0
#define _I3C1MWLH_MWLH_POSITION                             0x0
#define _I3C1MWLH_MWLH_SIZE                                 0x8
#define _I3C1MWLH_MWLH_LENGTH                               0x8
#define _I3C1MWLH_MWLH_MASK                                 0xFF

// Register: I3C1MRL
#define I3C1MRL I3C1MRL
extern volatile unsigned short          I3C1MRL             __at(0x09F);
#ifndef _LIB_BUILD
asm("I3C1MRL equ 09Fh");
#endif

// Register: I3C1MRLL
#define I3C1MRLL I3C1MRLL
extern volatile unsigned char           I3C1MRLL            __at(0x09F);
#ifndef _LIB_BUILD
asm("I3C1MRLL equ 09Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MRLL                   :8;
    };
} I3C1MRLLbits_t;
extern volatile I3C1MRLLbits_t I3C1MRLLbits __at(0x09F);
// bitfield macros
#define _I3C1MRLL_MRLL_POSN                                 0x0
#define _I3C1MRLL_MRLL_POSITION                             0x0
#define _I3C1MRLL_MRLL_SIZE                                 0x8
#define _I3C1MRLL_MRLL_LENGTH                               0x8
#define _I3C1MRLL_MRLL_MASK                                 0xFF

// Register: I3C1MRLH
#define I3C1MRLH I3C1MRLH
extern volatile unsigned char           I3C1MRLH            __at(0x0A0);
#ifndef _LIB_BUILD
asm("I3C1MRLH equ 0A0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MRLH                   :8;
    };
} I3C1MRLHbits_t;
extern volatile I3C1MRLHbits_t I3C1MRLHbits __at(0x0A0);
// bitfield macros
#define _I3C1MRLH_MRLH_POSN                                 0x0
#define _I3C1MRLH_MRLH_POSITION                             0x0
#define _I3C1MRLH_MRLH_SIZE                                 0x8
#define _I3C1MRLH_MRLH_LENGTH                               0x8
#define _I3C1MRLH_MRLH_MASK                                 0xFF

// Register: I3C1IBIPSZ
#define I3C1IBIPSZ I3C1IBIPSZ
extern volatile unsigned char           I3C1IBIPSZ          __at(0x0A1);
#ifndef _LIB_BUILD
asm("I3C1IBIPSZ equ 0A1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IBIPSZ                 :8;
    };
} I3C1IBIPSZbits_t;
extern volatile I3C1IBIPSZbits_t I3C1IBIPSZbits __at(0x0A1);
// bitfield macros
#define _I3C1IBIPSZ_IBIPSZ_POSN                             0x0
#define _I3C1IBIPSZ_IBIPSZ_POSITION                         0x0
#define _I3C1IBIPSZ_IBIPSZ_SIZE                             0x8
#define _I3C1IBIPSZ_IBIPSZ_LENGTH                           0x8
#define _I3C1IBIPSZ_IBIPSZ_MASK                             0xFF

// Register: I3C1PID0
#define I3C1PID0 I3C1PID0
extern volatile unsigned char           I3C1PID0            __at(0x0A2);
#ifndef _LIB_BUILD
asm("I3C1PID0 equ 0A2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID0                   :1;
        unsigned PID1                   :1;
        unsigned PID2                   :1;
        unsigned PID3                   :1;
        unsigned PID4                   :1;
        unsigned PID5                   :1;
        unsigned PID6                   :1;
        unsigned PID7                   :1;
    };
    struct {
        unsigned PID_7_0                :8;
    };
} I3C1PID0bits_t;
extern volatile I3C1PID0bits_t I3C1PID0bits __at(0x0A2);
// bitfield macros
#define _I3C1PID0_PID0_POSN                                 0x0
#define _I3C1PID0_PID0_POSITION                             0x0
#define _I3C1PID0_PID0_SIZE                                 0x1
#define _I3C1PID0_PID0_LENGTH                               0x1
#define _I3C1PID0_PID0_MASK                                 0x1
#define _I3C1PID0_PID1_POSN                                 0x1
#define _I3C1PID0_PID1_POSITION                             0x1
#define _I3C1PID0_PID1_SIZE                                 0x1
#define _I3C1PID0_PID1_LENGTH                               0x1
#define _I3C1PID0_PID1_MASK                                 0x2
#define _I3C1PID0_PID2_POSN                                 0x2
#define _I3C1PID0_PID2_POSITION                             0x2
#define _I3C1PID0_PID2_SIZE                                 0x1
#define _I3C1PID0_PID2_LENGTH                               0x1
#define _I3C1PID0_PID2_MASK                                 0x4
#define _I3C1PID0_PID3_POSN                                 0x3
#define _I3C1PID0_PID3_POSITION                             0x3
#define _I3C1PID0_PID3_SIZE                                 0x1
#define _I3C1PID0_PID3_LENGTH                               0x1
#define _I3C1PID0_PID3_MASK                                 0x8
#define _I3C1PID0_PID4_POSN                                 0x4
#define _I3C1PID0_PID4_POSITION                             0x4
#define _I3C1PID0_PID4_SIZE                                 0x1
#define _I3C1PID0_PID4_LENGTH                               0x1
#define _I3C1PID0_PID4_MASK                                 0x10
#define _I3C1PID0_PID5_POSN                                 0x5
#define _I3C1PID0_PID5_POSITION                             0x5
#define _I3C1PID0_PID5_SIZE                                 0x1
#define _I3C1PID0_PID5_LENGTH                               0x1
#define _I3C1PID0_PID5_MASK                                 0x20
#define _I3C1PID0_PID6_POSN                                 0x6
#define _I3C1PID0_PID6_POSITION                             0x6
#define _I3C1PID0_PID6_SIZE                                 0x1
#define _I3C1PID0_PID6_LENGTH                               0x1
#define _I3C1PID0_PID6_MASK                                 0x40
#define _I3C1PID0_PID7_POSN                                 0x7
#define _I3C1PID0_PID7_POSITION                             0x7
#define _I3C1PID0_PID7_SIZE                                 0x1
#define _I3C1PID0_PID7_LENGTH                               0x1
#define _I3C1PID0_PID7_MASK                                 0x80
#define _I3C1PID0_PID_7_0_POSN                              0x0
#define _I3C1PID0_PID_7_0_POSITION                          0x0
#define _I3C1PID0_PID_7_0_SIZE                              0x8
#define _I3C1PID0_PID_7_0_LENGTH                            0x8
#define _I3C1PID0_PID_7_0_MASK                              0xFF

// Register: I3C1PID1
#define I3C1PID1 I3C1PID1
extern volatile unsigned char           I3C1PID1            __at(0x0A3);
#ifndef _LIB_BUILD
asm("I3C1PID1 equ 0A3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID8                   :1;
        unsigned PID9                   :1;
        unsigned PID10                  :1;
        unsigned PID11                  :1;
        unsigned PID12                  :1;
        unsigned PID13                  :1;
        unsigned PID14                  :1;
        unsigned PID15                  :1;
    };
    struct {
        unsigned PID_11_8               :4;
        unsigned PID_15_12              :4;
    };
} I3C1PID1bits_t;
extern volatile I3C1PID1bits_t I3C1PID1bits __at(0x0A3);
// bitfield macros
#define _I3C1PID1_PID8_POSN                                 0x0
#define _I3C1PID1_PID8_POSITION                             0x0
#define _I3C1PID1_PID8_SIZE                                 0x1
#define _I3C1PID1_PID8_LENGTH                               0x1
#define _I3C1PID1_PID8_MASK                                 0x1
#define _I3C1PID1_PID9_POSN                                 0x1
#define _I3C1PID1_PID9_POSITION                             0x1
#define _I3C1PID1_PID9_SIZE                                 0x1
#define _I3C1PID1_PID9_LENGTH                               0x1
#define _I3C1PID1_PID9_MASK                                 0x2
#define _I3C1PID1_PID10_POSN                                0x2
#define _I3C1PID1_PID10_POSITION                            0x2
#define _I3C1PID1_PID10_SIZE                                0x1
#define _I3C1PID1_PID10_LENGTH                              0x1
#define _I3C1PID1_PID10_MASK                                0x4
#define _I3C1PID1_PID11_POSN                                0x3
#define _I3C1PID1_PID11_POSITION                            0x3
#define _I3C1PID1_PID11_SIZE                                0x1
#define _I3C1PID1_PID11_LENGTH                              0x1
#define _I3C1PID1_PID11_MASK                                0x8
#define _I3C1PID1_PID12_POSN                                0x4
#define _I3C1PID1_PID12_POSITION                            0x4
#define _I3C1PID1_PID12_SIZE                                0x1
#define _I3C1PID1_PID12_LENGTH                              0x1
#define _I3C1PID1_PID12_MASK                                0x10
#define _I3C1PID1_PID13_POSN                                0x5
#define _I3C1PID1_PID13_POSITION                            0x5
#define _I3C1PID1_PID13_SIZE                                0x1
#define _I3C1PID1_PID13_LENGTH                              0x1
#define _I3C1PID1_PID13_MASK                                0x20
#define _I3C1PID1_PID14_POSN                                0x6
#define _I3C1PID1_PID14_POSITION                            0x6
#define _I3C1PID1_PID14_SIZE                                0x1
#define _I3C1PID1_PID14_LENGTH                              0x1
#define _I3C1PID1_PID14_MASK                                0x40
#define _I3C1PID1_PID15_POSN                                0x7
#define _I3C1PID1_PID15_POSITION                            0x7
#define _I3C1PID1_PID15_SIZE                                0x1
#define _I3C1PID1_PID15_LENGTH                              0x1
#define _I3C1PID1_PID15_MASK                                0x80
#define _I3C1PID1_PID_11_8_POSN                             0x0
#define _I3C1PID1_PID_11_8_POSITION                         0x0
#define _I3C1PID1_PID_11_8_SIZE                             0x4
#define _I3C1PID1_PID_11_8_LENGTH                           0x4
#define _I3C1PID1_PID_11_8_MASK                             0xF
#define _I3C1PID1_PID_15_12_POSN                            0x4
#define _I3C1PID1_PID_15_12_POSITION                        0x4
#define _I3C1PID1_PID_15_12_SIZE                            0x4
#define _I3C1PID1_PID_15_12_LENGTH                          0x4
#define _I3C1PID1_PID_15_12_MASK                            0xF0

// Register: I3C1PID2
#define I3C1PID2 I3C1PID2
extern volatile unsigned char           I3C1PID2            __at(0x0A4);
#ifndef _LIB_BUILD
asm("I3C1PID2 equ 0A4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID16                  :1;
        unsigned PID17                  :1;
        unsigned PID18                  :1;
        unsigned PID19                  :1;
        unsigned PID20                  :1;
        unsigned PID21                  :1;
        unsigned PID22                  :1;
        unsigned PID23                  :1;
    };
    struct {
        unsigned PID_23_16              :8;
    };
} I3C1PID2bits_t;
extern volatile I3C1PID2bits_t I3C1PID2bits __at(0x0A4);
// bitfield macros
#define _I3C1PID2_PID16_POSN                                0x0
#define _I3C1PID2_PID16_POSITION                            0x0
#define _I3C1PID2_PID16_SIZE                                0x1
#define _I3C1PID2_PID16_LENGTH                              0x1
#define _I3C1PID2_PID16_MASK                                0x1
#define _I3C1PID2_PID17_POSN                                0x1
#define _I3C1PID2_PID17_POSITION                            0x1
#define _I3C1PID2_PID17_SIZE                                0x1
#define _I3C1PID2_PID17_LENGTH                              0x1
#define _I3C1PID2_PID17_MASK                                0x2
#define _I3C1PID2_PID18_POSN                                0x2
#define _I3C1PID2_PID18_POSITION                            0x2
#define _I3C1PID2_PID18_SIZE                                0x1
#define _I3C1PID2_PID18_LENGTH                              0x1
#define _I3C1PID2_PID18_MASK                                0x4
#define _I3C1PID2_PID19_POSN                                0x3
#define _I3C1PID2_PID19_POSITION                            0x3
#define _I3C1PID2_PID19_SIZE                                0x1
#define _I3C1PID2_PID19_LENGTH                              0x1
#define _I3C1PID2_PID19_MASK                                0x8
#define _I3C1PID2_PID20_POSN                                0x4
#define _I3C1PID2_PID20_POSITION                            0x4
#define _I3C1PID2_PID20_SIZE                                0x1
#define _I3C1PID2_PID20_LENGTH                              0x1
#define _I3C1PID2_PID20_MASK                                0x10
#define _I3C1PID2_PID21_POSN                                0x5
#define _I3C1PID2_PID21_POSITION                            0x5
#define _I3C1PID2_PID21_SIZE                                0x1
#define _I3C1PID2_PID21_LENGTH                              0x1
#define _I3C1PID2_PID21_MASK                                0x20
#define _I3C1PID2_PID22_POSN                                0x6
#define _I3C1PID2_PID22_POSITION                            0x6
#define _I3C1PID2_PID22_SIZE                                0x1
#define _I3C1PID2_PID22_LENGTH                              0x1
#define _I3C1PID2_PID22_MASK                                0x40
#define _I3C1PID2_PID23_POSN                                0x7
#define _I3C1PID2_PID23_POSITION                            0x7
#define _I3C1PID2_PID23_SIZE                                0x1
#define _I3C1PID2_PID23_LENGTH                              0x1
#define _I3C1PID2_PID23_MASK                                0x80
#define _I3C1PID2_PID_23_16_POSN                            0x0
#define _I3C1PID2_PID_23_16_POSITION                        0x0
#define _I3C1PID2_PID_23_16_SIZE                            0x8
#define _I3C1PID2_PID_23_16_LENGTH                          0x8
#define _I3C1PID2_PID_23_16_MASK                            0xFF

// Register: I3C1PID3
#define I3C1PID3 I3C1PID3
extern volatile unsigned char           I3C1PID3            __at(0x0A5);
#ifndef _LIB_BUILD
asm("I3C1PID3 equ 0A5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID24                  :1;
        unsigned PID25                  :1;
        unsigned PID26                  :1;
        unsigned PID27                  :1;
        unsigned PID28                  :1;
        unsigned PID29                  :1;
        unsigned PID30                  :1;
        unsigned PID31                  :1;
    };
    struct {
        unsigned PID_31_24              :8;
    };
} I3C1PID3bits_t;
extern volatile I3C1PID3bits_t I3C1PID3bits __at(0x0A5);
// bitfield macros
#define _I3C1PID3_PID24_POSN                                0x0
#define _I3C1PID3_PID24_POSITION                            0x0
#define _I3C1PID3_PID24_SIZE                                0x1
#define _I3C1PID3_PID24_LENGTH                              0x1
#define _I3C1PID3_PID24_MASK                                0x1
#define _I3C1PID3_PID25_POSN                                0x1
#define _I3C1PID3_PID25_POSITION                            0x1
#define _I3C1PID3_PID25_SIZE                                0x1
#define _I3C1PID3_PID25_LENGTH                              0x1
#define _I3C1PID3_PID25_MASK                                0x2
#define _I3C1PID3_PID26_POSN                                0x2
#define _I3C1PID3_PID26_POSITION                            0x2
#define _I3C1PID3_PID26_SIZE                                0x1
#define _I3C1PID3_PID26_LENGTH                              0x1
#define _I3C1PID3_PID26_MASK                                0x4
#define _I3C1PID3_PID27_POSN                                0x3
#define _I3C1PID3_PID27_POSITION                            0x3
#define _I3C1PID3_PID27_SIZE                                0x1
#define _I3C1PID3_PID27_LENGTH                              0x1
#define _I3C1PID3_PID27_MASK                                0x8
#define _I3C1PID3_PID28_POSN                                0x4
#define _I3C1PID3_PID28_POSITION                            0x4
#define _I3C1PID3_PID28_SIZE                                0x1
#define _I3C1PID3_PID28_LENGTH                              0x1
#define _I3C1PID3_PID28_MASK                                0x10
#define _I3C1PID3_PID29_POSN                                0x5
#define _I3C1PID3_PID29_POSITION                            0x5
#define _I3C1PID3_PID29_SIZE                                0x1
#define _I3C1PID3_PID29_LENGTH                              0x1
#define _I3C1PID3_PID29_MASK                                0x20
#define _I3C1PID3_PID30_POSN                                0x6
#define _I3C1PID3_PID30_POSITION                            0x6
#define _I3C1PID3_PID30_SIZE                                0x1
#define _I3C1PID3_PID30_LENGTH                              0x1
#define _I3C1PID3_PID30_MASK                                0x40
#define _I3C1PID3_PID31_POSN                                0x7
#define _I3C1PID3_PID31_POSITION                            0x7
#define _I3C1PID3_PID31_SIZE                                0x1
#define _I3C1PID3_PID31_LENGTH                              0x1
#define _I3C1PID3_PID31_MASK                                0x80
#define _I3C1PID3_PID_31_24_POSN                            0x0
#define _I3C1PID3_PID_31_24_POSITION                        0x0
#define _I3C1PID3_PID_31_24_SIZE                            0x8
#define _I3C1PID3_PID_31_24_LENGTH                          0x8
#define _I3C1PID3_PID_31_24_MASK                            0xFF

// Register: I3C1PID4
#define I3C1PID4 I3C1PID4
extern volatile unsigned char           I3C1PID4            __at(0x0A6);
#ifndef _LIB_BUILD
asm("I3C1PID4 equ 0A6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID32                  :1;
        unsigned PID33                  :1;
        unsigned PID34                  :1;
        unsigned PID35                  :1;
        unsigned PID36                  :1;
        unsigned PID37                  :1;
        unsigned PID38                  :1;
        unsigned PID39                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned PID_39_33              :7;
    };
} I3C1PID4bits_t;
extern volatile I3C1PID4bits_t I3C1PID4bits __at(0x0A6);
// bitfield macros
#define _I3C1PID4_PID32_POSN                                0x0
#define _I3C1PID4_PID32_POSITION                            0x0
#define _I3C1PID4_PID32_SIZE                                0x1
#define _I3C1PID4_PID32_LENGTH                              0x1
#define _I3C1PID4_PID32_MASK                                0x1
#define _I3C1PID4_PID33_POSN                                0x1
#define _I3C1PID4_PID33_POSITION                            0x1
#define _I3C1PID4_PID33_SIZE                                0x1
#define _I3C1PID4_PID33_LENGTH                              0x1
#define _I3C1PID4_PID33_MASK                                0x2
#define _I3C1PID4_PID34_POSN                                0x2
#define _I3C1PID4_PID34_POSITION                            0x2
#define _I3C1PID4_PID34_SIZE                                0x1
#define _I3C1PID4_PID34_LENGTH                              0x1
#define _I3C1PID4_PID34_MASK                                0x4
#define _I3C1PID4_PID35_POSN                                0x3
#define _I3C1PID4_PID35_POSITION                            0x3
#define _I3C1PID4_PID35_SIZE                                0x1
#define _I3C1PID4_PID35_LENGTH                              0x1
#define _I3C1PID4_PID35_MASK                                0x8
#define _I3C1PID4_PID36_POSN                                0x4
#define _I3C1PID4_PID36_POSITION                            0x4
#define _I3C1PID4_PID36_SIZE                                0x1
#define _I3C1PID4_PID36_LENGTH                              0x1
#define _I3C1PID4_PID36_MASK                                0x10
#define _I3C1PID4_PID37_POSN                                0x5
#define _I3C1PID4_PID37_POSITION                            0x5
#define _I3C1PID4_PID37_SIZE                                0x1
#define _I3C1PID4_PID37_LENGTH                              0x1
#define _I3C1PID4_PID37_MASK                                0x20
#define _I3C1PID4_PID38_POSN                                0x6
#define _I3C1PID4_PID38_POSITION                            0x6
#define _I3C1PID4_PID38_SIZE                                0x1
#define _I3C1PID4_PID38_LENGTH                              0x1
#define _I3C1PID4_PID38_MASK                                0x40
#define _I3C1PID4_PID39_POSN                                0x7
#define _I3C1PID4_PID39_POSITION                            0x7
#define _I3C1PID4_PID39_SIZE                                0x1
#define _I3C1PID4_PID39_LENGTH                              0x1
#define _I3C1PID4_PID39_MASK                                0x80
#define _I3C1PID4_PID_39_33_POSN                            0x1
#define _I3C1PID4_PID_39_33_POSITION                        0x1
#define _I3C1PID4_PID_39_33_SIZE                            0x7
#define _I3C1PID4_PID_39_33_LENGTH                          0x7
#define _I3C1PID4_PID_39_33_MASK                            0xFE

// Register: I3C1PID5
#define I3C1PID5 I3C1PID5
extern volatile unsigned char           I3C1PID5            __at(0x0A7);
#ifndef _LIB_BUILD
asm("I3C1PID5 equ 0A7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PID40                  :1;
        unsigned PID41                  :1;
        unsigned PID42                  :1;
        unsigned PID43                  :1;
        unsigned PID44                  :1;
        unsigned PID45                  :1;
        unsigned PID46                  :1;
        unsigned PID47                  :1;
    };
    struct {
        unsigned PID_47_40              :8;
    };
} I3C1PID5bits_t;
extern volatile I3C1PID5bits_t I3C1PID5bits __at(0x0A7);
// bitfield macros
#define _I3C1PID5_PID40_POSN                                0x0
#define _I3C1PID5_PID40_POSITION                            0x0
#define _I3C1PID5_PID40_SIZE                                0x1
#define _I3C1PID5_PID40_LENGTH                              0x1
#define _I3C1PID5_PID40_MASK                                0x1
#define _I3C1PID5_PID41_POSN                                0x1
#define _I3C1PID5_PID41_POSITION                            0x1
#define _I3C1PID5_PID41_SIZE                                0x1
#define _I3C1PID5_PID41_LENGTH                              0x1
#define _I3C1PID5_PID41_MASK                                0x2
#define _I3C1PID5_PID42_POSN                                0x2
#define _I3C1PID5_PID42_POSITION                            0x2
#define _I3C1PID5_PID42_SIZE                                0x1
#define _I3C1PID5_PID42_LENGTH                              0x1
#define _I3C1PID5_PID42_MASK                                0x4
#define _I3C1PID5_PID43_POSN                                0x3
#define _I3C1PID5_PID43_POSITION                            0x3
#define _I3C1PID5_PID43_SIZE                                0x1
#define _I3C1PID5_PID43_LENGTH                              0x1
#define _I3C1PID5_PID43_MASK                                0x8
#define _I3C1PID5_PID44_POSN                                0x4
#define _I3C1PID5_PID44_POSITION                            0x4
#define _I3C1PID5_PID44_SIZE                                0x1
#define _I3C1PID5_PID44_LENGTH                              0x1
#define _I3C1PID5_PID44_MASK                                0x10
#define _I3C1PID5_PID45_POSN                                0x5
#define _I3C1PID5_PID45_POSITION                            0x5
#define _I3C1PID5_PID45_SIZE                                0x1
#define _I3C1PID5_PID45_LENGTH                              0x1
#define _I3C1PID5_PID45_MASK                                0x20
#define _I3C1PID5_PID46_POSN                                0x6
#define _I3C1PID5_PID46_POSITION                            0x6
#define _I3C1PID5_PID46_SIZE                                0x1
#define _I3C1PID5_PID46_LENGTH                              0x1
#define _I3C1PID5_PID46_MASK                                0x40
#define _I3C1PID5_PID47_POSN                                0x7
#define _I3C1PID5_PID47_POSITION                            0x7
#define _I3C1PID5_PID47_SIZE                                0x1
#define _I3C1PID5_PID47_LENGTH                              0x1
#define _I3C1PID5_PID47_MASK                                0x80
#define _I3C1PID5_PID_47_40_POSN                            0x0
#define _I3C1PID5_PID_47_40_POSITION                        0x0
#define _I3C1PID5_PID_47_40_SIZE                            0x8
#define _I3C1PID5_PID_47_40_LENGTH                          0x8
#define _I3C1PID5_PID_47_40_MASK                            0xFF

// Register: I3C1BCR
#define I3C1BCR I3C1BCR
extern volatile unsigned char           I3C1BCR             __at(0x0A8);
#ifndef _LIB_BUILD
asm("I3C1BCR equ 0A8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BCR0                   :1;
        unsigned BCR1                   :1;
        unsigned BCR2                   :1;
        unsigned BCR3                   :1;
        unsigned BCR4                   :1;
        unsigned BCR5                   :1;
        unsigned BCR6                   :1;
        unsigned BCR7                   :1;
    };
    struct {
        unsigned                        :6;
        unsigned BCR_7_6                :2;
    };
} I3C1BCRbits_t;
extern volatile I3C1BCRbits_t I3C1BCRbits __at(0x0A8);
// bitfield macros
#define _I3C1BCR_BCR0_POSN                                  0x0
#define _I3C1BCR_BCR0_POSITION                              0x0
#define _I3C1BCR_BCR0_SIZE                                  0x1
#define _I3C1BCR_BCR0_LENGTH                                0x1
#define _I3C1BCR_BCR0_MASK                                  0x1
#define _I3C1BCR_BCR1_POSN                                  0x1
#define _I3C1BCR_BCR1_POSITION                              0x1
#define _I3C1BCR_BCR1_SIZE                                  0x1
#define _I3C1BCR_BCR1_LENGTH                                0x1
#define _I3C1BCR_BCR1_MASK                                  0x2
#define _I3C1BCR_BCR2_POSN                                  0x2
#define _I3C1BCR_BCR2_POSITION                              0x2
#define _I3C1BCR_BCR2_SIZE                                  0x1
#define _I3C1BCR_BCR2_LENGTH                                0x1
#define _I3C1BCR_BCR2_MASK                                  0x4
#define _I3C1BCR_BCR3_POSN                                  0x3
#define _I3C1BCR_BCR3_POSITION                              0x3
#define _I3C1BCR_BCR3_SIZE                                  0x1
#define _I3C1BCR_BCR3_LENGTH                                0x1
#define _I3C1BCR_BCR3_MASK                                  0x8
#define _I3C1BCR_BCR4_POSN                                  0x4
#define _I3C1BCR_BCR4_POSITION                              0x4
#define _I3C1BCR_BCR4_SIZE                                  0x1
#define _I3C1BCR_BCR4_LENGTH                                0x1
#define _I3C1BCR_BCR4_MASK                                  0x10
#define _I3C1BCR_BCR5_POSN                                  0x5
#define _I3C1BCR_BCR5_POSITION                              0x5
#define _I3C1BCR_BCR5_SIZE                                  0x1
#define _I3C1BCR_BCR5_LENGTH                                0x1
#define _I3C1BCR_BCR5_MASK                                  0x20
#define _I3C1BCR_BCR6_POSN                                  0x6
#define _I3C1BCR_BCR6_POSITION                              0x6
#define _I3C1BCR_BCR6_SIZE                                  0x1
#define _I3C1BCR_BCR6_LENGTH                                0x1
#define _I3C1BCR_BCR6_MASK                                  0x40
#define _I3C1BCR_BCR7_POSN                                  0x7
#define _I3C1BCR_BCR7_POSITION                              0x7
#define _I3C1BCR_BCR7_SIZE                                  0x1
#define _I3C1BCR_BCR7_LENGTH                                0x1
#define _I3C1BCR_BCR7_MASK                                  0x80
#define _I3C1BCR_BCR_7_6_POSN                               0x6
#define _I3C1BCR_BCR_7_6_POSITION                           0x6
#define _I3C1BCR_BCR_7_6_SIZE                               0x2
#define _I3C1BCR_BCR_7_6_LENGTH                             0x2
#define _I3C1BCR_BCR_7_6_MASK                               0xC0

// Register: I3C1DCR
#define I3C1DCR I3C1DCR
extern volatile unsigned char           I3C1DCR             __at(0x0A9);
#ifndef _LIB_BUILD
asm("I3C1DCR equ 0A9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DCR                    :8;
    };
} I3C1DCRbits_t;
extern volatile I3C1DCRbits_t I3C1DCRbits __at(0x0A9);
// bitfield macros
#define _I3C1DCR_DCR_POSN                                   0x0
#define _I3C1DCR_DCR_POSITION                               0x0
#define _I3C1DCR_DCR_SIZE                                   0x8
#define _I3C1DCR_DCR_LENGTH                                 0x8
#define _I3C1DCR_DCR_MASK                                   0xFF

// Register: I3C1DSTAT0
#define I3C1DSTAT0 I3C1DSTAT0
extern volatile unsigned char           I3C1DSTAT0          __at(0x0AA);
#ifndef _LIB_BUILD
asm("I3C1DSTAT0 equ 0AAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTPEND                :4;
        unsigned                        :1;
        unsigned PERR                   :1;
        unsigned ACTMODE                :2;
    };
    struct {
        unsigned INPEND0                :1;
        unsigned INTPEND1               :1;
        unsigned INTPEND2               :1;
        unsigned INTPEND3               :1;
        unsigned                        :2;
        unsigned ACTMODE0               :1;
        unsigned ACTMODE1               :1;
    };
} I3C1DSTAT0bits_t;
extern volatile I3C1DSTAT0bits_t I3C1DSTAT0bits __at(0x0AA);
// bitfield macros
#define _I3C1DSTAT0_INTPEND_POSN                            0x0
#define _I3C1DSTAT0_INTPEND_POSITION                        0x0
#define _I3C1DSTAT0_INTPEND_SIZE                            0x4
#define _I3C1DSTAT0_INTPEND_LENGTH                          0x4
#define _I3C1DSTAT0_INTPEND_MASK                            0xF
#define _I3C1DSTAT0_PERR_POSN                               0x5
#define _I3C1DSTAT0_PERR_POSITION                           0x5
#define _I3C1DSTAT0_PERR_SIZE                               0x1
#define _I3C1DSTAT0_PERR_LENGTH                             0x1
#define _I3C1DSTAT0_PERR_MASK                               0x20
#define _I3C1DSTAT0_ACTMODE_POSN                            0x6
#define _I3C1DSTAT0_ACTMODE_POSITION                        0x6
#define _I3C1DSTAT0_ACTMODE_SIZE                            0x2
#define _I3C1DSTAT0_ACTMODE_LENGTH                          0x2
#define _I3C1DSTAT0_ACTMODE_MASK                            0xC0
#define _I3C1DSTAT0_INPEND0_POSN                            0x0
#define _I3C1DSTAT0_INPEND0_POSITION                        0x0
#define _I3C1DSTAT0_INPEND0_SIZE                            0x1
#define _I3C1DSTAT0_INPEND0_LENGTH                          0x1
#define _I3C1DSTAT0_INPEND0_MASK                            0x1
#define _I3C1DSTAT0_INTPEND1_POSN                           0x1
#define _I3C1DSTAT0_INTPEND1_POSITION                       0x1
#define _I3C1DSTAT0_INTPEND1_SIZE                           0x1
#define _I3C1DSTAT0_INTPEND1_LENGTH                         0x1
#define _I3C1DSTAT0_INTPEND1_MASK                           0x2
#define _I3C1DSTAT0_INTPEND2_POSN                           0x2
#define _I3C1DSTAT0_INTPEND2_POSITION                       0x2
#define _I3C1DSTAT0_INTPEND2_SIZE                           0x1
#define _I3C1DSTAT0_INTPEND2_LENGTH                         0x1
#define _I3C1DSTAT0_INTPEND2_MASK                           0x4
#define _I3C1DSTAT0_INTPEND3_POSN                           0x3
#define _I3C1DSTAT0_INTPEND3_POSITION                       0x3
#define _I3C1DSTAT0_INTPEND3_SIZE                           0x1
#define _I3C1DSTAT0_INTPEND3_LENGTH                         0x1
#define _I3C1DSTAT0_INTPEND3_MASK                           0x8
#define _I3C1DSTAT0_ACTMODE0_POSN                           0x6
#define _I3C1DSTAT0_ACTMODE0_POSITION                       0x6
#define _I3C1DSTAT0_ACTMODE0_SIZE                           0x1
#define _I3C1DSTAT0_ACTMODE0_LENGTH                         0x1
#define _I3C1DSTAT0_ACTMODE0_MASK                           0x40
#define _I3C1DSTAT0_ACTMODE1_POSN                           0x7
#define _I3C1DSTAT0_ACTMODE1_POSITION                       0x7
#define _I3C1DSTAT0_ACTMODE1_SIZE                           0x1
#define _I3C1DSTAT0_ACTMODE1_LENGTH                         0x1
#define _I3C1DSTAT0_ACTMODE1_MASK                           0x80

// Register: I3C1DSTAT1
#define I3C1DSTAT1 I3C1DSTAT1
extern volatile unsigned char           I3C1DSTAT1          __at(0x0AB);
#ifndef _LIB_BUILD
asm("I3C1DSTAT1 equ 0ABh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned VRSV                   :8;
    };
    struct {
        unsigned VRSV0                  :1;
        unsigned VRSV1                  :1;
        unsigned VRSV2                  :1;
        unsigned VRSV3                  :1;
        unsigned VRSV4                  :1;
        unsigned VRSV5                  :1;
        unsigned VRSV6                  :1;
        unsigned VRSV7                  :1;
    };
} I3C1DSTAT1bits_t;
extern volatile I3C1DSTAT1bits_t I3C1DSTAT1bits __at(0x0AB);
// bitfield macros
#define _I3C1DSTAT1_VRSV_POSN                               0x0
#define _I3C1DSTAT1_VRSV_POSITION                           0x0
#define _I3C1DSTAT1_VRSV_SIZE                               0x8
#define _I3C1DSTAT1_VRSV_LENGTH                             0x8
#define _I3C1DSTAT1_VRSV_MASK                               0xFF
#define _I3C1DSTAT1_VRSV0_POSN                              0x0
#define _I3C1DSTAT1_VRSV0_POSITION                          0x0
#define _I3C1DSTAT1_VRSV0_SIZE                              0x1
#define _I3C1DSTAT1_VRSV0_LENGTH                            0x1
#define _I3C1DSTAT1_VRSV0_MASK                              0x1
#define _I3C1DSTAT1_VRSV1_POSN                              0x1
#define _I3C1DSTAT1_VRSV1_POSITION                          0x1
#define _I3C1DSTAT1_VRSV1_SIZE                              0x1
#define _I3C1DSTAT1_VRSV1_LENGTH                            0x1
#define _I3C1DSTAT1_VRSV1_MASK                              0x2
#define _I3C1DSTAT1_VRSV2_POSN                              0x2
#define _I3C1DSTAT1_VRSV2_POSITION                          0x2
#define _I3C1DSTAT1_VRSV2_SIZE                              0x1
#define _I3C1DSTAT1_VRSV2_LENGTH                            0x1
#define _I3C1DSTAT1_VRSV2_MASK                              0x4
#define _I3C1DSTAT1_VRSV3_POSN                              0x3
#define _I3C1DSTAT1_VRSV3_POSITION                          0x3
#define _I3C1DSTAT1_VRSV3_SIZE                              0x1
#define _I3C1DSTAT1_VRSV3_LENGTH                            0x1
#define _I3C1DSTAT1_VRSV3_MASK                              0x8
#define _I3C1DSTAT1_VRSV4_POSN                              0x4
#define _I3C1DSTAT1_VRSV4_POSITION                          0x4
#define _I3C1DSTAT1_VRSV4_SIZE                              0x1
#define _I3C1DSTAT1_VRSV4_LENGTH                            0x1
#define _I3C1DSTAT1_VRSV4_MASK                              0x10
#define _I3C1DSTAT1_VRSV5_POSN                              0x5
#define _I3C1DSTAT1_VRSV5_POSITION                          0x5
#define _I3C1DSTAT1_VRSV5_SIZE                              0x1
#define _I3C1DSTAT1_VRSV5_LENGTH                            0x1
#define _I3C1DSTAT1_VRSV5_MASK                              0x20
#define _I3C1DSTAT1_VRSV6_POSN                              0x6
#define _I3C1DSTAT1_VRSV6_POSITION                          0x6
#define _I3C1DSTAT1_VRSV6_SIZE                              0x1
#define _I3C1DSTAT1_VRSV6_LENGTH                            0x1
#define _I3C1DSTAT1_VRSV6_MASK                              0x40
#define _I3C1DSTAT1_VRSV7_POSN                              0x7
#define _I3C1DSTAT1_VRSV7_POSITION                          0x7
#define _I3C1DSTAT1_VRSV7_SIZE                              0x1
#define _I3C1DSTAT1_VRSV7_LENGTH                            0x1
#define _I3C1DSTAT1_VRSV7_MASK                              0x80

// Register: I3C1MWS
#define I3C1MWS I3C1MWS
extern volatile unsigned char           I3C1MWS             __at(0x0AC);
#ifndef _LIB_BUILD
asm("I3C1MWS equ 0ACh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MWS0                   :1;
        unsigned MWS1                   :1;
        unsigned MWS2                   :1;
        unsigned MWS3                   :1;
        unsigned MWS4                   :1;
        unsigned MWS5                   :1;
        unsigned MWS6                   :1;
        unsigned MWS7                   :1;
    };
    struct {
        unsigned MWS_2_0                :3;
        unsigned                        :1;
        unsigned MWS_7_4                :4;
    };
} I3C1MWSbits_t;
extern volatile I3C1MWSbits_t I3C1MWSbits __at(0x0AC);
// bitfield macros
#define _I3C1MWS_MWS0_POSN                                  0x0
#define _I3C1MWS_MWS0_POSITION                              0x0
#define _I3C1MWS_MWS0_SIZE                                  0x1
#define _I3C1MWS_MWS0_LENGTH                                0x1
#define _I3C1MWS_MWS0_MASK                                  0x1
#define _I3C1MWS_MWS1_POSN                                  0x1
#define _I3C1MWS_MWS1_POSITION                              0x1
#define _I3C1MWS_MWS1_SIZE                                  0x1
#define _I3C1MWS_MWS1_LENGTH                                0x1
#define _I3C1MWS_MWS1_MASK                                  0x2
#define _I3C1MWS_MWS2_POSN                                  0x2
#define _I3C1MWS_MWS2_POSITION                              0x2
#define _I3C1MWS_MWS2_SIZE                                  0x1
#define _I3C1MWS_MWS2_LENGTH                                0x1
#define _I3C1MWS_MWS2_MASK                                  0x4
#define _I3C1MWS_MWS3_POSN                                  0x3
#define _I3C1MWS_MWS3_POSITION                              0x3
#define _I3C1MWS_MWS3_SIZE                                  0x1
#define _I3C1MWS_MWS3_LENGTH                                0x1
#define _I3C1MWS_MWS3_MASK                                  0x8
#define _I3C1MWS_MWS4_POSN                                  0x4
#define _I3C1MWS_MWS4_POSITION                              0x4
#define _I3C1MWS_MWS4_SIZE                                  0x1
#define _I3C1MWS_MWS4_LENGTH                                0x1
#define _I3C1MWS_MWS4_MASK                                  0x10
#define _I3C1MWS_MWS5_POSN                                  0x5
#define _I3C1MWS_MWS5_POSITION                              0x5
#define _I3C1MWS_MWS5_SIZE                                  0x1
#define _I3C1MWS_MWS5_LENGTH                                0x1
#define _I3C1MWS_MWS5_MASK                                  0x20
#define _I3C1MWS_MWS6_POSN                                  0x6
#define _I3C1MWS_MWS6_POSITION                              0x6
#define _I3C1MWS_MWS6_SIZE                                  0x1
#define _I3C1MWS_MWS6_LENGTH                                0x1
#define _I3C1MWS_MWS6_MASK                                  0x40
#define _I3C1MWS_MWS7_POSN                                  0x7
#define _I3C1MWS_MWS7_POSITION                              0x7
#define _I3C1MWS_MWS7_SIZE                                  0x1
#define _I3C1MWS_MWS7_LENGTH                                0x1
#define _I3C1MWS_MWS7_MASK                                  0x80
#define _I3C1MWS_MWS_2_0_POSN                               0x0
#define _I3C1MWS_MWS_2_0_POSITION                           0x0
#define _I3C1MWS_MWS_2_0_SIZE                               0x3
#define _I3C1MWS_MWS_2_0_LENGTH                             0x3
#define _I3C1MWS_MWS_2_0_MASK                               0x7
#define _I3C1MWS_MWS_7_4_POSN                               0x4
#define _I3C1MWS_MWS_7_4_POSITION                           0x4
#define _I3C1MWS_MWS_7_4_SIZE                               0x4
#define _I3C1MWS_MWS_7_4_LENGTH                             0x4
#define _I3C1MWS_MWS_7_4_MASK                               0xF0

// Register: I3C1MRS
#define I3C1MRS I3C1MRS
extern volatile unsigned char           I3C1MRS             __at(0x0AD);
#ifndef _LIB_BUILD
asm("I3C1MRS equ 0ADh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MRS0                   :1;
        unsigned MRS1                   :1;
        unsigned MRS2                   :1;
        unsigned MRS3                   :1;
        unsigned MRS4                   :1;
        unsigned MRS5                   :1;
        unsigned MRS6                   :1;
        unsigned MRS7                   :1;
    };
    struct {
        unsigned MRS_2_0                :3;
        unsigned MRS_5_3                :3;
    };
} I3C1MRSbits_t;
extern volatile I3C1MRSbits_t I3C1MRSbits __at(0x0AD);
// bitfield macros
#define _I3C1MRS_MRS0_POSN                                  0x0
#define _I3C1MRS_MRS0_POSITION                              0x0
#define _I3C1MRS_MRS0_SIZE                                  0x1
#define _I3C1MRS_MRS0_LENGTH                                0x1
#define _I3C1MRS_MRS0_MASK                                  0x1
#define _I3C1MRS_MRS1_POSN                                  0x1
#define _I3C1MRS_MRS1_POSITION                              0x1
#define _I3C1MRS_MRS1_SIZE                                  0x1
#define _I3C1MRS_MRS1_LENGTH                                0x1
#define _I3C1MRS_MRS1_MASK                                  0x2
#define _I3C1MRS_MRS2_POSN                                  0x2
#define _I3C1MRS_MRS2_POSITION                              0x2
#define _I3C1MRS_MRS2_SIZE                                  0x1
#define _I3C1MRS_MRS2_LENGTH                                0x1
#define _I3C1MRS_MRS2_MASK                                  0x4
#define _I3C1MRS_MRS3_POSN                                  0x3
#define _I3C1MRS_MRS3_POSITION                              0x3
#define _I3C1MRS_MRS3_SIZE                                  0x1
#define _I3C1MRS_MRS3_LENGTH                                0x1
#define _I3C1MRS_MRS3_MASK                                  0x8
#define _I3C1MRS_MRS4_POSN                                  0x4
#define _I3C1MRS_MRS4_POSITION                              0x4
#define _I3C1MRS_MRS4_SIZE                                  0x1
#define _I3C1MRS_MRS4_LENGTH                                0x1
#define _I3C1MRS_MRS4_MASK                                  0x10
#define _I3C1MRS_MRS5_POSN                                  0x5
#define _I3C1MRS_MRS5_POSITION                              0x5
#define _I3C1MRS_MRS5_SIZE                                  0x1
#define _I3C1MRS_MRS5_LENGTH                                0x1
#define _I3C1MRS_MRS5_MASK                                  0x20
#define _I3C1MRS_MRS6_POSN                                  0x6
#define _I3C1MRS_MRS6_POSITION                              0x6
#define _I3C1MRS_MRS6_SIZE                                  0x1
#define _I3C1MRS_MRS6_LENGTH                                0x1
#define _I3C1MRS_MRS6_MASK                                  0x40
#define _I3C1MRS_MRS7_POSN                                  0x7
#define _I3C1MRS_MRS7_POSITION                              0x7
#define _I3C1MRS_MRS7_SIZE                                  0x1
#define _I3C1MRS_MRS7_LENGTH                                0x1
#define _I3C1MRS_MRS7_MASK                                  0x80
#define _I3C1MRS_MRS_2_0_POSN                               0x0
#define _I3C1MRS_MRS_2_0_POSITION                           0x0
#define _I3C1MRS_MRS_2_0_SIZE                               0x3
#define _I3C1MRS_MRS_2_0_LENGTH                             0x3
#define _I3C1MRS_MRS_2_0_MASK                               0x7
#define _I3C1MRS_MRS_5_3_POSN                               0x3
#define _I3C1MRS_MRS_5_3_POSITION                           0x3
#define _I3C1MRS_MRS_5_3_SIZE                               0x3
#define _I3C1MRS_MRS_5_3_LENGTH                             0x3
#define _I3C1MRS_MRS_5_3_MASK                               0x38

// Register: I3C1MRT
#define I3C1MRT I3C1MRT
#ifndef __CCI__
extern volatile __uint24                I3C1MRT             __at(0x0AE);
#endif
#ifndef _LIB_BUILD
asm("I3C1MRT equ 0AEh");
#endif

// Register: I3C1MRTL
#define I3C1MRTL I3C1MRTL
extern volatile unsigned char           I3C1MRTL            __at(0x0AE);
#ifndef _LIB_BUILD
asm("I3C1MRTL equ 0AEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MRTL                   :8;
    };
} I3C1MRTLbits_t;
extern volatile I3C1MRTLbits_t I3C1MRTLbits __at(0x0AE);
// bitfield macros
#define _I3C1MRTL_MRTL_POSN                                 0x0
#define _I3C1MRTL_MRTL_POSITION                             0x0
#define _I3C1MRTL_MRTL_SIZE                                 0x8
#define _I3C1MRTL_MRTL_LENGTH                               0x8
#define _I3C1MRTL_MRTL_MASK                                 0xFF

// Register: I3C1MRTH
#define I3C1MRTH I3C1MRTH
extern volatile unsigned char           I3C1MRTH            __at(0x0AF);
#ifndef _LIB_BUILD
asm("I3C1MRTH equ 0AFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MRTH                   :8;
    };
} I3C1MRTHbits_t;
extern volatile I3C1MRTHbits_t I3C1MRTHbits __at(0x0AF);
// bitfield macros
#define _I3C1MRTH_MRTH_POSN                                 0x0
#define _I3C1MRTH_MRTH_POSITION                             0x0
#define _I3C1MRTH_MRTH_SIZE                                 0x8
#define _I3C1MRTH_MRTH_LENGTH                               0x8
#define _I3C1MRTH_MRTH_MASK                                 0xFF

// Register: I3C1MRTU
#define I3C1MRTU I3C1MRTU
extern volatile unsigned char           I3C1MRTU            __at(0x0B0);
#ifndef _LIB_BUILD
asm("I3C1MRTU equ 0B0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MRTU                   :8;
    };
} I3C1MRTUbits_t;
extern volatile I3C1MRTUbits_t I3C1MRTUbits __at(0x0B0);
// bitfield macros
#define _I3C1MRTU_MRTU_POSN                                 0x0
#define _I3C1MRTU_MRTU_POSITION                             0x0
#define _I3C1MRTU_MRTU_SIZE                                 0x8
#define _I3C1MRTU_MRTU_LENGTH                               0x8
#define _I3C1MRTU_MRTU_MASK                                 0xFF

// Register: I3C1RSTACT
#define I3C1RSTACT I3C1RSTACT
extern volatile unsigned char           I3C1RSTACT          __at(0x0B1);
#ifndef _LIB_BUILD
asm("I3C1RSTACT equ 0B1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSTACT                 :8;
    };
} I3C1RSTACTbits_t;
extern volatile I3C1RSTACTbits_t I3C1RSTACTbits __at(0x0B1);
// bitfield macros
#define _I3C1RSTACT_RSTACT_POSN                             0x0
#define _I3C1RSTACT_RSTACT_POSITION                         0x0
#define _I3C1RSTACT_RSTACT_SIZE                             0x8
#define _I3C1RSTACT_RSTACT_LENGTH                           0x8
#define _I3C1RSTACT_RSTACT_MASK                             0xFF

// Register: I3C1BUSCXT
#define I3C1BUSCXT I3C1BUSCXT
extern volatile unsigned char           I3C1BUSCXT          __at(0x0B2);
#ifndef _LIB_BUILD
asm("I3C1BUSCXT equ 0B2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BUSCXT                 :8;
    };
} I3C1BUSCXTbits_t;
extern volatile I3C1BUSCXTbits_t I3C1BUSCXTbits __at(0x0B2);
// bitfield macros
#define _I3C1BUSCXT_BUSCXT_POSN                             0x0
#define _I3C1BUSCXT_BUSCXT_POSITION                         0x0
#define _I3C1BUSCXT_BUSCXT_SIZE                             0x8
#define _I3C1BUSCXT_BUSCXT_LENGTH                           0x8
#define _I3C1BUSCXT_BUSCXT_MASK                             0xFF

// Register: I3C1CCC
#define I3C1CCC I3C1CCC
extern volatile unsigned char           I3C1CCC             __at(0x0B3);
#ifndef _LIB_BUILD
asm("I3C1CCC equ 0B3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCC                    :8;
    };
} I3C1CCCbits_t;
extern volatile I3C1CCCbits_t I3C1CCCbits __at(0x0B3);
// bitfield macros
#define _I3C1CCC_CCC_POSN                                   0x0
#define _I3C1CCC_CCC_POSITION                               0x0
#define _I3C1CCC_CCC_SIZE                                   0x8
#define _I3C1CCC_CCC_LENGTH                                 0x8
#define _I3C1CCC_CCC_MASK                                   0xFF

// Register: I3C1I2CCON
#define I3C1I2CCON I3C1I2CCON
extern volatile unsigned char           I3C1I2CCON          __at(0x0B4);
#ifndef _LIB_BUILD
asm("I3C1I2CCON equ 0B4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SDAHT                  :2;
        unsigned FLTEN                  :1;
    };
} I3C1I2CCONbits_t;
extern volatile I3C1I2CCONbits_t I3C1I2CCONbits __at(0x0B4);
// bitfield macros
#define _I3C1I2CCON_SDAHT_POSN                              0x0
#define _I3C1I2CCON_SDAHT_POSITION                          0x0
#define _I3C1I2CCON_SDAHT_SIZE                              0x2
#define _I3C1I2CCON_SDAHT_LENGTH                            0x2
#define _I3C1I2CCON_SDAHT_MASK                              0x3
#define _I3C1I2CCON_FLTEN_POSN                              0x2
#define _I3C1I2CCON_FLTEN_POSITION                          0x2
#define _I3C1I2CCON_FLTEN_SIZE                              0x1
#define _I3C1I2CCON_FLTEN_LENGTH                            0x1
#define _I3C1I2CCON_FLTEN_MASK                              0x4

// Register: I3C1CLK
#define I3C1CLK I3C1CLK
extern volatile unsigned char           I3C1CLK             __at(0x0B5);
#ifndef _LIB_BUILD
asm("I3C1CLK equ 0B5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLK                    :8;
    };
    struct {
        unsigned CLK0                   :1;
        unsigned CLK1                   :1;
        unsigned CLK2                   :1;
        unsigned CLK3                   :1;
    };
} I3C1CLKbits_t;
extern volatile I3C1CLKbits_t I3C1CLKbits __at(0x0B5);
// bitfield macros
#define _I3C1CLK_CLK_POSN                                   0x0
#define _I3C1CLK_CLK_POSITION                               0x0
#define _I3C1CLK_CLK_SIZE                                   0x8
#define _I3C1CLK_CLK_LENGTH                                 0x8
#define _I3C1CLK_CLK_MASK                                   0xFF
#define _I3C1CLK_CLK0_POSN                                  0x0
#define _I3C1CLK_CLK0_POSITION                              0x0
#define _I3C1CLK_CLK0_SIZE                                  0x1
#define _I3C1CLK_CLK0_LENGTH                                0x1
#define _I3C1CLK_CLK0_MASK                                  0x1
#define _I3C1CLK_CLK1_POSN                                  0x1
#define _I3C1CLK_CLK1_POSITION                              0x1
#define _I3C1CLK_CLK1_SIZE                                  0x1
#define _I3C1CLK_CLK1_LENGTH                                0x1
#define _I3C1CLK_CLK1_MASK                                  0x2
#define _I3C1CLK_CLK2_POSN                                  0x2
#define _I3C1CLK_CLK2_POSITION                              0x2
#define _I3C1CLK_CLK2_SIZE                                  0x1
#define _I3C1CLK_CLK2_LENGTH                                0x1
#define _I3C1CLK_CLK2_MASK                                  0x4
#define _I3C1CLK_CLK3_POSN                                  0x3
#define _I3C1CLK_CLK3_POSITION                              0x3
#define _I3C1CLK_CLK3_SIZE                                  0x1
#define _I3C1CLK_CLK3_LENGTH                                0x1
#define _I3C1CLK_CLK3_MASK                                  0x8

// Register: CLKRCON
#define CLKRCON CLKRCON
extern volatile unsigned char           CLKRCON             __at(0x100);
#ifndef _LIB_BUILD
asm("CLKRCON equ 0100h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DIV                    :3;
        unsigned DC                     :2;
        unsigned                        :2;
        unsigned EN                     :1;
    };
    struct {
        unsigned CLKRDIV0               :1;
        unsigned CLKRDIV1               :1;
        unsigned CLKRDIV2               :1;
        unsigned CLKRDC0                :1;
        unsigned CLKRDC1                :1;
        unsigned                        :2;
        unsigned CLKREN                 :1;
    };
    struct {
        unsigned DIV0                   :1;
        unsigned DIV1                   :1;
        unsigned DIV2                   :1;
        unsigned DC0                    :1;
        unsigned DC1                    :1;
    };
} CLKRCONbits_t;
extern volatile CLKRCONbits_t CLKRCONbits __at(0x100);
// bitfield macros
#define _CLKRCON_DIV_POSN                                   0x0
#define _CLKRCON_DIV_POSITION                               0x0
#define _CLKRCON_DIV_SIZE                                   0x3
#define _CLKRCON_DIV_LENGTH                                 0x3
#define _CLKRCON_DIV_MASK                                   0x7
#define _CLKRCON_DC_POSN                                    0x3
#define _CLKRCON_DC_POSITION                                0x3
#define _CLKRCON_DC_SIZE                                    0x2
#define _CLKRCON_DC_LENGTH                                  0x2
#define _CLKRCON_DC_MASK                                    0x18
#define _CLKRCON_EN_POSN                                    0x7
#define _CLKRCON_EN_POSITION                                0x7
#define _CLKRCON_EN_SIZE                                    0x1
#define _CLKRCON_EN_LENGTH                                  0x1
#define _CLKRCON_EN_MASK                                    0x80
#define _CLKRCON_CLKRDIV0_POSN                              0x0
#define _CLKRCON_CLKRDIV0_POSITION                          0x0
#define _CLKRCON_CLKRDIV0_SIZE                              0x1
#define _CLKRCON_CLKRDIV0_LENGTH                            0x1
#define _CLKRCON_CLKRDIV0_MASK                              0x1
#define _CLKRCON_CLKRDIV1_POSN                              0x1
#define _CLKRCON_CLKRDIV1_POSITION                          0x1
#define _CLKRCON_CLKRDIV1_SIZE                              0x1
#define _CLKRCON_CLKRDIV1_LENGTH                            0x1
#define _CLKRCON_CLKRDIV1_MASK                              0x2
#define _CLKRCON_CLKRDIV2_POSN                              0x2
#define _CLKRCON_CLKRDIV2_POSITION                          0x2
#define _CLKRCON_CLKRDIV2_SIZE                              0x1
#define _CLKRCON_CLKRDIV2_LENGTH                            0x1
#define _CLKRCON_CLKRDIV2_MASK                              0x4
#define _CLKRCON_CLKRDC0_POSN                               0x3
#define _CLKRCON_CLKRDC0_POSITION                           0x3
#define _CLKRCON_CLKRDC0_SIZE                               0x1
#define _CLKRCON_CLKRDC0_LENGTH                             0x1
#define _CLKRCON_CLKRDC0_MASK                               0x8
#define _CLKRCON_CLKRDC1_POSN                               0x4
#define _CLKRCON_CLKRDC1_POSITION                           0x4
#define _CLKRCON_CLKRDC1_SIZE                               0x1
#define _CLKRCON_CLKRDC1_LENGTH                             0x1
#define _CLKRCON_CLKRDC1_MASK                               0x10
#define _CLKRCON_CLKREN_POSN                                0x7
#define _CLKRCON_CLKREN_POSITION                            0x7
#define _CLKRCON_CLKREN_SIZE                                0x1
#define _CLKRCON_CLKREN_LENGTH                              0x1
#define _CLKRCON_CLKREN_MASK                                0x80
#define _CLKRCON_DIV0_POSN                                  0x0
#define _CLKRCON_DIV0_POSITION                              0x0
#define _CLKRCON_DIV0_SIZE                                  0x1
#define _CLKRCON_DIV0_LENGTH                                0x1
#define _CLKRCON_DIV0_MASK                                  0x1
#define _CLKRCON_DIV1_POSN                                  0x1
#define _CLKRCON_DIV1_POSITION                              0x1
#define _CLKRCON_DIV1_SIZE                                  0x1
#define _CLKRCON_DIV1_LENGTH                                0x1
#define _CLKRCON_DIV1_MASK                                  0x2
#define _CLKRCON_DIV2_POSN                                  0x2
#define _CLKRCON_DIV2_POSITION                              0x2
#define _CLKRCON_DIV2_SIZE                                  0x1
#define _CLKRCON_DIV2_LENGTH                                0x1
#define _CLKRCON_DIV2_MASK                                  0x4
#define _CLKRCON_DC0_POSN                                   0x3
#define _CLKRCON_DC0_POSITION                               0x3
#define _CLKRCON_DC0_SIZE                                   0x1
#define _CLKRCON_DC0_LENGTH                                 0x1
#define _CLKRCON_DC0_MASK                                   0x8
#define _CLKRCON_DC1_POSN                                   0x4
#define _CLKRCON_DC1_POSITION                               0x4
#define _CLKRCON_DC1_SIZE                                   0x1
#define _CLKRCON_DC1_LENGTH                                 0x1
#define _CLKRCON_DC1_MASK                                   0x10

// Register: CLKRCLK
#define CLKRCLK CLKRCLK
extern volatile unsigned char           CLKRCLK             __at(0x101);
#ifndef _LIB_BUILD
asm("CLKRCLK equ 0101h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLK                    :8;
    };
    struct {
        unsigned CLKRCLK0               :1;
        unsigned CLKRCLK1               :1;
        unsigned CLKRCLK2               :1;
        unsigned CLKRCLK3               :1;
    };
    struct {
        unsigned CLK0                   :1;
        unsigned CLK1                   :1;
        unsigned CLK2                   :1;
        unsigned CLK3                   :1;
    };
} CLKRCLKbits_t;
extern volatile CLKRCLKbits_t CLKRCLKbits __at(0x101);
// bitfield macros
#define _CLKRCLK_CLK_POSN                                   0x0
#define _CLKRCLK_CLK_POSITION                               0x0
#define _CLKRCLK_CLK_SIZE                                   0x8
#define _CLKRCLK_CLK_LENGTH                                 0x8
#define _CLKRCLK_CLK_MASK                                   0xFF
#define _CLKRCLK_CLKRCLK0_POSN                              0x0
#define _CLKRCLK_CLKRCLK0_POSITION                          0x0
#define _CLKRCLK_CLKRCLK0_SIZE                              0x1
#define _CLKRCLK_CLKRCLK0_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK0_MASK                              0x1
#define _CLKRCLK_CLKRCLK1_POSN                              0x1
#define _CLKRCLK_CLKRCLK1_POSITION                          0x1
#define _CLKRCLK_CLKRCLK1_SIZE                              0x1
#define _CLKRCLK_CLKRCLK1_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK1_MASK                              0x2
#define _CLKRCLK_CLKRCLK2_POSN                              0x2
#define _CLKRCLK_CLKRCLK2_POSITION                          0x2
#define _CLKRCLK_CLKRCLK2_SIZE                              0x1
#define _CLKRCLK_CLKRCLK2_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK2_MASK                              0x4
#define _CLKRCLK_CLKRCLK3_POSN                              0x3
#define _CLKRCLK_CLKRCLK3_POSITION                          0x3
#define _CLKRCLK_CLKRCLK3_SIZE                              0x1
#define _CLKRCLK_CLKRCLK3_LENGTH                            0x1
#define _CLKRCLK_CLKRCLK3_MASK                              0x8
#define _CLKRCLK_CLK0_POSN                                  0x0
#define _CLKRCLK_CLK0_POSITION                              0x0
#define _CLKRCLK_CLK0_SIZE                                  0x1
#define _CLKRCLK_CLK0_LENGTH                                0x1
#define _CLKRCLK_CLK0_MASK                                  0x1
#define _CLKRCLK_CLK1_POSN                                  0x1
#define _CLKRCLK_CLK1_POSITION                              0x1
#define _CLKRCLK_CLK1_SIZE                                  0x1
#define _CLKRCLK_CLK1_LENGTH                                0x1
#define _CLKRCLK_CLK1_MASK                                  0x2
#define _CLKRCLK_CLK2_POSN                                  0x2
#define _CLKRCLK_CLK2_POSITION                              0x2
#define _CLKRCLK_CLK2_SIZE                                  0x1
#define _CLKRCLK_CLK2_LENGTH                                0x1
#define _CLKRCLK_CLK2_MASK                                  0x4
#define _CLKRCLK_CLK3_POSN                                  0x3
#define _CLKRCLK_CLK3_POSITION                              0x3
#define _CLKRCLK_CLK3_SIZE                                  0x1
#define _CLKRCLK_CLK3_LENGTH                                0x1
#define _CLKRCLK_CLK3_MASK                                  0x8

// Register: TMR0L
#define TMR0L TMR0L
extern volatile unsigned char           TMR0L               __at(0x103);
#ifndef _LIB_BUILD
asm("TMR0L equ 0103h");
#endif
// aliases
extern volatile unsigned char           TMR0                __at(0x103);
#ifndef _LIB_BUILD
asm("TMR0 equ 0103h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0L                  :8;
    };
    struct {
        unsigned TMR0L0                 :1;
        unsigned TMR0L1                 :1;
        unsigned TMR0L2                 :1;
        unsigned TMR0L3                 :1;
        unsigned TMR0L4                 :1;
        unsigned TMR0L5                 :1;
        unsigned TMR0L6                 :1;
        unsigned TMR0L7                 :1;
    };
} TMR0Lbits_t;
extern volatile TMR0Lbits_t TMR0Lbits __at(0x103);
// bitfield macros
#define _TMR0L_TMR0L_POSN                                   0x0
#define _TMR0L_TMR0L_POSITION                               0x0
#define _TMR0L_TMR0L_SIZE                                   0x8
#define _TMR0L_TMR0L_LENGTH                                 0x8
#define _TMR0L_TMR0L_MASK                                   0xFF
#define _TMR0L_TMR0L0_POSN                                  0x0
#define _TMR0L_TMR0L0_POSITION                              0x0
#define _TMR0L_TMR0L0_SIZE                                  0x1
#define _TMR0L_TMR0L0_LENGTH                                0x1
#define _TMR0L_TMR0L0_MASK                                  0x1
#define _TMR0L_TMR0L1_POSN                                  0x1
#define _TMR0L_TMR0L1_POSITION                              0x1
#define _TMR0L_TMR0L1_SIZE                                  0x1
#define _TMR0L_TMR0L1_LENGTH                                0x1
#define _TMR0L_TMR0L1_MASK                                  0x2
#define _TMR0L_TMR0L2_POSN                                  0x2
#define _TMR0L_TMR0L2_POSITION                              0x2
#define _TMR0L_TMR0L2_SIZE                                  0x1
#define _TMR0L_TMR0L2_LENGTH                                0x1
#define _TMR0L_TMR0L2_MASK                                  0x4
#define _TMR0L_TMR0L3_POSN                                  0x3
#define _TMR0L_TMR0L3_POSITION                              0x3
#define _TMR0L_TMR0L3_SIZE                                  0x1
#define _TMR0L_TMR0L3_LENGTH                                0x1
#define _TMR0L_TMR0L3_MASK                                  0x8
#define _TMR0L_TMR0L4_POSN                                  0x4
#define _TMR0L_TMR0L4_POSITION                              0x4
#define _TMR0L_TMR0L4_SIZE                                  0x1
#define _TMR0L_TMR0L4_LENGTH                                0x1
#define _TMR0L_TMR0L4_MASK                                  0x10
#define _TMR0L_TMR0L5_POSN                                  0x5
#define _TMR0L_TMR0L5_POSITION                              0x5
#define _TMR0L_TMR0L5_SIZE                                  0x1
#define _TMR0L_TMR0L5_LENGTH                                0x1
#define _TMR0L_TMR0L5_MASK                                  0x20
#define _TMR0L_TMR0L6_POSN                                  0x6
#define _TMR0L_TMR0L6_POSITION                              0x6
#define _TMR0L_TMR0L6_SIZE                                  0x1
#define _TMR0L_TMR0L6_LENGTH                                0x1
#define _TMR0L_TMR0L6_MASK                                  0x40
#define _TMR0L_TMR0L7_POSN                                  0x7
#define _TMR0L_TMR0L7_POSITION                              0x7
#define _TMR0L_TMR0L7_SIZE                                  0x1
#define _TMR0L_TMR0L7_LENGTH                                0x1
#define _TMR0L_TMR0L7_MASK                                  0x80
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR0L                  :8;
    };
    struct {
        unsigned TMR0L0                 :1;
        unsigned TMR0L1                 :1;
        unsigned TMR0L2                 :1;
        unsigned TMR0L3                 :1;
        unsigned TMR0L4                 :1;
        unsigned TMR0L5                 :1;
        unsigned TMR0L6                 :1;
        unsigned TMR0L7                 :1;
    };
} TMR0bits_t;
extern volatile TMR0bits_t TMR0bits __at(0x103);
// bitfield macros
#define _TMR0_TMR0L_POSN                                    0x0
#define _TMR0_TMR0L_POSITION                                0x0
#define _TMR0_TMR0L_SIZE                                    0x8
#define _TMR0_TMR0L_LENGTH                                  0x8
#define _TMR0_TMR0L_MASK                                    0xFF
#define _TMR0_TMR0L0_POSN                                   0x0
#define _TMR0_TMR0L0_POSITION                               0x0
#define _TMR0_TMR0L0_SIZE                                   0x1
#define _TMR0_TMR0L0_LENGTH                                 0x1
#define _TMR0_TMR0L0_MASK                                   0x1
#define _TMR0_TMR0L1_POSN                                   0x1
#define _TMR0_TMR0L1_POSITION                               0x1
#define _TMR0_TMR0L1_SIZE                                   0x1
#define _TMR0_TMR0L1_LENGTH                                 0x1
#define _TMR0_TMR0L1_MASK                                   0x2
#define _TMR0_TMR0L2_POSN                                   0x2
#define _TMR0_TMR0L2_POSITION                               0x2
#define _TMR0_TMR0L2_SIZE                                   0x1
#define _TMR0_TMR0L2_LENGTH                                 0x1
#define _TMR0_TMR0L2_MASK                                   0x4
#define _TMR0_TMR0L3_POSN                                   0x3
#define _TMR0_TMR0L3_POSITION                               0x3
#define _TMR0_TMR0L3_SIZE                                   0x1
#define _TMR0_TMR0L3_LENGTH                                 0x1
#define _TMR0_TMR0L3_MASK                                   0x8
#define _TMR0_TMR0L4_POSN                                   0x4
#define _TMR0_TMR0L4_POSITION                               0x4
#define _TMR0_TMR0L4_SIZE                                   0x1
#define _TMR0_TMR0L4_LENGTH                                 0x1
#define _TMR0_TMR0L4_MASK                                   0x10
#define _TMR0_TMR0L5_POSN                                   0x5
#define _TMR0_TMR0L5_POSITION                               0x5
#define _TMR0_TMR0L5_SIZE                                   0x1
#define _TMR0_TMR0L5_LENGTH                                 0x1
#define _TMR0_TMR0L5_MASK                                   0x20
#define _TMR0_TMR0L6_POSN                                   0x6
#define _TMR0_TMR0L6_POSITION                               0x6
#define _TMR0_TMR0L6_SIZE                                   0x1
#define _TMR0_TMR0L6_LENGTH                                 0x1
#define _TMR0_TMR0L6_MASK                                   0x40
#define _TMR0_TMR0L7_POSN                                   0x7
#define _TMR0_TMR0L7_POSITION                               0x7
#define _TMR0_TMR0L7_SIZE                                   0x1
#define _TMR0_TMR0L7_LENGTH                                 0x1
#define _TMR0_TMR0L7_MASK                                   0x80

// Register: TMR0H
#define TMR0H TMR0H
extern volatile unsigned char           TMR0H               __at(0x104);
#ifndef _LIB_BUILD
asm("TMR0H equ 0104h");
#endif
// aliases
extern volatile unsigned char           PR0                 __at(0x104);
#ifndef _LIB_BUILD
asm("PR0 equ 0104h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR0H                  :8;
    };
    struct {
        unsigned TMR0H0                 :1;
        unsigned TMR0H1                 :1;
        unsigned TMR0H2                 :1;
        unsigned TMR0H3                 :1;
        unsigned TMR0H4                 :1;
        unsigned TMR0H5                 :1;
        unsigned TMR0H6                 :1;
        unsigned TMR0H7                 :1;
    };
    struct {
        unsigned T0PR0                  :1;
        unsigned T0PR1                  :1;
        unsigned T0PR2                  :1;
        unsigned T0PR3                  :1;
        unsigned T0PR4                  :1;
        unsigned T0PR5                  :1;
        unsigned T0PR6                  :1;
        unsigned T0PR7                  :1;
    };
    struct {
        unsigned T0PR                   :8;
    };
} TMR0Hbits_t;
extern volatile TMR0Hbits_t TMR0Hbits __at(0x104);
// bitfield macros
#define _TMR0H_TMR0H_POSN                                   0x0
#define _TMR0H_TMR0H_POSITION                               0x0
#define _TMR0H_TMR0H_SIZE                                   0x8
#define _TMR0H_TMR0H_LENGTH                                 0x8
#define _TMR0H_TMR0H_MASK                                   0xFF
#define _TMR0H_TMR0H0_POSN                                  0x0
#define _TMR0H_TMR0H0_POSITION                              0x0
#define _TMR0H_TMR0H0_SIZE                                  0x1
#define _TMR0H_TMR0H0_LENGTH                                0x1
#define _TMR0H_TMR0H0_MASK                                  0x1
#define _TMR0H_TMR0H1_POSN                                  0x1
#define _TMR0H_TMR0H1_POSITION                              0x1
#define _TMR0H_TMR0H1_SIZE                                  0x1
#define _TMR0H_TMR0H1_LENGTH                                0x1
#define _TMR0H_TMR0H1_MASK                                  0x2
#define _TMR0H_TMR0H2_POSN                                  0x2
#define _TMR0H_TMR0H2_POSITION                              0x2
#define _TMR0H_TMR0H2_SIZE                                  0x1
#define _TMR0H_TMR0H2_LENGTH                                0x1
#define _TMR0H_TMR0H2_MASK                                  0x4
#define _TMR0H_TMR0H3_POSN                                  0x3
#define _TMR0H_TMR0H3_POSITION                              0x3
#define _TMR0H_TMR0H3_SIZE                                  0x1
#define _TMR0H_TMR0H3_LENGTH                                0x1
#define _TMR0H_TMR0H3_MASK                                  0x8
#define _TMR0H_TMR0H4_POSN                                  0x4
#define _TMR0H_TMR0H4_POSITION                              0x4
#define _TMR0H_TMR0H4_SIZE                                  0x1
#define _TMR0H_TMR0H4_LENGTH                                0x1
#define _TMR0H_TMR0H4_MASK                                  0x10
#define _TMR0H_TMR0H5_POSN                                  0x5
#define _TMR0H_TMR0H5_POSITION                              0x5
#define _TMR0H_TMR0H5_SIZE                                  0x1
#define _TMR0H_TMR0H5_LENGTH                                0x1
#define _TMR0H_TMR0H5_MASK                                  0x20
#define _TMR0H_TMR0H6_POSN                                  0x6
#define _TMR0H_TMR0H6_POSITION                              0x6
#define _TMR0H_TMR0H6_SIZE                                  0x1
#define _TMR0H_TMR0H6_LENGTH                                0x1
#define _TMR0H_TMR0H6_MASK                                  0x40
#define _TMR0H_TMR0H7_POSN                                  0x7
#define _TMR0H_TMR0H7_POSITION                              0x7
#define _TMR0H_TMR0H7_SIZE                                  0x1
#define _TMR0H_TMR0H7_LENGTH                                0x1
#define _TMR0H_TMR0H7_MASK                                  0x80
#define _TMR0H_T0PR0_POSN                                   0x0
#define _TMR0H_T0PR0_POSITION                               0x0
#define _TMR0H_T0PR0_SIZE                                   0x1
#define _TMR0H_T0PR0_LENGTH                                 0x1
#define _TMR0H_T0PR0_MASK                                   0x1
#define _TMR0H_T0PR1_POSN                                   0x1
#define _TMR0H_T0PR1_POSITION                               0x1
#define _TMR0H_T0PR1_SIZE                                   0x1
#define _TMR0H_T0PR1_LENGTH                                 0x1
#define _TMR0H_T0PR1_MASK                                   0x2
#define _TMR0H_T0PR2_POSN                                   0x2
#define _TMR0H_T0PR2_POSITION                               0x2
#define _TMR0H_T0PR2_SIZE                                   0x1
#define _TMR0H_T0PR2_LENGTH                                 0x1
#define _TMR0H_T0PR2_MASK                                   0x4
#define _TMR0H_T0PR3_POSN                                   0x3
#define _TMR0H_T0PR3_POSITION                               0x3
#define _TMR0H_T0PR3_SIZE                                   0x1
#define _TMR0H_T0PR3_LENGTH                                 0x1
#define _TMR0H_T0PR3_MASK                                   0x8
#define _TMR0H_T0PR4_POSN                                   0x4
#define _TMR0H_T0PR4_POSITION                               0x4
#define _TMR0H_T0PR4_SIZE                                   0x1
#define _TMR0H_T0PR4_LENGTH                                 0x1
#define _TMR0H_T0PR4_MASK                                   0x10
#define _TMR0H_T0PR5_POSN                                   0x5
#define _TMR0H_T0PR5_POSITION                               0x5
#define _TMR0H_T0PR5_SIZE                                   0x1
#define _TMR0H_T0PR5_LENGTH                                 0x1
#define _TMR0H_T0PR5_MASK                                   0x20
#define _TMR0H_T0PR6_POSN                                   0x6
#define _TMR0H_T0PR6_POSITION                               0x6
#define _TMR0H_T0PR6_SIZE                                   0x1
#define _TMR0H_T0PR6_LENGTH                                 0x1
#define _TMR0H_T0PR6_MASK                                   0x40
#define _TMR0H_T0PR7_POSN                                   0x7
#define _TMR0H_T0PR7_POSITION                               0x7
#define _TMR0H_T0PR7_SIZE                                   0x1
#define _TMR0H_T0PR7_LENGTH                                 0x1
#define _TMR0H_T0PR7_MASK                                   0x80
#define _TMR0H_T0PR_POSN                                    0x0
#define _TMR0H_T0PR_POSITION                                0x0
#define _TMR0H_T0PR_SIZE                                    0x8
#define _TMR0H_T0PR_LENGTH                                  0x8
#define _TMR0H_T0PR_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR0H                  :8;
    };
    struct {
        unsigned TMR0H0                 :1;
        unsigned TMR0H1                 :1;
        unsigned TMR0H2                 :1;
        unsigned TMR0H3                 :1;
        unsigned TMR0H4                 :1;
        unsigned TMR0H5                 :1;
        unsigned TMR0H6                 :1;
        unsigned TMR0H7                 :1;
    };
    struct {
        unsigned T0PR0                  :1;
        unsigned T0PR1                  :1;
        unsigned T0PR2                  :1;
        unsigned T0PR3                  :1;
        unsigned T0PR4                  :1;
        unsigned T0PR5                  :1;
        unsigned T0PR6                  :1;
        unsigned T0PR7                  :1;
    };
    struct {
        unsigned T0PR                   :8;
    };
} PR0bits_t;
extern volatile PR0bits_t PR0bits __at(0x104);
// bitfield macros
#define _PR0_TMR0H_POSN                                     0x0
#define _PR0_TMR0H_POSITION                                 0x0
#define _PR0_TMR0H_SIZE                                     0x8
#define _PR0_TMR0H_LENGTH                                   0x8
#define _PR0_TMR0H_MASK                                     0xFF
#define _PR0_TMR0H0_POSN                                    0x0
#define _PR0_TMR0H0_POSITION                                0x0
#define _PR0_TMR0H0_SIZE                                    0x1
#define _PR0_TMR0H0_LENGTH                                  0x1
#define _PR0_TMR0H0_MASK                                    0x1
#define _PR0_TMR0H1_POSN                                    0x1
#define _PR0_TMR0H1_POSITION                                0x1
#define _PR0_TMR0H1_SIZE                                    0x1
#define _PR0_TMR0H1_LENGTH                                  0x1
#define _PR0_TMR0H1_MASK                                    0x2
#define _PR0_TMR0H2_POSN                                    0x2
#define _PR0_TMR0H2_POSITION                                0x2
#define _PR0_TMR0H2_SIZE                                    0x1
#define _PR0_TMR0H2_LENGTH                                  0x1
#define _PR0_TMR0H2_MASK                                    0x4
#define _PR0_TMR0H3_POSN                                    0x3
#define _PR0_TMR0H3_POSITION                                0x3
#define _PR0_TMR0H3_SIZE                                    0x1
#define _PR0_TMR0H3_LENGTH                                  0x1
#define _PR0_TMR0H3_MASK                                    0x8
#define _PR0_TMR0H4_POSN                                    0x4
#define _PR0_TMR0H4_POSITION                                0x4
#define _PR0_TMR0H4_SIZE                                    0x1
#define _PR0_TMR0H4_LENGTH                                  0x1
#define _PR0_TMR0H4_MASK                                    0x10
#define _PR0_TMR0H5_POSN                                    0x5
#define _PR0_TMR0H5_POSITION                                0x5
#define _PR0_TMR0H5_SIZE                                    0x1
#define _PR0_TMR0H5_LENGTH                                  0x1
#define _PR0_TMR0H5_MASK                                    0x20
#define _PR0_TMR0H6_POSN                                    0x6
#define _PR0_TMR0H6_POSITION                                0x6
#define _PR0_TMR0H6_SIZE                                    0x1
#define _PR0_TMR0H6_LENGTH                                  0x1
#define _PR0_TMR0H6_MASK                                    0x40
#define _PR0_TMR0H7_POSN                                    0x7
#define _PR0_TMR0H7_POSITION                                0x7
#define _PR0_TMR0H7_SIZE                                    0x1
#define _PR0_TMR0H7_LENGTH                                  0x1
#define _PR0_TMR0H7_MASK                                    0x80
#define _PR0_T0PR0_POSN                                     0x0
#define _PR0_T0PR0_POSITION                                 0x0
#define _PR0_T0PR0_SIZE                                     0x1
#define _PR0_T0PR0_LENGTH                                   0x1
#define _PR0_T0PR0_MASK                                     0x1
#define _PR0_T0PR1_POSN                                     0x1
#define _PR0_T0PR1_POSITION                                 0x1
#define _PR0_T0PR1_SIZE                                     0x1
#define _PR0_T0PR1_LENGTH                                   0x1
#define _PR0_T0PR1_MASK                                     0x2
#define _PR0_T0PR2_POSN                                     0x2
#define _PR0_T0PR2_POSITION                                 0x2
#define _PR0_T0PR2_SIZE                                     0x1
#define _PR0_T0PR2_LENGTH                                   0x1
#define _PR0_T0PR2_MASK                                     0x4
#define _PR0_T0PR3_POSN                                     0x3
#define _PR0_T0PR3_POSITION                                 0x3
#define _PR0_T0PR3_SIZE                                     0x1
#define _PR0_T0PR3_LENGTH                                   0x1
#define _PR0_T0PR3_MASK                                     0x8
#define _PR0_T0PR4_POSN                                     0x4
#define _PR0_T0PR4_POSITION                                 0x4
#define _PR0_T0PR4_SIZE                                     0x1
#define _PR0_T0PR4_LENGTH                                   0x1
#define _PR0_T0PR4_MASK                                     0x10
#define _PR0_T0PR5_POSN                                     0x5
#define _PR0_T0PR5_POSITION                                 0x5
#define _PR0_T0PR5_SIZE                                     0x1
#define _PR0_T0PR5_LENGTH                                   0x1
#define _PR0_T0PR5_MASK                                     0x20
#define _PR0_T0PR6_POSN                                     0x6
#define _PR0_T0PR6_POSITION                                 0x6
#define _PR0_T0PR6_SIZE                                     0x1
#define _PR0_T0PR6_LENGTH                                   0x1
#define _PR0_T0PR6_MASK                                     0x40
#define _PR0_T0PR7_POSN                                     0x7
#define _PR0_T0PR7_POSITION                                 0x7
#define _PR0_T0PR7_SIZE                                     0x1
#define _PR0_T0PR7_LENGTH                                   0x1
#define _PR0_T0PR7_MASK                                     0x80
#define _PR0_T0PR_POSN                                      0x0
#define _PR0_T0PR_POSITION                                  0x0
#define _PR0_T0PR_SIZE                                      0x8
#define _PR0_T0PR_LENGTH                                    0x8
#define _PR0_T0PR_MASK                                      0xFF

// Register: T0CON0
#define T0CON0 T0CON0
extern volatile unsigned char           T0CON0              __at(0x105);
#ifndef _LIB_BUILD
asm("T0CON0 equ 0105h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned MD16                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned T0OUTPS                :4;
        unsigned T0MD16                 :1;
        unsigned T0OUT                  :1;
        unsigned                        :1;
        unsigned T0EN                   :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned T016BIT                :1;
    };
    struct {
        unsigned T0OUTPS0               :1;
        unsigned T0OUTPS1               :1;
        unsigned T0OUTPS2               :1;
        unsigned T0OUTPS3               :1;
    };
} T0CON0bits_t;
extern volatile T0CON0bits_t T0CON0bits __at(0x105);
// bitfield macros
#define _T0CON0_OUTPS_POSN                                  0x0
#define _T0CON0_OUTPS_POSITION                              0x0
#define _T0CON0_OUTPS_SIZE                                  0x4
#define _T0CON0_OUTPS_LENGTH                                0x4
#define _T0CON0_OUTPS_MASK                                  0xF
#define _T0CON0_MD16_POSN                                   0x4
#define _T0CON0_MD16_POSITION                               0x4
#define _T0CON0_MD16_SIZE                                   0x1
#define _T0CON0_MD16_LENGTH                                 0x1
#define _T0CON0_MD16_MASK                                   0x10
#define _T0CON0_OUT_POSN                                    0x5
#define _T0CON0_OUT_POSITION                                0x5
#define _T0CON0_OUT_SIZE                                    0x1
#define _T0CON0_OUT_LENGTH                                  0x1
#define _T0CON0_OUT_MASK                                    0x20
#define _T0CON0_EN_POSN                                     0x7
#define _T0CON0_EN_POSITION                                 0x7
#define _T0CON0_EN_SIZE                                     0x1
#define _T0CON0_EN_LENGTH                                   0x1
#define _T0CON0_EN_MASK                                     0x80
#define _T0CON0_T0OUTPS_POSN                                0x0
#define _T0CON0_T0OUTPS_POSITION                            0x0
#define _T0CON0_T0OUTPS_SIZE                                0x4
#define _T0CON0_T0OUTPS_LENGTH                              0x4
#define _T0CON0_T0OUTPS_MASK                                0xF
#define _T0CON0_T0MD16_POSN                                 0x4
#define _T0CON0_T0MD16_POSITION                             0x4
#define _T0CON0_T0MD16_SIZE                                 0x1
#define _T0CON0_T0MD16_LENGTH                               0x1
#define _T0CON0_T0MD16_MASK                                 0x10
#define _T0CON0_T0OUT_POSN                                  0x5
#define _T0CON0_T0OUT_POSITION                              0x5
#define _T0CON0_T0OUT_SIZE                                  0x1
#define _T0CON0_T0OUT_LENGTH                                0x1
#define _T0CON0_T0OUT_MASK                                  0x20
#define _T0CON0_T0EN_POSN                                   0x7
#define _T0CON0_T0EN_POSITION                               0x7
#define _T0CON0_T0EN_SIZE                                   0x1
#define _T0CON0_T0EN_LENGTH                                 0x1
#define _T0CON0_T0EN_MASK                                   0x80
#define _T0CON0_OUTPS0_POSN                                 0x0
#define _T0CON0_OUTPS0_POSITION                             0x0
#define _T0CON0_OUTPS0_SIZE                                 0x1
#define _T0CON0_OUTPS0_LENGTH                               0x1
#define _T0CON0_OUTPS0_MASK                                 0x1
#define _T0CON0_OUTPS1_POSN                                 0x1
#define _T0CON0_OUTPS1_POSITION                             0x1
#define _T0CON0_OUTPS1_SIZE                                 0x1
#define _T0CON0_OUTPS1_LENGTH                               0x1
#define _T0CON0_OUTPS1_MASK                                 0x2
#define _T0CON0_OUTPS2_POSN                                 0x2
#define _T0CON0_OUTPS2_POSITION                             0x2
#define _T0CON0_OUTPS2_SIZE                                 0x1
#define _T0CON0_OUTPS2_LENGTH                               0x1
#define _T0CON0_OUTPS2_MASK                                 0x4
#define _T0CON0_OUTPS3_POSN                                 0x3
#define _T0CON0_OUTPS3_POSITION                             0x3
#define _T0CON0_OUTPS3_SIZE                                 0x1
#define _T0CON0_OUTPS3_LENGTH                               0x1
#define _T0CON0_OUTPS3_MASK                                 0x8
#define _T0CON0_T016BIT_POSN                                0x4
#define _T0CON0_T016BIT_POSITION                            0x4
#define _T0CON0_T016BIT_SIZE                                0x1
#define _T0CON0_T016BIT_LENGTH                              0x1
#define _T0CON0_T016BIT_MASK                                0x10
#define _T0CON0_T0OUTPS0_POSN                               0x0
#define _T0CON0_T0OUTPS0_POSITION                           0x0
#define _T0CON0_T0OUTPS0_SIZE                               0x1
#define _T0CON0_T0OUTPS0_LENGTH                             0x1
#define _T0CON0_T0OUTPS0_MASK                               0x1
#define _T0CON0_T0OUTPS1_POSN                               0x1
#define _T0CON0_T0OUTPS1_POSITION                           0x1
#define _T0CON0_T0OUTPS1_SIZE                               0x1
#define _T0CON0_T0OUTPS1_LENGTH                             0x1
#define _T0CON0_T0OUTPS1_MASK                               0x2
#define _T0CON0_T0OUTPS2_POSN                               0x2
#define _T0CON0_T0OUTPS2_POSITION                           0x2
#define _T0CON0_T0OUTPS2_SIZE                               0x1
#define _T0CON0_T0OUTPS2_LENGTH                             0x1
#define _T0CON0_T0OUTPS2_MASK                               0x4
#define _T0CON0_T0OUTPS3_POSN                               0x3
#define _T0CON0_T0OUTPS3_POSITION                           0x3
#define _T0CON0_T0OUTPS3_SIZE                               0x1
#define _T0CON0_T0OUTPS3_LENGTH                             0x1
#define _T0CON0_T0OUTPS3_MASK                               0x8

// Register: T0CON1
#define T0CON1 T0CON1
extern volatile unsigned char           T0CON1              __at(0x106);
#ifndef _LIB_BUILD
asm("T0CON1 equ 0106h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CKPS                   :4;
        unsigned ASYNC                  :1;
        unsigned CS                     :3;
    };
    struct {
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned CKPS3                  :1;
        unsigned T0ASYNC                :1;
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
    };
    struct {
        unsigned T0CKPS                 :4;
        unsigned                        :1;
        unsigned T0CS                   :3;
    };
    struct {
        unsigned T0CKPS0                :1;
        unsigned T0CKPS1                :1;
        unsigned T0CKPS2                :1;
        unsigned T0CKPS3                :1;
        unsigned                        :1;
        unsigned T0CS0                  :1;
        unsigned T0CS1                  :1;
        unsigned T0CS2                  :1;
    };
} T0CON1bits_t;
extern volatile T0CON1bits_t T0CON1bits __at(0x106);
// bitfield macros
#define _T0CON1_CKPS_POSN                                   0x0
#define _T0CON1_CKPS_POSITION                               0x0
#define _T0CON1_CKPS_SIZE                                   0x4
#define _T0CON1_CKPS_LENGTH                                 0x4
#define _T0CON1_CKPS_MASK                                   0xF
#define _T0CON1_ASYNC_POSN                                  0x4
#define _T0CON1_ASYNC_POSITION                              0x4
#define _T0CON1_ASYNC_SIZE                                  0x1
#define _T0CON1_ASYNC_LENGTH                                0x1
#define _T0CON1_ASYNC_MASK                                  0x10
#define _T0CON1_CS_POSN                                     0x5
#define _T0CON1_CS_POSITION                                 0x5
#define _T0CON1_CS_SIZE                                     0x3
#define _T0CON1_CS_LENGTH                                   0x3
#define _T0CON1_CS_MASK                                     0xE0
#define _T0CON1_CKPS0_POSN                                  0x0
#define _T0CON1_CKPS0_POSITION                              0x0
#define _T0CON1_CKPS0_SIZE                                  0x1
#define _T0CON1_CKPS0_LENGTH                                0x1
#define _T0CON1_CKPS0_MASK                                  0x1
#define _T0CON1_CKPS1_POSN                                  0x1
#define _T0CON1_CKPS1_POSITION                              0x1
#define _T0CON1_CKPS1_SIZE                                  0x1
#define _T0CON1_CKPS1_LENGTH                                0x1
#define _T0CON1_CKPS1_MASK                                  0x2
#define _T0CON1_CKPS2_POSN                                  0x2
#define _T0CON1_CKPS2_POSITION                              0x2
#define _T0CON1_CKPS2_SIZE                                  0x1
#define _T0CON1_CKPS2_LENGTH                                0x1
#define _T0CON1_CKPS2_MASK                                  0x4
#define _T0CON1_CKPS3_POSN                                  0x3
#define _T0CON1_CKPS3_POSITION                              0x3
#define _T0CON1_CKPS3_SIZE                                  0x1
#define _T0CON1_CKPS3_LENGTH                                0x1
#define _T0CON1_CKPS3_MASK                                  0x8
#define _T0CON1_T0ASYNC_POSN                                0x4
#define _T0CON1_T0ASYNC_POSITION                            0x4
#define _T0CON1_T0ASYNC_SIZE                                0x1
#define _T0CON1_T0ASYNC_LENGTH                              0x1
#define _T0CON1_T0ASYNC_MASK                                0x10
#define _T0CON1_CS0_POSN                                    0x5
#define _T0CON1_CS0_POSITION                                0x5
#define _T0CON1_CS0_SIZE                                    0x1
#define _T0CON1_CS0_LENGTH                                  0x1
#define _T0CON1_CS0_MASK                                    0x20
#define _T0CON1_CS1_POSN                                    0x6
#define _T0CON1_CS1_POSITION                                0x6
#define _T0CON1_CS1_SIZE                                    0x1
#define _T0CON1_CS1_LENGTH                                  0x1
#define _T0CON1_CS1_MASK                                    0x40
#define _T0CON1_CS2_POSN                                    0x7
#define _T0CON1_CS2_POSITION                                0x7
#define _T0CON1_CS2_SIZE                                    0x1
#define _T0CON1_CS2_LENGTH                                  0x1
#define _T0CON1_CS2_MASK                                    0x80
#define _T0CON1_T0CKPS_POSN                                 0x0
#define _T0CON1_T0CKPS_POSITION                             0x0
#define _T0CON1_T0CKPS_SIZE                                 0x4
#define _T0CON1_T0CKPS_LENGTH                               0x4
#define _T0CON1_T0CKPS_MASK                                 0xF
#define _T0CON1_T0CS_POSN                                   0x5
#define _T0CON1_T0CS_POSITION                               0x5
#define _T0CON1_T0CS_SIZE                                   0x3
#define _T0CON1_T0CS_LENGTH                                 0x3
#define _T0CON1_T0CS_MASK                                   0xE0
#define _T0CON1_T0CKPS0_POSN                                0x0
#define _T0CON1_T0CKPS0_POSITION                            0x0
#define _T0CON1_T0CKPS0_SIZE                                0x1
#define _T0CON1_T0CKPS0_LENGTH                              0x1
#define _T0CON1_T0CKPS0_MASK                                0x1
#define _T0CON1_T0CKPS1_POSN                                0x1
#define _T0CON1_T0CKPS1_POSITION                            0x1
#define _T0CON1_T0CKPS1_SIZE                                0x1
#define _T0CON1_T0CKPS1_LENGTH                              0x1
#define _T0CON1_T0CKPS1_MASK                                0x2
#define _T0CON1_T0CKPS2_POSN                                0x2
#define _T0CON1_T0CKPS2_POSITION                            0x2
#define _T0CON1_T0CKPS2_SIZE                                0x1
#define _T0CON1_T0CKPS2_LENGTH                              0x1
#define _T0CON1_T0CKPS2_MASK                                0x4
#define _T0CON1_T0CKPS3_POSN                                0x3
#define _T0CON1_T0CKPS3_POSITION                            0x3
#define _T0CON1_T0CKPS3_SIZE                                0x1
#define _T0CON1_T0CKPS3_LENGTH                              0x1
#define _T0CON1_T0CKPS3_MASK                                0x8
#define _T0CON1_T0CS0_POSN                                  0x5
#define _T0CON1_T0CS0_POSITION                              0x5
#define _T0CON1_T0CS0_SIZE                                  0x1
#define _T0CON1_T0CS0_LENGTH                                0x1
#define _T0CON1_T0CS0_MASK                                  0x20
#define _T0CON1_T0CS1_POSN                                  0x6
#define _T0CON1_T0CS1_POSITION                              0x6
#define _T0CON1_T0CS1_SIZE                                  0x1
#define _T0CON1_T0CS1_LENGTH                                0x1
#define _T0CON1_T0CS1_MASK                                  0x40
#define _T0CON1_T0CS2_POSN                                  0x7
#define _T0CON1_T0CS2_POSITION                              0x7
#define _T0CON1_T0CS2_SIZE                                  0x1
#define _T0CON1_T0CS2_LENGTH                                0x1
#define _T0CON1_T0CS2_MASK                                  0x80

// Register: TMR1
#define TMR1 TMR1
extern volatile unsigned short          TMR1                __at(0x107);
#ifndef _LIB_BUILD
asm("TMR1 equ 0107h");
#endif

// Register: TMR1L
#define TMR1L TMR1L
extern volatile unsigned char           TMR1L               __at(0x107);
#ifndef _LIB_BUILD
asm("TMR1L equ 0107h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1L                  :8;
    };
    struct {
        unsigned TMR1L0                 :1;
        unsigned TMR1L1                 :1;
        unsigned TMR1L2                 :1;
        unsigned TMR1L3                 :1;
        unsigned TMR1L4                 :1;
        unsigned TMR1L5                 :1;
        unsigned TMR1L6                 :1;
        unsigned TMR1L7                 :1;
    };
    struct {
        unsigned TMR10                  :1;
        unsigned TMR11                  :1;
        unsigned TMR12                  :1;
        unsigned TMR13                  :1;
        unsigned TMR14                  :1;
        unsigned TMR15                  :1;
        unsigned TMR16                  :1;
        unsigned TMR17                  :1;
    };
} TMR1Lbits_t;
extern volatile TMR1Lbits_t TMR1Lbits __at(0x107);
// bitfield macros
#define _TMR1L_TMR1L_POSN                                   0x0
#define _TMR1L_TMR1L_POSITION                               0x0
#define _TMR1L_TMR1L_SIZE                                   0x8
#define _TMR1L_TMR1L_LENGTH                                 0x8
#define _TMR1L_TMR1L_MASK                                   0xFF
#define _TMR1L_TMR1L0_POSN                                  0x0
#define _TMR1L_TMR1L0_POSITION                              0x0
#define _TMR1L_TMR1L0_SIZE                                  0x1
#define _TMR1L_TMR1L0_LENGTH                                0x1
#define _TMR1L_TMR1L0_MASK                                  0x1
#define _TMR1L_TMR1L1_POSN                                  0x1
#define _TMR1L_TMR1L1_POSITION                              0x1
#define _TMR1L_TMR1L1_SIZE                                  0x1
#define _TMR1L_TMR1L1_LENGTH                                0x1
#define _TMR1L_TMR1L1_MASK                                  0x2
#define _TMR1L_TMR1L2_POSN                                  0x2
#define _TMR1L_TMR1L2_POSITION                              0x2
#define _TMR1L_TMR1L2_SIZE                                  0x1
#define _TMR1L_TMR1L2_LENGTH                                0x1
#define _TMR1L_TMR1L2_MASK                                  0x4
#define _TMR1L_TMR1L3_POSN                                  0x3
#define _TMR1L_TMR1L3_POSITION                              0x3
#define _TMR1L_TMR1L3_SIZE                                  0x1
#define _TMR1L_TMR1L3_LENGTH                                0x1
#define _TMR1L_TMR1L3_MASK                                  0x8
#define _TMR1L_TMR1L4_POSN                                  0x4
#define _TMR1L_TMR1L4_POSITION                              0x4
#define _TMR1L_TMR1L4_SIZE                                  0x1
#define _TMR1L_TMR1L4_LENGTH                                0x1
#define _TMR1L_TMR1L4_MASK                                  0x10
#define _TMR1L_TMR1L5_POSN                                  0x5
#define _TMR1L_TMR1L5_POSITION                              0x5
#define _TMR1L_TMR1L5_SIZE                                  0x1
#define _TMR1L_TMR1L5_LENGTH                                0x1
#define _TMR1L_TMR1L5_MASK                                  0x20
#define _TMR1L_TMR1L6_POSN                                  0x6
#define _TMR1L_TMR1L6_POSITION                              0x6
#define _TMR1L_TMR1L6_SIZE                                  0x1
#define _TMR1L_TMR1L6_LENGTH                                0x1
#define _TMR1L_TMR1L6_MASK                                  0x40
#define _TMR1L_TMR1L7_POSN                                  0x7
#define _TMR1L_TMR1L7_POSITION                              0x7
#define _TMR1L_TMR1L7_SIZE                                  0x1
#define _TMR1L_TMR1L7_LENGTH                                0x1
#define _TMR1L_TMR1L7_MASK                                  0x80
#define _TMR1L_TMR10_POSN                                   0x0
#define _TMR1L_TMR10_POSITION                               0x0
#define _TMR1L_TMR10_SIZE                                   0x1
#define _TMR1L_TMR10_LENGTH                                 0x1
#define _TMR1L_TMR10_MASK                                   0x1
#define _TMR1L_TMR11_POSN                                   0x1
#define _TMR1L_TMR11_POSITION                               0x1
#define _TMR1L_TMR11_SIZE                                   0x1
#define _TMR1L_TMR11_LENGTH                                 0x1
#define _TMR1L_TMR11_MASK                                   0x2
#define _TMR1L_TMR12_POSN                                   0x2
#define _TMR1L_TMR12_POSITION                               0x2
#define _TMR1L_TMR12_SIZE                                   0x1
#define _TMR1L_TMR12_LENGTH                                 0x1
#define _TMR1L_TMR12_MASK                                   0x4
#define _TMR1L_TMR13_POSN                                   0x3
#define _TMR1L_TMR13_POSITION                               0x3
#define _TMR1L_TMR13_SIZE                                   0x1
#define _TMR1L_TMR13_LENGTH                                 0x1
#define _TMR1L_TMR13_MASK                                   0x8
#define _TMR1L_TMR14_POSN                                   0x4
#define _TMR1L_TMR14_POSITION                               0x4
#define _TMR1L_TMR14_SIZE                                   0x1
#define _TMR1L_TMR14_LENGTH                                 0x1
#define _TMR1L_TMR14_MASK                                   0x10
#define _TMR1L_TMR15_POSN                                   0x5
#define _TMR1L_TMR15_POSITION                               0x5
#define _TMR1L_TMR15_SIZE                                   0x1
#define _TMR1L_TMR15_LENGTH                                 0x1
#define _TMR1L_TMR15_MASK                                   0x20
#define _TMR1L_TMR16_POSN                                   0x6
#define _TMR1L_TMR16_POSITION                               0x6
#define _TMR1L_TMR16_SIZE                                   0x1
#define _TMR1L_TMR16_LENGTH                                 0x1
#define _TMR1L_TMR16_MASK                                   0x40
#define _TMR1L_TMR17_POSN                                   0x7
#define _TMR1L_TMR17_POSITION                               0x7
#define _TMR1L_TMR17_SIZE                                   0x1
#define _TMR1L_TMR17_LENGTH                                 0x1
#define _TMR1L_TMR17_MASK                                   0x80

// Register: TMR1H
#define TMR1H TMR1H
extern volatile unsigned char           TMR1H               __at(0x108);
#ifndef _LIB_BUILD
asm("TMR1H equ 0108h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR1H                  :8;
    };
    struct {
        unsigned TMR1H0                 :1;
        unsigned TMR1H1                 :1;
        unsigned TMR1H2                 :1;
        unsigned TMR1H3                 :1;
        unsigned TMR1H4                 :1;
        unsigned TMR1H5                 :1;
        unsigned TMR1H6                 :1;
        unsigned TMR1H7                 :1;
    };
    struct {
        unsigned TMR18                  :1;
        unsigned TMR19                  :1;
        unsigned TMR110                 :1;
        unsigned TMR111                 :1;
        unsigned TMR112                 :1;
        unsigned TMR113                 :1;
        unsigned TMR114                 :1;
        unsigned TMR115                 :1;
    };
} TMR1Hbits_t;
extern volatile TMR1Hbits_t TMR1Hbits __at(0x108);
// bitfield macros
#define _TMR1H_TMR1H_POSN                                   0x0
#define _TMR1H_TMR1H_POSITION                               0x0
#define _TMR1H_TMR1H_SIZE                                   0x8
#define _TMR1H_TMR1H_LENGTH                                 0x8
#define _TMR1H_TMR1H_MASK                                   0xFF
#define _TMR1H_TMR1H0_POSN                                  0x0
#define _TMR1H_TMR1H0_POSITION                              0x0
#define _TMR1H_TMR1H0_SIZE                                  0x1
#define _TMR1H_TMR1H0_LENGTH                                0x1
#define _TMR1H_TMR1H0_MASK                                  0x1
#define _TMR1H_TMR1H1_POSN                                  0x1
#define _TMR1H_TMR1H1_POSITION                              0x1
#define _TMR1H_TMR1H1_SIZE                                  0x1
#define _TMR1H_TMR1H1_LENGTH                                0x1
#define _TMR1H_TMR1H1_MASK                                  0x2
#define _TMR1H_TMR1H2_POSN                                  0x2
#define _TMR1H_TMR1H2_POSITION                              0x2
#define _TMR1H_TMR1H2_SIZE                                  0x1
#define _TMR1H_TMR1H2_LENGTH                                0x1
#define _TMR1H_TMR1H2_MASK                                  0x4
#define _TMR1H_TMR1H3_POSN                                  0x3
#define _TMR1H_TMR1H3_POSITION                              0x3
#define _TMR1H_TMR1H3_SIZE                                  0x1
#define _TMR1H_TMR1H3_LENGTH                                0x1
#define _TMR1H_TMR1H3_MASK                                  0x8
#define _TMR1H_TMR1H4_POSN                                  0x4
#define _TMR1H_TMR1H4_POSITION                              0x4
#define _TMR1H_TMR1H4_SIZE                                  0x1
#define _TMR1H_TMR1H4_LENGTH                                0x1
#define _TMR1H_TMR1H4_MASK                                  0x10
#define _TMR1H_TMR1H5_POSN                                  0x5
#define _TMR1H_TMR1H5_POSITION                              0x5
#define _TMR1H_TMR1H5_SIZE                                  0x1
#define _TMR1H_TMR1H5_LENGTH                                0x1
#define _TMR1H_TMR1H5_MASK                                  0x20
#define _TMR1H_TMR1H6_POSN                                  0x6
#define _TMR1H_TMR1H6_POSITION                              0x6
#define _TMR1H_TMR1H6_SIZE                                  0x1
#define _TMR1H_TMR1H6_LENGTH                                0x1
#define _TMR1H_TMR1H6_MASK                                  0x40
#define _TMR1H_TMR1H7_POSN                                  0x7
#define _TMR1H_TMR1H7_POSITION                              0x7
#define _TMR1H_TMR1H7_SIZE                                  0x1
#define _TMR1H_TMR1H7_LENGTH                                0x1
#define _TMR1H_TMR1H7_MASK                                  0x80
#define _TMR1H_TMR18_POSN                                   0x0
#define _TMR1H_TMR18_POSITION                               0x0
#define _TMR1H_TMR18_SIZE                                   0x1
#define _TMR1H_TMR18_LENGTH                                 0x1
#define _TMR1H_TMR18_MASK                                   0x1
#define _TMR1H_TMR19_POSN                                   0x1
#define _TMR1H_TMR19_POSITION                               0x1
#define _TMR1H_TMR19_SIZE                                   0x1
#define _TMR1H_TMR19_LENGTH                                 0x1
#define _TMR1H_TMR19_MASK                                   0x2
#define _TMR1H_TMR110_POSN                                  0x2
#define _TMR1H_TMR110_POSITION                              0x2
#define _TMR1H_TMR110_SIZE                                  0x1
#define _TMR1H_TMR110_LENGTH                                0x1
#define _TMR1H_TMR110_MASK                                  0x4
#define _TMR1H_TMR111_POSN                                  0x3
#define _TMR1H_TMR111_POSITION                              0x3
#define _TMR1H_TMR111_SIZE                                  0x1
#define _TMR1H_TMR111_LENGTH                                0x1
#define _TMR1H_TMR111_MASK                                  0x8
#define _TMR1H_TMR112_POSN                                  0x4
#define _TMR1H_TMR112_POSITION                              0x4
#define _TMR1H_TMR112_SIZE                                  0x1
#define _TMR1H_TMR112_LENGTH                                0x1
#define _TMR1H_TMR112_MASK                                  0x10
#define _TMR1H_TMR113_POSN                                  0x5
#define _TMR1H_TMR113_POSITION                              0x5
#define _TMR1H_TMR113_SIZE                                  0x1
#define _TMR1H_TMR113_LENGTH                                0x1
#define _TMR1H_TMR113_MASK                                  0x20
#define _TMR1H_TMR114_POSN                                  0x6
#define _TMR1H_TMR114_POSITION                              0x6
#define _TMR1H_TMR114_SIZE                                  0x1
#define _TMR1H_TMR114_LENGTH                                0x1
#define _TMR1H_TMR114_MASK                                  0x40
#define _TMR1H_TMR115_POSN                                  0x7
#define _TMR1H_TMR115_POSITION                              0x7
#define _TMR1H_TMR115_SIZE                                  0x1
#define _TMR1H_TMR115_LENGTH                                0x1
#define _TMR1H_TMR115_MASK                                  0x80

// Register: T1CON
#define T1CON T1CON
extern volatile unsigned char           T1CON               __at(0x109);
#ifndef _LIB_BUILD
asm("T1CON equ 0109h");
#endif
// aliases
extern volatile unsigned char           TMR1CON             __at(0x109);
#ifndef _LIB_BUILD
asm("TMR1CON equ 0109h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned NOT_SYNC               :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR1ON                 :1;
        unsigned T1RD16                 :1;
        unsigned NOT_T1SYNC             :1;
        unsigned                        :1;
        unsigned T1CKPS0                :1;
        unsigned T1CKPS1                :1;
    };
    struct {
        unsigned                        :2;
        unsigned nSYNC                  :1;
        unsigned                        :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD161                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned nT1SYNC                :1;
    };
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits __at(0x109);
// bitfield macros
#define _T1CON_ON_POSN                                      0x0
#define _T1CON_ON_POSITION                                  0x0
#define _T1CON_ON_SIZE                                      0x1
#define _T1CON_ON_LENGTH                                    0x1
#define _T1CON_ON_MASK                                      0x1
#define _T1CON_RD16_POSN                                    0x1
#define _T1CON_RD16_POSITION                                0x1
#define _T1CON_RD16_SIZE                                    0x1
#define _T1CON_RD16_LENGTH                                  0x1
#define _T1CON_RD16_MASK                                    0x2
#define _T1CON_NOT_SYNC_POSN                                0x2
#define _T1CON_NOT_SYNC_POSITION                            0x2
#define _T1CON_NOT_SYNC_SIZE                                0x1
#define _T1CON_NOT_SYNC_LENGTH                              0x1
#define _T1CON_NOT_SYNC_MASK                                0x4
#define _T1CON_CKPS_POSN                                    0x4
#define _T1CON_CKPS_POSITION                                0x4
#define _T1CON_CKPS_SIZE                                    0x2
#define _T1CON_CKPS_LENGTH                                  0x2
#define _T1CON_CKPS_MASK                                    0x30
#define _T1CON_TMR1ON_POSN                                  0x0
#define _T1CON_TMR1ON_POSITION                              0x0
#define _T1CON_TMR1ON_SIZE                                  0x1
#define _T1CON_TMR1ON_LENGTH                                0x1
#define _T1CON_TMR1ON_MASK                                  0x1
#define _T1CON_T1RD16_POSN                                  0x1
#define _T1CON_T1RD16_POSITION                              0x1
#define _T1CON_T1RD16_SIZE                                  0x1
#define _T1CON_T1RD16_LENGTH                                0x1
#define _T1CON_T1RD16_MASK                                  0x2
#define _T1CON_NOT_T1SYNC_POSN                              0x2
#define _T1CON_NOT_T1SYNC_POSITION                          0x2
#define _T1CON_NOT_T1SYNC_SIZE                              0x1
#define _T1CON_NOT_T1SYNC_LENGTH                            0x1
#define _T1CON_NOT_T1SYNC_MASK                              0x4
#define _T1CON_T1CKPS0_POSN                                 0x4
#define _T1CON_T1CKPS0_POSITION                             0x4
#define _T1CON_T1CKPS0_SIZE                                 0x1
#define _T1CON_T1CKPS0_LENGTH                               0x1
#define _T1CON_T1CKPS0_MASK                                 0x10
#define _T1CON_T1CKPS1_POSN                                 0x5
#define _T1CON_T1CKPS1_POSITION                             0x5
#define _T1CON_T1CKPS1_SIZE                                 0x1
#define _T1CON_T1CKPS1_LENGTH                               0x1
#define _T1CON_T1CKPS1_MASK                                 0x20
#define _T1CON_nSYNC_POSN                                   0x2
#define _T1CON_nSYNC_POSITION                               0x2
#define _T1CON_nSYNC_SIZE                                   0x1
#define _T1CON_nSYNC_LENGTH                                 0x1
#define _T1CON_nSYNC_MASK                                   0x4
#define _T1CON_CKPS0_POSN                                   0x4
#define _T1CON_CKPS0_POSITION                               0x4
#define _T1CON_CKPS0_SIZE                                   0x1
#define _T1CON_CKPS0_LENGTH                                 0x1
#define _T1CON_CKPS0_MASK                                   0x10
#define _T1CON_CKPS1_POSN                                   0x5
#define _T1CON_CKPS1_POSITION                               0x5
#define _T1CON_CKPS1_SIZE                                   0x1
#define _T1CON_CKPS1_LENGTH                                 0x1
#define _T1CON_CKPS1_MASK                                   0x20
#define _T1CON_RD161_POSN                                   0x1
#define _T1CON_RD161_POSITION                               0x1
#define _T1CON_RD161_SIZE                                   0x1
#define _T1CON_RD161_LENGTH                                 0x1
#define _T1CON_RD161_MASK                                   0x2
#define _T1CON_nT1SYNC_POSN                                 0x2
#define _T1CON_nT1SYNC_POSITION                             0x2
#define _T1CON_nT1SYNC_SIZE                                 0x1
#define _T1CON_nT1SYNC_LENGTH                               0x1
#define _T1CON_nT1SYNC_MASK                                 0x4
// alias bitfield definitions
typedef union {
    struct {
        unsigned ON                     :1;
        unsigned RD16                   :1;
        unsigned NOT_SYNC               :1;
        unsigned                        :1;
        unsigned CKPS                   :2;
    };
    struct {
        unsigned TMR1ON                 :1;
        unsigned T1RD16                 :1;
        unsigned NOT_T1SYNC             :1;
        unsigned                        :1;
        unsigned T1CKPS0                :1;
        unsigned T1CKPS1                :1;
    };
    struct {
        unsigned                        :2;
        unsigned nSYNC                  :1;
        unsigned                        :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
    };
    struct {
        unsigned                        :1;
        unsigned RD161                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned nT1SYNC                :1;
    };
} TMR1CONbits_t;
extern volatile TMR1CONbits_t TMR1CONbits __at(0x109);
// bitfield macros
#define _TMR1CON_ON_POSN                                    0x0
#define _TMR1CON_ON_POSITION                                0x0
#define _TMR1CON_ON_SIZE                                    0x1
#define _TMR1CON_ON_LENGTH                                  0x1
#define _TMR1CON_ON_MASK                                    0x1
#define _TMR1CON_RD16_POSN                                  0x1
#define _TMR1CON_RD16_POSITION                              0x1
#define _TMR1CON_RD16_SIZE                                  0x1
#define _TMR1CON_RD16_LENGTH                                0x1
#define _TMR1CON_RD16_MASK                                  0x2
#define _TMR1CON_NOT_SYNC_POSN                              0x2
#define _TMR1CON_NOT_SYNC_POSITION                          0x2
#define _TMR1CON_NOT_SYNC_SIZE                              0x1
#define _TMR1CON_NOT_SYNC_LENGTH                            0x1
#define _TMR1CON_NOT_SYNC_MASK                              0x4
#define _TMR1CON_CKPS_POSN                                  0x4
#define _TMR1CON_CKPS_POSITION                              0x4
#define _TMR1CON_CKPS_SIZE                                  0x2
#define _TMR1CON_CKPS_LENGTH                                0x2
#define _TMR1CON_CKPS_MASK                                  0x30
#define _TMR1CON_TMR1ON_POSN                                0x0
#define _TMR1CON_TMR1ON_POSITION                            0x0
#define _TMR1CON_TMR1ON_SIZE                                0x1
#define _TMR1CON_TMR1ON_LENGTH                              0x1
#define _TMR1CON_TMR1ON_MASK                                0x1
#define _TMR1CON_T1RD16_POSN                                0x1
#define _TMR1CON_T1RD16_POSITION                            0x1
#define _TMR1CON_T1RD16_SIZE                                0x1
#define _TMR1CON_T1RD16_LENGTH                              0x1
#define _TMR1CON_T1RD16_MASK                                0x2
#define _TMR1CON_NOT_T1SYNC_POSN                            0x2
#define _TMR1CON_NOT_T1SYNC_POSITION                        0x2
#define _TMR1CON_NOT_T1SYNC_SIZE                            0x1
#define _TMR1CON_NOT_T1SYNC_LENGTH                          0x1
#define _TMR1CON_NOT_T1SYNC_MASK                            0x4
#define _TMR1CON_T1CKPS0_POSN                               0x4
#define _TMR1CON_T1CKPS0_POSITION                           0x4
#define _TMR1CON_T1CKPS0_SIZE                               0x1
#define _TMR1CON_T1CKPS0_LENGTH                             0x1
#define _TMR1CON_T1CKPS0_MASK                               0x10
#define _TMR1CON_T1CKPS1_POSN                               0x5
#define _TMR1CON_T1CKPS1_POSITION                           0x5
#define _TMR1CON_T1CKPS1_SIZE                               0x1
#define _TMR1CON_T1CKPS1_LENGTH                             0x1
#define _TMR1CON_T1CKPS1_MASK                               0x20
#define _TMR1CON_nSYNC_POSN                                 0x2
#define _TMR1CON_nSYNC_POSITION                             0x2
#define _TMR1CON_nSYNC_SIZE                                 0x1
#define _TMR1CON_nSYNC_LENGTH                               0x1
#define _TMR1CON_nSYNC_MASK                                 0x4
#define _TMR1CON_CKPS0_POSN                                 0x4
#define _TMR1CON_CKPS0_POSITION                             0x4
#define _TMR1CON_CKPS0_SIZE                                 0x1
#define _TMR1CON_CKPS0_LENGTH                               0x1
#define _TMR1CON_CKPS0_MASK                                 0x10
#define _TMR1CON_CKPS1_POSN                                 0x5
#define _TMR1CON_CKPS1_POSITION                             0x5
#define _TMR1CON_CKPS1_SIZE                                 0x1
#define _TMR1CON_CKPS1_LENGTH                               0x1
#define _TMR1CON_CKPS1_MASK                                 0x20
#define _TMR1CON_RD161_POSN                                 0x1
#define _TMR1CON_RD161_POSITION                             0x1
#define _TMR1CON_RD161_SIZE                                 0x1
#define _TMR1CON_RD161_LENGTH                               0x1
#define _TMR1CON_RD161_MASK                                 0x2
#define _TMR1CON_nT1SYNC_POSN                               0x2
#define _TMR1CON_nT1SYNC_POSITION                           0x2
#define _TMR1CON_nT1SYNC_SIZE                               0x1
#define _TMR1CON_nT1SYNC_LENGTH                             0x1
#define _TMR1CON_nT1SYNC_MASK                               0x4

// Register: T1GCON
#define T1GCON T1GCON
extern volatile unsigned char           T1GCON              __at(0x10A);
#ifndef _LIB_BUILD
asm("T1GCON equ 010Ah");
#endif
// aliases
extern volatile unsigned char           TMR1GCON            __at(0x10A);
#ifndef _LIB_BUILD
asm("TMR1GCON equ 010Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO                    :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T1GVAL                 :1;
        unsigned T1GGO                  :1;
        unsigned T1GSPM                 :1;
        unsigned T1GTM                  :1;
        unsigned T1GPOL                 :1;
        unsigned T1GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_DONE               :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_T1DONE             :1;
    };
    struct {
        unsigned                        :3;
        unsigned GGO_NOT_DONE           :1;
    };
    struct {
        unsigned                        :3;
        unsigned GGO_nDONE              :1;
    };
    struct {
        unsigned                        :3;
        unsigned T1GGO_NOT_DONE         :1;
    };
    struct {
        unsigned                        :3;
        unsigned T1GGO_nDONE            :1;
    };
} T1GCONbits_t;
extern volatile T1GCONbits_t T1GCONbits __at(0x10A);
// bitfield macros
#define _T1GCON_GVAL_POSN                                   0x2
#define _T1GCON_GVAL_POSITION                               0x2
#define _T1GCON_GVAL_SIZE                                   0x1
#define _T1GCON_GVAL_LENGTH                                 0x1
#define _T1GCON_GVAL_MASK                                   0x4
#define _T1GCON_GGO_POSN                                    0x3
#define _T1GCON_GGO_POSITION                                0x3
#define _T1GCON_GGO_SIZE                                    0x1
#define _T1GCON_GGO_LENGTH                                  0x1
#define _T1GCON_GGO_MASK                                    0x8
#define _T1GCON_GSPM_POSN                                   0x4
#define _T1GCON_GSPM_POSITION                               0x4
#define _T1GCON_GSPM_SIZE                                   0x1
#define _T1GCON_GSPM_LENGTH                                 0x1
#define _T1GCON_GSPM_MASK                                   0x10
#define _T1GCON_GTM_POSN                                    0x5
#define _T1GCON_GTM_POSITION                                0x5
#define _T1GCON_GTM_SIZE                                    0x1
#define _T1GCON_GTM_LENGTH                                  0x1
#define _T1GCON_GTM_MASK                                    0x20
#define _T1GCON_GPOL_POSN                                   0x6
#define _T1GCON_GPOL_POSITION                               0x6
#define _T1GCON_GPOL_SIZE                                   0x1
#define _T1GCON_GPOL_LENGTH                                 0x1
#define _T1GCON_GPOL_MASK                                   0x40
#define _T1GCON_GE_POSN                                     0x7
#define _T1GCON_GE_POSITION                                 0x7
#define _T1GCON_GE_SIZE                                     0x1
#define _T1GCON_GE_LENGTH                                   0x1
#define _T1GCON_GE_MASK                                     0x80
#define _T1GCON_T1GVAL_POSN                                 0x2
#define _T1GCON_T1GVAL_POSITION                             0x2
#define _T1GCON_T1GVAL_SIZE                                 0x1
#define _T1GCON_T1GVAL_LENGTH                               0x1
#define _T1GCON_T1GVAL_MASK                                 0x4
#define _T1GCON_T1GGO_POSN                                  0x3
#define _T1GCON_T1GGO_POSITION                              0x3
#define _T1GCON_T1GGO_SIZE                                  0x1
#define _T1GCON_T1GGO_LENGTH                                0x1
#define _T1GCON_T1GGO_MASK                                  0x8
#define _T1GCON_T1GSPM_POSN                                 0x4
#define _T1GCON_T1GSPM_POSITION                             0x4
#define _T1GCON_T1GSPM_SIZE                                 0x1
#define _T1GCON_T1GSPM_LENGTH                               0x1
#define _T1GCON_T1GSPM_MASK                                 0x10
#define _T1GCON_T1GTM_POSN                                  0x5
#define _T1GCON_T1GTM_POSITION                              0x5
#define _T1GCON_T1GTM_SIZE                                  0x1
#define _T1GCON_T1GTM_LENGTH                                0x1
#define _T1GCON_T1GTM_MASK                                  0x20
#define _T1GCON_T1GPOL_POSN                                 0x6
#define _T1GCON_T1GPOL_POSITION                             0x6
#define _T1GCON_T1GPOL_SIZE                                 0x1
#define _T1GCON_T1GPOL_LENGTH                               0x1
#define _T1GCON_T1GPOL_MASK                                 0x40
#define _T1GCON_T1GE_POSN                                   0x7
#define _T1GCON_T1GE_POSITION                               0x7
#define _T1GCON_T1GE_SIZE                                   0x1
#define _T1GCON_T1GE_LENGTH                                 0x1
#define _T1GCON_T1GE_MASK                                   0x80
#define _T1GCON_NOT_DONE_POSN                               0x3
#define _T1GCON_NOT_DONE_POSITION                           0x3
#define _T1GCON_NOT_DONE_SIZE                               0x1
#define _T1GCON_NOT_DONE_LENGTH                             0x1
#define _T1GCON_NOT_DONE_MASK                               0x8
#define _T1GCON_NOT_T1DONE_POSN                             0x3
#define _T1GCON_NOT_T1DONE_POSITION                         0x3
#define _T1GCON_NOT_T1DONE_SIZE                             0x1
#define _T1GCON_NOT_T1DONE_LENGTH                           0x1
#define _T1GCON_NOT_T1DONE_MASK                             0x8
#define _T1GCON_GGO_NOT_DONE_POSN                           0x3
#define _T1GCON_GGO_NOT_DONE_POSITION                       0x3
#define _T1GCON_GGO_NOT_DONE_SIZE                           0x1
#define _T1GCON_GGO_NOT_DONE_LENGTH                         0x1
#define _T1GCON_GGO_NOT_DONE_MASK                           0x8
#define _T1GCON_GGO_nDONE_POSN                              0x3
#define _T1GCON_GGO_nDONE_POSITION                          0x3
#define _T1GCON_GGO_nDONE_SIZE                              0x1
#define _T1GCON_GGO_nDONE_LENGTH                            0x1
#define _T1GCON_GGO_nDONE_MASK                              0x8
#define _T1GCON_T1GGO_NOT_DONE_POSN                         0x3
#define _T1GCON_T1GGO_NOT_DONE_POSITION                     0x3
#define _T1GCON_T1GGO_NOT_DONE_SIZE                         0x1
#define _T1GCON_T1GGO_NOT_DONE_LENGTH                       0x1
#define _T1GCON_T1GGO_NOT_DONE_MASK                         0x8
#define _T1GCON_T1GGO_nDONE_POSN                            0x3
#define _T1GCON_T1GGO_nDONE_POSITION                        0x3
#define _T1GCON_T1GGO_nDONE_SIZE                            0x1
#define _T1GCON_T1GGO_nDONE_LENGTH                          0x1
#define _T1GCON_T1GGO_nDONE_MASK                            0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned GVAL                   :1;
        unsigned GGO                    :1;
        unsigned GSPM                   :1;
        unsigned GTM                    :1;
        unsigned GPOL                   :1;
        unsigned GE                     :1;
    };
    struct {
        unsigned                        :2;
        unsigned T1GVAL                 :1;
        unsigned T1GGO                  :1;
        unsigned T1GSPM                 :1;
        unsigned T1GTM                  :1;
        unsigned T1GPOL                 :1;
        unsigned T1GE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_DONE               :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_T1DONE             :1;
    };
    struct {
        unsigned                        :3;
        unsigned GGO_NOT_DONE           :1;
    };
    struct {
        unsigned                        :3;
        unsigned GGO_nDONE              :1;
    };
    struct {
        unsigned                        :3;
        unsigned T1GGO_NOT_DONE         :1;
    };
    struct {
        unsigned                        :3;
        unsigned T1GGO_nDONE            :1;
    };
} TMR1GCONbits_t;
extern volatile TMR1GCONbits_t TMR1GCONbits __at(0x10A);
// bitfield macros
#define _TMR1GCON_GVAL_POSN                                 0x2
#define _TMR1GCON_GVAL_POSITION                             0x2
#define _TMR1GCON_GVAL_SIZE                                 0x1
#define _TMR1GCON_GVAL_LENGTH                               0x1
#define _TMR1GCON_GVAL_MASK                                 0x4
#define _TMR1GCON_GGO_POSN                                  0x3
#define _TMR1GCON_GGO_POSITION                              0x3
#define _TMR1GCON_GGO_SIZE                                  0x1
#define _TMR1GCON_GGO_LENGTH                                0x1
#define _TMR1GCON_GGO_MASK                                  0x8
#define _TMR1GCON_GSPM_POSN                                 0x4
#define _TMR1GCON_GSPM_POSITION                             0x4
#define _TMR1GCON_GSPM_SIZE                                 0x1
#define _TMR1GCON_GSPM_LENGTH                               0x1
#define _TMR1GCON_GSPM_MASK                                 0x10
#define _TMR1GCON_GTM_POSN                                  0x5
#define _TMR1GCON_GTM_POSITION                              0x5
#define _TMR1GCON_GTM_SIZE                                  0x1
#define _TMR1GCON_GTM_LENGTH                                0x1
#define _TMR1GCON_GTM_MASK                                  0x20
#define _TMR1GCON_GPOL_POSN                                 0x6
#define _TMR1GCON_GPOL_POSITION                             0x6
#define _TMR1GCON_GPOL_SIZE                                 0x1
#define _TMR1GCON_GPOL_LENGTH                               0x1
#define _TMR1GCON_GPOL_MASK                                 0x40
#define _TMR1GCON_GE_POSN                                   0x7
#define _TMR1GCON_GE_POSITION                               0x7
#define _TMR1GCON_GE_SIZE                                   0x1
#define _TMR1GCON_GE_LENGTH                                 0x1
#define _TMR1GCON_GE_MASK                                   0x80
#define _TMR1GCON_T1GVAL_POSN                               0x2
#define _TMR1GCON_T1GVAL_POSITION                           0x2
#define _TMR1GCON_T1GVAL_SIZE                               0x1
#define _TMR1GCON_T1GVAL_LENGTH                             0x1
#define _TMR1GCON_T1GVAL_MASK                               0x4
#define _TMR1GCON_T1GGO_POSN                                0x3
#define _TMR1GCON_T1GGO_POSITION                            0x3
#define _TMR1GCON_T1GGO_SIZE                                0x1
#define _TMR1GCON_T1GGO_LENGTH                              0x1
#define _TMR1GCON_T1GGO_MASK                                0x8
#define _TMR1GCON_T1GSPM_POSN                               0x4
#define _TMR1GCON_T1GSPM_POSITION                           0x4
#define _TMR1GCON_T1GSPM_SIZE                               0x1
#define _TMR1GCON_T1GSPM_LENGTH                             0x1
#define _TMR1GCON_T1GSPM_MASK                               0x10
#define _TMR1GCON_T1GTM_POSN                                0x5
#define _TMR1GCON_T1GTM_POSITION                            0x5
#define _TMR1GCON_T1GTM_SIZE                                0x1
#define _TMR1GCON_T1GTM_LENGTH                              0x1
#define _TMR1GCON_T1GTM_MASK                                0x20
#define _TMR1GCON_T1GPOL_POSN                               0x6
#define _TMR1GCON_T1GPOL_POSITION                           0x6
#define _TMR1GCON_T1GPOL_SIZE                               0x1
#define _TMR1GCON_T1GPOL_LENGTH                             0x1
#define _TMR1GCON_T1GPOL_MASK                               0x40
#define _TMR1GCON_T1GE_POSN                                 0x7
#define _TMR1GCON_T1GE_POSITION                             0x7
#define _TMR1GCON_T1GE_SIZE                                 0x1
#define _TMR1GCON_T1GE_LENGTH                               0x1
#define _TMR1GCON_T1GE_MASK                                 0x80
#define _TMR1GCON_NOT_DONE_POSN                             0x3
#define _TMR1GCON_NOT_DONE_POSITION                         0x3
#define _TMR1GCON_NOT_DONE_SIZE                             0x1
#define _TMR1GCON_NOT_DONE_LENGTH                           0x1
#define _TMR1GCON_NOT_DONE_MASK                             0x8
#define _TMR1GCON_NOT_T1DONE_POSN                           0x3
#define _TMR1GCON_NOT_T1DONE_POSITION                       0x3
#define _TMR1GCON_NOT_T1DONE_SIZE                           0x1
#define _TMR1GCON_NOT_T1DONE_LENGTH                         0x1
#define _TMR1GCON_NOT_T1DONE_MASK                           0x8
#define _TMR1GCON_GGO_NOT_DONE_POSN                         0x3
#define _TMR1GCON_GGO_NOT_DONE_POSITION                     0x3
#define _TMR1GCON_GGO_NOT_DONE_SIZE                         0x1
#define _TMR1GCON_GGO_NOT_DONE_LENGTH                       0x1
#define _TMR1GCON_GGO_NOT_DONE_MASK                         0x8
#define _TMR1GCON_GGO_nDONE_POSN                            0x3
#define _TMR1GCON_GGO_nDONE_POSITION                        0x3
#define _TMR1GCON_GGO_nDONE_SIZE                            0x1
#define _TMR1GCON_GGO_nDONE_LENGTH                          0x1
#define _TMR1GCON_GGO_nDONE_MASK                            0x8
#define _TMR1GCON_T1GGO_NOT_DONE_POSN                       0x3
#define _TMR1GCON_T1GGO_NOT_DONE_POSITION                   0x3
#define _TMR1GCON_T1GGO_NOT_DONE_SIZE                       0x1
#define _TMR1GCON_T1GGO_NOT_DONE_LENGTH                     0x1
#define _TMR1GCON_T1GGO_NOT_DONE_MASK                       0x8
#define _TMR1GCON_T1GGO_nDONE_POSN                          0x3
#define _TMR1GCON_T1GGO_nDONE_POSITION                      0x3
#define _TMR1GCON_T1GGO_nDONE_SIZE                          0x1
#define _TMR1GCON_T1GGO_nDONE_LENGTH                        0x1
#define _TMR1GCON_T1GGO_nDONE_MASK                          0x8

// Register: T1GATE
#define T1GATE T1GATE
extern volatile unsigned char           T1GATE              __at(0x10B);
#ifndef _LIB_BUILD
asm("T1GATE equ 010Bh");
#endif
// aliases
extern volatile unsigned char           TMR1GATE            __at(0x10B);
#ifndef _LIB_BUILD
asm("TMR1GATE equ 010Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :8;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
    };
    struct {
        unsigned T1GSS0                 :1;
        unsigned T1GSS1                 :1;
        unsigned T1GSS2                 :1;
        unsigned T1GSS3                 :1;
    };
} T1GATEbits_t;
extern volatile T1GATEbits_t T1GATEbits __at(0x10B);
// bitfield macros
#define _T1GATE_GSS_POSN                                    0x0
#define _T1GATE_GSS_POSITION                                0x0
#define _T1GATE_GSS_SIZE                                    0x8
#define _T1GATE_GSS_LENGTH                                  0x8
#define _T1GATE_GSS_MASK                                    0xFF
#define _T1GATE_GSS0_POSN                                   0x0
#define _T1GATE_GSS0_POSITION                               0x0
#define _T1GATE_GSS0_SIZE                                   0x1
#define _T1GATE_GSS0_LENGTH                                 0x1
#define _T1GATE_GSS0_MASK                                   0x1
#define _T1GATE_GSS1_POSN                                   0x1
#define _T1GATE_GSS1_POSITION                               0x1
#define _T1GATE_GSS1_SIZE                                   0x1
#define _T1GATE_GSS1_LENGTH                                 0x1
#define _T1GATE_GSS1_MASK                                   0x2
#define _T1GATE_GSS2_POSN                                   0x2
#define _T1GATE_GSS2_POSITION                               0x2
#define _T1GATE_GSS2_SIZE                                   0x1
#define _T1GATE_GSS2_LENGTH                                 0x1
#define _T1GATE_GSS2_MASK                                   0x4
#define _T1GATE_GSS3_POSN                                   0x3
#define _T1GATE_GSS3_POSITION                               0x3
#define _T1GATE_GSS3_SIZE                                   0x1
#define _T1GATE_GSS3_LENGTH                                 0x1
#define _T1GATE_GSS3_MASK                                   0x8
#define _T1GATE_T1GSS0_POSN                                 0x0
#define _T1GATE_T1GSS0_POSITION                             0x0
#define _T1GATE_T1GSS0_SIZE                                 0x1
#define _T1GATE_T1GSS0_LENGTH                               0x1
#define _T1GATE_T1GSS0_MASK                                 0x1
#define _T1GATE_T1GSS1_POSN                                 0x1
#define _T1GATE_T1GSS1_POSITION                             0x1
#define _T1GATE_T1GSS1_SIZE                                 0x1
#define _T1GATE_T1GSS1_LENGTH                               0x1
#define _T1GATE_T1GSS1_MASK                                 0x2
#define _T1GATE_T1GSS2_POSN                                 0x2
#define _T1GATE_T1GSS2_POSITION                             0x2
#define _T1GATE_T1GSS2_SIZE                                 0x1
#define _T1GATE_T1GSS2_LENGTH                               0x1
#define _T1GATE_T1GSS2_MASK                                 0x4
#define _T1GATE_T1GSS3_POSN                                 0x3
#define _T1GATE_T1GSS3_POSITION                             0x3
#define _T1GATE_T1GSS3_SIZE                                 0x1
#define _T1GATE_T1GSS3_LENGTH                               0x1
#define _T1GATE_T1GSS3_MASK                                 0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned GSS                    :8;
    };
    struct {
        unsigned GSS0                   :1;
        unsigned GSS1                   :1;
        unsigned GSS2                   :1;
        unsigned GSS3                   :1;
    };
    struct {
        unsigned T1GSS0                 :1;
        unsigned T1GSS1                 :1;
        unsigned T1GSS2                 :1;
        unsigned T1GSS3                 :1;
    };
} TMR1GATEbits_t;
extern volatile TMR1GATEbits_t TMR1GATEbits __at(0x10B);
// bitfield macros
#define _TMR1GATE_GSS_POSN                                  0x0
#define _TMR1GATE_GSS_POSITION                              0x0
#define _TMR1GATE_GSS_SIZE                                  0x8
#define _TMR1GATE_GSS_LENGTH                                0x8
#define _TMR1GATE_GSS_MASK                                  0xFF
#define _TMR1GATE_GSS0_POSN                                 0x0
#define _TMR1GATE_GSS0_POSITION                             0x0
#define _TMR1GATE_GSS0_SIZE                                 0x1
#define _TMR1GATE_GSS0_LENGTH                               0x1
#define _TMR1GATE_GSS0_MASK                                 0x1
#define _TMR1GATE_GSS1_POSN                                 0x1
#define _TMR1GATE_GSS1_POSITION                             0x1
#define _TMR1GATE_GSS1_SIZE                                 0x1
#define _TMR1GATE_GSS1_LENGTH                               0x1
#define _TMR1GATE_GSS1_MASK                                 0x2
#define _TMR1GATE_GSS2_POSN                                 0x2
#define _TMR1GATE_GSS2_POSITION                             0x2
#define _TMR1GATE_GSS2_SIZE                                 0x1
#define _TMR1GATE_GSS2_LENGTH                               0x1
#define _TMR1GATE_GSS2_MASK                                 0x4
#define _TMR1GATE_GSS3_POSN                                 0x3
#define _TMR1GATE_GSS3_POSITION                             0x3
#define _TMR1GATE_GSS3_SIZE                                 0x1
#define _TMR1GATE_GSS3_LENGTH                               0x1
#define _TMR1GATE_GSS3_MASK                                 0x8
#define _TMR1GATE_T1GSS0_POSN                               0x0
#define _TMR1GATE_T1GSS0_POSITION                           0x0
#define _TMR1GATE_T1GSS0_SIZE                               0x1
#define _TMR1GATE_T1GSS0_LENGTH                             0x1
#define _TMR1GATE_T1GSS0_MASK                               0x1
#define _TMR1GATE_T1GSS1_POSN                               0x1
#define _TMR1GATE_T1GSS1_POSITION                           0x1
#define _TMR1GATE_T1GSS1_SIZE                               0x1
#define _TMR1GATE_T1GSS1_LENGTH                             0x1
#define _TMR1GATE_T1GSS1_MASK                               0x2
#define _TMR1GATE_T1GSS2_POSN                               0x2
#define _TMR1GATE_T1GSS2_POSITION                           0x2
#define _TMR1GATE_T1GSS2_SIZE                               0x1
#define _TMR1GATE_T1GSS2_LENGTH                             0x1
#define _TMR1GATE_T1GSS2_MASK                               0x4
#define _TMR1GATE_T1GSS3_POSN                               0x3
#define _TMR1GATE_T1GSS3_POSITION                           0x3
#define _TMR1GATE_T1GSS3_SIZE                               0x1
#define _TMR1GATE_T1GSS3_LENGTH                             0x1
#define _TMR1GATE_T1GSS3_MASK                               0x8

// Register: T1CLK
#define T1CLK T1CLK
extern volatile unsigned char           T1CLK               __at(0x10C);
#ifndef _LIB_BUILD
asm("T1CLK equ 010Ch");
#endif
// aliases
extern volatile unsigned char           TMR1CLK             __at(0x10C);
#ifndef _LIB_BUILD
asm("TMR1CLK equ 010Ch");
#endif
extern volatile unsigned char           PR1                 __at(0x10C);
#ifndef _LIB_BUILD
asm("PR1 equ 010Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned T1CS0                  :1;
        unsigned T1CS1                  :1;
        unsigned T1CS2                  :1;
        unsigned T1CS3                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} T1CLKbits_t;
extern volatile T1CLKbits_t T1CLKbits __at(0x10C);
// bitfield macros
#define _T1CLK_CS_POSN                                      0x0
#define _T1CLK_CS_POSITION                                  0x0
#define _T1CLK_CS_SIZE                                      0x8
#define _T1CLK_CS_LENGTH                                    0x8
#define _T1CLK_CS_MASK                                      0xFF
#define _T1CLK_T1CS0_POSN                                   0x0
#define _T1CLK_T1CS0_POSITION                               0x0
#define _T1CLK_T1CS0_SIZE                                   0x1
#define _T1CLK_T1CS0_LENGTH                                 0x1
#define _T1CLK_T1CS0_MASK                                   0x1
#define _T1CLK_T1CS1_POSN                                   0x1
#define _T1CLK_T1CS1_POSITION                               0x1
#define _T1CLK_T1CS1_SIZE                                   0x1
#define _T1CLK_T1CS1_LENGTH                                 0x1
#define _T1CLK_T1CS1_MASK                                   0x2
#define _T1CLK_T1CS2_POSN                                   0x2
#define _T1CLK_T1CS2_POSITION                               0x2
#define _T1CLK_T1CS2_SIZE                                   0x1
#define _T1CLK_T1CS2_LENGTH                                 0x1
#define _T1CLK_T1CS2_MASK                                   0x4
#define _T1CLK_T1CS3_POSN                                   0x3
#define _T1CLK_T1CS3_POSITION                               0x3
#define _T1CLK_T1CS3_SIZE                                   0x1
#define _T1CLK_T1CS3_LENGTH                                 0x1
#define _T1CLK_T1CS3_MASK                                   0x8
#define _T1CLK_CS0_POSN                                     0x0
#define _T1CLK_CS0_POSITION                                 0x0
#define _T1CLK_CS0_SIZE                                     0x1
#define _T1CLK_CS0_LENGTH                                   0x1
#define _T1CLK_CS0_MASK                                     0x1
#define _T1CLK_CS1_POSN                                     0x1
#define _T1CLK_CS1_POSITION                                 0x1
#define _T1CLK_CS1_SIZE                                     0x1
#define _T1CLK_CS1_LENGTH                                   0x1
#define _T1CLK_CS1_MASK                                     0x2
#define _T1CLK_CS2_POSN                                     0x2
#define _T1CLK_CS2_POSITION                                 0x2
#define _T1CLK_CS2_SIZE                                     0x1
#define _T1CLK_CS2_LENGTH                                   0x1
#define _T1CLK_CS2_MASK                                     0x4
#define _T1CLK_CS3_POSN                                     0x3
#define _T1CLK_CS3_POSITION                                 0x3
#define _T1CLK_CS3_SIZE                                     0x1
#define _T1CLK_CS3_LENGTH                                   0x1
#define _T1CLK_CS3_MASK                                     0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned T1CS0                  :1;
        unsigned T1CS1                  :1;
        unsigned T1CS2                  :1;
        unsigned T1CS3                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} TMR1CLKbits_t;
extern volatile TMR1CLKbits_t TMR1CLKbits __at(0x10C);
// bitfield macros
#define _TMR1CLK_CS_POSN                                    0x0
#define _TMR1CLK_CS_POSITION                                0x0
#define _TMR1CLK_CS_SIZE                                    0x8
#define _TMR1CLK_CS_LENGTH                                  0x8
#define _TMR1CLK_CS_MASK                                    0xFF
#define _TMR1CLK_T1CS0_POSN                                 0x0
#define _TMR1CLK_T1CS0_POSITION                             0x0
#define _TMR1CLK_T1CS0_SIZE                                 0x1
#define _TMR1CLK_T1CS0_LENGTH                               0x1
#define _TMR1CLK_T1CS0_MASK                                 0x1
#define _TMR1CLK_T1CS1_POSN                                 0x1
#define _TMR1CLK_T1CS1_POSITION                             0x1
#define _TMR1CLK_T1CS1_SIZE                                 0x1
#define _TMR1CLK_T1CS1_LENGTH                               0x1
#define _TMR1CLK_T1CS1_MASK                                 0x2
#define _TMR1CLK_T1CS2_POSN                                 0x2
#define _TMR1CLK_T1CS2_POSITION                             0x2
#define _TMR1CLK_T1CS2_SIZE                                 0x1
#define _TMR1CLK_T1CS2_LENGTH                               0x1
#define _TMR1CLK_T1CS2_MASK                                 0x4
#define _TMR1CLK_T1CS3_POSN                                 0x3
#define _TMR1CLK_T1CS3_POSITION                             0x3
#define _TMR1CLK_T1CS3_SIZE                                 0x1
#define _TMR1CLK_T1CS3_LENGTH                               0x1
#define _TMR1CLK_T1CS3_MASK                                 0x8
#define _TMR1CLK_CS0_POSN                                   0x0
#define _TMR1CLK_CS0_POSITION                               0x0
#define _TMR1CLK_CS0_SIZE                                   0x1
#define _TMR1CLK_CS0_LENGTH                                 0x1
#define _TMR1CLK_CS0_MASK                                   0x1
#define _TMR1CLK_CS1_POSN                                   0x1
#define _TMR1CLK_CS1_POSITION                               0x1
#define _TMR1CLK_CS1_SIZE                                   0x1
#define _TMR1CLK_CS1_LENGTH                                 0x1
#define _TMR1CLK_CS1_MASK                                   0x2
#define _TMR1CLK_CS2_POSN                                   0x2
#define _TMR1CLK_CS2_POSITION                               0x2
#define _TMR1CLK_CS2_SIZE                                   0x1
#define _TMR1CLK_CS2_LENGTH                                 0x1
#define _TMR1CLK_CS2_MASK                                   0x4
#define _TMR1CLK_CS3_POSN                                   0x3
#define _TMR1CLK_CS3_POSITION                               0x3
#define _TMR1CLK_CS3_SIZE                                   0x1
#define _TMR1CLK_CS3_LENGTH                                 0x1
#define _TMR1CLK_CS3_MASK                                   0x8
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned T1CS0                  :1;
        unsigned T1CS1                  :1;
        unsigned T1CS2                  :1;
        unsigned T1CS3                  :1;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
} PR1bits_t;
extern volatile PR1bits_t PR1bits __at(0x10C);
// bitfield macros
#define _PR1_CS_POSN                                        0x0
#define _PR1_CS_POSITION                                    0x0
#define _PR1_CS_SIZE                                        0x8
#define _PR1_CS_LENGTH                                      0x8
#define _PR1_CS_MASK                                        0xFF
#define _PR1_T1CS0_POSN                                     0x0
#define _PR1_T1CS0_POSITION                                 0x0
#define _PR1_T1CS0_SIZE                                     0x1
#define _PR1_T1CS0_LENGTH                                   0x1
#define _PR1_T1CS0_MASK                                     0x1
#define _PR1_T1CS1_POSN                                     0x1
#define _PR1_T1CS1_POSITION                                 0x1
#define _PR1_T1CS1_SIZE                                     0x1
#define _PR1_T1CS1_LENGTH                                   0x1
#define _PR1_T1CS1_MASK                                     0x2
#define _PR1_T1CS2_POSN                                     0x2
#define _PR1_T1CS2_POSITION                                 0x2
#define _PR1_T1CS2_SIZE                                     0x1
#define _PR1_T1CS2_LENGTH                                   0x1
#define _PR1_T1CS2_MASK                                     0x4
#define _PR1_T1CS3_POSN                                     0x3
#define _PR1_T1CS3_POSITION                                 0x3
#define _PR1_T1CS3_SIZE                                     0x1
#define _PR1_T1CS3_LENGTH                                   0x1
#define _PR1_T1CS3_MASK                                     0x8
#define _PR1_CS0_POSN                                       0x0
#define _PR1_CS0_POSITION                                   0x0
#define _PR1_CS0_SIZE                                       0x1
#define _PR1_CS0_LENGTH                                     0x1
#define _PR1_CS0_MASK                                       0x1
#define _PR1_CS1_POSN                                       0x1
#define _PR1_CS1_POSITION                                   0x1
#define _PR1_CS1_SIZE                                       0x1
#define _PR1_CS1_LENGTH                                     0x1
#define _PR1_CS1_MASK                                       0x2
#define _PR1_CS2_POSN                                       0x2
#define _PR1_CS2_POSITION                                   0x2
#define _PR1_CS2_SIZE                                       0x1
#define _PR1_CS2_LENGTH                                     0x1
#define _PR1_CS2_MASK                                       0x4
#define _PR1_CS3_POSN                                       0x3
#define _PR1_CS3_POSITION                                   0x3
#define _PR1_CS3_SIZE                                       0x1
#define _PR1_CS3_LENGTH                                     0x1
#define _PR1_CS3_MASK                                       0x8

// Register: T2TMR
#define T2TMR T2TMR
extern volatile unsigned char           T2TMR               __at(0x119);
#ifndef _LIB_BUILD
asm("T2TMR equ 0119h");
#endif
// aliases
extern volatile unsigned char           TMR2                __at(0x119);
#ifndef _LIB_BUILD
asm("TMR2 equ 0119h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR2                   :8;
    };
} T2TMRbits_t;
extern volatile T2TMRbits_t T2TMRbits __at(0x119);
// bitfield macros
#define _T2TMR_TMR2_POSN                                    0x0
#define _T2TMR_TMR2_POSITION                                0x0
#define _T2TMR_TMR2_SIZE                                    0x8
#define _T2TMR_TMR2_LENGTH                                  0x8
#define _T2TMR_TMR2_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR2                   :8;
    };
} TMR2bits_t;
extern volatile TMR2bits_t TMR2bits __at(0x119);
// bitfield macros
#define _TMR2_TMR2_POSN                                     0x0
#define _TMR2_TMR2_POSITION                                 0x0
#define _TMR2_TMR2_SIZE                                     0x8
#define _TMR2_TMR2_LENGTH                                   0x8
#define _TMR2_TMR2_MASK                                     0xFF

// Register: T2PR
#define T2PR T2PR
extern volatile unsigned char           T2PR                __at(0x11A);
#ifndef _LIB_BUILD
asm("T2PR equ 011Ah");
#endif
// aliases
extern volatile unsigned char           PR2                 __at(0x11A);
#ifndef _LIB_BUILD
asm("PR2 equ 011Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR2                    :8;
    };
} T2PRbits_t;
extern volatile T2PRbits_t T2PRbits __at(0x11A);
// bitfield macros
#define _T2PR_PR2_POSN                                      0x0
#define _T2PR_PR2_POSITION                                  0x0
#define _T2PR_PR2_SIZE                                      0x8
#define _T2PR_PR2_LENGTH                                    0x8
#define _T2PR_PR2_MASK                                      0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR2                    :8;
    };
} PR2bits_t;
extern volatile PR2bits_t PR2bits __at(0x11A);
// bitfield macros
#define _PR2_PR2_POSN                                       0x0
#define _PR2_PR2_POSITION                                   0x0
#define _PR2_PR2_SIZE                                       0x8
#define _PR2_PR2_LENGTH                                     0x8
#define _PR2_PR2_MASK                                       0xFF

// Register: T2CON
#define T2CON T2CON
extern volatile unsigned char           T2CON               __at(0x11B);
#ifndef _LIB_BUILD
asm("T2CON equ 011Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned T2OUTPS                :4;
        unsigned T2CKPS                 :3;
        unsigned T2ON                   :1;
    };
    struct {
        unsigned T2OUTPS0               :1;
        unsigned T2OUTPS1               :1;
        unsigned T2OUTPS2               :1;
        unsigned T2OUTPS3               :1;
        unsigned T2CKPS0                :1;
        unsigned T2CKPS1                :1;
        unsigned T2CKPS2                :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned TMR2ON                 :1;
    };
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits __at(0x11B);
// bitfield macros
#define _T2CON_OUTPS_POSN                                   0x0
#define _T2CON_OUTPS_POSITION                               0x0
#define _T2CON_OUTPS_SIZE                                   0x4
#define _T2CON_OUTPS_LENGTH                                 0x4
#define _T2CON_OUTPS_MASK                                   0xF
#define _T2CON_CKPS_POSN                                    0x4
#define _T2CON_CKPS_POSITION                                0x4
#define _T2CON_CKPS_SIZE                                    0x3
#define _T2CON_CKPS_LENGTH                                  0x3
#define _T2CON_CKPS_MASK                                    0x70
#define _T2CON_ON_POSN                                      0x7
#define _T2CON_ON_POSITION                                  0x7
#define _T2CON_ON_SIZE                                      0x1
#define _T2CON_ON_LENGTH                                    0x1
#define _T2CON_ON_MASK                                      0x80
#define _T2CON_T2OUTPS_POSN                                 0x0
#define _T2CON_T2OUTPS_POSITION                             0x0
#define _T2CON_T2OUTPS_SIZE                                 0x4
#define _T2CON_T2OUTPS_LENGTH                               0x4
#define _T2CON_T2OUTPS_MASK                                 0xF
#define _T2CON_T2CKPS_POSN                                  0x4
#define _T2CON_T2CKPS_POSITION                              0x4
#define _T2CON_T2CKPS_SIZE                                  0x3
#define _T2CON_T2CKPS_LENGTH                                0x3
#define _T2CON_T2CKPS_MASK                                  0x70
#define _T2CON_T2ON_POSN                                    0x7
#define _T2CON_T2ON_POSITION                                0x7
#define _T2CON_T2ON_SIZE                                    0x1
#define _T2CON_T2ON_LENGTH                                  0x1
#define _T2CON_T2ON_MASK                                    0x80
#define _T2CON_T2OUTPS0_POSN                                0x0
#define _T2CON_T2OUTPS0_POSITION                            0x0
#define _T2CON_T2OUTPS0_SIZE                                0x1
#define _T2CON_T2OUTPS0_LENGTH                              0x1
#define _T2CON_T2OUTPS0_MASK                                0x1
#define _T2CON_T2OUTPS1_POSN                                0x1
#define _T2CON_T2OUTPS1_POSITION                            0x1
#define _T2CON_T2OUTPS1_SIZE                                0x1
#define _T2CON_T2OUTPS1_LENGTH                              0x1
#define _T2CON_T2OUTPS1_MASK                                0x2
#define _T2CON_T2OUTPS2_POSN                                0x2
#define _T2CON_T2OUTPS2_POSITION                            0x2
#define _T2CON_T2OUTPS2_SIZE                                0x1
#define _T2CON_T2OUTPS2_LENGTH                              0x1
#define _T2CON_T2OUTPS2_MASK                                0x4
#define _T2CON_T2OUTPS3_POSN                                0x3
#define _T2CON_T2OUTPS3_POSITION                            0x3
#define _T2CON_T2OUTPS3_SIZE                                0x1
#define _T2CON_T2OUTPS3_LENGTH                              0x1
#define _T2CON_T2OUTPS3_MASK                                0x8
#define _T2CON_T2CKPS0_POSN                                 0x4
#define _T2CON_T2CKPS0_POSITION                             0x4
#define _T2CON_T2CKPS0_SIZE                                 0x1
#define _T2CON_T2CKPS0_LENGTH                               0x1
#define _T2CON_T2CKPS0_MASK                                 0x10
#define _T2CON_T2CKPS1_POSN                                 0x5
#define _T2CON_T2CKPS1_POSITION                             0x5
#define _T2CON_T2CKPS1_SIZE                                 0x1
#define _T2CON_T2CKPS1_LENGTH                               0x1
#define _T2CON_T2CKPS1_MASK                                 0x20
#define _T2CON_T2CKPS2_POSN                                 0x6
#define _T2CON_T2CKPS2_POSITION                             0x6
#define _T2CON_T2CKPS2_SIZE                                 0x1
#define _T2CON_T2CKPS2_LENGTH                               0x1
#define _T2CON_T2CKPS2_MASK                                 0x40
#define _T2CON_OUTPS0_POSN                                  0x0
#define _T2CON_OUTPS0_POSITION                              0x0
#define _T2CON_OUTPS0_SIZE                                  0x1
#define _T2CON_OUTPS0_LENGTH                                0x1
#define _T2CON_OUTPS0_MASK                                  0x1
#define _T2CON_OUTPS1_POSN                                  0x1
#define _T2CON_OUTPS1_POSITION                              0x1
#define _T2CON_OUTPS1_SIZE                                  0x1
#define _T2CON_OUTPS1_LENGTH                                0x1
#define _T2CON_OUTPS1_MASK                                  0x2
#define _T2CON_OUTPS2_POSN                                  0x2
#define _T2CON_OUTPS2_POSITION                              0x2
#define _T2CON_OUTPS2_SIZE                                  0x1
#define _T2CON_OUTPS2_LENGTH                                0x1
#define _T2CON_OUTPS2_MASK                                  0x4
#define _T2CON_OUTPS3_POSN                                  0x3
#define _T2CON_OUTPS3_POSITION                              0x3
#define _T2CON_OUTPS3_SIZE                                  0x1
#define _T2CON_OUTPS3_LENGTH                                0x1
#define _T2CON_OUTPS3_MASK                                  0x8
#define _T2CON_CKPS0_POSN                                   0x4
#define _T2CON_CKPS0_POSITION                               0x4
#define _T2CON_CKPS0_SIZE                                   0x1
#define _T2CON_CKPS0_LENGTH                                 0x1
#define _T2CON_CKPS0_MASK                                   0x10
#define _T2CON_CKPS1_POSN                                   0x5
#define _T2CON_CKPS1_POSITION                               0x5
#define _T2CON_CKPS1_SIZE                                   0x1
#define _T2CON_CKPS1_LENGTH                                 0x1
#define _T2CON_CKPS1_MASK                                   0x20
#define _T2CON_CKPS2_POSN                                   0x6
#define _T2CON_CKPS2_POSITION                               0x6
#define _T2CON_CKPS2_SIZE                                   0x1
#define _T2CON_CKPS2_LENGTH                                 0x1
#define _T2CON_CKPS2_MASK                                   0x40
#define _T2CON_TMR2ON_POSN                                  0x7
#define _T2CON_TMR2ON_POSITION                              0x7
#define _T2CON_TMR2ON_SIZE                                  0x1
#define _T2CON_TMR2ON_LENGTH                                0x1
#define _T2CON_TMR2ON_MASK                                  0x80

// Register: T2HLT
#define T2HLT T2HLT
extern volatile unsigned char           T2HLT               __at(0x11C);
#ifndef _LIB_BUILD
asm("T2HLT equ 011Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T2MODE                 :5;
        unsigned T2CKSYNC               :1;
        unsigned T2CKPOL                :1;
        unsigned T2PSYNC                :1;
    };
    struct {
        unsigned T2MODE0                :1;
        unsigned T2MODE1                :1;
        unsigned T2MODE2                :1;
        unsigned T2MODE3                :1;
        unsigned T2MODE4                :1;
    };
} T2HLTbits_t;
extern volatile T2HLTbits_t T2HLTbits __at(0x11C);
// bitfield macros
#define _T2HLT_MODE_POSN                                    0x0
#define _T2HLT_MODE_POSITION                                0x0
#define _T2HLT_MODE_SIZE                                    0x5
#define _T2HLT_MODE_LENGTH                                  0x5
#define _T2HLT_MODE_MASK                                    0x1F
#define _T2HLT_CKSYNC_POSN                                  0x5
#define _T2HLT_CKSYNC_POSITION                              0x5
#define _T2HLT_CKSYNC_SIZE                                  0x1
#define _T2HLT_CKSYNC_LENGTH                                0x1
#define _T2HLT_CKSYNC_MASK                                  0x20
#define _T2HLT_CKPOL_POSN                                   0x6
#define _T2HLT_CKPOL_POSITION                               0x6
#define _T2HLT_CKPOL_SIZE                                   0x1
#define _T2HLT_CKPOL_LENGTH                                 0x1
#define _T2HLT_CKPOL_MASK                                   0x40
#define _T2HLT_PSYNC_POSN                                   0x7
#define _T2HLT_PSYNC_POSITION                               0x7
#define _T2HLT_PSYNC_SIZE                                   0x1
#define _T2HLT_PSYNC_LENGTH                                 0x1
#define _T2HLT_PSYNC_MASK                                   0x80
#define _T2HLT_MODE0_POSN                                   0x0
#define _T2HLT_MODE0_POSITION                               0x0
#define _T2HLT_MODE0_SIZE                                   0x1
#define _T2HLT_MODE0_LENGTH                                 0x1
#define _T2HLT_MODE0_MASK                                   0x1
#define _T2HLT_MODE1_POSN                                   0x1
#define _T2HLT_MODE1_POSITION                               0x1
#define _T2HLT_MODE1_SIZE                                   0x1
#define _T2HLT_MODE1_LENGTH                                 0x1
#define _T2HLT_MODE1_MASK                                   0x2
#define _T2HLT_MODE2_POSN                                   0x2
#define _T2HLT_MODE2_POSITION                               0x2
#define _T2HLT_MODE2_SIZE                                   0x1
#define _T2HLT_MODE2_LENGTH                                 0x1
#define _T2HLT_MODE2_MASK                                   0x4
#define _T2HLT_MODE3_POSN                                   0x3
#define _T2HLT_MODE3_POSITION                               0x3
#define _T2HLT_MODE3_SIZE                                   0x1
#define _T2HLT_MODE3_LENGTH                                 0x1
#define _T2HLT_MODE3_MASK                                   0x8
#define _T2HLT_MODE4_POSN                                   0x4
#define _T2HLT_MODE4_POSITION                               0x4
#define _T2HLT_MODE4_SIZE                                   0x1
#define _T2HLT_MODE4_LENGTH                                 0x1
#define _T2HLT_MODE4_MASK                                   0x10
#define _T2HLT_T2MODE_POSN                                  0x0
#define _T2HLT_T2MODE_POSITION                              0x0
#define _T2HLT_T2MODE_SIZE                                  0x5
#define _T2HLT_T2MODE_LENGTH                                0x5
#define _T2HLT_T2MODE_MASK                                  0x1F
#define _T2HLT_T2CKSYNC_POSN                                0x5
#define _T2HLT_T2CKSYNC_POSITION                            0x5
#define _T2HLT_T2CKSYNC_SIZE                                0x1
#define _T2HLT_T2CKSYNC_LENGTH                              0x1
#define _T2HLT_T2CKSYNC_MASK                                0x20
#define _T2HLT_T2CKPOL_POSN                                 0x6
#define _T2HLT_T2CKPOL_POSITION                             0x6
#define _T2HLT_T2CKPOL_SIZE                                 0x1
#define _T2HLT_T2CKPOL_LENGTH                               0x1
#define _T2HLT_T2CKPOL_MASK                                 0x40
#define _T2HLT_T2PSYNC_POSN                                 0x7
#define _T2HLT_T2PSYNC_POSITION                             0x7
#define _T2HLT_T2PSYNC_SIZE                                 0x1
#define _T2HLT_T2PSYNC_LENGTH                               0x1
#define _T2HLT_T2PSYNC_MASK                                 0x80
#define _T2HLT_T2MODE0_POSN                                 0x0
#define _T2HLT_T2MODE0_POSITION                             0x0
#define _T2HLT_T2MODE0_SIZE                                 0x1
#define _T2HLT_T2MODE0_LENGTH                               0x1
#define _T2HLT_T2MODE0_MASK                                 0x1
#define _T2HLT_T2MODE1_POSN                                 0x1
#define _T2HLT_T2MODE1_POSITION                             0x1
#define _T2HLT_T2MODE1_SIZE                                 0x1
#define _T2HLT_T2MODE1_LENGTH                               0x1
#define _T2HLT_T2MODE1_MASK                                 0x2
#define _T2HLT_T2MODE2_POSN                                 0x2
#define _T2HLT_T2MODE2_POSITION                             0x2
#define _T2HLT_T2MODE2_SIZE                                 0x1
#define _T2HLT_T2MODE2_LENGTH                               0x1
#define _T2HLT_T2MODE2_MASK                                 0x4
#define _T2HLT_T2MODE3_POSN                                 0x3
#define _T2HLT_T2MODE3_POSITION                             0x3
#define _T2HLT_T2MODE3_SIZE                                 0x1
#define _T2HLT_T2MODE3_LENGTH                               0x1
#define _T2HLT_T2MODE3_MASK                                 0x8
#define _T2HLT_T2MODE4_POSN                                 0x4
#define _T2HLT_T2MODE4_POSITION                             0x4
#define _T2HLT_T2MODE4_SIZE                                 0x1
#define _T2HLT_T2MODE4_LENGTH                               0x1
#define _T2HLT_T2MODE4_MASK                                 0x10

// Register: T2CLKCON
#define T2CLKCON T2CLKCON
extern volatile unsigned char           T2CLKCON            __at(0x11D);
#ifndef _LIB_BUILD
asm("T2CLKCON equ 011Dh");
#endif
// aliases
extern volatile unsigned char           T2CLK               __at(0x11D);
#ifndef _LIB_BUILD
asm("T2CLK equ 011Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T2CS                   :8;
    };
    struct {
        unsigned T2CS0                  :1;
        unsigned T2CS1                  :1;
        unsigned T2CS2                  :1;
        unsigned T2CS3                  :1;
    };
} T2CLKCONbits_t;
extern volatile T2CLKCONbits_t T2CLKCONbits __at(0x11D);
// bitfield macros
#define _T2CLKCON_CS_POSN                                   0x0
#define _T2CLKCON_CS_POSITION                               0x0
#define _T2CLKCON_CS_SIZE                                   0x8
#define _T2CLKCON_CS_LENGTH                                 0x8
#define _T2CLKCON_CS_MASK                                   0xFF
#define _T2CLKCON_CS0_POSN                                  0x0
#define _T2CLKCON_CS0_POSITION                              0x0
#define _T2CLKCON_CS0_SIZE                                  0x1
#define _T2CLKCON_CS0_LENGTH                                0x1
#define _T2CLKCON_CS0_MASK                                  0x1
#define _T2CLKCON_CS1_POSN                                  0x1
#define _T2CLKCON_CS1_POSITION                              0x1
#define _T2CLKCON_CS1_SIZE                                  0x1
#define _T2CLKCON_CS1_LENGTH                                0x1
#define _T2CLKCON_CS1_MASK                                  0x2
#define _T2CLKCON_CS2_POSN                                  0x2
#define _T2CLKCON_CS2_POSITION                              0x2
#define _T2CLKCON_CS2_SIZE                                  0x1
#define _T2CLKCON_CS2_LENGTH                                0x1
#define _T2CLKCON_CS2_MASK                                  0x4
#define _T2CLKCON_CS3_POSN                                  0x3
#define _T2CLKCON_CS3_POSITION                              0x3
#define _T2CLKCON_CS3_SIZE                                  0x1
#define _T2CLKCON_CS3_LENGTH                                0x1
#define _T2CLKCON_CS3_MASK                                  0x8
#define _T2CLKCON_T2CS_POSN                                 0x0
#define _T2CLKCON_T2CS_POSITION                             0x0
#define _T2CLKCON_T2CS_SIZE                                 0x8
#define _T2CLKCON_T2CS_LENGTH                               0x8
#define _T2CLKCON_T2CS_MASK                                 0xFF
#define _T2CLKCON_T2CS0_POSN                                0x0
#define _T2CLKCON_T2CS0_POSITION                            0x0
#define _T2CLKCON_T2CS0_SIZE                                0x1
#define _T2CLKCON_T2CS0_LENGTH                              0x1
#define _T2CLKCON_T2CS0_MASK                                0x1
#define _T2CLKCON_T2CS1_POSN                                0x1
#define _T2CLKCON_T2CS1_POSITION                            0x1
#define _T2CLKCON_T2CS1_SIZE                                0x1
#define _T2CLKCON_T2CS1_LENGTH                              0x1
#define _T2CLKCON_T2CS1_MASK                                0x2
#define _T2CLKCON_T2CS2_POSN                                0x2
#define _T2CLKCON_T2CS2_POSITION                            0x2
#define _T2CLKCON_T2CS2_SIZE                                0x1
#define _T2CLKCON_T2CS2_LENGTH                              0x1
#define _T2CLKCON_T2CS2_MASK                                0x4
#define _T2CLKCON_T2CS3_POSN                                0x3
#define _T2CLKCON_T2CS3_POSITION                            0x3
#define _T2CLKCON_T2CS3_SIZE                                0x1
#define _T2CLKCON_T2CS3_LENGTH                              0x1
#define _T2CLKCON_T2CS3_MASK                                0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T2CS                   :8;
    };
    struct {
        unsigned T2CS0                  :1;
        unsigned T2CS1                  :1;
        unsigned T2CS2                  :1;
        unsigned T2CS3                  :1;
    };
} T2CLKbits_t;
extern volatile T2CLKbits_t T2CLKbits __at(0x11D);
// bitfield macros
#define _T2CLK_CS_POSN                                      0x0
#define _T2CLK_CS_POSITION                                  0x0
#define _T2CLK_CS_SIZE                                      0x8
#define _T2CLK_CS_LENGTH                                    0x8
#define _T2CLK_CS_MASK                                      0xFF
#define _T2CLK_CS0_POSN                                     0x0
#define _T2CLK_CS0_POSITION                                 0x0
#define _T2CLK_CS0_SIZE                                     0x1
#define _T2CLK_CS0_LENGTH                                   0x1
#define _T2CLK_CS0_MASK                                     0x1
#define _T2CLK_CS1_POSN                                     0x1
#define _T2CLK_CS1_POSITION                                 0x1
#define _T2CLK_CS1_SIZE                                     0x1
#define _T2CLK_CS1_LENGTH                                   0x1
#define _T2CLK_CS1_MASK                                     0x2
#define _T2CLK_CS2_POSN                                     0x2
#define _T2CLK_CS2_POSITION                                 0x2
#define _T2CLK_CS2_SIZE                                     0x1
#define _T2CLK_CS2_LENGTH                                   0x1
#define _T2CLK_CS2_MASK                                     0x4
#define _T2CLK_CS3_POSN                                     0x3
#define _T2CLK_CS3_POSITION                                 0x3
#define _T2CLK_CS3_SIZE                                     0x1
#define _T2CLK_CS3_LENGTH                                   0x1
#define _T2CLK_CS3_MASK                                     0x8
#define _T2CLK_T2CS_POSN                                    0x0
#define _T2CLK_T2CS_POSITION                                0x0
#define _T2CLK_T2CS_SIZE                                    0x8
#define _T2CLK_T2CS_LENGTH                                  0x8
#define _T2CLK_T2CS_MASK                                    0xFF
#define _T2CLK_T2CS0_POSN                                   0x0
#define _T2CLK_T2CS0_POSITION                               0x0
#define _T2CLK_T2CS0_SIZE                                   0x1
#define _T2CLK_T2CS0_LENGTH                                 0x1
#define _T2CLK_T2CS0_MASK                                   0x1
#define _T2CLK_T2CS1_POSN                                   0x1
#define _T2CLK_T2CS1_POSITION                               0x1
#define _T2CLK_T2CS1_SIZE                                   0x1
#define _T2CLK_T2CS1_LENGTH                                 0x1
#define _T2CLK_T2CS1_MASK                                   0x2
#define _T2CLK_T2CS2_POSN                                   0x2
#define _T2CLK_T2CS2_POSITION                               0x2
#define _T2CLK_T2CS2_SIZE                                   0x1
#define _T2CLK_T2CS2_LENGTH                                 0x1
#define _T2CLK_T2CS2_MASK                                   0x4
#define _T2CLK_T2CS3_POSN                                   0x3
#define _T2CLK_T2CS3_POSITION                               0x3
#define _T2CLK_T2CS3_SIZE                                   0x1
#define _T2CLK_T2CS3_LENGTH                                 0x1
#define _T2CLK_T2CS3_MASK                                   0x8

// Register: T2RST
#define T2RST T2RST
extern volatile unsigned char           T2RST               __at(0x11E);
#ifndef _LIB_BUILD
asm("T2RST equ 011Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :8;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
        unsigned RSEL4                  :1;
    };
    struct {
        unsigned T2RSEL                 :8;
    };
    struct {
        unsigned T2RSEL0                :1;
        unsigned T2RSEL1                :1;
        unsigned T2RSEL2                :1;
        unsigned T2RSEL3                :1;
        unsigned T2RSEL4                :1;
    };
} T2RSTbits_t;
extern volatile T2RSTbits_t T2RSTbits __at(0x11E);
// bitfield macros
#define _T2RST_RSEL_POSN                                    0x0
#define _T2RST_RSEL_POSITION                                0x0
#define _T2RST_RSEL_SIZE                                    0x8
#define _T2RST_RSEL_LENGTH                                  0x8
#define _T2RST_RSEL_MASK                                    0xFF
#define _T2RST_RSEL0_POSN                                   0x0
#define _T2RST_RSEL0_POSITION                               0x0
#define _T2RST_RSEL0_SIZE                                   0x1
#define _T2RST_RSEL0_LENGTH                                 0x1
#define _T2RST_RSEL0_MASK                                   0x1
#define _T2RST_RSEL1_POSN                                   0x1
#define _T2RST_RSEL1_POSITION                               0x1
#define _T2RST_RSEL1_SIZE                                   0x1
#define _T2RST_RSEL1_LENGTH                                 0x1
#define _T2RST_RSEL1_MASK                                   0x2
#define _T2RST_RSEL2_POSN                                   0x2
#define _T2RST_RSEL2_POSITION                               0x2
#define _T2RST_RSEL2_SIZE                                   0x1
#define _T2RST_RSEL2_LENGTH                                 0x1
#define _T2RST_RSEL2_MASK                                   0x4
#define _T2RST_RSEL3_POSN                                   0x3
#define _T2RST_RSEL3_POSITION                               0x3
#define _T2RST_RSEL3_SIZE                                   0x1
#define _T2RST_RSEL3_LENGTH                                 0x1
#define _T2RST_RSEL3_MASK                                   0x8
#define _T2RST_RSEL4_POSN                                   0x4
#define _T2RST_RSEL4_POSITION                               0x4
#define _T2RST_RSEL4_SIZE                                   0x1
#define _T2RST_RSEL4_LENGTH                                 0x1
#define _T2RST_RSEL4_MASK                                   0x10
#define _T2RST_T2RSEL_POSN                                  0x0
#define _T2RST_T2RSEL_POSITION                              0x0
#define _T2RST_T2RSEL_SIZE                                  0x8
#define _T2RST_T2RSEL_LENGTH                                0x8
#define _T2RST_T2RSEL_MASK                                  0xFF
#define _T2RST_T2RSEL0_POSN                                 0x0
#define _T2RST_T2RSEL0_POSITION                             0x0
#define _T2RST_T2RSEL0_SIZE                                 0x1
#define _T2RST_T2RSEL0_LENGTH                               0x1
#define _T2RST_T2RSEL0_MASK                                 0x1
#define _T2RST_T2RSEL1_POSN                                 0x1
#define _T2RST_T2RSEL1_POSITION                             0x1
#define _T2RST_T2RSEL1_SIZE                                 0x1
#define _T2RST_T2RSEL1_LENGTH                               0x1
#define _T2RST_T2RSEL1_MASK                                 0x2
#define _T2RST_T2RSEL2_POSN                                 0x2
#define _T2RST_T2RSEL2_POSITION                             0x2
#define _T2RST_T2RSEL2_SIZE                                 0x1
#define _T2RST_T2RSEL2_LENGTH                               0x1
#define _T2RST_T2RSEL2_MASK                                 0x4
#define _T2RST_T2RSEL3_POSN                                 0x3
#define _T2RST_T2RSEL3_POSITION                             0x3
#define _T2RST_T2RSEL3_SIZE                                 0x1
#define _T2RST_T2RSEL3_LENGTH                               0x1
#define _T2RST_T2RSEL3_MASK                                 0x8
#define _T2RST_T2RSEL4_POSN                                 0x4
#define _T2RST_T2RSEL4_POSITION                             0x4
#define _T2RST_T2RSEL4_SIZE                                 0x1
#define _T2RST_T2RSEL4_LENGTH                               0x1
#define _T2RST_T2RSEL4_MASK                                 0x10

// Register: T4TMR
#define T4TMR T4TMR
extern volatile unsigned char           T4TMR               __at(0x11F);
#ifndef _LIB_BUILD
asm("T4TMR equ 011Fh");
#endif
// aliases
extern volatile unsigned char           TMR4                __at(0x11F);
#ifndef _LIB_BUILD
asm("TMR4 equ 011Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR4                   :8;
    };
} T4TMRbits_t;
extern volatile T4TMRbits_t T4TMRbits __at(0x11F);
// bitfield macros
#define _T4TMR_TMR4_POSN                                    0x0
#define _T4TMR_TMR4_POSITION                                0x0
#define _T4TMR_TMR4_SIZE                                    0x8
#define _T4TMR_TMR4_LENGTH                                  0x8
#define _T4TMR_TMR4_MASK                                    0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TMR4                   :8;
    };
} TMR4bits_t;
extern volatile TMR4bits_t TMR4bits __at(0x11F);
// bitfield macros
#define _TMR4_TMR4_POSN                                     0x0
#define _TMR4_TMR4_POSITION                                 0x0
#define _TMR4_TMR4_SIZE                                     0x8
#define _TMR4_TMR4_LENGTH                                   0x8
#define _TMR4_TMR4_MASK                                     0xFF

// Register: T4PR
#define T4PR T4PR
extern volatile unsigned char           T4PR                __at(0x120);
#ifndef _LIB_BUILD
asm("T4PR equ 0120h");
#endif
// aliases
extern volatile unsigned char           PR4                 __at(0x120);
#ifndef _LIB_BUILD
asm("PR4 equ 0120h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PR4                    :8;
    };
} T4PRbits_t;
extern volatile T4PRbits_t T4PRbits __at(0x120);
// bitfield macros
#define _T4PR_PR4_POSN                                      0x0
#define _T4PR_PR4_POSITION                                  0x0
#define _T4PR_PR4_SIZE                                      0x8
#define _T4PR_PR4_LENGTH                                    0x8
#define _T4PR_PR4_MASK                                      0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned PR4                    :8;
    };
} PR4bits_t;
extern volatile PR4bits_t PR4bits __at(0x120);
// bitfield macros
#define _PR4_PR4_POSN                                       0x0
#define _PR4_PR4_POSITION                                   0x0
#define _PR4_PR4_SIZE                                       0x8
#define _PR4_PR4_LENGTH                                     0x8
#define _PR4_PR4_MASK                                       0xFF

// Register: T4CON
#define T4CON T4CON
extern volatile unsigned char           T4CON               __at(0x121);
#ifndef _LIB_BUILD
asm("T4CON equ 0121h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned OUTPS                  :4;
        unsigned CKPS                   :3;
        unsigned ON                     :1;
    };
    struct {
        unsigned T4OUTPS                :4;
        unsigned T4CKPS                 :3;
        unsigned T4ON                   :1;
    };
    struct {
        unsigned T4OUTPS0               :1;
        unsigned T4OUTPS1               :1;
        unsigned T4OUTPS2               :1;
        unsigned T4OUTPS3               :1;
        unsigned T4CKPS0                :1;
        unsigned T4CKPS1                :1;
        unsigned T4CKPS2                :1;
    };
    struct {
        unsigned OUTPS0                 :1;
        unsigned OUTPS1                 :1;
        unsigned OUTPS2                 :1;
        unsigned OUTPS3                 :1;
        unsigned CKPS0                  :1;
        unsigned CKPS1                  :1;
        unsigned CKPS2                  :1;
        unsigned TMR4ON                 :1;
    };
} T4CONbits_t;
extern volatile T4CONbits_t T4CONbits __at(0x121);
// bitfield macros
#define _T4CON_OUTPS_POSN                                   0x0
#define _T4CON_OUTPS_POSITION                               0x0
#define _T4CON_OUTPS_SIZE                                   0x4
#define _T4CON_OUTPS_LENGTH                                 0x4
#define _T4CON_OUTPS_MASK                                   0xF
#define _T4CON_CKPS_POSN                                    0x4
#define _T4CON_CKPS_POSITION                                0x4
#define _T4CON_CKPS_SIZE                                    0x3
#define _T4CON_CKPS_LENGTH                                  0x3
#define _T4CON_CKPS_MASK                                    0x70
#define _T4CON_ON_POSN                                      0x7
#define _T4CON_ON_POSITION                                  0x7
#define _T4CON_ON_SIZE                                      0x1
#define _T4CON_ON_LENGTH                                    0x1
#define _T4CON_ON_MASK                                      0x80
#define _T4CON_T4OUTPS_POSN                                 0x0
#define _T4CON_T4OUTPS_POSITION                             0x0
#define _T4CON_T4OUTPS_SIZE                                 0x4
#define _T4CON_T4OUTPS_LENGTH                               0x4
#define _T4CON_T4OUTPS_MASK                                 0xF
#define _T4CON_T4CKPS_POSN                                  0x4
#define _T4CON_T4CKPS_POSITION                              0x4
#define _T4CON_T4CKPS_SIZE                                  0x3
#define _T4CON_T4CKPS_LENGTH                                0x3
#define _T4CON_T4CKPS_MASK                                  0x70
#define _T4CON_T4ON_POSN                                    0x7
#define _T4CON_T4ON_POSITION                                0x7
#define _T4CON_T4ON_SIZE                                    0x1
#define _T4CON_T4ON_LENGTH                                  0x1
#define _T4CON_T4ON_MASK                                    0x80
#define _T4CON_T4OUTPS0_POSN                                0x0
#define _T4CON_T4OUTPS0_POSITION                            0x0
#define _T4CON_T4OUTPS0_SIZE                                0x1
#define _T4CON_T4OUTPS0_LENGTH                              0x1
#define _T4CON_T4OUTPS0_MASK                                0x1
#define _T4CON_T4OUTPS1_POSN                                0x1
#define _T4CON_T4OUTPS1_POSITION                            0x1
#define _T4CON_T4OUTPS1_SIZE                                0x1
#define _T4CON_T4OUTPS1_LENGTH                              0x1
#define _T4CON_T4OUTPS1_MASK                                0x2
#define _T4CON_T4OUTPS2_POSN                                0x2
#define _T4CON_T4OUTPS2_POSITION                            0x2
#define _T4CON_T4OUTPS2_SIZE                                0x1
#define _T4CON_T4OUTPS2_LENGTH                              0x1
#define _T4CON_T4OUTPS2_MASK                                0x4
#define _T4CON_T4OUTPS3_POSN                                0x3
#define _T4CON_T4OUTPS3_POSITION                            0x3
#define _T4CON_T4OUTPS3_SIZE                                0x1
#define _T4CON_T4OUTPS3_LENGTH                              0x1
#define _T4CON_T4OUTPS3_MASK                                0x8
#define _T4CON_T4CKPS0_POSN                                 0x4
#define _T4CON_T4CKPS0_POSITION                             0x4
#define _T4CON_T4CKPS0_SIZE                                 0x1
#define _T4CON_T4CKPS0_LENGTH                               0x1
#define _T4CON_T4CKPS0_MASK                                 0x10
#define _T4CON_T4CKPS1_POSN                                 0x5
#define _T4CON_T4CKPS1_POSITION                             0x5
#define _T4CON_T4CKPS1_SIZE                                 0x1
#define _T4CON_T4CKPS1_LENGTH                               0x1
#define _T4CON_T4CKPS1_MASK                                 0x20
#define _T4CON_T4CKPS2_POSN                                 0x6
#define _T4CON_T4CKPS2_POSITION                             0x6
#define _T4CON_T4CKPS2_SIZE                                 0x1
#define _T4CON_T4CKPS2_LENGTH                               0x1
#define _T4CON_T4CKPS2_MASK                                 0x40
#define _T4CON_OUTPS0_POSN                                  0x0
#define _T4CON_OUTPS0_POSITION                              0x0
#define _T4CON_OUTPS0_SIZE                                  0x1
#define _T4CON_OUTPS0_LENGTH                                0x1
#define _T4CON_OUTPS0_MASK                                  0x1
#define _T4CON_OUTPS1_POSN                                  0x1
#define _T4CON_OUTPS1_POSITION                              0x1
#define _T4CON_OUTPS1_SIZE                                  0x1
#define _T4CON_OUTPS1_LENGTH                                0x1
#define _T4CON_OUTPS1_MASK                                  0x2
#define _T4CON_OUTPS2_POSN                                  0x2
#define _T4CON_OUTPS2_POSITION                              0x2
#define _T4CON_OUTPS2_SIZE                                  0x1
#define _T4CON_OUTPS2_LENGTH                                0x1
#define _T4CON_OUTPS2_MASK                                  0x4
#define _T4CON_OUTPS3_POSN                                  0x3
#define _T4CON_OUTPS3_POSITION                              0x3
#define _T4CON_OUTPS3_SIZE                                  0x1
#define _T4CON_OUTPS3_LENGTH                                0x1
#define _T4CON_OUTPS3_MASK                                  0x8
#define _T4CON_CKPS0_POSN                                   0x4
#define _T4CON_CKPS0_POSITION                               0x4
#define _T4CON_CKPS0_SIZE                                   0x1
#define _T4CON_CKPS0_LENGTH                                 0x1
#define _T4CON_CKPS0_MASK                                   0x10
#define _T4CON_CKPS1_POSN                                   0x5
#define _T4CON_CKPS1_POSITION                               0x5
#define _T4CON_CKPS1_SIZE                                   0x1
#define _T4CON_CKPS1_LENGTH                                 0x1
#define _T4CON_CKPS1_MASK                                   0x20
#define _T4CON_CKPS2_POSN                                   0x6
#define _T4CON_CKPS2_POSITION                               0x6
#define _T4CON_CKPS2_SIZE                                   0x1
#define _T4CON_CKPS2_LENGTH                                 0x1
#define _T4CON_CKPS2_MASK                                   0x40
#define _T4CON_TMR4ON_POSN                                  0x7
#define _T4CON_TMR4ON_POSITION                              0x7
#define _T4CON_TMR4ON_SIZE                                  0x1
#define _T4CON_TMR4ON_LENGTH                                0x1
#define _T4CON_TMR4ON_MASK                                  0x80

// Register: T4HLT
#define T4HLT T4HLT
extern volatile unsigned char           T4HLT               __at(0x122);
#ifndef _LIB_BUILD
asm("T4HLT equ 0122h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :5;
        unsigned CKSYNC                 :1;
        unsigned CKPOL                  :1;
        unsigned PSYNC                  :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
        unsigned MODE4                  :1;
    };
    struct {
        unsigned T4MODE                 :5;
        unsigned T4CKSYNC               :1;
        unsigned T4CKPOL                :1;
        unsigned T4PSYNC                :1;
    };
    struct {
        unsigned T4MODE0                :1;
        unsigned T4MODE1                :1;
        unsigned T4MODE2                :1;
        unsigned T4MODE3                :1;
        unsigned T4MODE4                :1;
    };
} T4HLTbits_t;
extern volatile T4HLTbits_t T4HLTbits __at(0x122);
// bitfield macros
#define _T4HLT_MODE_POSN                                    0x0
#define _T4HLT_MODE_POSITION                                0x0
#define _T4HLT_MODE_SIZE                                    0x5
#define _T4HLT_MODE_LENGTH                                  0x5
#define _T4HLT_MODE_MASK                                    0x1F
#define _T4HLT_CKSYNC_POSN                                  0x5
#define _T4HLT_CKSYNC_POSITION                              0x5
#define _T4HLT_CKSYNC_SIZE                                  0x1
#define _T4HLT_CKSYNC_LENGTH                                0x1
#define _T4HLT_CKSYNC_MASK                                  0x20
#define _T4HLT_CKPOL_POSN                                   0x6
#define _T4HLT_CKPOL_POSITION                               0x6
#define _T4HLT_CKPOL_SIZE                                   0x1
#define _T4HLT_CKPOL_LENGTH                                 0x1
#define _T4HLT_CKPOL_MASK                                   0x40
#define _T4HLT_PSYNC_POSN                                   0x7
#define _T4HLT_PSYNC_POSITION                               0x7
#define _T4HLT_PSYNC_SIZE                                   0x1
#define _T4HLT_PSYNC_LENGTH                                 0x1
#define _T4HLT_PSYNC_MASK                                   0x80
#define _T4HLT_MODE0_POSN                                   0x0
#define _T4HLT_MODE0_POSITION                               0x0
#define _T4HLT_MODE0_SIZE                                   0x1
#define _T4HLT_MODE0_LENGTH                                 0x1
#define _T4HLT_MODE0_MASK                                   0x1
#define _T4HLT_MODE1_POSN                                   0x1
#define _T4HLT_MODE1_POSITION                               0x1
#define _T4HLT_MODE1_SIZE                                   0x1
#define _T4HLT_MODE1_LENGTH                                 0x1
#define _T4HLT_MODE1_MASK                                   0x2
#define _T4HLT_MODE2_POSN                                   0x2
#define _T4HLT_MODE2_POSITION                               0x2
#define _T4HLT_MODE2_SIZE                                   0x1
#define _T4HLT_MODE2_LENGTH                                 0x1
#define _T4HLT_MODE2_MASK                                   0x4
#define _T4HLT_MODE3_POSN                                   0x3
#define _T4HLT_MODE3_POSITION                               0x3
#define _T4HLT_MODE3_SIZE                                   0x1
#define _T4HLT_MODE3_LENGTH                                 0x1
#define _T4HLT_MODE3_MASK                                   0x8
#define _T4HLT_MODE4_POSN                                   0x4
#define _T4HLT_MODE4_POSITION                               0x4
#define _T4HLT_MODE4_SIZE                                   0x1
#define _T4HLT_MODE4_LENGTH                                 0x1
#define _T4HLT_MODE4_MASK                                   0x10
#define _T4HLT_T4MODE_POSN                                  0x0
#define _T4HLT_T4MODE_POSITION                              0x0
#define _T4HLT_T4MODE_SIZE                                  0x5
#define _T4HLT_T4MODE_LENGTH                                0x5
#define _T4HLT_T4MODE_MASK                                  0x1F
#define _T4HLT_T4CKSYNC_POSN                                0x5
#define _T4HLT_T4CKSYNC_POSITION                            0x5
#define _T4HLT_T4CKSYNC_SIZE                                0x1
#define _T4HLT_T4CKSYNC_LENGTH                              0x1
#define _T4HLT_T4CKSYNC_MASK                                0x20
#define _T4HLT_T4CKPOL_POSN                                 0x6
#define _T4HLT_T4CKPOL_POSITION                             0x6
#define _T4HLT_T4CKPOL_SIZE                                 0x1
#define _T4HLT_T4CKPOL_LENGTH                               0x1
#define _T4HLT_T4CKPOL_MASK                                 0x40
#define _T4HLT_T4PSYNC_POSN                                 0x7
#define _T4HLT_T4PSYNC_POSITION                             0x7
#define _T4HLT_T4PSYNC_SIZE                                 0x1
#define _T4HLT_T4PSYNC_LENGTH                               0x1
#define _T4HLT_T4PSYNC_MASK                                 0x80
#define _T4HLT_T4MODE0_POSN                                 0x0
#define _T4HLT_T4MODE0_POSITION                             0x0
#define _T4HLT_T4MODE0_SIZE                                 0x1
#define _T4HLT_T4MODE0_LENGTH                               0x1
#define _T4HLT_T4MODE0_MASK                                 0x1
#define _T4HLT_T4MODE1_POSN                                 0x1
#define _T4HLT_T4MODE1_POSITION                             0x1
#define _T4HLT_T4MODE1_SIZE                                 0x1
#define _T4HLT_T4MODE1_LENGTH                               0x1
#define _T4HLT_T4MODE1_MASK                                 0x2
#define _T4HLT_T4MODE2_POSN                                 0x2
#define _T4HLT_T4MODE2_POSITION                             0x2
#define _T4HLT_T4MODE2_SIZE                                 0x1
#define _T4HLT_T4MODE2_LENGTH                               0x1
#define _T4HLT_T4MODE2_MASK                                 0x4
#define _T4HLT_T4MODE3_POSN                                 0x3
#define _T4HLT_T4MODE3_POSITION                             0x3
#define _T4HLT_T4MODE3_SIZE                                 0x1
#define _T4HLT_T4MODE3_LENGTH                               0x1
#define _T4HLT_T4MODE3_MASK                                 0x8
#define _T4HLT_T4MODE4_POSN                                 0x4
#define _T4HLT_T4MODE4_POSITION                             0x4
#define _T4HLT_T4MODE4_SIZE                                 0x1
#define _T4HLT_T4MODE4_LENGTH                               0x1
#define _T4HLT_T4MODE4_MASK                                 0x10

// Register: T4CLKCON
#define T4CLKCON T4CLKCON
extern volatile unsigned char           T4CLKCON            __at(0x123);
#ifndef _LIB_BUILD
asm("T4CLKCON equ 0123h");
#endif
// aliases
extern volatile unsigned char           T4CLK               __at(0x123);
#ifndef _LIB_BUILD
asm("T4CLK equ 0123h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T4CS                   :8;
    };
    struct {
        unsigned T4CS0                  :1;
        unsigned T4CS1                  :1;
        unsigned T4CS2                  :1;
        unsigned T4CS3                  :1;
    };
} T4CLKCONbits_t;
extern volatile T4CLKCONbits_t T4CLKCONbits __at(0x123);
// bitfield macros
#define _T4CLKCON_CS_POSN                                   0x0
#define _T4CLKCON_CS_POSITION                               0x0
#define _T4CLKCON_CS_SIZE                                   0x8
#define _T4CLKCON_CS_LENGTH                                 0x8
#define _T4CLKCON_CS_MASK                                   0xFF
#define _T4CLKCON_CS0_POSN                                  0x0
#define _T4CLKCON_CS0_POSITION                              0x0
#define _T4CLKCON_CS0_SIZE                                  0x1
#define _T4CLKCON_CS0_LENGTH                                0x1
#define _T4CLKCON_CS0_MASK                                  0x1
#define _T4CLKCON_CS1_POSN                                  0x1
#define _T4CLKCON_CS1_POSITION                              0x1
#define _T4CLKCON_CS1_SIZE                                  0x1
#define _T4CLKCON_CS1_LENGTH                                0x1
#define _T4CLKCON_CS1_MASK                                  0x2
#define _T4CLKCON_CS2_POSN                                  0x2
#define _T4CLKCON_CS2_POSITION                              0x2
#define _T4CLKCON_CS2_SIZE                                  0x1
#define _T4CLKCON_CS2_LENGTH                                0x1
#define _T4CLKCON_CS2_MASK                                  0x4
#define _T4CLKCON_CS3_POSN                                  0x3
#define _T4CLKCON_CS3_POSITION                              0x3
#define _T4CLKCON_CS3_SIZE                                  0x1
#define _T4CLKCON_CS3_LENGTH                                0x1
#define _T4CLKCON_CS3_MASK                                  0x8
#define _T4CLKCON_T4CS_POSN                                 0x0
#define _T4CLKCON_T4CS_POSITION                             0x0
#define _T4CLKCON_T4CS_SIZE                                 0x8
#define _T4CLKCON_T4CS_LENGTH                               0x8
#define _T4CLKCON_T4CS_MASK                                 0xFF
#define _T4CLKCON_T4CS0_POSN                                0x0
#define _T4CLKCON_T4CS0_POSITION                            0x0
#define _T4CLKCON_T4CS0_SIZE                                0x1
#define _T4CLKCON_T4CS0_LENGTH                              0x1
#define _T4CLKCON_T4CS0_MASK                                0x1
#define _T4CLKCON_T4CS1_POSN                                0x1
#define _T4CLKCON_T4CS1_POSITION                            0x1
#define _T4CLKCON_T4CS1_SIZE                                0x1
#define _T4CLKCON_T4CS1_LENGTH                              0x1
#define _T4CLKCON_T4CS1_MASK                                0x2
#define _T4CLKCON_T4CS2_POSN                                0x2
#define _T4CLKCON_T4CS2_POSITION                            0x2
#define _T4CLKCON_T4CS2_SIZE                                0x1
#define _T4CLKCON_T4CS2_LENGTH                              0x1
#define _T4CLKCON_T4CS2_MASK                                0x4
#define _T4CLKCON_T4CS3_POSN                                0x3
#define _T4CLKCON_T4CS3_POSITION                            0x3
#define _T4CLKCON_T4CS3_SIZE                                0x1
#define _T4CLKCON_T4CS3_LENGTH                              0x1
#define _T4CLKCON_T4CS3_MASK                                0x8
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
    };
    struct {
        unsigned T4CS                   :8;
    };
    struct {
        unsigned T4CS0                  :1;
        unsigned T4CS1                  :1;
        unsigned T4CS2                  :1;
        unsigned T4CS3                  :1;
    };
} T4CLKbits_t;
extern volatile T4CLKbits_t T4CLKbits __at(0x123);
// bitfield macros
#define _T4CLK_CS_POSN                                      0x0
#define _T4CLK_CS_POSITION                                  0x0
#define _T4CLK_CS_SIZE                                      0x8
#define _T4CLK_CS_LENGTH                                    0x8
#define _T4CLK_CS_MASK                                      0xFF
#define _T4CLK_CS0_POSN                                     0x0
#define _T4CLK_CS0_POSITION                                 0x0
#define _T4CLK_CS0_SIZE                                     0x1
#define _T4CLK_CS0_LENGTH                                   0x1
#define _T4CLK_CS0_MASK                                     0x1
#define _T4CLK_CS1_POSN                                     0x1
#define _T4CLK_CS1_POSITION                                 0x1
#define _T4CLK_CS1_SIZE                                     0x1
#define _T4CLK_CS1_LENGTH                                   0x1
#define _T4CLK_CS1_MASK                                     0x2
#define _T4CLK_CS2_POSN                                     0x2
#define _T4CLK_CS2_POSITION                                 0x2
#define _T4CLK_CS2_SIZE                                     0x1
#define _T4CLK_CS2_LENGTH                                   0x1
#define _T4CLK_CS2_MASK                                     0x4
#define _T4CLK_CS3_POSN                                     0x3
#define _T4CLK_CS3_POSITION                                 0x3
#define _T4CLK_CS3_SIZE                                     0x1
#define _T4CLK_CS3_LENGTH                                   0x1
#define _T4CLK_CS3_MASK                                     0x8
#define _T4CLK_T4CS_POSN                                    0x0
#define _T4CLK_T4CS_POSITION                                0x0
#define _T4CLK_T4CS_SIZE                                    0x8
#define _T4CLK_T4CS_LENGTH                                  0x8
#define _T4CLK_T4CS_MASK                                    0xFF
#define _T4CLK_T4CS0_POSN                                   0x0
#define _T4CLK_T4CS0_POSITION                               0x0
#define _T4CLK_T4CS0_SIZE                                   0x1
#define _T4CLK_T4CS0_LENGTH                                 0x1
#define _T4CLK_T4CS0_MASK                                   0x1
#define _T4CLK_T4CS1_POSN                                   0x1
#define _T4CLK_T4CS1_POSITION                               0x1
#define _T4CLK_T4CS1_SIZE                                   0x1
#define _T4CLK_T4CS1_LENGTH                                 0x1
#define _T4CLK_T4CS1_MASK                                   0x2
#define _T4CLK_T4CS2_POSN                                   0x2
#define _T4CLK_T4CS2_POSITION                               0x2
#define _T4CLK_T4CS2_SIZE                                   0x1
#define _T4CLK_T4CS2_LENGTH                                 0x1
#define _T4CLK_T4CS2_MASK                                   0x4
#define _T4CLK_T4CS3_POSN                                   0x3
#define _T4CLK_T4CS3_POSITION                               0x3
#define _T4CLK_T4CS3_SIZE                                   0x1
#define _T4CLK_T4CS3_LENGTH                                 0x1
#define _T4CLK_T4CS3_MASK                                   0x8

// Register: T4RST
#define T4RST T4RST
extern volatile unsigned char           T4RST               __at(0x124);
#ifndef _LIB_BUILD
asm("T4RST equ 0124h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RSEL                   :8;
    };
    struct {
        unsigned RSEL0                  :1;
        unsigned RSEL1                  :1;
        unsigned RSEL2                  :1;
        unsigned RSEL3                  :1;
        unsigned RSEL4                  :1;
    };
    struct {
        unsigned T4RSEL                 :8;
    };
    struct {
        unsigned T4RSEL0                :1;
        unsigned T4RSEL1                :1;
        unsigned T4RSEL2                :1;
        unsigned T4RSEL3                :1;
        unsigned T4RSEL4                :1;
    };
} T4RSTbits_t;
extern volatile T4RSTbits_t T4RSTbits __at(0x124);
// bitfield macros
#define _T4RST_RSEL_POSN                                    0x0
#define _T4RST_RSEL_POSITION                                0x0
#define _T4RST_RSEL_SIZE                                    0x8
#define _T4RST_RSEL_LENGTH                                  0x8
#define _T4RST_RSEL_MASK                                    0xFF
#define _T4RST_RSEL0_POSN                                   0x0
#define _T4RST_RSEL0_POSITION                               0x0
#define _T4RST_RSEL0_SIZE                                   0x1
#define _T4RST_RSEL0_LENGTH                                 0x1
#define _T4RST_RSEL0_MASK                                   0x1
#define _T4RST_RSEL1_POSN                                   0x1
#define _T4RST_RSEL1_POSITION                               0x1
#define _T4RST_RSEL1_SIZE                                   0x1
#define _T4RST_RSEL1_LENGTH                                 0x1
#define _T4RST_RSEL1_MASK                                   0x2
#define _T4RST_RSEL2_POSN                                   0x2
#define _T4RST_RSEL2_POSITION                               0x2
#define _T4RST_RSEL2_SIZE                                   0x1
#define _T4RST_RSEL2_LENGTH                                 0x1
#define _T4RST_RSEL2_MASK                                   0x4
#define _T4RST_RSEL3_POSN                                   0x3
#define _T4RST_RSEL3_POSITION                               0x3
#define _T4RST_RSEL3_SIZE                                   0x1
#define _T4RST_RSEL3_LENGTH                                 0x1
#define _T4RST_RSEL3_MASK                                   0x8
#define _T4RST_RSEL4_POSN                                   0x4
#define _T4RST_RSEL4_POSITION                               0x4
#define _T4RST_RSEL4_SIZE                                   0x1
#define _T4RST_RSEL4_LENGTH                                 0x1
#define _T4RST_RSEL4_MASK                                   0x10
#define _T4RST_T4RSEL_POSN                                  0x0
#define _T4RST_T4RSEL_POSITION                              0x0
#define _T4RST_T4RSEL_SIZE                                  0x8
#define _T4RST_T4RSEL_LENGTH                                0x8
#define _T4RST_T4RSEL_MASK                                  0xFF
#define _T4RST_T4RSEL0_POSN                                 0x0
#define _T4RST_T4RSEL0_POSITION                             0x0
#define _T4RST_T4RSEL0_SIZE                                 0x1
#define _T4RST_T4RSEL0_LENGTH                               0x1
#define _T4RST_T4RSEL0_MASK                                 0x1
#define _T4RST_T4RSEL1_POSN                                 0x1
#define _T4RST_T4RSEL1_POSITION                             0x1
#define _T4RST_T4RSEL1_SIZE                                 0x1
#define _T4RST_T4RSEL1_LENGTH                               0x1
#define _T4RST_T4RSEL1_MASK                                 0x2
#define _T4RST_T4RSEL2_POSN                                 0x2
#define _T4RST_T4RSEL2_POSITION                             0x2
#define _T4RST_T4RSEL2_SIZE                                 0x1
#define _T4RST_T4RSEL2_LENGTH                               0x1
#define _T4RST_T4RSEL2_MASK                                 0x4
#define _T4RST_T4RSEL3_POSN                                 0x3
#define _T4RST_T4RSEL3_POSITION                             0x3
#define _T4RST_T4RSEL3_SIZE                                 0x1
#define _T4RST_T4RSEL3_LENGTH                               0x1
#define _T4RST_T4RSEL3_MASK                                 0x8
#define _T4RST_T4RSEL4_POSN                                 0x4
#define _T4RST_T4RSEL4_POSITION                             0x4
#define _T4RST_T4RSEL4_SIZE                                 0x1
#define _T4RST_T4RSEL4_LENGTH                               0x1
#define _T4RST_T4RSEL4_MASK                                 0x10

// Register: TUCHAIN
#define TUCHAIN TUCHAIN
extern volatile unsigned char           TUCHAIN             __at(0x12B);
#ifndef _LIB_BUILD
asm("TUCHAIN equ 012Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CH16AB                 :1;
    };
} TUCHAINbits_t;
extern volatile TUCHAINbits_t TUCHAINbits __at(0x12B);
// bitfield macros
#define _TUCHAIN_CH16AB_POSN                                0x0
#define _TUCHAIN_CH16AB_POSITION                            0x0
#define _TUCHAIN_CH16AB_SIZE                                0x1
#define _TUCHAIN_CH16AB_LENGTH                              0x1
#define _TUCHAIN_CH16AB_MASK                                0x1

// Register: TU16ACON0
#define TU16ACON0 TU16ACON0
extern volatile unsigned char           TU16ACON0           __at(0x12C);
#ifndef _LIB_BUILD
asm("TU16ACON0 equ 012Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CIE                    :1;
        unsigned ZIE                    :1;
        unsigned PRIE                   :1;
        unsigned RDSEL                  :1;
        unsigned OPOL                   :1;
        unsigned OM                     :1;
        unsigned CPOL                   :1;
        unsigned ON                     :1;
    };
    struct {
        unsigned TU16ACIE               :1;
        unsigned TU16AZIE               :1;
        unsigned TU16APRIE              :1;
        unsigned TU16ARDSEL             :1;
        unsigned TU16AOPOL              :1;
        unsigned TU16AOM                :1;
        unsigned TU16ACPOL              :1;
        unsigned TU16AON                :1;
    };
} TU16ACON0bits_t;
extern volatile TU16ACON0bits_t TU16ACON0bits __at(0x12C);
// bitfield macros
#define _TU16ACON0_CIE_POSN                                 0x0
#define _TU16ACON0_CIE_POSITION                             0x0
#define _TU16ACON0_CIE_SIZE                                 0x1
#define _TU16ACON0_CIE_LENGTH                               0x1
#define _TU16ACON0_CIE_MASK                                 0x1
#define _TU16ACON0_ZIE_POSN                                 0x1
#define _TU16ACON0_ZIE_POSITION                             0x1
#define _TU16ACON0_ZIE_SIZE                                 0x1
#define _TU16ACON0_ZIE_LENGTH                               0x1
#define _TU16ACON0_ZIE_MASK                                 0x2
#define _TU16ACON0_PRIE_POSN                                0x2
#define _TU16ACON0_PRIE_POSITION                            0x2
#define _TU16ACON0_PRIE_SIZE                                0x1
#define _TU16ACON0_PRIE_LENGTH                              0x1
#define _TU16ACON0_PRIE_MASK                                0x4
#define _TU16ACON0_RDSEL_POSN                               0x3
#define _TU16ACON0_RDSEL_POSITION                           0x3
#define _TU16ACON0_RDSEL_SIZE                               0x1
#define _TU16ACON0_RDSEL_LENGTH                             0x1
#define _TU16ACON0_RDSEL_MASK                               0x8
#define _TU16ACON0_OPOL_POSN                                0x4
#define _TU16ACON0_OPOL_POSITION                            0x4
#define _TU16ACON0_OPOL_SIZE                                0x1
#define _TU16ACON0_OPOL_LENGTH                              0x1
#define _TU16ACON0_OPOL_MASK                                0x10
#define _TU16ACON0_OM_POSN                                  0x5
#define _TU16ACON0_OM_POSITION                              0x5
#define _TU16ACON0_OM_SIZE                                  0x1
#define _TU16ACON0_OM_LENGTH                                0x1
#define _TU16ACON0_OM_MASK                                  0x20
#define _TU16ACON0_CPOL_POSN                                0x6
#define _TU16ACON0_CPOL_POSITION                            0x6
#define _TU16ACON0_CPOL_SIZE                                0x1
#define _TU16ACON0_CPOL_LENGTH                              0x1
#define _TU16ACON0_CPOL_MASK                                0x40
#define _TU16ACON0_ON_POSN                                  0x7
#define _TU16ACON0_ON_POSITION                              0x7
#define _TU16ACON0_ON_SIZE                                  0x1
#define _TU16ACON0_ON_LENGTH                                0x1
#define _TU16ACON0_ON_MASK                                  0x80
#define _TU16ACON0_TU16ACIE_POSN                            0x0
#define _TU16ACON0_TU16ACIE_POSITION                        0x0
#define _TU16ACON0_TU16ACIE_SIZE                            0x1
#define _TU16ACON0_TU16ACIE_LENGTH                          0x1
#define _TU16ACON0_TU16ACIE_MASK                            0x1
#define _TU16ACON0_TU16AZIE_POSN                            0x1
#define _TU16ACON0_TU16AZIE_POSITION                        0x1
#define _TU16ACON0_TU16AZIE_SIZE                            0x1
#define _TU16ACON0_TU16AZIE_LENGTH                          0x1
#define _TU16ACON0_TU16AZIE_MASK                            0x2
#define _TU16ACON0_TU16APRIE_POSN                           0x2
#define _TU16ACON0_TU16APRIE_POSITION                       0x2
#define _TU16ACON0_TU16APRIE_SIZE                           0x1
#define _TU16ACON0_TU16APRIE_LENGTH                         0x1
#define _TU16ACON0_TU16APRIE_MASK                           0x4
#define _TU16ACON0_TU16ARDSEL_POSN                          0x3
#define _TU16ACON0_TU16ARDSEL_POSITION                      0x3
#define _TU16ACON0_TU16ARDSEL_SIZE                          0x1
#define _TU16ACON0_TU16ARDSEL_LENGTH                        0x1
#define _TU16ACON0_TU16ARDSEL_MASK                          0x8
#define _TU16ACON0_TU16AOPOL_POSN                           0x4
#define _TU16ACON0_TU16AOPOL_POSITION                       0x4
#define _TU16ACON0_TU16AOPOL_SIZE                           0x1
#define _TU16ACON0_TU16AOPOL_LENGTH                         0x1
#define _TU16ACON0_TU16AOPOL_MASK                           0x10
#define _TU16ACON0_TU16AOM_POSN                             0x5
#define _TU16ACON0_TU16AOM_POSITION                         0x5
#define _TU16ACON0_TU16AOM_SIZE                             0x1
#define _TU16ACON0_TU16AOM_LENGTH                           0x1
#define _TU16ACON0_TU16AOM_MASK                             0x20
#define _TU16ACON0_TU16ACPOL_POSN                           0x6
#define _TU16ACON0_TU16ACPOL_POSITION                       0x6
#define _TU16ACON0_TU16ACPOL_SIZE                           0x1
#define _TU16ACON0_TU16ACPOL_LENGTH                         0x1
#define _TU16ACON0_TU16ACPOL_MASK                           0x40
#define _TU16ACON0_TU16AON_POSN                             0x7
#define _TU16ACON0_TU16AON_POSITION                         0x7
#define _TU16ACON0_TU16AON_SIZE                             0x1
#define _TU16ACON0_TU16AON_LENGTH                           0x1
#define _TU16ACON0_TU16AON_MASK                             0x80

// Register: TU16ACON1
#define TU16ACON1 TU16ACON1
extern volatile unsigned char           TU16ACON1           __at(0x12D);
#ifndef _LIB_BUILD
asm("TU16ACON1 equ 012Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CIF                    :1;
        unsigned ZIF                    :1;
        unsigned PRIF                   :1;
        unsigned CAPT                   :1;
        unsigned LIMIT                  :1;
        unsigned CLR                    :1;
        unsigned OSEN                   :1;
        unsigned RUN                    :1;
    };
    struct {
        unsigned TU16ACIF               :1;
        unsigned TU16AZIF               :1;
        unsigned TU16APRIF              :1;
        unsigned TU16ACAPT              :1;
        unsigned TU16ALIMIT             :1;
        unsigned TU16ACLR               :1;
        unsigned TMRAOSEN               :1;
        unsigned TU16ARUN               :1;
    };
} TU16ACON1bits_t;
extern volatile TU16ACON1bits_t TU16ACON1bits __at(0x12D);
// bitfield macros
#define _TU16ACON1_CIF_POSN                                 0x0
#define _TU16ACON1_CIF_POSITION                             0x0
#define _TU16ACON1_CIF_SIZE                                 0x1
#define _TU16ACON1_CIF_LENGTH                               0x1
#define _TU16ACON1_CIF_MASK                                 0x1
#define _TU16ACON1_ZIF_POSN                                 0x1
#define _TU16ACON1_ZIF_POSITION                             0x1
#define _TU16ACON1_ZIF_SIZE                                 0x1
#define _TU16ACON1_ZIF_LENGTH                               0x1
#define _TU16ACON1_ZIF_MASK                                 0x2
#define _TU16ACON1_PRIF_POSN                                0x2
#define _TU16ACON1_PRIF_POSITION                            0x2
#define _TU16ACON1_PRIF_SIZE                                0x1
#define _TU16ACON1_PRIF_LENGTH                              0x1
#define _TU16ACON1_PRIF_MASK                                0x4
#define _TU16ACON1_CAPT_POSN                                0x3
#define _TU16ACON1_CAPT_POSITION                            0x3
#define _TU16ACON1_CAPT_SIZE                                0x1
#define _TU16ACON1_CAPT_LENGTH                              0x1
#define _TU16ACON1_CAPT_MASK                                0x8
#define _TU16ACON1_LIMIT_POSN                               0x4
#define _TU16ACON1_LIMIT_POSITION                           0x4
#define _TU16ACON1_LIMIT_SIZE                               0x1
#define _TU16ACON1_LIMIT_LENGTH                             0x1
#define _TU16ACON1_LIMIT_MASK                               0x10
#define _TU16ACON1_CLR_POSN                                 0x5
#define _TU16ACON1_CLR_POSITION                             0x5
#define _TU16ACON1_CLR_SIZE                                 0x1
#define _TU16ACON1_CLR_LENGTH                               0x1
#define _TU16ACON1_CLR_MASK                                 0x20
#define _TU16ACON1_OSEN_POSN                                0x6
#define _TU16ACON1_OSEN_POSITION                            0x6
#define _TU16ACON1_OSEN_SIZE                                0x1
#define _TU16ACON1_OSEN_LENGTH                              0x1
#define _TU16ACON1_OSEN_MASK                                0x40
#define _TU16ACON1_RUN_POSN                                 0x7
#define _TU16ACON1_RUN_POSITION                             0x7
#define _TU16ACON1_RUN_SIZE                                 0x1
#define _TU16ACON1_RUN_LENGTH                               0x1
#define _TU16ACON1_RUN_MASK                                 0x80
#define _TU16ACON1_TU16ACIF_POSN                            0x0
#define _TU16ACON1_TU16ACIF_POSITION                        0x0
#define _TU16ACON1_TU16ACIF_SIZE                            0x1
#define _TU16ACON1_TU16ACIF_LENGTH                          0x1
#define _TU16ACON1_TU16ACIF_MASK                            0x1
#define _TU16ACON1_TU16AZIF_POSN                            0x1
#define _TU16ACON1_TU16AZIF_POSITION                        0x1
#define _TU16ACON1_TU16AZIF_SIZE                            0x1
#define _TU16ACON1_TU16AZIF_LENGTH                          0x1
#define _TU16ACON1_TU16AZIF_MASK                            0x2
#define _TU16ACON1_TU16APRIF_POSN                           0x2
#define _TU16ACON1_TU16APRIF_POSITION                       0x2
#define _TU16ACON1_TU16APRIF_SIZE                           0x1
#define _TU16ACON1_TU16APRIF_LENGTH                         0x1
#define _TU16ACON1_TU16APRIF_MASK                           0x4
#define _TU16ACON1_TU16ACAPT_POSN                           0x3
#define _TU16ACON1_TU16ACAPT_POSITION                       0x3
#define _TU16ACON1_TU16ACAPT_SIZE                           0x1
#define _TU16ACON1_TU16ACAPT_LENGTH                         0x1
#define _TU16ACON1_TU16ACAPT_MASK                           0x8
#define _TU16ACON1_TU16ALIMIT_POSN                          0x4
#define _TU16ACON1_TU16ALIMIT_POSITION                      0x4
#define _TU16ACON1_TU16ALIMIT_SIZE                          0x1
#define _TU16ACON1_TU16ALIMIT_LENGTH                        0x1
#define _TU16ACON1_TU16ALIMIT_MASK                          0x10
#define _TU16ACON1_TU16ACLR_POSN                            0x5
#define _TU16ACON1_TU16ACLR_POSITION                        0x5
#define _TU16ACON1_TU16ACLR_SIZE                            0x1
#define _TU16ACON1_TU16ACLR_LENGTH                          0x1
#define _TU16ACON1_TU16ACLR_MASK                            0x20
#define _TU16ACON1_TMRAOSEN_POSN                            0x6
#define _TU16ACON1_TMRAOSEN_POSITION                        0x6
#define _TU16ACON1_TMRAOSEN_SIZE                            0x1
#define _TU16ACON1_TMRAOSEN_LENGTH                          0x1
#define _TU16ACON1_TMRAOSEN_MASK                            0x40
#define _TU16ACON1_TU16ARUN_POSN                            0x7
#define _TU16ACON1_TU16ARUN_POSITION                        0x7
#define _TU16ACON1_TU16ARUN_SIZE                            0x1
#define _TU16ACON1_TU16ARUN_LENGTH                          0x1
#define _TU16ACON1_TU16ARUN_MASK                            0x80

// Register: TU16AHLT
#define TU16AHLT TU16AHLT
extern volatile unsigned char           TU16AHLT            __at(0x12E);
#ifndef _LIB_BUILD
asm("TU16AHLT equ 012Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STOP                   :2;
        unsigned RESET                  :2;
        unsigned START                  :2;
        unsigned CSYNC                  :1;
        unsigned EPOL                   :1;
    };
    struct {
        unsigned STOP0                  :1;
        unsigned STOP1                  :1;
        unsigned RESET0                 :1;
        unsigned RESET1                 :1;
        unsigned START0                 :1;
        unsigned START1                 :1;
    };
    struct {
        unsigned TU16ASTOP              :2;
        unsigned TU16ARESET             :2;
        unsigned TU16ASTART             :2;
        unsigned TU16ACSYNC             :1;
        unsigned TU16AEPOL              :1;
    };
    struct {
        unsigned TU16ASTOP0             :1;
        unsigned TU16ASTOP1             :1;
        unsigned TU16ARESET0            :1;
        unsigned TU16ARESET1            :1;
        unsigned TU16ASTART0            :1;
        unsigned TU16ASTART1            :1;
    };
} TU16AHLTbits_t;
extern volatile TU16AHLTbits_t TU16AHLTbits __at(0x12E);
// bitfield macros
#define _TU16AHLT_STOP_POSN                                 0x0
#define _TU16AHLT_STOP_POSITION                             0x0
#define _TU16AHLT_STOP_SIZE                                 0x2
#define _TU16AHLT_STOP_LENGTH                               0x2
#define _TU16AHLT_STOP_MASK                                 0x3
#define _TU16AHLT_RESET_POSN                                0x2
#define _TU16AHLT_RESET_POSITION                            0x2
#define _TU16AHLT_RESET_SIZE                                0x2
#define _TU16AHLT_RESET_LENGTH                              0x2
#define _TU16AHLT_RESET_MASK                                0xC
#define _TU16AHLT_START_POSN                                0x4
#define _TU16AHLT_START_POSITION                            0x4
#define _TU16AHLT_START_SIZE                                0x2
#define _TU16AHLT_START_LENGTH                              0x2
#define _TU16AHLT_START_MASK                                0x30
#define _TU16AHLT_CSYNC_POSN                                0x6
#define _TU16AHLT_CSYNC_POSITION                            0x6
#define _TU16AHLT_CSYNC_SIZE                                0x1
#define _TU16AHLT_CSYNC_LENGTH                              0x1
#define _TU16AHLT_CSYNC_MASK                                0x40
#define _TU16AHLT_EPOL_POSN                                 0x7
#define _TU16AHLT_EPOL_POSITION                             0x7
#define _TU16AHLT_EPOL_SIZE                                 0x1
#define _TU16AHLT_EPOL_LENGTH                               0x1
#define _TU16AHLT_EPOL_MASK                                 0x80
#define _TU16AHLT_STOP0_POSN                                0x0
#define _TU16AHLT_STOP0_POSITION                            0x0
#define _TU16AHLT_STOP0_SIZE                                0x1
#define _TU16AHLT_STOP0_LENGTH                              0x1
#define _TU16AHLT_STOP0_MASK                                0x1
#define _TU16AHLT_STOP1_POSN                                0x1
#define _TU16AHLT_STOP1_POSITION                            0x1
#define _TU16AHLT_STOP1_SIZE                                0x1
#define _TU16AHLT_STOP1_LENGTH                              0x1
#define _TU16AHLT_STOP1_MASK                                0x2
#define _TU16AHLT_RESET0_POSN                               0x2
#define _TU16AHLT_RESET0_POSITION                           0x2
#define _TU16AHLT_RESET0_SIZE                               0x1
#define _TU16AHLT_RESET0_LENGTH                             0x1
#define _TU16AHLT_RESET0_MASK                               0x4
#define _TU16AHLT_RESET1_POSN                               0x3
#define _TU16AHLT_RESET1_POSITION                           0x3
#define _TU16AHLT_RESET1_SIZE                               0x1
#define _TU16AHLT_RESET1_LENGTH                             0x1
#define _TU16AHLT_RESET1_MASK                               0x8
#define _TU16AHLT_START0_POSN                               0x4
#define _TU16AHLT_START0_POSITION                           0x4
#define _TU16AHLT_START0_SIZE                               0x1
#define _TU16AHLT_START0_LENGTH                             0x1
#define _TU16AHLT_START0_MASK                               0x10
#define _TU16AHLT_START1_POSN                               0x5
#define _TU16AHLT_START1_POSITION                           0x5
#define _TU16AHLT_START1_SIZE                               0x1
#define _TU16AHLT_START1_LENGTH                             0x1
#define _TU16AHLT_START1_MASK                               0x20
#define _TU16AHLT_TU16ASTOP_POSN                            0x0
#define _TU16AHLT_TU16ASTOP_POSITION                        0x0
#define _TU16AHLT_TU16ASTOP_SIZE                            0x2
#define _TU16AHLT_TU16ASTOP_LENGTH                          0x2
#define _TU16AHLT_TU16ASTOP_MASK                            0x3
#define _TU16AHLT_TU16ARESET_POSN                           0x2
#define _TU16AHLT_TU16ARESET_POSITION                       0x2
#define _TU16AHLT_TU16ARESET_SIZE                           0x2
#define _TU16AHLT_TU16ARESET_LENGTH                         0x2
#define _TU16AHLT_TU16ARESET_MASK                           0xC
#define _TU16AHLT_TU16ASTART_POSN                           0x4
#define _TU16AHLT_TU16ASTART_POSITION                       0x4
#define _TU16AHLT_TU16ASTART_SIZE                           0x2
#define _TU16AHLT_TU16ASTART_LENGTH                         0x2
#define _TU16AHLT_TU16ASTART_MASK                           0x30
#define _TU16AHLT_TU16ACSYNC_POSN                           0x6
#define _TU16AHLT_TU16ACSYNC_POSITION                       0x6
#define _TU16AHLT_TU16ACSYNC_SIZE                           0x1
#define _TU16AHLT_TU16ACSYNC_LENGTH                         0x1
#define _TU16AHLT_TU16ACSYNC_MASK                           0x40
#define _TU16AHLT_TU16AEPOL_POSN                            0x7
#define _TU16AHLT_TU16AEPOL_POSITION                        0x7
#define _TU16AHLT_TU16AEPOL_SIZE                            0x1
#define _TU16AHLT_TU16AEPOL_LENGTH                          0x1
#define _TU16AHLT_TU16AEPOL_MASK                            0x80
#define _TU16AHLT_TU16ASTOP0_POSN                           0x0
#define _TU16AHLT_TU16ASTOP0_POSITION                       0x0
#define _TU16AHLT_TU16ASTOP0_SIZE                           0x1
#define _TU16AHLT_TU16ASTOP0_LENGTH                         0x1
#define _TU16AHLT_TU16ASTOP0_MASK                           0x1
#define _TU16AHLT_TU16ASTOP1_POSN                           0x1
#define _TU16AHLT_TU16ASTOP1_POSITION                       0x1
#define _TU16AHLT_TU16ASTOP1_SIZE                           0x1
#define _TU16AHLT_TU16ASTOP1_LENGTH                         0x1
#define _TU16AHLT_TU16ASTOP1_MASK                           0x2
#define _TU16AHLT_TU16ARESET0_POSN                          0x2
#define _TU16AHLT_TU16ARESET0_POSITION                      0x2
#define _TU16AHLT_TU16ARESET0_SIZE                          0x1
#define _TU16AHLT_TU16ARESET0_LENGTH                        0x1
#define _TU16AHLT_TU16ARESET0_MASK                          0x4
#define _TU16AHLT_TU16ARESET1_POSN                          0x3
#define _TU16AHLT_TU16ARESET1_POSITION                      0x3
#define _TU16AHLT_TU16ARESET1_SIZE                          0x1
#define _TU16AHLT_TU16ARESET1_LENGTH                        0x1
#define _TU16AHLT_TU16ARESET1_MASK                          0x8
#define _TU16AHLT_TU16ASTART0_POSN                          0x4
#define _TU16AHLT_TU16ASTART0_POSITION                      0x4
#define _TU16AHLT_TU16ASTART0_SIZE                          0x1
#define _TU16AHLT_TU16ASTART0_LENGTH                        0x1
#define _TU16AHLT_TU16ASTART0_MASK                          0x10
#define _TU16AHLT_TU16ASTART1_POSN                          0x5
#define _TU16AHLT_TU16ASTART1_POSITION                      0x5
#define _TU16AHLT_TU16ASTART1_SIZE                          0x1
#define _TU16AHLT_TU16ASTART1_LENGTH                        0x1
#define _TU16AHLT_TU16ASTART1_MASK                          0x20

// Register: TU16APS
#define TU16APS TU16APS
extern volatile unsigned char           TU16APS             __at(0x12F);
#ifndef _LIB_BUILD
asm("TU16APS equ 012Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PS                     :8;
    };
    struct {
        unsigned PS0                    :1;
        unsigned PS1                    :1;
        unsigned PS2                    :1;
        unsigned PS3                    :1;
        unsigned PS4                    :1;
        unsigned PS5                    :1;
        unsigned PS6                    :1;
        unsigned PS7                    :1;
    };
    struct {
        unsigned TU16APS0               :1;
        unsigned TU16APS1               :1;
        unsigned TU16APS2               :1;
        unsigned TU16APS3               :1;
        unsigned TU16APS4               :1;
        unsigned TU16APS5               :1;
        unsigned TU16APS6               :1;
        unsigned TU16APS7               :1;
    };
    struct {
        unsigned TU16APS                :8;
    };
} TU16APSbits_t;
extern volatile TU16APSbits_t TU16APSbits __at(0x12F);
// bitfield macros
#define _TU16APS_PS_POSN                                    0x0
#define _TU16APS_PS_POSITION                                0x0
#define _TU16APS_PS_SIZE                                    0x8
#define _TU16APS_PS_LENGTH                                  0x8
#define _TU16APS_PS_MASK                                    0xFF
#define _TU16APS_PS0_POSN                                   0x0
#define _TU16APS_PS0_POSITION                               0x0
#define _TU16APS_PS0_SIZE                                   0x1
#define _TU16APS_PS0_LENGTH                                 0x1
#define _TU16APS_PS0_MASK                                   0x1
#define _TU16APS_PS1_POSN                                   0x1
#define _TU16APS_PS1_POSITION                               0x1
#define _TU16APS_PS1_SIZE                                   0x1
#define _TU16APS_PS1_LENGTH                                 0x1
#define _TU16APS_PS1_MASK                                   0x2
#define _TU16APS_PS2_POSN                                   0x2
#define _TU16APS_PS2_POSITION                               0x2
#define _TU16APS_PS2_SIZE                                   0x1
#define _TU16APS_PS2_LENGTH                                 0x1
#define _TU16APS_PS2_MASK                                   0x4
#define _TU16APS_PS3_POSN                                   0x3
#define _TU16APS_PS3_POSITION                               0x3
#define _TU16APS_PS3_SIZE                                   0x1
#define _TU16APS_PS3_LENGTH                                 0x1
#define _TU16APS_PS3_MASK                                   0x8
#define _TU16APS_PS4_POSN                                   0x4
#define _TU16APS_PS4_POSITION                               0x4
#define _TU16APS_PS4_SIZE                                   0x1
#define _TU16APS_PS4_LENGTH                                 0x1
#define _TU16APS_PS4_MASK                                   0x10
#define _TU16APS_PS5_POSN                                   0x5
#define _TU16APS_PS5_POSITION                               0x5
#define _TU16APS_PS5_SIZE                                   0x1
#define _TU16APS_PS5_LENGTH                                 0x1
#define _TU16APS_PS5_MASK                                   0x20
#define _TU16APS_PS6_POSN                                   0x6
#define _TU16APS_PS6_POSITION                               0x6
#define _TU16APS_PS6_SIZE                                   0x1
#define _TU16APS_PS6_LENGTH                                 0x1
#define _TU16APS_PS6_MASK                                   0x40
#define _TU16APS_PS7_POSN                                   0x7
#define _TU16APS_PS7_POSITION                               0x7
#define _TU16APS_PS7_SIZE                                   0x1
#define _TU16APS_PS7_LENGTH                                 0x1
#define _TU16APS_PS7_MASK                                   0x80
#define _TU16APS_TU16APS0_POSN                              0x0
#define _TU16APS_TU16APS0_POSITION                          0x0
#define _TU16APS_TU16APS0_SIZE                              0x1
#define _TU16APS_TU16APS0_LENGTH                            0x1
#define _TU16APS_TU16APS0_MASK                              0x1
#define _TU16APS_TU16APS1_POSN                              0x1
#define _TU16APS_TU16APS1_POSITION                          0x1
#define _TU16APS_TU16APS1_SIZE                              0x1
#define _TU16APS_TU16APS1_LENGTH                            0x1
#define _TU16APS_TU16APS1_MASK                              0x2
#define _TU16APS_TU16APS2_POSN                              0x2
#define _TU16APS_TU16APS2_POSITION                          0x2
#define _TU16APS_TU16APS2_SIZE                              0x1
#define _TU16APS_TU16APS2_LENGTH                            0x1
#define _TU16APS_TU16APS2_MASK                              0x4
#define _TU16APS_TU16APS3_POSN                              0x3
#define _TU16APS_TU16APS3_POSITION                          0x3
#define _TU16APS_TU16APS3_SIZE                              0x1
#define _TU16APS_TU16APS3_LENGTH                            0x1
#define _TU16APS_TU16APS3_MASK                              0x8
#define _TU16APS_TU16APS4_POSN                              0x4
#define _TU16APS_TU16APS4_POSITION                          0x4
#define _TU16APS_TU16APS4_SIZE                              0x1
#define _TU16APS_TU16APS4_LENGTH                            0x1
#define _TU16APS_TU16APS4_MASK                              0x10
#define _TU16APS_TU16APS5_POSN                              0x5
#define _TU16APS_TU16APS5_POSITION                          0x5
#define _TU16APS_TU16APS5_SIZE                              0x1
#define _TU16APS_TU16APS5_LENGTH                            0x1
#define _TU16APS_TU16APS5_MASK                              0x20
#define _TU16APS_TU16APS6_POSN                              0x6
#define _TU16APS_TU16APS6_POSITION                          0x6
#define _TU16APS_TU16APS6_SIZE                              0x1
#define _TU16APS_TU16APS6_LENGTH                            0x1
#define _TU16APS_TU16APS6_MASK                              0x40
#define _TU16APS_TU16APS7_POSN                              0x7
#define _TU16APS_TU16APS7_POSITION                          0x7
#define _TU16APS_TU16APS7_SIZE                              0x1
#define _TU16APS_TU16APS7_LENGTH                            0x1
#define _TU16APS_TU16APS7_MASK                              0x80
#define _TU16APS_TU16APS_POSN                               0x0
#define _TU16APS_TU16APS_POSITION                           0x0
#define _TU16APS_TU16APS_SIZE                               0x8
#define _TU16APS_TU16APS_LENGTH                             0x8
#define _TU16APS_TU16APS_MASK                               0xFF

// Register: TU16ATMR
#define TU16ATMR TU16ATMR
extern volatile unsigned long           TU16ATMR            __at(0x130);
#ifndef _LIB_BUILD
asm("TU16ATMR equ 0130h");
#endif
// aliases
extern volatile unsigned long           TU16ACR             __at(0x130);
#ifndef _LIB_BUILD
asm("TU16ACR equ 0130h");
#endif

// Register: TU16ATMRL
#define TU16ATMRL TU16ATMRL
extern volatile unsigned char           TU16ATMRL           __at(0x130);
#ifndef _LIB_BUILD
asm("TU16ATMRL equ 0130h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMRL                   :8;
    };
    struct {
        unsigned TMRL0                  :1;
        unsigned TMRL1                  :1;
        unsigned TMRL2                  :1;
        unsigned TMRL3                  :1;
        unsigned TMRL4                  :1;
        unsigned TMRL5                  :1;
        unsigned TMRL6                  :1;
        unsigned TMRL7                  :1;
    };
    struct {
        unsigned TU16ATMRL0             :1;
        unsigned TU16ATMRL1             :1;
        unsigned TU16ATMRL2             :1;
        unsigned TU16ATMRL3             :1;
        unsigned TU16ATMRL4             :1;
        unsigned TU16ATMRL5             :1;
        unsigned TU16ATMRL6             :1;
        unsigned TU16ATMRL7             :1;
    };
    struct {
        unsigned TU16ATMR0              :1;
        unsigned TU16ATMR1              :1;
        unsigned TU16ATMR2              :1;
        unsigned TU16ATMR3              :1;
        unsigned TU16ATMR4              :1;
        unsigned TU16ATMR5              :1;
        unsigned TU16ATMR6              :1;
        unsigned TU16ATMR7              :1;
    };
} TU16ATMRLbits_t;
extern volatile TU16ATMRLbits_t TU16ATMRLbits __at(0x130);
// bitfield macros
#define _TU16ATMRL_TMRL_POSN                                0x0
#define _TU16ATMRL_TMRL_POSITION                            0x0
#define _TU16ATMRL_TMRL_SIZE                                0x8
#define _TU16ATMRL_TMRL_LENGTH                              0x8
#define _TU16ATMRL_TMRL_MASK                                0xFF
#define _TU16ATMRL_TMRL0_POSN                               0x0
#define _TU16ATMRL_TMRL0_POSITION                           0x0
#define _TU16ATMRL_TMRL0_SIZE                               0x1
#define _TU16ATMRL_TMRL0_LENGTH                             0x1
#define _TU16ATMRL_TMRL0_MASK                               0x1
#define _TU16ATMRL_TMRL1_POSN                               0x1
#define _TU16ATMRL_TMRL1_POSITION                           0x1
#define _TU16ATMRL_TMRL1_SIZE                               0x1
#define _TU16ATMRL_TMRL1_LENGTH                             0x1
#define _TU16ATMRL_TMRL1_MASK                               0x2
#define _TU16ATMRL_TMRL2_POSN                               0x2
#define _TU16ATMRL_TMRL2_POSITION                           0x2
#define _TU16ATMRL_TMRL2_SIZE                               0x1
#define _TU16ATMRL_TMRL2_LENGTH                             0x1
#define _TU16ATMRL_TMRL2_MASK                               0x4
#define _TU16ATMRL_TMRL3_POSN                               0x3
#define _TU16ATMRL_TMRL3_POSITION                           0x3
#define _TU16ATMRL_TMRL3_SIZE                               0x1
#define _TU16ATMRL_TMRL3_LENGTH                             0x1
#define _TU16ATMRL_TMRL3_MASK                               0x8
#define _TU16ATMRL_TMRL4_POSN                               0x4
#define _TU16ATMRL_TMRL4_POSITION                           0x4
#define _TU16ATMRL_TMRL4_SIZE                               0x1
#define _TU16ATMRL_TMRL4_LENGTH                             0x1
#define _TU16ATMRL_TMRL4_MASK                               0x10
#define _TU16ATMRL_TMRL5_POSN                               0x5
#define _TU16ATMRL_TMRL5_POSITION                           0x5
#define _TU16ATMRL_TMRL5_SIZE                               0x1
#define _TU16ATMRL_TMRL5_LENGTH                             0x1
#define _TU16ATMRL_TMRL5_MASK                               0x20
#define _TU16ATMRL_TMRL6_POSN                               0x6
#define _TU16ATMRL_TMRL6_POSITION                           0x6
#define _TU16ATMRL_TMRL6_SIZE                               0x1
#define _TU16ATMRL_TMRL6_LENGTH                             0x1
#define _TU16ATMRL_TMRL6_MASK                               0x40
#define _TU16ATMRL_TMRL7_POSN                               0x7
#define _TU16ATMRL_TMRL7_POSITION                           0x7
#define _TU16ATMRL_TMRL7_SIZE                               0x1
#define _TU16ATMRL_TMRL7_LENGTH                             0x1
#define _TU16ATMRL_TMRL7_MASK                               0x80
#define _TU16ATMRL_TU16ATMRL0_POSN                          0x0
#define _TU16ATMRL_TU16ATMRL0_POSITION                      0x0
#define _TU16ATMRL_TU16ATMRL0_SIZE                          0x1
#define _TU16ATMRL_TU16ATMRL0_LENGTH                        0x1
#define _TU16ATMRL_TU16ATMRL0_MASK                          0x1
#define _TU16ATMRL_TU16ATMRL1_POSN                          0x1
#define _TU16ATMRL_TU16ATMRL1_POSITION                      0x1
#define _TU16ATMRL_TU16ATMRL1_SIZE                          0x1
#define _TU16ATMRL_TU16ATMRL1_LENGTH                        0x1
#define _TU16ATMRL_TU16ATMRL1_MASK                          0x2
#define _TU16ATMRL_TU16ATMRL2_POSN                          0x2
#define _TU16ATMRL_TU16ATMRL2_POSITION                      0x2
#define _TU16ATMRL_TU16ATMRL2_SIZE                          0x1
#define _TU16ATMRL_TU16ATMRL2_LENGTH                        0x1
#define _TU16ATMRL_TU16ATMRL2_MASK                          0x4
#define _TU16ATMRL_TU16ATMRL3_POSN                          0x3
#define _TU16ATMRL_TU16ATMRL3_POSITION                      0x3
#define _TU16ATMRL_TU16ATMRL3_SIZE                          0x1
#define _TU16ATMRL_TU16ATMRL3_LENGTH                        0x1
#define _TU16ATMRL_TU16ATMRL3_MASK                          0x8
#define _TU16ATMRL_TU16ATMRL4_POSN                          0x4
#define _TU16ATMRL_TU16ATMRL4_POSITION                      0x4
#define _TU16ATMRL_TU16ATMRL4_SIZE                          0x1
#define _TU16ATMRL_TU16ATMRL4_LENGTH                        0x1
#define _TU16ATMRL_TU16ATMRL4_MASK                          0x10
#define _TU16ATMRL_TU16ATMRL5_POSN                          0x5
#define _TU16ATMRL_TU16ATMRL5_POSITION                      0x5
#define _TU16ATMRL_TU16ATMRL5_SIZE                          0x1
#define _TU16ATMRL_TU16ATMRL5_LENGTH                        0x1
#define _TU16ATMRL_TU16ATMRL5_MASK                          0x20
#define _TU16ATMRL_TU16ATMRL6_POSN                          0x6
#define _TU16ATMRL_TU16ATMRL6_POSITION                      0x6
#define _TU16ATMRL_TU16ATMRL6_SIZE                          0x1
#define _TU16ATMRL_TU16ATMRL6_LENGTH                        0x1
#define _TU16ATMRL_TU16ATMRL6_MASK                          0x40
#define _TU16ATMRL_TU16ATMRL7_POSN                          0x7
#define _TU16ATMRL_TU16ATMRL7_POSITION                      0x7
#define _TU16ATMRL_TU16ATMRL7_SIZE                          0x1
#define _TU16ATMRL_TU16ATMRL7_LENGTH                        0x1
#define _TU16ATMRL_TU16ATMRL7_MASK                          0x80
#define _TU16ATMRL_TU16ATMR0_POSN                           0x0
#define _TU16ATMRL_TU16ATMR0_POSITION                       0x0
#define _TU16ATMRL_TU16ATMR0_SIZE                           0x1
#define _TU16ATMRL_TU16ATMR0_LENGTH                         0x1
#define _TU16ATMRL_TU16ATMR0_MASK                           0x1
#define _TU16ATMRL_TU16ATMR1_POSN                           0x1
#define _TU16ATMRL_TU16ATMR1_POSITION                       0x1
#define _TU16ATMRL_TU16ATMR1_SIZE                           0x1
#define _TU16ATMRL_TU16ATMR1_LENGTH                         0x1
#define _TU16ATMRL_TU16ATMR1_MASK                           0x2
#define _TU16ATMRL_TU16ATMR2_POSN                           0x2
#define _TU16ATMRL_TU16ATMR2_POSITION                       0x2
#define _TU16ATMRL_TU16ATMR2_SIZE                           0x1
#define _TU16ATMRL_TU16ATMR2_LENGTH                         0x1
#define _TU16ATMRL_TU16ATMR2_MASK                           0x4
#define _TU16ATMRL_TU16ATMR3_POSN                           0x3
#define _TU16ATMRL_TU16ATMR3_POSITION                       0x3
#define _TU16ATMRL_TU16ATMR3_SIZE                           0x1
#define _TU16ATMRL_TU16ATMR3_LENGTH                         0x1
#define _TU16ATMRL_TU16ATMR3_MASK                           0x8
#define _TU16ATMRL_TU16ATMR4_POSN                           0x4
#define _TU16ATMRL_TU16ATMR4_POSITION                       0x4
#define _TU16ATMRL_TU16ATMR4_SIZE                           0x1
#define _TU16ATMRL_TU16ATMR4_LENGTH                         0x1
#define _TU16ATMRL_TU16ATMR4_MASK                           0x10
#define _TU16ATMRL_TU16ATMR5_POSN                           0x5
#define _TU16ATMRL_TU16ATMR5_POSITION                       0x5
#define _TU16ATMRL_TU16ATMR5_SIZE                           0x1
#define _TU16ATMRL_TU16ATMR5_LENGTH                         0x1
#define _TU16ATMRL_TU16ATMR5_MASK                           0x20
#define _TU16ATMRL_TU16ATMR6_POSN                           0x6
#define _TU16ATMRL_TU16ATMR6_POSITION                       0x6
#define _TU16ATMRL_TU16ATMR6_SIZE                           0x1
#define _TU16ATMRL_TU16ATMR6_LENGTH                         0x1
#define _TU16ATMRL_TU16ATMR6_MASK                           0x40
#define _TU16ATMRL_TU16ATMR7_POSN                           0x7
#define _TU16ATMRL_TU16ATMR7_POSITION                       0x7
#define _TU16ATMRL_TU16ATMR7_SIZE                           0x1
#define _TU16ATMRL_TU16ATMR7_LENGTH                         0x1
#define _TU16ATMRL_TU16ATMR7_MASK                           0x80

// Register: TU16ACRL
#define TU16ACRL TU16ACRL
extern volatile unsigned char           TU16ACRL            __at(0x130);
#ifndef _LIB_BUILD
asm("TU16ACRL equ 0130h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CRL                    :8;
    };
    struct {
        unsigned CRL0                   :1;
        unsigned CRL1                   :1;
        unsigned CRL2                   :1;
        unsigned CRL3                   :1;
        unsigned CRL4                   :1;
        unsigned CRL5                   :1;
        unsigned CRL6                   :1;
        unsigned CRL7                   :1;
    };
    struct {
        unsigned TU16ACRL0              :1;
        unsigned TU16ACRL1              :1;
        unsigned TU16ACRL2              :1;
        unsigned TU16ACRL3              :1;
        unsigned TU16ACRL4              :1;
        unsigned TU16ACRL5              :1;
        unsigned TU16ACRL6              :1;
        unsigned TU16ACRL7              :1;
    };
    struct {
        unsigned TU16ACR0               :1;
        unsigned TU16ACR1               :1;
        unsigned TU16ACR2               :1;
        unsigned TU16ACR3               :1;
        unsigned TU16ACR4               :1;
        unsigned TU16ACR5               :1;
        unsigned TU16ACR6               :1;
        unsigned TU16ACR7               :1;
    };
} TU16ACRLbits_t;
extern volatile TU16ACRLbits_t TU16ACRLbits __at(0x130);
// bitfield macros
#define _TU16ACRL_CRL_POSN                                  0x0
#define _TU16ACRL_CRL_POSITION                              0x0
#define _TU16ACRL_CRL_SIZE                                  0x8
#define _TU16ACRL_CRL_LENGTH                                0x8
#define _TU16ACRL_CRL_MASK                                  0xFF
#define _TU16ACRL_CRL0_POSN                                 0x0
#define _TU16ACRL_CRL0_POSITION                             0x0
#define _TU16ACRL_CRL0_SIZE                                 0x1
#define _TU16ACRL_CRL0_LENGTH                               0x1
#define _TU16ACRL_CRL0_MASK                                 0x1
#define _TU16ACRL_CRL1_POSN                                 0x1
#define _TU16ACRL_CRL1_POSITION                             0x1
#define _TU16ACRL_CRL1_SIZE                                 0x1
#define _TU16ACRL_CRL1_LENGTH                               0x1
#define _TU16ACRL_CRL1_MASK                                 0x2
#define _TU16ACRL_CRL2_POSN                                 0x2
#define _TU16ACRL_CRL2_POSITION                             0x2
#define _TU16ACRL_CRL2_SIZE                                 0x1
#define _TU16ACRL_CRL2_LENGTH                               0x1
#define _TU16ACRL_CRL2_MASK                                 0x4
#define _TU16ACRL_CRL3_POSN                                 0x3
#define _TU16ACRL_CRL3_POSITION                             0x3
#define _TU16ACRL_CRL3_SIZE                                 0x1
#define _TU16ACRL_CRL3_LENGTH                               0x1
#define _TU16ACRL_CRL3_MASK                                 0x8
#define _TU16ACRL_CRL4_POSN                                 0x4
#define _TU16ACRL_CRL4_POSITION                             0x4
#define _TU16ACRL_CRL4_SIZE                                 0x1
#define _TU16ACRL_CRL4_LENGTH                               0x1
#define _TU16ACRL_CRL4_MASK                                 0x10
#define _TU16ACRL_CRL5_POSN                                 0x5
#define _TU16ACRL_CRL5_POSITION                             0x5
#define _TU16ACRL_CRL5_SIZE                                 0x1
#define _TU16ACRL_CRL5_LENGTH                               0x1
#define _TU16ACRL_CRL5_MASK                                 0x20
#define _TU16ACRL_CRL6_POSN                                 0x6
#define _TU16ACRL_CRL6_POSITION                             0x6
#define _TU16ACRL_CRL6_SIZE                                 0x1
#define _TU16ACRL_CRL6_LENGTH                               0x1
#define _TU16ACRL_CRL6_MASK                                 0x40
#define _TU16ACRL_CRL7_POSN                                 0x7
#define _TU16ACRL_CRL7_POSITION                             0x7
#define _TU16ACRL_CRL7_SIZE                                 0x1
#define _TU16ACRL_CRL7_LENGTH                               0x1
#define _TU16ACRL_CRL7_MASK                                 0x80
#define _TU16ACRL_TU16ACRL0_POSN                            0x0
#define _TU16ACRL_TU16ACRL0_POSITION                        0x0
#define _TU16ACRL_TU16ACRL0_SIZE                            0x1
#define _TU16ACRL_TU16ACRL0_LENGTH                          0x1
#define _TU16ACRL_TU16ACRL0_MASK                            0x1
#define _TU16ACRL_TU16ACRL1_POSN                            0x1
#define _TU16ACRL_TU16ACRL1_POSITION                        0x1
#define _TU16ACRL_TU16ACRL1_SIZE                            0x1
#define _TU16ACRL_TU16ACRL1_LENGTH                          0x1
#define _TU16ACRL_TU16ACRL1_MASK                            0x2
#define _TU16ACRL_TU16ACRL2_POSN                            0x2
#define _TU16ACRL_TU16ACRL2_POSITION                        0x2
#define _TU16ACRL_TU16ACRL2_SIZE                            0x1
#define _TU16ACRL_TU16ACRL2_LENGTH                          0x1
#define _TU16ACRL_TU16ACRL2_MASK                            0x4
#define _TU16ACRL_TU16ACRL3_POSN                            0x3
#define _TU16ACRL_TU16ACRL3_POSITION                        0x3
#define _TU16ACRL_TU16ACRL3_SIZE                            0x1
#define _TU16ACRL_TU16ACRL3_LENGTH                          0x1
#define _TU16ACRL_TU16ACRL3_MASK                            0x8
#define _TU16ACRL_TU16ACRL4_POSN                            0x4
#define _TU16ACRL_TU16ACRL4_POSITION                        0x4
#define _TU16ACRL_TU16ACRL4_SIZE                            0x1
#define _TU16ACRL_TU16ACRL4_LENGTH                          0x1
#define _TU16ACRL_TU16ACRL4_MASK                            0x10
#define _TU16ACRL_TU16ACRL5_POSN                            0x5
#define _TU16ACRL_TU16ACRL5_POSITION                        0x5
#define _TU16ACRL_TU16ACRL5_SIZE                            0x1
#define _TU16ACRL_TU16ACRL5_LENGTH                          0x1
#define _TU16ACRL_TU16ACRL5_MASK                            0x20
#define _TU16ACRL_TU16ACRL6_POSN                            0x6
#define _TU16ACRL_TU16ACRL6_POSITION                        0x6
#define _TU16ACRL_TU16ACRL6_SIZE                            0x1
#define _TU16ACRL_TU16ACRL6_LENGTH                          0x1
#define _TU16ACRL_TU16ACRL6_MASK                            0x40
#define _TU16ACRL_TU16ACRL7_POSN                            0x7
#define _TU16ACRL_TU16ACRL7_POSITION                        0x7
#define _TU16ACRL_TU16ACRL7_SIZE                            0x1
#define _TU16ACRL_TU16ACRL7_LENGTH                          0x1
#define _TU16ACRL_TU16ACRL7_MASK                            0x80
#define _TU16ACRL_TU16ACR0_POSN                             0x0
#define _TU16ACRL_TU16ACR0_POSITION                         0x0
#define _TU16ACRL_TU16ACR0_SIZE                             0x1
#define _TU16ACRL_TU16ACR0_LENGTH                           0x1
#define _TU16ACRL_TU16ACR0_MASK                             0x1
#define _TU16ACRL_TU16ACR1_POSN                             0x1
#define _TU16ACRL_TU16ACR1_POSITION                         0x1
#define _TU16ACRL_TU16ACR1_SIZE                             0x1
#define _TU16ACRL_TU16ACR1_LENGTH                           0x1
#define _TU16ACRL_TU16ACR1_MASK                             0x2
#define _TU16ACRL_TU16ACR2_POSN                             0x2
#define _TU16ACRL_TU16ACR2_POSITION                         0x2
#define _TU16ACRL_TU16ACR2_SIZE                             0x1
#define _TU16ACRL_TU16ACR2_LENGTH                           0x1
#define _TU16ACRL_TU16ACR2_MASK                             0x4
#define _TU16ACRL_TU16ACR3_POSN                             0x3
#define _TU16ACRL_TU16ACR3_POSITION                         0x3
#define _TU16ACRL_TU16ACR3_SIZE                             0x1
#define _TU16ACRL_TU16ACR3_LENGTH                           0x1
#define _TU16ACRL_TU16ACR3_MASK                             0x8
#define _TU16ACRL_TU16ACR4_POSN                             0x4
#define _TU16ACRL_TU16ACR4_POSITION                         0x4
#define _TU16ACRL_TU16ACR4_SIZE                             0x1
#define _TU16ACRL_TU16ACR4_LENGTH                           0x1
#define _TU16ACRL_TU16ACR4_MASK                             0x10
#define _TU16ACRL_TU16ACR5_POSN                             0x5
#define _TU16ACRL_TU16ACR5_POSITION                         0x5
#define _TU16ACRL_TU16ACR5_SIZE                             0x1
#define _TU16ACRL_TU16ACR5_LENGTH                           0x1
#define _TU16ACRL_TU16ACR5_MASK                             0x20
#define _TU16ACRL_TU16ACR6_POSN                             0x6
#define _TU16ACRL_TU16ACR6_POSITION                         0x6
#define _TU16ACRL_TU16ACR6_SIZE                             0x1
#define _TU16ACRL_TU16ACR6_LENGTH                           0x1
#define _TU16ACRL_TU16ACR6_MASK                             0x40
#define _TU16ACRL_TU16ACR7_POSN                             0x7
#define _TU16ACRL_TU16ACR7_POSITION                         0x7
#define _TU16ACRL_TU16ACR7_SIZE                             0x1
#define _TU16ACRL_TU16ACR7_LENGTH                           0x1
#define _TU16ACRL_TU16ACR7_MASK                             0x80

// Register: TU16ATMRH
#define TU16ATMRH TU16ATMRH
extern volatile unsigned char           TU16ATMRH           __at(0x131);
#ifndef _LIB_BUILD
asm("TU16ATMRH equ 0131h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMRH                   :8;
    };
    struct {
        unsigned TMRH0                  :1;
        unsigned TMRH1                  :1;
        unsigned TMRH2                  :1;
        unsigned TMRH3                  :1;
        unsigned TMRH4                  :1;
        unsigned TMRH5                  :1;
        unsigned TMRH6                  :1;
        unsigned TMRH7                  :1;
    };
    struct {
        unsigned TU16ATMRH0             :1;
        unsigned TU16ATMRH1             :1;
        unsigned TU16ATMRH2             :1;
        unsigned TU16ATMRH3             :1;
        unsigned TU16ATMRH4             :1;
        unsigned TU16ATMRH5             :1;
        unsigned TU16ATMRH6             :1;
        unsigned TU16ATMRH7             :1;
    };
    struct {
        unsigned TU16ATMR8              :1;
        unsigned TU16ATMR9              :1;
        unsigned TU16ATMR10             :1;
        unsigned TU16ATMR11             :1;
        unsigned TU16ATMR12             :1;
        unsigned TU16ATMR13             :1;
        unsigned TU16ATMR14             :1;
        unsigned TU16ATMR15             :1;
    };
} TU16ATMRHbits_t;
extern volatile TU16ATMRHbits_t TU16ATMRHbits __at(0x131);
// bitfield macros
#define _TU16ATMRH_TMRH_POSN                                0x0
#define _TU16ATMRH_TMRH_POSITION                            0x0
#define _TU16ATMRH_TMRH_SIZE                                0x8
#define _TU16ATMRH_TMRH_LENGTH                              0x8
#define _TU16ATMRH_TMRH_MASK                                0xFF
#define _TU16ATMRH_TMRH0_POSN                               0x0
#define _TU16ATMRH_TMRH0_POSITION                           0x0
#define _TU16ATMRH_TMRH0_SIZE                               0x1
#define _TU16ATMRH_TMRH0_LENGTH                             0x1
#define _TU16ATMRH_TMRH0_MASK                               0x1
#define _TU16ATMRH_TMRH1_POSN                               0x1
#define _TU16ATMRH_TMRH1_POSITION                           0x1
#define _TU16ATMRH_TMRH1_SIZE                               0x1
#define _TU16ATMRH_TMRH1_LENGTH                             0x1
#define _TU16ATMRH_TMRH1_MASK                               0x2
#define _TU16ATMRH_TMRH2_POSN                               0x2
#define _TU16ATMRH_TMRH2_POSITION                           0x2
#define _TU16ATMRH_TMRH2_SIZE                               0x1
#define _TU16ATMRH_TMRH2_LENGTH                             0x1
#define _TU16ATMRH_TMRH2_MASK                               0x4
#define _TU16ATMRH_TMRH3_POSN                               0x3
#define _TU16ATMRH_TMRH3_POSITION                           0x3
#define _TU16ATMRH_TMRH3_SIZE                               0x1
#define _TU16ATMRH_TMRH3_LENGTH                             0x1
#define _TU16ATMRH_TMRH3_MASK                               0x8
#define _TU16ATMRH_TMRH4_POSN                               0x4
#define _TU16ATMRH_TMRH4_POSITION                           0x4
#define _TU16ATMRH_TMRH4_SIZE                               0x1
#define _TU16ATMRH_TMRH4_LENGTH                             0x1
#define _TU16ATMRH_TMRH4_MASK                               0x10
#define _TU16ATMRH_TMRH5_POSN                               0x5
#define _TU16ATMRH_TMRH5_POSITION                           0x5
#define _TU16ATMRH_TMRH5_SIZE                               0x1
#define _TU16ATMRH_TMRH5_LENGTH                             0x1
#define _TU16ATMRH_TMRH5_MASK                               0x20
#define _TU16ATMRH_TMRH6_POSN                               0x6
#define _TU16ATMRH_TMRH6_POSITION                           0x6
#define _TU16ATMRH_TMRH6_SIZE                               0x1
#define _TU16ATMRH_TMRH6_LENGTH                             0x1
#define _TU16ATMRH_TMRH6_MASK                               0x40
#define _TU16ATMRH_TMRH7_POSN                               0x7
#define _TU16ATMRH_TMRH7_POSITION                           0x7
#define _TU16ATMRH_TMRH7_SIZE                               0x1
#define _TU16ATMRH_TMRH7_LENGTH                             0x1
#define _TU16ATMRH_TMRH7_MASK                               0x80
#define _TU16ATMRH_TU16ATMRH0_POSN                          0x0
#define _TU16ATMRH_TU16ATMRH0_POSITION                      0x0
#define _TU16ATMRH_TU16ATMRH0_SIZE                          0x1
#define _TU16ATMRH_TU16ATMRH0_LENGTH                        0x1
#define _TU16ATMRH_TU16ATMRH0_MASK                          0x1
#define _TU16ATMRH_TU16ATMRH1_POSN                          0x1
#define _TU16ATMRH_TU16ATMRH1_POSITION                      0x1
#define _TU16ATMRH_TU16ATMRH1_SIZE                          0x1
#define _TU16ATMRH_TU16ATMRH1_LENGTH                        0x1
#define _TU16ATMRH_TU16ATMRH1_MASK                          0x2
#define _TU16ATMRH_TU16ATMRH2_POSN                          0x2
#define _TU16ATMRH_TU16ATMRH2_POSITION                      0x2
#define _TU16ATMRH_TU16ATMRH2_SIZE                          0x1
#define _TU16ATMRH_TU16ATMRH2_LENGTH                        0x1
#define _TU16ATMRH_TU16ATMRH2_MASK                          0x4
#define _TU16ATMRH_TU16ATMRH3_POSN                          0x3
#define _TU16ATMRH_TU16ATMRH3_POSITION                      0x3
#define _TU16ATMRH_TU16ATMRH3_SIZE                          0x1
#define _TU16ATMRH_TU16ATMRH3_LENGTH                        0x1
#define _TU16ATMRH_TU16ATMRH3_MASK                          0x8
#define _TU16ATMRH_TU16ATMRH4_POSN                          0x4
#define _TU16ATMRH_TU16ATMRH4_POSITION                      0x4
#define _TU16ATMRH_TU16ATMRH4_SIZE                          0x1
#define _TU16ATMRH_TU16ATMRH4_LENGTH                        0x1
#define _TU16ATMRH_TU16ATMRH4_MASK                          0x10
#define _TU16ATMRH_TU16ATMRH5_POSN                          0x5
#define _TU16ATMRH_TU16ATMRH5_POSITION                      0x5
#define _TU16ATMRH_TU16ATMRH5_SIZE                          0x1
#define _TU16ATMRH_TU16ATMRH5_LENGTH                        0x1
#define _TU16ATMRH_TU16ATMRH5_MASK                          0x20
#define _TU16ATMRH_TU16ATMRH6_POSN                          0x6
#define _TU16ATMRH_TU16ATMRH6_POSITION                      0x6
#define _TU16ATMRH_TU16ATMRH6_SIZE                          0x1
#define _TU16ATMRH_TU16ATMRH6_LENGTH                        0x1
#define _TU16ATMRH_TU16ATMRH6_MASK                          0x40
#define _TU16ATMRH_TU16ATMRH7_POSN                          0x7
#define _TU16ATMRH_TU16ATMRH7_POSITION                      0x7
#define _TU16ATMRH_TU16ATMRH7_SIZE                          0x1
#define _TU16ATMRH_TU16ATMRH7_LENGTH                        0x1
#define _TU16ATMRH_TU16ATMRH7_MASK                          0x80
#define _TU16ATMRH_TU16ATMR8_POSN                           0x0
#define _TU16ATMRH_TU16ATMR8_POSITION                       0x0
#define _TU16ATMRH_TU16ATMR8_SIZE                           0x1
#define _TU16ATMRH_TU16ATMR8_LENGTH                         0x1
#define _TU16ATMRH_TU16ATMR8_MASK                           0x1
#define _TU16ATMRH_TU16ATMR9_POSN                           0x1
#define _TU16ATMRH_TU16ATMR9_POSITION                       0x1
#define _TU16ATMRH_TU16ATMR9_SIZE                           0x1
#define _TU16ATMRH_TU16ATMR9_LENGTH                         0x1
#define _TU16ATMRH_TU16ATMR9_MASK                           0x2
#define _TU16ATMRH_TU16ATMR10_POSN                          0x2
#define _TU16ATMRH_TU16ATMR10_POSITION                      0x2
#define _TU16ATMRH_TU16ATMR10_SIZE                          0x1
#define _TU16ATMRH_TU16ATMR10_LENGTH                        0x1
#define _TU16ATMRH_TU16ATMR10_MASK                          0x4
#define _TU16ATMRH_TU16ATMR11_POSN                          0x3
#define _TU16ATMRH_TU16ATMR11_POSITION                      0x3
#define _TU16ATMRH_TU16ATMR11_SIZE                          0x1
#define _TU16ATMRH_TU16ATMR11_LENGTH                        0x1
#define _TU16ATMRH_TU16ATMR11_MASK                          0x8
#define _TU16ATMRH_TU16ATMR12_POSN                          0x4
#define _TU16ATMRH_TU16ATMR12_POSITION                      0x4
#define _TU16ATMRH_TU16ATMR12_SIZE                          0x1
#define _TU16ATMRH_TU16ATMR12_LENGTH                        0x1
#define _TU16ATMRH_TU16ATMR12_MASK                          0x10
#define _TU16ATMRH_TU16ATMR13_POSN                          0x5
#define _TU16ATMRH_TU16ATMR13_POSITION                      0x5
#define _TU16ATMRH_TU16ATMR13_SIZE                          0x1
#define _TU16ATMRH_TU16ATMR13_LENGTH                        0x1
#define _TU16ATMRH_TU16ATMR13_MASK                          0x20
#define _TU16ATMRH_TU16ATMR14_POSN                          0x6
#define _TU16ATMRH_TU16ATMR14_POSITION                      0x6
#define _TU16ATMRH_TU16ATMR14_SIZE                          0x1
#define _TU16ATMRH_TU16ATMR14_LENGTH                        0x1
#define _TU16ATMRH_TU16ATMR14_MASK                          0x40
#define _TU16ATMRH_TU16ATMR15_POSN                          0x7
#define _TU16ATMRH_TU16ATMR15_POSITION                      0x7
#define _TU16ATMRH_TU16ATMR15_SIZE                          0x1
#define _TU16ATMRH_TU16ATMR15_LENGTH                        0x1
#define _TU16ATMRH_TU16ATMR15_MASK                          0x80

// Register: TU16ACRH
#define TU16ACRH TU16ACRH
extern volatile unsigned char           TU16ACRH            __at(0x131);
#ifndef _LIB_BUILD
asm("TU16ACRH equ 0131h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CRH                    :8;
    };
    struct {
        unsigned CRH0                   :1;
        unsigned CRH1                   :1;
        unsigned CRH2                   :1;
        unsigned CRH3                   :1;
        unsigned CRH4                   :1;
        unsigned CRH5                   :1;
        unsigned CRH6                   :1;
        unsigned CRH7                   :1;
    };
    struct {
        unsigned TU16ACRH0              :1;
        unsigned TU16ACRH1              :1;
        unsigned TU16ACRH2              :1;
        unsigned TU16ACRH3              :1;
        unsigned TU16ACRH4              :1;
        unsigned TU16ACRH5              :1;
        unsigned TU16ACRH6              :1;
        unsigned TU16ACRH7              :1;
    };
    struct {
        unsigned TU16ACR8               :1;
        unsigned TU16ACR9               :1;
        unsigned TU16ACR10              :1;
        unsigned TU16ACR11              :1;
        unsigned TU16ACR12              :1;
        unsigned TU16ACR13              :1;
        unsigned TU16ACR14              :1;
        unsigned TU16ACR15              :1;
    };
} TU16ACRHbits_t;
extern volatile TU16ACRHbits_t TU16ACRHbits __at(0x131);
// bitfield macros
#define _TU16ACRH_CRH_POSN                                  0x0
#define _TU16ACRH_CRH_POSITION                              0x0
#define _TU16ACRH_CRH_SIZE                                  0x8
#define _TU16ACRH_CRH_LENGTH                                0x8
#define _TU16ACRH_CRH_MASK                                  0xFF
#define _TU16ACRH_CRH0_POSN                                 0x0
#define _TU16ACRH_CRH0_POSITION                             0x0
#define _TU16ACRH_CRH0_SIZE                                 0x1
#define _TU16ACRH_CRH0_LENGTH                               0x1
#define _TU16ACRH_CRH0_MASK                                 0x1
#define _TU16ACRH_CRH1_POSN                                 0x1
#define _TU16ACRH_CRH1_POSITION                             0x1
#define _TU16ACRH_CRH1_SIZE                                 0x1
#define _TU16ACRH_CRH1_LENGTH                               0x1
#define _TU16ACRH_CRH1_MASK                                 0x2
#define _TU16ACRH_CRH2_POSN                                 0x2
#define _TU16ACRH_CRH2_POSITION                             0x2
#define _TU16ACRH_CRH2_SIZE                                 0x1
#define _TU16ACRH_CRH2_LENGTH                               0x1
#define _TU16ACRH_CRH2_MASK                                 0x4
#define _TU16ACRH_CRH3_POSN                                 0x3
#define _TU16ACRH_CRH3_POSITION                             0x3
#define _TU16ACRH_CRH3_SIZE                                 0x1
#define _TU16ACRH_CRH3_LENGTH                               0x1
#define _TU16ACRH_CRH3_MASK                                 0x8
#define _TU16ACRH_CRH4_POSN                                 0x4
#define _TU16ACRH_CRH4_POSITION                             0x4
#define _TU16ACRH_CRH4_SIZE                                 0x1
#define _TU16ACRH_CRH4_LENGTH                               0x1
#define _TU16ACRH_CRH4_MASK                                 0x10
#define _TU16ACRH_CRH5_POSN                                 0x5
#define _TU16ACRH_CRH5_POSITION                             0x5
#define _TU16ACRH_CRH5_SIZE                                 0x1
#define _TU16ACRH_CRH5_LENGTH                               0x1
#define _TU16ACRH_CRH5_MASK                                 0x20
#define _TU16ACRH_CRH6_POSN                                 0x6
#define _TU16ACRH_CRH6_POSITION                             0x6
#define _TU16ACRH_CRH6_SIZE                                 0x1
#define _TU16ACRH_CRH6_LENGTH                               0x1
#define _TU16ACRH_CRH6_MASK                                 0x40
#define _TU16ACRH_CRH7_POSN                                 0x7
#define _TU16ACRH_CRH7_POSITION                             0x7
#define _TU16ACRH_CRH7_SIZE                                 0x1
#define _TU16ACRH_CRH7_LENGTH                               0x1
#define _TU16ACRH_CRH7_MASK                                 0x80
#define _TU16ACRH_TU16ACRH0_POSN                            0x0
#define _TU16ACRH_TU16ACRH0_POSITION                        0x0
#define _TU16ACRH_TU16ACRH0_SIZE                            0x1
#define _TU16ACRH_TU16ACRH0_LENGTH                          0x1
#define _TU16ACRH_TU16ACRH0_MASK                            0x1
#define _TU16ACRH_TU16ACRH1_POSN                            0x1
#define _TU16ACRH_TU16ACRH1_POSITION                        0x1
#define _TU16ACRH_TU16ACRH1_SIZE                            0x1
#define _TU16ACRH_TU16ACRH1_LENGTH                          0x1
#define _TU16ACRH_TU16ACRH1_MASK                            0x2
#define _TU16ACRH_TU16ACRH2_POSN                            0x2
#define _TU16ACRH_TU16ACRH2_POSITION                        0x2
#define _TU16ACRH_TU16ACRH2_SIZE                            0x1
#define _TU16ACRH_TU16ACRH2_LENGTH                          0x1
#define _TU16ACRH_TU16ACRH2_MASK                            0x4
#define _TU16ACRH_TU16ACRH3_POSN                            0x3
#define _TU16ACRH_TU16ACRH3_POSITION                        0x3
#define _TU16ACRH_TU16ACRH3_SIZE                            0x1
#define _TU16ACRH_TU16ACRH3_LENGTH                          0x1
#define _TU16ACRH_TU16ACRH3_MASK                            0x8
#define _TU16ACRH_TU16ACRH4_POSN                            0x4
#define _TU16ACRH_TU16ACRH4_POSITION                        0x4
#define _TU16ACRH_TU16ACRH4_SIZE                            0x1
#define _TU16ACRH_TU16ACRH4_LENGTH                          0x1
#define _TU16ACRH_TU16ACRH4_MASK                            0x10
#define _TU16ACRH_TU16ACRH5_POSN                            0x5
#define _TU16ACRH_TU16ACRH5_POSITION                        0x5
#define _TU16ACRH_TU16ACRH5_SIZE                            0x1
#define _TU16ACRH_TU16ACRH5_LENGTH                          0x1
#define _TU16ACRH_TU16ACRH5_MASK                            0x20
#define _TU16ACRH_TU16ACRH6_POSN                            0x6
#define _TU16ACRH_TU16ACRH6_POSITION                        0x6
#define _TU16ACRH_TU16ACRH6_SIZE                            0x1
#define _TU16ACRH_TU16ACRH6_LENGTH                          0x1
#define _TU16ACRH_TU16ACRH6_MASK                            0x40
#define _TU16ACRH_TU16ACRH7_POSN                            0x7
#define _TU16ACRH_TU16ACRH7_POSITION                        0x7
#define _TU16ACRH_TU16ACRH7_SIZE                            0x1
#define _TU16ACRH_TU16ACRH7_LENGTH                          0x1
#define _TU16ACRH_TU16ACRH7_MASK                            0x80
#define _TU16ACRH_TU16ACR8_POSN                             0x0
#define _TU16ACRH_TU16ACR8_POSITION                         0x0
#define _TU16ACRH_TU16ACR8_SIZE                             0x1
#define _TU16ACRH_TU16ACR8_LENGTH                           0x1
#define _TU16ACRH_TU16ACR8_MASK                             0x1
#define _TU16ACRH_TU16ACR9_POSN                             0x1
#define _TU16ACRH_TU16ACR9_POSITION                         0x1
#define _TU16ACRH_TU16ACR9_SIZE                             0x1
#define _TU16ACRH_TU16ACR9_LENGTH                           0x1
#define _TU16ACRH_TU16ACR9_MASK                             0x2
#define _TU16ACRH_TU16ACR10_POSN                            0x2
#define _TU16ACRH_TU16ACR10_POSITION                        0x2
#define _TU16ACRH_TU16ACR10_SIZE                            0x1
#define _TU16ACRH_TU16ACR10_LENGTH                          0x1
#define _TU16ACRH_TU16ACR10_MASK                            0x4
#define _TU16ACRH_TU16ACR11_POSN                            0x3
#define _TU16ACRH_TU16ACR11_POSITION                        0x3
#define _TU16ACRH_TU16ACR11_SIZE                            0x1
#define _TU16ACRH_TU16ACR11_LENGTH                          0x1
#define _TU16ACRH_TU16ACR11_MASK                            0x8
#define _TU16ACRH_TU16ACR12_POSN                            0x4
#define _TU16ACRH_TU16ACR12_POSITION                        0x4
#define _TU16ACRH_TU16ACR12_SIZE                            0x1
#define _TU16ACRH_TU16ACR12_LENGTH                          0x1
#define _TU16ACRH_TU16ACR12_MASK                            0x10
#define _TU16ACRH_TU16ACR13_POSN                            0x5
#define _TU16ACRH_TU16ACR13_POSITION                        0x5
#define _TU16ACRH_TU16ACR13_SIZE                            0x1
#define _TU16ACRH_TU16ACR13_LENGTH                          0x1
#define _TU16ACRH_TU16ACR13_MASK                            0x20
#define _TU16ACRH_TU16ACR14_POSN                            0x6
#define _TU16ACRH_TU16ACR14_POSITION                        0x6
#define _TU16ACRH_TU16ACR14_SIZE                            0x1
#define _TU16ACRH_TU16ACR14_LENGTH                          0x1
#define _TU16ACRH_TU16ACR14_MASK                            0x40
#define _TU16ACRH_TU16ACR15_POSN                            0x7
#define _TU16ACRH_TU16ACR15_POSITION                        0x7
#define _TU16ACRH_TU16ACR15_SIZE                            0x1
#define _TU16ACRH_TU16ACR15_LENGTH                          0x1
#define _TU16ACRH_TU16ACR15_MASK                            0x80

// Register: TU16ATMRT
#define TU16ATMRT TU16ATMRT
extern volatile unsigned char           TU16ATMRT           __at(0x133);
#ifndef _LIB_BUILD
asm("TU16ATMRT equ 0133h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMRT                   :8;
    };
    struct {
        unsigned TMRT0                  :1;
        unsigned TMRT1                  :1;
        unsigned TMRT2                  :1;
        unsigned TMRT3                  :1;
        unsigned TMRT4                  :1;
        unsigned TMRT5                  :1;
        unsigned TMRT6                  :1;
        unsigned TMRT7                  :1;
    };
    struct {
        unsigned TU16ATMRT0             :1;
        unsigned TU16ATMRT1             :1;
        unsigned TU16ATMRT2             :1;
        unsigned TU16ATMRT3             :1;
        unsigned TU16ATMRT4             :1;
        unsigned TU16ATMRT5             :1;
        unsigned TU16ATMRT6             :1;
        unsigned TU16ATMRT7             :1;
    };
    struct {
        unsigned TU16ATMR24             :1;
        unsigned TU16ATMR25             :1;
        unsigned TU16ATMR26             :1;
        unsigned TU16ATMR27             :1;
        unsigned TU16ATMR28             :1;
        unsigned TU16ATMR29             :1;
        unsigned TU16ATMR30             :1;
        unsigned TU16ATMR31             :1;
    };
} TU16ATMRTbits_t;
extern volatile TU16ATMRTbits_t TU16ATMRTbits __at(0x133);
// bitfield macros
#define _TU16ATMRT_TMRT_POSN                                0x0
#define _TU16ATMRT_TMRT_POSITION                            0x0
#define _TU16ATMRT_TMRT_SIZE                                0x8
#define _TU16ATMRT_TMRT_LENGTH                              0x8
#define _TU16ATMRT_TMRT_MASK                                0xFF
#define _TU16ATMRT_TMRT0_POSN                               0x0
#define _TU16ATMRT_TMRT0_POSITION                           0x0
#define _TU16ATMRT_TMRT0_SIZE                               0x1
#define _TU16ATMRT_TMRT0_LENGTH                             0x1
#define _TU16ATMRT_TMRT0_MASK                               0x1
#define _TU16ATMRT_TMRT1_POSN                               0x1
#define _TU16ATMRT_TMRT1_POSITION                           0x1
#define _TU16ATMRT_TMRT1_SIZE                               0x1
#define _TU16ATMRT_TMRT1_LENGTH                             0x1
#define _TU16ATMRT_TMRT1_MASK                               0x2
#define _TU16ATMRT_TMRT2_POSN                               0x2
#define _TU16ATMRT_TMRT2_POSITION                           0x2
#define _TU16ATMRT_TMRT2_SIZE                               0x1
#define _TU16ATMRT_TMRT2_LENGTH                             0x1
#define _TU16ATMRT_TMRT2_MASK                               0x4
#define _TU16ATMRT_TMRT3_POSN                               0x3
#define _TU16ATMRT_TMRT3_POSITION                           0x3
#define _TU16ATMRT_TMRT3_SIZE                               0x1
#define _TU16ATMRT_TMRT3_LENGTH                             0x1
#define _TU16ATMRT_TMRT3_MASK                               0x8
#define _TU16ATMRT_TMRT4_POSN                               0x4
#define _TU16ATMRT_TMRT4_POSITION                           0x4
#define _TU16ATMRT_TMRT4_SIZE                               0x1
#define _TU16ATMRT_TMRT4_LENGTH                             0x1
#define _TU16ATMRT_TMRT4_MASK                               0x10
#define _TU16ATMRT_TMRT5_POSN                               0x5
#define _TU16ATMRT_TMRT5_POSITION                           0x5
#define _TU16ATMRT_TMRT5_SIZE                               0x1
#define _TU16ATMRT_TMRT5_LENGTH                             0x1
#define _TU16ATMRT_TMRT5_MASK                               0x20
#define _TU16ATMRT_TMRT6_POSN                               0x6
#define _TU16ATMRT_TMRT6_POSITION                           0x6
#define _TU16ATMRT_TMRT6_SIZE                               0x1
#define _TU16ATMRT_TMRT6_LENGTH                             0x1
#define _TU16ATMRT_TMRT6_MASK                               0x40
#define _TU16ATMRT_TMRT7_POSN                               0x7
#define _TU16ATMRT_TMRT7_POSITION                           0x7
#define _TU16ATMRT_TMRT7_SIZE                               0x1
#define _TU16ATMRT_TMRT7_LENGTH                             0x1
#define _TU16ATMRT_TMRT7_MASK                               0x80
#define _TU16ATMRT_TU16ATMRT0_POSN                          0x0
#define _TU16ATMRT_TU16ATMRT0_POSITION                      0x0
#define _TU16ATMRT_TU16ATMRT0_SIZE                          0x1
#define _TU16ATMRT_TU16ATMRT0_LENGTH                        0x1
#define _TU16ATMRT_TU16ATMRT0_MASK                          0x1
#define _TU16ATMRT_TU16ATMRT1_POSN                          0x1
#define _TU16ATMRT_TU16ATMRT1_POSITION                      0x1
#define _TU16ATMRT_TU16ATMRT1_SIZE                          0x1
#define _TU16ATMRT_TU16ATMRT1_LENGTH                        0x1
#define _TU16ATMRT_TU16ATMRT1_MASK                          0x2
#define _TU16ATMRT_TU16ATMRT2_POSN                          0x2
#define _TU16ATMRT_TU16ATMRT2_POSITION                      0x2
#define _TU16ATMRT_TU16ATMRT2_SIZE                          0x1
#define _TU16ATMRT_TU16ATMRT2_LENGTH                        0x1
#define _TU16ATMRT_TU16ATMRT2_MASK                          0x4
#define _TU16ATMRT_TU16ATMRT3_POSN                          0x3
#define _TU16ATMRT_TU16ATMRT3_POSITION                      0x3
#define _TU16ATMRT_TU16ATMRT3_SIZE                          0x1
#define _TU16ATMRT_TU16ATMRT3_LENGTH                        0x1
#define _TU16ATMRT_TU16ATMRT3_MASK                          0x8
#define _TU16ATMRT_TU16ATMRT4_POSN                          0x4
#define _TU16ATMRT_TU16ATMRT4_POSITION                      0x4
#define _TU16ATMRT_TU16ATMRT4_SIZE                          0x1
#define _TU16ATMRT_TU16ATMRT4_LENGTH                        0x1
#define _TU16ATMRT_TU16ATMRT4_MASK                          0x10
#define _TU16ATMRT_TU16ATMRT5_POSN                          0x5
#define _TU16ATMRT_TU16ATMRT5_POSITION                      0x5
#define _TU16ATMRT_TU16ATMRT5_SIZE                          0x1
#define _TU16ATMRT_TU16ATMRT5_LENGTH                        0x1
#define _TU16ATMRT_TU16ATMRT5_MASK                          0x20
#define _TU16ATMRT_TU16ATMRT6_POSN                          0x6
#define _TU16ATMRT_TU16ATMRT6_POSITION                      0x6
#define _TU16ATMRT_TU16ATMRT6_SIZE                          0x1
#define _TU16ATMRT_TU16ATMRT6_LENGTH                        0x1
#define _TU16ATMRT_TU16ATMRT6_MASK                          0x40
#define _TU16ATMRT_TU16ATMRT7_POSN                          0x7
#define _TU16ATMRT_TU16ATMRT7_POSITION                      0x7
#define _TU16ATMRT_TU16ATMRT7_SIZE                          0x1
#define _TU16ATMRT_TU16ATMRT7_LENGTH                        0x1
#define _TU16ATMRT_TU16ATMRT7_MASK                          0x80
#define _TU16ATMRT_TU16ATMR24_POSN                          0x0
#define _TU16ATMRT_TU16ATMR24_POSITION                      0x0
#define _TU16ATMRT_TU16ATMR24_SIZE                          0x1
#define _TU16ATMRT_TU16ATMR24_LENGTH                        0x1
#define _TU16ATMRT_TU16ATMR24_MASK                          0x1
#define _TU16ATMRT_TU16ATMR25_POSN                          0x1
#define _TU16ATMRT_TU16ATMR25_POSITION                      0x1
#define _TU16ATMRT_TU16ATMR25_SIZE                          0x1
#define _TU16ATMRT_TU16ATMR25_LENGTH                        0x1
#define _TU16ATMRT_TU16ATMR25_MASK                          0x2
#define _TU16ATMRT_TU16ATMR26_POSN                          0x2
#define _TU16ATMRT_TU16ATMR26_POSITION                      0x2
#define _TU16ATMRT_TU16ATMR26_SIZE                          0x1
#define _TU16ATMRT_TU16ATMR26_LENGTH                        0x1
#define _TU16ATMRT_TU16ATMR26_MASK                          0x4
#define _TU16ATMRT_TU16ATMR27_POSN                          0x3
#define _TU16ATMRT_TU16ATMR27_POSITION                      0x3
#define _TU16ATMRT_TU16ATMR27_SIZE                          0x1
#define _TU16ATMRT_TU16ATMR27_LENGTH                        0x1
#define _TU16ATMRT_TU16ATMR27_MASK                          0x8
#define _TU16ATMRT_TU16ATMR28_POSN                          0x4
#define _TU16ATMRT_TU16ATMR28_POSITION                      0x4
#define _TU16ATMRT_TU16ATMR28_SIZE                          0x1
#define _TU16ATMRT_TU16ATMR28_LENGTH                        0x1
#define _TU16ATMRT_TU16ATMR28_MASK                          0x10
#define _TU16ATMRT_TU16ATMR29_POSN                          0x5
#define _TU16ATMRT_TU16ATMR29_POSITION                      0x5
#define _TU16ATMRT_TU16ATMR29_SIZE                          0x1
#define _TU16ATMRT_TU16ATMR29_LENGTH                        0x1
#define _TU16ATMRT_TU16ATMR29_MASK                          0x20
#define _TU16ATMRT_TU16ATMR30_POSN                          0x6
#define _TU16ATMRT_TU16ATMR30_POSITION                      0x6
#define _TU16ATMRT_TU16ATMR30_SIZE                          0x1
#define _TU16ATMRT_TU16ATMR30_LENGTH                        0x1
#define _TU16ATMRT_TU16ATMR30_MASK                          0x40
#define _TU16ATMRT_TU16ATMR31_POSN                          0x7
#define _TU16ATMRT_TU16ATMR31_POSITION                      0x7
#define _TU16ATMRT_TU16ATMR31_SIZE                          0x1
#define _TU16ATMRT_TU16ATMR31_LENGTH                        0x1
#define _TU16ATMRT_TU16ATMR31_MASK                          0x80

// Register: TU16ACRT
#define TU16ACRT TU16ACRT
extern volatile unsigned char           TU16ACRT            __at(0x133);
#ifndef _LIB_BUILD
asm("TU16ACRT equ 0133h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CRT                    :8;
    };
    struct {
        unsigned CRT0                   :1;
        unsigned CRT1                   :1;
        unsigned CRT2                   :1;
        unsigned CRT3                   :1;
        unsigned CRT4                   :1;
        unsigned CRT5                   :1;
        unsigned CRT6                   :1;
        unsigned CRT7                   :1;
    };
    struct {
        unsigned TU16ACRT0              :1;
        unsigned TU16ACRT1              :1;
        unsigned TU16ACRT2              :1;
        unsigned TU16ACRT3              :1;
        unsigned TU16ACRT4              :1;
        unsigned TU16ACRT5              :1;
        unsigned TU16ACRT6              :1;
        unsigned TU16ACRT7              :1;
    };
    struct {
        unsigned TU16ACR24              :1;
        unsigned TU16ACR25              :1;
        unsigned TU16ACR26              :1;
        unsigned TU16ACR27              :1;
        unsigned TU16ACR28              :1;
        unsigned TU16ACR29              :1;
        unsigned TU16ACR30              :1;
        unsigned TU16ACR31              :1;
    };
} TU16ACRTbits_t;
extern volatile TU16ACRTbits_t TU16ACRTbits __at(0x133);
// bitfield macros
#define _TU16ACRT_CRT_POSN                                  0x0
#define _TU16ACRT_CRT_POSITION                              0x0
#define _TU16ACRT_CRT_SIZE                                  0x8
#define _TU16ACRT_CRT_LENGTH                                0x8
#define _TU16ACRT_CRT_MASK                                  0xFF
#define _TU16ACRT_CRT0_POSN                                 0x0
#define _TU16ACRT_CRT0_POSITION                             0x0
#define _TU16ACRT_CRT0_SIZE                                 0x1
#define _TU16ACRT_CRT0_LENGTH                               0x1
#define _TU16ACRT_CRT0_MASK                                 0x1
#define _TU16ACRT_CRT1_POSN                                 0x1
#define _TU16ACRT_CRT1_POSITION                             0x1
#define _TU16ACRT_CRT1_SIZE                                 0x1
#define _TU16ACRT_CRT1_LENGTH                               0x1
#define _TU16ACRT_CRT1_MASK                                 0x2
#define _TU16ACRT_CRT2_POSN                                 0x2
#define _TU16ACRT_CRT2_POSITION                             0x2
#define _TU16ACRT_CRT2_SIZE                                 0x1
#define _TU16ACRT_CRT2_LENGTH                               0x1
#define _TU16ACRT_CRT2_MASK                                 0x4
#define _TU16ACRT_CRT3_POSN                                 0x3
#define _TU16ACRT_CRT3_POSITION                             0x3
#define _TU16ACRT_CRT3_SIZE                                 0x1
#define _TU16ACRT_CRT3_LENGTH                               0x1
#define _TU16ACRT_CRT3_MASK                                 0x8
#define _TU16ACRT_CRT4_POSN                                 0x4
#define _TU16ACRT_CRT4_POSITION                             0x4
#define _TU16ACRT_CRT4_SIZE                                 0x1
#define _TU16ACRT_CRT4_LENGTH                               0x1
#define _TU16ACRT_CRT4_MASK                                 0x10
#define _TU16ACRT_CRT5_POSN                                 0x5
#define _TU16ACRT_CRT5_POSITION                             0x5
#define _TU16ACRT_CRT5_SIZE                                 0x1
#define _TU16ACRT_CRT5_LENGTH                               0x1
#define _TU16ACRT_CRT5_MASK                                 0x20
#define _TU16ACRT_CRT6_POSN                                 0x6
#define _TU16ACRT_CRT6_POSITION                             0x6
#define _TU16ACRT_CRT6_SIZE                                 0x1
#define _TU16ACRT_CRT6_LENGTH                               0x1
#define _TU16ACRT_CRT6_MASK                                 0x40
#define _TU16ACRT_CRT7_POSN                                 0x7
#define _TU16ACRT_CRT7_POSITION                             0x7
#define _TU16ACRT_CRT7_SIZE                                 0x1
#define _TU16ACRT_CRT7_LENGTH                               0x1
#define _TU16ACRT_CRT7_MASK                                 0x80
#define _TU16ACRT_TU16ACRT0_POSN                            0x0
#define _TU16ACRT_TU16ACRT0_POSITION                        0x0
#define _TU16ACRT_TU16ACRT0_SIZE                            0x1
#define _TU16ACRT_TU16ACRT0_LENGTH                          0x1
#define _TU16ACRT_TU16ACRT0_MASK                            0x1
#define _TU16ACRT_TU16ACRT1_POSN                            0x1
#define _TU16ACRT_TU16ACRT1_POSITION                        0x1
#define _TU16ACRT_TU16ACRT1_SIZE                            0x1
#define _TU16ACRT_TU16ACRT1_LENGTH                          0x1
#define _TU16ACRT_TU16ACRT1_MASK                            0x2
#define _TU16ACRT_TU16ACRT2_POSN                            0x2
#define _TU16ACRT_TU16ACRT2_POSITION                        0x2
#define _TU16ACRT_TU16ACRT2_SIZE                            0x1
#define _TU16ACRT_TU16ACRT2_LENGTH                          0x1
#define _TU16ACRT_TU16ACRT2_MASK                            0x4
#define _TU16ACRT_TU16ACRT3_POSN                            0x3
#define _TU16ACRT_TU16ACRT3_POSITION                        0x3
#define _TU16ACRT_TU16ACRT3_SIZE                            0x1
#define _TU16ACRT_TU16ACRT3_LENGTH                          0x1
#define _TU16ACRT_TU16ACRT3_MASK                            0x8
#define _TU16ACRT_TU16ACRT4_POSN                            0x4
#define _TU16ACRT_TU16ACRT4_POSITION                        0x4
#define _TU16ACRT_TU16ACRT4_SIZE                            0x1
#define _TU16ACRT_TU16ACRT4_LENGTH                          0x1
#define _TU16ACRT_TU16ACRT4_MASK                            0x10
#define _TU16ACRT_TU16ACRT5_POSN                            0x5
#define _TU16ACRT_TU16ACRT5_POSITION                        0x5
#define _TU16ACRT_TU16ACRT5_SIZE                            0x1
#define _TU16ACRT_TU16ACRT5_LENGTH                          0x1
#define _TU16ACRT_TU16ACRT5_MASK                            0x20
#define _TU16ACRT_TU16ACRT6_POSN                            0x6
#define _TU16ACRT_TU16ACRT6_POSITION                        0x6
#define _TU16ACRT_TU16ACRT6_SIZE                            0x1
#define _TU16ACRT_TU16ACRT6_LENGTH                          0x1
#define _TU16ACRT_TU16ACRT6_MASK                            0x40
#define _TU16ACRT_TU16ACRT7_POSN                            0x7
#define _TU16ACRT_TU16ACRT7_POSITION                        0x7
#define _TU16ACRT_TU16ACRT7_SIZE                            0x1
#define _TU16ACRT_TU16ACRT7_LENGTH                          0x1
#define _TU16ACRT_TU16ACRT7_MASK                            0x80
#define _TU16ACRT_TU16ACR24_POSN                            0x0
#define _TU16ACRT_TU16ACR24_POSITION                        0x0
#define _TU16ACRT_TU16ACR24_SIZE                            0x1
#define _TU16ACRT_TU16ACR24_LENGTH                          0x1
#define _TU16ACRT_TU16ACR24_MASK                            0x1
#define _TU16ACRT_TU16ACR25_POSN                            0x1
#define _TU16ACRT_TU16ACR25_POSITION                        0x1
#define _TU16ACRT_TU16ACR25_SIZE                            0x1
#define _TU16ACRT_TU16ACR25_LENGTH                          0x1
#define _TU16ACRT_TU16ACR25_MASK                            0x2
#define _TU16ACRT_TU16ACR26_POSN                            0x2
#define _TU16ACRT_TU16ACR26_POSITION                        0x2
#define _TU16ACRT_TU16ACR26_SIZE                            0x1
#define _TU16ACRT_TU16ACR26_LENGTH                          0x1
#define _TU16ACRT_TU16ACR26_MASK                            0x4
#define _TU16ACRT_TU16ACR27_POSN                            0x3
#define _TU16ACRT_TU16ACR27_POSITION                        0x3
#define _TU16ACRT_TU16ACR27_SIZE                            0x1
#define _TU16ACRT_TU16ACR27_LENGTH                          0x1
#define _TU16ACRT_TU16ACR27_MASK                            0x8
#define _TU16ACRT_TU16ACR28_POSN                            0x4
#define _TU16ACRT_TU16ACR28_POSITION                        0x4
#define _TU16ACRT_TU16ACR28_SIZE                            0x1
#define _TU16ACRT_TU16ACR28_LENGTH                          0x1
#define _TU16ACRT_TU16ACR28_MASK                            0x10
#define _TU16ACRT_TU16ACR29_POSN                            0x5
#define _TU16ACRT_TU16ACR29_POSITION                        0x5
#define _TU16ACRT_TU16ACR29_SIZE                            0x1
#define _TU16ACRT_TU16ACR29_LENGTH                          0x1
#define _TU16ACRT_TU16ACR29_MASK                            0x20
#define _TU16ACRT_TU16ACR30_POSN                            0x6
#define _TU16ACRT_TU16ACR30_POSITION                        0x6
#define _TU16ACRT_TU16ACR30_SIZE                            0x1
#define _TU16ACRT_TU16ACR30_LENGTH                          0x1
#define _TU16ACRT_TU16ACR30_MASK                            0x40
#define _TU16ACRT_TU16ACR31_POSN                            0x7
#define _TU16ACRT_TU16ACR31_POSITION                        0x7
#define _TU16ACRT_TU16ACR31_SIZE                            0x1
#define _TU16ACRT_TU16ACR31_LENGTH                          0x1
#define _TU16ACRT_TU16ACR31_MASK                            0x80

// Register: TU16APR
#define TU16APR TU16APR
extern volatile unsigned long           TU16APR             __at(0x134);
#ifndef _LIB_BUILD
asm("TU16APR equ 0134h");
#endif

// Register: TU16APRL
#define TU16APRL TU16APRL
extern volatile unsigned char           TU16APRL            __at(0x134);
#ifndef _LIB_BUILD
asm("TU16APRL equ 0134h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRL                    :8;
    };
    struct {
        unsigned PRL0                   :1;
        unsigned PRL1                   :1;
        unsigned PRL2                   :1;
        unsigned PRL3                   :1;
        unsigned PRL4                   :1;
        unsigned PRL5                   :1;
        unsigned PRL6                   :1;
        unsigned PRL7                   :1;
    };
    struct {
        unsigned TU16APRL0              :1;
        unsigned TU16APRL1              :1;
        unsigned TU16APRL2              :1;
        unsigned TU16APRL3              :1;
        unsigned TU16APRL4              :1;
        unsigned TU16APRL5              :1;
        unsigned TU16APRL6              :1;
        unsigned TU16APRL7              :1;
    };
    struct {
        unsigned TU16APR0               :1;
        unsigned TU16APR1               :1;
        unsigned TU16APR2               :1;
        unsigned TU16APR3               :1;
        unsigned TU16APR4               :1;
        unsigned TU16APR5               :1;
        unsigned TU16APR6               :1;
        unsigned TU16APR7               :1;
    };
} TU16APRLbits_t;
extern volatile TU16APRLbits_t TU16APRLbits __at(0x134);
// bitfield macros
#define _TU16APRL_PRL_POSN                                  0x0
#define _TU16APRL_PRL_POSITION                              0x0
#define _TU16APRL_PRL_SIZE                                  0x8
#define _TU16APRL_PRL_LENGTH                                0x8
#define _TU16APRL_PRL_MASK                                  0xFF
#define _TU16APRL_PRL0_POSN                                 0x0
#define _TU16APRL_PRL0_POSITION                             0x0
#define _TU16APRL_PRL0_SIZE                                 0x1
#define _TU16APRL_PRL0_LENGTH                               0x1
#define _TU16APRL_PRL0_MASK                                 0x1
#define _TU16APRL_PRL1_POSN                                 0x1
#define _TU16APRL_PRL1_POSITION                             0x1
#define _TU16APRL_PRL1_SIZE                                 0x1
#define _TU16APRL_PRL1_LENGTH                               0x1
#define _TU16APRL_PRL1_MASK                                 0x2
#define _TU16APRL_PRL2_POSN                                 0x2
#define _TU16APRL_PRL2_POSITION                             0x2
#define _TU16APRL_PRL2_SIZE                                 0x1
#define _TU16APRL_PRL2_LENGTH                               0x1
#define _TU16APRL_PRL2_MASK                                 0x4
#define _TU16APRL_PRL3_POSN                                 0x3
#define _TU16APRL_PRL3_POSITION                             0x3
#define _TU16APRL_PRL3_SIZE                                 0x1
#define _TU16APRL_PRL3_LENGTH                               0x1
#define _TU16APRL_PRL3_MASK                                 0x8
#define _TU16APRL_PRL4_POSN                                 0x4
#define _TU16APRL_PRL4_POSITION                             0x4
#define _TU16APRL_PRL4_SIZE                                 0x1
#define _TU16APRL_PRL4_LENGTH                               0x1
#define _TU16APRL_PRL4_MASK                                 0x10
#define _TU16APRL_PRL5_POSN                                 0x5
#define _TU16APRL_PRL5_POSITION                             0x5
#define _TU16APRL_PRL5_SIZE                                 0x1
#define _TU16APRL_PRL5_LENGTH                               0x1
#define _TU16APRL_PRL5_MASK                                 0x20
#define _TU16APRL_PRL6_POSN                                 0x6
#define _TU16APRL_PRL6_POSITION                             0x6
#define _TU16APRL_PRL6_SIZE                                 0x1
#define _TU16APRL_PRL6_LENGTH                               0x1
#define _TU16APRL_PRL6_MASK                                 0x40
#define _TU16APRL_PRL7_POSN                                 0x7
#define _TU16APRL_PRL7_POSITION                             0x7
#define _TU16APRL_PRL7_SIZE                                 0x1
#define _TU16APRL_PRL7_LENGTH                               0x1
#define _TU16APRL_PRL7_MASK                                 0x80
#define _TU16APRL_TU16APRL0_POSN                            0x0
#define _TU16APRL_TU16APRL0_POSITION                        0x0
#define _TU16APRL_TU16APRL0_SIZE                            0x1
#define _TU16APRL_TU16APRL0_LENGTH                          0x1
#define _TU16APRL_TU16APRL0_MASK                            0x1
#define _TU16APRL_TU16APRL1_POSN                            0x1
#define _TU16APRL_TU16APRL1_POSITION                        0x1
#define _TU16APRL_TU16APRL1_SIZE                            0x1
#define _TU16APRL_TU16APRL1_LENGTH                          0x1
#define _TU16APRL_TU16APRL1_MASK                            0x2
#define _TU16APRL_TU16APRL2_POSN                            0x2
#define _TU16APRL_TU16APRL2_POSITION                        0x2
#define _TU16APRL_TU16APRL2_SIZE                            0x1
#define _TU16APRL_TU16APRL2_LENGTH                          0x1
#define _TU16APRL_TU16APRL2_MASK                            0x4
#define _TU16APRL_TU16APRL3_POSN                            0x3
#define _TU16APRL_TU16APRL3_POSITION                        0x3
#define _TU16APRL_TU16APRL3_SIZE                            0x1
#define _TU16APRL_TU16APRL3_LENGTH                          0x1
#define _TU16APRL_TU16APRL3_MASK                            0x8
#define _TU16APRL_TU16APRL4_POSN                            0x4
#define _TU16APRL_TU16APRL4_POSITION                        0x4
#define _TU16APRL_TU16APRL4_SIZE                            0x1
#define _TU16APRL_TU16APRL4_LENGTH                          0x1
#define _TU16APRL_TU16APRL4_MASK                            0x10
#define _TU16APRL_TU16APRL5_POSN                            0x5
#define _TU16APRL_TU16APRL5_POSITION                        0x5
#define _TU16APRL_TU16APRL5_SIZE                            0x1
#define _TU16APRL_TU16APRL5_LENGTH                          0x1
#define _TU16APRL_TU16APRL5_MASK                            0x20
#define _TU16APRL_TU16APRL6_POSN                            0x6
#define _TU16APRL_TU16APRL6_POSITION                        0x6
#define _TU16APRL_TU16APRL6_SIZE                            0x1
#define _TU16APRL_TU16APRL6_LENGTH                          0x1
#define _TU16APRL_TU16APRL6_MASK                            0x40
#define _TU16APRL_TU16APRL7_POSN                            0x7
#define _TU16APRL_TU16APRL7_POSITION                        0x7
#define _TU16APRL_TU16APRL7_SIZE                            0x1
#define _TU16APRL_TU16APRL7_LENGTH                          0x1
#define _TU16APRL_TU16APRL7_MASK                            0x80
#define _TU16APRL_TU16APR0_POSN                             0x0
#define _TU16APRL_TU16APR0_POSITION                         0x0
#define _TU16APRL_TU16APR0_SIZE                             0x1
#define _TU16APRL_TU16APR0_LENGTH                           0x1
#define _TU16APRL_TU16APR0_MASK                             0x1
#define _TU16APRL_TU16APR1_POSN                             0x1
#define _TU16APRL_TU16APR1_POSITION                         0x1
#define _TU16APRL_TU16APR1_SIZE                             0x1
#define _TU16APRL_TU16APR1_LENGTH                           0x1
#define _TU16APRL_TU16APR1_MASK                             0x2
#define _TU16APRL_TU16APR2_POSN                             0x2
#define _TU16APRL_TU16APR2_POSITION                         0x2
#define _TU16APRL_TU16APR2_SIZE                             0x1
#define _TU16APRL_TU16APR2_LENGTH                           0x1
#define _TU16APRL_TU16APR2_MASK                             0x4
#define _TU16APRL_TU16APR3_POSN                             0x3
#define _TU16APRL_TU16APR3_POSITION                         0x3
#define _TU16APRL_TU16APR3_SIZE                             0x1
#define _TU16APRL_TU16APR3_LENGTH                           0x1
#define _TU16APRL_TU16APR3_MASK                             0x8
#define _TU16APRL_TU16APR4_POSN                             0x4
#define _TU16APRL_TU16APR4_POSITION                         0x4
#define _TU16APRL_TU16APR4_SIZE                             0x1
#define _TU16APRL_TU16APR4_LENGTH                           0x1
#define _TU16APRL_TU16APR4_MASK                             0x10
#define _TU16APRL_TU16APR5_POSN                             0x5
#define _TU16APRL_TU16APR5_POSITION                         0x5
#define _TU16APRL_TU16APR5_SIZE                             0x1
#define _TU16APRL_TU16APR5_LENGTH                           0x1
#define _TU16APRL_TU16APR5_MASK                             0x20
#define _TU16APRL_TU16APR6_POSN                             0x6
#define _TU16APRL_TU16APR6_POSITION                         0x6
#define _TU16APRL_TU16APR6_SIZE                             0x1
#define _TU16APRL_TU16APR6_LENGTH                           0x1
#define _TU16APRL_TU16APR6_MASK                             0x40
#define _TU16APRL_TU16APR7_POSN                             0x7
#define _TU16APRL_TU16APR7_POSITION                         0x7
#define _TU16APRL_TU16APR7_SIZE                             0x1
#define _TU16APRL_TU16APR7_LENGTH                           0x1
#define _TU16APRL_TU16APR7_MASK                             0x80

// Register: TU16APRH
#define TU16APRH TU16APRH
extern volatile unsigned char           TU16APRH            __at(0x135);
#ifndef _LIB_BUILD
asm("TU16APRH equ 0135h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRH                    :8;
    };
    struct {
        unsigned PRH0                   :1;
        unsigned PRH1                   :1;
        unsigned PRH2                   :1;
        unsigned PRH3                   :1;
        unsigned PRH4                   :1;
        unsigned PRH5                   :1;
        unsigned PRH6                   :1;
        unsigned PRH7                   :1;
    };
    struct {
        unsigned TU16APRH0              :1;
        unsigned TU16APRH1              :1;
        unsigned TU16APRH2              :1;
        unsigned TU16APRH3              :1;
        unsigned TU16APRH4              :1;
        unsigned TU16APRH5              :1;
        unsigned TU16APRH6              :1;
        unsigned TU16APRH7              :1;
    };
    struct {
        unsigned TU16APR8               :1;
        unsigned TU16APR9               :1;
        unsigned TU16APR10              :1;
        unsigned TU16APR11              :1;
        unsigned TU16APR12              :1;
        unsigned TU16APR13              :1;
        unsigned TU16APR14              :1;
        unsigned TU16APR15              :1;
    };
} TU16APRHbits_t;
extern volatile TU16APRHbits_t TU16APRHbits __at(0x135);
// bitfield macros
#define _TU16APRH_PRH_POSN                                  0x0
#define _TU16APRH_PRH_POSITION                              0x0
#define _TU16APRH_PRH_SIZE                                  0x8
#define _TU16APRH_PRH_LENGTH                                0x8
#define _TU16APRH_PRH_MASK                                  0xFF
#define _TU16APRH_PRH0_POSN                                 0x0
#define _TU16APRH_PRH0_POSITION                             0x0
#define _TU16APRH_PRH0_SIZE                                 0x1
#define _TU16APRH_PRH0_LENGTH                               0x1
#define _TU16APRH_PRH0_MASK                                 0x1
#define _TU16APRH_PRH1_POSN                                 0x1
#define _TU16APRH_PRH1_POSITION                             0x1
#define _TU16APRH_PRH1_SIZE                                 0x1
#define _TU16APRH_PRH1_LENGTH                               0x1
#define _TU16APRH_PRH1_MASK                                 0x2
#define _TU16APRH_PRH2_POSN                                 0x2
#define _TU16APRH_PRH2_POSITION                             0x2
#define _TU16APRH_PRH2_SIZE                                 0x1
#define _TU16APRH_PRH2_LENGTH                               0x1
#define _TU16APRH_PRH2_MASK                                 0x4
#define _TU16APRH_PRH3_POSN                                 0x3
#define _TU16APRH_PRH3_POSITION                             0x3
#define _TU16APRH_PRH3_SIZE                                 0x1
#define _TU16APRH_PRH3_LENGTH                               0x1
#define _TU16APRH_PRH3_MASK                                 0x8
#define _TU16APRH_PRH4_POSN                                 0x4
#define _TU16APRH_PRH4_POSITION                             0x4
#define _TU16APRH_PRH4_SIZE                                 0x1
#define _TU16APRH_PRH4_LENGTH                               0x1
#define _TU16APRH_PRH4_MASK                                 0x10
#define _TU16APRH_PRH5_POSN                                 0x5
#define _TU16APRH_PRH5_POSITION                             0x5
#define _TU16APRH_PRH5_SIZE                                 0x1
#define _TU16APRH_PRH5_LENGTH                               0x1
#define _TU16APRH_PRH5_MASK                                 0x20
#define _TU16APRH_PRH6_POSN                                 0x6
#define _TU16APRH_PRH6_POSITION                             0x6
#define _TU16APRH_PRH6_SIZE                                 0x1
#define _TU16APRH_PRH6_LENGTH                               0x1
#define _TU16APRH_PRH6_MASK                                 0x40
#define _TU16APRH_PRH7_POSN                                 0x7
#define _TU16APRH_PRH7_POSITION                             0x7
#define _TU16APRH_PRH7_SIZE                                 0x1
#define _TU16APRH_PRH7_LENGTH                               0x1
#define _TU16APRH_PRH7_MASK                                 0x80
#define _TU16APRH_TU16APRH0_POSN                            0x0
#define _TU16APRH_TU16APRH0_POSITION                        0x0
#define _TU16APRH_TU16APRH0_SIZE                            0x1
#define _TU16APRH_TU16APRH0_LENGTH                          0x1
#define _TU16APRH_TU16APRH0_MASK                            0x1
#define _TU16APRH_TU16APRH1_POSN                            0x1
#define _TU16APRH_TU16APRH1_POSITION                        0x1
#define _TU16APRH_TU16APRH1_SIZE                            0x1
#define _TU16APRH_TU16APRH1_LENGTH                          0x1
#define _TU16APRH_TU16APRH1_MASK                            0x2
#define _TU16APRH_TU16APRH2_POSN                            0x2
#define _TU16APRH_TU16APRH2_POSITION                        0x2
#define _TU16APRH_TU16APRH2_SIZE                            0x1
#define _TU16APRH_TU16APRH2_LENGTH                          0x1
#define _TU16APRH_TU16APRH2_MASK                            0x4
#define _TU16APRH_TU16APRH3_POSN                            0x3
#define _TU16APRH_TU16APRH3_POSITION                        0x3
#define _TU16APRH_TU16APRH3_SIZE                            0x1
#define _TU16APRH_TU16APRH3_LENGTH                          0x1
#define _TU16APRH_TU16APRH3_MASK                            0x8
#define _TU16APRH_TU16APRH4_POSN                            0x4
#define _TU16APRH_TU16APRH4_POSITION                        0x4
#define _TU16APRH_TU16APRH4_SIZE                            0x1
#define _TU16APRH_TU16APRH4_LENGTH                          0x1
#define _TU16APRH_TU16APRH4_MASK                            0x10
#define _TU16APRH_TU16APRH5_POSN                            0x5
#define _TU16APRH_TU16APRH5_POSITION                        0x5
#define _TU16APRH_TU16APRH5_SIZE                            0x1
#define _TU16APRH_TU16APRH5_LENGTH                          0x1
#define _TU16APRH_TU16APRH5_MASK                            0x20
#define _TU16APRH_TU16APRH6_POSN                            0x6
#define _TU16APRH_TU16APRH6_POSITION                        0x6
#define _TU16APRH_TU16APRH6_SIZE                            0x1
#define _TU16APRH_TU16APRH6_LENGTH                          0x1
#define _TU16APRH_TU16APRH6_MASK                            0x40
#define _TU16APRH_TU16APRH7_POSN                            0x7
#define _TU16APRH_TU16APRH7_POSITION                        0x7
#define _TU16APRH_TU16APRH7_SIZE                            0x1
#define _TU16APRH_TU16APRH7_LENGTH                          0x1
#define _TU16APRH_TU16APRH7_MASK                            0x80
#define _TU16APRH_TU16APR8_POSN                             0x0
#define _TU16APRH_TU16APR8_POSITION                         0x0
#define _TU16APRH_TU16APR8_SIZE                             0x1
#define _TU16APRH_TU16APR8_LENGTH                           0x1
#define _TU16APRH_TU16APR8_MASK                             0x1
#define _TU16APRH_TU16APR9_POSN                             0x1
#define _TU16APRH_TU16APR9_POSITION                         0x1
#define _TU16APRH_TU16APR9_SIZE                             0x1
#define _TU16APRH_TU16APR9_LENGTH                           0x1
#define _TU16APRH_TU16APR9_MASK                             0x2
#define _TU16APRH_TU16APR10_POSN                            0x2
#define _TU16APRH_TU16APR10_POSITION                        0x2
#define _TU16APRH_TU16APR10_SIZE                            0x1
#define _TU16APRH_TU16APR10_LENGTH                          0x1
#define _TU16APRH_TU16APR10_MASK                            0x4
#define _TU16APRH_TU16APR11_POSN                            0x3
#define _TU16APRH_TU16APR11_POSITION                        0x3
#define _TU16APRH_TU16APR11_SIZE                            0x1
#define _TU16APRH_TU16APR11_LENGTH                          0x1
#define _TU16APRH_TU16APR11_MASK                            0x8
#define _TU16APRH_TU16APR12_POSN                            0x4
#define _TU16APRH_TU16APR12_POSITION                        0x4
#define _TU16APRH_TU16APR12_SIZE                            0x1
#define _TU16APRH_TU16APR12_LENGTH                          0x1
#define _TU16APRH_TU16APR12_MASK                            0x10
#define _TU16APRH_TU16APR13_POSN                            0x5
#define _TU16APRH_TU16APR13_POSITION                        0x5
#define _TU16APRH_TU16APR13_SIZE                            0x1
#define _TU16APRH_TU16APR13_LENGTH                          0x1
#define _TU16APRH_TU16APR13_MASK                            0x20
#define _TU16APRH_TU16APR14_POSN                            0x6
#define _TU16APRH_TU16APR14_POSITION                        0x6
#define _TU16APRH_TU16APR14_SIZE                            0x1
#define _TU16APRH_TU16APR14_LENGTH                          0x1
#define _TU16APRH_TU16APR14_MASK                            0x40
#define _TU16APRH_TU16APR15_POSN                            0x7
#define _TU16APRH_TU16APR15_POSITION                        0x7
#define _TU16APRH_TU16APR15_SIZE                            0x1
#define _TU16APRH_TU16APR15_LENGTH                          0x1
#define _TU16APRH_TU16APR15_MASK                            0x80

// Register: TU16APRT
#define TU16APRT TU16APRT
extern volatile unsigned char           TU16APRT            __at(0x137);
#ifndef _LIB_BUILD
asm("TU16APRT equ 0137h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRT                    :8;
    };
    struct {
        unsigned PRT0                   :1;
        unsigned PRT1                   :1;
        unsigned PRT2                   :1;
        unsigned PRT3                   :1;
        unsigned PRT4                   :1;
        unsigned PRT5                   :1;
        unsigned PRT6                   :1;
        unsigned PRT7                   :1;
    };
    struct {
        unsigned TU16APRT0              :1;
        unsigned TU16APRT1              :1;
        unsigned TU16APRT2              :1;
        unsigned TU16APRT3              :1;
        unsigned TU16APRT4              :1;
        unsigned TU16APRT5              :1;
        unsigned TU16APRT6              :1;
        unsigned TU16APRT7              :1;
    };
    struct {
        unsigned TU16APR24              :1;
        unsigned TU16APR25              :1;
        unsigned TU16APR26              :1;
        unsigned TU16APR27              :1;
        unsigned TU16APR28              :1;
        unsigned TU16APR29              :1;
        unsigned TU16APR30              :1;
        unsigned TU16APR31              :1;
    };
} TU16APRTbits_t;
extern volatile TU16APRTbits_t TU16APRTbits __at(0x137);
// bitfield macros
#define _TU16APRT_PRT_POSN                                  0x0
#define _TU16APRT_PRT_POSITION                              0x0
#define _TU16APRT_PRT_SIZE                                  0x8
#define _TU16APRT_PRT_LENGTH                                0x8
#define _TU16APRT_PRT_MASK                                  0xFF
#define _TU16APRT_PRT0_POSN                                 0x0
#define _TU16APRT_PRT0_POSITION                             0x0
#define _TU16APRT_PRT0_SIZE                                 0x1
#define _TU16APRT_PRT0_LENGTH                               0x1
#define _TU16APRT_PRT0_MASK                                 0x1
#define _TU16APRT_PRT1_POSN                                 0x1
#define _TU16APRT_PRT1_POSITION                             0x1
#define _TU16APRT_PRT1_SIZE                                 0x1
#define _TU16APRT_PRT1_LENGTH                               0x1
#define _TU16APRT_PRT1_MASK                                 0x2
#define _TU16APRT_PRT2_POSN                                 0x2
#define _TU16APRT_PRT2_POSITION                             0x2
#define _TU16APRT_PRT2_SIZE                                 0x1
#define _TU16APRT_PRT2_LENGTH                               0x1
#define _TU16APRT_PRT2_MASK                                 0x4
#define _TU16APRT_PRT3_POSN                                 0x3
#define _TU16APRT_PRT3_POSITION                             0x3
#define _TU16APRT_PRT3_SIZE                                 0x1
#define _TU16APRT_PRT3_LENGTH                               0x1
#define _TU16APRT_PRT3_MASK                                 0x8
#define _TU16APRT_PRT4_POSN                                 0x4
#define _TU16APRT_PRT4_POSITION                             0x4
#define _TU16APRT_PRT4_SIZE                                 0x1
#define _TU16APRT_PRT4_LENGTH                               0x1
#define _TU16APRT_PRT4_MASK                                 0x10
#define _TU16APRT_PRT5_POSN                                 0x5
#define _TU16APRT_PRT5_POSITION                             0x5
#define _TU16APRT_PRT5_SIZE                                 0x1
#define _TU16APRT_PRT5_LENGTH                               0x1
#define _TU16APRT_PRT5_MASK                                 0x20
#define _TU16APRT_PRT6_POSN                                 0x6
#define _TU16APRT_PRT6_POSITION                             0x6
#define _TU16APRT_PRT6_SIZE                                 0x1
#define _TU16APRT_PRT6_LENGTH                               0x1
#define _TU16APRT_PRT6_MASK                                 0x40
#define _TU16APRT_PRT7_POSN                                 0x7
#define _TU16APRT_PRT7_POSITION                             0x7
#define _TU16APRT_PRT7_SIZE                                 0x1
#define _TU16APRT_PRT7_LENGTH                               0x1
#define _TU16APRT_PRT7_MASK                                 0x80
#define _TU16APRT_TU16APRT0_POSN                            0x0
#define _TU16APRT_TU16APRT0_POSITION                        0x0
#define _TU16APRT_TU16APRT0_SIZE                            0x1
#define _TU16APRT_TU16APRT0_LENGTH                          0x1
#define _TU16APRT_TU16APRT0_MASK                            0x1
#define _TU16APRT_TU16APRT1_POSN                            0x1
#define _TU16APRT_TU16APRT1_POSITION                        0x1
#define _TU16APRT_TU16APRT1_SIZE                            0x1
#define _TU16APRT_TU16APRT1_LENGTH                          0x1
#define _TU16APRT_TU16APRT1_MASK                            0x2
#define _TU16APRT_TU16APRT2_POSN                            0x2
#define _TU16APRT_TU16APRT2_POSITION                        0x2
#define _TU16APRT_TU16APRT2_SIZE                            0x1
#define _TU16APRT_TU16APRT2_LENGTH                          0x1
#define _TU16APRT_TU16APRT2_MASK                            0x4
#define _TU16APRT_TU16APRT3_POSN                            0x3
#define _TU16APRT_TU16APRT3_POSITION                        0x3
#define _TU16APRT_TU16APRT3_SIZE                            0x1
#define _TU16APRT_TU16APRT3_LENGTH                          0x1
#define _TU16APRT_TU16APRT3_MASK                            0x8
#define _TU16APRT_TU16APRT4_POSN                            0x4
#define _TU16APRT_TU16APRT4_POSITION                        0x4
#define _TU16APRT_TU16APRT4_SIZE                            0x1
#define _TU16APRT_TU16APRT4_LENGTH                          0x1
#define _TU16APRT_TU16APRT4_MASK                            0x10
#define _TU16APRT_TU16APRT5_POSN                            0x5
#define _TU16APRT_TU16APRT5_POSITION                        0x5
#define _TU16APRT_TU16APRT5_SIZE                            0x1
#define _TU16APRT_TU16APRT5_LENGTH                          0x1
#define _TU16APRT_TU16APRT5_MASK                            0x20
#define _TU16APRT_TU16APRT6_POSN                            0x6
#define _TU16APRT_TU16APRT6_POSITION                        0x6
#define _TU16APRT_TU16APRT6_SIZE                            0x1
#define _TU16APRT_TU16APRT6_LENGTH                          0x1
#define _TU16APRT_TU16APRT6_MASK                            0x40
#define _TU16APRT_TU16APRT7_POSN                            0x7
#define _TU16APRT_TU16APRT7_POSITION                        0x7
#define _TU16APRT_TU16APRT7_SIZE                            0x1
#define _TU16APRT_TU16APRT7_LENGTH                          0x1
#define _TU16APRT_TU16APRT7_MASK                            0x80
#define _TU16APRT_TU16APR24_POSN                            0x0
#define _TU16APRT_TU16APR24_POSITION                        0x0
#define _TU16APRT_TU16APR24_SIZE                            0x1
#define _TU16APRT_TU16APR24_LENGTH                          0x1
#define _TU16APRT_TU16APR24_MASK                            0x1
#define _TU16APRT_TU16APR25_POSN                            0x1
#define _TU16APRT_TU16APR25_POSITION                        0x1
#define _TU16APRT_TU16APR25_SIZE                            0x1
#define _TU16APRT_TU16APR25_LENGTH                          0x1
#define _TU16APRT_TU16APR25_MASK                            0x2
#define _TU16APRT_TU16APR26_POSN                            0x2
#define _TU16APRT_TU16APR26_POSITION                        0x2
#define _TU16APRT_TU16APR26_SIZE                            0x1
#define _TU16APRT_TU16APR26_LENGTH                          0x1
#define _TU16APRT_TU16APR26_MASK                            0x4
#define _TU16APRT_TU16APR27_POSN                            0x3
#define _TU16APRT_TU16APR27_POSITION                        0x3
#define _TU16APRT_TU16APR27_SIZE                            0x1
#define _TU16APRT_TU16APR27_LENGTH                          0x1
#define _TU16APRT_TU16APR27_MASK                            0x8
#define _TU16APRT_TU16APR28_POSN                            0x4
#define _TU16APRT_TU16APR28_POSITION                        0x4
#define _TU16APRT_TU16APR28_SIZE                            0x1
#define _TU16APRT_TU16APR28_LENGTH                          0x1
#define _TU16APRT_TU16APR28_MASK                            0x10
#define _TU16APRT_TU16APR29_POSN                            0x5
#define _TU16APRT_TU16APR29_POSITION                        0x5
#define _TU16APRT_TU16APR29_SIZE                            0x1
#define _TU16APRT_TU16APR29_LENGTH                          0x1
#define _TU16APRT_TU16APR29_MASK                            0x20
#define _TU16APRT_TU16APR30_POSN                            0x6
#define _TU16APRT_TU16APR30_POSITION                        0x6
#define _TU16APRT_TU16APR30_SIZE                            0x1
#define _TU16APRT_TU16APR30_LENGTH                          0x1
#define _TU16APRT_TU16APR30_MASK                            0x40
#define _TU16APRT_TU16APR31_POSN                            0x7
#define _TU16APRT_TU16APR31_POSITION                        0x7
#define _TU16APRT_TU16APR31_SIZE                            0x1
#define _TU16APRT_TU16APR31_LENGTH                          0x1
#define _TU16APRT_TU16APR31_MASK                            0x80

// Register: TU16ACLK
#define TU16ACLK TU16ACLK
extern volatile unsigned char           TU16ACLK            __at(0x138);
#ifndef _LIB_BUILD
asm("TU16ACLK equ 0138h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLK                    :8;
    };
    struct {
        unsigned CLK0                   :1;
        unsigned CLK1                   :1;
        unsigned CLK2                   :1;
        unsigned CLK3                   :1;
        unsigned CLK4                   :1;
    };
    struct {
        unsigned TU16ACLK0              :1;
        unsigned TU16ACLK1              :1;
        unsigned TU16ACLK2              :1;
        unsigned TU16ACLK3              :1;
        unsigned TU16ACLK4              :1;
    };
} TU16ACLKbits_t;
extern volatile TU16ACLKbits_t TU16ACLKbits __at(0x138);
// bitfield macros
#define _TU16ACLK_CLK_POSN                                  0x0
#define _TU16ACLK_CLK_POSITION                              0x0
#define _TU16ACLK_CLK_SIZE                                  0x8
#define _TU16ACLK_CLK_LENGTH                                0x8
#define _TU16ACLK_CLK_MASK                                  0xFF
#define _TU16ACLK_CLK0_POSN                                 0x0
#define _TU16ACLK_CLK0_POSITION                             0x0
#define _TU16ACLK_CLK0_SIZE                                 0x1
#define _TU16ACLK_CLK0_LENGTH                               0x1
#define _TU16ACLK_CLK0_MASK                                 0x1
#define _TU16ACLK_CLK1_POSN                                 0x1
#define _TU16ACLK_CLK1_POSITION                             0x1
#define _TU16ACLK_CLK1_SIZE                                 0x1
#define _TU16ACLK_CLK1_LENGTH                               0x1
#define _TU16ACLK_CLK1_MASK                                 0x2
#define _TU16ACLK_CLK2_POSN                                 0x2
#define _TU16ACLK_CLK2_POSITION                             0x2
#define _TU16ACLK_CLK2_SIZE                                 0x1
#define _TU16ACLK_CLK2_LENGTH                               0x1
#define _TU16ACLK_CLK2_MASK                                 0x4
#define _TU16ACLK_CLK3_POSN                                 0x3
#define _TU16ACLK_CLK3_POSITION                             0x3
#define _TU16ACLK_CLK3_SIZE                                 0x1
#define _TU16ACLK_CLK3_LENGTH                               0x1
#define _TU16ACLK_CLK3_MASK                                 0x8
#define _TU16ACLK_CLK4_POSN                                 0x4
#define _TU16ACLK_CLK4_POSITION                             0x4
#define _TU16ACLK_CLK4_SIZE                                 0x1
#define _TU16ACLK_CLK4_LENGTH                               0x1
#define _TU16ACLK_CLK4_MASK                                 0x10
#define _TU16ACLK_TU16ACLK0_POSN                            0x0
#define _TU16ACLK_TU16ACLK0_POSITION                        0x0
#define _TU16ACLK_TU16ACLK0_SIZE                            0x1
#define _TU16ACLK_TU16ACLK0_LENGTH                          0x1
#define _TU16ACLK_TU16ACLK0_MASK                            0x1
#define _TU16ACLK_TU16ACLK1_POSN                            0x1
#define _TU16ACLK_TU16ACLK1_POSITION                        0x1
#define _TU16ACLK_TU16ACLK1_SIZE                            0x1
#define _TU16ACLK_TU16ACLK1_LENGTH                          0x1
#define _TU16ACLK_TU16ACLK1_MASK                            0x2
#define _TU16ACLK_TU16ACLK2_POSN                            0x2
#define _TU16ACLK_TU16ACLK2_POSITION                        0x2
#define _TU16ACLK_TU16ACLK2_SIZE                            0x1
#define _TU16ACLK_TU16ACLK2_LENGTH                          0x1
#define _TU16ACLK_TU16ACLK2_MASK                            0x4
#define _TU16ACLK_TU16ACLK3_POSN                            0x3
#define _TU16ACLK_TU16ACLK3_POSITION                        0x3
#define _TU16ACLK_TU16ACLK3_SIZE                            0x1
#define _TU16ACLK_TU16ACLK3_LENGTH                          0x1
#define _TU16ACLK_TU16ACLK3_MASK                            0x8
#define _TU16ACLK_TU16ACLK4_POSN                            0x4
#define _TU16ACLK_TU16ACLK4_POSITION                        0x4
#define _TU16ACLK_TU16ACLK4_SIZE                            0x1
#define _TU16ACLK_TU16ACLK4_LENGTH                          0x1
#define _TU16ACLK_TU16ACLK4_MASK                            0x10

// Register: TU16AERS
#define TU16AERS TU16AERS
extern volatile unsigned char           TU16AERS            __at(0x139);
#ifndef _LIB_BUILD
asm("TU16AERS equ 0139h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERS                    :8;
    };
    struct {
        unsigned ERS0                   :1;
        unsigned ERS1                   :1;
        unsigned ERS2                   :1;
        unsigned ERS3                   :1;
        unsigned ERS4                   :1;
        unsigned ERS5                   :1;
    };
    struct {
        unsigned TU16AERS0              :1;
        unsigned TU16AERS1              :1;
        unsigned TU16AERS2              :1;
        unsigned TU16AERS3              :1;
        unsigned TU16AERS4              :1;
        unsigned TU16AERS5              :1;
    };
} TU16AERSbits_t;
extern volatile TU16AERSbits_t TU16AERSbits __at(0x139);
// bitfield macros
#define _TU16AERS_ERS_POSN                                  0x0
#define _TU16AERS_ERS_POSITION                              0x0
#define _TU16AERS_ERS_SIZE                                  0x8
#define _TU16AERS_ERS_LENGTH                                0x8
#define _TU16AERS_ERS_MASK                                  0xFF
#define _TU16AERS_ERS0_POSN                                 0x0
#define _TU16AERS_ERS0_POSITION                             0x0
#define _TU16AERS_ERS0_SIZE                                 0x1
#define _TU16AERS_ERS0_LENGTH                               0x1
#define _TU16AERS_ERS0_MASK                                 0x1
#define _TU16AERS_ERS1_POSN                                 0x1
#define _TU16AERS_ERS1_POSITION                             0x1
#define _TU16AERS_ERS1_SIZE                                 0x1
#define _TU16AERS_ERS1_LENGTH                               0x1
#define _TU16AERS_ERS1_MASK                                 0x2
#define _TU16AERS_ERS2_POSN                                 0x2
#define _TU16AERS_ERS2_POSITION                             0x2
#define _TU16AERS_ERS2_SIZE                                 0x1
#define _TU16AERS_ERS2_LENGTH                               0x1
#define _TU16AERS_ERS2_MASK                                 0x4
#define _TU16AERS_ERS3_POSN                                 0x3
#define _TU16AERS_ERS3_POSITION                             0x3
#define _TU16AERS_ERS3_SIZE                                 0x1
#define _TU16AERS_ERS3_LENGTH                               0x1
#define _TU16AERS_ERS3_MASK                                 0x8
#define _TU16AERS_ERS4_POSN                                 0x4
#define _TU16AERS_ERS4_POSITION                             0x4
#define _TU16AERS_ERS4_SIZE                                 0x1
#define _TU16AERS_ERS4_LENGTH                               0x1
#define _TU16AERS_ERS4_MASK                                 0x10
#define _TU16AERS_ERS5_POSN                                 0x5
#define _TU16AERS_ERS5_POSITION                             0x5
#define _TU16AERS_ERS5_SIZE                                 0x1
#define _TU16AERS_ERS5_LENGTH                               0x1
#define _TU16AERS_ERS5_MASK                                 0x20
#define _TU16AERS_TU16AERS0_POSN                            0x0
#define _TU16AERS_TU16AERS0_POSITION                        0x0
#define _TU16AERS_TU16AERS0_SIZE                            0x1
#define _TU16AERS_TU16AERS0_LENGTH                          0x1
#define _TU16AERS_TU16AERS0_MASK                            0x1
#define _TU16AERS_TU16AERS1_POSN                            0x1
#define _TU16AERS_TU16AERS1_POSITION                        0x1
#define _TU16AERS_TU16AERS1_SIZE                            0x1
#define _TU16AERS_TU16AERS1_LENGTH                          0x1
#define _TU16AERS_TU16AERS1_MASK                            0x2
#define _TU16AERS_TU16AERS2_POSN                            0x2
#define _TU16AERS_TU16AERS2_POSITION                        0x2
#define _TU16AERS_TU16AERS2_SIZE                            0x1
#define _TU16AERS_TU16AERS2_LENGTH                          0x1
#define _TU16AERS_TU16AERS2_MASK                            0x4
#define _TU16AERS_TU16AERS3_POSN                            0x3
#define _TU16AERS_TU16AERS3_POSITION                        0x3
#define _TU16AERS_TU16AERS3_SIZE                            0x1
#define _TU16AERS_TU16AERS3_LENGTH                          0x1
#define _TU16AERS_TU16AERS3_MASK                            0x8
#define _TU16AERS_TU16AERS4_POSN                            0x4
#define _TU16AERS_TU16AERS4_POSITION                        0x4
#define _TU16AERS_TU16AERS4_SIZE                            0x1
#define _TU16AERS_TU16AERS4_LENGTH                          0x1
#define _TU16AERS_TU16AERS4_MASK                            0x10
#define _TU16AERS_TU16AERS5_POSN                            0x5
#define _TU16AERS_TU16AERS5_POSITION                        0x5
#define _TU16AERS_TU16AERS5_SIZE                            0x1
#define _TU16AERS_TU16AERS5_LENGTH                          0x1
#define _TU16AERS_TU16AERS5_MASK                            0x20

// Register: TU16BCON0
#define TU16BCON0 TU16BCON0
extern volatile unsigned char           TU16BCON0           __at(0x13A);
#ifndef _LIB_BUILD
asm("TU16BCON0 equ 013Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CIE                    :1;
        unsigned ZIE                    :1;
        unsigned PRIE                   :1;
        unsigned RDSEL                  :1;
        unsigned OPOL                   :1;
        unsigned OM                     :1;
        unsigned CPOL                   :1;
        unsigned ON                     :1;
    };
    struct {
        unsigned TU16BCIE               :1;
        unsigned TU16BZIE               :1;
        unsigned TU16BPRIE              :1;
        unsigned TU16BRDSEL             :1;
        unsigned TU16BOPOL              :1;
        unsigned TU16BOM                :1;
        unsigned TU16BCPOL              :1;
        unsigned TU16BON                :1;
    };
} TU16BCON0bits_t;
extern volatile TU16BCON0bits_t TU16BCON0bits __at(0x13A);
// bitfield macros
#define _TU16BCON0_CIE_POSN                                 0x0
#define _TU16BCON0_CIE_POSITION                             0x0
#define _TU16BCON0_CIE_SIZE                                 0x1
#define _TU16BCON0_CIE_LENGTH                               0x1
#define _TU16BCON0_CIE_MASK                                 0x1
#define _TU16BCON0_ZIE_POSN                                 0x1
#define _TU16BCON0_ZIE_POSITION                             0x1
#define _TU16BCON0_ZIE_SIZE                                 0x1
#define _TU16BCON0_ZIE_LENGTH                               0x1
#define _TU16BCON0_ZIE_MASK                                 0x2
#define _TU16BCON0_PRIE_POSN                                0x2
#define _TU16BCON0_PRIE_POSITION                            0x2
#define _TU16BCON0_PRIE_SIZE                                0x1
#define _TU16BCON0_PRIE_LENGTH                              0x1
#define _TU16BCON0_PRIE_MASK                                0x4
#define _TU16BCON0_RDSEL_POSN                               0x3
#define _TU16BCON0_RDSEL_POSITION                           0x3
#define _TU16BCON0_RDSEL_SIZE                               0x1
#define _TU16BCON0_RDSEL_LENGTH                             0x1
#define _TU16BCON0_RDSEL_MASK                               0x8
#define _TU16BCON0_OPOL_POSN                                0x4
#define _TU16BCON0_OPOL_POSITION                            0x4
#define _TU16BCON0_OPOL_SIZE                                0x1
#define _TU16BCON0_OPOL_LENGTH                              0x1
#define _TU16BCON0_OPOL_MASK                                0x10
#define _TU16BCON0_OM_POSN                                  0x5
#define _TU16BCON0_OM_POSITION                              0x5
#define _TU16BCON0_OM_SIZE                                  0x1
#define _TU16BCON0_OM_LENGTH                                0x1
#define _TU16BCON0_OM_MASK                                  0x20
#define _TU16BCON0_CPOL_POSN                                0x6
#define _TU16BCON0_CPOL_POSITION                            0x6
#define _TU16BCON0_CPOL_SIZE                                0x1
#define _TU16BCON0_CPOL_LENGTH                              0x1
#define _TU16BCON0_CPOL_MASK                                0x40
#define _TU16BCON0_ON_POSN                                  0x7
#define _TU16BCON0_ON_POSITION                              0x7
#define _TU16BCON0_ON_SIZE                                  0x1
#define _TU16BCON0_ON_LENGTH                                0x1
#define _TU16BCON0_ON_MASK                                  0x80
#define _TU16BCON0_TU16BCIE_POSN                            0x0
#define _TU16BCON0_TU16BCIE_POSITION                        0x0
#define _TU16BCON0_TU16BCIE_SIZE                            0x1
#define _TU16BCON0_TU16BCIE_LENGTH                          0x1
#define _TU16BCON0_TU16BCIE_MASK                            0x1
#define _TU16BCON0_TU16BZIE_POSN                            0x1
#define _TU16BCON0_TU16BZIE_POSITION                        0x1
#define _TU16BCON0_TU16BZIE_SIZE                            0x1
#define _TU16BCON0_TU16BZIE_LENGTH                          0x1
#define _TU16BCON0_TU16BZIE_MASK                            0x2
#define _TU16BCON0_TU16BPRIE_POSN                           0x2
#define _TU16BCON0_TU16BPRIE_POSITION                       0x2
#define _TU16BCON0_TU16BPRIE_SIZE                           0x1
#define _TU16BCON0_TU16BPRIE_LENGTH                         0x1
#define _TU16BCON0_TU16BPRIE_MASK                           0x4
#define _TU16BCON0_TU16BRDSEL_POSN                          0x3
#define _TU16BCON0_TU16BRDSEL_POSITION                      0x3
#define _TU16BCON0_TU16BRDSEL_SIZE                          0x1
#define _TU16BCON0_TU16BRDSEL_LENGTH                        0x1
#define _TU16BCON0_TU16BRDSEL_MASK                          0x8
#define _TU16BCON0_TU16BOPOL_POSN                           0x4
#define _TU16BCON0_TU16BOPOL_POSITION                       0x4
#define _TU16BCON0_TU16BOPOL_SIZE                           0x1
#define _TU16BCON0_TU16BOPOL_LENGTH                         0x1
#define _TU16BCON0_TU16BOPOL_MASK                           0x10
#define _TU16BCON0_TU16BOM_POSN                             0x5
#define _TU16BCON0_TU16BOM_POSITION                         0x5
#define _TU16BCON0_TU16BOM_SIZE                             0x1
#define _TU16BCON0_TU16BOM_LENGTH                           0x1
#define _TU16BCON0_TU16BOM_MASK                             0x20
#define _TU16BCON0_TU16BCPOL_POSN                           0x6
#define _TU16BCON0_TU16BCPOL_POSITION                       0x6
#define _TU16BCON0_TU16BCPOL_SIZE                           0x1
#define _TU16BCON0_TU16BCPOL_LENGTH                         0x1
#define _TU16BCON0_TU16BCPOL_MASK                           0x40
#define _TU16BCON0_TU16BON_POSN                             0x7
#define _TU16BCON0_TU16BON_POSITION                         0x7
#define _TU16BCON0_TU16BON_SIZE                             0x1
#define _TU16BCON0_TU16BON_LENGTH                           0x1
#define _TU16BCON0_TU16BON_MASK                             0x80

// Register: TU16BCON1
#define TU16BCON1 TU16BCON1
extern volatile unsigned char           TU16BCON1           __at(0x13B);
#ifndef _LIB_BUILD
asm("TU16BCON1 equ 013Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CIF                    :1;
        unsigned ZIF                    :1;
        unsigned PRIF                   :1;
        unsigned CAPT                   :1;
        unsigned LIMIT                  :1;
        unsigned CLR                    :1;
        unsigned OSEN                   :1;
        unsigned RUN                    :1;
    };
    struct {
        unsigned TU16BCIF               :1;
        unsigned TU16BZIF               :1;
        unsigned TU16BPRIF              :1;
        unsigned TU16BCAPT              :1;
        unsigned TU16BLIMIT             :1;
        unsigned TU16BCLR               :1;
        unsigned TMRBOSEN               :1;
        unsigned TU16BRUN               :1;
    };
} TU16BCON1bits_t;
extern volatile TU16BCON1bits_t TU16BCON1bits __at(0x13B);
// bitfield macros
#define _TU16BCON1_CIF_POSN                                 0x0
#define _TU16BCON1_CIF_POSITION                             0x0
#define _TU16BCON1_CIF_SIZE                                 0x1
#define _TU16BCON1_CIF_LENGTH                               0x1
#define _TU16BCON1_CIF_MASK                                 0x1
#define _TU16BCON1_ZIF_POSN                                 0x1
#define _TU16BCON1_ZIF_POSITION                             0x1
#define _TU16BCON1_ZIF_SIZE                                 0x1
#define _TU16BCON1_ZIF_LENGTH                               0x1
#define _TU16BCON1_ZIF_MASK                                 0x2
#define _TU16BCON1_PRIF_POSN                                0x2
#define _TU16BCON1_PRIF_POSITION                            0x2
#define _TU16BCON1_PRIF_SIZE                                0x1
#define _TU16BCON1_PRIF_LENGTH                              0x1
#define _TU16BCON1_PRIF_MASK                                0x4
#define _TU16BCON1_CAPT_POSN                                0x3
#define _TU16BCON1_CAPT_POSITION                            0x3
#define _TU16BCON1_CAPT_SIZE                                0x1
#define _TU16BCON1_CAPT_LENGTH                              0x1
#define _TU16BCON1_CAPT_MASK                                0x8
#define _TU16BCON1_LIMIT_POSN                               0x4
#define _TU16BCON1_LIMIT_POSITION                           0x4
#define _TU16BCON1_LIMIT_SIZE                               0x1
#define _TU16BCON1_LIMIT_LENGTH                             0x1
#define _TU16BCON1_LIMIT_MASK                               0x10
#define _TU16BCON1_CLR_POSN                                 0x5
#define _TU16BCON1_CLR_POSITION                             0x5
#define _TU16BCON1_CLR_SIZE                                 0x1
#define _TU16BCON1_CLR_LENGTH                               0x1
#define _TU16BCON1_CLR_MASK                                 0x20
#define _TU16BCON1_OSEN_POSN                                0x6
#define _TU16BCON1_OSEN_POSITION                            0x6
#define _TU16BCON1_OSEN_SIZE                                0x1
#define _TU16BCON1_OSEN_LENGTH                              0x1
#define _TU16BCON1_OSEN_MASK                                0x40
#define _TU16BCON1_RUN_POSN                                 0x7
#define _TU16BCON1_RUN_POSITION                             0x7
#define _TU16BCON1_RUN_SIZE                                 0x1
#define _TU16BCON1_RUN_LENGTH                               0x1
#define _TU16BCON1_RUN_MASK                                 0x80
#define _TU16BCON1_TU16BCIF_POSN                            0x0
#define _TU16BCON1_TU16BCIF_POSITION                        0x0
#define _TU16BCON1_TU16BCIF_SIZE                            0x1
#define _TU16BCON1_TU16BCIF_LENGTH                          0x1
#define _TU16BCON1_TU16BCIF_MASK                            0x1
#define _TU16BCON1_TU16BZIF_POSN                            0x1
#define _TU16BCON1_TU16BZIF_POSITION                        0x1
#define _TU16BCON1_TU16BZIF_SIZE                            0x1
#define _TU16BCON1_TU16BZIF_LENGTH                          0x1
#define _TU16BCON1_TU16BZIF_MASK                            0x2
#define _TU16BCON1_TU16BPRIF_POSN                           0x2
#define _TU16BCON1_TU16BPRIF_POSITION                       0x2
#define _TU16BCON1_TU16BPRIF_SIZE                           0x1
#define _TU16BCON1_TU16BPRIF_LENGTH                         0x1
#define _TU16BCON1_TU16BPRIF_MASK                           0x4
#define _TU16BCON1_TU16BCAPT_POSN                           0x3
#define _TU16BCON1_TU16BCAPT_POSITION                       0x3
#define _TU16BCON1_TU16BCAPT_SIZE                           0x1
#define _TU16BCON1_TU16BCAPT_LENGTH                         0x1
#define _TU16BCON1_TU16BCAPT_MASK                           0x8
#define _TU16BCON1_TU16BLIMIT_POSN                          0x4
#define _TU16BCON1_TU16BLIMIT_POSITION                      0x4
#define _TU16BCON1_TU16BLIMIT_SIZE                          0x1
#define _TU16BCON1_TU16BLIMIT_LENGTH                        0x1
#define _TU16BCON1_TU16BLIMIT_MASK                          0x10
#define _TU16BCON1_TU16BCLR_POSN                            0x5
#define _TU16BCON1_TU16BCLR_POSITION                        0x5
#define _TU16BCON1_TU16BCLR_SIZE                            0x1
#define _TU16BCON1_TU16BCLR_LENGTH                          0x1
#define _TU16BCON1_TU16BCLR_MASK                            0x20
#define _TU16BCON1_TMRBOSEN_POSN                            0x6
#define _TU16BCON1_TMRBOSEN_POSITION                        0x6
#define _TU16BCON1_TMRBOSEN_SIZE                            0x1
#define _TU16BCON1_TMRBOSEN_LENGTH                          0x1
#define _TU16BCON1_TMRBOSEN_MASK                            0x40
#define _TU16BCON1_TU16BRUN_POSN                            0x7
#define _TU16BCON1_TU16BRUN_POSITION                        0x7
#define _TU16BCON1_TU16BRUN_SIZE                            0x1
#define _TU16BCON1_TU16BRUN_LENGTH                          0x1
#define _TU16BCON1_TU16BRUN_MASK                            0x80

// Register: TU16BHLT
#define TU16BHLT TU16BHLT
extern volatile unsigned char           TU16BHLT            __at(0x13C);
#ifndef _LIB_BUILD
asm("TU16BHLT equ 013Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STOP                   :2;
        unsigned RESET                  :2;
        unsigned START                  :2;
        unsigned CSYNC                  :1;
        unsigned EPOL                   :1;
    };
    struct {
        unsigned STOP0                  :1;
        unsigned STOP1                  :1;
        unsigned RESET0                 :1;
        unsigned RESET1                 :1;
        unsigned START0                 :1;
        unsigned START1                 :1;
    };
    struct {
        unsigned TU16BSTOP              :2;
        unsigned TU16BRESET             :2;
        unsigned TU16BSTART             :2;
        unsigned TU16BCSYNC             :1;
        unsigned TU16BEPOL              :1;
    };
    struct {
        unsigned TU16BSTOP0             :1;
        unsigned TU16BSTOP1             :1;
        unsigned TU16BRESET0            :1;
        unsigned TU16BRESET1            :1;
        unsigned TU16BSTART0            :1;
        unsigned TU16BSTART1            :1;
    };
} TU16BHLTbits_t;
extern volatile TU16BHLTbits_t TU16BHLTbits __at(0x13C);
// bitfield macros
#define _TU16BHLT_STOP_POSN                                 0x0
#define _TU16BHLT_STOP_POSITION                             0x0
#define _TU16BHLT_STOP_SIZE                                 0x2
#define _TU16BHLT_STOP_LENGTH                               0x2
#define _TU16BHLT_STOP_MASK                                 0x3
#define _TU16BHLT_RESET_POSN                                0x2
#define _TU16BHLT_RESET_POSITION                            0x2
#define _TU16BHLT_RESET_SIZE                                0x2
#define _TU16BHLT_RESET_LENGTH                              0x2
#define _TU16BHLT_RESET_MASK                                0xC
#define _TU16BHLT_START_POSN                                0x4
#define _TU16BHLT_START_POSITION                            0x4
#define _TU16BHLT_START_SIZE                                0x2
#define _TU16BHLT_START_LENGTH                              0x2
#define _TU16BHLT_START_MASK                                0x30
#define _TU16BHLT_CSYNC_POSN                                0x6
#define _TU16BHLT_CSYNC_POSITION                            0x6
#define _TU16BHLT_CSYNC_SIZE                                0x1
#define _TU16BHLT_CSYNC_LENGTH                              0x1
#define _TU16BHLT_CSYNC_MASK                                0x40
#define _TU16BHLT_EPOL_POSN                                 0x7
#define _TU16BHLT_EPOL_POSITION                             0x7
#define _TU16BHLT_EPOL_SIZE                                 0x1
#define _TU16BHLT_EPOL_LENGTH                               0x1
#define _TU16BHLT_EPOL_MASK                                 0x80
#define _TU16BHLT_STOP0_POSN                                0x0
#define _TU16BHLT_STOP0_POSITION                            0x0
#define _TU16BHLT_STOP0_SIZE                                0x1
#define _TU16BHLT_STOP0_LENGTH                              0x1
#define _TU16BHLT_STOP0_MASK                                0x1
#define _TU16BHLT_STOP1_POSN                                0x1
#define _TU16BHLT_STOP1_POSITION                            0x1
#define _TU16BHLT_STOP1_SIZE                                0x1
#define _TU16BHLT_STOP1_LENGTH                              0x1
#define _TU16BHLT_STOP1_MASK                                0x2
#define _TU16BHLT_RESET0_POSN                               0x2
#define _TU16BHLT_RESET0_POSITION                           0x2
#define _TU16BHLT_RESET0_SIZE                               0x1
#define _TU16BHLT_RESET0_LENGTH                             0x1
#define _TU16BHLT_RESET0_MASK                               0x4
#define _TU16BHLT_RESET1_POSN                               0x3
#define _TU16BHLT_RESET1_POSITION                           0x3
#define _TU16BHLT_RESET1_SIZE                               0x1
#define _TU16BHLT_RESET1_LENGTH                             0x1
#define _TU16BHLT_RESET1_MASK                               0x8
#define _TU16BHLT_START0_POSN                               0x4
#define _TU16BHLT_START0_POSITION                           0x4
#define _TU16BHLT_START0_SIZE                               0x1
#define _TU16BHLT_START0_LENGTH                             0x1
#define _TU16BHLT_START0_MASK                               0x10
#define _TU16BHLT_START1_POSN                               0x5
#define _TU16BHLT_START1_POSITION                           0x5
#define _TU16BHLT_START1_SIZE                               0x1
#define _TU16BHLT_START1_LENGTH                             0x1
#define _TU16BHLT_START1_MASK                               0x20
#define _TU16BHLT_TU16BSTOP_POSN                            0x0
#define _TU16BHLT_TU16BSTOP_POSITION                        0x0
#define _TU16BHLT_TU16BSTOP_SIZE                            0x2
#define _TU16BHLT_TU16BSTOP_LENGTH                          0x2
#define _TU16BHLT_TU16BSTOP_MASK                            0x3
#define _TU16BHLT_TU16BRESET_POSN                           0x2
#define _TU16BHLT_TU16BRESET_POSITION                       0x2
#define _TU16BHLT_TU16BRESET_SIZE                           0x2
#define _TU16BHLT_TU16BRESET_LENGTH                         0x2
#define _TU16BHLT_TU16BRESET_MASK                           0xC
#define _TU16BHLT_TU16BSTART_POSN                           0x4
#define _TU16BHLT_TU16BSTART_POSITION                       0x4
#define _TU16BHLT_TU16BSTART_SIZE                           0x2
#define _TU16BHLT_TU16BSTART_LENGTH                         0x2
#define _TU16BHLT_TU16BSTART_MASK                           0x30
#define _TU16BHLT_TU16BCSYNC_POSN                           0x6
#define _TU16BHLT_TU16BCSYNC_POSITION                       0x6
#define _TU16BHLT_TU16BCSYNC_SIZE                           0x1
#define _TU16BHLT_TU16BCSYNC_LENGTH                         0x1
#define _TU16BHLT_TU16BCSYNC_MASK                           0x40
#define _TU16BHLT_TU16BEPOL_POSN                            0x7
#define _TU16BHLT_TU16BEPOL_POSITION                        0x7
#define _TU16BHLT_TU16BEPOL_SIZE                            0x1
#define _TU16BHLT_TU16BEPOL_LENGTH                          0x1
#define _TU16BHLT_TU16BEPOL_MASK                            0x80
#define _TU16BHLT_TU16BSTOP0_POSN                           0x0
#define _TU16BHLT_TU16BSTOP0_POSITION                       0x0
#define _TU16BHLT_TU16BSTOP0_SIZE                           0x1
#define _TU16BHLT_TU16BSTOP0_LENGTH                         0x1
#define _TU16BHLT_TU16BSTOP0_MASK                           0x1
#define _TU16BHLT_TU16BSTOP1_POSN                           0x1
#define _TU16BHLT_TU16BSTOP1_POSITION                       0x1
#define _TU16BHLT_TU16BSTOP1_SIZE                           0x1
#define _TU16BHLT_TU16BSTOP1_LENGTH                         0x1
#define _TU16BHLT_TU16BSTOP1_MASK                           0x2
#define _TU16BHLT_TU16BRESET0_POSN                          0x2
#define _TU16BHLT_TU16BRESET0_POSITION                      0x2
#define _TU16BHLT_TU16BRESET0_SIZE                          0x1
#define _TU16BHLT_TU16BRESET0_LENGTH                        0x1
#define _TU16BHLT_TU16BRESET0_MASK                          0x4
#define _TU16BHLT_TU16BRESET1_POSN                          0x3
#define _TU16BHLT_TU16BRESET1_POSITION                      0x3
#define _TU16BHLT_TU16BRESET1_SIZE                          0x1
#define _TU16BHLT_TU16BRESET1_LENGTH                        0x1
#define _TU16BHLT_TU16BRESET1_MASK                          0x8
#define _TU16BHLT_TU16BSTART0_POSN                          0x4
#define _TU16BHLT_TU16BSTART0_POSITION                      0x4
#define _TU16BHLT_TU16BSTART0_SIZE                          0x1
#define _TU16BHLT_TU16BSTART0_LENGTH                        0x1
#define _TU16BHLT_TU16BSTART0_MASK                          0x10
#define _TU16BHLT_TU16BSTART1_POSN                          0x5
#define _TU16BHLT_TU16BSTART1_POSITION                      0x5
#define _TU16BHLT_TU16BSTART1_SIZE                          0x1
#define _TU16BHLT_TU16BSTART1_LENGTH                        0x1
#define _TU16BHLT_TU16BSTART1_MASK                          0x20

// Register: TU16BPS
#define TU16BPS TU16BPS
extern volatile unsigned char           TU16BPS             __at(0x13D);
#ifndef _LIB_BUILD
asm("TU16BPS equ 013Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PS                     :8;
    };
    struct {
        unsigned PS0                    :1;
        unsigned PS1                    :1;
        unsigned PS2                    :1;
        unsigned PS3                    :1;
        unsigned PS4                    :1;
        unsigned PS5                    :1;
        unsigned PS6                    :1;
        unsigned PS7                    :1;
    };
    struct {
        unsigned TU16BPS0               :1;
        unsigned TU16BPS1               :1;
        unsigned TU16BPS2               :1;
        unsigned TU16BPS3               :1;
        unsigned TU16BPS4               :1;
        unsigned TU16BPS5               :1;
        unsigned TU16BPS6               :1;
        unsigned TU16BPS7               :1;
    };
    struct {
        unsigned TU16BPS                :8;
    };
} TU16BPSbits_t;
extern volatile TU16BPSbits_t TU16BPSbits __at(0x13D);
// bitfield macros
#define _TU16BPS_PS_POSN                                    0x0
#define _TU16BPS_PS_POSITION                                0x0
#define _TU16BPS_PS_SIZE                                    0x8
#define _TU16BPS_PS_LENGTH                                  0x8
#define _TU16BPS_PS_MASK                                    0xFF
#define _TU16BPS_PS0_POSN                                   0x0
#define _TU16BPS_PS0_POSITION                               0x0
#define _TU16BPS_PS0_SIZE                                   0x1
#define _TU16BPS_PS0_LENGTH                                 0x1
#define _TU16BPS_PS0_MASK                                   0x1
#define _TU16BPS_PS1_POSN                                   0x1
#define _TU16BPS_PS1_POSITION                               0x1
#define _TU16BPS_PS1_SIZE                                   0x1
#define _TU16BPS_PS1_LENGTH                                 0x1
#define _TU16BPS_PS1_MASK                                   0x2
#define _TU16BPS_PS2_POSN                                   0x2
#define _TU16BPS_PS2_POSITION                               0x2
#define _TU16BPS_PS2_SIZE                                   0x1
#define _TU16BPS_PS2_LENGTH                                 0x1
#define _TU16BPS_PS2_MASK                                   0x4
#define _TU16BPS_PS3_POSN                                   0x3
#define _TU16BPS_PS3_POSITION                               0x3
#define _TU16BPS_PS3_SIZE                                   0x1
#define _TU16BPS_PS3_LENGTH                                 0x1
#define _TU16BPS_PS3_MASK                                   0x8
#define _TU16BPS_PS4_POSN                                   0x4
#define _TU16BPS_PS4_POSITION                               0x4
#define _TU16BPS_PS4_SIZE                                   0x1
#define _TU16BPS_PS4_LENGTH                                 0x1
#define _TU16BPS_PS4_MASK                                   0x10
#define _TU16BPS_PS5_POSN                                   0x5
#define _TU16BPS_PS5_POSITION                               0x5
#define _TU16BPS_PS5_SIZE                                   0x1
#define _TU16BPS_PS5_LENGTH                                 0x1
#define _TU16BPS_PS5_MASK                                   0x20
#define _TU16BPS_PS6_POSN                                   0x6
#define _TU16BPS_PS6_POSITION                               0x6
#define _TU16BPS_PS6_SIZE                                   0x1
#define _TU16BPS_PS6_LENGTH                                 0x1
#define _TU16BPS_PS6_MASK                                   0x40
#define _TU16BPS_PS7_POSN                                   0x7
#define _TU16BPS_PS7_POSITION                               0x7
#define _TU16BPS_PS7_SIZE                                   0x1
#define _TU16BPS_PS7_LENGTH                                 0x1
#define _TU16BPS_PS7_MASK                                   0x80
#define _TU16BPS_TU16BPS0_POSN                              0x0
#define _TU16BPS_TU16BPS0_POSITION                          0x0
#define _TU16BPS_TU16BPS0_SIZE                              0x1
#define _TU16BPS_TU16BPS0_LENGTH                            0x1
#define _TU16BPS_TU16BPS0_MASK                              0x1
#define _TU16BPS_TU16BPS1_POSN                              0x1
#define _TU16BPS_TU16BPS1_POSITION                          0x1
#define _TU16BPS_TU16BPS1_SIZE                              0x1
#define _TU16BPS_TU16BPS1_LENGTH                            0x1
#define _TU16BPS_TU16BPS1_MASK                              0x2
#define _TU16BPS_TU16BPS2_POSN                              0x2
#define _TU16BPS_TU16BPS2_POSITION                          0x2
#define _TU16BPS_TU16BPS2_SIZE                              0x1
#define _TU16BPS_TU16BPS2_LENGTH                            0x1
#define _TU16BPS_TU16BPS2_MASK                              0x4
#define _TU16BPS_TU16BPS3_POSN                              0x3
#define _TU16BPS_TU16BPS3_POSITION                          0x3
#define _TU16BPS_TU16BPS3_SIZE                              0x1
#define _TU16BPS_TU16BPS3_LENGTH                            0x1
#define _TU16BPS_TU16BPS3_MASK                              0x8
#define _TU16BPS_TU16BPS4_POSN                              0x4
#define _TU16BPS_TU16BPS4_POSITION                          0x4
#define _TU16BPS_TU16BPS4_SIZE                              0x1
#define _TU16BPS_TU16BPS4_LENGTH                            0x1
#define _TU16BPS_TU16BPS4_MASK                              0x10
#define _TU16BPS_TU16BPS5_POSN                              0x5
#define _TU16BPS_TU16BPS5_POSITION                          0x5
#define _TU16BPS_TU16BPS5_SIZE                              0x1
#define _TU16BPS_TU16BPS5_LENGTH                            0x1
#define _TU16BPS_TU16BPS5_MASK                              0x20
#define _TU16BPS_TU16BPS6_POSN                              0x6
#define _TU16BPS_TU16BPS6_POSITION                          0x6
#define _TU16BPS_TU16BPS6_SIZE                              0x1
#define _TU16BPS_TU16BPS6_LENGTH                            0x1
#define _TU16BPS_TU16BPS6_MASK                              0x40
#define _TU16BPS_TU16BPS7_POSN                              0x7
#define _TU16BPS_TU16BPS7_POSITION                          0x7
#define _TU16BPS_TU16BPS7_SIZE                              0x1
#define _TU16BPS_TU16BPS7_LENGTH                            0x1
#define _TU16BPS_TU16BPS7_MASK                              0x80
#define _TU16BPS_TU16BPS_POSN                               0x0
#define _TU16BPS_TU16BPS_POSITION                           0x0
#define _TU16BPS_TU16BPS_SIZE                               0x8
#define _TU16BPS_TU16BPS_LENGTH                             0x8
#define _TU16BPS_TU16BPS_MASK                               0xFF

// Register: TU16BTMR
#define TU16BTMR TU16BTMR
extern volatile unsigned long           TU16BTMR            __at(0x13E);
#ifndef _LIB_BUILD
asm("TU16BTMR equ 013Eh");
#endif
// aliases
extern volatile unsigned long           TU16BCR             __at(0x13E);
#ifndef _LIB_BUILD
asm("TU16BCR equ 013Eh");
#endif

// Register: TU16BTMRL
#define TU16BTMRL TU16BTMRL
extern volatile unsigned char           TU16BTMRL           __at(0x13E);
#ifndef _LIB_BUILD
asm("TU16BTMRL equ 013Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMRL                   :8;
    };
    struct {
        unsigned TMRL0                  :1;
        unsigned TMRL1                  :1;
        unsigned TMRL2                  :1;
        unsigned TMRL3                  :1;
        unsigned TMRL4                  :1;
        unsigned TMRL5                  :1;
        unsigned TMRL6                  :1;
        unsigned TMRL7                  :1;
    };
    struct {
        unsigned TU16BTMRL0             :1;
        unsigned TU16BTMRL1             :1;
        unsigned TU16BTMRL2             :1;
        unsigned TU16BTMRL3             :1;
        unsigned TU16BTMRL4             :1;
        unsigned TU16BTMRL5             :1;
        unsigned TU16BTMRL6             :1;
        unsigned TU16BTMRL7             :1;
    };
    struct {
        unsigned TU16BTMR0              :1;
        unsigned TU16BTMR1              :1;
        unsigned TU16BTMR2              :1;
        unsigned TU16BTMR3              :1;
        unsigned TU16BTMR4              :1;
        unsigned TU16BTMR5              :1;
        unsigned TU16BTMR6              :1;
        unsigned TU16BTMR7              :1;
    };
} TU16BTMRLbits_t;
extern volatile TU16BTMRLbits_t TU16BTMRLbits __at(0x13E);
// bitfield macros
#define _TU16BTMRL_TMRL_POSN                                0x0
#define _TU16BTMRL_TMRL_POSITION                            0x0
#define _TU16BTMRL_TMRL_SIZE                                0x8
#define _TU16BTMRL_TMRL_LENGTH                              0x8
#define _TU16BTMRL_TMRL_MASK                                0xFF
#define _TU16BTMRL_TMRL0_POSN                               0x0
#define _TU16BTMRL_TMRL0_POSITION                           0x0
#define _TU16BTMRL_TMRL0_SIZE                               0x1
#define _TU16BTMRL_TMRL0_LENGTH                             0x1
#define _TU16BTMRL_TMRL0_MASK                               0x1
#define _TU16BTMRL_TMRL1_POSN                               0x1
#define _TU16BTMRL_TMRL1_POSITION                           0x1
#define _TU16BTMRL_TMRL1_SIZE                               0x1
#define _TU16BTMRL_TMRL1_LENGTH                             0x1
#define _TU16BTMRL_TMRL1_MASK                               0x2
#define _TU16BTMRL_TMRL2_POSN                               0x2
#define _TU16BTMRL_TMRL2_POSITION                           0x2
#define _TU16BTMRL_TMRL2_SIZE                               0x1
#define _TU16BTMRL_TMRL2_LENGTH                             0x1
#define _TU16BTMRL_TMRL2_MASK                               0x4
#define _TU16BTMRL_TMRL3_POSN                               0x3
#define _TU16BTMRL_TMRL3_POSITION                           0x3
#define _TU16BTMRL_TMRL3_SIZE                               0x1
#define _TU16BTMRL_TMRL3_LENGTH                             0x1
#define _TU16BTMRL_TMRL3_MASK                               0x8
#define _TU16BTMRL_TMRL4_POSN                               0x4
#define _TU16BTMRL_TMRL4_POSITION                           0x4
#define _TU16BTMRL_TMRL4_SIZE                               0x1
#define _TU16BTMRL_TMRL4_LENGTH                             0x1
#define _TU16BTMRL_TMRL4_MASK                               0x10
#define _TU16BTMRL_TMRL5_POSN                               0x5
#define _TU16BTMRL_TMRL5_POSITION                           0x5
#define _TU16BTMRL_TMRL5_SIZE                               0x1
#define _TU16BTMRL_TMRL5_LENGTH                             0x1
#define _TU16BTMRL_TMRL5_MASK                               0x20
#define _TU16BTMRL_TMRL6_POSN                               0x6
#define _TU16BTMRL_TMRL6_POSITION                           0x6
#define _TU16BTMRL_TMRL6_SIZE                               0x1
#define _TU16BTMRL_TMRL6_LENGTH                             0x1
#define _TU16BTMRL_TMRL6_MASK                               0x40
#define _TU16BTMRL_TMRL7_POSN                               0x7
#define _TU16BTMRL_TMRL7_POSITION                           0x7
#define _TU16BTMRL_TMRL7_SIZE                               0x1
#define _TU16BTMRL_TMRL7_LENGTH                             0x1
#define _TU16BTMRL_TMRL7_MASK                               0x80
#define _TU16BTMRL_TU16BTMRL0_POSN                          0x0
#define _TU16BTMRL_TU16BTMRL0_POSITION                      0x0
#define _TU16BTMRL_TU16BTMRL0_SIZE                          0x1
#define _TU16BTMRL_TU16BTMRL0_LENGTH                        0x1
#define _TU16BTMRL_TU16BTMRL0_MASK                          0x1
#define _TU16BTMRL_TU16BTMRL1_POSN                          0x1
#define _TU16BTMRL_TU16BTMRL1_POSITION                      0x1
#define _TU16BTMRL_TU16BTMRL1_SIZE                          0x1
#define _TU16BTMRL_TU16BTMRL1_LENGTH                        0x1
#define _TU16BTMRL_TU16BTMRL1_MASK                          0x2
#define _TU16BTMRL_TU16BTMRL2_POSN                          0x2
#define _TU16BTMRL_TU16BTMRL2_POSITION                      0x2
#define _TU16BTMRL_TU16BTMRL2_SIZE                          0x1
#define _TU16BTMRL_TU16BTMRL2_LENGTH                        0x1
#define _TU16BTMRL_TU16BTMRL2_MASK                          0x4
#define _TU16BTMRL_TU16BTMRL3_POSN                          0x3
#define _TU16BTMRL_TU16BTMRL3_POSITION                      0x3
#define _TU16BTMRL_TU16BTMRL3_SIZE                          0x1
#define _TU16BTMRL_TU16BTMRL3_LENGTH                        0x1
#define _TU16BTMRL_TU16BTMRL3_MASK                          0x8
#define _TU16BTMRL_TU16BTMRL4_POSN                          0x4
#define _TU16BTMRL_TU16BTMRL4_POSITION                      0x4
#define _TU16BTMRL_TU16BTMRL4_SIZE                          0x1
#define _TU16BTMRL_TU16BTMRL4_LENGTH                        0x1
#define _TU16BTMRL_TU16BTMRL4_MASK                          0x10
#define _TU16BTMRL_TU16BTMRL5_POSN                          0x5
#define _TU16BTMRL_TU16BTMRL5_POSITION                      0x5
#define _TU16BTMRL_TU16BTMRL5_SIZE                          0x1
#define _TU16BTMRL_TU16BTMRL5_LENGTH                        0x1
#define _TU16BTMRL_TU16BTMRL5_MASK                          0x20
#define _TU16BTMRL_TU16BTMRL6_POSN                          0x6
#define _TU16BTMRL_TU16BTMRL6_POSITION                      0x6
#define _TU16BTMRL_TU16BTMRL6_SIZE                          0x1
#define _TU16BTMRL_TU16BTMRL6_LENGTH                        0x1
#define _TU16BTMRL_TU16BTMRL6_MASK                          0x40
#define _TU16BTMRL_TU16BTMRL7_POSN                          0x7
#define _TU16BTMRL_TU16BTMRL7_POSITION                      0x7
#define _TU16BTMRL_TU16BTMRL7_SIZE                          0x1
#define _TU16BTMRL_TU16BTMRL7_LENGTH                        0x1
#define _TU16BTMRL_TU16BTMRL7_MASK                          0x80
#define _TU16BTMRL_TU16BTMR0_POSN                           0x0
#define _TU16BTMRL_TU16BTMR0_POSITION                       0x0
#define _TU16BTMRL_TU16BTMR0_SIZE                           0x1
#define _TU16BTMRL_TU16BTMR0_LENGTH                         0x1
#define _TU16BTMRL_TU16BTMR0_MASK                           0x1
#define _TU16BTMRL_TU16BTMR1_POSN                           0x1
#define _TU16BTMRL_TU16BTMR1_POSITION                       0x1
#define _TU16BTMRL_TU16BTMR1_SIZE                           0x1
#define _TU16BTMRL_TU16BTMR1_LENGTH                         0x1
#define _TU16BTMRL_TU16BTMR1_MASK                           0x2
#define _TU16BTMRL_TU16BTMR2_POSN                           0x2
#define _TU16BTMRL_TU16BTMR2_POSITION                       0x2
#define _TU16BTMRL_TU16BTMR2_SIZE                           0x1
#define _TU16BTMRL_TU16BTMR2_LENGTH                         0x1
#define _TU16BTMRL_TU16BTMR2_MASK                           0x4
#define _TU16BTMRL_TU16BTMR3_POSN                           0x3
#define _TU16BTMRL_TU16BTMR3_POSITION                       0x3
#define _TU16BTMRL_TU16BTMR3_SIZE                           0x1
#define _TU16BTMRL_TU16BTMR3_LENGTH                         0x1
#define _TU16BTMRL_TU16BTMR3_MASK                           0x8
#define _TU16BTMRL_TU16BTMR4_POSN                           0x4
#define _TU16BTMRL_TU16BTMR4_POSITION                       0x4
#define _TU16BTMRL_TU16BTMR4_SIZE                           0x1
#define _TU16BTMRL_TU16BTMR4_LENGTH                         0x1
#define _TU16BTMRL_TU16BTMR4_MASK                           0x10
#define _TU16BTMRL_TU16BTMR5_POSN                           0x5
#define _TU16BTMRL_TU16BTMR5_POSITION                       0x5
#define _TU16BTMRL_TU16BTMR5_SIZE                           0x1
#define _TU16BTMRL_TU16BTMR5_LENGTH                         0x1
#define _TU16BTMRL_TU16BTMR5_MASK                           0x20
#define _TU16BTMRL_TU16BTMR6_POSN                           0x6
#define _TU16BTMRL_TU16BTMR6_POSITION                       0x6
#define _TU16BTMRL_TU16BTMR6_SIZE                           0x1
#define _TU16BTMRL_TU16BTMR6_LENGTH                         0x1
#define _TU16BTMRL_TU16BTMR6_MASK                           0x40
#define _TU16BTMRL_TU16BTMR7_POSN                           0x7
#define _TU16BTMRL_TU16BTMR7_POSITION                       0x7
#define _TU16BTMRL_TU16BTMR7_SIZE                           0x1
#define _TU16BTMRL_TU16BTMR7_LENGTH                         0x1
#define _TU16BTMRL_TU16BTMR7_MASK                           0x80

// Register: TU16BCRL
#define TU16BCRL TU16BCRL
extern volatile unsigned char           TU16BCRL            __at(0x13E);
#ifndef _LIB_BUILD
asm("TU16BCRL equ 013Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CRL                    :8;
    };
    struct {
        unsigned CRL0                   :1;
        unsigned CRL1                   :1;
        unsigned CRL2                   :1;
        unsigned CRL3                   :1;
        unsigned CRL4                   :1;
        unsigned CRL5                   :1;
        unsigned CRL6                   :1;
        unsigned CRL7                   :1;
    };
    struct {
        unsigned TU16BCRL0              :1;
        unsigned TU16BCRL1              :1;
        unsigned TU16BCRL2              :1;
        unsigned TU16BCRL3              :1;
        unsigned TU16BCRL4              :1;
        unsigned TU16BCRL5              :1;
        unsigned TU16BCRL6              :1;
        unsigned TU16BCRL7              :1;
    };
    struct {
        unsigned TU16BCR0               :1;
        unsigned TU16BCR1               :1;
        unsigned TU16BCR2               :1;
        unsigned TU16BCR3               :1;
        unsigned TU16BCR4               :1;
        unsigned TU16BCR5               :1;
        unsigned TU16BCR6               :1;
        unsigned TU16BCR7               :1;
    };
} TU16BCRLbits_t;
extern volatile TU16BCRLbits_t TU16BCRLbits __at(0x13E);
// bitfield macros
#define _TU16BCRL_CRL_POSN                                  0x0
#define _TU16BCRL_CRL_POSITION                              0x0
#define _TU16BCRL_CRL_SIZE                                  0x8
#define _TU16BCRL_CRL_LENGTH                                0x8
#define _TU16BCRL_CRL_MASK                                  0xFF
#define _TU16BCRL_CRL0_POSN                                 0x0
#define _TU16BCRL_CRL0_POSITION                             0x0
#define _TU16BCRL_CRL0_SIZE                                 0x1
#define _TU16BCRL_CRL0_LENGTH                               0x1
#define _TU16BCRL_CRL0_MASK                                 0x1
#define _TU16BCRL_CRL1_POSN                                 0x1
#define _TU16BCRL_CRL1_POSITION                             0x1
#define _TU16BCRL_CRL1_SIZE                                 0x1
#define _TU16BCRL_CRL1_LENGTH                               0x1
#define _TU16BCRL_CRL1_MASK                                 0x2
#define _TU16BCRL_CRL2_POSN                                 0x2
#define _TU16BCRL_CRL2_POSITION                             0x2
#define _TU16BCRL_CRL2_SIZE                                 0x1
#define _TU16BCRL_CRL2_LENGTH                               0x1
#define _TU16BCRL_CRL2_MASK                                 0x4
#define _TU16BCRL_CRL3_POSN                                 0x3
#define _TU16BCRL_CRL3_POSITION                             0x3
#define _TU16BCRL_CRL3_SIZE                                 0x1
#define _TU16BCRL_CRL3_LENGTH                               0x1
#define _TU16BCRL_CRL3_MASK                                 0x8
#define _TU16BCRL_CRL4_POSN                                 0x4
#define _TU16BCRL_CRL4_POSITION                             0x4
#define _TU16BCRL_CRL4_SIZE                                 0x1
#define _TU16BCRL_CRL4_LENGTH                               0x1
#define _TU16BCRL_CRL4_MASK                                 0x10
#define _TU16BCRL_CRL5_POSN                                 0x5
#define _TU16BCRL_CRL5_POSITION                             0x5
#define _TU16BCRL_CRL5_SIZE                                 0x1
#define _TU16BCRL_CRL5_LENGTH                               0x1
#define _TU16BCRL_CRL5_MASK                                 0x20
#define _TU16BCRL_CRL6_POSN                                 0x6
#define _TU16BCRL_CRL6_POSITION                             0x6
#define _TU16BCRL_CRL6_SIZE                                 0x1
#define _TU16BCRL_CRL6_LENGTH                               0x1
#define _TU16BCRL_CRL6_MASK                                 0x40
#define _TU16BCRL_CRL7_POSN                                 0x7
#define _TU16BCRL_CRL7_POSITION                             0x7
#define _TU16BCRL_CRL7_SIZE                                 0x1
#define _TU16BCRL_CRL7_LENGTH                               0x1
#define _TU16BCRL_CRL7_MASK                                 0x80
#define _TU16BCRL_TU16BCRL0_POSN                            0x0
#define _TU16BCRL_TU16BCRL0_POSITION                        0x0
#define _TU16BCRL_TU16BCRL0_SIZE                            0x1
#define _TU16BCRL_TU16BCRL0_LENGTH                          0x1
#define _TU16BCRL_TU16BCRL0_MASK                            0x1
#define _TU16BCRL_TU16BCRL1_POSN                            0x1
#define _TU16BCRL_TU16BCRL1_POSITION                        0x1
#define _TU16BCRL_TU16BCRL1_SIZE                            0x1
#define _TU16BCRL_TU16BCRL1_LENGTH                          0x1
#define _TU16BCRL_TU16BCRL1_MASK                            0x2
#define _TU16BCRL_TU16BCRL2_POSN                            0x2
#define _TU16BCRL_TU16BCRL2_POSITION                        0x2
#define _TU16BCRL_TU16BCRL2_SIZE                            0x1
#define _TU16BCRL_TU16BCRL2_LENGTH                          0x1
#define _TU16BCRL_TU16BCRL2_MASK                            0x4
#define _TU16BCRL_TU16BCRL3_POSN                            0x3
#define _TU16BCRL_TU16BCRL3_POSITION                        0x3
#define _TU16BCRL_TU16BCRL3_SIZE                            0x1
#define _TU16BCRL_TU16BCRL3_LENGTH                          0x1
#define _TU16BCRL_TU16BCRL3_MASK                            0x8
#define _TU16BCRL_TU16BCRL4_POSN                            0x4
#define _TU16BCRL_TU16BCRL4_POSITION                        0x4
#define _TU16BCRL_TU16BCRL4_SIZE                            0x1
#define _TU16BCRL_TU16BCRL4_LENGTH                          0x1
#define _TU16BCRL_TU16BCRL4_MASK                            0x10
#define _TU16BCRL_TU16BCRL5_POSN                            0x5
#define _TU16BCRL_TU16BCRL5_POSITION                        0x5
#define _TU16BCRL_TU16BCRL5_SIZE                            0x1
#define _TU16BCRL_TU16BCRL5_LENGTH                          0x1
#define _TU16BCRL_TU16BCRL5_MASK                            0x20
#define _TU16BCRL_TU16BCRL6_POSN                            0x6
#define _TU16BCRL_TU16BCRL6_POSITION                        0x6
#define _TU16BCRL_TU16BCRL6_SIZE                            0x1
#define _TU16BCRL_TU16BCRL6_LENGTH                          0x1
#define _TU16BCRL_TU16BCRL6_MASK                            0x40
#define _TU16BCRL_TU16BCRL7_POSN                            0x7
#define _TU16BCRL_TU16BCRL7_POSITION                        0x7
#define _TU16BCRL_TU16BCRL7_SIZE                            0x1
#define _TU16BCRL_TU16BCRL7_LENGTH                          0x1
#define _TU16BCRL_TU16BCRL7_MASK                            0x80
#define _TU16BCRL_TU16BCR0_POSN                             0x0
#define _TU16BCRL_TU16BCR0_POSITION                         0x0
#define _TU16BCRL_TU16BCR0_SIZE                             0x1
#define _TU16BCRL_TU16BCR0_LENGTH                           0x1
#define _TU16BCRL_TU16BCR0_MASK                             0x1
#define _TU16BCRL_TU16BCR1_POSN                             0x1
#define _TU16BCRL_TU16BCR1_POSITION                         0x1
#define _TU16BCRL_TU16BCR1_SIZE                             0x1
#define _TU16BCRL_TU16BCR1_LENGTH                           0x1
#define _TU16BCRL_TU16BCR1_MASK                             0x2
#define _TU16BCRL_TU16BCR2_POSN                             0x2
#define _TU16BCRL_TU16BCR2_POSITION                         0x2
#define _TU16BCRL_TU16BCR2_SIZE                             0x1
#define _TU16BCRL_TU16BCR2_LENGTH                           0x1
#define _TU16BCRL_TU16BCR2_MASK                             0x4
#define _TU16BCRL_TU16BCR3_POSN                             0x3
#define _TU16BCRL_TU16BCR3_POSITION                         0x3
#define _TU16BCRL_TU16BCR3_SIZE                             0x1
#define _TU16BCRL_TU16BCR3_LENGTH                           0x1
#define _TU16BCRL_TU16BCR3_MASK                             0x8
#define _TU16BCRL_TU16BCR4_POSN                             0x4
#define _TU16BCRL_TU16BCR4_POSITION                         0x4
#define _TU16BCRL_TU16BCR4_SIZE                             0x1
#define _TU16BCRL_TU16BCR4_LENGTH                           0x1
#define _TU16BCRL_TU16BCR4_MASK                             0x10
#define _TU16BCRL_TU16BCR5_POSN                             0x5
#define _TU16BCRL_TU16BCR5_POSITION                         0x5
#define _TU16BCRL_TU16BCR5_SIZE                             0x1
#define _TU16BCRL_TU16BCR5_LENGTH                           0x1
#define _TU16BCRL_TU16BCR5_MASK                             0x20
#define _TU16BCRL_TU16BCR6_POSN                             0x6
#define _TU16BCRL_TU16BCR6_POSITION                         0x6
#define _TU16BCRL_TU16BCR6_SIZE                             0x1
#define _TU16BCRL_TU16BCR6_LENGTH                           0x1
#define _TU16BCRL_TU16BCR6_MASK                             0x40
#define _TU16BCRL_TU16BCR7_POSN                             0x7
#define _TU16BCRL_TU16BCR7_POSITION                         0x7
#define _TU16BCRL_TU16BCR7_SIZE                             0x1
#define _TU16BCRL_TU16BCR7_LENGTH                           0x1
#define _TU16BCRL_TU16BCR7_MASK                             0x80

// Register: TU16BTMRH
#define TU16BTMRH TU16BTMRH
extern volatile unsigned char           TU16BTMRH           __at(0x13F);
#ifndef _LIB_BUILD
asm("TU16BTMRH equ 013Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMRH                   :8;
    };
    struct {
        unsigned TMRH0                  :1;
        unsigned TMRH1                  :1;
        unsigned TMRH2                  :1;
        unsigned TMRH3                  :1;
        unsigned TMRH4                  :1;
        unsigned TMRH5                  :1;
        unsigned TMRH6                  :1;
        unsigned TMRH7                  :1;
    };
    struct {
        unsigned TU16BTMRH0             :1;
        unsigned TU16BTMRH1             :1;
        unsigned TU16BTMRH2             :1;
        unsigned TU16BTMRH3             :1;
        unsigned TU16BTMRH4             :1;
        unsigned TU16BTMRH5             :1;
        unsigned TU16BTMRH6             :1;
        unsigned TU16BTMRH7             :1;
    };
    struct {
        unsigned TU16BTMR8              :1;
        unsigned TU16BTMR9              :1;
        unsigned TU16BTMR10             :1;
        unsigned TU16BTMR11             :1;
        unsigned TU16BTMR12             :1;
        unsigned TU16BTMR13             :1;
        unsigned TU16BTMR14             :1;
        unsigned TU16BTMR15             :1;
    };
} TU16BTMRHbits_t;
extern volatile TU16BTMRHbits_t TU16BTMRHbits __at(0x13F);
// bitfield macros
#define _TU16BTMRH_TMRH_POSN                                0x0
#define _TU16BTMRH_TMRH_POSITION                            0x0
#define _TU16BTMRH_TMRH_SIZE                                0x8
#define _TU16BTMRH_TMRH_LENGTH                              0x8
#define _TU16BTMRH_TMRH_MASK                                0xFF
#define _TU16BTMRH_TMRH0_POSN                               0x0
#define _TU16BTMRH_TMRH0_POSITION                           0x0
#define _TU16BTMRH_TMRH0_SIZE                               0x1
#define _TU16BTMRH_TMRH0_LENGTH                             0x1
#define _TU16BTMRH_TMRH0_MASK                               0x1
#define _TU16BTMRH_TMRH1_POSN                               0x1
#define _TU16BTMRH_TMRH1_POSITION                           0x1
#define _TU16BTMRH_TMRH1_SIZE                               0x1
#define _TU16BTMRH_TMRH1_LENGTH                             0x1
#define _TU16BTMRH_TMRH1_MASK                               0x2
#define _TU16BTMRH_TMRH2_POSN                               0x2
#define _TU16BTMRH_TMRH2_POSITION                           0x2
#define _TU16BTMRH_TMRH2_SIZE                               0x1
#define _TU16BTMRH_TMRH2_LENGTH                             0x1
#define _TU16BTMRH_TMRH2_MASK                               0x4
#define _TU16BTMRH_TMRH3_POSN                               0x3
#define _TU16BTMRH_TMRH3_POSITION                           0x3
#define _TU16BTMRH_TMRH3_SIZE                               0x1
#define _TU16BTMRH_TMRH3_LENGTH                             0x1
#define _TU16BTMRH_TMRH3_MASK                               0x8
#define _TU16BTMRH_TMRH4_POSN                               0x4
#define _TU16BTMRH_TMRH4_POSITION                           0x4
#define _TU16BTMRH_TMRH4_SIZE                               0x1
#define _TU16BTMRH_TMRH4_LENGTH                             0x1
#define _TU16BTMRH_TMRH4_MASK                               0x10
#define _TU16BTMRH_TMRH5_POSN                               0x5
#define _TU16BTMRH_TMRH5_POSITION                           0x5
#define _TU16BTMRH_TMRH5_SIZE                               0x1
#define _TU16BTMRH_TMRH5_LENGTH                             0x1
#define _TU16BTMRH_TMRH5_MASK                               0x20
#define _TU16BTMRH_TMRH6_POSN                               0x6
#define _TU16BTMRH_TMRH6_POSITION                           0x6
#define _TU16BTMRH_TMRH6_SIZE                               0x1
#define _TU16BTMRH_TMRH6_LENGTH                             0x1
#define _TU16BTMRH_TMRH6_MASK                               0x40
#define _TU16BTMRH_TMRH7_POSN                               0x7
#define _TU16BTMRH_TMRH7_POSITION                           0x7
#define _TU16BTMRH_TMRH7_SIZE                               0x1
#define _TU16BTMRH_TMRH7_LENGTH                             0x1
#define _TU16BTMRH_TMRH7_MASK                               0x80
#define _TU16BTMRH_TU16BTMRH0_POSN                          0x0
#define _TU16BTMRH_TU16BTMRH0_POSITION                      0x0
#define _TU16BTMRH_TU16BTMRH0_SIZE                          0x1
#define _TU16BTMRH_TU16BTMRH0_LENGTH                        0x1
#define _TU16BTMRH_TU16BTMRH0_MASK                          0x1
#define _TU16BTMRH_TU16BTMRH1_POSN                          0x1
#define _TU16BTMRH_TU16BTMRH1_POSITION                      0x1
#define _TU16BTMRH_TU16BTMRH1_SIZE                          0x1
#define _TU16BTMRH_TU16BTMRH1_LENGTH                        0x1
#define _TU16BTMRH_TU16BTMRH1_MASK                          0x2
#define _TU16BTMRH_TU16BTMRH2_POSN                          0x2
#define _TU16BTMRH_TU16BTMRH2_POSITION                      0x2
#define _TU16BTMRH_TU16BTMRH2_SIZE                          0x1
#define _TU16BTMRH_TU16BTMRH2_LENGTH                        0x1
#define _TU16BTMRH_TU16BTMRH2_MASK                          0x4
#define _TU16BTMRH_TU16BTMRH3_POSN                          0x3
#define _TU16BTMRH_TU16BTMRH3_POSITION                      0x3
#define _TU16BTMRH_TU16BTMRH3_SIZE                          0x1
#define _TU16BTMRH_TU16BTMRH3_LENGTH                        0x1
#define _TU16BTMRH_TU16BTMRH3_MASK                          0x8
#define _TU16BTMRH_TU16BTMRH4_POSN                          0x4
#define _TU16BTMRH_TU16BTMRH4_POSITION                      0x4
#define _TU16BTMRH_TU16BTMRH4_SIZE                          0x1
#define _TU16BTMRH_TU16BTMRH4_LENGTH                        0x1
#define _TU16BTMRH_TU16BTMRH4_MASK                          0x10
#define _TU16BTMRH_TU16BTMRH5_POSN                          0x5
#define _TU16BTMRH_TU16BTMRH5_POSITION                      0x5
#define _TU16BTMRH_TU16BTMRH5_SIZE                          0x1
#define _TU16BTMRH_TU16BTMRH5_LENGTH                        0x1
#define _TU16BTMRH_TU16BTMRH5_MASK                          0x20
#define _TU16BTMRH_TU16BTMRH6_POSN                          0x6
#define _TU16BTMRH_TU16BTMRH6_POSITION                      0x6
#define _TU16BTMRH_TU16BTMRH6_SIZE                          0x1
#define _TU16BTMRH_TU16BTMRH6_LENGTH                        0x1
#define _TU16BTMRH_TU16BTMRH6_MASK                          0x40
#define _TU16BTMRH_TU16BTMRH7_POSN                          0x7
#define _TU16BTMRH_TU16BTMRH7_POSITION                      0x7
#define _TU16BTMRH_TU16BTMRH7_SIZE                          0x1
#define _TU16BTMRH_TU16BTMRH7_LENGTH                        0x1
#define _TU16BTMRH_TU16BTMRH7_MASK                          0x80
#define _TU16BTMRH_TU16BTMR8_POSN                           0x0
#define _TU16BTMRH_TU16BTMR8_POSITION                       0x0
#define _TU16BTMRH_TU16BTMR8_SIZE                           0x1
#define _TU16BTMRH_TU16BTMR8_LENGTH                         0x1
#define _TU16BTMRH_TU16BTMR8_MASK                           0x1
#define _TU16BTMRH_TU16BTMR9_POSN                           0x1
#define _TU16BTMRH_TU16BTMR9_POSITION                       0x1
#define _TU16BTMRH_TU16BTMR9_SIZE                           0x1
#define _TU16BTMRH_TU16BTMR9_LENGTH                         0x1
#define _TU16BTMRH_TU16BTMR9_MASK                           0x2
#define _TU16BTMRH_TU16BTMR10_POSN                          0x2
#define _TU16BTMRH_TU16BTMR10_POSITION                      0x2
#define _TU16BTMRH_TU16BTMR10_SIZE                          0x1
#define _TU16BTMRH_TU16BTMR10_LENGTH                        0x1
#define _TU16BTMRH_TU16BTMR10_MASK                          0x4
#define _TU16BTMRH_TU16BTMR11_POSN                          0x3
#define _TU16BTMRH_TU16BTMR11_POSITION                      0x3
#define _TU16BTMRH_TU16BTMR11_SIZE                          0x1
#define _TU16BTMRH_TU16BTMR11_LENGTH                        0x1
#define _TU16BTMRH_TU16BTMR11_MASK                          0x8
#define _TU16BTMRH_TU16BTMR12_POSN                          0x4
#define _TU16BTMRH_TU16BTMR12_POSITION                      0x4
#define _TU16BTMRH_TU16BTMR12_SIZE                          0x1
#define _TU16BTMRH_TU16BTMR12_LENGTH                        0x1
#define _TU16BTMRH_TU16BTMR12_MASK                          0x10
#define _TU16BTMRH_TU16BTMR13_POSN                          0x5
#define _TU16BTMRH_TU16BTMR13_POSITION                      0x5
#define _TU16BTMRH_TU16BTMR13_SIZE                          0x1
#define _TU16BTMRH_TU16BTMR13_LENGTH                        0x1
#define _TU16BTMRH_TU16BTMR13_MASK                          0x20
#define _TU16BTMRH_TU16BTMR14_POSN                          0x6
#define _TU16BTMRH_TU16BTMR14_POSITION                      0x6
#define _TU16BTMRH_TU16BTMR14_SIZE                          0x1
#define _TU16BTMRH_TU16BTMR14_LENGTH                        0x1
#define _TU16BTMRH_TU16BTMR14_MASK                          0x40
#define _TU16BTMRH_TU16BTMR15_POSN                          0x7
#define _TU16BTMRH_TU16BTMR15_POSITION                      0x7
#define _TU16BTMRH_TU16BTMR15_SIZE                          0x1
#define _TU16BTMRH_TU16BTMR15_LENGTH                        0x1
#define _TU16BTMRH_TU16BTMR15_MASK                          0x80

// Register: TU16BCRH
#define TU16BCRH TU16BCRH
extern volatile unsigned char           TU16BCRH            __at(0x13F);
#ifndef _LIB_BUILD
asm("TU16BCRH equ 013Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CRH                    :8;
    };
    struct {
        unsigned CRH0                   :1;
        unsigned CRH1                   :1;
        unsigned CRH2                   :1;
        unsigned CRH3                   :1;
        unsigned CRH4                   :1;
        unsigned CRH5                   :1;
        unsigned CRH6                   :1;
        unsigned CRH7                   :1;
    };
    struct {
        unsigned TU16BCRH0              :1;
        unsigned TU16BCRH1              :1;
        unsigned TU16BCRH2              :1;
        unsigned TU16BCRH3              :1;
        unsigned TU16BCRH4              :1;
        unsigned TU16BCRH5              :1;
        unsigned TU16BCRH6              :1;
        unsigned TU16BCRH7              :1;
    };
    struct {
        unsigned TU16BCR8               :1;
        unsigned TU16BCR9               :1;
        unsigned TU16BCR10              :1;
        unsigned TU16BCR11              :1;
        unsigned TU16BCR12              :1;
        unsigned TU16BCR13              :1;
        unsigned TU16BCR14              :1;
        unsigned TU16BCR15              :1;
    };
} TU16BCRHbits_t;
extern volatile TU16BCRHbits_t TU16BCRHbits __at(0x13F);
// bitfield macros
#define _TU16BCRH_CRH_POSN                                  0x0
#define _TU16BCRH_CRH_POSITION                              0x0
#define _TU16BCRH_CRH_SIZE                                  0x8
#define _TU16BCRH_CRH_LENGTH                                0x8
#define _TU16BCRH_CRH_MASK                                  0xFF
#define _TU16BCRH_CRH0_POSN                                 0x0
#define _TU16BCRH_CRH0_POSITION                             0x0
#define _TU16BCRH_CRH0_SIZE                                 0x1
#define _TU16BCRH_CRH0_LENGTH                               0x1
#define _TU16BCRH_CRH0_MASK                                 0x1
#define _TU16BCRH_CRH1_POSN                                 0x1
#define _TU16BCRH_CRH1_POSITION                             0x1
#define _TU16BCRH_CRH1_SIZE                                 0x1
#define _TU16BCRH_CRH1_LENGTH                               0x1
#define _TU16BCRH_CRH1_MASK                                 0x2
#define _TU16BCRH_CRH2_POSN                                 0x2
#define _TU16BCRH_CRH2_POSITION                             0x2
#define _TU16BCRH_CRH2_SIZE                                 0x1
#define _TU16BCRH_CRH2_LENGTH                               0x1
#define _TU16BCRH_CRH2_MASK                                 0x4
#define _TU16BCRH_CRH3_POSN                                 0x3
#define _TU16BCRH_CRH3_POSITION                             0x3
#define _TU16BCRH_CRH3_SIZE                                 0x1
#define _TU16BCRH_CRH3_LENGTH                               0x1
#define _TU16BCRH_CRH3_MASK                                 0x8
#define _TU16BCRH_CRH4_POSN                                 0x4
#define _TU16BCRH_CRH4_POSITION                             0x4
#define _TU16BCRH_CRH4_SIZE                                 0x1
#define _TU16BCRH_CRH4_LENGTH                               0x1
#define _TU16BCRH_CRH4_MASK                                 0x10
#define _TU16BCRH_CRH5_POSN                                 0x5
#define _TU16BCRH_CRH5_POSITION                             0x5
#define _TU16BCRH_CRH5_SIZE                                 0x1
#define _TU16BCRH_CRH5_LENGTH                               0x1
#define _TU16BCRH_CRH5_MASK                                 0x20
#define _TU16BCRH_CRH6_POSN                                 0x6
#define _TU16BCRH_CRH6_POSITION                             0x6
#define _TU16BCRH_CRH6_SIZE                                 0x1
#define _TU16BCRH_CRH6_LENGTH                               0x1
#define _TU16BCRH_CRH6_MASK                                 0x40
#define _TU16BCRH_CRH7_POSN                                 0x7
#define _TU16BCRH_CRH7_POSITION                             0x7
#define _TU16BCRH_CRH7_SIZE                                 0x1
#define _TU16BCRH_CRH7_LENGTH                               0x1
#define _TU16BCRH_CRH7_MASK                                 0x80
#define _TU16BCRH_TU16BCRH0_POSN                            0x0
#define _TU16BCRH_TU16BCRH0_POSITION                        0x0
#define _TU16BCRH_TU16BCRH0_SIZE                            0x1
#define _TU16BCRH_TU16BCRH0_LENGTH                          0x1
#define _TU16BCRH_TU16BCRH0_MASK                            0x1
#define _TU16BCRH_TU16BCRH1_POSN                            0x1
#define _TU16BCRH_TU16BCRH1_POSITION                        0x1
#define _TU16BCRH_TU16BCRH1_SIZE                            0x1
#define _TU16BCRH_TU16BCRH1_LENGTH                          0x1
#define _TU16BCRH_TU16BCRH1_MASK                            0x2
#define _TU16BCRH_TU16BCRH2_POSN                            0x2
#define _TU16BCRH_TU16BCRH2_POSITION                        0x2
#define _TU16BCRH_TU16BCRH2_SIZE                            0x1
#define _TU16BCRH_TU16BCRH2_LENGTH                          0x1
#define _TU16BCRH_TU16BCRH2_MASK                            0x4
#define _TU16BCRH_TU16BCRH3_POSN                            0x3
#define _TU16BCRH_TU16BCRH3_POSITION                        0x3
#define _TU16BCRH_TU16BCRH3_SIZE                            0x1
#define _TU16BCRH_TU16BCRH3_LENGTH                          0x1
#define _TU16BCRH_TU16BCRH3_MASK                            0x8
#define _TU16BCRH_TU16BCRH4_POSN                            0x4
#define _TU16BCRH_TU16BCRH4_POSITION                        0x4
#define _TU16BCRH_TU16BCRH4_SIZE                            0x1
#define _TU16BCRH_TU16BCRH4_LENGTH                          0x1
#define _TU16BCRH_TU16BCRH4_MASK                            0x10
#define _TU16BCRH_TU16BCRH5_POSN                            0x5
#define _TU16BCRH_TU16BCRH5_POSITION                        0x5
#define _TU16BCRH_TU16BCRH5_SIZE                            0x1
#define _TU16BCRH_TU16BCRH5_LENGTH                          0x1
#define _TU16BCRH_TU16BCRH5_MASK                            0x20
#define _TU16BCRH_TU16BCRH6_POSN                            0x6
#define _TU16BCRH_TU16BCRH6_POSITION                        0x6
#define _TU16BCRH_TU16BCRH6_SIZE                            0x1
#define _TU16BCRH_TU16BCRH6_LENGTH                          0x1
#define _TU16BCRH_TU16BCRH6_MASK                            0x40
#define _TU16BCRH_TU16BCRH7_POSN                            0x7
#define _TU16BCRH_TU16BCRH7_POSITION                        0x7
#define _TU16BCRH_TU16BCRH7_SIZE                            0x1
#define _TU16BCRH_TU16BCRH7_LENGTH                          0x1
#define _TU16BCRH_TU16BCRH7_MASK                            0x80
#define _TU16BCRH_TU16BCR8_POSN                             0x0
#define _TU16BCRH_TU16BCR8_POSITION                         0x0
#define _TU16BCRH_TU16BCR8_SIZE                             0x1
#define _TU16BCRH_TU16BCR8_LENGTH                           0x1
#define _TU16BCRH_TU16BCR8_MASK                             0x1
#define _TU16BCRH_TU16BCR9_POSN                             0x1
#define _TU16BCRH_TU16BCR9_POSITION                         0x1
#define _TU16BCRH_TU16BCR9_SIZE                             0x1
#define _TU16BCRH_TU16BCR9_LENGTH                           0x1
#define _TU16BCRH_TU16BCR9_MASK                             0x2
#define _TU16BCRH_TU16BCR10_POSN                            0x2
#define _TU16BCRH_TU16BCR10_POSITION                        0x2
#define _TU16BCRH_TU16BCR10_SIZE                            0x1
#define _TU16BCRH_TU16BCR10_LENGTH                          0x1
#define _TU16BCRH_TU16BCR10_MASK                            0x4
#define _TU16BCRH_TU16BCR11_POSN                            0x3
#define _TU16BCRH_TU16BCR11_POSITION                        0x3
#define _TU16BCRH_TU16BCR11_SIZE                            0x1
#define _TU16BCRH_TU16BCR11_LENGTH                          0x1
#define _TU16BCRH_TU16BCR11_MASK                            0x8
#define _TU16BCRH_TU16BCR12_POSN                            0x4
#define _TU16BCRH_TU16BCR12_POSITION                        0x4
#define _TU16BCRH_TU16BCR12_SIZE                            0x1
#define _TU16BCRH_TU16BCR12_LENGTH                          0x1
#define _TU16BCRH_TU16BCR12_MASK                            0x10
#define _TU16BCRH_TU16BCR13_POSN                            0x5
#define _TU16BCRH_TU16BCR13_POSITION                        0x5
#define _TU16BCRH_TU16BCR13_SIZE                            0x1
#define _TU16BCRH_TU16BCR13_LENGTH                          0x1
#define _TU16BCRH_TU16BCR13_MASK                            0x20
#define _TU16BCRH_TU16BCR14_POSN                            0x6
#define _TU16BCRH_TU16BCR14_POSITION                        0x6
#define _TU16BCRH_TU16BCR14_SIZE                            0x1
#define _TU16BCRH_TU16BCR14_LENGTH                          0x1
#define _TU16BCRH_TU16BCR14_MASK                            0x40
#define _TU16BCRH_TU16BCR15_POSN                            0x7
#define _TU16BCRH_TU16BCR15_POSITION                        0x7
#define _TU16BCRH_TU16BCR15_SIZE                            0x1
#define _TU16BCRH_TU16BCR15_LENGTH                          0x1
#define _TU16BCRH_TU16BCR15_MASK                            0x80

// Register: TU16BTMRT
#define TU16BTMRT TU16BTMRT
extern volatile unsigned char           TU16BTMRT           __at(0x141);
#ifndef _LIB_BUILD
asm("TU16BTMRT equ 0141h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMRT                   :8;
    };
    struct {
        unsigned TMRT0                  :1;
        unsigned TMRT1                  :1;
        unsigned TMRT2                  :1;
        unsigned TMRT3                  :1;
        unsigned TMRT4                  :1;
        unsigned TMRT5                  :1;
        unsigned TMRT6                  :1;
        unsigned TMRT7                  :1;
    };
    struct {
        unsigned TU16BTMRT0             :1;
        unsigned TU16BTMRT1             :1;
        unsigned TU16BTMRT2             :1;
        unsigned TU16BTMRT3             :1;
        unsigned TU16BTMRT4             :1;
        unsigned TU16BTMRT5             :1;
        unsigned TU16BTMRT6             :1;
        unsigned TU16BTMRT7             :1;
    };
    struct {
        unsigned TU16BTMR24             :1;
        unsigned TU16BTMR25             :1;
        unsigned TU16BTMR26             :1;
        unsigned TU16BTMR27             :1;
        unsigned TU16BTMR28             :1;
        unsigned TU16BTMR29             :1;
        unsigned TU16BTMR30             :1;
        unsigned TU16BTMR31             :1;
    };
} TU16BTMRTbits_t;
extern volatile TU16BTMRTbits_t TU16BTMRTbits __at(0x141);
// bitfield macros
#define _TU16BTMRT_TMRT_POSN                                0x0
#define _TU16BTMRT_TMRT_POSITION                            0x0
#define _TU16BTMRT_TMRT_SIZE                                0x8
#define _TU16BTMRT_TMRT_LENGTH                              0x8
#define _TU16BTMRT_TMRT_MASK                                0xFF
#define _TU16BTMRT_TMRT0_POSN                               0x0
#define _TU16BTMRT_TMRT0_POSITION                           0x0
#define _TU16BTMRT_TMRT0_SIZE                               0x1
#define _TU16BTMRT_TMRT0_LENGTH                             0x1
#define _TU16BTMRT_TMRT0_MASK                               0x1
#define _TU16BTMRT_TMRT1_POSN                               0x1
#define _TU16BTMRT_TMRT1_POSITION                           0x1
#define _TU16BTMRT_TMRT1_SIZE                               0x1
#define _TU16BTMRT_TMRT1_LENGTH                             0x1
#define _TU16BTMRT_TMRT1_MASK                               0x2
#define _TU16BTMRT_TMRT2_POSN                               0x2
#define _TU16BTMRT_TMRT2_POSITION                           0x2
#define _TU16BTMRT_TMRT2_SIZE                               0x1
#define _TU16BTMRT_TMRT2_LENGTH                             0x1
#define _TU16BTMRT_TMRT2_MASK                               0x4
#define _TU16BTMRT_TMRT3_POSN                               0x3
#define _TU16BTMRT_TMRT3_POSITION                           0x3
#define _TU16BTMRT_TMRT3_SIZE                               0x1
#define _TU16BTMRT_TMRT3_LENGTH                             0x1
#define _TU16BTMRT_TMRT3_MASK                               0x8
#define _TU16BTMRT_TMRT4_POSN                               0x4
#define _TU16BTMRT_TMRT4_POSITION                           0x4
#define _TU16BTMRT_TMRT4_SIZE                               0x1
#define _TU16BTMRT_TMRT4_LENGTH                             0x1
#define _TU16BTMRT_TMRT4_MASK                               0x10
#define _TU16BTMRT_TMRT5_POSN                               0x5
#define _TU16BTMRT_TMRT5_POSITION                           0x5
#define _TU16BTMRT_TMRT5_SIZE                               0x1
#define _TU16BTMRT_TMRT5_LENGTH                             0x1
#define _TU16BTMRT_TMRT5_MASK                               0x20
#define _TU16BTMRT_TMRT6_POSN                               0x6
#define _TU16BTMRT_TMRT6_POSITION                           0x6
#define _TU16BTMRT_TMRT6_SIZE                               0x1
#define _TU16BTMRT_TMRT6_LENGTH                             0x1
#define _TU16BTMRT_TMRT6_MASK                               0x40
#define _TU16BTMRT_TMRT7_POSN                               0x7
#define _TU16BTMRT_TMRT7_POSITION                           0x7
#define _TU16BTMRT_TMRT7_SIZE                               0x1
#define _TU16BTMRT_TMRT7_LENGTH                             0x1
#define _TU16BTMRT_TMRT7_MASK                               0x80
#define _TU16BTMRT_TU16BTMRT0_POSN                          0x0
#define _TU16BTMRT_TU16BTMRT0_POSITION                      0x0
#define _TU16BTMRT_TU16BTMRT0_SIZE                          0x1
#define _TU16BTMRT_TU16BTMRT0_LENGTH                        0x1
#define _TU16BTMRT_TU16BTMRT0_MASK                          0x1
#define _TU16BTMRT_TU16BTMRT1_POSN                          0x1
#define _TU16BTMRT_TU16BTMRT1_POSITION                      0x1
#define _TU16BTMRT_TU16BTMRT1_SIZE                          0x1
#define _TU16BTMRT_TU16BTMRT1_LENGTH                        0x1
#define _TU16BTMRT_TU16BTMRT1_MASK                          0x2
#define _TU16BTMRT_TU16BTMRT2_POSN                          0x2
#define _TU16BTMRT_TU16BTMRT2_POSITION                      0x2
#define _TU16BTMRT_TU16BTMRT2_SIZE                          0x1
#define _TU16BTMRT_TU16BTMRT2_LENGTH                        0x1
#define _TU16BTMRT_TU16BTMRT2_MASK                          0x4
#define _TU16BTMRT_TU16BTMRT3_POSN                          0x3
#define _TU16BTMRT_TU16BTMRT3_POSITION                      0x3
#define _TU16BTMRT_TU16BTMRT3_SIZE                          0x1
#define _TU16BTMRT_TU16BTMRT3_LENGTH                        0x1
#define _TU16BTMRT_TU16BTMRT3_MASK                          0x8
#define _TU16BTMRT_TU16BTMRT4_POSN                          0x4
#define _TU16BTMRT_TU16BTMRT4_POSITION                      0x4
#define _TU16BTMRT_TU16BTMRT4_SIZE                          0x1
#define _TU16BTMRT_TU16BTMRT4_LENGTH                        0x1
#define _TU16BTMRT_TU16BTMRT4_MASK                          0x10
#define _TU16BTMRT_TU16BTMRT5_POSN                          0x5
#define _TU16BTMRT_TU16BTMRT5_POSITION                      0x5
#define _TU16BTMRT_TU16BTMRT5_SIZE                          0x1
#define _TU16BTMRT_TU16BTMRT5_LENGTH                        0x1
#define _TU16BTMRT_TU16BTMRT5_MASK                          0x20
#define _TU16BTMRT_TU16BTMRT6_POSN                          0x6
#define _TU16BTMRT_TU16BTMRT6_POSITION                      0x6
#define _TU16BTMRT_TU16BTMRT6_SIZE                          0x1
#define _TU16BTMRT_TU16BTMRT6_LENGTH                        0x1
#define _TU16BTMRT_TU16BTMRT6_MASK                          0x40
#define _TU16BTMRT_TU16BTMRT7_POSN                          0x7
#define _TU16BTMRT_TU16BTMRT7_POSITION                      0x7
#define _TU16BTMRT_TU16BTMRT7_SIZE                          0x1
#define _TU16BTMRT_TU16BTMRT7_LENGTH                        0x1
#define _TU16BTMRT_TU16BTMRT7_MASK                          0x80
#define _TU16BTMRT_TU16BTMR24_POSN                          0x0
#define _TU16BTMRT_TU16BTMR24_POSITION                      0x0
#define _TU16BTMRT_TU16BTMR24_SIZE                          0x1
#define _TU16BTMRT_TU16BTMR24_LENGTH                        0x1
#define _TU16BTMRT_TU16BTMR24_MASK                          0x1
#define _TU16BTMRT_TU16BTMR25_POSN                          0x1
#define _TU16BTMRT_TU16BTMR25_POSITION                      0x1
#define _TU16BTMRT_TU16BTMR25_SIZE                          0x1
#define _TU16BTMRT_TU16BTMR25_LENGTH                        0x1
#define _TU16BTMRT_TU16BTMR25_MASK                          0x2
#define _TU16BTMRT_TU16BTMR26_POSN                          0x2
#define _TU16BTMRT_TU16BTMR26_POSITION                      0x2
#define _TU16BTMRT_TU16BTMR26_SIZE                          0x1
#define _TU16BTMRT_TU16BTMR26_LENGTH                        0x1
#define _TU16BTMRT_TU16BTMR26_MASK                          0x4
#define _TU16BTMRT_TU16BTMR27_POSN                          0x3
#define _TU16BTMRT_TU16BTMR27_POSITION                      0x3
#define _TU16BTMRT_TU16BTMR27_SIZE                          0x1
#define _TU16BTMRT_TU16BTMR27_LENGTH                        0x1
#define _TU16BTMRT_TU16BTMR27_MASK                          0x8
#define _TU16BTMRT_TU16BTMR28_POSN                          0x4
#define _TU16BTMRT_TU16BTMR28_POSITION                      0x4
#define _TU16BTMRT_TU16BTMR28_SIZE                          0x1
#define _TU16BTMRT_TU16BTMR28_LENGTH                        0x1
#define _TU16BTMRT_TU16BTMR28_MASK                          0x10
#define _TU16BTMRT_TU16BTMR29_POSN                          0x5
#define _TU16BTMRT_TU16BTMR29_POSITION                      0x5
#define _TU16BTMRT_TU16BTMR29_SIZE                          0x1
#define _TU16BTMRT_TU16BTMR29_LENGTH                        0x1
#define _TU16BTMRT_TU16BTMR29_MASK                          0x20
#define _TU16BTMRT_TU16BTMR30_POSN                          0x6
#define _TU16BTMRT_TU16BTMR30_POSITION                      0x6
#define _TU16BTMRT_TU16BTMR30_SIZE                          0x1
#define _TU16BTMRT_TU16BTMR30_LENGTH                        0x1
#define _TU16BTMRT_TU16BTMR30_MASK                          0x40
#define _TU16BTMRT_TU16BTMR31_POSN                          0x7
#define _TU16BTMRT_TU16BTMR31_POSITION                      0x7
#define _TU16BTMRT_TU16BTMR31_SIZE                          0x1
#define _TU16BTMRT_TU16BTMR31_LENGTH                        0x1
#define _TU16BTMRT_TU16BTMR31_MASK                          0x80

// Register: TU16BCRT
#define TU16BCRT TU16BCRT
extern volatile unsigned char           TU16BCRT            __at(0x141);
#ifndef _LIB_BUILD
asm("TU16BCRT equ 0141h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CRT                    :8;
    };
    struct {
        unsigned CRT0                   :1;
        unsigned CRT1                   :1;
        unsigned CRT2                   :1;
        unsigned CRT3                   :1;
        unsigned CRT4                   :1;
        unsigned CRT5                   :1;
        unsigned CRT6                   :1;
        unsigned CRT7                   :1;
    };
    struct {
        unsigned TU16BCRT0              :1;
        unsigned TU16BCRT1              :1;
        unsigned TU16BCRT2              :1;
        unsigned TU16BCRT3              :1;
        unsigned TU16BCRT4              :1;
        unsigned TU16BCRT5              :1;
        unsigned TU16BCRT6              :1;
        unsigned TU16BCRT7              :1;
    };
    struct {
        unsigned TU16BCR24              :1;
        unsigned TU16BCR25              :1;
        unsigned TU16BCR26              :1;
        unsigned TU16BCR27              :1;
        unsigned TU16BCR28              :1;
        unsigned TU16BCR29              :1;
        unsigned TU16BCR30              :1;
        unsigned TU16BCR31              :1;
    };
} TU16BCRTbits_t;
extern volatile TU16BCRTbits_t TU16BCRTbits __at(0x141);
// bitfield macros
#define _TU16BCRT_CRT_POSN                                  0x0
#define _TU16BCRT_CRT_POSITION                              0x0
#define _TU16BCRT_CRT_SIZE                                  0x8
#define _TU16BCRT_CRT_LENGTH                                0x8
#define _TU16BCRT_CRT_MASK                                  0xFF
#define _TU16BCRT_CRT0_POSN                                 0x0
#define _TU16BCRT_CRT0_POSITION                             0x0
#define _TU16BCRT_CRT0_SIZE                                 0x1
#define _TU16BCRT_CRT0_LENGTH                               0x1
#define _TU16BCRT_CRT0_MASK                                 0x1
#define _TU16BCRT_CRT1_POSN                                 0x1
#define _TU16BCRT_CRT1_POSITION                             0x1
#define _TU16BCRT_CRT1_SIZE                                 0x1
#define _TU16BCRT_CRT1_LENGTH                               0x1
#define _TU16BCRT_CRT1_MASK                                 0x2
#define _TU16BCRT_CRT2_POSN                                 0x2
#define _TU16BCRT_CRT2_POSITION                             0x2
#define _TU16BCRT_CRT2_SIZE                                 0x1
#define _TU16BCRT_CRT2_LENGTH                               0x1
#define _TU16BCRT_CRT2_MASK                                 0x4
#define _TU16BCRT_CRT3_POSN                                 0x3
#define _TU16BCRT_CRT3_POSITION                             0x3
#define _TU16BCRT_CRT3_SIZE                                 0x1
#define _TU16BCRT_CRT3_LENGTH                               0x1
#define _TU16BCRT_CRT3_MASK                                 0x8
#define _TU16BCRT_CRT4_POSN                                 0x4
#define _TU16BCRT_CRT4_POSITION                             0x4
#define _TU16BCRT_CRT4_SIZE                                 0x1
#define _TU16BCRT_CRT4_LENGTH                               0x1
#define _TU16BCRT_CRT4_MASK                                 0x10
#define _TU16BCRT_CRT5_POSN                                 0x5
#define _TU16BCRT_CRT5_POSITION                             0x5
#define _TU16BCRT_CRT5_SIZE                                 0x1
#define _TU16BCRT_CRT5_LENGTH                               0x1
#define _TU16BCRT_CRT5_MASK                                 0x20
#define _TU16BCRT_CRT6_POSN                                 0x6
#define _TU16BCRT_CRT6_POSITION                             0x6
#define _TU16BCRT_CRT6_SIZE                                 0x1
#define _TU16BCRT_CRT6_LENGTH                               0x1
#define _TU16BCRT_CRT6_MASK                                 0x40
#define _TU16BCRT_CRT7_POSN                                 0x7
#define _TU16BCRT_CRT7_POSITION                             0x7
#define _TU16BCRT_CRT7_SIZE                                 0x1
#define _TU16BCRT_CRT7_LENGTH                               0x1
#define _TU16BCRT_CRT7_MASK                                 0x80
#define _TU16BCRT_TU16BCRT0_POSN                            0x0
#define _TU16BCRT_TU16BCRT0_POSITION                        0x0
#define _TU16BCRT_TU16BCRT0_SIZE                            0x1
#define _TU16BCRT_TU16BCRT0_LENGTH                          0x1
#define _TU16BCRT_TU16BCRT0_MASK                            0x1
#define _TU16BCRT_TU16BCRT1_POSN                            0x1
#define _TU16BCRT_TU16BCRT1_POSITION                        0x1
#define _TU16BCRT_TU16BCRT1_SIZE                            0x1
#define _TU16BCRT_TU16BCRT1_LENGTH                          0x1
#define _TU16BCRT_TU16BCRT1_MASK                            0x2
#define _TU16BCRT_TU16BCRT2_POSN                            0x2
#define _TU16BCRT_TU16BCRT2_POSITION                        0x2
#define _TU16BCRT_TU16BCRT2_SIZE                            0x1
#define _TU16BCRT_TU16BCRT2_LENGTH                          0x1
#define _TU16BCRT_TU16BCRT2_MASK                            0x4
#define _TU16BCRT_TU16BCRT3_POSN                            0x3
#define _TU16BCRT_TU16BCRT3_POSITION                        0x3
#define _TU16BCRT_TU16BCRT3_SIZE                            0x1
#define _TU16BCRT_TU16BCRT3_LENGTH                          0x1
#define _TU16BCRT_TU16BCRT3_MASK                            0x8
#define _TU16BCRT_TU16BCRT4_POSN                            0x4
#define _TU16BCRT_TU16BCRT4_POSITION                        0x4
#define _TU16BCRT_TU16BCRT4_SIZE                            0x1
#define _TU16BCRT_TU16BCRT4_LENGTH                          0x1
#define _TU16BCRT_TU16BCRT4_MASK                            0x10
#define _TU16BCRT_TU16BCRT5_POSN                            0x5
#define _TU16BCRT_TU16BCRT5_POSITION                        0x5
#define _TU16BCRT_TU16BCRT5_SIZE                            0x1
#define _TU16BCRT_TU16BCRT5_LENGTH                          0x1
#define _TU16BCRT_TU16BCRT5_MASK                            0x20
#define _TU16BCRT_TU16BCRT6_POSN                            0x6
#define _TU16BCRT_TU16BCRT6_POSITION                        0x6
#define _TU16BCRT_TU16BCRT6_SIZE                            0x1
#define _TU16BCRT_TU16BCRT6_LENGTH                          0x1
#define _TU16BCRT_TU16BCRT6_MASK                            0x40
#define _TU16BCRT_TU16BCRT7_POSN                            0x7
#define _TU16BCRT_TU16BCRT7_POSITION                        0x7
#define _TU16BCRT_TU16BCRT7_SIZE                            0x1
#define _TU16BCRT_TU16BCRT7_LENGTH                          0x1
#define _TU16BCRT_TU16BCRT7_MASK                            0x80
#define _TU16BCRT_TU16BCR24_POSN                            0x0
#define _TU16BCRT_TU16BCR24_POSITION                        0x0
#define _TU16BCRT_TU16BCR24_SIZE                            0x1
#define _TU16BCRT_TU16BCR24_LENGTH                          0x1
#define _TU16BCRT_TU16BCR24_MASK                            0x1
#define _TU16BCRT_TU16BCR25_POSN                            0x1
#define _TU16BCRT_TU16BCR25_POSITION                        0x1
#define _TU16BCRT_TU16BCR25_SIZE                            0x1
#define _TU16BCRT_TU16BCR25_LENGTH                          0x1
#define _TU16BCRT_TU16BCR25_MASK                            0x2
#define _TU16BCRT_TU16BCR26_POSN                            0x2
#define _TU16BCRT_TU16BCR26_POSITION                        0x2
#define _TU16BCRT_TU16BCR26_SIZE                            0x1
#define _TU16BCRT_TU16BCR26_LENGTH                          0x1
#define _TU16BCRT_TU16BCR26_MASK                            0x4
#define _TU16BCRT_TU16BCR27_POSN                            0x3
#define _TU16BCRT_TU16BCR27_POSITION                        0x3
#define _TU16BCRT_TU16BCR27_SIZE                            0x1
#define _TU16BCRT_TU16BCR27_LENGTH                          0x1
#define _TU16BCRT_TU16BCR27_MASK                            0x8
#define _TU16BCRT_TU16BCR28_POSN                            0x4
#define _TU16BCRT_TU16BCR28_POSITION                        0x4
#define _TU16BCRT_TU16BCR28_SIZE                            0x1
#define _TU16BCRT_TU16BCR28_LENGTH                          0x1
#define _TU16BCRT_TU16BCR28_MASK                            0x10
#define _TU16BCRT_TU16BCR29_POSN                            0x5
#define _TU16BCRT_TU16BCR29_POSITION                        0x5
#define _TU16BCRT_TU16BCR29_SIZE                            0x1
#define _TU16BCRT_TU16BCR29_LENGTH                          0x1
#define _TU16BCRT_TU16BCR29_MASK                            0x20
#define _TU16BCRT_TU16BCR30_POSN                            0x6
#define _TU16BCRT_TU16BCR30_POSITION                        0x6
#define _TU16BCRT_TU16BCR30_SIZE                            0x1
#define _TU16BCRT_TU16BCR30_LENGTH                          0x1
#define _TU16BCRT_TU16BCR30_MASK                            0x40
#define _TU16BCRT_TU16BCR31_POSN                            0x7
#define _TU16BCRT_TU16BCR31_POSITION                        0x7
#define _TU16BCRT_TU16BCR31_SIZE                            0x1
#define _TU16BCRT_TU16BCR31_LENGTH                          0x1
#define _TU16BCRT_TU16BCR31_MASK                            0x80

// Register: TU16BPR
#define TU16BPR TU16BPR
extern volatile unsigned long           TU16BPR             __at(0x142);
#ifndef _LIB_BUILD
asm("TU16BPR equ 0142h");
#endif

// Register: TU16BPRL
#define TU16BPRL TU16BPRL
extern volatile unsigned char           TU16BPRL            __at(0x142);
#ifndef _LIB_BUILD
asm("TU16BPRL equ 0142h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRL                    :8;
    };
    struct {
        unsigned PRL0                   :1;
        unsigned PRL1                   :1;
        unsigned PRL2                   :1;
        unsigned PRL3                   :1;
        unsigned PRL4                   :1;
        unsigned PRL5                   :1;
        unsigned PRL6                   :1;
        unsigned PRL7                   :1;
    };
    struct {
        unsigned TU16BPRL0              :1;
        unsigned TU16BPRL1              :1;
        unsigned TU16BPRL2              :1;
        unsigned TU16BPRL3              :1;
        unsigned TU16BPRL4              :1;
        unsigned TU16BPRL5              :1;
        unsigned TU16BPRL6              :1;
        unsigned TU16BPRL7              :1;
    };
    struct {
        unsigned TU16BPR0               :1;
        unsigned TU16BPR1               :1;
        unsigned TU16BPR2               :1;
        unsigned TU16BPR3               :1;
        unsigned TU16BPR4               :1;
        unsigned TU16BPR5               :1;
        unsigned TU16BPR6               :1;
        unsigned TU16BPR7               :1;
    };
} TU16BPRLbits_t;
extern volatile TU16BPRLbits_t TU16BPRLbits __at(0x142);
// bitfield macros
#define _TU16BPRL_PRL_POSN                                  0x0
#define _TU16BPRL_PRL_POSITION                              0x0
#define _TU16BPRL_PRL_SIZE                                  0x8
#define _TU16BPRL_PRL_LENGTH                                0x8
#define _TU16BPRL_PRL_MASK                                  0xFF
#define _TU16BPRL_PRL0_POSN                                 0x0
#define _TU16BPRL_PRL0_POSITION                             0x0
#define _TU16BPRL_PRL0_SIZE                                 0x1
#define _TU16BPRL_PRL0_LENGTH                               0x1
#define _TU16BPRL_PRL0_MASK                                 0x1
#define _TU16BPRL_PRL1_POSN                                 0x1
#define _TU16BPRL_PRL1_POSITION                             0x1
#define _TU16BPRL_PRL1_SIZE                                 0x1
#define _TU16BPRL_PRL1_LENGTH                               0x1
#define _TU16BPRL_PRL1_MASK                                 0x2
#define _TU16BPRL_PRL2_POSN                                 0x2
#define _TU16BPRL_PRL2_POSITION                             0x2
#define _TU16BPRL_PRL2_SIZE                                 0x1
#define _TU16BPRL_PRL2_LENGTH                               0x1
#define _TU16BPRL_PRL2_MASK                                 0x4
#define _TU16BPRL_PRL3_POSN                                 0x3
#define _TU16BPRL_PRL3_POSITION                             0x3
#define _TU16BPRL_PRL3_SIZE                                 0x1
#define _TU16BPRL_PRL3_LENGTH                               0x1
#define _TU16BPRL_PRL3_MASK                                 0x8
#define _TU16BPRL_PRL4_POSN                                 0x4
#define _TU16BPRL_PRL4_POSITION                             0x4
#define _TU16BPRL_PRL4_SIZE                                 0x1
#define _TU16BPRL_PRL4_LENGTH                               0x1
#define _TU16BPRL_PRL4_MASK                                 0x10
#define _TU16BPRL_PRL5_POSN                                 0x5
#define _TU16BPRL_PRL5_POSITION                             0x5
#define _TU16BPRL_PRL5_SIZE                                 0x1
#define _TU16BPRL_PRL5_LENGTH                               0x1
#define _TU16BPRL_PRL5_MASK                                 0x20
#define _TU16BPRL_PRL6_POSN                                 0x6
#define _TU16BPRL_PRL6_POSITION                             0x6
#define _TU16BPRL_PRL6_SIZE                                 0x1
#define _TU16BPRL_PRL6_LENGTH                               0x1
#define _TU16BPRL_PRL6_MASK                                 0x40
#define _TU16BPRL_PRL7_POSN                                 0x7
#define _TU16BPRL_PRL7_POSITION                             0x7
#define _TU16BPRL_PRL7_SIZE                                 0x1
#define _TU16BPRL_PRL7_LENGTH                               0x1
#define _TU16BPRL_PRL7_MASK                                 0x80
#define _TU16BPRL_TU16BPRL0_POSN                            0x0
#define _TU16BPRL_TU16BPRL0_POSITION                        0x0
#define _TU16BPRL_TU16BPRL0_SIZE                            0x1
#define _TU16BPRL_TU16BPRL0_LENGTH                          0x1
#define _TU16BPRL_TU16BPRL0_MASK                            0x1
#define _TU16BPRL_TU16BPRL1_POSN                            0x1
#define _TU16BPRL_TU16BPRL1_POSITION                        0x1
#define _TU16BPRL_TU16BPRL1_SIZE                            0x1
#define _TU16BPRL_TU16BPRL1_LENGTH                          0x1
#define _TU16BPRL_TU16BPRL1_MASK                            0x2
#define _TU16BPRL_TU16BPRL2_POSN                            0x2
#define _TU16BPRL_TU16BPRL2_POSITION                        0x2
#define _TU16BPRL_TU16BPRL2_SIZE                            0x1
#define _TU16BPRL_TU16BPRL2_LENGTH                          0x1
#define _TU16BPRL_TU16BPRL2_MASK                            0x4
#define _TU16BPRL_TU16BPRL3_POSN                            0x3
#define _TU16BPRL_TU16BPRL3_POSITION                        0x3
#define _TU16BPRL_TU16BPRL3_SIZE                            0x1
#define _TU16BPRL_TU16BPRL3_LENGTH                          0x1
#define _TU16BPRL_TU16BPRL3_MASK                            0x8
#define _TU16BPRL_TU16BPRL4_POSN                            0x4
#define _TU16BPRL_TU16BPRL4_POSITION                        0x4
#define _TU16BPRL_TU16BPRL4_SIZE                            0x1
#define _TU16BPRL_TU16BPRL4_LENGTH                          0x1
#define _TU16BPRL_TU16BPRL4_MASK                            0x10
#define _TU16BPRL_TU16BPRL5_POSN                            0x5
#define _TU16BPRL_TU16BPRL5_POSITION                        0x5
#define _TU16BPRL_TU16BPRL5_SIZE                            0x1
#define _TU16BPRL_TU16BPRL5_LENGTH                          0x1
#define _TU16BPRL_TU16BPRL5_MASK                            0x20
#define _TU16BPRL_TU16BPRL6_POSN                            0x6
#define _TU16BPRL_TU16BPRL6_POSITION                        0x6
#define _TU16BPRL_TU16BPRL6_SIZE                            0x1
#define _TU16BPRL_TU16BPRL6_LENGTH                          0x1
#define _TU16BPRL_TU16BPRL6_MASK                            0x40
#define _TU16BPRL_TU16BPRL7_POSN                            0x7
#define _TU16BPRL_TU16BPRL7_POSITION                        0x7
#define _TU16BPRL_TU16BPRL7_SIZE                            0x1
#define _TU16BPRL_TU16BPRL7_LENGTH                          0x1
#define _TU16BPRL_TU16BPRL7_MASK                            0x80
#define _TU16BPRL_TU16BPR0_POSN                             0x0
#define _TU16BPRL_TU16BPR0_POSITION                         0x0
#define _TU16BPRL_TU16BPR0_SIZE                             0x1
#define _TU16BPRL_TU16BPR0_LENGTH                           0x1
#define _TU16BPRL_TU16BPR0_MASK                             0x1
#define _TU16BPRL_TU16BPR1_POSN                             0x1
#define _TU16BPRL_TU16BPR1_POSITION                         0x1
#define _TU16BPRL_TU16BPR1_SIZE                             0x1
#define _TU16BPRL_TU16BPR1_LENGTH                           0x1
#define _TU16BPRL_TU16BPR1_MASK                             0x2
#define _TU16BPRL_TU16BPR2_POSN                             0x2
#define _TU16BPRL_TU16BPR2_POSITION                         0x2
#define _TU16BPRL_TU16BPR2_SIZE                             0x1
#define _TU16BPRL_TU16BPR2_LENGTH                           0x1
#define _TU16BPRL_TU16BPR2_MASK                             0x4
#define _TU16BPRL_TU16BPR3_POSN                             0x3
#define _TU16BPRL_TU16BPR3_POSITION                         0x3
#define _TU16BPRL_TU16BPR3_SIZE                             0x1
#define _TU16BPRL_TU16BPR3_LENGTH                           0x1
#define _TU16BPRL_TU16BPR3_MASK                             0x8
#define _TU16BPRL_TU16BPR4_POSN                             0x4
#define _TU16BPRL_TU16BPR4_POSITION                         0x4
#define _TU16BPRL_TU16BPR4_SIZE                             0x1
#define _TU16BPRL_TU16BPR4_LENGTH                           0x1
#define _TU16BPRL_TU16BPR4_MASK                             0x10
#define _TU16BPRL_TU16BPR5_POSN                             0x5
#define _TU16BPRL_TU16BPR5_POSITION                         0x5
#define _TU16BPRL_TU16BPR5_SIZE                             0x1
#define _TU16BPRL_TU16BPR5_LENGTH                           0x1
#define _TU16BPRL_TU16BPR5_MASK                             0x20
#define _TU16BPRL_TU16BPR6_POSN                             0x6
#define _TU16BPRL_TU16BPR6_POSITION                         0x6
#define _TU16BPRL_TU16BPR6_SIZE                             0x1
#define _TU16BPRL_TU16BPR6_LENGTH                           0x1
#define _TU16BPRL_TU16BPR6_MASK                             0x40
#define _TU16BPRL_TU16BPR7_POSN                             0x7
#define _TU16BPRL_TU16BPR7_POSITION                         0x7
#define _TU16BPRL_TU16BPR7_SIZE                             0x1
#define _TU16BPRL_TU16BPR7_LENGTH                           0x1
#define _TU16BPRL_TU16BPR7_MASK                             0x80

// Register: TU16BPRH
#define TU16BPRH TU16BPRH
extern volatile unsigned char           TU16BPRH            __at(0x143);
#ifndef _LIB_BUILD
asm("TU16BPRH equ 0143h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRH                    :8;
    };
    struct {
        unsigned PRH0                   :1;
        unsigned PRH1                   :1;
        unsigned PRH2                   :1;
        unsigned PRH3                   :1;
        unsigned PRH4                   :1;
        unsigned PRH5                   :1;
        unsigned PRH6                   :1;
        unsigned PRH7                   :1;
    };
    struct {
        unsigned TU16BPRH0              :1;
        unsigned TU16BPRH1              :1;
        unsigned TU16BPRH2              :1;
        unsigned TU16BPRH3              :1;
        unsigned TU16BPRH4              :1;
        unsigned TU16BPRH5              :1;
        unsigned TU16BPRH6              :1;
        unsigned TU16BPRH7              :1;
    };
    struct {
        unsigned TU16BPR8               :1;
        unsigned TU16BPR9               :1;
        unsigned TU16BPR10              :1;
        unsigned TU16BPR11              :1;
        unsigned TU16BPR12              :1;
        unsigned TU16BPR13              :1;
        unsigned TU16BPR14              :1;
        unsigned TU16BPR15              :1;
    };
} TU16BPRHbits_t;
extern volatile TU16BPRHbits_t TU16BPRHbits __at(0x143);
// bitfield macros
#define _TU16BPRH_PRH_POSN                                  0x0
#define _TU16BPRH_PRH_POSITION                              0x0
#define _TU16BPRH_PRH_SIZE                                  0x8
#define _TU16BPRH_PRH_LENGTH                                0x8
#define _TU16BPRH_PRH_MASK                                  0xFF
#define _TU16BPRH_PRH0_POSN                                 0x0
#define _TU16BPRH_PRH0_POSITION                             0x0
#define _TU16BPRH_PRH0_SIZE                                 0x1
#define _TU16BPRH_PRH0_LENGTH                               0x1
#define _TU16BPRH_PRH0_MASK                                 0x1
#define _TU16BPRH_PRH1_POSN                                 0x1
#define _TU16BPRH_PRH1_POSITION                             0x1
#define _TU16BPRH_PRH1_SIZE                                 0x1
#define _TU16BPRH_PRH1_LENGTH                               0x1
#define _TU16BPRH_PRH1_MASK                                 0x2
#define _TU16BPRH_PRH2_POSN                                 0x2
#define _TU16BPRH_PRH2_POSITION                             0x2
#define _TU16BPRH_PRH2_SIZE                                 0x1
#define _TU16BPRH_PRH2_LENGTH                               0x1
#define _TU16BPRH_PRH2_MASK                                 0x4
#define _TU16BPRH_PRH3_POSN                                 0x3
#define _TU16BPRH_PRH3_POSITION                             0x3
#define _TU16BPRH_PRH3_SIZE                                 0x1
#define _TU16BPRH_PRH3_LENGTH                               0x1
#define _TU16BPRH_PRH3_MASK                                 0x8
#define _TU16BPRH_PRH4_POSN                                 0x4
#define _TU16BPRH_PRH4_POSITION                             0x4
#define _TU16BPRH_PRH4_SIZE                                 0x1
#define _TU16BPRH_PRH4_LENGTH                               0x1
#define _TU16BPRH_PRH4_MASK                                 0x10
#define _TU16BPRH_PRH5_POSN                                 0x5
#define _TU16BPRH_PRH5_POSITION                             0x5
#define _TU16BPRH_PRH5_SIZE                                 0x1
#define _TU16BPRH_PRH5_LENGTH                               0x1
#define _TU16BPRH_PRH5_MASK                                 0x20
#define _TU16BPRH_PRH6_POSN                                 0x6
#define _TU16BPRH_PRH6_POSITION                             0x6
#define _TU16BPRH_PRH6_SIZE                                 0x1
#define _TU16BPRH_PRH6_LENGTH                               0x1
#define _TU16BPRH_PRH6_MASK                                 0x40
#define _TU16BPRH_PRH7_POSN                                 0x7
#define _TU16BPRH_PRH7_POSITION                             0x7
#define _TU16BPRH_PRH7_SIZE                                 0x1
#define _TU16BPRH_PRH7_LENGTH                               0x1
#define _TU16BPRH_PRH7_MASK                                 0x80
#define _TU16BPRH_TU16BPRH0_POSN                            0x0
#define _TU16BPRH_TU16BPRH0_POSITION                        0x0
#define _TU16BPRH_TU16BPRH0_SIZE                            0x1
#define _TU16BPRH_TU16BPRH0_LENGTH                          0x1
#define _TU16BPRH_TU16BPRH0_MASK                            0x1
#define _TU16BPRH_TU16BPRH1_POSN                            0x1
#define _TU16BPRH_TU16BPRH1_POSITION                        0x1
#define _TU16BPRH_TU16BPRH1_SIZE                            0x1
#define _TU16BPRH_TU16BPRH1_LENGTH                          0x1
#define _TU16BPRH_TU16BPRH1_MASK                            0x2
#define _TU16BPRH_TU16BPRH2_POSN                            0x2
#define _TU16BPRH_TU16BPRH2_POSITION                        0x2
#define _TU16BPRH_TU16BPRH2_SIZE                            0x1
#define _TU16BPRH_TU16BPRH2_LENGTH                          0x1
#define _TU16BPRH_TU16BPRH2_MASK                            0x4
#define _TU16BPRH_TU16BPRH3_POSN                            0x3
#define _TU16BPRH_TU16BPRH3_POSITION                        0x3
#define _TU16BPRH_TU16BPRH3_SIZE                            0x1
#define _TU16BPRH_TU16BPRH3_LENGTH                          0x1
#define _TU16BPRH_TU16BPRH3_MASK                            0x8
#define _TU16BPRH_TU16BPRH4_POSN                            0x4
#define _TU16BPRH_TU16BPRH4_POSITION                        0x4
#define _TU16BPRH_TU16BPRH4_SIZE                            0x1
#define _TU16BPRH_TU16BPRH4_LENGTH                          0x1
#define _TU16BPRH_TU16BPRH4_MASK                            0x10
#define _TU16BPRH_TU16BPRH5_POSN                            0x5
#define _TU16BPRH_TU16BPRH5_POSITION                        0x5
#define _TU16BPRH_TU16BPRH5_SIZE                            0x1
#define _TU16BPRH_TU16BPRH5_LENGTH                          0x1
#define _TU16BPRH_TU16BPRH5_MASK                            0x20
#define _TU16BPRH_TU16BPRH6_POSN                            0x6
#define _TU16BPRH_TU16BPRH6_POSITION                        0x6
#define _TU16BPRH_TU16BPRH6_SIZE                            0x1
#define _TU16BPRH_TU16BPRH6_LENGTH                          0x1
#define _TU16BPRH_TU16BPRH6_MASK                            0x40
#define _TU16BPRH_TU16BPRH7_POSN                            0x7
#define _TU16BPRH_TU16BPRH7_POSITION                        0x7
#define _TU16BPRH_TU16BPRH7_SIZE                            0x1
#define _TU16BPRH_TU16BPRH7_LENGTH                          0x1
#define _TU16BPRH_TU16BPRH7_MASK                            0x80
#define _TU16BPRH_TU16BPR8_POSN                             0x0
#define _TU16BPRH_TU16BPR8_POSITION                         0x0
#define _TU16BPRH_TU16BPR8_SIZE                             0x1
#define _TU16BPRH_TU16BPR8_LENGTH                           0x1
#define _TU16BPRH_TU16BPR8_MASK                             0x1
#define _TU16BPRH_TU16BPR9_POSN                             0x1
#define _TU16BPRH_TU16BPR9_POSITION                         0x1
#define _TU16BPRH_TU16BPR9_SIZE                             0x1
#define _TU16BPRH_TU16BPR9_LENGTH                           0x1
#define _TU16BPRH_TU16BPR9_MASK                             0x2
#define _TU16BPRH_TU16BPR10_POSN                            0x2
#define _TU16BPRH_TU16BPR10_POSITION                        0x2
#define _TU16BPRH_TU16BPR10_SIZE                            0x1
#define _TU16BPRH_TU16BPR10_LENGTH                          0x1
#define _TU16BPRH_TU16BPR10_MASK                            0x4
#define _TU16BPRH_TU16BPR11_POSN                            0x3
#define _TU16BPRH_TU16BPR11_POSITION                        0x3
#define _TU16BPRH_TU16BPR11_SIZE                            0x1
#define _TU16BPRH_TU16BPR11_LENGTH                          0x1
#define _TU16BPRH_TU16BPR11_MASK                            0x8
#define _TU16BPRH_TU16BPR12_POSN                            0x4
#define _TU16BPRH_TU16BPR12_POSITION                        0x4
#define _TU16BPRH_TU16BPR12_SIZE                            0x1
#define _TU16BPRH_TU16BPR12_LENGTH                          0x1
#define _TU16BPRH_TU16BPR12_MASK                            0x10
#define _TU16BPRH_TU16BPR13_POSN                            0x5
#define _TU16BPRH_TU16BPR13_POSITION                        0x5
#define _TU16BPRH_TU16BPR13_SIZE                            0x1
#define _TU16BPRH_TU16BPR13_LENGTH                          0x1
#define _TU16BPRH_TU16BPR13_MASK                            0x20
#define _TU16BPRH_TU16BPR14_POSN                            0x6
#define _TU16BPRH_TU16BPR14_POSITION                        0x6
#define _TU16BPRH_TU16BPR14_SIZE                            0x1
#define _TU16BPRH_TU16BPR14_LENGTH                          0x1
#define _TU16BPRH_TU16BPR14_MASK                            0x40
#define _TU16BPRH_TU16BPR15_POSN                            0x7
#define _TU16BPRH_TU16BPR15_POSITION                        0x7
#define _TU16BPRH_TU16BPR15_SIZE                            0x1
#define _TU16BPRH_TU16BPR15_LENGTH                          0x1
#define _TU16BPRH_TU16BPR15_MASK                            0x80

// Register: TU16BPRT
#define TU16BPRT TU16BPRT
extern volatile unsigned char           TU16BPRT            __at(0x145);
#ifndef _LIB_BUILD
asm("TU16BPRT equ 0145h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRT                    :8;
    };
    struct {
        unsigned PRT0                   :1;
        unsigned PRT1                   :1;
        unsigned PRT2                   :1;
        unsigned PRT3                   :1;
        unsigned PRT4                   :1;
        unsigned PRT5                   :1;
        unsigned PRT6                   :1;
        unsigned PRT7                   :1;
    };
    struct {
        unsigned TU16BPRT0              :1;
        unsigned TU16BPRT1              :1;
        unsigned TU16BPRT2              :1;
        unsigned TU16BPRT3              :1;
        unsigned TU16BPRT4              :1;
        unsigned TU16BPRT5              :1;
        unsigned TU16BPRT6              :1;
        unsigned TU16BPRT7              :1;
    };
    struct {
        unsigned TU16BPR24              :1;
        unsigned TU16BPR25              :1;
        unsigned TU16BPR26              :1;
        unsigned TU16BPR27              :1;
        unsigned TU16BPR28              :1;
        unsigned TU16BPR29              :1;
        unsigned TU16BPR30              :1;
        unsigned TU16BPR31              :1;
    };
} TU16BPRTbits_t;
extern volatile TU16BPRTbits_t TU16BPRTbits __at(0x145);
// bitfield macros
#define _TU16BPRT_PRT_POSN                                  0x0
#define _TU16BPRT_PRT_POSITION                              0x0
#define _TU16BPRT_PRT_SIZE                                  0x8
#define _TU16BPRT_PRT_LENGTH                                0x8
#define _TU16BPRT_PRT_MASK                                  0xFF
#define _TU16BPRT_PRT0_POSN                                 0x0
#define _TU16BPRT_PRT0_POSITION                             0x0
#define _TU16BPRT_PRT0_SIZE                                 0x1
#define _TU16BPRT_PRT0_LENGTH                               0x1
#define _TU16BPRT_PRT0_MASK                                 0x1
#define _TU16BPRT_PRT1_POSN                                 0x1
#define _TU16BPRT_PRT1_POSITION                             0x1
#define _TU16BPRT_PRT1_SIZE                                 0x1
#define _TU16BPRT_PRT1_LENGTH                               0x1
#define _TU16BPRT_PRT1_MASK                                 0x2
#define _TU16BPRT_PRT2_POSN                                 0x2
#define _TU16BPRT_PRT2_POSITION                             0x2
#define _TU16BPRT_PRT2_SIZE                                 0x1
#define _TU16BPRT_PRT2_LENGTH                               0x1
#define _TU16BPRT_PRT2_MASK                                 0x4
#define _TU16BPRT_PRT3_POSN                                 0x3
#define _TU16BPRT_PRT3_POSITION                             0x3
#define _TU16BPRT_PRT3_SIZE                                 0x1
#define _TU16BPRT_PRT3_LENGTH                               0x1
#define _TU16BPRT_PRT3_MASK                                 0x8
#define _TU16BPRT_PRT4_POSN                                 0x4
#define _TU16BPRT_PRT4_POSITION                             0x4
#define _TU16BPRT_PRT4_SIZE                                 0x1
#define _TU16BPRT_PRT4_LENGTH                               0x1
#define _TU16BPRT_PRT4_MASK                                 0x10
#define _TU16BPRT_PRT5_POSN                                 0x5
#define _TU16BPRT_PRT5_POSITION                             0x5
#define _TU16BPRT_PRT5_SIZE                                 0x1
#define _TU16BPRT_PRT5_LENGTH                               0x1
#define _TU16BPRT_PRT5_MASK                                 0x20
#define _TU16BPRT_PRT6_POSN                                 0x6
#define _TU16BPRT_PRT6_POSITION                             0x6
#define _TU16BPRT_PRT6_SIZE                                 0x1
#define _TU16BPRT_PRT6_LENGTH                               0x1
#define _TU16BPRT_PRT6_MASK                                 0x40
#define _TU16BPRT_PRT7_POSN                                 0x7
#define _TU16BPRT_PRT7_POSITION                             0x7
#define _TU16BPRT_PRT7_SIZE                                 0x1
#define _TU16BPRT_PRT7_LENGTH                               0x1
#define _TU16BPRT_PRT7_MASK                                 0x80
#define _TU16BPRT_TU16BPRT0_POSN                            0x0
#define _TU16BPRT_TU16BPRT0_POSITION                        0x0
#define _TU16BPRT_TU16BPRT0_SIZE                            0x1
#define _TU16BPRT_TU16BPRT0_LENGTH                          0x1
#define _TU16BPRT_TU16BPRT0_MASK                            0x1
#define _TU16BPRT_TU16BPRT1_POSN                            0x1
#define _TU16BPRT_TU16BPRT1_POSITION                        0x1
#define _TU16BPRT_TU16BPRT1_SIZE                            0x1
#define _TU16BPRT_TU16BPRT1_LENGTH                          0x1
#define _TU16BPRT_TU16BPRT1_MASK                            0x2
#define _TU16BPRT_TU16BPRT2_POSN                            0x2
#define _TU16BPRT_TU16BPRT2_POSITION                        0x2
#define _TU16BPRT_TU16BPRT2_SIZE                            0x1
#define _TU16BPRT_TU16BPRT2_LENGTH                          0x1
#define _TU16BPRT_TU16BPRT2_MASK                            0x4
#define _TU16BPRT_TU16BPRT3_POSN                            0x3
#define _TU16BPRT_TU16BPRT3_POSITION                        0x3
#define _TU16BPRT_TU16BPRT3_SIZE                            0x1
#define _TU16BPRT_TU16BPRT3_LENGTH                          0x1
#define _TU16BPRT_TU16BPRT3_MASK                            0x8
#define _TU16BPRT_TU16BPRT4_POSN                            0x4
#define _TU16BPRT_TU16BPRT4_POSITION                        0x4
#define _TU16BPRT_TU16BPRT4_SIZE                            0x1
#define _TU16BPRT_TU16BPRT4_LENGTH                          0x1
#define _TU16BPRT_TU16BPRT4_MASK                            0x10
#define _TU16BPRT_TU16BPRT5_POSN                            0x5
#define _TU16BPRT_TU16BPRT5_POSITION                        0x5
#define _TU16BPRT_TU16BPRT5_SIZE                            0x1
#define _TU16BPRT_TU16BPRT5_LENGTH                          0x1
#define _TU16BPRT_TU16BPRT5_MASK                            0x20
#define _TU16BPRT_TU16BPRT6_POSN                            0x6
#define _TU16BPRT_TU16BPRT6_POSITION                        0x6
#define _TU16BPRT_TU16BPRT6_SIZE                            0x1
#define _TU16BPRT_TU16BPRT6_LENGTH                          0x1
#define _TU16BPRT_TU16BPRT6_MASK                            0x40
#define _TU16BPRT_TU16BPRT7_POSN                            0x7
#define _TU16BPRT_TU16BPRT7_POSITION                        0x7
#define _TU16BPRT_TU16BPRT7_SIZE                            0x1
#define _TU16BPRT_TU16BPRT7_LENGTH                          0x1
#define _TU16BPRT_TU16BPRT7_MASK                            0x80
#define _TU16BPRT_TU16BPR24_POSN                            0x0
#define _TU16BPRT_TU16BPR24_POSITION                        0x0
#define _TU16BPRT_TU16BPR24_SIZE                            0x1
#define _TU16BPRT_TU16BPR24_LENGTH                          0x1
#define _TU16BPRT_TU16BPR24_MASK                            0x1
#define _TU16BPRT_TU16BPR25_POSN                            0x1
#define _TU16BPRT_TU16BPR25_POSITION                        0x1
#define _TU16BPRT_TU16BPR25_SIZE                            0x1
#define _TU16BPRT_TU16BPR25_LENGTH                          0x1
#define _TU16BPRT_TU16BPR25_MASK                            0x2
#define _TU16BPRT_TU16BPR26_POSN                            0x2
#define _TU16BPRT_TU16BPR26_POSITION                        0x2
#define _TU16BPRT_TU16BPR26_SIZE                            0x1
#define _TU16BPRT_TU16BPR26_LENGTH                          0x1
#define _TU16BPRT_TU16BPR26_MASK                            0x4
#define _TU16BPRT_TU16BPR27_POSN                            0x3
#define _TU16BPRT_TU16BPR27_POSITION                        0x3
#define _TU16BPRT_TU16BPR27_SIZE                            0x1
#define _TU16BPRT_TU16BPR27_LENGTH                          0x1
#define _TU16BPRT_TU16BPR27_MASK                            0x8
#define _TU16BPRT_TU16BPR28_POSN                            0x4
#define _TU16BPRT_TU16BPR28_POSITION                        0x4
#define _TU16BPRT_TU16BPR28_SIZE                            0x1
#define _TU16BPRT_TU16BPR28_LENGTH                          0x1
#define _TU16BPRT_TU16BPR28_MASK                            0x10
#define _TU16BPRT_TU16BPR29_POSN                            0x5
#define _TU16BPRT_TU16BPR29_POSITION                        0x5
#define _TU16BPRT_TU16BPR29_SIZE                            0x1
#define _TU16BPRT_TU16BPR29_LENGTH                          0x1
#define _TU16BPRT_TU16BPR29_MASK                            0x20
#define _TU16BPRT_TU16BPR30_POSN                            0x6
#define _TU16BPRT_TU16BPR30_POSITION                        0x6
#define _TU16BPRT_TU16BPR30_SIZE                            0x1
#define _TU16BPRT_TU16BPR30_LENGTH                          0x1
#define _TU16BPRT_TU16BPR30_MASK                            0x40
#define _TU16BPRT_TU16BPR31_POSN                            0x7
#define _TU16BPRT_TU16BPR31_POSITION                        0x7
#define _TU16BPRT_TU16BPR31_SIZE                            0x1
#define _TU16BPRT_TU16BPR31_LENGTH                          0x1
#define _TU16BPRT_TU16BPR31_MASK                            0x80

// Register: TU16BCLK
#define TU16BCLK TU16BCLK
extern volatile unsigned char           TU16BCLK            __at(0x146);
#ifndef _LIB_BUILD
asm("TU16BCLK equ 0146h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLK                    :8;
    };
    struct {
        unsigned CLK0                   :1;
        unsigned CLK1                   :1;
        unsigned CLK2                   :1;
        unsigned CLK3                   :1;
        unsigned CLK4                   :1;
    };
    struct {
        unsigned TU16BCLK0              :1;
        unsigned TU16BCLK1              :1;
        unsigned TU16BCLK2              :1;
        unsigned TU16BCLK3              :1;
        unsigned TU16BCLK4              :1;
    };
} TU16BCLKbits_t;
extern volatile TU16BCLKbits_t TU16BCLKbits __at(0x146);
// bitfield macros
#define _TU16BCLK_CLK_POSN                                  0x0
#define _TU16BCLK_CLK_POSITION                              0x0
#define _TU16BCLK_CLK_SIZE                                  0x8
#define _TU16BCLK_CLK_LENGTH                                0x8
#define _TU16BCLK_CLK_MASK                                  0xFF
#define _TU16BCLK_CLK0_POSN                                 0x0
#define _TU16BCLK_CLK0_POSITION                             0x0
#define _TU16BCLK_CLK0_SIZE                                 0x1
#define _TU16BCLK_CLK0_LENGTH                               0x1
#define _TU16BCLK_CLK0_MASK                                 0x1
#define _TU16BCLK_CLK1_POSN                                 0x1
#define _TU16BCLK_CLK1_POSITION                             0x1
#define _TU16BCLK_CLK1_SIZE                                 0x1
#define _TU16BCLK_CLK1_LENGTH                               0x1
#define _TU16BCLK_CLK1_MASK                                 0x2
#define _TU16BCLK_CLK2_POSN                                 0x2
#define _TU16BCLK_CLK2_POSITION                             0x2
#define _TU16BCLK_CLK2_SIZE                                 0x1
#define _TU16BCLK_CLK2_LENGTH                               0x1
#define _TU16BCLK_CLK2_MASK                                 0x4
#define _TU16BCLK_CLK3_POSN                                 0x3
#define _TU16BCLK_CLK3_POSITION                             0x3
#define _TU16BCLK_CLK3_SIZE                                 0x1
#define _TU16BCLK_CLK3_LENGTH                               0x1
#define _TU16BCLK_CLK3_MASK                                 0x8
#define _TU16BCLK_CLK4_POSN                                 0x4
#define _TU16BCLK_CLK4_POSITION                             0x4
#define _TU16BCLK_CLK4_SIZE                                 0x1
#define _TU16BCLK_CLK4_LENGTH                               0x1
#define _TU16BCLK_CLK4_MASK                                 0x10
#define _TU16BCLK_TU16BCLK0_POSN                            0x0
#define _TU16BCLK_TU16BCLK0_POSITION                        0x0
#define _TU16BCLK_TU16BCLK0_SIZE                            0x1
#define _TU16BCLK_TU16BCLK0_LENGTH                          0x1
#define _TU16BCLK_TU16BCLK0_MASK                            0x1
#define _TU16BCLK_TU16BCLK1_POSN                            0x1
#define _TU16BCLK_TU16BCLK1_POSITION                        0x1
#define _TU16BCLK_TU16BCLK1_SIZE                            0x1
#define _TU16BCLK_TU16BCLK1_LENGTH                          0x1
#define _TU16BCLK_TU16BCLK1_MASK                            0x2
#define _TU16BCLK_TU16BCLK2_POSN                            0x2
#define _TU16BCLK_TU16BCLK2_POSITION                        0x2
#define _TU16BCLK_TU16BCLK2_SIZE                            0x1
#define _TU16BCLK_TU16BCLK2_LENGTH                          0x1
#define _TU16BCLK_TU16BCLK2_MASK                            0x4
#define _TU16BCLK_TU16BCLK3_POSN                            0x3
#define _TU16BCLK_TU16BCLK3_POSITION                        0x3
#define _TU16BCLK_TU16BCLK3_SIZE                            0x1
#define _TU16BCLK_TU16BCLK3_LENGTH                          0x1
#define _TU16BCLK_TU16BCLK3_MASK                            0x8
#define _TU16BCLK_TU16BCLK4_POSN                            0x4
#define _TU16BCLK_TU16BCLK4_POSITION                        0x4
#define _TU16BCLK_TU16BCLK4_SIZE                            0x1
#define _TU16BCLK_TU16BCLK4_LENGTH                          0x1
#define _TU16BCLK_TU16BCLK4_MASK                            0x10

// Register: TU16BERS
#define TU16BERS TU16BERS
extern volatile unsigned char           TU16BERS            __at(0x147);
#ifndef _LIB_BUILD
asm("TU16BERS equ 0147h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERS                    :8;
    };
    struct {
        unsigned ERS0                   :1;
        unsigned ERS1                   :1;
        unsigned ERS2                   :1;
        unsigned ERS3                   :1;
        unsigned ERS4                   :1;
        unsigned ERS5                   :1;
    };
    struct {
        unsigned TU16BERS0              :1;
        unsigned TU16BERS1              :1;
        unsigned TU16BERS2              :1;
        unsigned TU16BERS3              :1;
        unsigned TU16BERS4              :1;
        unsigned TU16BERS5              :1;
    };
} TU16BERSbits_t;
extern volatile TU16BERSbits_t TU16BERSbits __at(0x147);
// bitfield macros
#define _TU16BERS_ERS_POSN                                  0x0
#define _TU16BERS_ERS_POSITION                              0x0
#define _TU16BERS_ERS_SIZE                                  0x8
#define _TU16BERS_ERS_LENGTH                                0x8
#define _TU16BERS_ERS_MASK                                  0xFF
#define _TU16BERS_ERS0_POSN                                 0x0
#define _TU16BERS_ERS0_POSITION                             0x0
#define _TU16BERS_ERS0_SIZE                                 0x1
#define _TU16BERS_ERS0_LENGTH                               0x1
#define _TU16BERS_ERS0_MASK                                 0x1
#define _TU16BERS_ERS1_POSN                                 0x1
#define _TU16BERS_ERS1_POSITION                             0x1
#define _TU16BERS_ERS1_SIZE                                 0x1
#define _TU16BERS_ERS1_LENGTH                               0x1
#define _TU16BERS_ERS1_MASK                                 0x2
#define _TU16BERS_ERS2_POSN                                 0x2
#define _TU16BERS_ERS2_POSITION                             0x2
#define _TU16BERS_ERS2_SIZE                                 0x1
#define _TU16BERS_ERS2_LENGTH                               0x1
#define _TU16BERS_ERS2_MASK                                 0x4
#define _TU16BERS_ERS3_POSN                                 0x3
#define _TU16BERS_ERS3_POSITION                             0x3
#define _TU16BERS_ERS3_SIZE                                 0x1
#define _TU16BERS_ERS3_LENGTH                               0x1
#define _TU16BERS_ERS3_MASK                                 0x8
#define _TU16BERS_ERS4_POSN                                 0x4
#define _TU16BERS_ERS4_POSITION                             0x4
#define _TU16BERS_ERS4_SIZE                                 0x1
#define _TU16BERS_ERS4_LENGTH                               0x1
#define _TU16BERS_ERS4_MASK                                 0x10
#define _TU16BERS_ERS5_POSN                                 0x5
#define _TU16BERS_ERS5_POSITION                             0x5
#define _TU16BERS_ERS5_SIZE                                 0x1
#define _TU16BERS_ERS5_LENGTH                               0x1
#define _TU16BERS_ERS5_MASK                                 0x20
#define _TU16BERS_TU16BERS0_POSN                            0x0
#define _TU16BERS_TU16BERS0_POSITION                        0x0
#define _TU16BERS_TU16BERS0_SIZE                            0x1
#define _TU16BERS_TU16BERS0_LENGTH                          0x1
#define _TU16BERS_TU16BERS0_MASK                            0x1
#define _TU16BERS_TU16BERS1_POSN                            0x1
#define _TU16BERS_TU16BERS1_POSITION                        0x1
#define _TU16BERS_TU16BERS1_SIZE                            0x1
#define _TU16BERS_TU16BERS1_LENGTH                          0x1
#define _TU16BERS_TU16BERS1_MASK                            0x2
#define _TU16BERS_TU16BERS2_POSN                            0x2
#define _TU16BERS_TU16BERS2_POSITION                        0x2
#define _TU16BERS_TU16BERS2_SIZE                            0x1
#define _TU16BERS_TU16BERS2_LENGTH                          0x1
#define _TU16BERS_TU16BERS2_MASK                            0x4
#define _TU16BERS_TU16BERS3_POSN                            0x3
#define _TU16BERS_TU16BERS3_POSITION                        0x3
#define _TU16BERS_TU16BERS3_SIZE                            0x1
#define _TU16BERS_TU16BERS3_LENGTH                          0x1
#define _TU16BERS_TU16BERS3_MASK                            0x8
#define _TU16BERS_TU16BERS4_POSN                            0x4
#define _TU16BERS_TU16BERS4_POSITION                        0x4
#define _TU16BERS_TU16BERS4_SIZE                            0x1
#define _TU16BERS_TU16BERS4_LENGTH                          0x1
#define _TU16BERS_TU16BERS4_MASK                            0x10
#define _TU16BERS_TU16BERS5_POSN                            0x5
#define _TU16BERS_TU16BERS5_POSITION                        0x5
#define _TU16BERS_TU16BERS5_SIZE                            0x1
#define _TU16BERS_TU16BERS5_LENGTH                          0x1
#define _TU16BERS_TU16BERS5_MASK                            0x20

// Register: CCPTMRS0
#define CCPTMRS0 CCPTMRS0
extern volatile unsigned char           CCPTMRS0            __at(0x148);
#ifndef _LIB_BUILD
asm("CCPTMRS0 equ 0148h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C1TSEL                 :2;
        unsigned C2TSEL                 :2;
    };
    struct {
        unsigned C1TSEL0                :1;
        unsigned C1TSEL1                :1;
        unsigned C2TSEL2                :1;
        unsigned C2TSEL3                :1;
    };
} CCPTMRS0bits_t;
extern volatile CCPTMRS0bits_t CCPTMRS0bits __at(0x148);
// bitfield macros
#define _CCPTMRS0_C1TSEL_POSN                               0x0
#define _CCPTMRS0_C1TSEL_POSITION                           0x0
#define _CCPTMRS0_C1TSEL_SIZE                               0x2
#define _CCPTMRS0_C1TSEL_LENGTH                             0x2
#define _CCPTMRS0_C1TSEL_MASK                               0x3
#define _CCPTMRS0_C2TSEL_POSN                               0x2
#define _CCPTMRS0_C2TSEL_POSITION                           0x2
#define _CCPTMRS0_C2TSEL_SIZE                               0x2
#define _CCPTMRS0_C2TSEL_LENGTH                             0x2
#define _CCPTMRS0_C2TSEL_MASK                               0xC
#define _CCPTMRS0_C1TSEL0_POSN                              0x0
#define _CCPTMRS0_C1TSEL0_POSITION                          0x0
#define _CCPTMRS0_C1TSEL0_SIZE                              0x1
#define _CCPTMRS0_C1TSEL0_LENGTH                            0x1
#define _CCPTMRS0_C1TSEL0_MASK                              0x1
#define _CCPTMRS0_C1TSEL1_POSN                              0x1
#define _CCPTMRS0_C1TSEL1_POSITION                          0x1
#define _CCPTMRS0_C1TSEL1_SIZE                              0x1
#define _CCPTMRS0_C1TSEL1_LENGTH                            0x1
#define _CCPTMRS0_C1TSEL1_MASK                              0x2
#define _CCPTMRS0_C2TSEL2_POSN                              0x2
#define _CCPTMRS0_C2TSEL2_POSITION                          0x2
#define _CCPTMRS0_C2TSEL2_SIZE                              0x1
#define _CCPTMRS0_C2TSEL2_LENGTH                            0x1
#define _CCPTMRS0_C2TSEL2_MASK                              0x4
#define _CCPTMRS0_C2TSEL3_POSN                              0x3
#define _CCPTMRS0_C2TSEL3_POSITION                          0x3
#define _CCPTMRS0_C2TSEL3_SIZE                              0x1
#define _CCPTMRS0_C2TSEL3_LENGTH                            0x1
#define _CCPTMRS0_C2TSEL3_MASK                              0x8

// Register: CCPR1
#define CCPR1 CCPR1
extern volatile unsigned short          CCPR1               __at(0x149);
#ifndef _LIB_BUILD
asm("CCPR1 equ 0149h");
#endif

// Register: CCPR1L
#define CCPR1L CCPR1L
extern volatile unsigned char           CCPR1L              __at(0x149);
#ifndef _LIB_BUILD
asm("CCPR1L equ 0149h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR1Lbits_t;
extern volatile CCPR1Lbits_t CCPR1Lbits __at(0x149);
// bitfield macros
#define _CCPR1L_RL_POSN                                     0x0
#define _CCPR1L_RL_POSITION                                 0x0
#define _CCPR1L_RL_SIZE                                     0x8
#define _CCPR1L_RL_LENGTH                                   0x8
#define _CCPR1L_RL_MASK                                     0xFF

// Register: CCPR1H
#define CCPR1H CCPR1H
extern volatile unsigned char           CCPR1H              __at(0x14A);
#ifndef _LIB_BUILD
asm("CCPR1H equ 014Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR1Hbits_t;
extern volatile CCPR1Hbits_t CCPR1Hbits __at(0x14A);
// bitfield macros
#define _CCPR1H_RH_POSN                                     0x0
#define _CCPR1H_RH_POSITION                                 0x0
#define _CCPR1H_RH_SIZE                                     0x8
#define _CCPR1H_RH_LENGTH                                   0x8
#define _CCPR1H_RH_MASK                                     0xFF

// Register: CCP1CON
#define CCP1CON CCP1CON
extern volatile unsigned char           CCP1CON             __at(0x14B);
#ifndef _LIB_BUILD
asm("CCP1CON equ 014Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP1MODE               :4;
        unsigned CCP1FMT                :1;
        unsigned CCP1OUT                :1;
        unsigned                        :1;
        unsigned CCP1EN                 :1;
    };
    struct {
        unsigned CCP1MODE0              :1;
        unsigned CCP1MODE1              :1;
        unsigned CCP1MODE2              :1;
        unsigned CCP1MODE3              :1;
    };
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits __at(0x14B);
// bitfield macros
#define _CCP1CON_MODE_POSN                                  0x0
#define _CCP1CON_MODE_POSITION                              0x0
#define _CCP1CON_MODE_SIZE                                  0x4
#define _CCP1CON_MODE_LENGTH                                0x4
#define _CCP1CON_MODE_MASK                                  0xF
#define _CCP1CON_FMT_POSN                                   0x4
#define _CCP1CON_FMT_POSITION                               0x4
#define _CCP1CON_FMT_SIZE                                   0x1
#define _CCP1CON_FMT_LENGTH                                 0x1
#define _CCP1CON_FMT_MASK                                   0x10
#define _CCP1CON_OUT_POSN                                   0x5
#define _CCP1CON_OUT_POSITION                               0x5
#define _CCP1CON_OUT_SIZE                                   0x1
#define _CCP1CON_OUT_LENGTH                                 0x1
#define _CCP1CON_OUT_MASK                                   0x20
#define _CCP1CON_EN_POSN                                    0x7
#define _CCP1CON_EN_POSITION                                0x7
#define _CCP1CON_EN_SIZE                                    0x1
#define _CCP1CON_EN_LENGTH                                  0x1
#define _CCP1CON_EN_MASK                                    0x80
#define _CCP1CON_MODE0_POSN                                 0x0
#define _CCP1CON_MODE0_POSITION                             0x0
#define _CCP1CON_MODE0_SIZE                                 0x1
#define _CCP1CON_MODE0_LENGTH                               0x1
#define _CCP1CON_MODE0_MASK                                 0x1
#define _CCP1CON_MODE1_POSN                                 0x1
#define _CCP1CON_MODE1_POSITION                             0x1
#define _CCP1CON_MODE1_SIZE                                 0x1
#define _CCP1CON_MODE1_LENGTH                               0x1
#define _CCP1CON_MODE1_MASK                                 0x2
#define _CCP1CON_MODE2_POSN                                 0x2
#define _CCP1CON_MODE2_POSITION                             0x2
#define _CCP1CON_MODE2_SIZE                                 0x1
#define _CCP1CON_MODE2_LENGTH                               0x1
#define _CCP1CON_MODE2_MASK                                 0x4
#define _CCP1CON_MODE3_POSN                                 0x3
#define _CCP1CON_MODE3_POSITION                             0x3
#define _CCP1CON_MODE3_SIZE                                 0x1
#define _CCP1CON_MODE3_LENGTH                               0x1
#define _CCP1CON_MODE3_MASK                                 0x8
#define _CCP1CON_CCP1MODE_POSN                              0x0
#define _CCP1CON_CCP1MODE_POSITION                          0x0
#define _CCP1CON_CCP1MODE_SIZE                              0x4
#define _CCP1CON_CCP1MODE_LENGTH                            0x4
#define _CCP1CON_CCP1MODE_MASK                              0xF
#define _CCP1CON_CCP1FMT_POSN                               0x4
#define _CCP1CON_CCP1FMT_POSITION                           0x4
#define _CCP1CON_CCP1FMT_SIZE                               0x1
#define _CCP1CON_CCP1FMT_LENGTH                             0x1
#define _CCP1CON_CCP1FMT_MASK                               0x10
#define _CCP1CON_CCP1OUT_POSN                               0x5
#define _CCP1CON_CCP1OUT_POSITION                           0x5
#define _CCP1CON_CCP1OUT_SIZE                               0x1
#define _CCP1CON_CCP1OUT_LENGTH                             0x1
#define _CCP1CON_CCP1OUT_MASK                               0x20
#define _CCP1CON_CCP1EN_POSN                                0x7
#define _CCP1CON_CCP1EN_POSITION                            0x7
#define _CCP1CON_CCP1EN_SIZE                                0x1
#define _CCP1CON_CCP1EN_LENGTH                              0x1
#define _CCP1CON_CCP1EN_MASK                                0x80
#define _CCP1CON_CCP1MODE0_POSN                             0x0
#define _CCP1CON_CCP1MODE0_POSITION                         0x0
#define _CCP1CON_CCP1MODE0_SIZE                             0x1
#define _CCP1CON_CCP1MODE0_LENGTH                           0x1
#define _CCP1CON_CCP1MODE0_MASK                             0x1
#define _CCP1CON_CCP1MODE1_POSN                             0x1
#define _CCP1CON_CCP1MODE1_POSITION                         0x1
#define _CCP1CON_CCP1MODE1_SIZE                             0x1
#define _CCP1CON_CCP1MODE1_LENGTH                           0x1
#define _CCP1CON_CCP1MODE1_MASK                             0x2
#define _CCP1CON_CCP1MODE2_POSN                             0x2
#define _CCP1CON_CCP1MODE2_POSITION                         0x2
#define _CCP1CON_CCP1MODE2_SIZE                             0x1
#define _CCP1CON_CCP1MODE2_LENGTH                           0x1
#define _CCP1CON_CCP1MODE2_MASK                             0x4
#define _CCP1CON_CCP1MODE3_POSN                             0x3
#define _CCP1CON_CCP1MODE3_POSITION                         0x3
#define _CCP1CON_CCP1MODE3_SIZE                             0x1
#define _CCP1CON_CCP1MODE3_LENGTH                           0x1
#define _CCP1CON_CCP1MODE3_MASK                             0x8

// Register: CCP1CAP
#define CCP1CAP CCP1CAP
extern volatile unsigned char           CCP1CAP             __at(0x14C);
#ifndef _LIB_BUILD
asm("CCP1CAP equ 014Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
    };
    struct {
        unsigned CCP1CTS                :8;
    };
    struct {
        unsigned CCP1CTS0               :1;
        unsigned CCP1CTS1               :1;
        unsigned CCP1CTS2               :1;
    };
} CCP1CAPbits_t;
extern volatile CCP1CAPbits_t CCP1CAPbits __at(0x14C);
// bitfield macros
#define _CCP1CAP_CTS_POSN                                   0x0
#define _CCP1CAP_CTS_POSITION                               0x0
#define _CCP1CAP_CTS_SIZE                                   0x8
#define _CCP1CAP_CTS_LENGTH                                 0x8
#define _CCP1CAP_CTS_MASK                                   0xFF
#define _CCP1CAP_CTS0_POSN                                  0x0
#define _CCP1CAP_CTS0_POSITION                              0x0
#define _CCP1CAP_CTS0_SIZE                                  0x1
#define _CCP1CAP_CTS0_LENGTH                                0x1
#define _CCP1CAP_CTS0_MASK                                  0x1
#define _CCP1CAP_CTS1_POSN                                  0x1
#define _CCP1CAP_CTS1_POSITION                              0x1
#define _CCP1CAP_CTS1_SIZE                                  0x1
#define _CCP1CAP_CTS1_LENGTH                                0x1
#define _CCP1CAP_CTS1_MASK                                  0x2
#define _CCP1CAP_CTS2_POSN                                  0x2
#define _CCP1CAP_CTS2_POSITION                              0x2
#define _CCP1CAP_CTS2_SIZE                                  0x1
#define _CCP1CAP_CTS2_LENGTH                                0x1
#define _CCP1CAP_CTS2_MASK                                  0x4
#define _CCP1CAP_CCP1CTS_POSN                               0x0
#define _CCP1CAP_CCP1CTS_POSITION                           0x0
#define _CCP1CAP_CCP1CTS_SIZE                               0x8
#define _CCP1CAP_CCP1CTS_LENGTH                             0x8
#define _CCP1CAP_CCP1CTS_MASK                               0xFF
#define _CCP1CAP_CCP1CTS0_POSN                              0x0
#define _CCP1CAP_CCP1CTS0_POSITION                          0x0
#define _CCP1CAP_CCP1CTS0_SIZE                              0x1
#define _CCP1CAP_CCP1CTS0_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS0_MASK                              0x1
#define _CCP1CAP_CCP1CTS1_POSN                              0x1
#define _CCP1CAP_CCP1CTS1_POSITION                          0x1
#define _CCP1CAP_CCP1CTS1_SIZE                              0x1
#define _CCP1CAP_CCP1CTS1_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS1_MASK                              0x2
#define _CCP1CAP_CCP1CTS2_POSN                              0x2
#define _CCP1CAP_CCP1CTS2_POSITION                          0x2
#define _CCP1CAP_CCP1CTS2_SIZE                              0x1
#define _CCP1CAP_CCP1CTS2_LENGTH                            0x1
#define _CCP1CAP_CCP1CTS2_MASK                              0x4

// Register: CCPR2
#define CCPR2 CCPR2
extern volatile unsigned short          CCPR2               __at(0x14D);
#ifndef _LIB_BUILD
asm("CCPR2 equ 014Dh");
#endif

// Register: CCPR2L
#define CCPR2L CCPR2L
extern volatile unsigned char           CCPR2L              __at(0x14D);
#ifndef _LIB_BUILD
asm("CCPR2L equ 014Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RL                     :8;
    };
} CCPR2Lbits_t;
extern volatile CCPR2Lbits_t CCPR2Lbits __at(0x14D);
// bitfield macros
#define _CCPR2L_RL_POSN                                     0x0
#define _CCPR2L_RL_POSITION                                 0x0
#define _CCPR2L_RL_SIZE                                     0x8
#define _CCPR2L_RL_LENGTH                                   0x8
#define _CCPR2L_RL_MASK                                     0xFF

// Register: CCPR2H
#define CCPR2H CCPR2H
extern volatile unsigned char           CCPR2H              __at(0x14E);
#ifndef _LIB_BUILD
asm("CCPR2H equ 014Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RH                     :8;
    };
} CCPR2Hbits_t;
extern volatile CCPR2Hbits_t CCPR2Hbits __at(0x14E);
// bitfield macros
#define _CCPR2H_RH_POSN                                     0x0
#define _CCPR2H_RH_POSITION                                 0x0
#define _CCPR2H_RH_SIZE                                     0x8
#define _CCPR2H_RH_LENGTH                                   0x8
#define _CCPR2H_RH_MASK                                     0xFF

// Register: CCP2CON
#define CCP2CON CCP2CON
extern volatile unsigned char           CCP2CON             __at(0x14F);
#ifndef _LIB_BUILD
asm("CCP2CON equ 014Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :4;
        unsigned FMT                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned CCP2MODE               :4;
        unsigned CCP2FMT                :1;
        unsigned CCP2OUT                :1;
        unsigned                        :1;
        unsigned CCP2EN                 :1;
    };
    struct {
        unsigned CCP2MODE0              :1;
        unsigned CCP2MODE1              :1;
        unsigned CCP2MODE2              :1;
        unsigned CCP2MODE3              :1;
    };
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits __at(0x14F);
// bitfield macros
#define _CCP2CON_MODE_POSN                                  0x0
#define _CCP2CON_MODE_POSITION                              0x0
#define _CCP2CON_MODE_SIZE                                  0x4
#define _CCP2CON_MODE_LENGTH                                0x4
#define _CCP2CON_MODE_MASK                                  0xF
#define _CCP2CON_FMT_POSN                                   0x4
#define _CCP2CON_FMT_POSITION                               0x4
#define _CCP2CON_FMT_SIZE                                   0x1
#define _CCP2CON_FMT_LENGTH                                 0x1
#define _CCP2CON_FMT_MASK                                   0x10
#define _CCP2CON_OUT_POSN                                   0x5
#define _CCP2CON_OUT_POSITION                               0x5
#define _CCP2CON_OUT_SIZE                                   0x1
#define _CCP2CON_OUT_LENGTH                                 0x1
#define _CCP2CON_OUT_MASK                                   0x20
#define _CCP2CON_EN_POSN                                    0x7
#define _CCP2CON_EN_POSITION                                0x7
#define _CCP2CON_EN_SIZE                                    0x1
#define _CCP2CON_EN_LENGTH                                  0x1
#define _CCP2CON_EN_MASK                                    0x80
#define _CCP2CON_MODE0_POSN                                 0x0
#define _CCP2CON_MODE0_POSITION                             0x0
#define _CCP2CON_MODE0_SIZE                                 0x1
#define _CCP2CON_MODE0_LENGTH                               0x1
#define _CCP2CON_MODE0_MASK                                 0x1
#define _CCP2CON_MODE1_POSN                                 0x1
#define _CCP2CON_MODE1_POSITION                             0x1
#define _CCP2CON_MODE1_SIZE                                 0x1
#define _CCP2CON_MODE1_LENGTH                               0x1
#define _CCP2CON_MODE1_MASK                                 0x2
#define _CCP2CON_MODE2_POSN                                 0x2
#define _CCP2CON_MODE2_POSITION                             0x2
#define _CCP2CON_MODE2_SIZE                                 0x1
#define _CCP2CON_MODE2_LENGTH                               0x1
#define _CCP2CON_MODE2_MASK                                 0x4
#define _CCP2CON_MODE3_POSN                                 0x3
#define _CCP2CON_MODE3_POSITION                             0x3
#define _CCP2CON_MODE3_SIZE                                 0x1
#define _CCP2CON_MODE3_LENGTH                               0x1
#define _CCP2CON_MODE3_MASK                                 0x8
#define _CCP2CON_CCP2MODE_POSN                              0x0
#define _CCP2CON_CCP2MODE_POSITION                          0x0
#define _CCP2CON_CCP2MODE_SIZE                              0x4
#define _CCP2CON_CCP2MODE_LENGTH                            0x4
#define _CCP2CON_CCP2MODE_MASK                              0xF
#define _CCP2CON_CCP2FMT_POSN                               0x4
#define _CCP2CON_CCP2FMT_POSITION                           0x4
#define _CCP2CON_CCP2FMT_SIZE                               0x1
#define _CCP2CON_CCP2FMT_LENGTH                             0x1
#define _CCP2CON_CCP2FMT_MASK                               0x10
#define _CCP2CON_CCP2OUT_POSN                               0x5
#define _CCP2CON_CCP2OUT_POSITION                           0x5
#define _CCP2CON_CCP2OUT_SIZE                               0x1
#define _CCP2CON_CCP2OUT_LENGTH                             0x1
#define _CCP2CON_CCP2OUT_MASK                               0x20
#define _CCP2CON_CCP2EN_POSN                                0x7
#define _CCP2CON_CCP2EN_POSITION                            0x7
#define _CCP2CON_CCP2EN_SIZE                                0x1
#define _CCP2CON_CCP2EN_LENGTH                              0x1
#define _CCP2CON_CCP2EN_MASK                                0x80
#define _CCP2CON_CCP2MODE0_POSN                             0x0
#define _CCP2CON_CCP2MODE0_POSITION                         0x0
#define _CCP2CON_CCP2MODE0_SIZE                             0x1
#define _CCP2CON_CCP2MODE0_LENGTH                           0x1
#define _CCP2CON_CCP2MODE0_MASK                             0x1
#define _CCP2CON_CCP2MODE1_POSN                             0x1
#define _CCP2CON_CCP2MODE1_POSITION                         0x1
#define _CCP2CON_CCP2MODE1_SIZE                             0x1
#define _CCP2CON_CCP2MODE1_LENGTH                           0x1
#define _CCP2CON_CCP2MODE1_MASK                             0x2
#define _CCP2CON_CCP2MODE2_POSN                             0x2
#define _CCP2CON_CCP2MODE2_POSITION                         0x2
#define _CCP2CON_CCP2MODE2_SIZE                             0x1
#define _CCP2CON_CCP2MODE2_LENGTH                           0x1
#define _CCP2CON_CCP2MODE2_MASK                             0x4
#define _CCP2CON_CCP2MODE3_POSN                             0x3
#define _CCP2CON_CCP2MODE3_POSITION                         0x3
#define _CCP2CON_CCP2MODE3_SIZE                             0x1
#define _CCP2CON_CCP2MODE3_LENGTH                           0x1
#define _CCP2CON_CCP2MODE3_MASK                             0x8

// Register: CCP2CAP
#define CCP2CAP CCP2CAP
extern volatile unsigned char           CCP2CAP             __at(0x150);
#ifndef _LIB_BUILD
asm("CCP2CAP equ 0150h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CTS                    :8;
    };
    struct {
        unsigned CTS0                   :1;
        unsigned CTS1                   :1;
        unsigned CTS2                   :1;
    };
    struct {
        unsigned CCP2CTS                :8;
    };
    struct {
        unsigned CCP2CTS0               :1;
        unsigned CCP2CTS1               :1;
        unsigned CCP2CTS2               :1;
    };
} CCP2CAPbits_t;
extern volatile CCP2CAPbits_t CCP2CAPbits __at(0x150);
// bitfield macros
#define _CCP2CAP_CTS_POSN                                   0x0
#define _CCP2CAP_CTS_POSITION                               0x0
#define _CCP2CAP_CTS_SIZE                                   0x8
#define _CCP2CAP_CTS_LENGTH                                 0x8
#define _CCP2CAP_CTS_MASK                                   0xFF
#define _CCP2CAP_CTS0_POSN                                  0x0
#define _CCP2CAP_CTS0_POSITION                              0x0
#define _CCP2CAP_CTS0_SIZE                                  0x1
#define _CCP2CAP_CTS0_LENGTH                                0x1
#define _CCP2CAP_CTS0_MASK                                  0x1
#define _CCP2CAP_CTS1_POSN                                  0x1
#define _CCP2CAP_CTS1_POSITION                              0x1
#define _CCP2CAP_CTS1_SIZE                                  0x1
#define _CCP2CAP_CTS1_LENGTH                                0x1
#define _CCP2CAP_CTS1_MASK                                  0x2
#define _CCP2CAP_CTS2_POSN                                  0x2
#define _CCP2CAP_CTS2_POSITION                              0x2
#define _CCP2CAP_CTS2_SIZE                                  0x1
#define _CCP2CAP_CTS2_LENGTH                                0x1
#define _CCP2CAP_CTS2_MASK                                  0x4
#define _CCP2CAP_CCP2CTS_POSN                               0x0
#define _CCP2CAP_CCP2CTS_POSITION                           0x0
#define _CCP2CAP_CCP2CTS_SIZE                               0x8
#define _CCP2CAP_CCP2CTS_LENGTH                             0x8
#define _CCP2CAP_CCP2CTS_MASK                               0xFF
#define _CCP2CAP_CCP2CTS0_POSN                              0x0
#define _CCP2CAP_CCP2CTS0_POSITION                          0x0
#define _CCP2CAP_CCP2CTS0_SIZE                              0x1
#define _CCP2CAP_CCP2CTS0_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS0_MASK                              0x1
#define _CCP2CAP_CCP2CTS1_POSN                              0x1
#define _CCP2CAP_CCP2CTS1_POSITION                          0x1
#define _CCP2CAP_CCP2CTS1_SIZE                              0x1
#define _CCP2CAP_CCP2CTS1_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS1_MASK                              0x2
#define _CCP2CAP_CCP2CTS2_POSN                              0x2
#define _CCP2CAP_CCP2CTS2_POSITION                          0x2
#define _CCP2CAP_CCP2CTS2_SIZE                              0x1
#define _CCP2CAP_CCP2CTS2_LENGTH                            0x1
#define _CCP2CAP_CCP2CTS2_MASK                              0x4

// Register: PWMLOAD
#define PWMLOAD PWMLOAD
extern volatile unsigned char           PWMLOAD             __at(0x151);
#ifndef _LIB_BUILD
asm("PWMLOAD equ 0151h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MPWM1LD                :1;
        unsigned MPWM2LD                :1;
    };
} PWMLOADbits_t;
extern volatile PWMLOADbits_t PWMLOADbits __at(0x151);
// bitfield macros
#define _PWMLOAD_MPWM1LD_POSN                               0x0
#define _PWMLOAD_MPWM1LD_POSITION                           0x0
#define _PWMLOAD_MPWM1LD_SIZE                               0x1
#define _PWMLOAD_MPWM1LD_LENGTH                             0x1
#define _PWMLOAD_MPWM1LD_MASK                               0x1
#define _PWMLOAD_MPWM2LD_POSN                               0x1
#define _PWMLOAD_MPWM2LD_POSITION                           0x1
#define _PWMLOAD_MPWM2LD_SIZE                               0x1
#define _PWMLOAD_MPWM2LD_LENGTH                             0x1
#define _PWMLOAD_MPWM2LD_MASK                               0x2

// Register: PWMEN
#define PWMEN PWMEN
extern volatile unsigned char           PWMEN               __at(0x152);
#ifndef _LIB_BUILD
asm("PWMEN equ 0152h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MPWM1EN                :1;
        unsigned MPWM2EN                :1;
    };
} PWMENbits_t;
extern volatile PWMENbits_t PWMENbits __at(0x152);
// bitfield macros
#define _PWMEN_MPWM1EN_POSN                                 0x0
#define _PWMEN_MPWM1EN_POSITION                             0x0
#define _PWMEN_MPWM1EN_SIZE                                 0x1
#define _PWMEN_MPWM1EN_LENGTH                               0x1
#define _PWMEN_MPWM1EN_MASK                                 0x1
#define _PWMEN_MPWM2EN_POSN                                 0x1
#define _PWMEN_MPWM2EN_POSITION                             0x1
#define _PWMEN_MPWM2EN_SIZE                                 0x1
#define _PWMEN_MPWM2EN_LENGTH                               0x1
#define _PWMEN_MPWM2EN_MASK                                 0x2

// Register: PWM1ERS
#define PWM1ERS PWM1ERS
extern volatile unsigned char           PWM1ERS             __at(0x153);
#ifndef _LIB_BUILD
asm("PWM1ERS equ 0153h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERS                    :8;
    };
    struct {
        unsigned ERS0                   :1;
        unsigned ERS1                   :1;
        unsigned ERS2                   :1;
        unsigned ERS3                   :1;
    };
} PWM1ERSbits_t;
extern volatile PWM1ERSbits_t PWM1ERSbits __at(0x153);
// bitfield macros
#define _PWM1ERS_ERS_POSN                                   0x0
#define _PWM1ERS_ERS_POSITION                               0x0
#define _PWM1ERS_ERS_SIZE                                   0x8
#define _PWM1ERS_ERS_LENGTH                                 0x8
#define _PWM1ERS_ERS_MASK                                   0xFF
#define _PWM1ERS_ERS0_POSN                                  0x0
#define _PWM1ERS_ERS0_POSITION                              0x0
#define _PWM1ERS_ERS0_SIZE                                  0x1
#define _PWM1ERS_ERS0_LENGTH                                0x1
#define _PWM1ERS_ERS0_MASK                                  0x1
#define _PWM1ERS_ERS1_POSN                                  0x1
#define _PWM1ERS_ERS1_POSITION                              0x1
#define _PWM1ERS_ERS1_SIZE                                  0x1
#define _PWM1ERS_ERS1_LENGTH                                0x1
#define _PWM1ERS_ERS1_MASK                                  0x2
#define _PWM1ERS_ERS2_POSN                                  0x2
#define _PWM1ERS_ERS2_POSITION                              0x2
#define _PWM1ERS_ERS2_SIZE                                  0x1
#define _PWM1ERS_ERS2_LENGTH                                0x1
#define _PWM1ERS_ERS2_MASK                                  0x4
#define _PWM1ERS_ERS3_POSN                                  0x3
#define _PWM1ERS_ERS3_POSITION                              0x3
#define _PWM1ERS_ERS3_SIZE                                  0x1
#define _PWM1ERS_ERS3_LENGTH                                0x1
#define _PWM1ERS_ERS3_MASK                                  0x8

// Register: PWM1CLK
#define PWM1CLK PWM1CLK
extern volatile unsigned char           PWM1CLK             __at(0x154);
#ifndef _LIB_BUILD
asm("PWM1CLK equ 0154h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLK                    :8;
    };
    struct {
        unsigned CLK0                   :1;
        unsigned CLK1                   :1;
        unsigned CLK2                   :1;
        unsigned CLK3                   :1;
    };
} PWM1CLKbits_t;
extern volatile PWM1CLKbits_t PWM1CLKbits __at(0x154);
// bitfield macros
#define _PWM1CLK_CLK_POSN                                   0x0
#define _PWM1CLK_CLK_POSITION                               0x0
#define _PWM1CLK_CLK_SIZE                                   0x8
#define _PWM1CLK_CLK_LENGTH                                 0x8
#define _PWM1CLK_CLK_MASK                                   0xFF
#define _PWM1CLK_CLK0_POSN                                  0x0
#define _PWM1CLK_CLK0_POSITION                              0x0
#define _PWM1CLK_CLK0_SIZE                                  0x1
#define _PWM1CLK_CLK0_LENGTH                                0x1
#define _PWM1CLK_CLK0_MASK                                  0x1
#define _PWM1CLK_CLK1_POSN                                  0x1
#define _PWM1CLK_CLK1_POSITION                              0x1
#define _PWM1CLK_CLK1_SIZE                                  0x1
#define _PWM1CLK_CLK1_LENGTH                                0x1
#define _PWM1CLK_CLK1_MASK                                  0x2
#define _PWM1CLK_CLK2_POSN                                  0x2
#define _PWM1CLK_CLK2_POSITION                              0x2
#define _PWM1CLK_CLK2_SIZE                                  0x1
#define _PWM1CLK_CLK2_LENGTH                                0x1
#define _PWM1CLK_CLK2_MASK                                  0x4
#define _PWM1CLK_CLK3_POSN                                  0x3
#define _PWM1CLK_CLK3_POSITION                              0x3
#define _PWM1CLK_CLK3_SIZE                                  0x1
#define _PWM1CLK_CLK3_LENGTH                                0x1
#define _PWM1CLK_CLK3_MASK                                  0x8

// Register: PWM1LDS
#define PWM1LDS PWM1LDS
extern volatile unsigned char           PWM1LDS             __at(0x155);
#ifndef _LIB_BUILD
asm("PWM1LDS equ 0155h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LDS                    :8;
    };
    struct {
        unsigned LDS0                   :1;
        unsigned LDS1                   :1;
        unsigned LDS2                   :1;
        unsigned LDS3                   :1;
    };
} PWM1LDSbits_t;
extern volatile PWM1LDSbits_t PWM1LDSbits __at(0x155);
// bitfield macros
#define _PWM1LDS_LDS_POSN                                   0x0
#define _PWM1LDS_LDS_POSITION                               0x0
#define _PWM1LDS_LDS_SIZE                                   0x8
#define _PWM1LDS_LDS_LENGTH                                 0x8
#define _PWM1LDS_LDS_MASK                                   0xFF
#define _PWM1LDS_LDS0_POSN                                  0x0
#define _PWM1LDS_LDS0_POSITION                              0x0
#define _PWM1LDS_LDS0_SIZE                                  0x1
#define _PWM1LDS_LDS0_LENGTH                                0x1
#define _PWM1LDS_LDS0_MASK                                  0x1
#define _PWM1LDS_LDS1_POSN                                  0x1
#define _PWM1LDS_LDS1_POSITION                              0x1
#define _PWM1LDS_LDS1_SIZE                                  0x1
#define _PWM1LDS_LDS1_LENGTH                                0x1
#define _PWM1LDS_LDS1_MASK                                  0x2
#define _PWM1LDS_LDS2_POSN                                  0x2
#define _PWM1LDS_LDS2_POSITION                              0x2
#define _PWM1LDS_LDS2_SIZE                                  0x1
#define _PWM1LDS_LDS2_LENGTH                                0x1
#define _PWM1LDS_LDS2_MASK                                  0x4
#define _PWM1LDS_LDS3_POSN                                  0x3
#define _PWM1LDS_LDS3_POSITION                              0x3
#define _PWM1LDS_LDS3_SIZE                                  0x1
#define _PWM1LDS_LDS3_LENGTH                                0x1
#define _PWM1LDS_LDS3_MASK                                  0x8

// Register: PWM1PR
#define PWM1PR PWM1PR
extern volatile unsigned short          PWM1PR              __at(0x156);
#ifndef _LIB_BUILD
asm("PWM1PR equ 0156h");
#endif

// Register: PWM1PRL
#define PWM1PRL PWM1PRL
extern volatile unsigned char           PWM1PRL             __at(0x156);
#ifndef _LIB_BUILD
asm("PWM1PRL equ 0156h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRL                    :8;
    };
} PWM1PRLbits_t;
extern volatile PWM1PRLbits_t PWM1PRLbits __at(0x156);
// bitfield macros
#define _PWM1PRL_PRL_POSN                                   0x0
#define _PWM1PRL_PRL_POSITION                               0x0
#define _PWM1PRL_PRL_SIZE                                   0x8
#define _PWM1PRL_PRL_LENGTH                                 0x8
#define _PWM1PRL_PRL_MASK                                   0xFF

// Register: PWM1PRH
#define PWM1PRH PWM1PRH
extern volatile unsigned char           PWM1PRH             __at(0x157);
#ifndef _LIB_BUILD
asm("PWM1PRH equ 0157h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRH                    :8;
    };
} PWM1PRHbits_t;
extern volatile PWM1PRHbits_t PWM1PRHbits __at(0x157);
// bitfield macros
#define _PWM1PRH_PRH_POSN                                   0x0
#define _PWM1PRH_PRH_POSITION                               0x0
#define _PWM1PRH_PRH_SIZE                                   0x8
#define _PWM1PRH_PRH_LENGTH                                 0x8
#define _PWM1PRH_PRH_MASK                                   0xFF

// Register: PWM1CPRE
#define PWM1CPRE PWM1CPRE
extern volatile unsigned char           PWM1CPRE            __at(0x158);
#ifndef _LIB_BUILD
asm("PWM1CPRE equ 0158h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPRE                   :8;
    };
} PWM1CPREbits_t;
extern volatile PWM1CPREbits_t PWM1CPREbits __at(0x158);
// bitfield macros
#define _PWM1CPRE_CPRE_POSN                                 0x0
#define _PWM1CPRE_CPRE_POSITION                             0x0
#define _PWM1CPRE_CPRE_SIZE                                 0x8
#define _PWM1CPRE_CPRE_LENGTH                               0x8
#define _PWM1CPRE_CPRE_MASK                                 0xFF

// Register: PWM1PIPOS
#define PWM1PIPOS PWM1PIPOS
extern volatile unsigned char           PWM1PIPOS           __at(0x159);
#ifndef _LIB_BUILD
asm("PWM1PIPOS equ 0159h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIPOS                  :8;
    };
} PWM1PIPOSbits_t;
extern volatile PWM1PIPOSbits_t PWM1PIPOSbits __at(0x159);
// bitfield macros
#define _PWM1PIPOS_PIPOS_POSN                               0x0
#define _PWM1PIPOS_PIPOS_POSITION                           0x0
#define _PWM1PIPOS_PIPOS_SIZE                               0x8
#define _PWM1PIPOS_PIPOS_LENGTH                             0x8
#define _PWM1PIPOS_PIPOS_MASK                               0xFF

// Register: PWM1GIR
#define PWM1GIR PWM1GIR
extern volatile unsigned char           PWM1GIR             __at(0x15A);
#ifndef _LIB_BUILD
asm("PWM1GIR equ 015Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1IF                 :1;
        unsigned S1P2IF                 :1;
    };
} PWM1GIRbits_t;
extern volatile PWM1GIRbits_t PWM1GIRbits __at(0x15A);
// bitfield macros
#define _PWM1GIR_S1P1IF_POSN                                0x0
#define _PWM1GIR_S1P1IF_POSITION                            0x0
#define _PWM1GIR_S1P1IF_SIZE                                0x1
#define _PWM1GIR_S1P1IF_LENGTH                              0x1
#define _PWM1GIR_S1P1IF_MASK                                0x1
#define _PWM1GIR_S1P2IF_POSN                                0x1
#define _PWM1GIR_S1P2IF_POSITION                            0x1
#define _PWM1GIR_S1P2IF_SIZE                                0x1
#define _PWM1GIR_S1P2IF_LENGTH                              0x1
#define _PWM1GIR_S1P2IF_MASK                                0x2

// Register: PWM1GIE
#define PWM1GIE PWM1GIE
extern volatile unsigned char           PWM1GIE             __at(0x15B);
#ifndef _LIB_BUILD
asm("PWM1GIE equ 015Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1IE                 :1;
        unsigned S1P2IE                 :1;
    };
} PWM1GIEbits_t;
extern volatile PWM1GIEbits_t PWM1GIEbits __at(0x15B);
// bitfield macros
#define _PWM1GIE_S1P1IE_POSN                                0x0
#define _PWM1GIE_S1P1IE_POSITION                            0x0
#define _PWM1GIE_S1P1IE_SIZE                                0x1
#define _PWM1GIE_S1P1IE_LENGTH                              0x1
#define _PWM1GIE_S1P1IE_MASK                                0x1
#define _PWM1GIE_S1P2IE_POSN                                0x1
#define _PWM1GIE_S1P2IE_POSITION                            0x1
#define _PWM1GIE_S1P2IE_SIZE                                0x1
#define _PWM1GIE_S1P2IE_LENGTH                              0x1
#define _PWM1GIE_S1P2IE_MASK                                0x2

// Register: PWM1CON
#define PWM1CON PWM1CON
extern volatile unsigned char           PWM1CON             __at(0x15C);
#ifndef _LIB_BUILD
asm("PWM1CON equ 015Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERSNOW                 :1;
        unsigned ERSPOL                 :1;
        unsigned LD                     :1;
        unsigned                        :4;
        unsigned EN                     :1;
    };
} PWM1CONbits_t;
extern volatile PWM1CONbits_t PWM1CONbits __at(0x15C);
// bitfield macros
#define _PWM1CON_ERSNOW_POSN                                0x0
#define _PWM1CON_ERSNOW_POSITION                            0x0
#define _PWM1CON_ERSNOW_SIZE                                0x1
#define _PWM1CON_ERSNOW_LENGTH                              0x1
#define _PWM1CON_ERSNOW_MASK                                0x1
#define _PWM1CON_ERSPOL_POSN                                0x1
#define _PWM1CON_ERSPOL_POSITION                            0x1
#define _PWM1CON_ERSPOL_SIZE                                0x1
#define _PWM1CON_ERSPOL_LENGTH                              0x1
#define _PWM1CON_ERSPOL_MASK                                0x2
#define _PWM1CON_LD_POSN                                    0x2
#define _PWM1CON_LD_POSITION                                0x2
#define _PWM1CON_LD_SIZE                                    0x1
#define _PWM1CON_LD_LENGTH                                  0x1
#define _PWM1CON_LD_MASK                                    0x4
#define _PWM1CON_EN_POSN                                    0x7
#define _PWM1CON_EN_POSITION                                0x7
#define _PWM1CON_EN_SIZE                                    0x1
#define _PWM1CON_EN_LENGTH                                  0x1
#define _PWM1CON_EN_MASK                                    0x80

// Register: PWM1S1CFG
#define PWM1S1CFG PWM1S1CFG
extern volatile unsigned char           PWM1S1CFG           __at(0x15D);
#ifndef _LIB_BUILD
asm("PWM1S1CFG equ 015Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned PPEN                   :1;
        unsigned                        :2;
        unsigned POL1                   :1;
        unsigned POL2                   :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} PWM1S1CFGbits_t;
extern volatile PWM1S1CFGbits_t PWM1S1CFGbits __at(0x15D);
// bitfield macros
#define _PWM1S1CFG_MODE_POSN                                0x0
#define _PWM1S1CFG_MODE_POSITION                            0x0
#define _PWM1S1CFG_MODE_SIZE                                0x3
#define _PWM1S1CFG_MODE_LENGTH                              0x3
#define _PWM1S1CFG_MODE_MASK                                0x7
#define _PWM1S1CFG_PPEN_POSN                                0x3
#define _PWM1S1CFG_PPEN_POSITION                            0x3
#define _PWM1S1CFG_PPEN_SIZE                                0x1
#define _PWM1S1CFG_PPEN_LENGTH                              0x1
#define _PWM1S1CFG_PPEN_MASK                                0x8
#define _PWM1S1CFG_POL1_POSN                                0x6
#define _PWM1S1CFG_POL1_POSITION                            0x6
#define _PWM1S1CFG_POL1_SIZE                                0x1
#define _PWM1S1CFG_POL1_LENGTH                              0x1
#define _PWM1S1CFG_POL1_MASK                                0x40
#define _PWM1S1CFG_POL2_POSN                                0x7
#define _PWM1S1CFG_POL2_POSITION                            0x7
#define _PWM1S1CFG_POL2_SIZE                                0x1
#define _PWM1S1CFG_POL2_LENGTH                              0x1
#define _PWM1S1CFG_POL2_MASK                                0x80
#define _PWM1S1CFG_MODE0_POSN                               0x0
#define _PWM1S1CFG_MODE0_POSITION                           0x0
#define _PWM1S1CFG_MODE0_SIZE                               0x1
#define _PWM1S1CFG_MODE0_LENGTH                             0x1
#define _PWM1S1CFG_MODE0_MASK                               0x1
#define _PWM1S1CFG_MODE1_POSN                               0x1
#define _PWM1S1CFG_MODE1_POSITION                           0x1
#define _PWM1S1CFG_MODE1_SIZE                               0x1
#define _PWM1S1CFG_MODE1_LENGTH                             0x1
#define _PWM1S1CFG_MODE1_MASK                               0x2
#define _PWM1S1CFG_MODE2_POSN                               0x2
#define _PWM1S1CFG_MODE2_POSITION                           0x2
#define _PWM1S1CFG_MODE2_SIZE                               0x1
#define _PWM1S1CFG_MODE2_LENGTH                             0x1
#define _PWM1S1CFG_MODE2_MASK                               0x4

// Register: PWM1S1P1
#define PWM1S1P1 PWM1S1P1
extern volatile unsigned short          PWM1S1P1            __at(0x15E);
#ifndef _LIB_BUILD
asm("PWM1S1P1 equ 015Eh");
#endif

// Register: PWM1S1P1L
#define PWM1S1P1L PWM1S1P1L
extern volatile unsigned char           PWM1S1P1L           __at(0x15E);
#ifndef _LIB_BUILD
asm("PWM1S1P1L equ 015Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1L                  :8;
    };
} PWM1S1P1Lbits_t;
extern volatile PWM1S1P1Lbits_t PWM1S1P1Lbits __at(0x15E);
// bitfield macros
#define _PWM1S1P1L_S1P1L_POSN                               0x0
#define _PWM1S1P1L_S1P1L_POSITION                           0x0
#define _PWM1S1P1L_S1P1L_SIZE                               0x8
#define _PWM1S1P1L_S1P1L_LENGTH                             0x8
#define _PWM1S1P1L_S1P1L_MASK                               0xFF

// Register: PWM1S1P1H
#define PWM1S1P1H PWM1S1P1H
extern volatile unsigned char           PWM1S1P1H           __at(0x15F);
#ifndef _LIB_BUILD
asm("PWM1S1P1H equ 015Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1H                  :8;
    };
} PWM1S1P1Hbits_t;
extern volatile PWM1S1P1Hbits_t PWM1S1P1Hbits __at(0x15F);
// bitfield macros
#define _PWM1S1P1H_S1P1H_POSN                               0x0
#define _PWM1S1P1H_S1P1H_POSITION                           0x0
#define _PWM1S1P1H_S1P1H_SIZE                               0x8
#define _PWM1S1P1H_S1P1H_LENGTH                             0x8
#define _PWM1S1P1H_S1P1H_MASK                               0xFF

// Register: PWM1S1P2
#define PWM1S1P2 PWM1S1P2
extern volatile unsigned short          PWM1S1P2            __at(0x160);
#ifndef _LIB_BUILD
asm("PWM1S1P2 equ 0160h");
#endif

// Register: PWM1S1P2L
#define PWM1S1P2L PWM1S1P2L
extern volatile unsigned char           PWM1S1P2L           __at(0x160);
#ifndef _LIB_BUILD
asm("PWM1S1P2L equ 0160h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P2L                  :8;
    };
} PWM1S1P2Lbits_t;
extern volatile PWM1S1P2Lbits_t PWM1S1P2Lbits __at(0x160);
// bitfield macros
#define _PWM1S1P2L_S1P2L_POSN                               0x0
#define _PWM1S1P2L_S1P2L_POSITION                           0x0
#define _PWM1S1P2L_S1P2L_SIZE                               0x8
#define _PWM1S1P2L_S1P2L_LENGTH                             0x8
#define _PWM1S1P2L_S1P2L_MASK                               0xFF

// Register: PWM1S1P2H
#define PWM1S1P2H PWM1S1P2H
extern volatile unsigned char           PWM1S1P2H           __at(0x161);
#ifndef _LIB_BUILD
asm("PWM1S1P2H equ 0161h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P2H                  :8;
    };
} PWM1S1P2Hbits_t;
extern volatile PWM1S1P2Hbits_t PWM1S1P2Hbits __at(0x161);
// bitfield macros
#define _PWM1S1P2H_S1P2H_POSN                               0x0
#define _PWM1S1P2H_S1P2H_POSITION                           0x0
#define _PWM1S1P2H_S1P2H_SIZE                               0x8
#define _PWM1S1P2H_S1P2H_LENGTH                             0x8
#define _PWM1S1P2H_S1P2H_MASK                               0xFF

// Register: PWM2ERS
#define PWM2ERS PWM2ERS
extern volatile unsigned char           PWM2ERS             __at(0x162);
#ifndef _LIB_BUILD
asm("PWM2ERS equ 0162h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERS                    :8;
    };
    struct {
        unsigned ERS0                   :1;
        unsigned ERS1                   :1;
        unsigned ERS2                   :1;
        unsigned ERS3                   :1;
    };
} PWM2ERSbits_t;
extern volatile PWM2ERSbits_t PWM2ERSbits __at(0x162);
// bitfield macros
#define _PWM2ERS_ERS_POSN                                   0x0
#define _PWM2ERS_ERS_POSITION                               0x0
#define _PWM2ERS_ERS_SIZE                                   0x8
#define _PWM2ERS_ERS_LENGTH                                 0x8
#define _PWM2ERS_ERS_MASK                                   0xFF
#define _PWM2ERS_ERS0_POSN                                  0x0
#define _PWM2ERS_ERS0_POSITION                              0x0
#define _PWM2ERS_ERS0_SIZE                                  0x1
#define _PWM2ERS_ERS0_LENGTH                                0x1
#define _PWM2ERS_ERS0_MASK                                  0x1
#define _PWM2ERS_ERS1_POSN                                  0x1
#define _PWM2ERS_ERS1_POSITION                              0x1
#define _PWM2ERS_ERS1_SIZE                                  0x1
#define _PWM2ERS_ERS1_LENGTH                                0x1
#define _PWM2ERS_ERS1_MASK                                  0x2
#define _PWM2ERS_ERS2_POSN                                  0x2
#define _PWM2ERS_ERS2_POSITION                              0x2
#define _PWM2ERS_ERS2_SIZE                                  0x1
#define _PWM2ERS_ERS2_LENGTH                                0x1
#define _PWM2ERS_ERS2_MASK                                  0x4
#define _PWM2ERS_ERS3_POSN                                  0x3
#define _PWM2ERS_ERS3_POSITION                              0x3
#define _PWM2ERS_ERS3_SIZE                                  0x1
#define _PWM2ERS_ERS3_LENGTH                                0x1
#define _PWM2ERS_ERS3_MASK                                  0x8

// Register: PWM2CLK
#define PWM2CLK PWM2CLK
extern volatile unsigned char           PWM2CLK             __at(0x163);
#ifndef _LIB_BUILD
asm("PWM2CLK equ 0163h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLK                    :8;
    };
    struct {
        unsigned CLK0                   :1;
        unsigned CLK1                   :1;
        unsigned CLK2                   :1;
        unsigned CLK3                   :1;
    };
} PWM2CLKbits_t;
extern volatile PWM2CLKbits_t PWM2CLKbits __at(0x163);
// bitfield macros
#define _PWM2CLK_CLK_POSN                                   0x0
#define _PWM2CLK_CLK_POSITION                               0x0
#define _PWM2CLK_CLK_SIZE                                   0x8
#define _PWM2CLK_CLK_LENGTH                                 0x8
#define _PWM2CLK_CLK_MASK                                   0xFF
#define _PWM2CLK_CLK0_POSN                                  0x0
#define _PWM2CLK_CLK0_POSITION                              0x0
#define _PWM2CLK_CLK0_SIZE                                  0x1
#define _PWM2CLK_CLK0_LENGTH                                0x1
#define _PWM2CLK_CLK0_MASK                                  0x1
#define _PWM2CLK_CLK1_POSN                                  0x1
#define _PWM2CLK_CLK1_POSITION                              0x1
#define _PWM2CLK_CLK1_SIZE                                  0x1
#define _PWM2CLK_CLK1_LENGTH                                0x1
#define _PWM2CLK_CLK1_MASK                                  0x2
#define _PWM2CLK_CLK2_POSN                                  0x2
#define _PWM2CLK_CLK2_POSITION                              0x2
#define _PWM2CLK_CLK2_SIZE                                  0x1
#define _PWM2CLK_CLK2_LENGTH                                0x1
#define _PWM2CLK_CLK2_MASK                                  0x4
#define _PWM2CLK_CLK3_POSN                                  0x3
#define _PWM2CLK_CLK3_POSITION                              0x3
#define _PWM2CLK_CLK3_SIZE                                  0x1
#define _PWM2CLK_CLK3_LENGTH                                0x1
#define _PWM2CLK_CLK3_MASK                                  0x8

// Register: PWM2LDS
#define PWM2LDS PWM2LDS
extern volatile unsigned char           PWM2LDS             __at(0x164);
#ifndef _LIB_BUILD
asm("PWM2LDS equ 0164h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LDS                    :8;
    };
    struct {
        unsigned LDS0                   :1;
        unsigned LDS1                   :1;
        unsigned LDS2                   :1;
        unsigned LDS3                   :1;
    };
} PWM2LDSbits_t;
extern volatile PWM2LDSbits_t PWM2LDSbits __at(0x164);
// bitfield macros
#define _PWM2LDS_LDS_POSN                                   0x0
#define _PWM2LDS_LDS_POSITION                               0x0
#define _PWM2LDS_LDS_SIZE                                   0x8
#define _PWM2LDS_LDS_LENGTH                                 0x8
#define _PWM2LDS_LDS_MASK                                   0xFF
#define _PWM2LDS_LDS0_POSN                                  0x0
#define _PWM2LDS_LDS0_POSITION                              0x0
#define _PWM2LDS_LDS0_SIZE                                  0x1
#define _PWM2LDS_LDS0_LENGTH                                0x1
#define _PWM2LDS_LDS0_MASK                                  0x1
#define _PWM2LDS_LDS1_POSN                                  0x1
#define _PWM2LDS_LDS1_POSITION                              0x1
#define _PWM2LDS_LDS1_SIZE                                  0x1
#define _PWM2LDS_LDS1_LENGTH                                0x1
#define _PWM2LDS_LDS1_MASK                                  0x2
#define _PWM2LDS_LDS2_POSN                                  0x2
#define _PWM2LDS_LDS2_POSITION                              0x2
#define _PWM2LDS_LDS2_SIZE                                  0x1
#define _PWM2LDS_LDS2_LENGTH                                0x1
#define _PWM2LDS_LDS2_MASK                                  0x4
#define _PWM2LDS_LDS3_POSN                                  0x3
#define _PWM2LDS_LDS3_POSITION                              0x3
#define _PWM2LDS_LDS3_SIZE                                  0x1
#define _PWM2LDS_LDS3_LENGTH                                0x1
#define _PWM2LDS_LDS3_MASK                                  0x8

// Register: PWM2PR
#define PWM2PR PWM2PR
extern volatile unsigned short          PWM2PR              __at(0x165);
#ifndef _LIB_BUILD
asm("PWM2PR equ 0165h");
#endif

// Register: PWM2PRL
#define PWM2PRL PWM2PRL
extern volatile unsigned char           PWM2PRL             __at(0x165);
#ifndef _LIB_BUILD
asm("PWM2PRL equ 0165h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRL                    :8;
    };
} PWM2PRLbits_t;
extern volatile PWM2PRLbits_t PWM2PRLbits __at(0x165);
// bitfield macros
#define _PWM2PRL_PRL_POSN                                   0x0
#define _PWM2PRL_PRL_POSITION                               0x0
#define _PWM2PRL_PRL_SIZE                                   0x8
#define _PWM2PRL_PRL_LENGTH                                 0x8
#define _PWM2PRL_PRL_MASK                                   0xFF

// Register: PWM2PRH
#define PWM2PRH PWM2PRH
extern volatile unsigned char           PWM2PRH             __at(0x166);
#ifndef _LIB_BUILD
asm("PWM2PRH equ 0166h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRH                    :8;
    };
} PWM2PRHbits_t;
extern volatile PWM2PRHbits_t PWM2PRHbits __at(0x166);
// bitfield macros
#define _PWM2PRH_PRH_POSN                                   0x0
#define _PWM2PRH_PRH_POSITION                               0x0
#define _PWM2PRH_PRH_SIZE                                   0x8
#define _PWM2PRH_PRH_LENGTH                                 0x8
#define _PWM2PRH_PRH_MASK                                   0xFF

// Register: PWM2CPRE
#define PWM2CPRE PWM2CPRE
extern volatile unsigned char           PWM2CPRE            __at(0x167);
#ifndef _LIB_BUILD
asm("PWM2CPRE equ 0167h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CPRE                   :8;
    };
} PWM2CPREbits_t;
extern volatile PWM2CPREbits_t PWM2CPREbits __at(0x167);
// bitfield macros
#define _PWM2CPRE_CPRE_POSN                                 0x0
#define _PWM2CPRE_CPRE_POSITION                             0x0
#define _PWM2CPRE_CPRE_SIZE                                 0x8
#define _PWM2CPRE_CPRE_LENGTH                               0x8
#define _PWM2CPRE_CPRE_MASK                                 0xFF

// Register: PWM2PIPOS
#define PWM2PIPOS PWM2PIPOS
extern volatile unsigned char           PWM2PIPOS           __at(0x168);
#ifndef _LIB_BUILD
asm("PWM2PIPOS equ 0168h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PIPOS                  :8;
    };
} PWM2PIPOSbits_t;
extern volatile PWM2PIPOSbits_t PWM2PIPOSbits __at(0x168);
// bitfield macros
#define _PWM2PIPOS_PIPOS_POSN                               0x0
#define _PWM2PIPOS_PIPOS_POSITION                           0x0
#define _PWM2PIPOS_PIPOS_SIZE                               0x8
#define _PWM2PIPOS_PIPOS_LENGTH                             0x8
#define _PWM2PIPOS_PIPOS_MASK                               0xFF

// Register: PWM2GIR
#define PWM2GIR PWM2GIR
extern volatile unsigned char           PWM2GIR             __at(0x169);
#ifndef _LIB_BUILD
asm("PWM2GIR equ 0169h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1IF                 :1;
        unsigned S1P2IF                 :1;
    };
} PWM2GIRbits_t;
extern volatile PWM2GIRbits_t PWM2GIRbits __at(0x169);
// bitfield macros
#define _PWM2GIR_S1P1IF_POSN                                0x0
#define _PWM2GIR_S1P1IF_POSITION                            0x0
#define _PWM2GIR_S1P1IF_SIZE                                0x1
#define _PWM2GIR_S1P1IF_LENGTH                              0x1
#define _PWM2GIR_S1P1IF_MASK                                0x1
#define _PWM2GIR_S1P2IF_POSN                                0x1
#define _PWM2GIR_S1P2IF_POSITION                            0x1
#define _PWM2GIR_S1P2IF_SIZE                                0x1
#define _PWM2GIR_S1P2IF_LENGTH                              0x1
#define _PWM2GIR_S1P2IF_MASK                                0x2

// Register: PWM2GIE
#define PWM2GIE PWM2GIE
extern volatile unsigned char           PWM2GIE             __at(0x16A);
#ifndef _LIB_BUILD
asm("PWM2GIE equ 016Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1IE                 :1;
        unsigned S1P2IE                 :1;
    };
} PWM2GIEbits_t;
extern volatile PWM2GIEbits_t PWM2GIEbits __at(0x16A);
// bitfield macros
#define _PWM2GIE_S1P1IE_POSN                                0x0
#define _PWM2GIE_S1P1IE_POSITION                            0x0
#define _PWM2GIE_S1P1IE_SIZE                                0x1
#define _PWM2GIE_S1P1IE_LENGTH                              0x1
#define _PWM2GIE_S1P1IE_MASK                                0x1
#define _PWM2GIE_S1P2IE_POSN                                0x1
#define _PWM2GIE_S1P2IE_POSITION                            0x1
#define _PWM2GIE_S1P2IE_SIZE                                0x1
#define _PWM2GIE_S1P2IE_LENGTH                              0x1
#define _PWM2GIE_S1P2IE_MASK                                0x2

// Register: PWM2CON
#define PWM2CON PWM2CON
extern volatile unsigned char           PWM2CON             __at(0x16B);
#ifndef _LIB_BUILD
asm("PWM2CON equ 016Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERSNOW                 :1;
        unsigned ERSPOL                 :1;
        unsigned LD                     :1;
        unsigned                        :4;
        unsigned EN                     :1;
    };
} PWM2CONbits_t;
extern volatile PWM2CONbits_t PWM2CONbits __at(0x16B);
// bitfield macros
#define _PWM2CON_ERSNOW_POSN                                0x0
#define _PWM2CON_ERSNOW_POSITION                            0x0
#define _PWM2CON_ERSNOW_SIZE                                0x1
#define _PWM2CON_ERSNOW_LENGTH                              0x1
#define _PWM2CON_ERSNOW_MASK                                0x1
#define _PWM2CON_ERSPOL_POSN                                0x1
#define _PWM2CON_ERSPOL_POSITION                            0x1
#define _PWM2CON_ERSPOL_SIZE                                0x1
#define _PWM2CON_ERSPOL_LENGTH                              0x1
#define _PWM2CON_ERSPOL_MASK                                0x2
#define _PWM2CON_LD_POSN                                    0x2
#define _PWM2CON_LD_POSITION                                0x2
#define _PWM2CON_LD_SIZE                                    0x1
#define _PWM2CON_LD_LENGTH                                  0x1
#define _PWM2CON_LD_MASK                                    0x4
#define _PWM2CON_EN_POSN                                    0x7
#define _PWM2CON_EN_POSITION                                0x7
#define _PWM2CON_EN_SIZE                                    0x1
#define _PWM2CON_EN_LENGTH                                  0x1
#define _PWM2CON_EN_MASK                                    0x80

// Register: PWM2S1CFG
#define PWM2S1CFG PWM2S1CFG
extern volatile unsigned char           PWM2S1CFG           __at(0x16C);
#ifndef _LIB_BUILD
asm("PWM2S1CFG equ 016Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned PPEN                   :1;
        unsigned                        :2;
        unsigned POL1                   :1;
        unsigned POL2                   :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} PWM2S1CFGbits_t;
extern volatile PWM2S1CFGbits_t PWM2S1CFGbits __at(0x16C);
// bitfield macros
#define _PWM2S1CFG_MODE_POSN                                0x0
#define _PWM2S1CFG_MODE_POSITION                            0x0
#define _PWM2S1CFG_MODE_SIZE                                0x3
#define _PWM2S1CFG_MODE_LENGTH                              0x3
#define _PWM2S1CFG_MODE_MASK                                0x7
#define _PWM2S1CFG_PPEN_POSN                                0x3
#define _PWM2S1CFG_PPEN_POSITION                            0x3
#define _PWM2S1CFG_PPEN_SIZE                                0x1
#define _PWM2S1CFG_PPEN_LENGTH                              0x1
#define _PWM2S1CFG_PPEN_MASK                                0x8
#define _PWM2S1CFG_POL1_POSN                                0x6
#define _PWM2S1CFG_POL1_POSITION                            0x6
#define _PWM2S1CFG_POL1_SIZE                                0x1
#define _PWM2S1CFG_POL1_LENGTH                              0x1
#define _PWM2S1CFG_POL1_MASK                                0x40
#define _PWM2S1CFG_POL2_POSN                                0x7
#define _PWM2S1CFG_POL2_POSITION                            0x7
#define _PWM2S1CFG_POL2_SIZE                                0x1
#define _PWM2S1CFG_POL2_LENGTH                              0x1
#define _PWM2S1CFG_POL2_MASK                                0x80
#define _PWM2S1CFG_MODE0_POSN                               0x0
#define _PWM2S1CFG_MODE0_POSITION                           0x0
#define _PWM2S1CFG_MODE0_SIZE                               0x1
#define _PWM2S1CFG_MODE0_LENGTH                             0x1
#define _PWM2S1CFG_MODE0_MASK                               0x1
#define _PWM2S1CFG_MODE1_POSN                               0x1
#define _PWM2S1CFG_MODE1_POSITION                           0x1
#define _PWM2S1CFG_MODE1_SIZE                               0x1
#define _PWM2S1CFG_MODE1_LENGTH                             0x1
#define _PWM2S1CFG_MODE1_MASK                               0x2
#define _PWM2S1CFG_MODE2_POSN                               0x2
#define _PWM2S1CFG_MODE2_POSITION                           0x2
#define _PWM2S1CFG_MODE2_SIZE                               0x1
#define _PWM2S1CFG_MODE2_LENGTH                             0x1
#define _PWM2S1CFG_MODE2_MASK                               0x4

// Register: PWM2S1P1
#define PWM2S1P1 PWM2S1P1
extern volatile unsigned short          PWM2S1P1            __at(0x16D);
#ifndef _LIB_BUILD
asm("PWM2S1P1 equ 016Dh");
#endif

// Register: PWM2S1P1L
#define PWM2S1P1L PWM2S1P1L
extern volatile unsigned char           PWM2S1P1L           __at(0x16D);
#ifndef _LIB_BUILD
asm("PWM2S1P1L equ 016Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1L                  :8;
    };
} PWM2S1P1Lbits_t;
extern volatile PWM2S1P1Lbits_t PWM2S1P1Lbits __at(0x16D);
// bitfield macros
#define _PWM2S1P1L_S1P1L_POSN                               0x0
#define _PWM2S1P1L_S1P1L_POSITION                           0x0
#define _PWM2S1P1L_S1P1L_SIZE                               0x8
#define _PWM2S1P1L_S1P1L_LENGTH                             0x8
#define _PWM2S1P1L_S1P1L_MASK                               0xFF

// Register: PWM2S1P1H
#define PWM2S1P1H PWM2S1P1H
extern volatile unsigned char           PWM2S1P1H           __at(0x16E);
#ifndef _LIB_BUILD
asm("PWM2S1P1H equ 016Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P1H                  :8;
    };
} PWM2S1P1Hbits_t;
extern volatile PWM2S1P1Hbits_t PWM2S1P1Hbits __at(0x16E);
// bitfield macros
#define _PWM2S1P1H_S1P1H_POSN                               0x0
#define _PWM2S1P1H_S1P1H_POSITION                           0x0
#define _PWM2S1P1H_S1P1H_SIZE                               0x8
#define _PWM2S1P1H_S1P1H_LENGTH                             0x8
#define _PWM2S1P1H_S1P1H_MASK                               0xFF

// Register: PWM2S1P2
#define PWM2S1P2 PWM2S1P2
extern volatile unsigned short          PWM2S1P2            __at(0x16F);
#ifndef _LIB_BUILD
asm("PWM2S1P2 equ 016Fh");
#endif

// Register: PWM2S1P2L
#define PWM2S1P2L PWM2S1P2L
extern volatile unsigned char           PWM2S1P2L           __at(0x16F);
#ifndef _LIB_BUILD
asm("PWM2S1P2L equ 016Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P2L                  :8;
    };
} PWM2S1P2Lbits_t;
extern volatile PWM2S1P2Lbits_t PWM2S1P2Lbits __at(0x16F);
// bitfield macros
#define _PWM2S1P2L_S1P2L_POSN                               0x0
#define _PWM2S1P2L_S1P2L_POSITION                           0x0
#define _PWM2S1P2L_S1P2L_SIZE                               0x8
#define _PWM2S1P2L_S1P2L_LENGTH                             0x8
#define _PWM2S1P2L_S1P2L_MASK                               0xFF

// Register: PWM2S1P2H
#define PWM2S1P2H PWM2S1P2H
extern volatile unsigned char           PWM2S1P2H           __at(0x170);
#ifndef _LIB_BUILD
asm("PWM2S1P2H equ 0170h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned S1P2H                  :8;
    };
} PWM2S1P2Hbits_t;
extern volatile PWM2S1P2Hbits_t PWM2S1P2Hbits __at(0x170);
// bitfield macros
#define _PWM2S1P2H_S1P2H_POSN                               0x0
#define _PWM2S1P2H_S1P2H_POSITION                           0x0
#define _PWM2S1P2H_S1P2H_SIZE                               0x8
#define _PWM2S1P2H_S1P2H_LENGTH                             0x8
#define _PWM2S1P2H_S1P2H_MASK                               0xFF

// Register: CWG1CLK
#define CWG1CLK CWG1CLK
extern volatile unsigned char           CWG1CLK             __at(0x199);
#ifndef _LIB_BUILD
asm("CWG1CLK equ 0199h");
#endif
// aliases
extern volatile unsigned char           CWG1CLKCON          __at(0x199);
#ifndef _LIB_BUILD
asm("CWG1CLKCON equ 0199h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG1CS                 :1;
    };
} CWG1CLKbits_t;
extern volatile CWG1CLKbits_t CWG1CLKbits __at(0x199);
// bitfield macros
#define _CWG1CLK_CS_POSN                                    0x0
#define _CWG1CLK_CS_POSITION                                0x0
#define _CWG1CLK_CS_SIZE                                    0x1
#define _CWG1CLK_CS_LENGTH                                  0x1
#define _CWG1CLK_CS_MASK                                    0x1
#define _CWG1CLK_CWG1CS_POSN                                0x0
#define _CWG1CLK_CWG1CS_POSITION                            0x0
#define _CWG1CLK_CWG1CS_SIZE                                0x1
#define _CWG1CLK_CWG1CS_LENGTH                              0x1
#define _CWG1CLK_CWG1CS_MASK                                0x1
// alias bitfield definitions
typedef union {
    struct {
        unsigned CS                     :1;
    };
    struct {
        unsigned CWG1CS                 :1;
    };
} CWG1CLKCONbits_t;
extern volatile CWG1CLKCONbits_t CWG1CLKCONbits __at(0x199);
// bitfield macros
#define _CWG1CLKCON_CS_POSN                                 0x0
#define _CWG1CLKCON_CS_POSITION                             0x0
#define _CWG1CLKCON_CS_SIZE                                 0x1
#define _CWG1CLKCON_CS_LENGTH                               0x1
#define _CWG1CLKCON_CS_MASK                                 0x1
#define _CWG1CLKCON_CWG1CS_POSN                             0x0
#define _CWG1CLKCON_CWG1CS_POSITION                         0x0
#define _CWG1CLKCON_CWG1CS_SIZE                             0x1
#define _CWG1CLKCON_CWG1CS_LENGTH                           0x1
#define _CWG1CLKCON_CWG1CS_MASK                             0x1

// Register: CWG1ISM
#define CWG1ISM CWG1ISM
extern volatile unsigned char           CWG1ISM             __at(0x19A);
#ifndef _LIB_BUILD
asm("CWG1ISM equ 019Ah");
#endif
// aliases
extern volatile unsigned char           CWG1DAT             __at(0x19A);
#ifndef _LIB_BUILD
asm("CWG1DAT equ 019Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ISM                    :8;
    };
    struct {
        unsigned CWG1ISM                :8;
    };
    struct {
        unsigned ISM0                   :1;
        unsigned ISM1                   :1;
        unsigned ISM2                   :1;
        unsigned ISM3                   :1;
        unsigned ISM4                   :1;
    };
} CWG1ISMbits_t;
extern volatile CWG1ISMbits_t CWG1ISMbits __at(0x19A);
// bitfield macros
#define _CWG1ISM_ISM_POSN                                   0x0
#define _CWG1ISM_ISM_POSITION                               0x0
#define _CWG1ISM_ISM_SIZE                                   0x8
#define _CWG1ISM_ISM_LENGTH                                 0x8
#define _CWG1ISM_ISM_MASK                                   0xFF
#define _CWG1ISM_CWG1ISM_POSN                               0x0
#define _CWG1ISM_CWG1ISM_POSITION                           0x0
#define _CWG1ISM_CWG1ISM_SIZE                               0x8
#define _CWG1ISM_CWG1ISM_LENGTH                             0x8
#define _CWG1ISM_CWG1ISM_MASK                               0xFF
#define _CWG1ISM_ISM0_POSN                                  0x0
#define _CWG1ISM_ISM0_POSITION                              0x0
#define _CWG1ISM_ISM0_SIZE                                  0x1
#define _CWG1ISM_ISM0_LENGTH                                0x1
#define _CWG1ISM_ISM0_MASK                                  0x1
#define _CWG1ISM_ISM1_POSN                                  0x1
#define _CWG1ISM_ISM1_POSITION                              0x1
#define _CWG1ISM_ISM1_SIZE                                  0x1
#define _CWG1ISM_ISM1_LENGTH                                0x1
#define _CWG1ISM_ISM1_MASK                                  0x2
#define _CWG1ISM_ISM2_POSN                                  0x2
#define _CWG1ISM_ISM2_POSITION                              0x2
#define _CWG1ISM_ISM2_SIZE                                  0x1
#define _CWG1ISM_ISM2_LENGTH                                0x1
#define _CWG1ISM_ISM2_MASK                                  0x4
#define _CWG1ISM_ISM3_POSN                                  0x3
#define _CWG1ISM_ISM3_POSITION                              0x3
#define _CWG1ISM_ISM3_SIZE                                  0x1
#define _CWG1ISM_ISM3_LENGTH                                0x1
#define _CWG1ISM_ISM3_MASK                                  0x8
#define _CWG1ISM_ISM4_POSN                                  0x4
#define _CWG1ISM_ISM4_POSITION                              0x4
#define _CWG1ISM_ISM4_SIZE                                  0x1
#define _CWG1ISM_ISM4_LENGTH                                0x1
#define _CWG1ISM_ISM4_MASK                                  0x10
// alias bitfield definitions
typedef union {
    struct {
        unsigned ISM                    :8;
    };
    struct {
        unsigned CWG1ISM                :8;
    };
    struct {
        unsigned ISM0                   :1;
        unsigned ISM1                   :1;
        unsigned ISM2                   :1;
        unsigned ISM3                   :1;
        unsigned ISM4                   :1;
    };
} CWG1DATbits_t;
extern volatile CWG1DATbits_t CWG1DATbits __at(0x19A);
// bitfield macros
#define _CWG1DAT_ISM_POSN                                   0x0
#define _CWG1DAT_ISM_POSITION                               0x0
#define _CWG1DAT_ISM_SIZE                                   0x8
#define _CWG1DAT_ISM_LENGTH                                 0x8
#define _CWG1DAT_ISM_MASK                                   0xFF
#define _CWG1DAT_CWG1ISM_POSN                               0x0
#define _CWG1DAT_CWG1ISM_POSITION                           0x0
#define _CWG1DAT_CWG1ISM_SIZE                               0x8
#define _CWG1DAT_CWG1ISM_LENGTH                             0x8
#define _CWG1DAT_CWG1ISM_MASK                               0xFF
#define _CWG1DAT_ISM0_POSN                                  0x0
#define _CWG1DAT_ISM0_POSITION                              0x0
#define _CWG1DAT_ISM0_SIZE                                  0x1
#define _CWG1DAT_ISM0_LENGTH                                0x1
#define _CWG1DAT_ISM0_MASK                                  0x1
#define _CWG1DAT_ISM1_POSN                                  0x1
#define _CWG1DAT_ISM1_POSITION                              0x1
#define _CWG1DAT_ISM1_SIZE                                  0x1
#define _CWG1DAT_ISM1_LENGTH                                0x1
#define _CWG1DAT_ISM1_MASK                                  0x2
#define _CWG1DAT_ISM2_POSN                                  0x2
#define _CWG1DAT_ISM2_POSITION                              0x2
#define _CWG1DAT_ISM2_SIZE                                  0x1
#define _CWG1DAT_ISM2_LENGTH                                0x1
#define _CWG1DAT_ISM2_MASK                                  0x4
#define _CWG1DAT_ISM3_POSN                                  0x3
#define _CWG1DAT_ISM3_POSITION                              0x3
#define _CWG1DAT_ISM3_SIZE                                  0x1
#define _CWG1DAT_ISM3_LENGTH                                0x1
#define _CWG1DAT_ISM3_MASK                                  0x8
#define _CWG1DAT_ISM4_POSN                                  0x4
#define _CWG1DAT_ISM4_POSITION                              0x4
#define _CWG1DAT_ISM4_SIZE                                  0x1
#define _CWG1DAT_ISM4_LENGTH                                0x1
#define _CWG1DAT_ISM4_MASK                                  0x10

// Register: CWG1DBR
#define CWG1DBR CWG1DBR
extern volatile unsigned char           CWG1DBR             __at(0x19B);
#ifndef _LIB_BUILD
asm("CWG1DBR equ 019Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBR                    :8;
    };
    struct {
        unsigned DBR0                   :1;
        unsigned DBR1                   :1;
        unsigned DBR2                   :1;
        unsigned DBR3                   :1;
        unsigned DBR4                   :1;
        unsigned DBR5                   :1;
    };
    struct {
        unsigned CWG1DBR                :8;
    };
    struct {
        unsigned CWG1DBR0               :1;
        unsigned CWG1DBR1               :1;
        unsigned CWG1DBR2               :1;
        unsigned CWG1DBR3               :1;
        unsigned CWG1DBR4               :1;
        unsigned CWG1DBR5               :1;
    };
} CWG1DBRbits_t;
extern volatile CWG1DBRbits_t CWG1DBRbits __at(0x19B);
// bitfield macros
#define _CWG1DBR_DBR_POSN                                   0x0
#define _CWG1DBR_DBR_POSITION                               0x0
#define _CWG1DBR_DBR_SIZE                                   0x8
#define _CWG1DBR_DBR_LENGTH                                 0x8
#define _CWG1DBR_DBR_MASK                                   0xFF
#define _CWG1DBR_DBR0_POSN                                  0x0
#define _CWG1DBR_DBR0_POSITION                              0x0
#define _CWG1DBR_DBR0_SIZE                                  0x1
#define _CWG1DBR_DBR0_LENGTH                                0x1
#define _CWG1DBR_DBR0_MASK                                  0x1
#define _CWG1DBR_DBR1_POSN                                  0x1
#define _CWG1DBR_DBR1_POSITION                              0x1
#define _CWG1DBR_DBR1_SIZE                                  0x1
#define _CWG1DBR_DBR1_LENGTH                                0x1
#define _CWG1DBR_DBR1_MASK                                  0x2
#define _CWG1DBR_DBR2_POSN                                  0x2
#define _CWG1DBR_DBR2_POSITION                              0x2
#define _CWG1DBR_DBR2_SIZE                                  0x1
#define _CWG1DBR_DBR2_LENGTH                                0x1
#define _CWG1DBR_DBR2_MASK                                  0x4
#define _CWG1DBR_DBR3_POSN                                  0x3
#define _CWG1DBR_DBR3_POSITION                              0x3
#define _CWG1DBR_DBR3_SIZE                                  0x1
#define _CWG1DBR_DBR3_LENGTH                                0x1
#define _CWG1DBR_DBR3_MASK                                  0x8
#define _CWG1DBR_DBR4_POSN                                  0x4
#define _CWG1DBR_DBR4_POSITION                              0x4
#define _CWG1DBR_DBR4_SIZE                                  0x1
#define _CWG1DBR_DBR4_LENGTH                                0x1
#define _CWG1DBR_DBR4_MASK                                  0x10
#define _CWG1DBR_DBR5_POSN                                  0x5
#define _CWG1DBR_DBR5_POSITION                              0x5
#define _CWG1DBR_DBR5_SIZE                                  0x1
#define _CWG1DBR_DBR5_LENGTH                                0x1
#define _CWG1DBR_DBR5_MASK                                  0x20
#define _CWG1DBR_CWG1DBR_POSN                               0x0
#define _CWG1DBR_CWG1DBR_POSITION                           0x0
#define _CWG1DBR_CWG1DBR_SIZE                               0x8
#define _CWG1DBR_CWG1DBR_LENGTH                             0x8
#define _CWG1DBR_CWG1DBR_MASK                               0xFF
#define _CWG1DBR_CWG1DBR0_POSN                              0x0
#define _CWG1DBR_CWG1DBR0_POSITION                          0x0
#define _CWG1DBR_CWG1DBR0_SIZE                              0x1
#define _CWG1DBR_CWG1DBR0_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR0_MASK                              0x1
#define _CWG1DBR_CWG1DBR1_POSN                              0x1
#define _CWG1DBR_CWG1DBR1_POSITION                          0x1
#define _CWG1DBR_CWG1DBR1_SIZE                              0x1
#define _CWG1DBR_CWG1DBR1_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR1_MASK                              0x2
#define _CWG1DBR_CWG1DBR2_POSN                              0x2
#define _CWG1DBR_CWG1DBR2_POSITION                          0x2
#define _CWG1DBR_CWG1DBR2_SIZE                              0x1
#define _CWG1DBR_CWG1DBR2_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR2_MASK                              0x4
#define _CWG1DBR_CWG1DBR3_POSN                              0x3
#define _CWG1DBR_CWG1DBR3_POSITION                          0x3
#define _CWG1DBR_CWG1DBR3_SIZE                              0x1
#define _CWG1DBR_CWG1DBR3_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR3_MASK                              0x8
#define _CWG1DBR_CWG1DBR4_POSN                              0x4
#define _CWG1DBR_CWG1DBR4_POSITION                          0x4
#define _CWG1DBR_CWG1DBR4_SIZE                              0x1
#define _CWG1DBR_CWG1DBR4_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR4_MASK                              0x10
#define _CWG1DBR_CWG1DBR5_POSN                              0x5
#define _CWG1DBR_CWG1DBR5_POSITION                          0x5
#define _CWG1DBR_CWG1DBR5_SIZE                              0x1
#define _CWG1DBR_CWG1DBR5_LENGTH                            0x1
#define _CWG1DBR_CWG1DBR5_MASK                              0x20

// Register: CWG1DBF
#define CWG1DBF CWG1DBF
extern volatile unsigned char           CWG1DBF             __at(0x19C);
#ifndef _LIB_BUILD
asm("CWG1DBF equ 019Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DBF                    :8;
    };
    struct {
        unsigned DBF0                   :1;
        unsigned DBF1                   :1;
        unsigned DBF2                   :1;
        unsigned DBF3                   :1;
        unsigned DBF4                   :1;
        unsigned DBF5                   :1;
    };
    struct {
        unsigned CWG1DBF                :8;
    };
    struct {
        unsigned CWG1DBF0               :1;
        unsigned CWG1DBF1               :1;
        unsigned CWG1DBF2               :1;
        unsigned CWG1DBF3               :1;
        unsigned CWG1DBF4               :1;
        unsigned CWG1DBF5               :1;
    };
} CWG1DBFbits_t;
extern volatile CWG1DBFbits_t CWG1DBFbits __at(0x19C);
// bitfield macros
#define _CWG1DBF_DBF_POSN                                   0x0
#define _CWG1DBF_DBF_POSITION                               0x0
#define _CWG1DBF_DBF_SIZE                                   0x8
#define _CWG1DBF_DBF_LENGTH                                 0x8
#define _CWG1DBF_DBF_MASK                                   0xFF
#define _CWG1DBF_DBF0_POSN                                  0x0
#define _CWG1DBF_DBF0_POSITION                              0x0
#define _CWG1DBF_DBF0_SIZE                                  0x1
#define _CWG1DBF_DBF0_LENGTH                                0x1
#define _CWG1DBF_DBF0_MASK                                  0x1
#define _CWG1DBF_DBF1_POSN                                  0x1
#define _CWG1DBF_DBF1_POSITION                              0x1
#define _CWG1DBF_DBF1_SIZE                                  0x1
#define _CWG1DBF_DBF1_LENGTH                                0x1
#define _CWG1DBF_DBF1_MASK                                  0x2
#define _CWG1DBF_DBF2_POSN                                  0x2
#define _CWG1DBF_DBF2_POSITION                              0x2
#define _CWG1DBF_DBF2_SIZE                                  0x1
#define _CWG1DBF_DBF2_LENGTH                                0x1
#define _CWG1DBF_DBF2_MASK                                  0x4
#define _CWG1DBF_DBF3_POSN                                  0x3
#define _CWG1DBF_DBF3_POSITION                              0x3
#define _CWG1DBF_DBF3_SIZE                                  0x1
#define _CWG1DBF_DBF3_LENGTH                                0x1
#define _CWG1DBF_DBF3_MASK                                  0x8
#define _CWG1DBF_DBF4_POSN                                  0x4
#define _CWG1DBF_DBF4_POSITION                              0x4
#define _CWG1DBF_DBF4_SIZE                                  0x1
#define _CWG1DBF_DBF4_LENGTH                                0x1
#define _CWG1DBF_DBF4_MASK                                  0x10
#define _CWG1DBF_DBF5_POSN                                  0x5
#define _CWG1DBF_DBF5_POSITION                              0x5
#define _CWG1DBF_DBF5_SIZE                                  0x1
#define _CWG1DBF_DBF5_LENGTH                                0x1
#define _CWG1DBF_DBF5_MASK                                  0x20
#define _CWG1DBF_CWG1DBF_POSN                               0x0
#define _CWG1DBF_CWG1DBF_POSITION                           0x0
#define _CWG1DBF_CWG1DBF_SIZE                               0x8
#define _CWG1DBF_CWG1DBF_LENGTH                             0x8
#define _CWG1DBF_CWG1DBF_MASK                               0xFF
#define _CWG1DBF_CWG1DBF0_POSN                              0x0
#define _CWG1DBF_CWG1DBF0_POSITION                          0x0
#define _CWG1DBF_CWG1DBF0_SIZE                              0x1
#define _CWG1DBF_CWG1DBF0_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF0_MASK                              0x1
#define _CWG1DBF_CWG1DBF1_POSN                              0x1
#define _CWG1DBF_CWG1DBF1_POSITION                          0x1
#define _CWG1DBF_CWG1DBF1_SIZE                              0x1
#define _CWG1DBF_CWG1DBF1_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF1_MASK                              0x2
#define _CWG1DBF_CWG1DBF2_POSN                              0x2
#define _CWG1DBF_CWG1DBF2_POSITION                          0x2
#define _CWG1DBF_CWG1DBF2_SIZE                              0x1
#define _CWG1DBF_CWG1DBF2_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF2_MASK                              0x4
#define _CWG1DBF_CWG1DBF3_POSN                              0x3
#define _CWG1DBF_CWG1DBF3_POSITION                          0x3
#define _CWG1DBF_CWG1DBF3_SIZE                              0x1
#define _CWG1DBF_CWG1DBF3_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF3_MASK                              0x8
#define _CWG1DBF_CWG1DBF4_POSN                              0x4
#define _CWG1DBF_CWG1DBF4_POSITION                          0x4
#define _CWG1DBF_CWG1DBF4_SIZE                              0x1
#define _CWG1DBF_CWG1DBF4_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF4_MASK                              0x10
#define _CWG1DBF_CWG1DBF5_POSN                              0x5
#define _CWG1DBF_CWG1DBF5_POSITION                          0x5
#define _CWG1DBF_CWG1DBF5_SIZE                              0x1
#define _CWG1DBF_CWG1DBF5_LENGTH                            0x1
#define _CWG1DBF_CWG1DBF5_MASK                              0x20

// Register: CWG1CON0
#define CWG1CON0 CWG1CON0
extern volatile unsigned char           CWG1CON0            __at(0x19D);
#ifndef _LIB_BUILD
asm("CWG1CON0 equ 019Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned                        :3;
        unsigned LD                     :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :4;
        unsigned G1EN                   :1;
    };
    struct {
        unsigned CWG1MODE               :3;
        unsigned                        :3;
        unsigned CWG1LD                 :1;
        unsigned CWG1EN                 :1;
    };
    struct {
        unsigned CWG1MODE0              :1;
        unsigned CWG1MODE1              :1;
        unsigned CWG1MODE2              :1;
    };
} CWG1CON0bits_t;
extern volatile CWG1CON0bits_t CWG1CON0bits __at(0x19D);
// bitfield macros
#define _CWG1CON0_MODE_POSN                                 0x0
#define _CWG1CON0_MODE_POSITION                             0x0
#define _CWG1CON0_MODE_SIZE                                 0x3
#define _CWG1CON0_MODE_LENGTH                               0x3
#define _CWG1CON0_MODE_MASK                                 0x7
#define _CWG1CON0_LD_POSN                                   0x6
#define _CWG1CON0_LD_POSITION                               0x6
#define _CWG1CON0_LD_SIZE                                   0x1
#define _CWG1CON0_LD_LENGTH                                 0x1
#define _CWG1CON0_LD_MASK                                   0x40
#define _CWG1CON0_EN_POSN                                   0x7
#define _CWG1CON0_EN_POSITION                               0x7
#define _CWG1CON0_EN_SIZE                                   0x1
#define _CWG1CON0_EN_LENGTH                                 0x1
#define _CWG1CON0_EN_MASK                                   0x80
#define _CWG1CON0_MODE0_POSN                                0x0
#define _CWG1CON0_MODE0_POSITION                            0x0
#define _CWG1CON0_MODE0_SIZE                                0x1
#define _CWG1CON0_MODE0_LENGTH                              0x1
#define _CWG1CON0_MODE0_MASK                                0x1
#define _CWG1CON0_MODE1_POSN                                0x1
#define _CWG1CON0_MODE1_POSITION                            0x1
#define _CWG1CON0_MODE1_SIZE                                0x1
#define _CWG1CON0_MODE1_LENGTH                              0x1
#define _CWG1CON0_MODE1_MASK                                0x2
#define _CWG1CON0_MODE2_POSN                                0x2
#define _CWG1CON0_MODE2_POSITION                            0x2
#define _CWG1CON0_MODE2_SIZE                                0x1
#define _CWG1CON0_MODE2_LENGTH                              0x1
#define _CWG1CON0_MODE2_MASK                                0x4
#define _CWG1CON0_G1EN_POSN                                 0x7
#define _CWG1CON0_G1EN_POSITION                             0x7
#define _CWG1CON0_G1EN_SIZE                                 0x1
#define _CWG1CON0_G1EN_LENGTH                               0x1
#define _CWG1CON0_G1EN_MASK                                 0x80
#define _CWG1CON0_CWG1MODE_POSN                             0x0
#define _CWG1CON0_CWG1MODE_POSITION                         0x0
#define _CWG1CON0_CWG1MODE_SIZE                             0x3
#define _CWG1CON0_CWG1MODE_LENGTH                           0x3
#define _CWG1CON0_CWG1MODE_MASK                             0x7
#define _CWG1CON0_CWG1LD_POSN                               0x6
#define _CWG1CON0_CWG1LD_POSITION                           0x6
#define _CWG1CON0_CWG1LD_SIZE                               0x1
#define _CWG1CON0_CWG1LD_LENGTH                             0x1
#define _CWG1CON0_CWG1LD_MASK                               0x40
#define _CWG1CON0_CWG1EN_POSN                               0x7
#define _CWG1CON0_CWG1EN_POSITION                           0x7
#define _CWG1CON0_CWG1EN_SIZE                               0x1
#define _CWG1CON0_CWG1EN_LENGTH                             0x1
#define _CWG1CON0_CWG1EN_MASK                               0x80
#define _CWG1CON0_CWG1MODE0_POSN                            0x0
#define _CWG1CON0_CWG1MODE0_POSITION                        0x0
#define _CWG1CON0_CWG1MODE0_SIZE                            0x1
#define _CWG1CON0_CWG1MODE0_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE0_MASK                            0x1
#define _CWG1CON0_CWG1MODE1_POSN                            0x1
#define _CWG1CON0_CWG1MODE1_POSITION                        0x1
#define _CWG1CON0_CWG1MODE1_SIZE                            0x1
#define _CWG1CON0_CWG1MODE1_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE1_MASK                            0x2
#define _CWG1CON0_CWG1MODE2_POSN                            0x2
#define _CWG1CON0_CWG1MODE2_POSITION                        0x2
#define _CWG1CON0_CWG1MODE2_SIZE                            0x1
#define _CWG1CON0_CWG1MODE2_LENGTH                          0x1
#define _CWG1CON0_CWG1MODE2_MASK                            0x4

// Register: CWG1CON1
#define CWG1CON1 CWG1CON1
extern volatile unsigned char           CWG1CON1            __at(0x19E);
#ifndef _LIB_BUILD
asm("CWG1CON1 equ 019Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POLA                   :1;
        unsigned POLB                   :1;
        unsigned POLC                   :1;
        unsigned POLD                   :1;
        unsigned                        :1;
        unsigned IN                     :1;
    };
    struct {
        unsigned CWG1POLA               :1;
        unsigned CWG1POLB               :1;
        unsigned CWG1POLC               :1;
        unsigned CWG1POLD               :1;
        unsigned                        :1;
        unsigned CWG1IN                 :1;
    };
} CWG1CON1bits_t;
extern volatile CWG1CON1bits_t CWG1CON1bits __at(0x19E);
// bitfield macros
#define _CWG1CON1_POLA_POSN                                 0x0
#define _CWG1CON1_POLA_POSITION                             0x0
#define _CWG1CON1_POLA_SIZE                                 0x1
#define _CWG1CON1_POLA_LENGTH                               0x1
#define _CWG1CON1_POLA_MASK                                 0x1
#define _CWG1CON1_POLB_POSN                                 0x1
#define _CWG1CON1_POLB_POSITION                             0x1
#define _CWG1CON1_POLB_SIZE                                 0x1
#define _CWG1CON1_POLB_LENGTH                               0x1
#define _CWG1CON1_POLB_MASK                                 0x2
#define _CWG1CON1_POLC_POSN                                 0x2
#define _CWG1CON1_POLC_POSITION                             0x2
#define _CWG1CON1_POLC_SIZE                                 0x1
#define _CWG1CON1_POLC_LENGTH                               0x1
#define _CWG1CON1_POLC_MASK                                 0x4
#define _CWG1CON1_POLD_POSN                                 0x3
#define _CWG1CON1_POLD_POSITION                             0x3
#define _CWG1CON1_POLD_SIZE                                 0x1
#define _CWG1CON1_POLD_LENGTH                               0x1
#define _CWG1CON1_POLD_MASK                                 0x8
#define _CWG1CON1_IN_POSN                                   0x5
#define _CWG1CON1_IN_POSITION                               0x5
#define _CWG1CON1_IN_SIZE                                   0x1
#define _CWG1CON1_IN_LENGTH                                 0x1
#define _CWG1CON1_IN_MASK                                   0x20
#define _CWG1CON1_CWG1POLA_POSN                             0x0
#define _CWG1CON1_CWG1POLA_POSITION                         0x0
#define _CWG1CON1_CWG1POLA_SIZE                             0x1
#define _CWG1CON1_CWG1POLA_LENGTH                           0x1
#define _CWG1CON1_CWG1POLA_MASK                             0x1
#define _CWG1CON1_CWG1POLB_POSN                             0x1
#define _CWG1CON1_CWG1POLB_POSITION                         0x1
#define _CWG1CON1_CWG1POLB_SIZE                             0x1
#define _CWG1CON1_CWG1POLB_LENGTH                           0x1
#define _CWG1CON1_CWG1POLB_MASK                             0x2
#define _CWG1CON1_CWG1POLC_POSN                             0x2
#define _CWG1CON1_CWG1POLC_POSITION                         0x2
#define _CWG1CON1_CWG1POLC_SIZE                             0x1
#define _CWG1CON1_CWG1POLC_LENGTH                           0x1
#define _CWG1CON1_CWG1POLC_MASK                             0x4
#define _CWG1CON1_CWG1POLD_POSN                             0x3
#define _CWG1CON1_CWG1POLD_POSITION                         0x3
#define _CWG1CON1_CWG1POLD_SIZE                             0x1
#define _CWG1CON1_CWG1POLD_LENGTH                           0x1
#define _CWG1CON1_CWG1POLD_MASK                             0x8
#define _CWG1CON1_CWG1IN_POSN                               0x5
#define _CWG1CON1_CWG1IN_POSITION                           0x5
#define _CWG1CON1_CWG1IN_SIZE                               0x1
#define _CWG1CON1_CWG1IN_LENGTH                             0x1
#define _CWG1CON1_CWG1IN_MASK                               0x20

// Register: CWG1AS0
#define CWG1AS0 CWG1AS0
extern volatile unsigned char           CWG1AS0             __at(0x19F);
#ifndef _LIB_BUILD
asm("CWG1AS0 equ 019Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned LSAC                   :2;
        unsigned LSDBD                  :2;
        unsigned REN                    :1;
        unsigned SHUTDOWN               :1;
    };
    struct {
        unsigned                        :2;
        unsigned LSAC0                  :1;
        unsigned LSCA1                  :1;
        unsigned LSDB0                  :1;
        unsigned LSDB1                  :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG1LSAC0              :1;
        unsigned CWG1LSAC1              :1;
        unsigned CWG1LSDB0              :1;
        unsigned CWG1LSDB1              :1;
    };
    struct {
        unsigned                        :2;
        unsigned CWG1LSAC               :2;
        unsigned CWG1LSDB               :2;
    };
    struct {
        unsigned                        :4;
        unsigned LSBD                   :2;
    };
    struct {
        unsigned                        :3;
        unsigned LSAC1                  :1;
        unsigned LSBD0                  :1;
        unsigned LSBD1                  :1;
    };
    struct {
        unsigned                        :4;
        unsigned CWG1LSBD0              :1;
        unsigned CWG1LSBD1              :1;
    };
    struct {
        unsigned                        :4;
        unsigned CWG1LSBD               :2;
    };
} CWG1AS0bits_t;
extern volatile CWG1AS0bits_t CWG1AS0bits __at(0x19F);
// bitfield macros
#define _CWG1AS0_LSAC_POSN                                  0x2
#define _CWG1AS0_LSAC_POSITION                              0x2
#define _CWG1AS0_LSAC_SIZE                                  0x2
#define _CWG1AS0_LSAC_LENGTH                                0x2
#define _CWG1AS0_LSAC_MASK                                  0xC
#define _CWG1AS0_LSDBD_POSN                                 0x4
#define _CWG1AS0_LSDBD_POSITION                             0x4
#define _CWG1AS0_LSDBD_SIZE                                 0x2
#define _CWG1AS0_LSDBD_LENGTH                               0x2
#define _CWG1AS0_LSDBD_MASK                                 0x30
#define _CWG1AS0_REN_POSN                                   0x6
#define _CWG1AS0_REN_POSITION                               0x6
#define _CWG1AS0_REN_SIZE                                   0x1
#define _CWG1AS0_REN_LENGTH                                 0x1
#define _CWG1AS0_REN_MASK                                   0x40
#define _CWG1AS0_SHUTDOWN_POSN                              0x7
#define _CWG1AS0_SHUTDOWN_POSITION                          0x7
#define _CWG1AS0_SHUTDOWN_SIZE                              0x1
#define _CWG1AS0_SHUTDOWN_LENGTH                            0x1
#define _CWG1AS0_SHUTDOWN_MASK                              0x80
#define _CWG1AS0_LSAC0_POSN                                 0x2
#define _CWG1AS0_LSAC0_POSITION                             0x2
#define _CWG1AS0_LSAC0_SIZE                                 0x1
#define _CWG1AS0_LSAC0_LENGTH                               0x1
#define _CWG1AS0_LSAC0_MASK                                 0x4
#define _CWG1AS0_LSCA1_POSN                                 0x3
#define _CWG1AS0_LSCA1_POSITION                             0x3
#define _CWG1AS0_LSCA1_SIZE                                 0x1
#define _CWG1AS0_LSCA1_LENGTH                               0x1
#define _CWG1AS0_LSCA1_MASK                                 0x8
#define _CWG1AS0_LSDB0_POSN                                 0x4
#define _CWG1AS0_LSDB0_POSITION                             0x4
#define _CWG1AS0_LSDB0_SIZE                                 0x1
#define _CWG1AS0_LSDB0_LENGTH                               0x1
#define _CWG1AS0_LSDB0_MASK                                 0x10
#define _CWG1AS0_LSDB1_POSN                                 0x5
#define _CWG1AS0_LSDB1_POSITION                             0x5
#define _CWG1AS0_LSDB1_SIZE                                 0x1
#define _CWG1AS0_LSDB1_LENGTH                               0x1
#define _CWG1AS0_LSDB1_MASK                                 0x20
#define _CWG1AS0_CWG1LSAC0_POSN                             0x2
#define _CWG1AS0_CWG1LSAC0_POSITION                         0x2
#define _CWG1AS0_CWG1LSAC0_SIZE                             0x1
#define _CWG1AS0_CWG1LSAC0_LENGTH                           0x1
#define _CWG1AS0_CWG1LSAC0_MASK                             0x4
#define _CWG1AS0_CWG1LSAC1_POSN                             0x3
#define _CWG1AS0_CWG1LSAC1_POSITION                         0x3
#define _CWG1AS0_CWG1LSAC1_SIZE                             0x1
#define _CWG1AS0_CWG1LSAC1_LENGTH                           0x1
#define _CWG1AS0_CWG1LSAC1_MASK                             0x8
#define _CWG1AS0_CWG1LSDB0_POSN                             0x4
#define _CWG1AS0_CWG1LSDB0_POSITION                         0x4
#define _CWG1AS0_CWG1LSDB0_SIZE                             0x1
#define _CWG1AS0_CWG1LSDB0_LENGTH                           0x1
#define _CWG1AS0_CWG1LSDB0_MASK                             0x10
#define _CWG1AS0_CWG1LSDB1_POSN                             0x5
#define _CWG1AS0_CWG1LSDB1_POSITION                         0x5
#define _CWG1AS0_CWG1LSDB1_SIZE                             0x1
#define _CWG1AS0_CWG1LSDB1_LENGTH                           0x1
#define _CWG1AS0_CWG1LSDB1_MASK                             0x20
#define _CWG1AS0_CWG1LSAC_POSN                              0x2
#define _CWG1AS0_CWG1LSAC_POSITION                          0x2
#define _CWG1AS0_CWG1LSAC_SIZE                              0x2
#define _CWG1AS0_CWG1LSAC_LENGTH                            0x2
#define _CWG1AS0_CWG1LSAC_MASK                              0xC
#define _CWG1AS0_CWG1LSDB_POSN                              0x4
#define _CWG1AS0_CWG1LSDB_POSITION                          0x4
#define _CWG1AS0_CWG1LSDB_SIZE                              0x2
#define _CWG1AS0_CWG1LSDB_LENGTH                            0x2
#define _CWG1AS0_CWG1LSDB_MASK                              0x30
#define _CWG1AS0_LSBD_POSN                                  0x4
#define _CWG1AS0_LSBD_POSITION                              0x4
#define _CWG1AS0_LSBD_SIZE                                  0x2
#define _CWG1AS0_LSBD_LENGTH                                0x2
#define _CWG1AS0_LSBD_MASK                                  0x30
#define _CWG1AS0_LSAC1_POSN                                 0x3
#define _CWG1AS0_LSAC1_POSITION                             0x3
#define _CWG1AS0_LSAC1_SIZE                                 0x1
#define _CWG1AS0_LSAC1_LENGTH                               0x1
#define _CWG1AS0_LSAC1_MASK                                 0x8
#define _CWG1AS0_LSBD0_POSN                                 0x4
#define _CWG1AS0_LSBD0_POSITION                             0x4
#define _CWG1AS0_LSBD0_SIZE                                 0x1
#define _CWG1AS0_LSBD0_LENGTH                               0x1
#define _CWG1AS0_LSBD0_MASK                                 0x10
#define _CWG1AS0_LSBD1_POSN                                 0x5
#define _CWG1AS0_LSBD1_POSITION                             0x5
#define _CWG1AS0_LSBD1_SIZE                                 0x1
#define _CWG1AS0_LSBD1_LENGTH                               0x1
#define _CWG1AS0_LSBD1_MASK                                 0x20
#define _CWG1AS0_CWG1LSBD0_POSN                             0x4
#define _CWG1AS0_CWG1LSBD0_POSITION                         0x4
#define _CWG1AS0_CWG1LSBD0_SIZE                             0x1
#define _CWG1AS0_CWG1LSBD0_LENGTH                           0x1
#define _CWG1AS0_CWG1LSBD0_MASK                             0x10
#define _CWG1AS0_CWG1LSBD1_POSN                             0x5
#define _CWG1AS0_CWG1LSBD1_POSITION                         0x5
#define _CWG1AS0_CWG1LSBD1_SIZE                             0x1
#define _CWG1AS0_CWG1LSBD1_LENGTH                           0x1
#define _CWG1AS0_CWG1LSBD1_MASK                             0x20
#define _CWG1AS0_CWG1LSBD_POSN                              0x4
#define _CWG1AS0_CWG1LSBD_POSITION                          0x4
#define _CWG1AS0_CWG1LSBD_SIZE                              0x2
#define _CWG1AS0_CWG1LSBD_LENGTH                            0x2
#define _CWG1AS0_CWG1LSBD_MASK                              0x30

// Register: CWG1AS1
#define CWG1AS1 CWG1AS1
extern volatile unsigned char           CWG1AS1             __at(0x1A0);
#ifndef _LIB_BUILD
asm("CWG1AS1 equ 01A0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned AS0E                   :1;
        unsigned AS1E                   :1;
        unsigned AS2E                   :1;
        unsigned                        :3;
        unsigned AS6E                   :1;
        unsigned AS7E                   :1;
    };
} CWG1AS1bits_t;
extern volatile CWG1AS1bits_t CWG1AS1bits __at(0x1A0);
// bitfield macros
#define _CWG1AS1_AS0E_POSN                                  0x0
#define _CWG1AS1_AS0E_POSITION                              0x0
#define _CWG1AS1_AS0E_SIZE                                  0x1
#define _CWG1AS1_AS0E_LENGTH                                0x1
#define _CWG1AS1_AS0E_MASK                                  0x1
#define _CWG1AS1_AS1E_POSN                                  0x1
#define _CWG1AS1_AS1E_POSITION                              0x1
#define _CWG1AS1_AS1E_SIZE                                  0x1
#define _CWG1AS1_AS1E_LENGTH                                0x1
#define _CWG1AS1_AS1E_MASK                                  0x2
#define _CWG1AS1_AS2E_POSN                                  0x2
#define _CWG1AS1_AS2E_POSITION                              0x2
#define _CWG1AS1_AS2E_SIZE                                  0x1
#define _CWG1AS1_AS2E_LENGTH                                0x1
#define _CWG1AS1_AS2E_MASK                                  0x4
#define _CWG1AS1_AS6E_POSN                                  0x6
#define _CWG1AS1_AS6E_POSITION                              0x6
#define _CWG1AS1_AS6E_SIZE                                  0x1
#define _CWG1AS1_AS6E_LENGTH                                0x1
#define _CWG1AS1_AS6E_MASK                                  0x40
#define _CWG1AS1_AS7E_POSN                                  0x7
#define _CWG1AS1_AS7E_POSITION                              0x7
#define _CWG1AS1_AS7E_SIZE                                  0x1
#define _CWG1AS1_AS7E_LENGTH                                0x1
#define _CWG1AS1_AS7E_MASK                                  0x80

// Register: CWG1STR
#define CWG1STR CWG1STR
extern volatile unsigned char           CWG1STR             __at(0x1A1);
#ifndef _LIB_BUILD
asm("CWG1STR equ 01A1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STRA                   :1;
        unsigned STRB                   :1;
        unsigned STRC                   :1;
        unsigned STRD                   :1;
        unsigned OVRA                   :1;
        unsigned OVRB                   :1;
        unsigned OVRC                   :1;
        unsigned OVRD                   :1;
    };
    struct {
        unsigned CWG1STRA               :1;
        unsigned CWG1STRB               :1;
        unsigned CWG1STRC               :1;
        unsigned CWG1STRD               :1;
        unsigned CWG1OVRA               :1;
        unsigned CWG1OVRB               :1;
        unsigned CWG1OVRC               :1;
        unsigned CWG1OVRD               :1;
    };
} CWG1STRbits_t;
extern volatile CWG1STRbits_t CWG1STRbits __at(0x1A1);
// bitfield macros
#define _CWG1STR_STRA_POSN                                  0x0
#define _CWG1STR_STRA_POSITION                              0x0
#define _CWG1STR_STRA_SIZE                                  0x1
#define _CWG1STR_STRA_LENGTH                                0x1
#define _CWG1STR_STRA_MASK                                  0x1
#define _CWG1STR_STRB_POSN                                  0x1
#define _CWG1STR_STRB_POSITION                              0x1
#define _CWG1STR_STRB_SIZE                                  0x1
#define _CWG1STR_STRB_LENGTH                                0x1
#define _CWG1STR_STRB_MASK                                  0x2
#define _CWG1STR_STRC_POSN                                  0x2
#define _CWG1STR_STRC_POSITION                              0x2
#define _CWG1STR_STRC_SIZE                                  0x1
#define _CWG1STR_STRC_LENGTH                                0x1
#define _CWG1STR_STRC_MASK                                  0x4
#define _CWG1STR_STRD_POSN                                  0x3
#define _CWG1STR_STRD_POSITION                              0x3
#define _CWG1STR_STRD_SIZE                                  0x1
#define _CWG1STR_STRD_LENGTH                                0x1
#define _CWG1STR_STRD_MASK                                  0x8
#define _CWG1STR_OVRA_POSN                                  0x4
#define _CWG1STR_OVRA_POSITION                              0x4
#define _CWG1STR_OVRA_SIZE                                  0x1
#define _CWG1STR_OVRA_LENGTH                                0x1
#define _CWG1STR_OVRA_MASK                                  0x10
#define _CWG1STR_OVRB_POSN                                  0x5
#define _CWG1STR_OVRB_POSITION                              0x5
#define _CWG1STR_OVRB_SIZE                                  0x1
#define _CWG1STR_OVRB_LENGTH                                0x1
#define _CWG1STR_OVRB_MASK                                  0x20
#define _CWG1STR_OVRC_POSN                                  0x6
#define _CWG1STR_OVRC_POSITION                              0x6
#define _CWG1STR_OVRC_SIZE                                  0x1
#define _CWG1STR_OVRC_LENGTH                                0x1
#define _CWG1STR_OVRC_MASK                                  0x40
#define _CWG1STR_OVRD_POSN                                  0x7
#define _CWG1STR_OVRD_POSITION                              0x7
#define _CWG1STR_OVRD_SIZE                                  0x1
#define _CWG1STR_OVRD_LENGTH                                0x1
#define _CWG1STR_OVRD_MASK                                  0x80
#define _CWG1STR_CWG1STRA_POSN                              0x0
#define _CWG1STR_CWG1STRA_POSITION                          0x0
#define _CWG1STR_CWG1STRA_SIZE                              0x1
#define _CWG1STR_CWG1STRA_LENGTH                            0x1
#define _CWG1STR_CWG1STRA_MASK                              0x1
#define _CWG1STR_CWG1STRB_POSN                              0x1
#define _CWG1STR_CWG1STRB_POSITION                          0x1
#define _CWG1STR_CWG1STRB_SIZE                              0x1
#define _CWG1STR_CWG1STRB_LENGTH                            0x1
#define _CWG1STR_CWG1STRB_MASK                              0x2
#define _CWG1STR_CWG1STRC_POSN                              0x2
#define _CWG1STR_CWG1STRC_POSITION                          0x2
#define _CWG1STR_CWG1STRC_SIZE                              0x1
#define _CWG1STR_CWG1STRC_LENGTH                            0x1
#define _CWG1STR_CWG1STRC_MASK                              0x4
#define _CWG1STR_CWG1STRD_POSN                              0x3
#define _CWG1STR_CWG1STRD_POSITION                          0x3
#define _CWG1STR_CWG1STRD_SIZE                              0x1
#define _CWG1STR_CWG1STRD_LENGTH                            0x1
#define _CWG1STR_CWG1STRD_MASK                              0x8
#define _CWG1STR_CWG1OVRA_POSN                              0x4
#define _CWG1STR_CWG1OVRA_POSITION                          0x4
#define _CWG1STR_CWG1OVRA_SIZE                              0x1
#define _CWG1STR_CWG1OVRA_LENGTH                            0x1
#define _CWG1STR_CWG1OVRA_MASK                              0x10
#define _CWG1STR_CWG1OVRB_POSN                              0x5
#define _CWG1STR_CWG1OVRB_POSITION                          0x5
#define _CWG1STR_CWG1OVRB_SIZE                              0x1
#define _CWG1STR_CWG1OVRB_LENGTH                            0x1
#define _CWG1STR_CWG1OVRB_MASK                              0x20
#define _CWG1STR_CWG1OVRC_POSN                              0x6
#define _CWG1STR_CWG1OVRC_POSITION                          0x6
#define _CWG1STR_CWG1OVRC_SIZE                              0x1
#define _CWG1STR_CWG1OVRC_LENGTH                            0x1
#define _CWG1STR_CWG1OVRC_MASK                              0x40
#define _CWG1STR_CWG1OVRD_POSN                              0x7
#define _CWG1STR_CWG1OVRD_POSITION                          0x7
#define _CWG1STR_CWG1OVRD_SIZE                              0x1
#define _CWG1STR_CWG1OVRD_LENGTH                            0x1
#define _CWG1STR_CWG1OVRD_MASK                              0x80

// Register: CLCDATA
#define CLCDATA CLCDATA
extern volatile unsigned char           CLCDATA             __at(0x1A3);
#ifndef _LIB_BUILD
asm("CLCDATA equ 01A3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLC1OUT                :1;
        unsigned CLC2OUT                :1;
        unsigned CLC3OUT                :1;
        unsigned CLC4OUT                :1;
    };
} CLCDATAbits_t;
extern volatile CLCDATAbits_t CLCDATAbits __at(0x1A3);
// bitfield macros
#define _CLCDATA_CLC1OUT_POSN                               0x0
#define _CLCDATA_CLC1OUT_POSITION                           0x0
#define _CLCDATA_CLC1OUT_SIZE                               0x1
#define _CLCDATA_CLC1OUT_LENGTH                             0x1
#define _CLCDATA_CLC1OUT_MASK                               0x1
#define _CLCDATA_CLC2OUT_POSN                               0x1
#define _CLCDATA_CLC2OUT_POSITION                           0x1
#define _CLCDATA_CLC2OUT_SIZE                               0x1
#define _CLCDATA_CLC2OUT_LENGTH                             0x1
#define _CLCDATA_CLC2OUT_MASK                               0x2
#define _CLCDATA_CLC3OUT_POSN                               0x2
#define _CLCDATA_CLC3OUT_POSITION                           0x2
#define _CLCDATA_CLC3OUT_SIZE                               0x1
#define _CLCDATA_CLC3OUT_LENGTH                             0x1
#define _CLCDATA_CLC3OUT_MASK                               0x4
#define _CLCDATA_CLC4OUT_POSN                               0x3
#define _CLCDATA_CLC4OUT_POSITION                           0x3
#define _CLCDATA_CLC4OUT_SIZE                               0x1
#define _CLCDATA_CLC4OUT_LENGTH                             0x1
#define _CLCDATA_CLC4OUT_MASK                               0x8

// Register: CLCSELECT
#define CLCSELECT CLCSELECT
extern volatile unsigned char           CLCSELECT           __at(0x1A4);
#ifndef _LIB_BUILD
asm("CLCSELECT equ 01A4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLCT                   :8;
    };
    struct {
        unsigned SLCT0                  :1;
        unsigned SLCT1                  :1;
    };
} CLCSELECTbits_t;
extern volatile CLCSELECTbits_t CLCSELECTbits __at(0x1A4);
// bitfield macros
#define _CLCSELECT_SLCT_POSN                                0x0
#define _CLCSELECT_SLCT_POSITION                            0x0
#define _CLCSELECT_SLCT_SIZE                                0x8
#define _CLCSELECT_SLCT_LENGTH                              0x8
#define _CLCSELECT_SLCT_MASK                                0xFF
#define _CLCSELECT_SLCT0_POSN                               0x0
#define _CLCSELECT_SLCT0_POSITION                           0x0
#define _CLCSELECT_SLCT0_SIZE                               0x1
#define _CLCSELECT_SLCT0_LENGTH                             0x1
#define _CLCSELECT_SLCT0_MASK                               0x1
#define _CLCSELECT_SLCT1_POSN                               0x1
#define _CLCSELECT_SLCT1_POSITION                           0x1
#define _CLCSELECT_SLCT1_SIZE                               0x1
#define _CLCSELECT_SLCT1_LENGTH                             0x1
#define _CLCSELECT_SLCT1_MASK                               0x2

// Register: CLCnCON
#define CLCnCON CLCnCON
extern volatile unsigned char           CLCnCON             __at(0x1A5);
#ifndef _LIB_BUILD
asm("CLCnCON equ 01A5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned INTN                   :1;
        unsigned INTP                   :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
} CLCnCONbits_t;
extern volatile CLCnCONbits_t CLCnCONbits __at(0x1A5);
// bitfield macros
#define _CLCnCON_MODE_POSN                                  0x0
#define _CLCnCON_MODE_POSITION                              0x0
#define _CLCnCON_MODE_SIZE                                  0x3
#define _CLCnCON_MODE_LENGTH                                0x3
#define _CLCnCON_MODE_MASK                                  0x7
#define _CLCnCON_INTN_POSN                                  0x3
#define _CLCnCON_INTN_POSITION                              0x3
#define _CLCnCON_INTN_SIZE                                  0x1
#define _CLCnCON_INTN_LENGTH                                0x1
#define _CLCnCON_INTN_MASK                                  0x8
#define _CLCnCON_INTP_POSN                                  0x4
#define _CLCnCON_INTP_POSITION                              0x4
#define _CLCnCON_INTP_SIZE                                  0x1
#define _CLCnCON_INTP_LENGTH                                0x1
#define _CLCnCON_INTP_MASK                                  0x10
#define _CLCnCON_OUT_POSN                                   0x5
#define _CLCnCON_OUT_POSITION                               0x5
#define _CLCnCON_OUT_SIZE                                   0x1
#define _CLCnCON_OUT_LENGTH                                 0x1
#define _CLCnCON_OUT_MASK                                   0x20
#define _CLCnCON_EN_POSN                                    0x7
#define _CLCnCON_EN_POSITION                                0x7
#define _CLCnCON_EN_SIZE                                    0x1
#define _CLCnCON_EN_LENGTH                                  0x1
#define _CLCnCON_EN_MASK                                    0x80
#define _CLCnCON_MODE0_POSN                                 0x0
#define _CLCnCON_MODE0_POSITION                             0x0
#define _CLCnCON_MODE0_SIZE                                 0x1
#define _CLCnCON_MODE0_LENGTH                               0x1
#define _CLCnCON_MODE0_MASK                                 0x1
#define _CLCnCON_MODE1_POSN                                 0x1
#define _CLCnCON_MODE1_POSITION                             0x1
#define _CLCnCON_MODE1_SIZE                                 0x1
#define _CLCnCON_MODE1_LENGTH                               0x1
#define _CLCnCON_MODE1_MASK                                 0x2
#define _CLCnCON_MODE2_POSN                                 0x2
#define _CLCnCON_MODE2_POSITION                             0x2
#define _CLCnCON_MODE2_SIZE                                 0x1
#define _CLCnCON_MODE2_LENGTH                               0x1
#define _CLCnCON_MODE2_MASK                                 0x4

// Register: CLCnPOL
#define CLCnPOL CLCnPOL
extern volatile unsigned char           CLCnPOL             __at(0x1A6);
#ifndef _LIB_BUILD
asm("CLCnPOL equ 01A6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G1POL                  :1;
        unsigned G2POL                  :1;
        unsigned G3POL                  :1;
        unsigned G4POL                  :1;
        unsigned                        :3;
        unsigned POL                    :1;
    };
} CLCnPOLbits_t;
extern volatile CLCnPOLbits_t CLCnPOLbits __at(0x1A6);
// bitfield macros
#define _CLCnPOL_G1POL_POSN                                 0x0
#define _CLCnPOL_G1POL_POSITION                             0x0
#define _CLCnPOL_G1POL_SIZE                                 0x1
#define _CLCnPOL_G1POL_LENGTH                               0x1
#define _CLCnPOL_G1POL_MASK                                 0x1
#define _CLCnPOL_G2POL_POSN                                 0x1
#define _CLCnPOL_G2POL_POSITION                             0x1
#define _CLCnPOL_G2POL_SIZE                                 0x1
#define _CLCnPOL_G2POL_LENGTH                               0x1
#define _CLCnPOL_G2POL_MASK                                 0x2
#define _CLCnPOL_G3POL_POSN                                 0x2
#define _CLCnPOL_G3POL_POSITION                             0x2
#define _CLCnPOL_G3POL_SIZE                                 0x1
#define _CLCnPOL_G3POL_LENGTH                               0x1
#define _CLCnPOL_G3POL_MASK                                 0x4
#define _CLCnPOL_G4POL_POSN                                 0x3
#define _CLCnPOL_G4POL_POSITION                             0x3
#define _CLCnPOL_G4POL_SIZE                                 0x1
#define _CLCnPOL_G4POL_LENGTH                               0x1
#define _CLCnPOL_G4POL_MASK                                 0x8
#define _CLCnPOL_POL_POSN                                   0x7
#define _CLCnPOL_POL_POSITION                               0x7
#define _CLCnPOL_POL_SIZE                                   0x1
#define _CLCnPOL_POL_LENGTH                                 0x1
#define _CLCnPOL_POL_MASK                                   0x80

// Register: CLCnSEL0
#define CLCnSEL0 CLCnSEL0
extern volatile unsigned char           CLCnSEL0            __at(0x1A7);
#ifndef _LIB_BUILD
asm("CLCnSEL0 equ 01A7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D1S                    :8;
    };
    struct {
        unsigned D1S0                   :1;
        unsigned D1S1                   :1;
        unsigned D1S2                   :1;
        unsigned D1S3                   :1;
        unsigned D1S4                   :1;
        unsigned D1S5                   :1;
    };
} CLCnSEL0bits_t;
extern volatile CLCnSEL0bits_t CLCnSEL0bits __at(0x1A7);
// bitfield macros
#define _CLCnSEL0_D1S_POSN                                  0x0
#define _CLCnSEL0_D1S_POSITION                              0x0
#define _CLCnSEL0_D1S_SIZE                                  0x8
#define _CLCnSEL0_D1S_LENGTH                                0x8
#define _CLCnSEL0_D1S_MASK                                  0xFF
#define _CLCnSEL0_D1S0_POSN                                 0x0
#define _CLCnSEL0_D1S0_POSITION                             0x0
#define _CLCnSEL0_D1S0_SIZE                                 0x1
#define _CLCnSEL0_D1S0_LENGTH                               0x1
#define _CLCnSEL0_D1S0_MASK                                 0x1
#define _CLCnSEL0_D1S1_POSN                                 0x1
#define _CLCnSEL0_D1S1_POSITION                             0x1
#define _CLCnSEL0_D1S1_SIZE                                 0x1
#define _CLCnSEL0_D1S1_LENGTH                               0x1
#define _CLCnSEL0_D1S1_MASK                                 0x2
#define _CLCnSEL0_D1S2_POSN                                 0x2
#define _CLCnSEL0_D1S2_POSITION                             0x2
#define _CLCnSEL0_D1S2_SIZE                                 0x1
#define _CLCnSEL0_D1S2_LENGTH                               0x1
#define _CLCnSEL0_D1S2_MASK                                 0x4
#define _CLCnSEL0_D1S3_POSN                                 0x3
#define _CLCnSEL0_D1S3_POSITION                             0x3
#define _CLCnSEL0_D1S3_SIZE                                 0x1
#define _CLCnSEL0_D1S3_LENGTH                               0x1
#define _CLCnSEL0_D1S3_MASK                                 0x8
#define _CLCnSEL0_D1S4_POSN                                 0x4
#define _CLCnSEL0_D1S4_POSITION                             0x4
#define _CLCnSEL0_D1S4_SIZE                                 0x1
#define _CLCnSEL0_D1S4_LENGTH                               0x1
#define _CLCnSEL0_D1S4_MASK                                 0x10
#define _CLCnSEL0_D1S5_POSN                                 0x5
#define _CLCnSEL0_D1S5_POSITION                             0x5
#define _CLCnSEL0_D1S5_SIZE                                 0x1
#define _CLCnSEL0_D1S5_LENGTH                               0x1
#define _CLCnSEL0_D1S5_MASK                                 0x20

// Register: CLCnSEL1
#define CLCnSEL1 CLCnSEL1
extern volatile unsigned char           CLCnSEL1            __at(0x1A8);
#ifndef _LIB_BUILD
asm("CLCnSEL1 equ 01A8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D2S                    :8;
    };
    struct {
        unsigned D2S0                   :1;
        unsigned D2S1                   :1;
        unsigned D2S2                   :1;
        unsigned D2S3                   :1;
        unsigned D2S4                   :1;
        unsigned D2S5                   :1;
    };
} CLCnSEL1bits_t;
extern volatile CLCnSEL1bits_t CLCnSEL1bits __at(0x1A8);
// bitfield macros
#define _CLCnSEL1_D2S_POSN                                  0x0
#define _CLCnSEL1_D2S_POSITION                              0x0
#define _CLCnSEL1_D2S_SIZE                                  0x8
#define _CLCnSEL1_D2S_LENGTH                                0x8
#define _CLCnSEL1_D2S_MASK                                  0xFF
#define _CLCnSEL1_D2S0_POSN                                 0x0
#define _CLCnSEL1_D2S0_POSITION                             0x0
#define _CLCnSEL1_D2S0_SIZE                                 0x1
#define _CLCnSEL1_D2S0_LENGTH                               0x1
#define _CLCnSEL1_D2S0_MASK                                 0x1
#define _CLCnSEL1_D2S1_POSN                                 0x1
#define _CLCnSEL1_D2S1_POSITION                             0x1
#define _CLCnSEL1_D2S1_SIZE                                 0x1
#define _CLCnSEL1_D2S1_LENGTH                               0x1
#define _CLCnSEL1_D2S1_MASK                                 0x2
#define _CLCnSEL1_D2S2_POSN                                 0x2
#define _CLCnSEL1_D2S2_POSITION                             0x2
#define _CLCnSEL1_D2S2_SIZE                                 0x1
#define _CLCnSEL1_D2S2_LENGTH                               0x1
#define _CLCnSEL1_D2S2_MASK                                 0x4
#define _CLCnSEL1_D2S3_POSN                                 0x3
#define _CLCnSEL1_D2S3_POSITION                             0x3
#define _CLCnSEL1_D2S3_SIZE                                 0x1
#define _CLCnSEL1_D2S3_LENGTH                               0x1
#define _CLCnSEL1_D2S3_MASK                                 0x8
#define _CLCnSEL1_D2S4_POSN                                 0x4
#define _CLCnSEL1_D2S4_POSITION                             0x4
#define _CLCnSEL1_D2S4_SIZE                                 0x1
#define _CLCnSEL1_D2S4_LENGTH                               0x1
#define _CLCnSEL1_D2S4_MASK                                 0x10
#define _CLCnSEL1_D2S5_POSN                                 0x5
#define _CLCnSEL1_D2S5_POSITION                             0x5
#define _CLCnSEL1_D2S5_SIZE                                 0x1
#define _CLCnSEL1_D2S5_LENGTH                               0x1
#define _CLCnSEL1_D2S5_MASK                                 0x20

// Register: CLCnSEL2
#define CLCnSEL2 CLCnSEL2
extern volatile unsigned char           CLCnSEL2            __at(0x1A9);
#ifndef _LIB_BUILD
asm("CLCnSEL2 equ 01A9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D3S                    :8;
    };
    struct {
        unsigned D3S0                   :1;
        unsigned D3S1                   :1;
        unsigned D3S2                   :1;
        unsigned D3S3                   :1;
        unsigned D3S4                   :1;
        unsigned D3S5                   :1;
    };
} CLCnSEL2bits_t;
extern volatile CLCnSEL2bits_t CLCnSEL2bits __at(0x1A9);
// bitfield macros
#define _CLCnSEL2_D3S_POSN                                  0x0
#define _CLCnSEL2_D3S_POSITION                              0x0
#define _CLCnSEL2_D3S_SIZE                                  0x8
#define _CLCnSEL2_D3S_LENGTH                                0x8
#define _CLCnSEL2_D3S_MASK                                  0xFF
#define _CLCnSEL2_D3S0_POSN                                 0x0
#define _CLCnSEL2_D3S0_POSITION                             0x0
#define _CLCnSEL2_D3S0_SIZE                                 0x1
#define _CLCnSEL2_D3S0_LENGTH                               0x1
#define _CLCnSEL2_D3S0_MASK                                 0x1
#define _CLCnSEL2_D3S1_POSN                                 0x1
#define _CLCnSEL2_D3S1_POSITION                             0x1
#define _CLCnSEL2_D3S1_SIZE                                 0x1
#define _CLCnSEL2_D3S1_LENGTH                               0x1
#define _CLCnSEL2_D3S1_MASK                                 0x2
#define _CLCnSEL2_D3S2_POSN                                 0x2
#define _CLCnSEL2_D3S2_POSITION                             0x2
#define _CLCnSEL2_D3S2_SIZE                                 0x1
#define _CLCnSEL2_D3S2_LENGTH                               0x1
#define _CLCnSEL2_D3S2_MASK                                 0x4
#define _CLCnSEL2_D3S3_POSN                                 0x3
#define _CLCnSEL2_D3S3_POSITION                             0x3
#define _CLCnSEL2_D3S3_SIZE                                 0x1
#define _CLCnSEL2_D3S3_LENGTH                               0x1
#define _CLCnSEL2_D3S3_MASK                                 0x8
#define _CLCnSEL2_D3S4_POSN                                 0x4
#define _CLCnSEL2_D3S4_POSITION                             0x4
#define _CLCnSEL2_D3S4_SIZE                                 0x1
#define _CLCnSEL2_D3S4_LENGTH                               0x1
#define _CLCnSEL2_D3S4_MASK                                 0x10
#define _CLCnSEL2_D3S5_POSN                                 0x5
#define _CLCnSEL2_D3S5_POSITION                             0x5
#define _CLCnSEL2_D3S5_SIZE                                 0x1
#define _CLCnSEL2_D3S5_LENGTH                               0x1
#define _CLCnSEL2_D3S5_MASK                                 0x20

// Register: CLCnSEL3
#define CLCnSEL3 CLCnSEL3
extern volatile unsigned char           CLCnSEL3            __at(0x1AA);
#ifndef _LIB_BUILD
asm("CLCnSEL3 equ 01AAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned D4S                    :8;
    };
    struct {
        unsigned D4S0                   :1;
        unsigned D4S1                   :1;
        unsigned D4S2                   :1;
        unsigned D4S3                   :1;
        unsigned D4S4                   :1;
        unsigned D4S5                   :1;
    };
} CLCnSEL3bits_t;
extern volatile CLCnSEL3bits_t CLCnSEL3bits __at(0x1AA);
// bitfield macros
#define _CLCnSEL3_D4S_POSN                                  0x0
#define _CLCnSEL3_D4S_POSITION                              0x0
#define _CLCnSEL3_D4S_SIZE                                  0x8
#define _CLCnSEL3_D4S_LENGTH                                0x8
#define _CLCnSEL3_D4S_MASK                                  0xFF
#define _CLCnSEL3_D4S0_POSN                                 0x0
#define _CLCnSEL3_D4S0_POSITION                             0x0
#define _CLCnSEL3_D4S0_SIZE                                 0x1
#define _CLCnSEL3_D4S0_LENGTH                               0x1
#define _CLCnSEL3_D4S0_MASK                                 0x1
#define _CLCnSEL3_D4S1_POSN                                 0x1
#define _CLCnSEL3_D4S1_POSITION                             0x1
#define _CLCnSEL3_D4S1_SIZE                                 0x1
#define _CLCnSEL3_D4S1_LENGTH                               0x1
#define _CLCnSEL3_D4S1_MASK                                 0x2
#define _CLCnSEL3_D4S2_POSN                                 0x2
#define _CLCnSEL3_D4S2_POSITION                             0x2
#define _CLCnSEL3_D4S2_SIZE                                 0x1
#define _CLCnSEL3_D4S2_LENGTH                               0x1
#define _CLCnSEL3_D4S2_MASK                                 0x4
#define _CLCnSEL3_D4S3_POSN                                 0x3
#define _CLCnSEL3_D4S3_POSITION                             0x3
#define _CLCnSEL3_D4S3_SIZE                                 0x1
#define _CLCnSEL3_D4S3_LENGTH                               0x1
#define _CLCnSEL3_D4S3_MASK                                 0x8
#define _CLCnSEL3_D4S4_POSN                                 0x4
#define _CLCnSEL3_D4S4_POSITION                             0x4
#define _CLCnSEL3_D4S4_SIZE                                 0x1
#define _CLCnSEL3_D4S4_LENGTH                               0x1
#define _CLCnSEL3_D4S4_MASK                                 0x10
#define _CLCnSEL3_D4S5_POSN                                 0x5
#define _CLCnSEL3_D4S5_POSITION                             0x5
#define _CLCnSEL3_D4S5_SIZE                                 0x1
#define _CLCnSEL3_D4S5_LENGTH                               0x1
#define _CLCnSEL3_D4S5_MASK                                 0x20

// Register: CLCnGLS0
#define CLCnGLS0 CLCnGLS0
extern volatile unsigned char           CLCnGLS0            __at(0x1AB);
#ifndef _LIB_BUILD
asm("CLCnGLS0 equ 01ABh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G1D1N                  :1;
        unsigned G1D1T                  :1;
        unsigned G1D2N                  :1;
        unsigned G1D2T                  :1;
        unsigned G1D3N                  :1;
        unsigned G1D3T                  :1;
        unsigned G1D4N                  :1;
        unsigned G1D4T                  :1;
    };
} CLCnGLS0bits_t;
extern volatile CLCnGLS0bits_t CLCnGLS0bits __at(0x1AB);
// bitfield macros
#define _CLCnGLS0_G1D1N_POSN                                0x0
#define _CLCnGLS0_G1D1N_POSITION                            0x0
#define _CLCnGLS0_G1D1N_SIZE                                0x1
#define _CLCnGLS0_G1D1N_LENGTH                              0x1
#define _CLCnGLS0_G1D1N_MASK                                0x1
#define _CLCnGLS0_G1D1T_POSN                                0x1
#define _CLCnGLS0_G1D1T_POSITION                            0x1
#define _CLCnGLS0_G1D1T_SIZE                                0x1
#define _CLCnGLS0_G1D1T_LENGTH                              0x1
#define _CLCnGLS0_G1D1T_MASK                                0x2
#define _CLCnGLS0_G1D2N_POSN                                0x2
#define _CLCnGLS0_G1D2N_POSITION                            0x2
#define _CLCnGLS0_G1D2N_SIZE                                0x1
#define _CLCnGLS0_G1D2N_LENGTH                              0x1
#define _CLCnGLS0_G1D2N_MASK                                0x4
#define _CLCnGLS0_G1D2T_POSN                                0x3
#define _CLCnGLS0_G1D2T_POSITION                            0x3
#define _CLCnGLS0_G1D2T_SIZE                                0x1
#define _CLCnGLS0_G1D2T_LENGTH                              0x1
#define _CLCnGLS0_G1D2T_MASK                                0x8
#define _CLCnGLS0_G1D3N_POSN                                0x4
#define _CLCnGLS0_G1D3N_POSITION                            0x4
#define _CLCnGLS0_G1D3N_SIZE                                0x1
#define _CLCnGLS0_G1D3N_LENGTH                              0x1
#define _CLCnGLS0_G1D3N_MASK                                0x10
#define _CLCnGLS0_G1D3T_POSN                                0x5
#define _CLCnGLS0_G1D3T_POSITION                            0x5
#define _CLCnGLS0_G1D3T_SIZE                                0x1
#define _CLCnGLS0_G1D3T_LENGTH                              0x1
#define _CLCnGLS0_G1D3T_MASK                                0x20
#define _CLCnGLS0_G1D4N_POSN                                0x6
#define _CLCnGLS0_G1D4N_POSITION                            0x6
#define _CLCnGLS0_G1D4N_SIZE                                0x1
#define _CLCnGLS0_G1D4N_LENGTH                              0x1
#define _CLCnGLS0_G1D4N_MASK                                0x40
#define _CLCnGLS0_G1D4T_POSN                                0x7
#define _CLCnGLS0_G1D4T_POSITION                            0x7
#define _CLCnGLS0_G1D4T_SIZE                                0x1
#define _CLCnGLS0_G1D4T_LENGTH                              0x1
#define _CLCnGLS0_G1D4T_MASK                                0x80

// Register: CLCnGLS1
#define CLCnGLS1 CLCnGLS1
extern volatile unsigned char           CLCnGLS1            __at(0x1AC);
#ifndef _LIB_BUILD
asm("CLCnGLS1 equ 01ACh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G2D1N                  :1;
        unsigned G2D1T                  :1;
        unsigned G2D2N                  :1;
        unsigned G2D2T                  :1;
        unsigned G2D3N                  :1;
        unsigned G2D3T                  :1;
        unsigned G2D4N                  :1;
        unsigned G2D4T                  :1;
    };
} CLCnGLS1bits_t;
extern volatile CLCnGLS1bits_t CLCnGLS1bits __at(0x1AC);
// bitfield macros
#define _CLCnGLS1_G2D1N_POSN                                0x0
#define _CLCnGLS1_G2D1N_POSITION                            0x0
#define _CLCnGLS1_G2D1N_SIZE                                0x1
#define _CLCnGLS1_G2D1N_LENGTH                              0x1
#define _CLCnGLS1_G2D1N_MASK                                0x1
#define _CLCnGLS1_G2D1T_POSN                                0x1
#define _CLCnGLS1_G2D1T_POSITION                            0x1
#define _CLCnGLS1_G2D1T_SIZE                                0x1
#define _CLCnGLS1_G2D1T_LENGTH                              0x1
#define _CLCnGLS1_G2D1T_MASK                                0x2
#define _CLCnGLS1_G2D2N_POSN                                0x2
#define _CLCnGLS1_G2D2N_POSITION                            0x2
#define _CLCnGLS1_G2D2N_SIZE                                0x1
#define _CLCnGLS1_G2D2N_LENGTH                              0x1
#define _CLCnGLS1_G2D2N_MASK                                0x4
#define _CLCnGLS1_G2D2T_POSN                                0x3
#define _CLCnGLS1_G2D2T_POSITION                            0x3
#define _CLCnGLS1_G2D2T_SIZE                                0x1
#define _CLCnGLS1_G2D2T_LENGTH                              0x1
#define _CLCnGLS1_G2D2T_MASK                                0x8
#define _CLCnGLS1_G2D3N_POSN                                0x4
#define _CLCnGLS1_G2D3N_POSITION                            0x4
#define _CLCnGLS1_G2D3N_SIZE                                0x1
#define _CLCnGLS1_G2D3N_LENGTH                              0x1
#define _CLCnGLS1_G2D3N_MASK                                0x10
#define _CLCnGLS1_G2D3T_POSN                                0x5
#define _CLCnGLS1_G2D3T_POSITION                            0x5
#define _CLCnGLS1_G2D3T_SIZE                                0x1
#define _CLCnGLS1_G2D3T_LENGTH                              0x1
#define _CLCnGLS1_G2D3T_MASK                                0x20
#define _CLCnGLS1_G2D4N_POSN                                0x6
#define _CLCnGLS1_G2D4N_POSITION                            0x6
#define _CLCnGLS1_G2D4N_SIZE                                0x1
#define _CLCnGLS1_G2D4N_LENGTH                              0x1
#define _CLCnGLS1_G2D4N_MASK                                0x40
#define _CLCnGLS1_G2D4T_POSN                                0x7
#define _CLCnGLS1_G2D4T_POSITION                            0x7
#define _CLCnGLS1_G2D4T_SIZE                                0x1
#define _CLCnGLS1_G2D4T_LENGTH                              0x1
#define _CLCnGLS1_G2D4T_MASK                                0x80

// Register: CLCnGLS2
#define CLCnGLS2 CLCnGLS2
extern volatile unsigned char           CLCnGLS2            __at(0x1AD);
#ifndef _LIB_BUILD
asm("CLCnGLS2 equ 01ADh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G3D1N                  :1;
        unsigned G3D1T                  :1;
        unsigned G3D2N                  :1;
        unsigned G3D2T                  :1;
        unsigned G3D3N                  :1;
        unsigned G3D3T                  :1;
        unsigned G3D4N                  :1;
        unsigned G3D4T                  :1;
    };
} CLCnGLS2bits_t;
extern volatile CLCnGLS2bits_t CLCnGLS2bits __at(0x1AD);
// bitfield macros
#define _CLCnGLS2_G3D1N_POSN                                0x0
#define _CLCnGLS2_G3D1N_POSITION                            0x0
#define _CLCnGLS2_G3D1N_SIZE                                0x1
#define _CLCnGLS2_G3D1N_LENGTH                              0x1
#define _CLCnGLS2_G3D1N_MASK                                0x1
#define _CLCnGLS2_G3D1T_POSN                                0x1
#define _CLCnGLS2_G3D1T_POSITION                            0x1
#define _CLCnGLS2_G3D1T_SIZE                                0x1
#define _CLCnGLS2_G3D1T_LENGTH                              0x1
#define _CLCnGLS2_G3D1T_MASK                                0x2
#define _CLCnGLS2_G3D2N_POSN                                0x2
#define _CLCnGLS2_G3D2N_POSITION                            0x2
#define _CLCnGLS2_G3D2N_SIZE                                0x1
#define _CLCnGLS2_G3D2N_LENGTH                              0x1
#define _CLCnGLS2_G3D2N_MASK                                0x4
#define _CLCnGLS2_G3D2T_POSN                                0x3
#define _CLCnGLS2_G3D2T_POSITION                            0x3
#define _CLCnGLS2_G3D2T_SIZE                                0x1
#define _CLCnGLS2_G3D2T_LENGTH                              0x1
#define _CLCnGLS2_G3D2T_MASK                                0x8
#define _CLCnGLS2_G3D3N_POSN                                0x4
#define _CLCnGLS2_G3D3N_POSITION                            0x4
#define _CLCnGLS2_G3D3N_SIZE                                0x1
#define _CLCnGLS2_G3D3N_LENGTH                              0x1
#define _CLCnGLS2_G3D3N_MASK                                0x10
#define _CLCnGLS2_G3D3T_POSN                                0x5
#define _CLCnGLS2_G3D3T_POSITION                            0x5
#define _CLCnGLS2_G3D3T_SIZE                                0x1
#define _CLCnGLS2_G3D3T_LENGTH                              0x1
#define _CLCnGLS2_G3D3T_MASK                                0x20
#define _CLCnGLS2_G3D4N_POSN                                0x6
#define _CLCnGLS2_G3D4N_POSITION                            0x6
#define _CLCnGLS2_G3D4N_SIZE                                0x1
#define _CLCnGLS2_G3D4N_LENGTH                              0x1
#define _CLCnGLS2_G3D4N_MASK                                0x40
#define _CLCnGLS2_G3D4T_POSN                                0x7
#define _CLCnGLS2_G3D4T_POSITION                            0x7
#define _CLCnGLS2_G3D4T_SIZE                                0x1
#define _CLCnGLS2_G3D4T_LENGTH                              0x1
#define _CLCnGLS2_G3D4T_MASK                                0x80

// Register: CLCnGLS3
#define CLCnGLS3 CLCnGLS3
extern volatile unsigned char           CLCnGLS3            __at(0x1AE);
#ifndef _LIB_BUILD
asm("CLCnGLS3 equ 01AEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned G4D1N                  :1;
        unsigned G4D1T                  :1;
        unsigned G4D2N                  :1;
        unsigned G4D2T                  :1;
        unsigned G4D3N                  :1;
        unsigned G4D3T                  :1;
        unsigned G4D4N                  :1;
        unsigned G4D4T                  :1;
    };
} CLCnGLS3bits_t;
extern volatile CLCnGLS3bits_t CLCnGLS3bits __at(0x1AE);
// bitfield macros
#define _CLCnGLS3_G4D1N_POSN                                0x0
#define _CLCnGLS3_G4D1N_POSITION                            0x0
#define _CLCnGLS3_G4D1N_SIZE                                0x1
#define _CLCnGLS3_G4D1N_LENGTH                              0x1
#define _CLCnGLS3_G4D1N_MASK                                0x1
#define _CLCnGLS3_G4D1T_POSN                                0x1
#define _CLCnGLS3_G4D1T_POSITION                            0x1
#define _CLCnGLS3_G4D1T_SIZE                                0x1
#define _CLCnGLS3_G4D1T_LENGTH                              0x1
#define _CLCnGLS3_G4D1T_MASK                                0x2
#define _CLCnGLS3_G4D2N_POSN                                0x2
#define _CLCnGLS3_G4D2N_POSITION                            0x2
#define _CLCnGLS3_G4D2N_SIZE                                0x1
#define _CLCnGLS3_G4D2N_LENGTH                              0x1
#define _CLCnGLS3_G4D2N_MASK                                0x4
#define _CLCnGLS3_G4D2T_POSN                                0x3
#define _CLCnGLS3_G4D2T_POSITION                            0x3
#define _CLCnGLS3_G4D2T_SIZE                                0x1
#define _CLCnGLS3_G4D2T_LENGTH                              0x1
#define _CLCnGLS3_G4D2T_MASK                                0x8
#define _CLCnGLS3_G4D3N_POSN                                0x4
#define _CLCnGLS3_G4D3N_POSITION                            0x4
#define _CLCnGLS3_G4D3N_SIZE                                0x1
#define _CLCnGLS3_G4D3N_LENGTH                              0x1
#define _CLCnGLS3_G4D3N_MASK                                0x10
#define _CLCnGLS3_G4D3T_POSN                                0x5
#define _CLCnGLS3_G4D3T_POSITION                            0x5
#define _CLCnGLS3_G4D3T_SIZE                                0x1
#define _CLCnGLS3_G4D3T_LENGTH                              0x1
#define _CLCnGLS3_G4D3T_MASK                                0x20
#define _CLCnGLS3_G4D4N_POSN                                0x6
#define _CLCnGLS3_G4D4N_POSITION                            0x6
#define _CLCnGLS3_G4D4N_SIZE                                0x1
#define _CLCnGLS3_G4D4N_LENGTH                              0x1
#define _CLCnGLS3_G4D4N_MASK                                0x40
#define _CLCnGLS3_G4D4T_POSN                                0x7
#define _CLCnGLS3_G4D4T_POSITION                            0x7
#define _CLCnGLS3_G4D4T_SIZE                                0x1
#define _CLCnGLS3_G4D4T_LENGTH                              0x1
#define _CLCnGLS3_G4D4T_MASK                                0x80

// Register: U1RXB
#define U1RXB U1RXB
extern volatile unsigned char           U1RXB               __at(0x1AF);
#ifndef _LIB_BUILD
asm("U1RXB equ 01AFh");
#endif
// aliases
extern volatile unsigned char           U1RXBL              __at(0x1AF);
#ifndef _LIB_BUILD
asm("U1RXBL equ 01AFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} U1RXBbits_t;
extern volatile U1RXBbits_t U1RXBbits __at(0x1AF);
// bitfield macros
#define _U1RXB_RXB_POSN                                     0x0
#define _U1RXB_RXB_POSITION                                 0x0
#define _U1RXB_RXB_SIZE                                     0x8
#define _U1RXB_RXB_LENGTH                                   0x8
#define _U1RXB_RXB_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} U1RXBLbits_t;
extern volatile U1RXBLbits_t U1RXBLbits __at(0x1AF);
// bitfield macros
#define _U1RXBL_RXB_POSN                                    0x0
#define _U1RXBL_RXB_POSITION                                0x0
#define _U1RXBL_RXB_SIZE                                    0x8
#define _U1RXBL_RXB_LENGTH                                  0x8
#define _U1RXBL_RXB_MASK                                    0xFF

// Register: U1RXCHK
#define U1RXCHK U1RXCHK
extern volatile unsigned char           U1RXCHK             __at(0x1B0);
#ifndef _LIB_BUILD
asm("U1RXCHK equ 01B0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXCHK                  :8;
    };
} U1RXCHKbits_t;
extern volatile U1RXCHKbits_t U1RXCHKbits __at(0x1B0);
// bitfield macros
#define _U1RXCHK_RXCHK_POSN                                 0x0
#define _U1RXCHK_RXCHK_POSITION                             0x0
#define _U1RXCHK_RXCHK_SIZE                                 0x8
#define _U1RXCHK_RXCHK_LENGTH                               0x8
#define _U1RXCHK_RXCHK_MASK                                 0xFF

// Register: U1TXB
#define U1TXB U1TXB
extern volatile unsigned char           U1TXB               __at(0x1B1);
#ifndef _LIB_BUILD
asm("U1TXB equ 01B1h");
#endif
// aliases
extern volatile unsigned char           U1TXBL              __at(0x1B1);
#ifndef _LIB_BUILD
asm("U1TXBL equ 01B1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} U1TXBbits_t;
extern volatile U1TXBbits_t U1TXBbits __at(0x1B1);
// bitfield macros
#define _U1TXB_TXB_POSN                                     0x0
#define _U1TXB_TXB_POSITION                                 0x0
#define _U1TXB_TXB_SIZE                                     0x8
#define _U1TXB_TXB_LENGTH                                   0x8
#define _U1TXB_TXB_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} U1TXBLbits_t;
extern volatile U1TXBLbits_t U1TXBLbits __at(0x1B1);
// bitfield macros
#define _U1TXBL_TXB_POSN                                    0x0
#define _U1TXBL_TXB_POSITION                                0x0
#define _U1TXBL_TXB_SIZE                                    0x8
#define _U1TXBL_TXB_LENGTH                                  0x8
#define _U1TXBL_TXB_MASK                                    0xFF

// Register: U1TXCHK
#define U1TXCHK U1TXCHK
extern volatile unsigned char           U1TXCHK             __at(0x1B2);
#ifndef _LIB_BUILD
asm("U1TXCHK equ 01B2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXCHK                  :8;
    };
} U1TXCHKbits_t;
extern volatile U1TXCHKbits_t U1TXCHKbits __at(0x1B2);
// bitfield macros
#define _U1TXCHK_TXCHK_POSN                                 0x0
#define _U1TXCHK_TXCHK_POSITION                             0x0
#define _U1TXCHK_TXCHK_SIZE                                 0x8
#define _U1TXCHK_TXCHK_LENGTH                               0x8
#define _U1TXCHK_TXCHK_MASK                                 0xFF

// Register: U1P1
#define U1P1 U1P1
extern volatile unsigned short          U1P1                __at(0x1B3);
#ifndef _LIB_BUILD
asm("U1P1 equ 01B3h");
#endif

// Register: U1P1L
#define U1P1L U1P1L
extern volatile unsigned char           U1P1L               __at(0x1B3);
#ifndef _LIB_BUILD
asm("U1P1L equ 01B3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P1L                    :8;
    };
} U1P1Lbits_t;
extern volatile U1P1Lbits_t U1P1Lbits __at(0x1B3);
// bitfield macros
#define _U1P1L_P1L_POSN                                     0x0
#define _U1P1L_P1L_POSITION                                 0x0
#define _U1P1L_P1L_SIZE                                     0x8
#define _U1P1L_P1L_LENGTH                                   0x8
#define _U1P1L_P1L_MASK                                     0xFF

// Register: U1P1H
#define U1P1H U1P1H
extern volatile unsigned char           U1P1H               __at(0x1B4);
#ifndef _LIB_BUILD
asm("U1P1H equ 01B4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P1H                    :1;
    };
} U1P1Hbits_t;
extern volatile U1P1Hbits_t U1P1Hbits __at(0x1B4);
// bitfield macros
#define _U1P1H_P1H_POSN                                     0x0
#define _U1P1H_P1H_POSITION                                 0x0
#define _U1P1H_P1H_SIZE                                     0x1
#define _U1P1H_P1H_LENGTH                                   0x1
#define _U1P1H_P1H_MASK                                     0x1

// Register: U1P2
#define U1P2 U1P2
extern volatile unsigned short          U1P2                __at(0x1B5);
#ifndef _LIB_BUILD
asm("U1P2 equ 01B5h");
#endif

// Register: U1P2L
#define U1P2L U1P2L
extern volatile unsigned char           U1P2L               __at(0x1B5);
#ifndef _LIB_BUILD
asm("U1P2L equ 01B5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P2L                    :8;
    };
} U1P2Lbits_t;
extern volatile U1P2Lbits_t U1P2Lbits __at(0x1B5);
// bitfield macros
#define _U1P2L_P2L_POSN                                     0x0
#define _U1P2L_P2L_POSITION                                 0x0
#define _U1P2L_P2L_SIZE                                     0x8
#define _U1P2L_P2L_LENGTH                                   0x8
#define _U1P2L_P2L_MASK                                     0xFF

// Register: U1P2H
#define U1P2H U1P2H
extern volatile unsigned char           U1P2H               __at(0x1B6);
#ifndef _LIB_BUILD
asm("U1P2H equ 01B6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P2H                    :1;
    };
} U1P2Hbits_t;
extern volatile U1P2Hbits_t U1P2Hbits __at(0x1B6);
// bitfield macros
#define _U1P2H_P2H_POSN                                     0x0
#define _U1P2H_P2H_POSITION                                 0x0
#define _U1P2H_P2H_SIZE                                     0x1
#define _U1P2H_P2H_LENGTH                                   0x1
#define _U1P2H_P2H_MASK                                     0x1

// Register: U1P3
#define U1P3 U1P3
extern volatile unsigned short          U1P3                __at(0x1B7);
#ifndef _LIB_BUILD
asm("U1P3 equ 01B7h");
#endif

// Register: U1P3L
#define U1P3L U1P3L
extern volatile unsigned char           U1P3L               __at(0x1B7);
#ifndef _LIB_BUILD
asm("U1P3L equ 01B7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P3L                    :8;
    };
} U1P3Lbits_t;
extern volatile U1P3Lbits_t U1P3Lbits __at(0x1B7);
// bitfield macros
#define _U1P3L_P3L_POSN                                     0x0
#define _U1P3L_P3L_POSITION                                 0x0
#define _U1P3L_P3L_SIZE                                     0x8
#define _U1P3L_P3L_LENGTH                                   0x8
#define _U1P3L_P3L_MASK                                     0xFF

// Register: U1P3H
#define U1P3H U1P3H
extern volatile unsigned char           U1P3H               __at(0x1B8);
#ifndef _LIB_BUILD
asm("U1P3H equ 01B8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P3H                    :1;
    };
} U1P3Hbits_t;
extern volatile U1P3Hbits_t U1P3Hbits __at(0x1B8);
// bitfield macros
#define _U1P3H_P3H_POSN                                     0x0
#define _U1P3H_P3H_POSITION                                 0x0
#define _U1P3H_P3H_SIZE                                     0x1
#define _U1P3H_P3H_LENGTH                                   0x1
#define _U1P3H_P3H_MASK                                     0x1

// Register: U1CON0
#define U1CON0 U1CON0
extern volatile unsigned char           U1CON0              __at(0x1B9);
#ifndef _LIB_BUILD
asm("U1CON0 equ 01B9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned MODE3                  :1;
    };
    struct {
        unsigned U1MODE                 :4;
        unsigned U1RXEN                 :1;
        unsigned U1TXEN                 :1;
        unsigned U1ABDEN                :1;
        unsigned U1BRGS                 :1;
    };
    struct {
        unsigned U1MODE0                :1;
        unsigned U1MODE1                :1;
        unsigned U1MODE2                :1;
        unsigned U1MODE3                :1;
    };
    struct {
        unsigned MODE                   :4;
        unsigned RXEN                   :1;
        unsigned TXEN                   :1;
        unsigned ABDEN                  :1;
        unsigned BRGS                   :1;
    };
} U1CON0bits_t;
extern volatile U1CON0bits_t U1CON0bits __at(0x1B9);
// bitfield macros
#define _U1CON0_MODE0_POSN                                  0x0
#define _U1CON0_MODE0_POSITION                              0x0
#define _U1CON0_MODE0_SIZE                                  0x1
#define _U1CON0_MODE0_LENGTH                                0x1
#define _U1CON0_MODE0_MASK                                  0x1
#define _U1CON0_MODE1_POSN                                  0x1
#define _U1CON0_MODE1_POSITION                              0x1
#define _U1CON0_MODE1_SIZE                                  0x1
#define _U1CON0_MODE1_LENGTH                                0x1
#define _U1CON0_MODE1_MASK                                  0x2
#define _U1CON0_MODE2_POSN                                  0x2
#define _U1CON0_MODE2_POSITION                              0x2
#define _U1CON0_MODE2_SIZE                                  0x1
#define _U1CON0_MODE2_LENGTH                                0x1
#define _U1CON0_MODE2_MASK                                  0x4
#define _U1CON0_MODE3_POSN                                  0x3
#define _U1CON0_MODE3_POSITION                              0x3
#define _U1CON0_MODE3_SIZE                                  0x1
#define _U1CON0_MODE3_LENGTH                                0x1
#define _U1CON0_MODE3_MASK                                  0x8
#define _U1CON0_U1MODE_POSN                                 0x0
#define _U1CON0_U1MODE_POSITION                             0x0
#define _U1CON0_U1MODE_SIZE                                 0x4
#define _U1CON0_U1MODE_LENGTH                               0x4
#define _U1CON0_U1MODE_MASK                                 0xF
#define _U1CON0_U1RXEN_POSN                                 0x4
#define _U1CON0_U1RXEN_POSITION                             0x4
#define _U1CON0_U1RXEN_SIZE                                 0x1
#define _U1CON0_U1RXEN_LENGTH                               0x1
#define _U1CON0_U1RXEN_MASK                                 0x10
#define _U1CON0_U1TXEN_POSN                                 0x5
#define _U1CON0_U1TXEN_POSITION                             0x5
#define _U1CON0_U1TXEN_SIZE                                 0x1
#define _U1CON0_U1TXEN_LENGTH                               0x1
#define _U1CON0_U1TXEN_MASK                                 0x20
#define _U1CON0_U1ABDEN_POSN                                0x6
#define _U1CON0_U1ABDEN_POSITION                            0x6
#define _U1CON0_U1ABDEN_SIZE                                0x1
#define _U1CON0_U1ABDEN_LENGTH                              0x1
#define _U1CON0_U1ABDEN_MASK                                0x40
#define _U1CON0_U1BRGS_POSN                                 0x7
#define _U1CON0_U1BRGS_POSITION                             0x7
#define _U1CON0_U1BRGS_SIZE                                 0x1
#define _U1CON0_U1BRGS_LENGTH                               0x1
#define _U1CON0_U1BRGS_MASK                                 0x80
#define _U1CON0_U1MODE0_POSN                                0x0
#define _U1CON0_U1MODE0_POSITION                            0x0
#define _U1CON0_U1MODE0_SIZE                                0x1
#define _U1CON0_U1MODE0_LENGTH                              0x1
#define _U1CON0_U1MODE0_MASK                                0x1
#define _U1CON0_U1MODE1_POSN                                0x1
#define _U1CON0_U1MODE1_POSITION                            0x1
#define _U1CON0_U1MODE1_SIZE                                0x1
#define _U1CON0_U1MODE1_LENGTH                              0x1
#define _U1CON0_U1MODE1_MASK                                0x2
#define _U1CON0_U1MODE2_POSN                                0x2
#define _U1CON0_U1MODE2_POSITION                            0x2
#define _U1CON0_U1MODE2_SIZE                                0x1
#define _U1CON0_U1MODE2_LENGTH                              0x1
#define _U1CON0_U1MODE2_MASK                                0x4
#define _U1CON0_U1MODE3_POSN                                0x3
#define _U1CON0_U1MODE3_POSITION                            0x3
#define _U1CON0_U1MODE3_SIZE                                0x1
#define _U1CON0_U1MODE3_LENGTH                              0x1
#define _U1CON0_U1MODE3_MASK                                0x8
#define _U1CON0_MODE_POSN                                   0x0
#define _U1CON0_MODE_POSITION                               0x0
#define _U1CON0_MODE_SIZE                                   0x4
#define _U1CON0_MODE_LENGTH                                 0x4
#define _U1CON0_MODE_MASK                                   0xF
#define _U1CON0_RXEN_POSN                                   0x4
#define _U1CON0_RXEN_POSITION                               0x4
#define _U1CON0_RXEN_SIZE                                   0x1
#define _U1CON0_RXEN_LENGTH                                 0x1
#define _U1CON0_RXEN_MASK                                   0x10
#define _U1CON0_TXEN_POSN                                   0x5
#define _U1CON0_TXEN_POSITION                               0x5
#define _U1CON0_TXEN_SIZE                                   0x1
#define _U1CON0_TXEN_LENGTH                                 0x1
#define _U1CON0_TXEN_MASK                                   0x20
#define _U1CON0_ABDEN_POSN                                  0x6
#define _U1CON0_ABDEN_POSITION                              0x6
#define _U1CON0_ABDEN_SIZE                                  0x1
#define _U1CON0_ABDEN_LENGTH                                0x1
#define _U1CON0_ABDEN_MASK                                  0x40
#define _U1CON0_BRGS_POSN                                   0x7
#define _U1CON0_BRGS_POSITION                               0x7
#define _U1CON0_BRGS_SIZE                                   0x1
#define _U1CON0_BRGS_LENGTH                                 0x1
#define _U1CON0_BRGS_MASK                                   0x80

// Register: U1CON1
#define U1CON1 U1CON1
extern volatile unsigned char           U1CON1              __at(0x1BA);
#ifndef _LIB_BUILD
asm("U1CON1 equ 01BAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SENDB                  :1;
        unsigned BRKOVR                 :1;
        unsigned                        :1;
        unsigned RXBIMD                 :1;
        unsigned WUE                    :1;
        unsigned                        :2;
        unsigned ON                     :1;
    };
    struct {
        unsigned U1SENDB                :1;
        unsigned U1BRKOVR               :1;
        unsigned                        :1;
        unsigned U1RXBIMD               :1;
        unsigned U1WUE                  :1;
        unsigned                        :2;
        unsigned U1ON                   :1;
    };
} U1CON1bits_t;
extern volatile U1CON1bits_t U1CON1bits __at(0x1BA);
// bitfield macros
#define _U1CON1_SENDB_POSN                                  0x0
#define _U1CON1_SENDB_POSITION                              0x0
#define _U1CON1_SENDB_SIZE                                  0x1
#define _U1CON1_SENDB_LENGTH                                0x1
#define _U1CON1_SENDB_MASK                                  0x1
#define _U1CON1_BRKOVR_POSN                                 0x1
#define _U1CON1_BRKOVR_POSITION                             0x1
#define _U1CON1_BRKOVR_SIZE                                 0x1
#define _U1CON1_BRKOVR_LENGTH                               0x1
#define _U1CON1_BRKOVR_MASK                                 0x2
#define _U1CON1_RXBIMD_POSN                                 0x3
#define _U1CON1_RXBIMD_POSITION                             0x3
#define _U1CON1_RXBIMD_SIZE                                 0x1
#define _U1CON1_RXBIMD_LENGTH                               0x1
#define _U1CON1_RXBIMD_MASK                                 0x8
#define _U1CON1_WUE_POSN                                    0x4
#define _U1CON1_WUE_POSITION                                0x4
#define _U1CON1_WUE_SIZE                                    0x1
#define _U1CON1_WUE_LENGTH                                  0x1
#define _U1CON1_WUE_MASK                                    0x10
#define _U1CON1_ON_POSN                                     0x7
#define _U1CON1_ON_POSITION                                 0x7
#define _U1CON1_ON_SIZE                                     0x1
#define _U1CON1_ON_LENGTH                                   0x1
#define _U1CON1_ON_MASK                                     0x80
#define _U1CON1_U1SENDB_POSN                                0x0
#define _U1CON1_U1SENDB_POSITION                            0x0
#define _U1CON1_U1SENDB_SIZE                                0x1
#define _U1CON1_U1SENDB_LENGTH                              0x1
#define _U1CON1_U1SENDB_MASK                                0x1
#define _U1CON1_U1BRKOVR_POSN                               0x1
#define _U1CON1_U1BRKOVR_POSITION                           0x1
#define _U1CON1_U1BRKOVR_SIZE                               0x1
#define _U1CON1_U1BRKOVR_LENGTH                             0x1
#define _U1CON1_U1BRKOVR_MASK                               0x2
#define _U1CON1_U1RXBIMD_POSN                               0x3
#define _U1CON1_U1RXBIMD_POSITION                           0x3
#define _U1CON1_U1RXBIMD_SIZE                               0x1
#define _U1CON1_U1RXBIMD_LENGTH                             0x1
#define _U1CON1_U1RXBIMD_MASK                               0x8
#define _U1CON1_U1WUE_POSN                                  0x4
#define _U1CON1_U1WUE_POSITION                              0x4
#define _U1CON1_U1WUE_SIZE                                  0x1
#define _U1CON1_U1WUE_LENGTH                                0x1
#define _U1CON1_U1WUE_MASK                                  0x10
#define _U1CON1_U1ON_POSN                                   0x7
#define _U1CON1_U1ON_POSITION                               0x7
#define _U1CON1_U1ON_SIZE                                   0x1
#define _U1CON1_U1ON_LENGTH                                 0x1
#define _U1CON1_U1ON_MASK                                   0x80

// Register: U1CON2
#define U1CON2 U1CON2
extern volatile unsigned char           U1CON2              __at(0x1BB);
#ifndef _LIB_BUILD
asm("U1CON2 equ 01BBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLO                    :2;
        unsigned TXPOL                  :1;
        unsigned C0EN                   :1;
        unsigned STP                    :2;
        unsigned RXPOL                  :1;
        unsigned RUNOVF                 :1;
    };
    struct {
        unsigned FLO0                   :1;
        unsigned FLO1                   :1;
        unsigned                        :2;
        unsigned STP0                   :1;
        unsigned STP1                   :1;
    };
    struct {
        unsigned U1FLO                  :2;
        unsigned U1TXPOL                :1;
        unsigned U1C0EN                 :1;
        unsigned U1STP                  :2;
        unsigned U1RXPOL                :1;
        unsigned U1RUNOVF               :1;
    };
    struct {
        unsigned U1FLO0                 :1;
        unsigned U1FLO1                 :1;
        unsigned                        :2;
        unsigned U1STP0                 :1;
        unsigned U1STP1                 :1;
    };
} U1CON2bits_t;
extern volatile U1CON2bits_t U1CON2bits __at(0x1BB);
// bitfield macros
#define _U1CON2_FLO_POSN                                    0x0
#define _U1CON2_FLO_POSITION                                0x0
#define _U1CON2_FLO_SIZE                                    0x2
#define _U1CON2_FLO_LENGTH                                  0x2
#define _U1CON2_FLO_MASK                                    0x3
#define _U1CON2_TXPOL_POSN                                  0x2
#define _U1CON2_TXPOL_POSITION                              0x2
#define _U1CON2_TXPOL_SIZE                                  0x1
#define _U1CON2_TXPOL_LENGTH                                0x1
#define _U1CON2_TXPOL_MASK                                  0x4
#define _U1CON2_C0EN_POSN                                   0x3
#define _U1CON2_C0EN_POSITION                               0x3
#define _U1CON2_C0EN_SIZE                                   0x1
#define _U1CON2_C0EN_LENGTH                                 0x1
#define _U1CON2_C0EN_MASK                                   0x8
#define _U1CON2_STP_POSN                                    0x4
#define _U1CON2_STP_POSITION                                0x4
#define _U1CON2_STP_SIZE                                    0x2
#define _U1CON2_STP_LENGTH                                  0x2
#define _U1CON2_STP_MASK                                    0x30
#define _U1CON2_RXPOL_POSN                                  0x6
#define _U1CON2_RXPOL_POSITION                              0x6
#define _U1CON2_RXPOL_SIZE                                  0x1
#define _U1CON2_RXPOL_LENGTH                                0x1
#define _U1CON2_RXPOL_MASK                                  0x40
#define _U1CON2_RUNOVF_POSN                                 0x7
#define _U1CON2_RUNOVF_POSITION                             0x7
#define _U1CON2_RUNOVF_SIZE                                 0x1
#define _U1CON2_RUNOVF_LENGTH                               0x1
#define _U1CON2_RUNOVF_MASK                                 0x80
#define _U1CON2_FLO0_POSN                                   0x0
#define _U1CON2_FLO0_POSITION                               0x0
#define _U1CON2_FLO0_SIZE                                   0x1
#define _U1CON2_FLO0_LENGTH                                 0x1
#define _U1CON2_FLO0_MASK                                   0x1
#define _U1CON2_FLO1_POSN                                   0x1
#define _U1CON2_FLO1_POSITION                               0x1
#define _U1CON2_FLO1_SIZE                                   0x1
#define _U1CON2_FLO1_LENGTH                                 0x1
#define _U1CON2_FLO1_MASK                                   0x2
#define _U1CON2_STP0_POSN                                   0x4
#define _U1CON2_STP0_POSITION                               0x4
#define _U1CON2_STP0_SIZE                                   0x1
#define _U1CON2_STP0_LENGTH                                 0x1
#define _U1CON2_STP0_MASK                                   0x10
#define _U1CON2_STP1_POSN                                   0x5
#define _U1CON2_STP1_POSITION                               0x5
#define _U1CON2_STP1_SIZE                                   0x1
#define _U1CON2_STP1_LENGTH                                 0x1
#define _U1CON2_STP1_MASK                                   0x20
#define _U1CON2_U1FLO_POSN                                  0x0
#define _U1CON2_U1FLO_POSITION                              0x0
#define _U1CON2_U1FLO_SIZE                                  0x2
#define _U1CON2_U1FLO_LENGTH                                0x2
#define _U1CON2_U1FLO_MASK                                  0x3
#define _U1CON2_U1TXPOL_POSN                                0x2
#define _U1CON2_U1TXPOL_POSITION                            0x2
#define _U1CON2_U1TXPOL_SIZE                                0x1
#define _U1CON2_U1TXPOL_LENGTH                              0x1
#define _U1CON2_U1TXPOL_MASK                                0x4
#define _U1CON2_U1C0EN_POSN                                 0x3
#define _U1CON2_U1C0EN_POSITION                             0x3
#define _U1CON2_U1C0EN_SIZE                                 0x1
#define _U1CON2_U1C0EN_LENGTH                               0x1
#define _U1CON2_U1C0EN_MASK                                 0x8
#define _U1CON2_U1STP_POSN                                  0x4
#define _U1CON2_U1STP_POSITION                              0x4
#define _U1CON2_U1STP_SIZE                                  0x2
#define _U1CON2_U1STP_LENGTH                                0x2
#define _U1CON2_U1STP_MASK                                  0x30
#define _U1CON2_U1RXPOL_POSN                                0x6
#define _U1CON2_U1RXPOL_POSITION                            0x6
#define _U1CON2_U1RXPOL_SIZE                                0x1
#define _U1CON2_U1RXPOL_LENGTH                              0x1
#define _U1CON2_U1RXPOL_MASK                                0x40
#define _U1CON2_U1RUNOVF_POSN                               0x7
#define _U1CON2_U1RUNOVF_POSITION                           0x7
#define _U1CON2_U1RUNOVF_SIZE                               0x1
#define _U1CON2_U1RUNOVF_LENGTH                             0x1
#define _U1CON2_U1RUNOVF_MASK                               0x80
#define _U1CON2_U1FLO0_POSN                                 0x0
#define _U1CON2_U1FLO0_POSITION                             0x0
#define _U1CON2_U1FLO0_SIZE                                 0x1
#define _U1CON2_U1FLO0_LENGTH                               0x1
#define _U1CON2_U1FLO0_MASK                                 0x1
#define _U1CON2_U1FLO1_POSN                                 0x1
#define _U1CON2_U1FLO1_POSITION                             0x1
#define _U1CON2_U1FLO1_SIZE                                 0x1
#define _U1CON2_U1FLO1_LENGTH                               0x1
#define _U1CON2_U1FLO1_MASK                                 0x2
#define _U1CON2_U1STP0_POSN                                 0x4
#define _U1CON2_U1STP0_POSITION                             0x4
#define _U1CON2_U1STP0_SIZE                                 0x1
#define _U1CON2_U1STP0_LENGTH                               0x1
#define _U1CON2_U1STP0_MASK                                 0x10
#define _U1CON2_U1STP1_POSN                                 0x5
#define _U1CON2_U1STP1_POSITION                             0x5
#define _U1CON2_U1STP1_SIZE                                 0x1
#define _U1CON2_U1STP1_LENGTH                               0x1
#define _U1CON2_U1STP1_MASK                                 0x20

// Register: U1BRG
#define U1BRG U1BRG
extern volatile unsigned short          U1BRG               __at(0x1BC);
#ifndef _LIB_BUILD
asm("U1BRG equ 01BCh");
#endif

// Register: U1BRGL
#define U1BRGL U1BRGL
extern volatile unsigned char           U1BRGL              __at(0x1BC);
#ifndef _LIB_BUILD
asm("U1BRGL equ 01BCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BRGL                   :8;
    };
} U1BRGLbits_t;
extern volatile U1BRGLbits_t U1BRGLbits __at(0x1BC);
// bitfield macros
#define _U1BRGL_BRGL_POSN                                   0x0
#define _U1BRGL_BRGL_POSITION                               0x0
#define _U1BRGL_BRGL_SIZE                                   0x8
#define _U1BRGL_BRGL_LENGTH                                 0x8
#define _U1BRGL_BRGL_MASK                                   0xFF

// Register: U1BRGH
#define U1BRGH U1BRGH
extern volatile unsigned char           U1BRGH              __at(0x1BD);
#ifndef _LIB_BUILD
asm("U1BRGH equ 01BDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BRGH                   :8;
    };
} U1BRGHbits_t;
extern volatile U1BRGHbits_t U1BRGHbits __at(0x1BD);
// bitfield macros
#define _U1BRGH_BRGH_POSN                                   0x0
#define _U1BRGH_BRGH_POSITION                               0x0
#define _U1BRGH_BRGH_SIZE                                   0x8
#define _U1BRGH_BRGH_LENGTH                                 0x8
#define _U1BRGH_BRGH_MASK                                   0xFF

// Register: U1FIFO
#define U1FIFO U1FIFO
extern volatile unsigned char           U1FIFO              __at(0x1BE);
#ifndef _LIB_BUILD
asm("U1FIFO equ 01BEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXBF                   :1;
        unsigned RXBE                   :1;
        unsigned XON                    :1;
        unsigned RXIDL                  :1;
        unsigned TXBF                   :1;
        unsigned TXBE                   :1;
        unsigned STPMD                  :1;
        unsigned TXWRE                  :1;
    };
    struct {
        unsigned U1RXBF                 :1;
        unsigned U1RXBE                 :1;
        unsigned U1XON                  :1;
        unsigned U1RXIDL                :1;
        unsigned U1TXBF                 :1;
        unsigned U1TXBE                 :1;
        unsigned U1STPMD                :1;
        unsigned U1TXWRE                :1;
    };
    struct {
        unsigned                        :3;
        unsigned U1RCIDL                :1;
    };
    struct {
        unsigned                        :3;
        unsigned RCIDL                  :1;
    };
} U1FIFObits_t;
extern volatile U1FIFObits_t U1FIFObits __at(0x1BE);
// bitfield macros
#define _U1FIFO_RXBF_POSN                                   0x0
#define _U1FIFO_RXBF_POSITION                               0x0
#define _U1FIFO_RXBF_SIZE                                   0x1
#define _U1FIFO_RXBF_LENGTH                                 0x1
#define _U1FIFO_RXBF_MASK                                   0x1
#define _U1FIFO_RXBE_POSN                                   0x1
#define _U1FIFO_RXBE_POSITION                               0x1
#define _U1FIFO_RXBE_SIZE                                   0x1
#define _U1FIFO_RXBE_LENGTH                                 0x1
#define _U1FIFO_RXBE_MASK                                   0x2
#define _U1FIFO_XON_POSN                                    0x2
#define _U1FIFO_XON_POSITION                                0x2
#define _U1FIFO_XON_SIZE                                    0x1
#define _U1FIFO_XON_LENGTH                                  0x1
#define _U1FIFO_XON_MASK                                    0x4
#define _U1FIFO_RXIDL_POSN                                  0x3
#define _U1FIFO_RXIDL_POSITION                              0x3
#define _U1FIFO_RXIDL_SIZE                                  0x1
#define _U1FIFO_RXIDL_LENGTH                                0x1
#define _U1FIFO_RXIDL_MASK                                  0x8
#define _U1FIFO_TXBF_POSN                                   0x4
#define _U1FIFO_TXBF_POSITION                               0x4
#define _U1FIFO_TXBF_SIZE                                   0x1
#define _U1FIFO_TXBF_LENGTH                                 0x1
#define _U1FIFO_TXBF_MASK                                   0x10
#define _U1FIFO_TXBE_POSN                                   0x5
#define _U1FIFO_TXBE_POSITION                               0x5
#define _U1FIFO_TXBE_SIZE                                   0x1
#define _U1FIFO_TXBE_LENGTH                                 0x1
#define _U1FIFO_TXBE_MASK                                   0x20
#define _U1FIFO_STPMD_POSN                                  0x6
#define _U1FIFO_STPMD_POSITION                              0x6
#define _U1FIFO_STPMD_SIZE                                  0x1
#define _U1FIFO_STPMD_LENGTH                                0x1
#define _U1FIFO_STPMD_MASK                                  0x40
#define _U1FIFO_TXWRE_POSN                                  0x7
#define _U1FIFO_TXWRE_POSITION                              0x7
#define _U1FIFO_TXWRE_SIZE                                  0x1
#define _U1FIFO_TXWRE_LENGTH                                0x1
#define _U1FIFO_TXWRE_MASK                                  0x80
#define _U1FIFO_U1RXBF_POSN                                 0x0
#define _U1FIFO_U1RXBF_POSITION                             0x0
#define _U1FIFO_U1RXBF_SIZE                                 0x1
#define _U1FIFO_U1RXBF_LENGTH                               0x1
#define _U1FIFO_U1RXBF_MASK                                 0x1
#define _U1FIFO_U1RXBE_POSN                                 0x1
#define _U1FIFO_U1RXBE_POSITION                             0x1
#define _U1FIFO_U1RXBE_SIZE                                 0x1
#define _U1FIFO_U1RXBE_LENGTH                               0x1
#define _U1FIFO_U1RXBE_MASK                                 0x2
#define _U1FIFO_U1XON_POSN                                  0x2
#define _U1FIFO_U1XON_POSITION                              0x2
#define _U1FIFO_U1XON_SIZE                                  0x1
#define _U1FIFO_U1XON_LENGTH                                0x1
#define _U1FIFO_U1XON_MASK                                  0x4
#define _U1FIFO_U1RXIDL_POSN                                0x3
#define _U1FIFO_U1RXIDL_POSITION                            0x3
#define _U1FIFO_U1RXIDL_SIZE                                0x1
#define _U1FIFO_U1RXIDL_LENGTH                              0x1
#define _U1FIFO_U1RXIDL_MASK                                0x8
#define _U1FIFO_U1TXBF_POSN                                 0x4
#define _U1FIFO_U1TXBF_POSITION                             0x4
#define _U1FIFO_U1TXBF_SIZE                                 0x1
#define _U1FIFO_U1TXBF_LENGTH                               0x1
#define _U1FIFO_U1TXBF_MASK                                 0x10
#define _U1FIFO_U1TXBE_POSN                                 0x5
#define _U1FIFO_U1TXBE_POSITION                             0x5
#define _U1FIFO_U1TXBE_SIZE                                 0x1
#define _U1FIFO_U1TXBE_LENGTH                               0x1
#define _U1FIFO_U1TXBE_MASK                                 0x20
#define _U1FIFO_U1STPMD_POSN                                0x6
#define _U1FIFO_U1STPMD_POSITION                            0x6
#define _U1FIFO_U1STPMD_SIZE                                0x1
#define _U1FIFO_U1STPMD_LENGTH                              0x1
#define _U1FIFO_U1STPMD_MASK                                0x40
#define _U1FIFO_U1TXWRE_POSN                                0x7
#define _U1FIFO_U1TXWRE_POSITION                            0x7
#define _U1FIFO_U1TXWRE_SIZE                                0x1
#define _U1FIFO_U1TXWRE_LENGTH                              0x1
#define _U1FIFO_U1TXWRE_MASK                                0x80
#define _U1FIFO_U1RCIDL_POSN                                0x3
#define _U1FIFO_U1RCIDL_POSITION                            0x3
#define _U1FIFO_U1RCIDL_SIZE                                0x1
#define _U1FIFO_U1RCIDL_LENGTH                              0x1
#define _U1FIFO_U1RCIDL_MASK                                0x8
#define _U1FIFO_RCIDL_POSN                                  0x3
#define _U1FIFO_RCIDL_POSITION                              0x3
#define _U1FIFO_RCIDL_SIZE                                  0x1
#define _U1FIFO_RCIDL_LENGTH                                0x1
#define _U1FIFO_RCIDL_MASK                                  0x8

// Register: U1UIR
#define U1UIR U1UIR
extern volatile unsigned char           U1UIR               __at(0x1C0);
#ifndef _LIB_BUILD
asm("U1UIR equ 01C0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned ABDIE                  :1;
        unsigned                        :3;
        unsigned ABDIF                  :1;
        unsigned WUIF                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned U1ABDIE                :1;
        unsigned                        :3;
        unsigned U1ABDIF                :1;
        unsigned U1WUIF                 :1;
    };
} U1UIRbits_t;
extern volatile U1UIRbits_t U1UIRbits __at(0x1C0);
// bitfield macros
#define _U1UIR_ABDIE_POSN                                   0x2
#define _U1UIR_ABDIE_POSITION                               0x2
#define _U1UIR_ABDIE_SIZE                                   0x1
#define _U1UIR_ABDIE_LENGTH                                 0x1
#define _U1UIR_ABDIE_MASK                                   0x4
#define _U1UIR_ABDIF_POSN                                   0x6
#define _U1UIR_ABDIF_POSITION                               0x6
#define _U1UIR_ABDIF_SIZE                                   0x1
#define _U1UIR_ABDIF_LENGTH                                 0x1
#define _U1UIR_ABDIF_MASK                                   0x40
#define _U1UIR_WUIF_POSN                                    0x7
#define _U1UIR_WUIF_POSITION                                0x7
#define _U1UIR_WUIF_SIZE                                    0x1
#define _U1UIR_WUIF_LENGTH                                  0x1
#define _U1UIR_WUIF_MASK                                    0x80
#define _U1UIR_U1ABDIE_POSN                                 0x2
#define _U1UIR_U1ABDIE_POSITION                             0x2
#define _U1UIR_U1ABDIE_SIZE                                 0x1
#define _U1UIR_U1ABDIE_LENGTH                               0x1
#define _U1UIR_U1ABDIE_MASK                                 0x4
#define _U1UIR_U1ABDIF_POSN                                 0x6
#define _U1UIR_U1ABDIF_POSITION                             0x6
#define _U1UIR_U1ABDIF_SIZE                                 0x1
#define _U1UIR_U1ABDIF_LENGTH                               0x1
#define _U1UIR_U1ABDIF_MASK                                 0x40
#define _U1UIR_U1WUIF_POSN                                  0x7
#define _U1UIR_U1WUIF_POSITION                              0x7
#define _U1UIR_U1WUIF_SIZE                                  0x1
#define _U1UIR_U1WUIF_LENGTH                                0x1
#define _U1UIR_U1WUIF_MASK                                  0x80

// Register: U1ERRIR
#define U1ERRIR U1ERRIR
extern volatile unsigned char           U1ERRIR             __at(0x1C1);
#ifndef _LIB_BUILD
asm("U1ERRIR equ 01C1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXCIF                  :1;
        unsigned RXFOIF                 :1;
        unsigned RXBKIF                 :1;
        unsigned FERIF                  :1;
        unsigned CERIF                  :1;
        unsigned ABDOVF                 :1;
        unsigned PERIF                  :1;
        unsigned TXMTIF                 :1;
    };
    struct {
        unsigned U1TXCIF                :1;
        unsigned U1RXFOIF               :1;
        unsigned U1RXBKIF               :1;
        unsigned U1FERIF                :1;
        unsigned U1CERIF                :1;
        unsigned U1ABDOVF               :1;
        unsigned U1PERIF                :1;
        unsigned U1TXMTIF               :1;
    };
} U1ERRIRbits_t;
extern volatile U1ERRIRbits_t U1ERRIRbits __at(0x1C1);
// bitfield macros
#define _U1ERRIR_TXCIF_POSN                                 0x0
#define _U1ERRIR_TXCIF_POSITION                             0x0
#define _U1ERRIR_TXCIF_SIZE                                 0x1
#define _U1ERRIR_TXCIF_LENGTH                               0x1
#define _U1ERRIR_TXCIF_MASK                                 0x1
#define _U1ERRIR_RXFOIF_POSN                                0x1
#define _U1ERRIR_RXFOIF_POSITION                            0x1
#define _U1ERRIR_RXFOIF_SIZE                                0x1
#define _U1ERRIR_RXFOIF_LENGTH                              0x1
#define _U1ERRIR_RXFOIF_MASK                                0x2
#define _U1ERRIR_RXBKIF_POSN                                0x2
#define _U1ERRIR_RXBKIF_POSITION                            0x2
#define _U1ERRIR_RXBKIF_SIZE                                0x1
#define _U1ERRIR_RXBKIF_LENGTH                              0x1
#define _U1ERRIR_RXBKIF_MASK                                0x4
#define _U1ERRIR_FERIF_POSN                                 0x3
#define _U1ERRIR_FERIF_POSITION                             0x3
#define _U1ERRIR_FERIF_SIZE                                 0x1
#define _U1ERRIR_FERIF_LENGTH                               0x1
#define _U1ERRIR_FERIF_MASK                                 0x8
#define _U1ERRIR_CERIF_POSN                                 0x4
#define _U1ERRIR_CERIF_POSITION                             0x4
#define _U1ERRIR_CERIF_SIZE                                 0x1
#define _U1ERRIR_CERIF_LENGTH                               0x1
#define _U1ERRIR_CERIF_MASK                                 0x10
#define _U1ERRIR_ABDOVF_POSN                                0x5
#define _U1ERRIR_ABDOVF_POSITION                            0x5
#define _U1ERRIR_ABDOVF_SIZE                                0x1
#define _U1ERRIR_ABDOVF_LENGTH                              0x1
#define _U1ERRIR_ABDOVF_MASK                                0x20
#define _U1ERRIR_PERIF_POSN                                 0x6
#define _U1ERRIR_PERIF_POSITION                             0x6
#define _U1ERRIR_PERIF_SIZE                                 0x1
#define _U1ERRIR_PERIF_LENGTH                               0x1
#define _U1ERRIR_PERIF_MASK                                 0x40
#define _U1ERRIR_TXMTIF_POSN                                0x7
#define _U1ERRIR_TXMTIF_POSITION                            0x7
#define _U1ERRIR_TXMTIF_SIZE                                0x1
#define _U1ERRIR_TXMTIF_LENGTH                              0x1
#define _U1ERRIR_TXMTIF_MASK                                0x80
#define _U1ERRIR_U1TXCIF_POSN                               0x0
#define _U1ERRIR_U1TXCIF_POSITION                           0x0
#define _U1ERRIR_U1TXCIF_SIZE                               0x1
#define _U1ERRIR_U1TXCIF_LENGTH                             0x1
#define _U1ERRIR_U1TXCIF_MASK                               0x1
#define _U1ERRIR_U1RXFOIF_POSN                              0x1
#define _U1ERRIR_U1RXFOIF_POSITION                          0x1
#define _U1ERRIR_U1RXFOIF_SIZE                              0x1
#define _U1ERRIR_U1RXFOIF_LENGTH                            0x1
#define _U1ERRIR_U1RXFOIF_MASK                              0x2
#define _U1ERRIR_U1RXBKIF_POSN                              0x2
#define _U1ERRIR_U1RXBKIF_POSITION                          0x2
#define _U1ERRIR_U1RXBKIF_SIZE                              0x1
#define _U1ERRIR_U1RXBKIF_LENGTH                            0x1
#define _U1ERRIR_U1RXBKIF_MASK                              0x4
#define _U1ERRIR_U1FERIF_POSN                               0x3
#define _U1ERRIR_U1FERIF_POSITION                           0x3
#define _U1ERRIR_U1FERIF_SIZE                               0x1
#define _U1ERRIR_U1FERIF_LENGTH                             0x1
#define _U1ERRIR_U1FERIF_MASK                               0x8
#define _U1ERRIR_U1CERIF_POSN                               0x4
#define _U1ERRIR_U1CERIF_POSITION                           0x4
#define _U1ERRIR_U1CERIF_SIZE                               0x1
#define _U1ERRIR_U1CERIF_LENGTH                             0x1
#define _U1ERRIR_U1CERIF_MASK                               0x10
#define _U1ERRIR_U1ABDOVF_POSN                              0x5
#define _U1ERRIR_U1ABDOVF_POSITION                          0x5
#define _U1ERRIR_U1ABDOVF_SIZE                              0x1
#define _U1ERRIR_U1ABDOVF_LENGTH                            0x1
#define _U1ERRIR_U1ABDOVF_MASK                              0x20
#define _U1ERRIR_U1PERIF_POSN                               0x6
#define _U1ERRIR_U1PERIF_POSITION                           0x6
#define _U1ERRIR_U1PERIF_SIZE                               0x1
#define _U1ERRIR_U1PERIF_LENGTH                             0x1
#define _U1ERRIR_U1PERIF_MASK                               0x40
#define _U1ERRIR_U1TXMTIF_POSN                              0x7
#define _U1ERRIR_U1TXMTIF_POSITION                          0x7
#define _U1ERRIR_U1TXMTIF_SIZE                              0x1
#define _U1ERRIR_U1TXMTIF_LENGTH                            0x1
#define _U1ERRIR_U1TXMTIF_MASK                              0x80

// Register: U1ERRIE
#define U1ERRIE U1ERRIE
extern volatile unsigned char           U1ERRIE             __at(0x1C2);
#ifndef _LIB_BUILD
asm("U1ERRIE equ 01C2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXCIE                  :1;
        unsigned RXFOIE                 :1;
        unsigned RXBKIE                 :1;
        unsigned FERIE                  :1;
        unsigned CERIE                  :1;
        unsigned ABDOVE                 :1;
        unsigned PERIE                  :1;
        unsigned TXMTIE                 :1;
    };
    struct {
        unsigned U1TXCIE                :1;
        unsigned U1RXFOIE               :1;
        unsigned U1RXBKIE               :1;
        unsigned U1FERIE                :1;
        unsigned U1CERIE                :1;
        unsigned U1ABDOVE               :1;
        unsigned U1PERIE                :1;
        unsigned U1TXMTIE               :1;
    };
} U1ERRIEbits_t;
extern volatile U1ERRIEbits_t U1ERRIEbits __at(0x1C2);
// bitfield macros
#define _U1ERRIE_TXCIE_POSN                                 0x0
#define _U1ERRIE_TXCIE_POSITION                             0x0
#define _U1ERRIE_TXCIE_SIZE                                 0x1
#define _U1ERRIE_TXCIE_LENGTH                               0x1
#define _U1ERRIE_TXCIE_MASK                                 0x1
#define _U1ERRIE_RXFOIE_POSN                                0x1
#define _U1ERRIE_RXFOIE_POSITION                            0x1
#define _U1ERRIE_RXFOIE_SIZE                                0x1
#define _U1ERRIE_RXFOIE_LENGTH                              0x1
#define _U1ERRIE_RXFOIE_MASK                                0x2
#define _U1ERRIE_RXBKIE_POSN                                0x2
#define _U1ERRIE_RXBKIE_POSITION                            0x2
#define _U1ERRIE_RXBKIE_SIZE                                0x1
#define _U1ERRIE_RXBKIE_LENGTH                              0x1
#define _U1ERRIE_RXBKIE_MASK                                0x4
#define _U1ERRIE_FERIE_POSN                                 0x3
#define _U1ERRIE_FERIE_POSITION                             0x3
#define _U1ERRIE_FERIE_SIZE                                 0x1
#define _U1ERRIE_FERIE_LENGTH                               0x1
#define _U1ERRIE_FERIE_MASK                                 0x8
#define _U1ERRIE_CERIE_POSN                                 0x4
#define _U1ERRIE_CERIE_POSITION                             0x4
#define _U1ERRIE_CERIE_SIZE                                 0x1
#define _U1ERRIE_CERIE_LENGTH                               0x1
#define _U1ERRIE_CERIE_MASK                                 0x10
#define _U1ERRIE_ABDOVE_POSN                                0x5
#define _U1ERRIE_ABDOVE_POSITION                            0x5
#define _U1ERRIE_ABDOVE_SIZE                                0x1
#define _U1ERRIE_ABDOVE_LENGTH                              0x1
#define _U1ERRIE_ABDOVE_MASK                                0x20
#define _U1ERRIE_PERIE_POSN                                 0x6
#define _U1ERRIE_PERIE_POSITION                             0x6
#define _U1ERRIE_PERIE_SIZE                                 0x1
#define _U1ERRIE_PERIE_LENGTH                               0x1
#define _U1ERRIE_PERIE_MASK                                 0x40
#define _U1ERRIE_TXMTIE_POSN                                0x7
#define _U1ERRIE_TXMTIE_POSITION                            0x7
#define _U1ERRIE_TXMTIE_SIZE                                0x1
#define _U1ERRIE_TXMTIE_LENGTH                              0x1
#define _U1ERRIE_TXMTIE_MASK                                0x80
#define _U1ERRIE_U1TXCIE_POSN                               0x0
#define _U1ERRIE_U1TXCIE_POSITION                           0x0
#define _U1ERRIE_U1TXCIE_SIZE                               0x1
#define _U1ERRIE_U1TXCIE_LENGTH                             0x1
#define _U1ERRIE_U1TXCIE_MASK                               0x1
#define _U1ERRIE_U1RXFOIE_POSN                              0x1
#define _U1ERRIE_U1RXFOIE_POSITION                          0x1
#define _U1ERRIE_U1RXFOIE_SIZE                              0x1
#define _U1ERRIE_U1RXFOIE_LENGTH                            0x1
#define _U1ERRIE_U1RXFOIE_MASK                              0x2
#define _U1ERRIE_U1RXBKIE_POSN                              0x2
#define _U1ERRIE_U1RXBKIE_POSITION                          0x2
#define _U1ERRIE_U1RXBKIE_SIZE                              0x1
#define _U1ERRIE_U1RXBKIE_LENGTH                            0x1
#define _U1ERRIE_U1RXBKIE_MASK                              0x4
#define _U1ERRIE_U1FERIE_POSN                               0x3
#define _U1ERRIE_U1FERIE_POSITION                           0x3
#define _U1ERRIE_U1FERIE_SIZE                               0x1
#define _U1ERRIE_U1FERIE_LENGTH                             0x1
#define _U1ERRIE_U1FERIE_MASK                               0x8
#define _U1ERRIE_U1CERIE_POSN                               0x4
#define _U1ERRIE_U1CERIE_POSITION                           0x4
#define _U1ERRIE_U1CERIE_SIZE                               0x1
#define _U1ERRIE_U1CERIE_LENGTH                             0x1
#define _U1ERRIE_U1CERIE_MASK                               0x10
#define _U1ERRIE_U1ABDOVE_POSN                              0x5
#define _U1ERRIE_U1ABDOVE_POSITION                          0x5
#define _U1ERRIE_U1ABDOVE_SIZE                              0x1
#define _U1ERRIE_U1ABDOVE_LENGTH                            0x1
#define _U1ERRIE_U1ABDOVE_MASK                              0x20
#define _U1ERRIE_U1PERIE_POSN                               0x6
#define _U1ERRIE_U1PERIE_POSITION                           0x6
#define _U1ERRIE_U1PERIE_SIZE                               0x1
#define _U1ERRIE_U1PERIE_LENGTH                             0x1
#define _U1ERRIE_U1PERIE_MASK                               0x40
#define _U1ERRIE_U1TXMTIE_POSN                              0x7
#define _U1ERRIE_U1TXMTIE_POSITION                          0x7
#define _U1ERRIE_U1TXMTIE_SIZE                              0x1
#define _U1ERRIE_U1TXMTIE_LENGTH                            0x1
#define _U1ERRIE_U1TXMTIE_MASK                              0x80

// Register: U2RXB
#define U2RXB U2RXB
extern volatile unsigned char           U2RXB               __at(0x1C3);
#ifndef _LIB_BUILD
asm("U2RXB equ 01C3h");
#endif
// aliases
extern volatile unsigned char           U2RXBL              __at(0x1C3);
#ifndef _LIB_BUILD
asm("U2RXBL equ 01C3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} U2RXBbits_t;
extern volatile U2RXBbits_t U2RXBbits __at(0x1C3);
// bitfield macros
#define _U2RXB_RXB_POSN                                     0x0
#define _U2RXB_RXB_POSITION                                 0x0
#define _U2RXB_RXB_SIZE                                     0x8
#define _U2RXB_RXB_LENGTH                                   0x8
#define _U2RXB_RXB_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} U2RXBLbits_t;
extern volatile U2RXBLbits_t U2RXBLbits __at(0x1C3);
// bitfield macros
#define _U2RXBL_RXB_POSN                                    0x0
#define _U2RXBL_RXB_POSITION                                0x0
#define _U2RXBL_RXB_SIZE                                    0x8
#define _U2RXBL_RXB_LENGTH                                  0x8
#define _U2RXBL_RXB_MASK                                    0xFF

// Register: U2TXB
#define U2TXB U2TXB
extern volatile unsigned char           U2TXB               __at(0x1C5);
#ifndef _LIB_BUILD
asm("U2TXB equ 01C5h");
#endif
// aliases
extern volatile unsigned char           U2TXBL              __at(0x1C5);
#ifndef _LIB_BUILD
asm("U2TXBL equ 01C5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} U2TXBbits_t;
extern volatile U2TXBbits_t U2TXBbits __at(0x1C5);
// bitfield macros
#define _U2TXB_TXB_POSN                                     0x0
#define _U2TXB_TXB_POSITION                                 0x0
#define _U2TXB_TXB_SIZE                                     0x8
#define _U2TXB_TXB_LENGTH                                   0x8
#define _U2TXB_TXB_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} U2TXBLbits_t;
extern volatile U2TXBLbits_t U2TXBLbits __at(0x1C5);
// bitfield macros
#define _U2TXBL_TXB_POSN                                    0x0
#define _U2TXBL_TXB_POSITION                                0x0
#define _U2TXBL_TXB_SIZE                                    0x8
#define _U2TXBL_TXB_LENGTH                                  0x8
#define _U2TXBL_TXB_MASK                                    0xFF

// Register: U2P1
#define U2P1 U2P1
extern volatile unsigned char           U2P1                __at(0x1C7);
#ifndef _LIB_BUILD
asm("U2P1 equ 01C7h");
#endif

// Register: U2P1L
#define U2P1L U2P1L
extern volatile unsigned char           U2P1L               __at(0x1C7);
#ifndef _LIB_BUILD
asm("U2P1L equ 01C7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P1L                    :8;
    };
} U2P1Lbits_t;
extern volatile U2P1Lbits_t U2P1Lbits __at(0x1C7);
// bitfield macros
#define _U2P1L_P1L_POSN                                     0x0
#define _U2P1L_P1L_POSITION                                 0x0
#define _U2P1L_P1L_SIZE                                     0x8
#define _U2P1L_P1L_LENGTH                                   0x8
#define _U2P1L_P1L_MASK                                     0xFF

// Register: U2P2
#define U2P2 U2P2
extern volatile unsigned char           U2P2                __at(0x1C9);
#ifndef _LIB_BUILD
asm("U2P2 equ 01C9h");
#endif

// Register: U2P2L
#define U2P2L U2P2L
extern volatile unsigned char           U2P2L               __at(0x1C9);
#ifndef _LIB_BUILD
asm("U2P2L equ 01C9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P2L                    :8;
    };
} U2P2Lbits_t;
extern volatile U2P2Lbits_t U2P2Lbits __at(0x1C9);
// bitfield macros
#define _U2P2L_P2L_POSN                                     0x0
#define _U2P2L_P2L_POSITION                                 0x0
#define _U2P2L_P2L_SIZE                                     0x8
#define _U2P2L_P2L_LENGTH                                   0x8
#define _U2P2L_P2L_MASK                                     0xFF

// Register: U2P3
#define U2P3 U2P3
extern volatile unsigned char           U2P3                __at(0x1CB);
#ifndef _LIB_BUILD
asm("U2P3 equ 01CBh");
#endif

// Register: U2P3L
#define U2P3L U2P3L
extern volatile unsigned char           U2P3L               __at(0x1CB);
#ifndef _LIB_BUILD
asm("U2P3L equ 01CBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned P3L                    :8;
    };
} U2P3Lbits_t;
extern volatile U2P3Lbits_t U2P3Lbits __at(0x1CB);
// bitfield macros
#define _U2P3L_P3L_POSN                                     0x0
#define _U2P3L_P3L_POSITION                                 0x0
#define _U2P3L_P3L_SIZE                                     0x8
#define _U2P3L_P3L_LENGTH                                   0x8
#define _U2P3L_P3L_MASK                                     0xFF

// Register: U2CON0
#define U2CON0 U2CON0
extern volatile unsigned char           U2CON0              __at(0x1CD);
#ifndef _LIB_BUILD
asm("U2CON0 equ 01CDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
    };
    struct {
        unsigned U2MODE                 :4;
        unsigned U2RXEN                 :1;
        unsigned U2TXEN                 :1;
        unsigned U2ABDEN                :1;
        unsigned U2BRGS                 :1;
    };
    struct {
        unsigned U2MODE0                :1;
        unsigned U2MODE1                :1;
        unsigned U2MODE2                :1;
    };
    struct {
        unsigned MODE                   :4;
        unsigned RXEN                   :1;
        unsigned TXEN                   :1;
        unsigned ABDEN                  :1;
        unsigned BRGS                   :1;
    };
} U2CON0bits_t;
extern volatile U2CON0bits_t U2CON0bits __at(0x1CD);
// bitfield macros
#define _U2CON0_MODE0_POSN                                  0x0
#define _U2CON0_MODE0_POSITION                              0x0
#define _U2CON0_MODE0_SIZE                                  0x1
#define _U2CON0_MODE0_LENGTH                                0x1
#define _U2CON0_MODE0_MASK                                  0x1
#define _U2CON0_MODE1_POSN                                  0x1
#define _U2CON0_MODE1_POSITION                              0x1
#define _U2CON0_MODE1_SIZE                                  0x1
#define _U2CON0_MODE1_LENGTH                                0x1
#define _U2CON0_MODE1_MASK                                  0x2
#define _U2CON0_MODE2_POSN                                  0x2
#define _U2CON0_MODE2_POSITION                              0x2
#define _U2CON0_MODE2_SIZE                                  0x1
#define _U2CON0_MODE2_LENGTH                                0x1
#define _U2CON0_MODE2_MASK                                  0x4
#define _U2CON0_U2MODE_POSN                                 0x0
#define _U2CON0_U2MODE_POSITION                             0x0
#define _U2CON0_U2MODE_SIZE                                 0x4
#define _U2CON0_U2MODE_LENGTH                               0x4
#define _U2CON0_U2MODE_MASK                                 0xF
#define _U2CON0_U2RXEN_POSN                                 0x4
#define _U2CON0_U2RXEN_POSITION                             0x4
#define _U2CON0_U2RXEN_SIZE                                 0x1
#define _U2CON0_U2RXEN_LENGTH                               0x1
#define _U2CON0_U2RXEN_MASK                                 0x10
#define _U2CON0_U2TXEN_POSN                                 0x5
#define _U2CON0_U2TXEN_POSITION                             0x5
#define _U2CON0_U2TXEN_SIZE                                 0x1
#define _U2CON0_U2TXEN_LENGTH                               0x1
#define _U2CON0_U2TXEN_MASK                                 0x20
#define _U2CON0_U2ABDEN_POSN                                0x6
#define _U2CON0_U2ABDEN_POSITION                            0x6
#define _U2CON0_U2ABDEN_SIZE                                0x1
#define _U2CON0_U2ABDEN_LENGTH                              0x1
#define _U2CON0_U2ABDEN_MASK                                0x40
#define _U2CON0_U2BRGS_POSN                                 0x7
#define _U2CON0_U2BRGS_POSITION                             0x7
#define _U2CON0_U2BRGS_SIZE                                 0x1
#define _U2CON0_U2BRGS_LENGTH                               0x1
#define _U2CON0_U2BRGS_MASK                                 0x80
#define _U2CON0_U2MODE0_POSN                                0x0
#define _U2CON0_U2MODE0_POSITION                            0x0
#define _U2CON0_U2MODE0_SIZE                                0x1
#define _U2CON0_U2MODE0_LENGTH                              0x1
#define _U2CON0_U2MODE0_MASK                                0x1
#define _U2CON0_U2MODE1_POSN                                0x1
#define _U2CON0_U2MODE1_POSITION                            0x1
#define _U2CON0_U2MODE1_SIZE                                0x1
#define _U2CON0_U2MODE1_LENGTH                              0x1
#define _U2CON0_U2MODE1_MASK                                0x2
#define _U2CON0_U2MODE2_POSN                                0x2
#define _U2CON0_U2MODE2_POSITION                            0x2
#define _U2CON0_U2MODE2_SIZE                                0x1
#define _U2CON0_U2MODE2_LENGTH                              0x1
#define _U2CON0_U2MODE2_MASK                                0x4
#define _U2CON0_MODE_POSN                                   0x0
#define _U2CON0_MODE_POSITION                               0x0
#define _U2CON0_MODE_SIZE                                   0x4
#define _U2CON0_MODE_LENGTH                                 0x4
#define _U2CON0_MODE_MASK                                   0xF
#define _U2CON0_RXEN_POSN                                   0x4
#define _U2CON0_RXEN_POSITION                               0x4
#define _U2CON0_RXEN_SIZE                                   0x1
#define _U2CON0_RXEN_LENGTH                                 0x1
#define _U2CON0_RXEN_MASK                                   0x10
#define _U2CON0_TXEN_POSN                                   0x5
#define _U2CON0_TXEN_POSITION                               0x5
#define _U2CON0_TXEN_SIZE                                   0x1
#define _U2CON0_TXEN_LENGTH                                 0x1
#define _U2CON0_TXEN_MASK                                   0x20
#define _U2CON0_ABDEN_POSN                                  0x6
#define _U2CON0_ABDEN_POSITION                              0x6
#define _U2CON0_ABDEN_SIZE                                  0x1
#define _U2CON0_ABDEN_LENGTH                                0x1
#define _U2CON0_ABDEN_MASK                                  0x40
#define _U2CON0_BRGS_POSN                                   0x7
#define _U2CON0_BRGS_POSITION                               0x7
#define _U2CON0_BRGS_SIZE                                   0x1
#define _U2CON0_BRGS_LENGTH                                 0x1
#define _U2CON0_BRGS_MASK                                   0x80

// Register: U2CON1
#define U2CON1 U2CON1
extern volatile unsigned char           U2CON1              __at(0x1CE);
#ifndef _LIB_BUILD
asm("U2CON1 equ 01CEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SENDB                  :1;
        unsigned BRKOVR                 :1;
        unsigned                        :1;
        unsigned RXBIMD                 :1;
        unsigned WUE                    :1;
        unsigned                        :2;
        unsigned ON                     :1;
    };
    struct {
        unsigned U2SENDB                :1;
        unsigned U2BRKOVR               :1;
        unsigned                        :1;
        unsigned U2RXBIMD               :1;
        unsigned U2WUE                  :1;
        unsigned                        :2;
        unsigned U2ON                   :1;
    };
} U2CON1bits_t;
extern volatile U2CON1bits_t U2CON1bits __at(0x1CE);
// bitfield macros
#define _U2CON1_SENDB_POSN                                  0x0
#define _U2CON1_SENDB_POSITION                              0x0
#define _U2CON1_SENDB_SIZE                                  0x1
#define _U2CON1_SENDB_LENGTH                                0x1
#define _U2CON1_SENDB_MASK                                  0x1
#define _U2CON1_BRKOVR_POSN                                 0x1
#define _U2CON1_BRKOVR_POSITION                             0x1
#define _U2CON1_BRKOVR_SIZE                                 0x1
#define _U2CON1_BRKOVR_LENGTH                               0x1
#define _U2CON1_BRKOVR_MASK                                 0x2
#define _U2CON1_RXBIMD_POSN                                 0x3
#define _U2CON1_RXBIMD_POSITION                             0x3
#define _U2CON1_RXBIMD_SIZE                                 0x1
#define _U2CON1_RXBIMD_LENGTH                               0x1
#define _U2CON1_RXBIMD_MASK                                 0x8
#define _U2CON1_WUE_POSN                                    0x4
#define _U2CON1_WUE_POSITION                                0x4
#define _U2CON1_WUE_SIZE                                    0x1
#define _U2CON1_WUE_LENGTH                                  0x1
#define _U2CON1_WUE_MASK                                    0x10
#define _U2CON1_ON_POSN                                     0x7
#define _U2CON1_ON_POSITION                                 0x7
#define _U2CON1_ON_SIZE                                     0x1
#define _U2CON1_ON_LENGTH                                   0x1
#define _U2CON1_ON_MASK                                     0x80
#define _U2CON1_U2SENDB_POSN                                0x0
#define _U2CON1_U2SENDB_POSITION                            0x0
#define _U2CON1_U2SENDB_SIZE                                0x1
#define _U2CON1_U2SENDB_LENGTH                              0x1
#define _U2CON1_U2SENDB_MASK                                0x1
#define _U2CON1_U2BRKOVR_POSN                               0x1
#define _U2CON1_U2BRKOVR_POSITION                           0x1
#define _U2CON1_U2BRKOVR_SIZE                               0x1
#define _U2CON1_U2BRKOVR_LENGTH                             0x1
#define _U2CON1_U2BRKOVR_MASK                               0x2
#define _U2CON1_U2RXBIMD_POSN                               0x3
#define _U2CON1_U2RXBIMD_POSITION                           0x3
#define _U2CON1_U2RXBIMD_SIZE                               0x1
#define _U2CON1_U2RXBIMD_LENGTH                             0x1
#define _U2CON1_U2RXBIMD_MASK                               0x8
#define _U2CON1_U2WUE_POSN                                  0x4
#define _U2CON1_U2WUE_POSITION                              0x4
#define _U2CON1_U2WUE_SIZE                                  0x1
#define _U2CON1_U2WUE_LENGTH                                0x1
#define _U2CON1_U2WUE_MASK                                  0x10
#define _U2CON1_U2ON_POSN                                   0x7
#define _U2CON1_U2ON_POSITION                               0x7
#define _U2CON1_U2ON_SIZE                                   0x1
#define _U2CON1_U2ON_LENGTH                                 0x1
#define _U2CON1_U2ON_MASK                                   0x80

// Register: U2CON2
#define U2CON2 U2CON2
extern volatile unsigned char           U2CON2              __at(0x1CF);
#ifndef _LIB_BUILD
asm("U2CON2 equ 01CFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLO                    :2;
        unsigned TXPOL                  :1;
        unsigned                        :1;
        unsigned STP                    :2;
        unsigned RXPOL                  :1;
        unsigned RUNOVF                 :1;
    };
    struct {
        unsigned FLO0                   :1;
        unsigned FLO1                   :1;
        unsigned                        :2;
        unsigned STP0                   :1;
        unsigned STP1                   :1;
    };
    struct {
        unsigned U2FLO                  :2;
        unsigned U2TXPOL                :1;
        unsigned                        :1;
        unsigned U2STP                  :2;
        unsigned U2RXPOL                :1;
        unsigned U2RUNOVF               :1;
    };
    struct {
        unsigned U2FLO0                 :1;
        unsigned U2FLO1                 :1;
        unsigned                        :2;
        unsigned U2STP0                 :1;
        unsigned U2STP1                 :1;
    };
} U2CON2bits_t;
extern volatile U2CON2bits_t U2CON2bits __at(0x1CF);
// bitfield macros
#define _U2CON2_FLO_POSN                                    0x0
#define _U2CON2_FLO_POSITION                                0x0
#define _U2CON2_FLO_SIZE                                    0x2
#define _U2CON2_FLO_LENGTH                                  0x2
#define _U2CON2_FLO_MASK                                    0x3
#define _U2CON2_TXPOL_POSN                                  0x2
#define _U2CON2_TXPOL_POSITION                              0x2
#define _U2CON2_TXPOL_SIZE                                  0x1
#define _U2CON2_TXPOL_LENGTH                                0x1
#define _U2CON2_TXPOL_MASK                                  0x4
#define _U2CON2_STP_POSN                                    0x4
#define _U2CON2_STP_POSITION                                0x4
#define _U2CON2_STP_SIZE                                    0x2
#define _U2CON2_STP_LENGTH                                  0x2
#define _U2CON2_STP_MASK                                    0x30
#define _U2CON2_RXPOL_POSN                                  0x6
#define _U2CON2_RXPOL_POSITION                              0x6
#define _U2CON2_RXPOL_SIZE                                  0x1
#define _U2CON2_RXPOL_LENGTH                                0x1
#define _U2CON2_RXPOL_MASK                                  0x40
#define _U2CON2_RUNOVF_POSN                                 0x7
#define _U2CON2_RUNOVF_POSITION                             0x7
#define _U2CON2_RUNOVF_SIZE                                 0x1
#define _U2CON2_RUNOVF_LENGTH                               0x1
#define _U2CON2_RUNOVF_MASK                                 0x80
#define _U2CON2_FLO0_POSN                                   0x0
#define _U2CON2_FLO0_POSITION                               0x0
#define _U2CON2_FLO0_SIZE                                   0x1
#define _U2CON2_FLO0_LENGTH                                 0x1
#define _U2CON2_FLO0_MASK                                   0x1
#define _U2CON2_FLO1_POSN                                   0x1
#define _U2CON2_FLO1_POSITION                               0x1
#define _U2CON2_FLO1_SIZE                                   0x1
#define _U2CON2_FLO1_LENGTH                                 0x1
#define _U2CON2_FLO1_MASK                                   0x2
#define _U2CON2_STP0_POSN                                   0x4
#define _U2CON2_STP0_POSITION                               0x4
#define _U2CON2_STP0_SIZE                                   0x1
#define _U2CON2_STP0_LENGTH                                 0x1
#define _U2CON2_STP0_MASK                                   0x10
#define _U2CON2_STP1_POSN                                   0x5
#define _U2CON2_STP1_POSITION                               0x5
#define _U2CON2_STP1_SIZE                                   0x1
#define _U2CON2_STP1_LENGTH                                 0x1
#define _U2CON2_STP1_MASK                                   0x20
#define _U2CON2_U2FLO_POSN                                  0x0
#define _U2CON2_U2FLO_POSITION                              0x0
#define _U2CON2_U2FLO_SIZE                                  0x2
#define _U2CON2_U2FLO_LENGTH                                0x2
#define _U2CON2_U2FLO_MASK                                  0x3
#define _U2CON2_U2TXPOL_POSN                                0x2
#define _U2CON2_U2TXPOL_POSITION                            0x2
#define _U2CON2_U2TXPOL_SIZE                                0x1
#define _U2CON2_U2TXPOL_LENGTH                              0x1
#define _U2CON2_U2TXPOL_MASK                                0x4
#define _U2CON2_U2STP_POSN                                  0x4
#define _U2CON2_U2STP_POSITION                              0x4
#define _U2CON2_U2STP_SIZE                                  0x2
#define _U2CON2_U2STP_LENGTH                                0x2
#define _U2CON2_U2STP_MASK                                  0x30
#define _U2CON2_U2RXPOL_POSN                                0x6
#define _U2CON2_U2RXPOL_POSITION                            0x6
#define _U2CON2_U2RXPOL_SIZE                                0x1
#define _U2CON2_U2RXPOL_LENGTH                              0x1
#define _U2CON2_U2RXPOL_MASK                                0x40
#define _U2CON2_U2RUNOVF_POSN                               0x7
#define _U2CON2_U2RUNOVF_POSITION                           0x7
#define _U2CON2_U2RUNOVF_SIZE                               0x1
#define _U2CON2_U2RUNOVF_LENGTH                             0x1
#define _U2CON2_U2RUNOVF_MASK                               0x80
#define _U2CON2_U2FLO0_POSN                                 0x0
#define _U2CON2_U2FLO0_POSITION                             0x0
#define _U2CON2_U2FLO0_SIZE                                 0x1
#define _U2CON2_U2FLO0_LENGTH                               0x1
#define _U2CON2_U2FLO0_MASK                                 0x1
#define _U2CON2_U2FLO1_POSN                                 0x1
#define _U2CON2_U2FLO1_POSITION                             0x1
#define _U2CON2_U2FLO1_SIZE                                 0x1
#define _U2CON2_U2FLO1_LENGTH                               0x1
#define _U2CON2_U2FLO1_MASK                                 0x2
#define _U2CON2_U2STP0_POSN                                 0x4
#define _U2CON2_U2STP0_POSITION                             0x4
#define _U2CON2_U2STP0_SIZE                                 0x1
#define _U2CON2_U2STP0_LENGTH                               0x1
#define _U2CON2_U2STP0_MASK                                 0x10
#define _U2CON2_U2STP1_POSN                                 0x5
#define _U2CON2_U2STP1_POSITION                             0x5
#define _U2CON2_U2STP1_SIZE                                 0x1
#define _U2CON2_U2STP1_LENGTH                               0x1
#define _U2CON2_U2STP1_MASK                                 0x20

// Register: U2BRG
#define U2BRG U2BRG
extern volatile unsigned short          U2BRG               __at(0x1D0);
#ifndef _LIB_BUILD
asm("U2BRG equ 01D0h");
#endif

// Register: U2BRGL
#define U2BRGL U2BRGL
extern volatile unsigned char           U2BRGL              __at(0x1D0);
#ifndef _LIB_BUILD
asm("U2BRGL equ 01D0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BRGL                   :8;
    };
} U2BRGLbits_t;
extern volatile U2BRGLbits_t U2BRGLbits __at(0x1D0);
// bitfield macros
#define _U2BRGL_BRGL_POSN                                   0x0
#define _U2BRGL_BRGL_POSITION                               0x0
#define _U2BRGL_BRGL_SIZE                                   0x8
#define _U2BRGL_BRGL_LENGTH                                 0x8
#define _U2BRGL_BRGL_MASK                                   0xFF

// Register: U2BRGH
#define U2BRGH U2BRGH
extern volatile unsigned char           U2BRGH              __at(0x1D1);
#ifndef _LIB_BUILD
asm("U2BRGH equ 01D1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BRGH                   :8;
    };
} U2BRGHbits_t;
extern volatile U2BRGHbits_t U2BRGHbits __at(0x1D1);
// bitfield macros
#define _U2BRGH_BRGH_POSN                                   0x0
#define _U2BRGH_BRGH_POSITION                               0x0
#define _U2BRGH_BRGH_SIZE                                   0x8
#define _U2BRGH_BRGH_LENGTH                                 0x8
#define _U2BRGH_BRGH_MASK                                   0xFF

// Register: U2FIFO
#define U2FIFO U2FIFO
extern volatile unsigned char           U2FIFO              __at(0x1D2);
#ifndef _LIB_BUILD
asm("U2FIFO equ 01D2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXBF                   :1;
        unsigned RXBE                   :1;
        unsigned XON                    :1;
        unsigned RXIDL                  :1;
        unsigned TXBF                   :1;
        unsigned TXBE                   :1;
        unsigned STPMD                  :1;
        unsigned TXWRE                  :1;
    };
    struct {
        unsigned U2RXBF                 :1;
        unsigned U2RXBE                 :1;
        unsigned U2XON                  :1;
        unsigned U2RXIDL                :1;
        unsigned U2TXBF                 :1;
        unsigned U2TXBE                 :1;
        unsigned U2STPMD                :1;
        unsigned U2TXWRE                :1;
    };
    struct {
        unsigned                        :3;
        unsigned U2RCIDL                :1;
    };
    struct {
        unsigned                        :3;
        unsigned RCIDL                  :1;
    };
} U2FIFObits_t;
extern volatile U2FIFObits_t U2FIFObits __at(0x1D2);
// bitfield macros
#define _U2FIFO_RXBF_POSN                                   0x0
#define _U2FIFO_RXBF_POSITION                               0x0
#define _U2FIFO_RXBF_SIZE                                   0x1
#define _U2FIFO_RXBF_LENGTH                                 0x1
#define _U2FIFO_RXBF_MASK                                   0x1
#define _U2FIFO_RXBE_POSN                                   0x1
#define _U2FIFO_RXBE_POSITION                               0x1
#define _U2FIFO_RXBE_SIZE                                   0x1
#define _U2FIFO_RXBE_LENGTH                                 0x1
#define _U2FIFO_RXBE_MASK                                   0x2
#define _U2FIFO_XON_POSN                                    0x2
#define _U2FIFO_XON_POSITION                                0x2
#define _U2FIFO_XON_SIZE                                    0x1
#define _U2FIFO_XON_LENGTH                                  0x1
#define _U2FIFO_XON_MASK                                    0x4
#define _U2FIFO_RXIDL_POSN                                  0x3
#define _U2FIFO_RXIDL_POSITION                              0x3
#define _U2FIFO_RXIDL_SIZE                                  0x1
#define _U2FIFO_RXIDL_LENGTH                                0x1
#define _U2FIFO_RXIDL_MASK                                  0x8
#define _U2FIFO_TXBF_POSN                                   0x4
#define _U2FIFO_TXBF_POSITION                               0x4
#define _U2FIFO_TXBF_SIZE                                   0x1
#define _U2FIFO_TXBF_LENGTH                                 0x1
#define _U2FIFO_TXBF_MASK                                   0x10
#define _U2FIFO_TXBE_POSN                                   0x5
#define _U2FIFO_TXBE_POSITION                               0x5
#define _U2FIFO_TXBE_SIZE                                   0x1
#define _U2FIFO_TXBE_LENGTH                                 0x1
#define _U2FIFO_TXBE_MASK                                   0x20
#define _U2FIFO_STPMD_POSN                                  0x6
#define _U2FIFO_STPMD_POSITION                              0x6
#define _U2FIFO_STPMD_SIZE                                  0x1
#define _U2FIFO_STPMD_LENGTH                                0x1
#define _U2FIFO_STPMD_MASK                                  0x40
#define _U2FIFO_TXWRE_POSN                                  0x7
#define _U2FIFO_TXWRE_POSITION                              0x7
#define _U2FIFO_TXWRE_SIZE                                  0x1
#define _U2FIFO_TXWRE_LENGTH                                0x1
#define _U2FIFO_TXWRE_MASK                                  0x80
#define _U2FIFO_U2RXBF_POSN                                 0x0
#define _U2FIFO_U2RXBF_POSITION                             0x0
#define _U2FIFO_U2RXBF_SIZE                                 0x1
#define _U2FIFO_U2RXBF_LENGTH                               0x1
#define _U2FIFO_U2RXBF_MASK                                 0x1
#define _U2FIFO_U2RXBE_POSN                                 0x1
#define _U2FIFO_U2RXBE_POSITION                             0x1
#define _U2FIFO_U2RXBE_SIZE                                 0x1
#define _U2FIFO_U2RXBE_LENGTH                               0x1
#define _U2FIFO_U2RXBE_MASK                                 0x2
#define _U2FIFO_U2XON_POSN                                  0x2
#define _U2FIFO_U2XON_POSITION                              0x2
#define _U2FIFO_U2XON_SIZE                                  0x1
#define _U2FIFO_U2XON_LENGTH                                0x1
#define _U2FIFO_U2XON_MASK                                  0x4
#define _U2FIFO_U2RXIDL_POSN                                0x3
#define _U2FIFO_U2RXIDL_POSITION                            0x3
#define _U2FIFO_U2RXIDL_SIZE                                0x1
#define _U2FIFO_U2RXIDL_LENGTH                              0x1
#define _U2FIFO_U2RXIDL_MASK                                0x8
#define _U2FIFO_U2TXBF_POSN                                 0x4
#define _U2FIFO_U2TXBF_POSITION                             0x4
#define _U2FIFO_U2TXBF_SIZE                                 0x1
#define _U2FIFO_U2TXBF_LENGTH                               0x1
#define _U2FIFO_U2TXBF_MASK                                 0x10
#define _U2FIFO_U2TXBE_POSN                                 0x5
#define _U2FIFO_U2TXBE_POSITION                             0x5
#define _U2FIFO_U2TXBE_SIZE                                 0x1
#define _U2FIFO_U2TXBE_LENGTH                               0x1
#define _U2FIFO_U2TXBE_MASK                                 0x20
#define _U2FIFO_U2STPMD_POSN                                0x6
#define _U2FIFO_U2STPMD_POSITION                            0x6
#define _U2FIFO_U2STPMD_SIZE                                0x1
#define _U2FIFO_U2STPMD_LENGTH                              0x1
#define _U2FIFO_U2STPMD_MASK                                0x40
#define _U2FIFO_U2TXWRE_POSN                                0x7
#define _U2FIFO_U2TXWRE_POSITION                            0x7
#define _U2FIFO_U2TXWRE_SIZE                                0x1
#define _U2FIFO_U2TXWRE_LENGTH                              0x1
#define _U2FIFO_U2TXWRE_MASK                                0x80
#define _U2FIFO_U2RCIDL_POSN                                0x3
#define _U2FIFO_U2RCIDL_POSITION                            0x3
#define _U2FIFO_U2RCIDL_SIZE                                0x1
#define _U2FIFO_U2RCIDL_LENGTH                              0x1
#define _U2FIFO_U2RCIDL_MASK                                0x8
#define _U2FIFO_RCIDL_POSN                                  0x3
#define _U2FIFO_RCIDL_POSITION                              0x3
#define _U2FIFO_RCIDL_SIZE                                  0x1
#define _U2FIFO_RCIDL_LENGTH                                0x1
#define _U2FIFO_RCIDL_MASK                                  0x8

// Register: U2UIR
#define U2UIR U2UIR
extern volatile unsigned char           U2UIR               __at(0x1D4);
#ifndef _LIB_BUILD
asm("U2UIR equ 01D4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :2;
        unsigned ABDIE                  :1;
        unsigned                        :3;
        unsigned ABDIF                  :1;
        unsigned WUIF                   :1;
    };
    struct {
        unsigned                        :2;
        unsigned U2ABDIE                :1;
        unsigned                        :3;
        unsigned U2ABDIF                :1;
        unsigned U2WUIF                 :1;
    };
} U2UIRbits_t;
extern volatile U2UIRbits_t U2UIRbits __at(0x1D4);
// bitfield macros
#define _U2UIR_ABDIE_POSN                                   0x2
#define _U2UIR_ABDIE_POSITION                               0x2
#define _U2UIR_ABDIE_SIZE                                   0x1
#define _U2UIR_ABDIE_LENGTH                                 0x1
#define _U2UIR_ABDIE_MASK                                   0x4
#define _U2UIR_ABDIF_POSN                                   0x6
#define _U2UIR_ABDIF_POSITION                               0x6
#define _U2UIR_ABDIF_SIZE                                   0x1
#define _U2UIR_ABDIF_LENGTH                                 0x1
#define _U2UIR_ABDIF_MASK                                   0x40
#define _U2UIR_WUIF_POSN                                    0x7
#define _U2UIR_WUIF_POSITION                                0x7
#define _U2UIR_WUIF_SIZE                                    0x1
#define _U2UIR_WUIF_LENGTH                                  0x1
#define _U2UIR_WUIF_MASK                                    0x80
#define _U2UIR_U2ABDIE_POSN                                 0x2
#define _U2UIR_U2ABDIE_POSITION                             0x2
#define _U2UIR_U2ABDIE_SIZE                                 0x1
#define _U2UIR_U2ABDIE_LENGTH                               0x1
#define _U2UIR_U2ABDIE_MASK                                 0x4
#define _U2UIR_U2ABDIF_POSN                                 0x6
#define _U2UIR_U2ABDIF_POSITION                             0x6
#define _U2UIR_U2ABDIF_SIZE                                 0x1
#define _U2UIR_U2ABDIF_LENGTH                               0x1
#define _U2UIR_U2ABDIF_MASK                                 0x40
#define _U2UIR_U2WUIF_POSN                                  0x7
#define _U2UIR_U2WUIF_POSITION                              0x7
#define _U2UIR_U2WUIF_SIZE                                  0x1
#define _U2UIR_U2WUIF_LENGTH                                0x1
#define _U2UIR_U2WUIF_MASK                                  0x80

// Register: U2ERRIR
#define U2ERRIR U2ERRIR
extern volatile unsigned char           U2ERRIR             __at(0x1D5);
#ifndef _LIB_BUILD
asm("U2ERRIR equ 01D5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned RXFOIF                 :1;
        unsigned RXBKIF                 :1;
        unsigned FERIF                  :1;
        unsigned                        :1;
        unsigned ABDOVF                 :1;
        unsigned PERIF                  :1;
        unsigned TXMTIF                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned U2RXFOIF               :1;
        unsigned U2RXBKIF               :1;
        unsigned U2FERIF                :1;
        unsigned                        :1;
        unsigned U2ABDOVF               :1;
        unsigned U2PERIF                :1;
        unsigned U2TXMTIF               :1;
    };
} U2ERRIRbits_t;
extern volatile U2ERRIRbits_t U2ERRIRbits __at(0x1D5);
// bitfield macros
#define _U2ERRIR_RXFOIF_POSN                                0x1
#define _U2ERRIR_RXFOIF_POSITION                            0x1
#define _U2ERRIR_RXFOIF_SIZE                                0x1
#define _U2ERRIR_RXFOIF_LENGTH                              0x1
#define _U2ERRIR_RXFOIF_MASK                                0x2
#define _U2ERRIR_RXBKIF_POSN                                0x2
#define _U2ERRIR_RXBKIF_POSITION                            0x2
#define _U2ERRIR_RXBKIF_SIZE                                0x1
#define _U2ERRIR_RXBKIF_LENGTH                              0x1
#define _U2ERRIR_RXBKIF_MASK                                0x4
#define _U2ERRIR_FERIF_POSN                                 0x3
#define _U2ERRIR_FERIF_POSITION                             0x3
#define _U2ERRIR_FERIF_SIZE                                 0x1
#define _U2ERRIR_FERIF_LENGTH                               0x1
#define _U2ERRIR_FERIF_MASK                                 0x8
#define _U2ERRIR_ABDOVF_POSN                                0x5
#define _U2ERRIR_ABDOVF_POSITION                            0x5
#define _U2ERRIR_ABDOVF_SIZE                                0x1
#define _U2ERRIR_ABDOVF_LENGTH                              0x1
#define _U2ERRIR_ABDOVF_MASK                                0x20
#define _U2ERRIR_PERIF_POSN                                 0x6
#define _U2ERRIR_PERIF_POSITION                             0x6
#define _U2ERRIR_PERIF_SIZE                                 0x1
#define _U2ERRIR_PERIF_LENGTH                               0x1
#define _U2ERRIR_PERIF_MASK                                 0x40
#define _U2ERRIR_TXMTIF_POSN                                0x7
#define _U2ERRIR_TXMTIF_POSITION                            0x7
#define _U2ERRIR_TXMTIF_SIZE                                0x1
#define _U2ERRIR_TXMTIF_LENGTH                              0x1
#define _U2ERRIR_TXMTIF_MASK                                0x80
#define _U2ERRIR_U2RXFOIF_POSN                              0x1
#define _U2ERRIR_U2RXFOIF_POSITION                          0x1
#define _U2ERRIR_U2RXFOIF_SIZE                              0x1
#define _U2ERRIR_U2RXFOIF_LENGTH                            0x1
#define _U2ERRIR_U2RXFOIF_MASK                              0x2
#define _U2ERRIR_U2RXBKIF_POSN                              0x2
#define _U2ERRIR_U2RXBKIF_POSITION                          0x2
#define _U2ERRIR_U2RXBKIF_SIZE                              0x1
#define _U2ERRIR_U2RXBKIF_LENGTH                            0x1
#define _U2ERRIR_U2RXBKIF_MASK                              0x4
#define _U2ERRIR_U2FERIF_POSN                               0x3
#define _U2ERRIR_U2FERIF_POSITION                           0x3
#define _U2ERRIR_U2FERIF_SIZE                               0x1
#define _U2ERRIR_U2FERIF_LENGTH                             0x1
#define _U2ERRIR_U2FERIF_MASK                               0x8
#define _U2ERRIR_U2ABDOVF_POSN                              0x5
#define _U2ERRIR_U2ABDOVF_POSITION                          0x5
#define _U2ERRIR_U2ABDOVF_SIZE                              0x1
#define _U2ERRIR_U2ABDOVF_LENGTH                            0x1
#define _U2ERRIR_U2ABDOVF_MASK                              0x20
#define _U2ERRIR_U2PERIF_POSN                               0x6
#define _U2ERRIR_U2PERIF_POSITION                           0x6
#define _U2ERRIR_U2PERIF_SIZE                               0x1
#define _U2ERRIR_U2PERIF_LENGTH                             0x1
#define _U2ERRIR_U2PERIF_MASK                               0x40
#define _U2ERRIR_U2TXMTIF_POSN                              0x7
#define _U2ERRIR_U2TXMTIF_POSITION                          0x7
#define _U2ERRIR_U2TXMTIF_SIZE                              0x1
#define _U2ERRIR_U2TXMTIF_LENGTH                            0x1
#define _U2ERRIR_U2TXMTIF_MASK                              0x80

// Register: U2ERRIE
#define U2ERRIE U2ERRIE
extern volatile unsigned char           U2ERRIE             __at(0x1D6);
#ifndef _LIB_BUILD
asm("U2ERRIE equ 01D6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned RXFOIE                 :1;
        unsigned RXBKIE                 :1;
        unsigned FERIE                  :1;
        unsigned                        :1;
        unsigned ABDOVE                 :1;
        unsigned PERIE                  :1;
        unsigned TXMTIE                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned U2RXFOIE               :1;
        unsigned U2RXBKIE               :1;
        unsigned U2FERIE                :1;
        unsigned                        :1;
        unsigned U2ABDOVE               :1;
        unsigned U2PERIE                :1;
        unsigned U2TXMTIE               :1;
    };
} U2ERRIEbits_t;
extern volatile U2ERRIEbits_t U2ERRIEbits __at(0x1D6);
// bitfield macros
#define _U2ERRIE_RXFOIE_POSN                                0x1
#define _U2ERRIE_RXFOIE_POSITION                            0x1
#define _U2ERRIE_RXFOIE_SIZE                                0x1
#define _U2ERRIE_RXFOIE_LENGTH                              0x1
#define _U2ERRIE_RXFOIE_MASK                                0x2
#define _U2ERRIE_RXBKIE_POSN                                0x2
#define _U2ERRIE_RXBKIE_POSITION                            0x2
#define _U2ERRIE_RXBKIE_SIZE                                0x1
#define _U2ERRIE_RXBKIE_LENGTH                              0x1
#define _U2ERRIE_RXBKIE_MASK                                0x4
#define _U2ERRIE_FERIE_POSN                                 0x3
#define _U2ERRIE_FERIE_POSITION                             0x3
#define _U2ERRIE_FERIE_SIZE                                 0x1
#define _U2ERRIE_FERIE_LENGTH                               0x1
#define _U2ERRIE_FERIE_MASK                                 0x8
#define _U2ERRIE_ABDOVE_POSN                                0x5
#define _U2ERRIE_ABDOVE_POSITION                            0x5
#define _U2ERRIE_ABDOVE_SIZE                                0x1
#define _U2ERRIE_ABDOVE_LENGTH                              0x1
#define _U2ERRIE_ABDOVE_MASK                                0x20
#define _U2ERRIE_PERIE_POSN                                 0x6
#define _U2ERRIE_PERIE_POSITION                             0x6
#define _U2ERRIE_PERIE_SIZE                                 0x1
#define _U2ERRIE_PERIE_LENGTH                               0x1
#define _U2ERRIE_PERIE_MASK                                 0x40
#define _U2ERRIE_TXMTIE_POSN                                0x7
#define _U2ERRIE_TXMTIE_POSITION                            0x7
#define _U2ERRIE_TXMTIE_SIZE                                0x1
#define _U2ERRIE_TXMTIE_LENGTH                              0x1
#define _U2ERRIE_TXMTIE_MASK                                0x80
#define _U2ERRIE_U2RXFOIE_POSN                              0x1
#define _U2ERRIE_U2RXFOIE_POSITION                          0x1
#define _U2ERRIE_U2RXFOIE_SIZE                              0x1
#define _U2ERRIE_U2RXFOIE_LENGTH                            0x1
#define _U2ERRIE_U2RXFOIE_MASK                              0x2
#define _U2ERRIE_U2RXBKIE_POSN                              0x2
#define _U2ERRIE_U2RXBKIE_POSITION                          0x2
#define _U2ERRIE_U2RXBKIE_SIZE                              0x1
#define _U2ERRIE_U2RXBKIE_LENGTH                            0x1
#define _U2ERRIE_U2RXBKIE_MASK                              0x4
#define _U2ERRIE_U2FERIE_POSN                               0x3
#define _U2ERRIE_U2FERIE_POSITION                           0x3
#define _U2ERRIE_U2FERIE_SIZE                               0x1
#define _U2ERRIE_U2FERIE_LENGTH                             0x1
#define _U2ERRIE_U2FERIE_MASK                               0x8
#define _U2ERRIE_U2ABDOVE_POSN                              0x5
#define _U2ERRIE_U2ABDOVE_POSITION                          0x5
#define _U2ERRIE_U2ABDOVE_SIZE                              0x1
#define _U2ERRIE_U2ABDOVE_LENGTH                            0x1
#define _U2ERRIE_U2ABDOVE_MASK                              0x20
#define _U2ERRIE_U2PERIE_POSN                               0x6
#define _U2ERRIE_U2PERIE_POSITION                           0x6
#define _U2ERRIE_U2PERIE_SIZE                               0x1
#define _U2ERRIE_U2PERIE_LENGTH                             0x1
#define _U2ERRIE_U2PERIE_MASK                               0x40
#define _U2ERRIE_U2TXMTIE_POSN                              0x7
#define _U2ERRIE_U2TXMTIE_POSITION                          0x7
#define _U2ERRIE_U2TXMTIE_SIZE                              0x1
#define _U2ERRIE_U2TXMTIE_LENGTH                            0x1
#define _U2ERRIE_U2TXMTIE_MASK                              0x80

// Register: SPI1RXB
#define SPI1RXB SPI1RXB
extern volatile unsigned char           SPI1RXB             __at(0x1D7);
#ifndef _LIB_BUILD
asm("SPI1RXB equ 01D7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
    struct {
        unsigned RXB0                   :1;
        unsigned RXB1                   :1;
        unsigned RXB2                   :1;
        unsigned RXB3                   :1;
        unsigned RXB4                   :1;
        unsigned RXB5                   :1;
        unsigned RXB6                   :1;
        unsigned RXB7                   :1;
    };
} SPI1RXBbits_t;
extern volatile SPI1RXBbits_t SPI1RXBbits __at(0x1D7);
// bitfield macros
#define _SPI1RXB_RXB_POSN                                   0x0
#define _SPI1RXB_RXB_POSITION                               0x0
#define _SPI1RXB_RXB_SIZE                                   0x8
#define _SPI1RXB_RXB_LENGTH                                 0x8
#define _SPI1RXB_RXB_MASK                                   0xFF
#define _SPI1RXB_RXB0_POSN                                  0x0
#define _SPI1RXB_RXB0_POSITION                              0x0
#define _SPI1RXB_RXB0_SIZE                                  0x1
#define _SPI1RXB_RXB0_LENGTH                                0x1
#define _SPI1RXB_RXB0_MASK                                  0x1
#define _SPI1RXB_RXB1_POSN                                  0x1
#define _SPI1RXB_RXB1_POSITION                              0x1
#define _SPI1RXB_RXB1_SIZE                                  0x1
#define _SPI1RXB_RXB1_LENGTH                                0x1
#define _SPI1RXB_RXB1_MASK                                  0x2
#define _SPI1RXB_RXB2_POSN                                  0x2
#define _SPI1RXB_RXB2_POSITION                              0x2
#define _SPI1RXB_RXB2_SIZE                                  0x1
#define _SPI1RXB_RXB2_LENGTH                                0x1
#define _SPI1RXB_RXB2_MASK                                  0x4
#define _SPI1RXB_RXB3_POSN                                  0x3
#define _SPI1RXB_RXB3_POSITION                              0x3
#define _SPI1RXB_RXB3_SIZE                                  0x1
#define _SPI1RXB_RXB3_LENGTH                                0x1
#define _SPI1RXB_RXB3_MASK                                  0x8
#define _SPI1RXB_RXB4_POSN                                  0x4
#define _SPI1RXB_RXB4_POSITION                              0x4
#define _SPI1RXB_RXB4_SIZE                                  0x1
#define _SPI1RXB_RXB4_LENGTH                                0x1
#define _SPI1RXB_RXB4_MASK                                  0x10
#define _SPI1RXB_RXB5_POSN                                  0x5
#define _SPI1RXB_RXB5_POSITION                              0x5
#define _SPI1RXB_RXB5_SIZE                                  0x1
#define _SPI1RXB_RXB5_LENGTH                                0x1
#define _SPI1RXB_RXB5_MASK                                  0x20
#define _SPI1RXB_RXB6_POSN                                  0x6
#define _SPI1RXB_RXB6_POSITION                              0x6
#define _SPI1RXB_RXB6_SIZE                                  0x1
#define _SPI1RXB_RXB6_LENGTH                                0x1
#define _SPI1RXB_RXB6_MASK                                  0x40
#define _SPI1RXB_RXB7_POSN                                  0x7
#define _SPI1RXB_RXB7_POSITION                              0x7
#define _SPI1RXB_RXB7_SIZE                                  0x1
#define _SPI1RXB_RXB7_LENGTH                                0x1
#define _SPI1RXB_RXB7_MASK                                  0x80

// Register: SPI1TXB
#define SPI1TXB SPI1TXB
extern volatile unsigned char           SPI1TXB             __at(0x1D8);
#ifndef _LIB_BUILD
asm("SPI1TXB equ 01D8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
    struct {
        unsigned TXB0                   :1;
        unsigned TXB1                   :1;
        unsigned TXB2                   :1;
        unsigned TXB3                   :1;
        unsigned TXB4                   :1;
        unsigned TXB5                   :1;
        unsigned TXB6                   :1;
        unsigned TXB7                   :1;
    };
} SPI1TXBbits_t;
extern volatile SPI1TXBbits_t SPI1TXBbits __at(0x1D8);
// bitfield macros
#define _SPI1TXB_TXB_POSN                                   0x0
#define _SPI1TXB_TXB_POSITION                               0x0
#define _SPI1TXB_TXB_SIZE                                   0x8
#define _SPI1TXB_TXB_LENGTH                                 0x8
#define _SPI1TXB_TXB_MASK                                   0xFF
#define _SPI1TXB_TXB0_POSN                                  0x0
#define _SPI1TXB_TXB0_POSITION                              0x0
#define _SPI1TXB_TXB0_SIZE                                  0x1
#define _SPI1TXB_TXB0_LENGTH                                0x1
#define _SPI1TXB_TXB0_MASK                                  0x1
#define _SPI1TXB_TXB1_POSN                                  0x1
#define _SPI1TXB_TXB1_POSITION                              0x1
#define _SPI1TXB_TXB1_SIZE                                  0x1
#define _SPI1TXB_TXB1_LENGTH                                0x1
#define _SPI1TXB_TXB1_MASK                                  0x2
#define _SPI1TXB_TXB2_POSN                                  0x2
#define _SPI1TXB_TXB2_POSITION                              0x2
#define _SPI1TXB_TXB2_SIZE                                  0x1
#define _SPI1TXB_TXB2_LENGTH                                0x1
#define _SPI1TXB_TXB2_MASK                                  0x4
#define _SPI1TXB_TXB3_POSN                                  0x3
#define _SPI1TXB_TXB3_POSITION                              0x3
#define _SPI1TXB_TXB3_SIZE                                  0x1
#define _SPI1TXB_TXB3_LENGTH                                0x1
#define _SPI1TXB_TXB3_MASK                                  0x8
#define _SPI1TXB_TXB4_POSN                                  0x4
#define _SPI1TXB_TXB4_POSITION                              0x4
#define _SPI1TXB_TXB4_SIZE                                  0x1
#define _SPI1TXB_TXB4_LENGTH                                0x1
#define _SPI1TXB_TXB4_MASK                                  0x10
#define _SPI1TXB_TXB5_POSN                                  0x5
#define _SPI1TXB_TXB5_POSITION                              0x5
#define _SPI1TXB_TXB5_SIZE                                  0x1
#define _SPI1TXB_TXB5_LENGTH                                0x1
#define _SPI1TXB_TXB5_MASK                                  0x20
#define _SPI1TXB_TXB6_POSN                                  0x6
#define _SPI1TXB_TXB6_POSITION                              0x6
#define _SPI1TXB_TXB6_SIZE                                  0x1
#define _SPI1TXB_TXB6_LENGTH                                0x1
#define _SPI1TXB_TXB6_MASK                                  0x40
#define _SPI1TXB_TXB7_POSN                                  0x7
#define _SPI1TXB_TXB7_POSITION                              0x7
#define _SPI1TXB_TXB7_SIZE                                  0x1
#define _SPI1TXB_TXB7_LENGTH                                0x1
#define _SPI1TXB_TXB7_MASK                                  0x80

// Register: SPI1TCNT
#define SPI1TCNT SPI1TCNT
extern volatile unsigned short          SPI1TCNT            __at(0x1D9);
#ifndef _LIB_BUILD
asm("SPI1TCNT equ 01D9h");
#endif

// Register: SPI1TCNTL
#define SPI1TCNTL SPI1TCNTL
extern volatile unsigned char           SPI1TCNTL           __at(0x1D9);
#ifndef _LIB_BUILD
asm("SPI1TCNTL equ 01D9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TCNTL                  :8;
    };
} SPI1TCNTLbits_t;
extern volatile SPI1TCNTLbits_t SPI1TCNTLbits __at(0x1D9);
// bitfield macros
#define _SPI1TCNTL_TCNTL_POSN                               0x0
#define _SPI1TCNTL_TCNTL_POSITION                           0x0
#define _SPI1TCNTL_TCNTL_SIZE                               0x8
#define _SPI1TCNTL_TCNTL_LENGTH                             0x8
#define _SPI1TCNTL_TCNTL_MASK                               0xFF

// Register: SPI1TCNTH
#define SPI1TCNTH SPI1TCNTH
extern volatile unsigned char           SPI1TCNTH           __at(0x1DA);
#ifndef _LIB_BUILD
asm("SPI1TCNTH equ 01DAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TCNTH                  :3;
    };
} SPI1TCNTHbits_t;
extern volatile SPI1TCNTHbits_t SPI1TCNTHbits __at(0x1DA);
// bitfield macros
#define _SPI1TCNTH_TCNTH_POSN                               0x0
#define _SPI1TCNTH_TCNTH_POSITION                           0x0
#define _SPI1TCNTH_TCNTH_SIZE                               0x3
#define _SPI1TCNTH_TCNTH_LENGTH                             0x3
#define _SPI1TCNTH_TCNTH_MASK                               0x7

// Register: SPI1CON0
#define SPI1CON0 SPI1CON0
extern volatile unsigned char           SPI1CON0            __at(0x1DB);
#ifndef _LIB_BUILD
asm("SPI1CON0 equ 01DBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BMODE                  :1;
        unsigned MST                    :1;
        unsigned LSBF                   :1;
        unsigned                        :4;
        unsigned EN                     :1;
    };
    struct {
        unsigned SPI1BMODE              :1;
        unsigned SPI1MST                :1;
        unsigned SPI1LSBF               :1;
        unsigned                        :4;
        unsigned SPI1SPIEN              :1;
    };
} SPI1CON0bits_t;
extern volatile SPI1CON0bits_t SPI1CON0bits __at(0x1DB);
// bitfield macros
#define _SPI1CON0_BMODE_POSN                                0x0
#define _SPI1CON0_BMODE_POSITION                            0x0
#define _SPI1CON0_BMODE_SIZE                                0x1
#define _SPI1CON0_BMODE_LENGTH                              0x1
#define _SPI1CON0_BMODE_MASK                                0x1
#define _SPI1CON0_MST_POSN                                  0x1
#define _SPI1CON0_MST_POSITION                              0x1
#define _SPI1CON0_MST_SIZE                                  0x1
#define _SPI1CON0_MST_LENGTH                                0x1
#define _SPI1CON0_MST_MASK                                  0x2
#define _SPI1CON0_LSBF_POSN                                 0x2
#define _SPI1CON0_LSBF_POSITION                             0x2
#define _SPI1CON0_LSBF_SIZE                                 0x1
#define _SPI1CON0_LSBF_LENGTH                               0x1
#define _SPI1CON0_LSBF_MASK                                 0x4
#define _SPI1CON0_EN_POSN                                   0x7
#define _SPI1CON0_EN_POSITION                               0x7
#define _SPI1CON0_EN_SIZE                                   0x1
#define _SPI1CON0_EN_LENGTH                                 0x1
#define _SPI1CON0_EN_MASK                                   0x80
#define _SPI1CON0_SPI1BMODE_POSN                            0x0
#define _SPI1CON0_SPI1BMODE_POSITION                        0x0
#define _SPI1CON0_SPI1BMODE_SIZE                            0x1
#define _SPI1CON0_SPI1BMODE_LENGTH                          0x1
#define _SPI1CON0_SPI1BMODE_MASK                            0x1
#define _SPI1CON0_SPI1MST_POSN                              0x1
#define _SPI1CON0_SPI1MST_POSITION                          0x1
#define _SPI1CON0_SPI1MST_SIZE                              0x1
#define _SPI1CON0_SPI1MST_LENGTH                            0x1
#define _SPI1CON0_SPI1MST_MASK                              0x2
#define _SPI1CON0_SPI1LSBF_POSN                             0x2
#define _SPI1CON0_SPI1LSBF_POSITION                         0x2
#define _SPI1CON0_SPI1LSBF_SIZE                             0x1
#define _SPI1CON0_SPI1LSBF_LENGTH                           0x1
#define _SPI1CON0_SPI1LSBF_MASK                             0x4
#define _SPI1CON0_SPI1SPIEN_POSN                            0x7
#define _SPI1CON0_SPI1SPIEN_POSITION                        0x7
#define _SPI1CON0_SPI1SPIEN_SIZE                            0x1
#define _SPI1CON0_SPI1SPIEN_LENGTH                          0x1
#define _SPI1CON0_SPI1SPIEN_MASK                            0x80

// Register: SPI1CON1
#define SPI1CON1 SPI1CON1
extern volatile unsigned char           SPI1CON1            __at(0x1DC);
#ifndef _LIB_BUILD
asm("SPI1CON1 equ 01DCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SDOP                   :1;
        unsigned SDIP                   :1;
        unsigned SSP                    :1;
        unsigned                        :1;
        unsigned FST                    :1;
        unsigned CKP                    :1;
        unsigned CKE                    :1;
        unsigned SMP                    :1;
    };
    struct {
        unsigned SPI1SDOP               :1;
        unsigned SPI1SDIP               :1;
        unsigned SPI1SSP                :1;
        unsigned                        :1;
        unsigned SPI1FST                :1;
        unsigned SPI1CKP                :1;
        unsigned SPI1CKE                :1;
        unsigned SPI1SMP                :1;
    };
} SPI1CON1bits_t;
extern volatile SPI1CON1bits_t SPI1CON1bits __at(0x1DC);
// bitfield macros
#define _SPI1CON1_SDOP_POSN                                 0x0
#define _SPI1CON1_SDOP_POSITION                             0x0
#define _SPI1CON1_SDOP_SIZE                                 0x1
#define _SPI1CON1_SDOP_LENGTH                               0x1
#define _SPI1CON1_SDOP_MASK                                 0x1
#define _SPI1CON1_SDIP_POSN                                 0x1
#define _SPI1CON1_SDIP_POSITION                             0x1
#define _SPI1CON1_SDIP_SIZE                                 0x1
#define _SPI1CON1_SDIP_LENGTH                               0x1
#define _SPI1CON1_SDIP_MASK                                 0x2
#define _SPI1CON1_SSP_POSN                                  0x2
#define _SPI1CON1_SSP_POSITION                              0x2
#define _SPI1CON1_SSP_SIZE                                  0x1
#define _SPI1CON1_SSP_LENGTH                                0x1
#define _SPI1CON1_SSP_MASK                                  0x4
#define _SPI1CON1_FST_POSN                                  0x4
#define _SPI1CON1_FST_POSITION                              0x4
#define _SPI1CON1_FST_SIZE                                  0x1
#define _SPI1CON1_FST_LENGTH                                0x1
#define _SPI1CON1_FST_MASK                                  0x10
#define _SPI1CON1_CKP_POSN                                  0x5
#define _SPI1CON1_CKP_POSITION                              0x5
#define _SPI1CON1_CKP_SIZE                                  0x1
#define _SPI1CON1_CKP_LENGTH                                0x1
#define _SPI1CON1_CKP_MASK                                  0x20
#define _SPI1CON1_CKE_POSN                                  0x6
#define _SPI1CON1_CKE_POSITION                              0x6
#define _SPI1CON1_CKE_SIZE                                  0x1
#define _SPI1CON1_CKE_LENGTH                                0x1
#define _SPI1CON1_CKE_MASK                                  0x40
#define _SPI1CON1_SMP_POSN                                  0x7
#define _SPI1CON1_SMP_POSITION                              0x7
#define _SPI1CON1_SMP_SIZE                                  0x1
#define _SPI1CON1_SMP_LENGTH                                0x1
#define _SPI1CON1_SMP_MASK                                  0x80
#define _SPI1CON1_SPI1SDOP_POSN                             0x0
#define _SPI1CON1_SPI1SDOP_POSITION                         0x0
#define _SPI1CON1_SPI1SDOP_SIZE                             0x1
#define _SPI1CON1_SPI1SDOP_LENGTH                           0x1
#define _SPI1CON1_SPI1SDOP_MASK                             0x1
#define _SPI1CON1_SPI1SDIP_POSN                             0x1
#define _SPI1CON1_SPI1SDIP_POSITION                         0x1
#define _SPI1CON1_SPI1SDIP_SIZE                             0x1
#define _SPI1CON1_SPI1SDIP_LENGTH                           0x1
#define _SPI1CON1_SPI1SDIP_MASK                             0x2
#define _SPI1CON1_SPI1SSP_POSN                              0x2
#define _SPI1CON1_SPI1SSP_POSITION                          0x2
#define _SPI1CON1_SPI1SSP_SIZE                              0x1
#define _SPI1CON1_SPI1SSP_LENGTH                            0x1
#define _SPI1CON1_SPI1SSP_MASK                              0x4
#define _SPI1CON1_SPI1FST_POSN                              0x4
#define _SPI1CON1_SPI1FST_POSITION                          0x4
#define _SPI1CON1_SPI1FST_SIZE                              0x1
#define _SPI1CON1_SPI1FST_LENGTH                            0x1
#define _SPI1CON1_SPI1FST_MASK                              0x10
#define _SPI1CON1_SPI1CKP_POSN                              0x5
#define _SPI1CON1_SPI1CKP_POSITION                          0x5
#define _SPI1CON1_SPI1CKP_SIZE                              0x1
#define _SPI1CON1_SPI1CKP_LENGTH                            0x1
#define _SPI1CON1_SPI1CKP_MASK                              0x20
#define _SPI1CON1_SPI1CKE_POSN                              0x6
#define _SPI1CON1_SPI1CKE_POSITION                          0x6
#define _SPI1CON1_SPI1CKE_SIZE                              0x1
#define _SPI1CON1_SPI1CKE_LENGTH                            0x1
#define _SPI1CON1_SPI1CKE_MASK                              0x40
#define _SPI1CON1_SPI1SMP_POSN                              0x7
#define _SPI1CON1_SPI1SMP_POSITION                          0x7
#define _SPI1CON1_SPI1SMP_SIZE                              0x1
#define _SPI1CON1_SPI1SMP_LENGTH                            0x1
#define _SPI1CON1_SPI1SMP_MASK                              0x80

// Register: SPI1CON2
#define SPI1CON2 SPI1CON2
extern volatile unsigned char           SPI1CON2            __at(0x1DD);
#ifndef _LIB_BUILD
asm("SPI1CON2 equ 01DDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXR                    :1;
        unsigned TXR                    :1;
        unsigned SSET                   :1;
        unsigned                        :3;
        unsigned SSFLT                  :1;
        unsigned BUSY                   :1;
    };
    struct {
        unsigned SPI1RXR                :1;
        unsigned SPI1TXR                :1;
        unsigned SPI1SSET               :1;
        unsigned                        :3;
        unsigned SPI1SSFLT              :1;
        unsigned SPI1BUSY               :1;
    };
} SPI1CON2bits_t;
extern volatile SPI1CON2bits_t SPI1CON2bits __at(0x1DD);
// bitfield macros
#define _SPI1CON2_RXR_POSN                                  0x0
#define _SPI1CON2_RXR_POSITION                              0x0
#define _SPI1CON2_RXR_SIZE                                  0x1
#define _SPI1CON2_RXR_LENGTH                                0x1
#define _SPI1CON2_RXR_MASK                                  0x1
#define _SPI1CON2_TXR_POSN                                  0x1
#define _SPI1CON2_TXR_POSITION                              0x1
#define _SPI1CON2_TXR_SIZE                                  0x1
#define _SPI1CON2_TXR_LENGTH                                0x1
#define _SPI1CON2_TXR_MASK                                  0x2
#define _SPI1CON2_SSET_POSN                                 0x2
#define _SPI1CON2_SSET_POSITION                             0x2
#define _SPI1CON2_SSET_SIZE                                 0x1
#define _SPI1CON2_SSET_LENGTH                               0x1
#define _SPI1CON2_SSET_MASK                                 0x4
#define _SPI1CON2_SSFLT_POSN                                0x6
#define _SPI1CON2_SSFLT_POSITION                            0x6
#define _SPI1CON2_SSFLT_SIZE                                0x1
#define _SPI1CON2_SSFLT_LENGTH                              0x1
#define _SPI1CON2_SSFLT_MASK                                0x40
#define _SPI1CON2_BUSY_POSN                                 0x7
#define _SPI1CON2_BUSY_POSITION                             0x7
#define _SPI1CON2_BUSY_SIZE                                 0x1
#define _SPI1CON2_BUSY_LENGTH                               0x1
#define _SPI1CON2_BUSY_MASK                                 0x80
#define _SPI1CON2_SPI1RXR_POSN                              0x0
#define _SPI1CON2_SPI1RXR_POSITION                          0x0
#define _SPI1CON2_SPI1RXR_SIZE                              0x1
#define _SPI1CON2_SPI1RXR_LENGTH                            0x1
#define _SPI1CON2_SPI1RXR_MASK                              0x1
#define _SPI1CON2_SPI1TXR_POSN                              0x1
#define _SPI1CON2_SPI1TXR_POSITION                          0x1
#define _SPI1CON2_SPI1TXR_SIZE                              0x1
#define _SPI1CON2_SPI1TXR_LENGTH                            0x1
#define _SPI1CON2_SPI1TXR_MASK                              0x2
#define _SPI1CON2_SPI1SSET_POSN                             0x2
#define _SPI1CON2_SPI1SSET_POSITION                         0x2
#define _SPI1CON2_SPI1SSET_SIZE                             0x1
#define _SPI1CON2_SPI1SSET_LENGTH                           0x1
#define _SPI1CON2_SPI1SSET_MASK                             0x4
#define _SPI1CON2_SPI1SSFLT_POSN                            0x6
#define _SPI1CON2_SPI1SSFLT_POSITION                        0x6
#define _SPI1CON2_SPI1SSFLT_SIZE                            0x1
#define _SPI1CON2_SPI1SSFLT_LENGTH                          0x1
#define _SPI1CON2_SPI1SSFLT_MASK                            0x40
#define _SPI1CON2_SPI1BUSY_POSN                             0x7
#define _SPI1CON2_SPI1BUSY_POSITION                         0x7
#define _SPI1CON2_SPI1BUSY_SIZE                             0x1
#define _SPI1CON2_SPI1BUSY_LENGTH                           0x1
#define _SPI1CON2_SPI1BUSY_MASK                             0x80

// Register: SPI1STATUS
#define SPI1STATUS SPI1STATUS
extern volatile unsigned char           SPI1STATUS          __at(0x1DE);
#ifndef _LIB_BUILD
asm("SPI1STATUS equ 01DEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXBF                   :1;
        unsigned                        :1;
        unsigned CLRBF                  :1;
        unsigned RXRE                   :1;
        unsigned                        :1;
        unsigned TXBE                   :1;
        unsigned                        :1;
        unsigned TXWE                   :1;
    };
    struct {
        unsigned SPI1RXBF               :1;
        unsigned                        :1;
        unsigned SPI1CLRBF              :1;
        unsigned SPI1RXRE               :1;
        unsigned                        :1;
        unsigned SPI1TXBE               :1;
        unsigned                        :1;
        unsigned SPI1TXWE               :1;
    };
} SPI1STATUSbits_t;
extern volatile SPI1STATUSbits_t SPI1STATUSbits __at(0x1DE);
// bitfield macros
#define _SPI1STATUS_RXBF_POSN                               0x0
#define _SPI1STATUS_RXBF_POSITION                           0x0
#define _SPI1STATUS_RXBF_SIZE                               0x1
#define _SPI1STATUS_RXBF_LENGTH                             0x1
#define _SPI1STATUS_RXBF_MASK                               0x1
#define _SPI1STATUS_CLRBF_POSN                              0x2
#define _SPI1STATUS_CLRBF_POSITION                          0x2
#define _SPI1STATUS_CLRBF_SIZE                              0x1
#define _SPI1STATUS_CLRBF_LENGTH                            0x1
#define _SPI1STATUS_CLRBF_MASK                              0x4
#define _SPI1STATUS_RXRE_POSN                               0x3
#define _SPI1STATUS_RXRE_POSITION                           0x3
#define _SPI1STATUS_RXRE_SIZE                               0x1
#define _SPI1STATUS_RXRE_LENGTH                             0x1
#define _SPI1STATUS_RXRE_MASK                               0x8
#define _SPI1STATUS_TXBE_POSN                               0x5
#define _SPI1STATUS_TXBE_POSITION                           0x5
#define _SPI1STATUS_TXBE_SIZE                               0x1
#define _SPI1STATUS_TXBE_LENGTH                             0x1
#define _SPI1STATUS_TXBE_MASK                               0x20
#define _SPI1STATUS_TXWE_POSN                               0x7
#define _SPI1STATUS_TXWE_POSITION                           0x7
#define _SPI1STATUS_TXWE_SIZE                               0x1
#define _SPI1STATUS_TXWE_LENGTH                             0x1
#define _SPI1STATUS_TXWE_MASK                               0x80
#define _SPI1STATUS_SPI1RXBF_POSN                           0x0
#define _SPI1STATUS_SPI1RXBF_POSITION                       0x0
#define _SPI1STATUS_SPI1RXBF_SIZE                           0x1
#define _SPI1STATUS_SPI1RXBF_LENGTH                         0x1
#define _SPI1STATUS_SPI1RXBF_MASK                           0x1
#define _SPI1STATUS_SPI1CLRBF_POSN                          0x2
#define _SPI1STATUS_SPI1CLRBF_POSITION                      0x2
#define _SPI1STATUS_SPI1CLRBF_SIZE                          0x1
#define _SPI1STATUS_SPI1CLRBF_LENGTH                        0x1
#define _SPI1STATUS_SPI1CLRBF_MASK                          0x4
#define _SPI1STATUS_SPI1RXRE_POSN                           0x3
#define _SPI1STATUS_SPI1RXRE_POSITION                       0x3
#define _SPI1STATUS_SPI1RXRE_SIZE                           0x1
#define _SPI1STATUS_SPI1RXRE_LENGTH                         0x1
#define _SPI1STATUS_SPI1RXRE_MASK                           0x8
#define _SPI1STATUS_SPI1TXBE_POSN                           0x5
#define _SPI1STATUS_SPI1TXBE_POSITION                       0x5
#define _SPI1STATUS_SPI1TXBE_SIZE                           0x1
#define _SPI1STATUS_SPI1TXBE_LENGTH                         0x1
#define _SPI1STATUS_SPI1TXBE_MASK                           0x20
#define _SPI1STATUS_SPI1TXWE_POSN                           0x7
#define _SPI1STATUS_SPI1TXWE_POSITION                       0x7
#define _SPI1STATUS_SPI1TXWE_SIZE                           0x1
#define _SPI1STATUS_SPI1TXWE_LENGTH                         0x1
#define _SPI1STATUS_SPI1TXWE_MASK                           0x80

// Register: SPI1TWIDTH
#define SPI1TWIDTH SPI1TWIDTH
extern volatile unsigned char           SPI1TWIDTH          __at(0x1DF);
#ifndef _LIB_BUILD
asm("SPI1TWIDTH equ 01DFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TWIDTH                 :3;
    };
    struct {
        unsigned TWIDTH0                :1;
        unsigned TWIDTH1                :1;
        unsigned TWIDTH2                :1;
    };
} SPI1TWIDTHbits_t;
extern volatile SPI1TWIDTHbits_t SPI1TWIDTHbits __at(0x1DF);
// bitfield macros
#define _SPI1TWIDTH_TWIDTH_POSN                             0x0
#define _SPI1TWIDTH_TWIDTH_POSITION                         0x0
#define _SPI1TWIDTH_TWIDTH_SIZE                             0x3
#define _SPI1TWIDTH_TWIDTH_LENGTH                           0x3
#define _SPI1TWIDTH_TWIDTH_MASK                             0x7
#define _SPI1TWIDTH_TWIDTH0_POSN                            0x0
#define _SPI1TWIDTH_TWIDTH0_POSITION                        0x0
#define _SPI1TWIDTH_TWIDTH0_SIZE                            0x1
#define _SPI1TWIDTH_TWIDTH0_LENGTH                          0x1
#define _SPI1TWIDTH_TWIDTH0_MASK                            0x1
#define _SPI1TWIDTH_TWIDTH1_POSN                            0x1
#define _SPI1TWIDTH_TWIDTH1_POSITION                        0x1
#define _SPI1TWIDTH_TWIDTH1_SIZE                            0x1
#define _SPI1TWIDTH_TWIDTH1_LENGTH                          0x1
#define _SPI1TWIDTH_TWIDTH1_MASK                            0x2
#define _SPI1TWIDTH_TWIDTH2_POSN                            0x2
#define _SPI1TWIDTH_TWIDTH2_POSITION                        0x2
#define _SPI1TWIDTH_TWIDTH2_SIZE                            0x1
#define _SPI1TWIDTH_TWIDTH2_LENGTH                          0x1
#define _SPI1TWIDTH_TWIDTH2_MASK                            0x4

// Register: SPI1BAUD
#define SPI1BAUD SPI1BAUD
extern volatile unsigned char           SPI1BAUD            __at(0x1E0);
#ifndef _LIB_BUILD
asm("SPI1BAUD equ 01E0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BAUD                   :8;
    };
    struct {
        unsigned BAUD0                  :1;
        unsigned BAUD1                  :1;
        unsigned BAUD2                  :1;
        unsigned BAUD3                  :1;
        unsigned BAUD4                  :1;
        unsigned BAUD5                  :1;
        unsigned BAUD6                  :1;
        unsigned BAUD7                  :1;
    };
} SPI1BAUDbits_t;
extern volatile SPI1BAUDbits_t SPI1BAUDbits __at(0x1E0);
// bitfield macros
#define _SPI1BAUD_BAUD_POSN                                 0x0
#define _SPI1BAUD_BAUD_POSITION                             0x0
#define _SPI1BAUD_BAUD_SIZE                                 0x8
#define _SPI1BAUD_BAUD_LENGTH                               0x8
#define _SPI1BAUD_BAUD_MASK                                 0xFF
#define _SPI1BAUD_BAUD0_POSN                                0x0
#define _SPI1BAUD_BAUD0_POSITION                            0x0
#define _SPI1BAUD_BAUD0_SIZE                                0x1
#define _SPI1BAUD_BAUD0_LENGTH                              0x1
#define _SPI1BAUD_BAUD0_MASK                                0x1
#define _SPI1BAUD_BAUD1_POSN                                0x1
#define _SPI1BAUD_BAUD1_POSITION                            0x1
#define _SPI1BAUD_BAUD1_SIZE                                0x1
#define _SPI1BAUD_BAUD1_LENGTH                              0x1
#define _SPI1BAUD_BAUD1_MASK                                0x2
#define _SPI1BAUD_BAUD2_POSN                                0x2
#define _SPI1BAUD_BAUD2_POSITION                            0x2
#define _SPI1BAUD_BAUD2_SIZE                                0x1
#define _SPI1BAUD_BAUD2_LENGTH                              0x1
#define _SPI1BAUD_BAUD2_MASK                                0x4
#define _SPI1BAUD_BAUD3_POSN                                0x3
#define _SPI1BAUD_BAUD3_POSITION                            0x3
#define _SPI1BAUD_BAUD3_SIZE                                0x1
#define _SPI1BAUD_BAUD3_LENGTH                              0x1
#define _SPI1BAUD_BAUD3_MASK                                0x8
#define _SPI1BAUD_BAUD4_POSN                                0x4
#define _SPI1BAUD_BAUD4_POSITION                            0x4
#define _SPI1BAUD_BAUD4_SIZE                                0x1
#define _SPI1BAUD_BAUD4_LENGTH                              0x1
#define _SPI1BAUD_BAUD4_MASK                                0x10
#define _SPI1BAUD_BAUD5_POSN                                0x5
#define _SPI1BAUD_BAUD5_POSITION                            0x5
#define _SPI1BAUD_BAUD5_SIZE                                0x1
#define _SPI1BAUD_BAUD5_LENGTH                              0x1
#define _SPI1BAUD_BAUD5_MASK                                0x20
#define _SPI1BAUD_BAUD6_POSN                                0x6
#define _SPI1BAUD_BAUD6_POSITION                            0x6
#define _SPI1BAUD_BAUD6_SIZE                                0x1
#define _SPI1BAUD_BAUD6_LENGTH                              0x1
#define _SPI1BAUD_BAUD6_MASK                                0x40
#define _SPI1BAUD_BAUD7_POSN                                0x7
#define _SPI1BAUD_BAUD7_POSITION                            0x7
#define _SPI1BAUD_BAUD7_SIZE                                0x1
#define _SPI1BAUD_BAUD7_LENGTH                              0x1
#define _SPI1BAUD_BAUD7_MASK                                0x80

// Register: SPI1INTF
#define SPI1INTF SPI1INTF
extern volatile unsigned char           SPI1INTF            __at(0x1E1);
#ifndef _LIB_BUILD
asm("SPI1INTF equ 01E1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned TXUIF                  :1;
        unsigned RXOIF                  :1;
        unsigned                        :1;
        unsigned EOSIF                  :1;
        unsigned SOSIF                  :1;
        unsigned TCZIF                  :1;
        unsigned SRMTIF                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned SPI1TXUIF              :1;
        unsigned SPI1RXOIF              :1;
        unsigned                        :1;
        unsigned SPI1EOSIF              :1;
        unsigned SPI1SOSIF              :1;
        unsigned SPI1TCZIF              :1;
        unsigned SPI1SRMTIF             :1;
    };
} SPI1INTFbits_t;
extern volatile SPI1INTFbits_t SPI1INTFbits __at(0x1E1);
// bitfield macros
#define _SPI1INTF_TXUIF_POSN                                0x1
#define _SPI1INTF_TXUIF_POSITION                            0x1
#define _SPI1INTF_TXUIF_SIZE                                0x1
#define _SPI1INTF_TXUIF_LENGTH                              0x1
#define _SPI1INTF_TXUIF_MASK                                0x2
#define _SPI1INTF_RXOIF_POSN                                0x2
#define _SPI1INTF_RXOIF_POSITION                            0x2
#define _SPI1INTF_RXOIF_SIZE                                0x1
#define _SPI1INTF_RXOIF_LENGTH                              0x1
#define _SPI1INTF_RXOIF_MASK                                0x4
#define _SPI1INTF_EOSIF_POSN                                0x4
#define _SPI1INTF_EOSIF_POSITION                            0x4
#define _SPI1INTF_EOSIF_SIZE                                0x1
#define _SPI1INTF_EOSIF_LENGTH                              0x1
#define _SPI1INTF_EOSIF_MASK                                0x10
#define _SPI1INTF_SOSIF_POSN                                0x5
#define _SPI1INTF_SOSIF_POSITION                            0x5
#define _SPI1INTF_SOSIF_SIZE                                0x1
#define _SPI1INTF_SOSIF_LENGTH                              0x1
#define _SPI1INTF_SOSIF_MASK                                0x20
#define _SPI1INTF_TCZIF_POSN                                0x6
#define _SPI1INTF_TCZIF_POSITION                            0x6
#define _SPI1INTF_TCZIF_SIZE                                0x1
#define _SPI1INTF_TCZIF_LENGTH                              0x1
#define _SPI1INTF_TCZIF_MASK                                0x40
#define _SPI1INTF_SRMTIF_POSN                               0x7
#define _SPI1INTF_SRMTIF_POSITION                           0x7
#define _SPI1INTF_SRMTIF_SIZE                               0x1
#define _SPI1INTF_SRMTIF_LENGTH                             0x1
#define _SPI1INTF_SRMTIF_MASK                               0x80
#define _SPI1INTF_SPI1TXUIF_POSN                            0x1
#define _SPI1INTF_SPI1TXUIF_POSITION                        0x1
#define _SPI1INTF_SPI1TXUIF_SIZE                            0x1
#define _SPI1INTF_SPI1TXUIF_LENGTH                          0x1
#define _SPI1INTF_SPI1TXUIF_MASK                            0x2
#define _SPI1INTF_SPI1RXOIF_POSN                            0x2
#define _SPI1INTF_SPI1RXOIF_POSITION                        0x2
#define _SPI1INTF_SPI1RXOIF_SIZE                            0x1
#define _SPI1INTF_SPI1RXOIF_LENGTH                          0x1
#define _SPI1INTF_SPI1RXOIF_MASK                            0x4
#define _SPI1INTF_SPI1EOSIF_POSN                            0x4
#define _SPI1INTF_SPI1EOSIF_POSITION                        0x4
#define _SPI1INTF_SPI1EOSIF_SIZE                            0x1
#define _SPI1INTF_SPI1EOSIF_LENGTH                          0x1
#define _SPI1INTF_SPI1EOSIF_MASK                            0x10
#define _SPI1INTF_SPI1SOSIF_POSN                            0x5
#define _SPI1INTF_SPI1SOSIF_POSITION                        0x5
#define _SPI1INTF_SPI1SOSIF_SIZE                            0x1
#define _SPI1INTF_SPI1SOSIF_LENGTH                          0x1
#define _SPI1INTF_SPI1SOSIF_MASK                            0x20
#define _SPI1INTF_SPI1TCZIF_POSN                            0x6
#define _SPI1INTF_SPI1TCZIF_POSITION                        0x6
#define _SPI1INTF_SPI1TCZIF_SIZE                            0x1
#define _SPI1INTF_SPI1TCZIF_LENGTH                          0x1
#define _SPI1INTF_SPI1TCZIF_MASK                            0x40
#define _SPI1INTF_SPI1SRMTIF_POSN                           0x7
#define _SPI1INTF_SPI1SRMTIF_POSITION                       0x7
#define _SPI1INTF_SPI1SRMTIF_SIZE                           0x1
#define _SPI1INTF_SPI1SRMTIF_LENGTH                         0x1
#define _SPI1INTF_SPI1SRMTIF_MASK                           0x80

// Register: SPI1INTE
#define SPI1INTE SPI1INTE
extern volatile unsigned char           SPI1INTE            __at(0x1E2);
#ifndef _LIB_BUILD
asm("SPI1INTE equ 01E2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned TXUIE                  :1;
        unsigned RXOIE                  :1;
        unsigned                        :1;
        unsigned EOSIE                  :1;
        unsigned SOSIE                  :1;
        unsigned TCZIE                  :1;
        unsigned SRMTIE                 :1;
    };
    struct {
        unsigned                        :1;
        unsigned SPI1TXUIE              :1;
        unsigned SPI1RXOIE              :1;
        unsigned                        :1;
        unsigned SPI1EOSIE              :1;
        unsigned SPI1SOSIE              :1;
        unsigned SPI1TCZIE              :1;
        unsigned SPI1SRMTIE             :1;
    };
} SPI1INTEbits_t;
extern volatile SPI1INTEbits_t SPI1INTEbits __at(0x1E2);
// bitfield macros
#define _SPI1INTE_TXUIE_POSN                                0x1
#define _SPI1INTE_TXUIE_POSITION                            0x1
#define _SPI1INTE_TXUIE_SIZE                                0x1
#define _SPI1INTE_TXUIE_LENGTH                              0x1
#define _SPI1INTE_TXUIE_MASK                                0x2
#define _SPI1INTE_RXOIE_POSN                                0x2
#define _SPI1INTE_RXOIE_POSITION                            0x2
#define _SPI1INTE_RXOIE_SIZE                                0x1
#define _SPI1INTE_RXOIE_LENGTH                              0x1
#define _SPI1INTE_RXOIE_MASK                                0x4
#define _SPI1INTE_EOSIE_POSN                                0x4
#define _SPI1INTE_EOSIE_POSITION                            0x4
#define _SPI1INTE_EOSIE_SIZE                                0x1
#define _SPI1INTE_EOSIE_LENGTH                              0x1
#define _SPI1INTE_EOSIE_MASK                                0x10
#define _SPI1INTE_SOSIE_POSN                                0x5
#define _SPI1INTE_SOSIE_POSITION                            0x5
#define _SPI1INTE_SOSIE_SIZE                                0x1
#define _SPI1INTE_SOSIE_LENGTH                              0x1
#define _SPI1INTE_SOSIE_MASK                                0x20
#define _SPI1INTE_TCZIE_POSN                                0x6
#define _SPI1INTE_TCZIE_POSITION                            0x6
#define _SPI1INTE_TCZIE_SIZE                                0x1
#define _SPI1INTE_TCZIE_LENGTH                              0x1
#define _SPI1INTE_TCZIE_MASK                                0x40
#define _SPI1INTE_SRMTIE_POSN                               0x7
#define _SPI1INTE_SRMTIE_POSITION                           0x7
#define _SPI1INTE_SRMTIE_SIZE                               0x1
#define _SPI1INTE_SRMTIE_LENGTH                             0x1
#define _SPI1INTE_SRMTIE_MASK                               0x80
#define _SPI1INTE_SPI1TXUIE_POSN                            0x1
#define _SPI1INTE_SPI1TXUIE_POSITION                        0x1
#define _SPI1INTE_SPI1TXUIE_SIZE                            0x1
#define _SPI1INTE_SPI1TXUIE_LENGTH                          0x1
#define _SPI1INTE_SPI1TXUIE_MASK                            0x2
#define _SPI1INTE_SPI1RXOIE_POSN                            0x2
#define _SPI1INTE_SPI1RXOIE_POSITION                        0x2
#define _SPI1INTE_SPI1RXOIE_SIZE                            0x1
#define _SPI1INTE_SPI1RXOIE_LENGTH                          0x1
#define _SPI1INTE_SPI1RXOIE_MASK                            0x4
#define _SPI1INTE_SPI1EOSIE_POSN                            0x4
#define _SPI1INTE_SPI1EOSIE_POSITION                        0x4
#define _SPI1INTE_SPI1EOSIE_SIZE                            0x1
#define _SPI1INTE_SPI1EOSIE_LENGTH                          0x1
#define _SPI1INTE_SPI1EOSIE_MASK                            0x10
#define _SPI1INTE_SPI1SOSIE_POSN                            0x5
#define _SPI1INTE_SPI1SOSIE_POSITION                        0x5
#define _SPI1INTE_SPI1SOSIE_SIZE                            0x1
#define _SPI1INTE_SPI1SOSIE_LENGTH                          0x1
#define _SPI1INTE_SPI1SOSIE_MASK                            0x20
#define _SPI1INTE_SPI1TCZIE_POSN                            0x6
#define _SPI1INTE_SPI1TCZIE_POSITION                        0x6
#define _SPI1INTE_SPI1TCZIE_SIZE                            0x1
#define _SPI1INTE_SPI1TCZIE_LENGTH                          0x1
#define _SPI1INTE_SPI1TCZIE_MASK                            0x40
#define _SPI1INTE_SPI1SRMTIE_POSN                           0x7
#define _SPI1INTE_SPI1SRMTIE_POSITION                       0x7
#define _SPI1INTE_SPI1SRMTIE_SIZE                           0x1
#define _SPI1INTE_SPI1SRMTIE_LENGTH                         0x1
#define _SPI1INTE_SPI1SRMTIE_MASK                           0x80

// Register: SPI1CLK
#define SPI1CLK SPI1CLK
extern volatile unsigned char           SPI1CLK             __at(0x1E3);
#ifndef _LIB_BUILD
asm("SPI1CLK equ 01E3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLKSEL                 :8;
    };
    struct {
        unsigned CLKSEL0                :1;
        unsigned CLKSEL1                :1;
        unsigned CLKSEL2                :1;
        unsigned CLKSEL3                :1;
    };
    struct {
        unsigned SPI1CLKSEL             :8;
    };
    struct {
        unsigned SPI1CLKSEL0            :1;
        unsigned SPI1CLKSEL1            :1;
        unsigned SPI1CLKSEL2            :1;
        unsigned SPI1CLKSEL3            :1;
    };
} SPI1CLKbits_t;
extern volatile SPI1CLKbits_t SPI1CLKbits __at(0x1E3);
// bitfield macros
#define _SPI1CLK_CLKSEL_POSN                                0x0
#define _SPI1CLK_CLKSEL_POSITION                            0x0
#define _SPI1CLK_CLKSEL_SIZE                                0x8
#define _SPI1CLK_CLKSEL_LENGTH                              0x8
#define _SPI1CLK_CLKSEL_MASK                                0xFF
#define _SPI1CLK_CLKSEL0_POSN                               0x0
#define _SPI1CLK_CLKSEL0_POSITION                           0x0
#define _SPI1CLK_CLKSEL0_SIZE                               0x1
#define _SPI1CLK_CLKSEL0_LENGTH                             0x1
#define _SPI1CLK_CLKSEL0_MASK                               0x1
#define _SPI1CLK_CLKSEL1_POSN                               0x1
#define _SPI1CLK_CLKSEL1_POSITION                           0x1
#define _SPI1CLK_CLKSEL1_SIZE                               0x1
#define _SPI1CLK_CLKSEL1_LENGTH                             0x1
#define _SPI1CLK_CLKSEL1_MASK                               0x2
#define _SPI1CLK_CLKSEL2_POSN                               0x2
#define _SPI1CLK_CLKSEL2_POSITION                           0x2
#define _SPI1CLK_CLKSEL2_SIZE                               0x1
#define _SPI1CLK_CLKSEL2_LENGTH                             0x1
#define _SPI1CLK_CLKSEL2_MASK                               0x4
#define _SPI1CLK_CLKSEL3_POSN                               0x3
#define _SPI1CLK_CLKSEL3_POSITION                           0x3
#define _SPI1CLK_CLKSEL3_SIZE                               0x1
#define _SPI1CLK_CLKSEL3_LENGTH                             0x1
#define _SPI1CLK_CLKSEL3_MASK                               0x8
#define _SPI1CLK_SPI1CLKSEL_POSN                            0x0
#define _SPI1CLK_SPI1CLKSEL_POSITION                        0x0
#define _SPI1CLK_SPI1CLKSEL_SIZE                            0x8
#define _SPI1CLK_SPI1CLKSEL_LENGTH                          0x8
#define _SPI1CLK_SPI1CLKSEL_MASK                            0xFF
#define _SPI1CLK_SPI1CLKSEL0_POSN                           0x0
#define _SPI1CLK_SPI1CLKSEL0_POSITION                       0x0
#define _SPI1CLK_SPI1CLKSEL0_SIZE                           0x1
#define _SPI1CLK_SPI1CLKSEL0_LENGTH                         0x1
#define _SPI1CLK_SPI1CLKSEL0_MASK                           0x1
#define _SPI1CLK_SPI1CLKSEL1_POSN                           0x1
#define _SPI1CLK_SPI1CLKSEL1_POSITION                       0x1
#define _SPI1CLK_SPI1CLKSEL1_SIZE                           0x1
#define _SPI1CLK_SPI1CLKSEL1_LENGTH                         0x1
#define _SPI1CLK_SPI1CLKSEL1_MASK                           0x2
#define _SPI1CLK_SPI1CLKSEL2_POSN                           0x2
#define _SPI1CLK_SPI1CLKSEL2_POSITION                       0x2
#define _SPI1CLK_SPI1CLKSEL2_SIZE                           0x1
#define _SPI1CLK_SPI1CLKSEL2_LENGTH                         0x1
#define _SPI1CLK_SPI1CLKSEL2_MASK                           0x4
#define _SPI1CLK_SPI1CLKSEL3_POSN                           0x3
#define _SPI1CLK_SPI1CLKSEL3_POSITION                       0x3
#define _SPI1CLK_SPI1CLKSEL3_SIZE                           0x1
#define _SPI1CLK_SPI1CLKSEL3_LENGTH                         0x1
#define _SPI1CLK_SPI1CLKSEL3_MASK                           0x8

// Register: I2C1STAT0
#define I2C1STAT0 I2C1STAT0
extern volatile unsigned char           I2C1STAT0           __at(0x1E4);
#ifndef _LIB_BUILD
asm("I2C1STAT0 equ 01E4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned D                      :1;
        unsigned R                      :1;
        unsigned MMA                    :1;
        unsigned SMA                    :1;
        unsigned BFRE                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned DATA                   :1;
        unsigned READ                   :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_ADDRESS            :1;
        unsigned NOT_WRITE              :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_A                  :1;
        unsigned NOT_W                  :1;
    };
} I2C1STAT0bits_t;
extern volatile I2C1STAT0bits_t I2C1STAT0bits __at(0x1E4);
// bitfield macros
#define _I2C1STAT0_D_POSN                                   0x3
#define _I2C1STAT0_D_POSITION                               0x3
#define _I2C1STAT0_D_SIZE                                   0x1
#define _I2C1STAT0_D_LENGTH                                 0x1
#define _I2C1STAT0_D_MASK                                   0x8
#define _I2C1STAT0_R_POSN                                   0x4
#define _I2C1STAT0_R_POSITION                               0x4
#define _I2C1STAT0_R_SIZE                                   0x1
#define _I2C1STAT0_R_LENGTH                                 0x1
#define _I2C1STAT0_R_MASK                                   0x10
#define _I2C1STAT0_MMA_POSN                                 0x5
#define _I2C1STAT0_MMA_POSITION                             0x5
#define _I2C1STAT0_MMA_SIZE                                 0x1
#define _I2C1STAT0_MMA_LENGTH                               0x1
#define _I2C1STAT0_MMA_MASK                                 0x20
#define _I2C1STAT0_SMA_POSN                                 0x6
#define _I2C1STAT0_SMA_POSITION                             0x6
#define _I2C1STAT0_SMA_SIZE                                 0x1
#define _I2C1STAT0_SMA_LENGTH                               0x1
#define _I2C1STAT0_SMA_MASK                                 0x40
#define _I2C1STAT0_BFRE_POSN                                0x7
#define _I2C1STAT0_BFRE_POSITION                            0x7
#define _I2C1STAT0_BFRE_SIZE                                0x1
#define _I2C1STAT0_BFRE_LENGTH                              0x1
#define _I2C1STAT0_BFRE_MASK                                0x80
#define _I2C1STAT0_DATA_POSN                                0x3
#define _I2C1STAT0_DATA_POSITION                            0x3
#define _I2C1STAT0_DATA_SIZE                                0x1
#define _I2C1STAT0_DATA_LENGTH                              0x1
#define _I2C1STAT0_DATA_MASK                                0x8
#define _I2C1STAT0_READ_POSN                                0x4
#define _I2C1STAT0_READ_POSITION                            0x4
#define _I2C1STAT0_READ_SIZE                                0x1
#define _I2C1STAT0_READ_LENGTH                              0x1
#define _I2C1STAT0_READ_MASK                                0x10
#define _I2C1STAT0_NOT_ADDRESS_POSN                         0x3
#define _I2C1STAT0_NOT_ADDRESS_POSITION                     0x3
#define _I2C1STAT0_NOT_ADDRESS_SIZE                         0x1
#define _I2C1STAT0_NOT_ADDRESS_LENGTH                       0x1
#define _I2C1STAT0_NOT_ADDRESS_MASK                         0x8
#define _I2C1STAT0_NOT_WRITE_POSN                           0x4
#define _I2C1STAT0_NOT_WRITE_POSITION                       0x4
#define _I2C1STAT0_NOT_WRITE_SIZE                           0x1
#define _I2C1STAT0_NOT_WRITE_LENGTH                         0x1
#define _I2C1STAT0_NOT_WRITE_MASK                           0x10
#define _I2C1STAT0_NOT_A_POSN                               0x3
#define _I2C1STAT0_NOT_A_POSITION                           0x3
#define _I2C1STAT0_NOT_A_SIZE                               0x1
#define _I2C1STAT0_NOT_A_LENGTH                             0x1
#define _I2C1STAT0_NOT_A_MASK                               0x8
#define _I2C1STAT0_NOT_W_POSN                               0x4
#define _I2C1STAT0_NOT_W_POSITION                           0x4
#define _I2C1STAT0_NOT_W_SIZE                               0x1
#define _I2C1STAT0_NOT_W_LENGTH                             0x1
#define _I2C1STAT0_NOT_W_MASK                               0x10

// Register: I2C1STAT1
#define I2C1STAT1 I2C1STAT1
extern volatile unsigned char           I2C1STAT1           __at(0x1E5);
#ifndef _LIB_BUILD
asm("I2C1STAT1 equ 01E5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXBF                   :1;
        unsigned                        :1;
        unsigned CLRBF                  :1;
        unsigned RXRE                   :1;
        unsigned                        :1;
        unsigned TXBE                   :1;
        unsigned                        :1;
        unsigned TXWE                   :1;
    };
} I2C1STAT1bits_t;
extern volatile I2C1STAT1bits_t I2C1STAT1bits __at(0x1E5);
// bitfield macros
#define _I2C1STAT1_RXBF_POSN                                0x0
#define _I2C1STAT1_RXBF_POSITION                            0x0
#define _I2C1STAT1_RXBF_SIZE                                0x1
#define _I2C1STAT1_RXBF_LENGTH                              0x1
#define _I2C1STAT1_RXBF_MASK                                0x1
#define _I2C1STAT1_CLRBF_POSN                               0x2
#define _I2C1STAT1_CLRBF_POSITION                           0x2
#define _I2C1STAT1_CLRBF_SIZE                               0x1
#define _I2C1STAT1_CLRBF_LENGTH                             0x1
#define _I2C1STAT1_CLRBF_MASK                               0x4
#define _I2C1STAT1_RXRE_POSN                                0x3
#define _I2C1STAT1_RXRE_POSITION                            0x3
#define _I2C1STAT1_RXRE_SIZE                                0x1
#define _I2C1STAT1_RXRE_LENGTH                              0x1
#define _I2C1STAT1_RXRE_MASK                                0x8
#define _I2C1STAT1_TXBE_POSN                                0x5
#define _I2C1STAT1_TXBE_POSITION                            0x5
#define _I2C1STAT1_TXBE_SIZE                                0x1
#define _I2C1STAT1_TXBE_LENGTH                              0x1
#define _I2C1STAT1_TXBE_MASK                                0x20
#define _I2C1STAT1_TXWE_POSN                                0x7
#define _I2C1STAT1_TXWE_POSITION                            0x7
#define _I2C1STAT1_TXWE_SIZE                                0x1
#define _I2C1STAT1_TXWE_LENGTH                              0x1
#define _I2C1STAT1_TXWE_MASK                                0x80

// Register: I2C1CON0
#define I2C1CON0 I2C1CON0
extern volatile unsigned char           I2C1CON0            __at(0x1E6);
#ifndef _LIB_BUILD
asm("I2C1CON0 equ 01E6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MODE                   :3;
        unsigned MDR                    :1;
        unsigned CSTR                   :1;
        unsigned S                      :1;
        unsigned RSEN                   :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned MODE0                  :1;
        unsigned MODE1                  :1;
        unsigned MODE2                  :1;
        unsigned                        :4;
        unsigned I2CEN                  :1;
    };
} I2C1CON0bits_t;
extern volatile I2C1CON0bits_t I2C1CON0bits __at(0x1E6);
// bitfield macros
#define _I2C1CON0_MODE_POSN                                 0x0
#define _I2C1CON0_MODE_POSITION                             0x0
#define _I2C1CON0_MODE_SIZE                                 0x3
#define _I2C1CON0_MODE_LENGTH                               0x3
#define _I2C1CON0_MODE_MASK                                 0x7
#define _I2C1CON0_MDR_POSN                                  0x3
#define _I2C1CON0_MDR_POSITION                              0x3
#define _I2C1CON0_MDR_SIZE                                  0x1
#define _I2C1CON0_MDR_LENGTH                                0x1
#define _I2C1CON0_MDR_MASK                                  0x8
#define _I2C1CON0_CSTR_POSN                                 0x4
#define _I2C1CON0_CSTR_POSITION                             0x4
#define _I2C1CON0_CSTR_SIZE                                 0x1
#define _I2C1CON0_CSTR_LENGTH                               0x1
#define _I2C1CON0_CSTR_MASK                                 0x10
#define _I2C1CON0_S_POSN                                    0x5
#define _I2C1CON0_S_POSITION                                0x5
#define _I2C1CON0_S_SIZE                                    0x1
#define _I2C1CON0_S_LENGTH                                  0x1
#define _I2C1CON0_S_MASK                                    0x20
#define _I2C1CON0_RSEN_POSN                                 0x6
#define _I2C1CON0_RSEN_POSITION                             0x6
#define _I2C1CON0_RSEN_SIZE                                 0x1
#define _I2C1CON0_RSEN_LENGTH                               0x1
#define _I2C1CON0_RSEN_MASK                                 0x40
#define _I2C1CON0_EN_POSN                                   0x7
#define _I2C1CON0_EN_POSITION                               0x7
#define _I2C1CON0_EN_SIZE                                   0x1
#define _I2C1CON0_EN_LENGTH                                 0x1
#define _I2C1CON0_EN_MASK                                   0x80
#define _I2C1CON0_MODE0_POSN                                0x0
#define _I2C1CON0_MODE0_POSITION                            0x0
#define _I2C1CON0_MODE0_SIZE                                0x1
#define _I2C1CON0_MODE0_LENGTH                              0x1
#define _I2C1CON0_MODE0_MASK                                0x1
#define _I2C1CON0_MODE1_POSN                                0x1
#define _I2C1CON0_MODE1_POSITION                            0x1
#define _I2C1CON0_MODE1_SIZE                                0x1
#define _I2C1CON0_MODE1_LENGTH                              0x1
#define _I2C1CON0_MODE1_MASK                                0x2
#define _I2C1CON0_MODE2_POSN                                0x2
#define _I2C1CON0_MODE2_POSITION                            0x2
#define _I2C1CON0_MODE2_SIZE                                0x1
#define _I2C1CON0_MODE2_LENGTH                              0x1
#define _I2C1CON0_MODE2_MASK                                0x4
#define _I2C1CON0_I2CEN_POSN                                0x7
#define _I2C1CON0_I2CEN_POSITION                            0x7
#define _I2C1CON0_I2CEN_SIZE                                0x1
#define _I2C1CON0_I2CEN_LENGTH                              0x1
#define _I2C1CON0_I2CEN_MASK                                0x80

// Register: I2C1CON1
#define I2C1CON1 I2C1CON1
extern volatile unsigned char           I2C1CON1            __at(0x1E7);
#ifndef _LIB_BUILD
asm("I2C1CON1 equ 01E7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CSD                    :1;
        unsigned TXU                    :1;
        unsigned RXO                    :1;
        unsigned P                      :1;
        unsigned ACKT                   :1;
        unsigned ACKSTAT                :1;
        unsigned ACKDT                  :1;
        unsigned ACKCNT                 :1;
    };
} I2C1CON1bits_t;
extern volatile I2C1CON1bits_t I2C1CON1bits __at(0x1E7);
// bitfield macros
#define _I2C1CON1_CSD_POSN                                  0x0
#define _I2C1CON1_CSD_POSITION                              0x0
#define _I2C1CON1_CSD_SIZE                                  0x1
#define _I2C1CON1_CSD_LENGTH                                0x1
#define _I2C1CON1_CSD_MASK                                  0x1
#define _I2C1CON1_TXU_POSN                                  0x1
#define _I2C1CON1_TXU_POSITION                              0x1
#define _I2C1CON1_TXU_SIZE                                  0x1
#define _I2C1CON1_TXU_LENGTH                                0x1
#define _I2C1CON1_TXU_MASK                                  0x2
#define _I2C1CON1_RXO_POSN                                  0x2
#define _I2C1CON1_RXO_POSITION                              0x2
#define _I2C1CON1_RXO_SIZE                                  0x1
#define _I2C1CON1_RXO_LENGTH                                0x1
#define _I2C1CON1_RXO_MASK                                  0x4
#define _I2C1CON1_P_POSN                                    0x3
#define _I2C1CON1_P_POSITION                                0x3
#define _I2C1CON1_P_SIZE                                    0x1
#define _I2C1CON1_P_LENGTH                                  0x1
#define _I2C1CON1_P_MASK                                    0x8
#define _I2C1CON1_ACKT_POSN                                 0x4
#define _I2C1CON1_ACKT_POSITION                             0x4
#define _I2C1CON1_ACKT_SIZE                                 0x1
#define _I2C1CON1_ACKT_LENGTH                               0x1
#define _I2C1CON1_ACKT_MASK                                 0x10
#define _I2C1CON1_ACKSTAT_POSN                              0x5
#define _I2C1CON1_ACKSTAT_POSITION                          0x5
#define _I2C1CON1_ACKSTAT_SIZE                              0x1
#define _I2C1CON1_ACKSTAT_LENGTH                            0x1
#define _I2C1CON1_ACKSTAT_MASK                              0x20
#define _I2C1CON1_ACKDT_POSN                                0x6
#define _I2C1CON1_ACKDT_POSITION                            0x6
#define _I2C1CON1_ACKDT_SIZE                                0x1
#define _I2C1CON1_ACKDT_LENGTH                              0x1
#define _I2C1CON1_ACKDT_MASK                                0x40
#define _I2C1CON1_ACKCNT_POSN                               0x7
#define _I2C1CON1_ACKCNT_POSITION                           0x7
#define _I2C1CON1_ACKCNT_SIZE                               0x1
#define _I2C1CON1_ACKCNT_LENGTH                             0x1
#define _I2C1CON1_ACKCNT_MASK                               0x80

// Register: I2C1CON2
#define I2C1CON2 I2C1CON2
extern volatile unsigned char           I2C1CON2            __at(0x1E8);
#ifndef _LIB_BUILD
asm("I2C1CON2 equ 01E8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BFRET                  :2;
        unsigned SDAHT                  :2;
        unsigned ABD                    :1;
        unsigned                        :1;
        unsigned GCEN                   :1;
        unsigned ACNT                   :1;
    };
    struct {
        unsigned BFRET0                 :1;
        unsigned BFRET1                 :1;
        unsigned SDAHT0                 :1;
        unsigned SDAHT1                 :1;
    };
} I2C1CON2bits_t;
extern volatile I2C1CON2bits_t I2C1CON2bits __at(0x1E8);
// bitfield macros
#define _I2C1CON2_BFRET_POSN                                0x0
#define _I2C1CON2_BFRET_POSITION                            0x0
#define _I2C1CON2_BFRET_SIZE                                0x2
#define _I2C1CON2_BFRET_LENGTH                              0x2
#define _I2C1CON2_BFRET_MASK                                0x3
#define _I2C1CON2_SDAHT_POSN                                0x2
#define _I2C1CON2_SDAHT_POSITION                            0x2
#define _I2C1CON2_SDAHT_SIZE                                0x2
#define _I2C1CON2_SDAHT_LENGTH                              0x2
#define _I2C1CON2_SDAHT_MASK                                0xC
#define _I2C1CON2_ABD_POSN                                  0x4
#define _I2C1CON2_ABD_POSITION                              0x4
#define _I2C1CON2_ABD_SIZE                                  0x1
#define _I2C1CON2_ABD_LENGTH                                0x1
#define _I2C1CON2_ABD_MASK                                  0x10
#define _I2C1CON2_GCEN_POSN                                 0x6
#define _I2C1CON2_GCEN_POSITION                             0x6
#define _I2C1CON2_GCEN_SIZE                                 0x1
#define _I2C1CON2_GCEN_LENGTH                               0x1
#define _I2C1CON2_GCEN_MASK                                 0x40
#define _I2C1CON2_ACNT_POSN                                 0x7
#define _I2C1CON2_ACNT_POSITION                             0x7
#define _I2C1CON2_ACNT_SIZE                                 0x1
#define _I2C1CON2_ACNT_LENGTH                               0x1
#define _I2C1CON2_ACNT_MASK                                 0x80
#define _I2C1CON2_BFRET0_POSN                               0x0
#define _I2C1CON2_BFRET0_POSITION                           0x0
#define _I2C1CON2_BFRET0_SIZE                               0x1
#define _I2C1CON2_BFRET0_LENGTH                             0x1
#define _I2C1CON2_BFRET0_MASK                               0x1
#define _I2C1CON2_BFRET1_POSN                               0x1
#define _I2C1CON2_BFRET1_POSITION                           0x1
#define _I2C1CON2_BFRET1_SIZE                               0x1
#define _I2C1CON2_BFRET1_LENGTH                             0x1
#define _I2C1CON2_BFRET1_MASK                               0x2
#define _I2C1CON2_SDAHT0_POSN                               0x2
#define _I2C1CON2_SDAHT0_POSITION                           0x2
#define _I2C1CON2_SDAHT0_SIZE                               0x1
#define _I2C1CON2_SDAHT0_LENGTH                             0x1
#define _I2C1CON2_SDAHT0_MASK                               0x4
#define _I2C1CON2_SDAHT1_POSN                               0x3
#define _I2C1CON2_SDAHT1_POSITION                           0x3
#define _I2C1CON2_SDAHT1_SIZE                               0x1
#define _I2C1CON2_SDAHT1_LENGTH                             0x1
#define _I2C1CON2_SDAHT1_MASK                               0x8

// Register: I2C1CON3
#define I2C1CON3 I2C1CON3
extern volatile unsigned char           I2C1CON3            __at(0x1E9);
#ifndef _LIB_BUILD
asm("I2C1CON3 equ 01E9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACNTMD                 :2;
        unsigned FME                    :2;
        unsigned BFREDR                 :1;
    };
    struct {
        unsigned ACNTMD0                :1;
        unsigned ACNTMD1                :1;
        unsigned FME0                   :1;
        unsigned FME1                   :1;
    };
} I2C1CON3bits_t;
extern volatile I2C1CON3bits_t I2C1CON3bits __at(0x1E9);
// bitfield macros
#define _I2C1CON3_ACNTMD_POSN                               0x0
#define _I2C1CON3_ACNTMD_POSITION                           0x0
#define _I2C1CON3_ACNTMD_SIZE                               0x2
#define _I2C1CON3_ACNTMD_LENGTH                             0x2
#define _I2C1CON3_ACNTMD_MASK                               0x3
#define _I2C1CON3_FME_POSN                                  0x2
#define _I2C1CON3_FME_POSITION                              0x2
#define _I2C1CON3_FME_SIZE                                  0x2
#define _I2C1CON3_FME_LENGTH                                0x2
#define _I2C1CON3_FME_MASK                                  0xC
#define _I2C1CON3_BFREDR_POSN                               0x4
#define _I2C1CON3_BFREDR_POSITION                           0x4
#define _I2C1CON3_BFREDR_SIZE                               0x1
#define _I2C1CON3_BFREDR_LENGTH                             0x1
#define _I2C1CON3_BFREDR_MASK                               0x10
#define _I2C1CON3_ACNTMD0_POSN                              0x0
#define _I2C1CON3_ACNTMD0_POSITION                          0x0
#define _I2C1CON3_ACNTMD0_SIZE                              0x1
#define _I2C1CON3_ACNTMD0_LENGTH                            0x1
#define _I2C1CON3_ACNTMD0_MASK                              0x1
#define _I2C1CON3_ACNTMD1_POSN                              0x1
#define _I2C1CON3_ACNTMD1_POSITION                          0x1
#define _I2C1CON3_ACNTMD1_SIZE                              0x1
#define _I2C1CON3_ACNTMD1_LENGTH                            0x1
#define _I2C1CON3_ACNTMD1_MASK                              0x2
#define _I2C1CON3_FME0_POSN                                 0x2
#define _I2C1CON3_FME0_POSITION                             0x2
#define _I2C1CON3_FME0_SIZE                                 0x1
#define _I2C1CON3_FME0_LENGTH                               0x1
#define _I2C1CON3_FME0_MASK                                 0x4
#define _I2C1CON3_FME1_POSN                                 0x3
#define _I2C1CON3_FME1_POSITION                             0x3
#define _I2C1CON3_FME1_SIZE                                 0x1
#define _I2C1CON3_FME1_LENGTH                               0x1
#define _I2C1CON3_FME1_MASK                                 0x8

// Register: I2C1PIR
#define I2C1PIR I2C1PIR
extern volatile unsigned char           I2C1PIR             __at(0x1EA);
#ifndef _LIB_BUILD
asm("I2C1PIR equ 01EAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCIF                   :1;
        unsigned RSCIF                  :1;
        unsigned PCIF                   :1;
        unsigned ADRIF                  :1;
        unsigned WRIF                   :1;
        unsigned                        :1;
        unsigned ACKTIF                 :1;
        unsigned CNTIF                  :1;
    };
    struct {
        unsigned SC1IF                  :1;
        unsigned RSC1IF                 :1;
        unsigned PC1IF                  :1;
        unsigned ADR1IF                 :1;
        unsigned WR1IF                  :1;
        unsigned                        :1;
        unsigned ACKT1IF                :1;
        unsigned CNT1IF                 :1;
    };
} I2C1PIRbits_t;
extern volatile I2C1PIRbits_t I2C1PIRbits __at(0x1EA);
// bitfield macros
#define _I2C1PIR_SCIF_POSN                                  0x0
#define _I2C1PIR_SCIF_POSITION                              0x0
#define _I2C1PIR_SCIF_SIZE                                  0x1
#define _I2C1PIR_SCIF_LENGTH                                0x1
#define _I2C1PIR_SCIF_MASK                                  0x1
#define _I2C1PIR_RSCIF_POSN                                 0x1
#define _I2C1PIR_RSCIF_POSITION                             0x1
#define _I2C1PIR_RSCIF_SIZE                                 0x1
#define _I2C1PIR_RSCIF_LENGTH                               0x1
#define _I2C1PIR_RSCIF_MASK                                 0x2
#define _I2C1PIR_PCIF_POSN                                  0x2
#define _I2C1PIR_PCIF_POSITION                              0x2
#define _I2C1PIR_PCIF_SIZE                                  0x1
#define _I2C1PIR_PCIF_LENGTH                                0x1
#define _I2C1PIR_PCIF_MASK                                  0x4
#define _I2C1PIR_ADRIF_POSN                                 0x3
#define _I2C1PIR_ADRIF_POSITION                             0x3
#define _I2C1PIR_ADRIF_SIZE                                 0x1
#define _I2C1PIR_ADRIF_LENGTH                               0x1
#define _I2C1PIR_ADRIF_MASK                                 0x8
#define _I2C1PIR_WRIF_POSN                                  0x4
#define _I2C1PIR_WRIF_POSITION                              0x4
#define _I2C1PIR_WRIF_SIZE                                  0x1
#define _I2C1PIR_WRIF_LENGTH                                0x1
#define _I2C1PIR_WRIF_MASK                                  0x10
#define _I2C1PIR_ACKTIF_POSN                                0x6
#define _I2C1PIR_ACKTIF_POSITION                            0x6
#define _I2C1PIR_ACKTIF_SIZE                                0x1
#define _I2C1PIR_ACKTIF_LENGTH                              0x1
#define _I2C1PIR_ACKTIF_MASK                                0x40
#define _I2C1PIR_CNTIF_POSN                                 0x7
#define _I2C1PIR_CNTIF_POSITION                             0x7
#define _I2C1PIR_CNTIF_SIZE                                 0x1
#define _I2C1PIR_CNTIF_LENGTH                               0x1
#define _I2C1PIR_CNTIF_MASK                                 0x80
#define _I2C1PIR_SC1IF_POSN                                 0x0
#define _I2C1PIR_SC1IF_POSITION                             0x0
#define _I2C1PIR_SC1IF_SIZE                                 0x1
#define _I2C1PIR_SC1IF_LENGTH                               0x1
#define _I2C1PIR_SC1IF_MASK                                 0x1
#define _I2C1PIR_RSC1IF_POSN                                0x1
#define _I2C1PIR_RSC1IF_POSITION                            0x1
#define _I2C1PIR_RSC1IF_SIZE                                0x1
#define _I2C1PIR_RSC1IF_LENGTH                              0x1
#define _I2C1PIR_RSC1IF_MASK                                0x2
#define _I2C1PIR_PC1IF_POSN                                 0x2
#define _I2C1PIR_PC1IF_POSITION                             0x2
#define _I2C1PIR_PC1IF_SIZE                                 0x1
#define _I2C1PIR_PC1IF_LENGTH                               0x1
#define _I2C1PIR_PC1IF_MASK                                 0x4
#define _I2C1PIR_ADR1IF_POSN                                0x3
#define _I2C1PIR_ADR1IF_POSITION                            0x3
#define _I2C1PIR_ADR1IF_SIZE                                0x1
#define _I2C1PIR_ADR1IF_LENGTH                              0x1
#define _I2C1PIR_ADR1IF_MASK                                0x8
#define _I2C1PIR_WR1IF_POSN                                 0x4
#define _I2C1PIR_WR1IF_POSITION                             0x4
#define _I2C1PIR_WR1IF_SIZE                                 0x1
#define _I2C1PIR_WR1IF_LENGTH                               0x1
#define _I2C1PIR_WR1IF_MASK                                 0x10
#define _I2C1PIR_ACKT1IF_POSN                               0x6
#define _I2C1PIR_ACKT1IF_POSITION                           0x6
#define _I2C1PIR_ACKT1IF_SIZE                               0x1
#define _I2C1PIR_ACKT1IF_LENGTH                             0x1
#define _I2C1PIR_ACKT1IF_MASK                               0x40
#define _I2C1PIR_CNT1IF_POSN                                0x7
#define _I2C1PIR_CNT1IF_POSITION                            0x7
#define _I2C1PIR_CNT1IF_SIZE                                0x1
#define _I2C1PIR_CNT1IF_LENGTH                              0x1
#define _I2C1PIR_CNT1IF_MASK                                0x80

// Register: I2C1PIE
#define I2C1PIE I2C1PIE
extern volatile unsigned char           I2C1PIE             __at(0x1EB);
#ifndef _LIB_BUILD
asm("I2C1PIE equ 01EBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SCIE                   :1;
        unsigned RSCIE                  :1;
        unsigned PCIE                   :1;
        unsigned ADRIE                  :1;
        unsigned WRIE                   :1;
        unsigned                        :1;
        unsigned ACKTIE                 :1;
        unsigned CNTIE                  :1;
    };
    struct {
        unsigned SC1IE                  :1;
        unsigned RSC1IE                 :1;
        unsigned PC1IE                  :1;
        unsigned ADR1IE                 :1;
        unsigned WR1IE                  :1;
        unsigned                        :1;
        unsigned ACKT1IE                :1;
        unsigned CNT1IE                 :1;
    };
} I2C1PIEbits_t;
extern volatile I2C1PIEbits_t I2C1PIEbits __at(0x1EB);
// bitfield macros
#define _I2C1PIE_SCIE_POSN                                  0x0
#define _I2C1PIE_SCIE_POSITION                              0x0
#define _I2C1PIE_SCIE_SIZE                                  0x1
#define _I2C1PIE_SCIE_LENGTH                                0x1
#define _I2C1PIE_SCIE_MASK                                  0x1
#define _I2C1PIE_RSCIE_POSN                                 0x1
#define _I2C1PIE_RSCIE_POSITION                             0x1
#define _I2C1PIE_RSCIE_SIZE                                 0x1
#define _I2C1PIE_RSCIE_LENGTH                               0x1
#define _I2C1PIE_RSCIE_MASK                                 0x2
#define _I2C1PIE_PCIE_POSN                                  0x2
#define _I2C1PIE_PCIE_POSITION                              0x2
#define _I2C1PIE_PCIE_SIZE                                  0x1
#define _I2C1PIE_PCIE_LENGTH                                0x1
#define _I2C1PIE_PCIE_MASK                                  0x4
#define _I2C1PIE_ADRIE_POSN                                 0x3
#define _I2C1PIE_ADRIE_POSITION                             0x3
#define _I2C1PIE_ADRIE_SIZE                                 0x1
#define _I2C1PIE_ADRIE_LENGTH                               0x1
#define _I2C1PIE_ADRIE_MASK                                 0x8
#define _I2C1PIE_WRIE_POSN                                  0x4
#define _I2C1PIE_WRIE_POSITION                              0x4
#define _I2C1PIE_WRIE_SIZE                                  0x1
#define _I2C1PIE_WRIE_LENGTH                                0x1
#define _I2C1PIE_WRIE_MASK                                  0x10
#define _I2C1PIE_ACKTIE_POSN                                0x6
#define _I2C1PIE_ACKTIE_POSITION                            0x6
#define _I2C1PIE_ACKTIE_SIZE                                0x1
#define _I2C1PIE_ACKTIE_LENGTH                              0x1
#define _I2C1PIE_ACKTIE_MASK                                0x40
#define _I2C1PIE_CNTIE_POSN                                 0x7
#define _I2C1PIE_CNTIE_POSITION                             0x7
#define _I2C1PIE_CNTIE_SIZE                                 0x1
#define _I2C1PIE_CNTIE_LENGTH                               0x1
#define _I2C1PIE_CNTIE_MASK                                 0x80
#define _I2C1PIE_SC1IE_POSN                                 0x0
#define _I2C1PIE_SC1IE_POSITION                             0x0
#define _I2C1PIE_SC1IE_SIZE                                 0x1
#define _I2C1PIE_SC1IE_LENGTH                               0x1
#define _I2C1PIE_SC1IE_MASK                                 0x1
#define _I2C1PIE_RSC1IE_POSN                                0x1
#define _I2C1PIE_RSC1IE_POSITION                            0x1
#define _I2C1PIE_RSC1IE_SIZE                                0x1
#define _I2C1PIE_RSC1IE_LENGTH                              0x1
#define _I2C1PIE_RSC1IE_MASK                                0x2
#define _I2C1PIE_PC1IE_POSN                                 0x2
#define _I2C1PIE_PC1IE_POSITION                             0x2
#define _I2C1PIE_PC1IE_SIZE                                 0x1
#define _I2C1PIE_PC1IE_LENGTH                               0x1
#define _I2C1PIE_PC1IE_MASK                                 0x4
#define _I2C1PIE_ADR1IE_POSN                                0x3
#define _I2C1PIE_ADR1IE_POSITION                            0x3
#define _I2C1PIE_ADR1IE_SIZE                                0x1
#define _I2C1PIE_ADR1IE_LENGTH                              0x1
#define _I2C1PIE_ADR1IE_MASK                                0x8
#define _I2C1PIE_WR1IE_POSN                                 0x4
#define _I2C1PIE_WR1IE_POSITION                             0x4
#define _I2C1PIE_WR1IE_SIZE                                 0x1
#define _I2C1PIE_WR1IE_LENGTH                               0x1
#define _I2C1PIE_WR1IE_MASK                                 0x10
#define _I2C1PIE_ACKT1IE_POSN                               0x6
#define _I2C1PIE_ACKT1IE_POSITION                           0x6
#define _I2C1PIE_ACKT1IE_SIZE                               0x1
#define _I2C1PIE_ACKT1IE_LENGTH                             0x1
#define _I2C1PIE_ACKT1IE_MASK                               0x40
#define _I2C1PIE_CNT1IE_POSN                                0x7
#define _I2C1PIE_CNT1IE_POSITION                            0x7
#define _I2C1PIE_CNT1IE_SIZE                                0x1
#define _I2C1PIE_CNT1IE_LENGTH                              0x1
#define _I2C1PIE_CNT1IE_MASK                                0x80

// Register: I2C1ERR
#define I2C1ERR I2C1ERR
extern volatile unsigned char           I2C1ERR             __at(0x1EC);
#ifndef _LIB_BUILD
asm("I2C1ERR equ 01ECh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NACKIE                 :1;
        unsigned BCLIE                  :1;
        unsigned BTOIE                  :1;
        unsigned                        :1;
        unsigned NACKIF                 :1;
        unsigned BCLIF                  :1;
        unsigned BTOIF                  :1;
    };
    struct {
        unsigned NACK1IE                :1;
        unsigned BCL1IE                 :1;
        unsigned BTO1IE                 :1;
        unsigned                        :1;
        unsigned NACK1IF                :1;
        unsigned BCL1IF                 :1;
        unsigned BTO1IF                 :1;
    };
} I2C1ERRbits_t;
extern volatile I2C1ERRbits_t I2C1ERRbits __at(0x1EC);
// bitfield macros
#define _I2C1ERR_NACKIE_POSN                                0x0
#define _I2C1ERR_NACKIE_POSITION                            0x0
#define _I2C1ERR_NACKIE_SIZE                                0x1
#define _I2C1ERR_NACKIE_LENGTH                              0x1
#define _I2C1ERR_NACKIE_MASK                                0x1
#define _I2C1ERR_BCLIE_POSN                                 0x1
#define _I2C1ERR_BCLIE_POSITION                             0x1
#define _I2C1ERR_BCLIE_SIZE                                 0x1
#define _I2C1ERR_BCLIE_LENGTH                               0x1
#define _I2C1ERR_BCLIE_MASK                                 0x2
#define _I2C1ERR_BTOIE_POSN                                 0x2
#define _I2C1ERR_BTOIE_POSITION                             0x2
#define _I2C1ERR_BTOIE_SIZE                                 0x1
#define _I2C1ERR_BTOIE_LENGTH                               0x1
#define _I2C1ERR_BTOIE_MASK                                 0x4
#define _I2C1ERR_NACKIF_POSN                                0x4
#define _I2C1ERR_NACKIF_POSITION                            0x4
#define _I2C1ERR_NACKIF_SIZE                                0x1
#define _I2C1ERR_NACKIF_LENGTH                              0x1
#define _I2C1ERR_NACKIF_MASK                                0x10
#define _I2C1ERR_BCLIF_POSN                                 0x5
#define _I2C1ERR_BCLIF_POSITION                             0x5
#define _I2C1ERR_BCLIF_SIZE                                 0x1
#define _I2C1ERR_BCLIF_LENGTH                               0x1
#define _I2C1ERR_BCLIF_MASK                                 0x20
#define _I2C1ERR_BTOIF_POSN                                 0x6
#define _I2C1ERR_BTOIF_POSITION                             0x6
#define _I2C1ERR_BTOIF_SIZE                                 0x1
#define _I2C1ERR_BTOIF_LENGTH                               0x1
#define _I2C1ERR_BTOIF_MASK                                 0x40
#define _I2C1ERR_NACK1IE_POSN                               0x0
#define _I2C1ERR_NACK1IE_POSITION                           0x0
#define _I2C1ERR_NACK1IE_SIZE                               0x1
#define _I2C1ERR_NACK1IE_LENGTH                             0x1
#define _I2C1ERR_NACK1IE_MASK                               0x1
#define _I2C1ERR_BCL1IE_POSN                                0x1
#define _I2C1ERR_BCL1IE_POSITION                            0x1
#define _I2C1ERR_BCL1IE_SIZE                                0x1
#define _I2C1ERR_BCL1IE_LENGTH                              0x1
#define _I2C1ERR_BCL1IE_MASK                                0x2
#define _I2C1ERR_BTO1IE_POSN                                0x2
#define _I2C1ERR_BTO1IE_POSITION                            0x2
#define _I2C1ERR_BTO1IE_SIZE                                0x1
#define _I2C1ERR_BTO1IE_LENGTH                              0x1
#define _I2C1ERR_BTO1IE_MASK                                0x4
#define _I2C1ERR_NACK1IF_POSN                               0x4
#define _I2C1ERR_NACK1IF_POSITION                           0x4
#define _I2C1ERR_NACK1IF_SIZE                               0x1
#define _I2C1ERR_NACK1IF_LENGTH                             0x1
#define _I2C1ERR_NACK1IF_MASK                               0x10
#define _I2C1ERR_BCL1IF_POSN                                0x5
#define _I2C1ERR_BCL1IF_POSITION                            0x5
#define _I2C1ERR_BCL1IF_SIZE                                0x1
#define _I2C1ERR_BCL1IF_LENGTH                              0x1
#define _I2C1ERR_BCL1IF_MASK                                0x20
#define _I2C1ERR_BTO1IF_POSN                                0x6
#define _I2C1ERR_BTO1IF_POSITION                            0x6
#define _I2C1ERR_BTO1IF_SIZE                                0x1
#define _I2C1ERR_BTO1IF_LENGTH                              0x1
#define _I2C1ERR_BTO1IF_MASK                                0x40

// Register: I2C1CNT
#define I2C1CNT I2C1CNT
extern volatile unsigned short          I2C1CNT             __at(0x1ED);
#ifndef _LIB_BUILD
asm("I2C1CNT equ 01EDh");
#endif

// Register: I2C1CNTL
#define I2C1CNTL I2C1CNTL
extern volatile unsigned char           I2C1CNTL            __at(0x1ED);
#ifndef _LIB_BUILD
asm("I2C1CNTL equ 01EDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CNT                    :8;
    };
    struct {
        unsigned CNT0                   :1;
        unsigned CNT1                   :1;
        unsigned CNT2                   :1;
        unsigned CNT3                   :1;
        unsigned CNT4                   :1;
        unsigned CNT5                   :1;
        unsigned CNT6                   :1;
        unsigned CNT7                   :1;
    };
    struct {
        unsigned I2C1CNT                :8;
    };
    struct {
        unsigned I2C1CNT0               :1;
        unsigned I2C1CNT1               :1;
        unsigned I2C1CNT2               :1;
        unsigned I2C1CNT3               :1;
        unsigned I2C1CNT4               :1;
        unsigned I2C1CNT5               :1;
        unsigned I2C1CNT6               :1;
        unsigned I2C1CNT7               :1;
    };
} I2C1CNTLbits_t;
extern volatile I2C1CNTLbits_t I2C1CNTLbits __at(0x1ED);
// bitfield macros
#define _I2C1CNTL_CNT_POSN                                  0x0
#define _I2C1CNTL_CNT_POSITION                              0x0
#define _I2C1CNTL_CNT_SIZE                                  0x8
#define _I2C1CNTL_CNT_LENGTH                                0x8
#define _I2C1CNTL_CNT_MASK                                  0xFF
#define _I2C1CNTL_CNT0_POSN                                 0x0
#define _I2C1CNTL_CNT0_POSITION                             0x0
#define _I2C1CNTL_CNT0_SIZE                                 0x1
#define _I2C1CNTL_CNT0_LENGTH                               0x1
#define _I2C1CNTL_CNT0_MASK                                 0x1
#define _I2C1CNTL_CNT1_POSN                                 0x1
#define _I2C1CNTL_CNT1_POSITION                             0x1
#define _I2C1CNTL_CNT1_SIZE                                 0x1
#define _I2C1CNTL_CNT1_LENGTH                               0x1
#define _I2C1CNTL_CNT1_MASK                                 0x2
#define _I2C1CNTL_CNT2_POSN                                 0x2
#define _I2C1CNTL_CNT2_POSITION                             0x2
#define _I2C1CNTL_CNT2_SIZE                                 0x1
#define _I2C1CNTL_CNT2_LENGTH                               0x1
#define _I2C1CNTL_CNT2_MASK                                 0x4
#define _I2C1CNTL_CNT3_POSN                                 0x3
#define _I2C1CNTL_CNT3_POSITION                             0x3
#define _I2C1CNTL_CNT3_SIZE                                 0x1
#define _I2C1CNTL_CNT3_LENGTH                               0x1
#define _I2C1CNTL_CNT3_MASK                                 0x8
#define _I2C1CNTL_CNT4_POSN                                 0x4
#define _I2C1CNTL_CNT4_POSITION                             0x4
#define _I2C1CNTL_CNT4_SIZE                                 0x1
#define _I2C1CNTL_CNT4_LENGTH                               0x1
#define _I2C1CNTL_CNT4_MASK                                 0x10
#define _I2C1CNTL_CNT5_POSN                                 0x5
#define _I2C1CNTL_CNT5_POSITION                             0x5
#define _I2C1CNTL_CNT5_SIZE                                 0x1
#define _I2C1CNTL_CNT5_LENGTH                               0x1
#define _I2C1CNTL_CNT5_MASK                                 0x20
#define _I2C1CNTL_CNT6_POSN                                 0x6
#define _I2C1CNTL_CNT6_POSITION                             0x6
#define _I2C1CNTL_CNT6_SIZE                                 0x1
#define _I2C1CNTL_CNT6_LENGTH                               0x1
#define _I2C1CNTL_CNT6_MASK                                 0x40
#define _I2C1CNTL_CNT7_POSN                                 0x7
#define _I2C1CNTL_CNT7_POSITION                             0x7
#define _I2C1CNTL_CNT7_SIZE                                 0x1
#define _I2C1CNTL_CNT7_LENGTH                               0x1
#define _I2C1CNTL_CNT7_MASK                                 0x80
#define _I2C1CNTL_I2C1CNT_POSN                              0x0
#define _I2C1CNTL_I2C1CNT_POSITION                          0x0
#define _I2C1CNTL_I2C1CNT_SIZE                              0x8
#define _I2C1CNTL_I2C1CNT_LENGTH                            0x8
#define _I2C1CNTL_I2C1CNT_MASK                              0xFF
#define _I2C1CNTL_I2C1CNT0_POSN                             0x0
#define _I2C1CNTL_I2C1CNT0_POSITION                         0x0
#define _I2C1CNTL_I2C1CNT0_SIZE                             0x1
#define _I2C1CNTL_I2C1CNT0_LENGTH                           0x1
#define _I2C1CNTL_I2C1CNT0_MASK                             0x1
#define _I2C1CNTL_I2C1CNT1_POSN                             0x1
#define _I2C1CNTL_I2C1CNT1_POSITION                         0x1
#define _I2C1CNTL_I2C1CNT1_SIZE                             0x1
#define _I2C1CNTL_I2C1CNT1_LENGTH                           0x1
#define _I2C1CNTL_I2C1CNT1_MASK                             0x2
#define _I2C1CNTL_I2C1CNT2_POSN                             0x2
#define _I2C1CNTL_I2C1CNT2_POSITION                         0x2
#define _I2C1CNTL_I2C1CNT2_SIZE                             0x1
#define _I2C1CNTL_I2C1CNT2_LENGTH                           0x1
#define _I2C1CNTL_I2C1CNT2_MASK                             0x4
#define _I2C1CNTL_I2C1CNT3_POSN                             0x3
#define _I2C1CNTL_I2C1CNT3_POSITION                         0x3
#define _I2C1CNTL_I2C1CNT3_SIZE                             0x1
#define _I2C1CNTL_I2C1CNT3_LENGTH                           0x1
#define _I2C1CNTL_I2C1CNT3_MASK                             0x8
#define _I2C1CNTL_I2C1CNT4_POSN                             0x4
#define _I2C1CNTL_I2C1CNT4_POSITION                         0x4
#define _I2C1CNTL_I2C1CNT4_SIZE                             0x1
#define _I2C1CNTL_I2C1CNT4_LENGTH                           0x1
#define _I2C1CNTL_I2C1CNT4_MASK                             0x10
#define _I2C1CNTL_I2C1CNT5_POSN                             0x5
#define _I2C1CNTL_I2C1CNT5_POSITION                         0x5
#define _I2C1CNTL_I2C1CNT5_SIZE                             0x1
#define _I2C1CNTL_I2C1CNT5_LENGTH                           0x1
#define _I2C1CNTL_I2C1CNT5_MASK                             0x20
#define _I2C1CNTL_I2C1CNT6_POSN                             0x6
#define _I2C1CNTL_I2C1CNT6_POSITION                         0x6
#define _I2C1CNTL_I2C1CNT6_SIZE                             0x1
#define _I2C1CNTL_I2C1CNT6_LENGTH                           0x1
#define _I2C1CNTL_I2C1CNT6_MASK                             0x40
#define _I2C1CNTL_I2C1CNT7_POSN                             0x7
#define _I2C1CNTL_I2C1CNT7_POSITION                         0x7
#define _I2C1CNTL_I2C1CNT7_SIZE                             0x1
#define _I2C1CNTL_I2C1CNT7_LENGTH                           0x1
#define _I2C1CNTL_I2C1CNT7_MASK                             0x80

// Register: I2C1CNTH
#define I2C1CNTH I2C1CNTH
extern volatile unsigned char           I2C1CNTH            __at(0x1EE);
#ifndef _LIB_BUILD
asm("I2C1CNTH equ 01EEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CNT                    :8;
    };
    struct {
        unsigned CNT8                   :1;
        unsigned CNT9                   :1;
        unsigned CNT10                  :1;
        unsigned CNT11                  :1;
        unsigned CNT12                  :1;
        unsigned CNT13                  :1;
        unsigned CNT14                  :1;
        unsigned CNT15                  :1;
    };
    struct {
        unsigned I2C1CNT                :8;
    };
    struct {
        unsigned I2C1CNT8               :1;
        unsigned I2C1CNT9               :1;
        unsigned I2C1CNT10              :1;
        unsigned I2C1CNT11              :1;
        unsigned I2C1CNT12              :1;
        unsigned I2C1CNT13              :1;
        unsigned I2C1CNT14              :1;
        unsigned I2C1CNT15              :1;
    };
} I2C1CNTHbits_t;
extern volatile I2C1CNTHbits_t I2C1CNTHbits __at(0x1EE);
// bitfield macros
#define _I2C1CNTH_CNT_POSN                                  0x0
#define _I2C1CNTH_CNT_POSITION                              0x0
#define _I2C1CNTH_CNT_SIZE                                  0x8
#define _I2C1CNTH_CNT_LENGTH                                0x8
#define _I2C1CNTH_CNT_MASK                                  0xFF
#define _I2C1CNTH_CNT8_POSN                                 0x0
#define _I2C1CNTH_CNT8_POSITION                             0x0
#define _I2C1CNTH_CNT8_SIZE                                 0x1
#define _I2C1CNTH_CNT8_LENGTH                               0x1
#define _I2C1CNTH_CNT8_MASK                                 0x1
#define _I2C1CNTH_CNT9_POSN                                 0x1
#define _I2C1CNTH_CNT9_POSITION                             0x1
#define _I2C1CNTH_CNT9_SIZE                                 0x1
#define _I2C1CNTH_CNT9_LENGTH                               0x1
#define _I2C1CNTH_CNT9_MASK                                 0x2
#define _I2C1CNTH_CNT10_POSN                                0x2
#define _I2C1CNTH_CNT10_POSITION                            0x2
#define _I2C1CNTH_CNT10_SIZE                                0x1
#define _I2C1CNTH_CNT10_LENGTH                              0x1
#define _I2C1CNTH_CNT10_MASK                                0x4
#define _I2C1CNTH_CNT11_POSN                                0x3
#define _I2C1CNTH_CNT11_POSITION                            0x3
#define _I2C1CNTH_CNT11_SIZE                                0x1
#define _I2C1CNTH_CNT11_LENGTH                              0x1
#define _I2C1CNTH_CNT11_MASK                                0x8
#define _I2C1CNTH_CNT12_POSN                                0x4
#define _I2C1CNTH_CNT12_POSITION                            0x4
#define _I2C1CNTH_CNT12_SIZE                                0x1
#define _I2C1CNTH_CNT12_LENGTH                              0x1
#define _I2C1CNTH_CNT12_MASK                                0x10
#define _I2C1CNTH_CNT13_POSN                                0x5
#define _I2C1CNTH_CNT13_POSITION                            0x5
#define _I2C1CNTH_CNT13_SIZE                                0x1
#define _I2C1CNTH_CNT13_LENGTH                              0x1
#define _I2C1CNTH_CNT13_MASK                                0x20
#define _I2C1CNTH_CNT14_POSN                                0x6
#define _I2C1CNTH_CNT14_POSITION                            0x6
#define _I2C1CNTH_CNT14_SIZE                                0x1
#define _I2C1CNTH_CNT14_LENGTH                              0x1
#define _I2C1CNTH_CNT14_MASK                                0x40
#define _I2C1CNTH_CNT15_POSN                                0x7
#define _I2C1CNTH_CNT15_POSITION                            0x7
#define _I2C1CNTH_CNT15_SIZE                                0x1
#define _I2C1CNTH_CNT15_LENGTH                              0x1
#define _I2C1CNTH_CNT15_MASK                                0x80
#define _I2C1CNTH_I2C1CNT_POSN                              0x0
#define _I2C1CNTH_I2C1CNT_POSITION                          0x0
#define _I2C1CNTH_I2C1CNT_SIZE                              0x8
#define _I2C1CNTH_I2C1CNT_LENGTH                            0x8
#define _I2C1CNTH_I2C1CNT_MASK                              0xFF
#define _I2C1CNTH_I2C1CNT8_POSN                             0x0
#define _I2C1CNTH_I2C1CNT8_POSITION                         0x0
#define _I2C1CNTH_I2C1CNT8_SIZE                             0x1
#define _I2C1CNTH_I2C1CNT8_LENGTH                           0x1
#define _I2C1CNTH_I2C1CNT8_MASK                             0x1
#define _I2C1CNTH_I2C1CNT9_POSN                             0x1
#define _I2C1CNTH_I2C1CNT9_POSITION                         0x1
#define _I2C1CNTH_I2C1CNT9_SIZE                             0x1
#define _I2C1CNTH_I2C1CNT9_LENGTH                           0x1
#define _I2C1CNTH_I2C1CNT9_MASK                             0x2
#define _I2C1CNTH_I2C1CNT10_POSN                            0x2
#define _I2C1CNTH_I2C1CNT10_POSITION                        0x2
#define _I2C1CNTH_I2C1CNT10_SIZE                            0x1
#define _I2C1CNTH_I2C1CNT10_LENGTH                          0x1
#define _I2C1CNTH_I2C1CNT10_MASK                            0x4
#define _I2C1CNTH_I2C1CNT11_POSN                            0x3
#define _I2C1CNTH_I2C1CNT11_POSITION                        0x3
#define _I2C1CNTH_I2C1CNT11_SIZE                            0x1
#define _I2C1CNTH_I2C1CNT11_LENGTH                          0x1
#define _I2C1CNTH_I2C1CNT11_MASK                            0x8
#define _I2C1CNTH_I2C1CNT12_POSN                            0x4
#define _I2C1CNTH_I2C1CNT12_POSITION                        0x4
#define _I2C1CNTH_I2C1CNT12_SIZE                            0x1
#define _I2C1CNTH_I2C1CNT12_LENGTH                          0x1
#define _I2C1CNTH_I2C1CNT12_MASK                            0x10
#define _I2C1CNTH_I2C1CNT13_POSN                            0x5
#define _I2C1CNTH_I2C1CNT13_POSITION                        0x5
#define _I2C1CNTH_I2C1CNT13_SIZE                            0x1
#define _I2C1CNTH_I2C1CNT13_LENGTH                          0x1
#define _I2C1CNTH_I2C1CNT13_MASK                            0x20
#define _I2C1CNTH_I2C1CNT14_POSN                            0x6
#define _I2C1CNTH_I2C1CNT14_POSITION                        0x6
#define _I2C1CNTH_I2C1CNT14_SIZE                            0x1
#define _I2C1CNTH_I2C1CNT14_LENGTH                          0x1
#define _I2C1CNTH_I2C1CNT14_MASK                            0x40
#define _I2C1CNTH_I2C1CNT15_POSN                            0x7
#define _I2C1CNTH_I2C1CNT15_POSITION                        0x7
#define _I2C1CNTH_I2C1CNT15_SIZE                            0x1
#define _I2C1CNTH_I2C1CNT15_LENGTH                          0x1
#define _I2C1CNTH_I2C1CNT15_MASK                            0x80

// Register: I2C1RXB
#define I2C1RXB I2C1RXB
extern volatile unsigned char           I2C1RXB             __at(0x1EF);
#ifndef _LIB_BUILD
asm("I2C1RXB equ 01EFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RXB                    :8;
    };
} I2C1RXBbits_t;
extern volatile I2C1RXBbits_t I2C1RXBbits __at(0x1EF);
// bitfield macros
#define _I2C1RXB_RXB_POSN                                   0x0
#define _I2C1RXB_RXB_POSITION                               0x0
#define _I2C1RXB_RXB_SIZE                                   0x8
#define _I2C1RXB_RXB_LENGTH                                 0x8
#define _I2C1RXB_RXB_MASK                                   0xFF

// Register: I2C1TXB
#define I2C1TXB I2C1TXB
extern volatile unsigned char           I2C1TXB             __at(0x1F0);
#ifndef _LIB_BUILD
asm("I2C1TXB equ 01F0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TXB                    :8;
    };
} I2C1TXBbits_t;
extern volatile I2C1TXBbits_t I2C1TXBbits __at(0x1F0);
// bitfield macros
#define _I2C1TXB_TXB_POSN                                   0x0
#define _I2C1TXB_TXB_POSITION                               0x0
#define _I2C1TXB_TXB_SIZE                                   0x8
#define _I2C1TXB_TXB_LENGTH                                 0x8
#define _I2C1TXB_TXB_MASK                                   0xFF

// Register: I2C1ADB0
#define I2C1ADB0 I2C1ADB0
extern volatile unsigned char           I2C1ADB0            __at(0x1F1);
#ifndef _LIB_BUILD
asm("I2C1ADB0 equ 01F1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADB                    :8;
    };
} I2C1ADB0bits_t;
extern volatile I2C1ADB0bits_t I2C1ADB0bits __at(0x1F1);
// bitfield macros
#define _I2C1ADB0_ADB_POSN                                  0x0
#define _I2C1ADB0_ADB_POSITION                              0x0
#define _I2C1ADB0_ADB_SIZE                                  0x8
#define _I2C1ADB0_ADB_LENGTH                                0x8
#define _I2C1ADB0_ADB_MASK                                  0xFF

// Register: I2C1ADB1
#define I2C1ADB1 I2C1ADB1
extern volatile unsigned char           I2C1ADB1            __at(0x1F2);
#ifndef _LIB_BUILD
asm("I2C1ADB1 equ 01F2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADB                    :8;
    };
} I2C1ADB1bits_t;
extern volatile I2C1ADB1bits_t I2C1ADB1bits __at(0x1F2);
// bitfield macros
#define _I2C1ADB1_ADB_POSN                                  0x0
#define _I2C1ADB1_ADB_POSITION                              0x0
#define _I2C1ADB1_ADB_SIZE                                  0x8
#define _I2C1ADB1_ADB_LENGTH                                0x8
#define _I2C1ADB1_ADB_MASK                                  0xFF

// Register: I2C1ADR0
#define I2C1ADR0 I2C1ADR0
extern volatile unsigned char           I2C1ADR0            __at(0x1F3);
#ifndef _LIB_BUILD
asm("I2C1ADR0 equ 01F3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADR                    :8;
    };
} I2C1ADR0bits_t;
extern volatile I2C1ADR0bits_t I2C1ADR0bits __at(0x1F3);
// bitfield macros
#define _I2C1ADR0_ADR_POSN                                  0x0
#define _I2C1ADR0_ADR_POSITION                              0x0
#define _I2C1ADR0_ADR_SIZE                                  0x8
#define _I2C1ADR0_ADR_LENGTH                                0x8
#define _I2C1ADR0_ADR_MASK                                  0xFF

// Register: I2C1ADR1
#define I2C1ADR1 I2C1ADR1
extern volatile unsigned char           I2C1ADR1            __at(0x1F4);
#ifndef _LIB_BUILD
asm("I2C1ADR1 equ 01F4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned ADR                    :7;
    };
} I2C1ADR1bits_t;
extern volatile I2C1ADR1bits_t I2C1ADR1bits __at(0x1F4);
// bitfield macros
#define _I2C1ADR1_ADR_POSN                                  0x1
#define _I2C1ADR1_ADR_POSITION                              0x1
#define _I2C1ADR1_ADR_SIZE                                  0x7
#define _I2C1ADR1_ADR_LENGTH                                0x7
#define _I2C1ADR1_ADR_MASK                                  0xFE

// Register: I2C1ADR2
#define I2C1ADR2 I2C1ADR2
extern volatile unsigned char           I2C1ADR2            __at(0x1F5);
#ifndef _LIB_BUILD
asm("I2C1ADR2 equ 01F5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADR                    :8;
    };
} I2C1ADR2bits_t;
extern volatile I2C1ADR2bits_t I2C1ADR2bits __at(0x1F5);
// bitfield macros
#define _I2C1ADR2_ADR_POSN                                  0x0
#define _I2C1ADR2_ADR_POSITION                              0x0
#define _I2C1ADR2_ADR_SIZE                                  0x8
#define _I2C1ADR2_ADR_LENGTH                                0x8
#define _I2C1ADR2_ADR_MASK                                  0xFF

// Register: I2C1ADR3
#define I2C1ADR3 I2C1ADR3
extern volatile unsigned char           I2C1ADR3            __at(0x1F6);
#ifndef _LIB_BUILD
asm("I2C1ADR3 equ 01F6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned ADR                    :7;
    };
} I2C1ADR3bits_t;
extern volatile I2C1ADR3bits_t I2C1ADR3bits __at(0x1F6);
// bitfield macros
#define _I2C1ADR3_ADR_POSN                                  0x1
#define _I2C1ADR3_ADR_POSITION                              0x1
#define _I2C1ADR3_ADR_SIZE                                  0x7
#define _I2C1ADR3_ADR_LENGTH                                0x7
#define _I2C1ADR3_ADR_MASK                                  0xFE

// Register: I2C1BTO
#define I2C1BTO I2C1BTO
extern volatile unsigned char           I2C1BTO             __at(0x1F7);
#ifndef _LIB_BUILD
asm("I2C1BTO equ 01F7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOTIME                 :6;
        unsigned TOBY32                 :1;
        unsigned TOREC                  :1;
    };
    struct {
        unsigned TOTIME0                :1;
        unsigned TOTIME1                :1;
        unsigned TOTIME2                :1;
        unsigned TOTIME3                :1;
        unsigned TOTIME4                :1;
        unsigned TOTIME5                :1;
    };
} I2C1BTObits_t;
extern volatile I2C1BTObits_t I2C1BTObits __at(0x1F7);
// bitfield macros
#define _I2C1BTO_TOTIME_POSN                                0x0
#define _I2C1BTO_TOTIME_POSITION                            0x0
#define _I2C1BTO_TOTIME_SIZE                                0x6
#define _I2C1BTO_TOTIME_LENGTH                              0x6
#define _I2C1BTO_TOTIME_MASK                                0x3F
#define _I2C1BTO_TOBY32_POSN                                0x6
#define _I2C1BTO_TOBY32_POSITION                            0x6
#define _I2C1BTO_TOBY32_SIZE                                0x1
#define _I2C1BTO_TOBY32_LENGTH                              0x1
#define _I2C1BTO_TOBY32_MASK                                0x40
#define _I2C1BTO_TOREC_POSN                                 0x7
#define _I2C1BTO_TOREC_POSITION                             0x7
#define _I2C1BTO_TOREC_SIZE                                 0x1
#define _I2C1BTO_TOREC_LENGTH                               0x1
#define _I2C1BTO_TOREC_MASK                                 0x80
#define _I2C1BTO_TOTIME0_POSN                               0x0
#define _I2C1BTO_TOTIME0_POSITION                           0x0
#define _I2C1BTO_TOTIME0_SIZE                               0x1
#define _I2C1BTO_TOTIME0_LENGTH                             0x1
#define _I2C1BTO_TOTIME0_MASK                               0x1
#define _I2C1BTO_TOTIME1_POSN                               0x1
#define _I2C1BTO_TOTIME1_POSITION                           0x1
#define _I2C1BTO_TOTIME1_SIZE                               0x1
#define _I2C1BTO_TOTIME1_LENGTH                             0x1
#define _I2C1BTO_TOTIME1_MASK                               0x2
#define _I2C1BTO_TOTIME2_POSN                               0x2
#define _I2C1BTO_TOTIME2_POSITION                           0x2
#define _I2C1BTO_TOTIME2_SIZE                               0x1
#define _I2C1BTO_TOTIME2_LENGTH                             0x1
#define _I2C1BTO_TOTIME2_MASK                               0x4
#define _I2C1BTO_TOTIME3_POSN                               0x3
#define _I2C1BTO_TOTIME3_POSITION                           0x3
#define _I2C1BTO_TOTIME3_SIZE                               0x1
#define _I2C1BTO_TOTIME3_LENGTH                             0x1
#define _I2C1BTO_TOTIME3_MASK                               0x8
#define _I2C1BTO_TOTIME4_POSN                               0x4
#define _I2C1BTO_TOTIME4_POSITION                           0x4
#define _I2C1BTO_TOTIME4_SIZE                               0x1
#define _I2C1BTO_TOTIME4_LENGTH                             0x1
#define _I2C1BTO_TOTIME4_MASK                               0x10
#define _I2C1BTO_TOTIME5_POSN                               0x5
#define _I2C1BTO_TOTIME5_POSITION                           0x5
#define _I2C1BTO_TOTIME5_SIZE                               0x1
#define _I2C1BTO_TOTIME5_LENGTH                             0x1
#define _I2C1BTO_TOTIME5_MASK                               0x20

// Register: I2C1BAUD
#define I2C1BAUD I2C1BAUD
extern volatile unsigned char           I2C1BAUD            __at(0x1F8);
#ifndef _LIB_BUILD
asm("I2C1BAUD equ 01F8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BAUD                   :8;
    };
} I2C1BAUDbits_t;
extern volatile I2C1BAUDbits_t I2C1BAUDbits __at(0x1F8);
// bitfield macros
#define _I2C1BAUD_BAUD_POSN                                 0x0
#define _I2C1BAUD_BAUD_POSITION                             0x0
#define _I2C1BAUD_BAUD_SIZE                                 0x8
#define _I2C1BAUD_BAUD_LENGTH                               0x8
#define _I2C1BAUD_BAUD_MASK                                 0xFF

// Register: I2C1CLK
#define I2C1CLK I2C1CLK
extern volatile unsigned char           I2C1CLK             __at(0x1F9);
#ifndef _LIB_BUILD
asm("I2C1CLK equ 01F9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLK                    :8;
    };
    struct {
        unsigned I2CCLK                 :8;
    };
    struct {
        unsigned CLK0                   :1;
        unsigned CLK1                   :1;
        unsigned CLK2                   :1;
        unsigned CLK3                   :1;
    };
    struct {
        unsigned I2CCLK0                :1;
        unsigned I2CCLK1                :1;
        unsigned I2CCLK2                :1;
        unsigned I2CCLK3                :1;
    };
} I2C1CLKbits_t;
extern volatile I2C1CLKbits_t I2C1CLKbits __at(0x1F9);
// bitfield macros
#define _I2C1CLK_CLK_POSN                                   0x0
#define _I2C1CLK_CLK_POSITION                               0x0
#define _I2C1CLK_CLK_SIZE                                   0x8
#define _I2C1CLK_CLK_LENGTH                                 0x8
#define _I2C1CLK_CLK_MASK                                   0xFF
#define _I2C1CLK_I2CCLK_POSN                                0x0
#define _I2C1CLK_I2CCLK_POSITION                            0x0
#define _I2C1CLK_I2CCLK_SIZE                                0x8
#define _I2C1CLK_I2CCLK_LENGTH                              0x8
#define _I2C1CLK_I2CCLK_MASK                                0xFF
#define _I2C1CLK_CLK0_POSN                                  0x0
#define _I2C1CLK_CLK0_POSITION                              0x0
#define _I2C1CLK_CLK0_SIZE                                  0x1
#define _I2C1CLK_CLK0_LENGTH                                0x1
#define _I2C1CLK_CLK0_MASK                                  0x1
#define _I2C1CLK_CLK1_POSN                                  0x1
#define _I2C1CLK_CLK1_POSITION                              0x1
#define _I2C1CLK_CLK1_SIZE                                  0x1
#define _I2C1CLK_CLK1_LENGTH                                0x1
#define _I2C1CLK_CLK1_MASK                                  0x2
#define _I2C1CLK_CLK2_POSN                                  0x2
#define _I2C1CLK_CLK2_POSITION                              0x2
#define _I2C1CLK_CLK2_SIZE                                  0x1
#define _I2C1CLK_CLK2_LENGTH                                0x1
#define _I2C1CLK_CLK2_MASK                                  0x4
#define _I2C1CLK_CLK3_POSN                                  0x3
#define _I2C1CLK_CLK3_POSITION                              0x3
#define _I2C1CLK_CLK3_SIZE                                  0x1
#define _I2C1CLK_CLK3_LENGTH                                0x1
#define _I2C1CLK_CLK3_MASK                                  0x8
#define _I2C1CLK_I2CCLK0_POSN                               0x0
#define _I2C1CLK_I2CCLK0_POSITION                           0x0
#define _I2C1CLK_I2CCLK0_SIZE                               0x1
#define _I2C1CLK_I2CCLK0_LENGTH                             0x1
#define _I2C1CLK_I2CCLK0_MASK                               0x1
#define _I2C1CLK_I2CCLK1_POSN                               0x1
#define _I2C1CLK_I2CCLK1_POSITION                           0x1
#define _I2C1CLK_I2CCLK1_SIZE                               0x1
#define _I2C1CLK_I2CCLK1_LENGTH                             0x1
#define _I2C1CLK_I2CCLK1_MASK                               0x2
#define _I2C1CLK_I2CCLK2_POSN                               0x2
#define _I2C1CLK_I2CCLK2_POSITION                           0x2
#define _I2C1CLK_I2CCLK2_SIZE                               0x1
#define _I2C1CLK_I2CCLK2_LENGTH                             0x1
#define _I2C1CLK_I2CCLK2_MASK                               0x4
#define _I2C1CLK_I2CCLK3_POSN                               0x3
#define _I2C1CLK_I2CCLK3_POSITION                           0x3
#define _I2C1CLK_I2CCLK3_SIZE                               0x1
#define _I2C1CLK_I2CCLK3_LENGTH                             0x1
#define _I2C1CLK_I2CCLK3_MASK                               0x8

// Register: I2C1BTOC
#define I2C1BTOC I2C1BTOC
extern volatile unsigned char           I2C1BTOC            __at(0x1FA);
#ifndef _LIB_BUILD
asm("I2C1BTOC equ 01FAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned BTOC                   :8;
    };
    struct {
        unsigned I2CBTOC                :8;
    };
    struct {
        unsigned BTOC0                  :1;
        unsigned BTOC1                  :1;
        unsigned BTOC2                  :1;
    };
    struct {
        unsigned I2CBTOC0               :1;
        unsigned I2CBTOC1               :1;
        unsigned I2CBTOC2               :1;
    };
} I2C1BTOCbits_t;
extern volatile I2C1BTOCbits_t I2C1BTOCbits __at(0x1FA);
// bitfield macros
#define _I2C1BTOC_BTOC_POSN                                 0x0
#define _I2C1BTOC_BTOC_POSITION                             0x0
#define _I2C1BTOC_BTOC_SIZE                                 0x8
#define _I2C1BTOC_BTOC_LENGTH                               0x8
#define _I2C1BTOC_BTOC_MASK                                 0xFF
#define _I2C1BTOC_I2CBTOC_POSN                              0x0
#define _I2C1BTOC_I2CBTOC_POSITION                          0x0
#define _I2C1BTOC_I2CBTOC_SIZE                              0x8
#define _I2C1BTOC_I2CBTOC_LENGTH                            0x8
#define _I2C1BTOC_I2CBTOC_MASK                              0xFF
#define _I2C1BTOC_BTOC0_POSN                                0x0
#define _I2C1BTOC_BTOC0_POSITION                            0x0
#define _I2C1BTOC_BTOC0_SIZE                                0x1
#define _I2C1BTOC_BTOC0_LENGTH                              0x1
#define _I2C1BTOC_BTOC0_MASK                                0x1
#define _I2C1BTOC_BTOC1_POSN                                0x1
#define _I2C1BTOC_BTOC1_POSITION                            0x1
#define _I2C1BTOC_BTOC1_SIZE                                0x1
#define _I2C1BTOC_BTOC1_LENGTH                              0x1
#define _I2C1BTOC_BTOC1_MASK                                0x2
#define _I2C1BTOC_BTOC2_POSN                                0x2
#define _I2C1BTOC_BTOC2_POSITION                            0x2
#define _I2C1BTOC_BTOC2_SIZE                                0x1
#define _I2C1BTOC_BTOC2_LENGTH                              0x1
#define _I2C1BTOC_BTOC2_MASK                                0x4
#define _I2C1BTOC_I2CBTOC0_POSN                             0x0
#define _I2C1BTOC_I2CBTOC0_POSITION                         0x0
#define _I2C1BTOC_I2CBTOC0_SIZE                             0x1
#define _I2C1BTOC_I2CBTOC0_LENGTH                           0x1
#define _I2C1BTOC_I2CBTOC0_MASK                             0x1
#define _I2C1BTOC_I2CBTOC1_POSN                             0x1
#define _I2C1BTOC_I2CBTOC1_POSITION                         0x1
#define _I2C1BTOC_I2CBTOC1_SIZE                             0x1
#define _I2C1BTOC_I2CBTOC1_LENGTH                           0x1
#define _I2C1BTOC_I2CBTOC1_MASK                             0x2
#define _I2C1BTOC_I2CBTOC2_POSN                             0x2
#define _I2C1BTOC_I2CBTOC2_POSITION                         0x2
#define _I2C1BTOC_I2CBTOC2_SIZE                             0x1
#define _I2C1BTOC_I2CBTOC2_LENGTH                           0x1
#define _I2C1BTOC_I2CBTOC2_MASK                             0x4

// Register: FVRCON
#define FVRCON FVRCON
extern volatile unsigned char           FVRCON              __at(0x201);
#ifndef _LIB_BUILD
asm("FVRCON equ 0201h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADFVR                  :2;
        unsigned                        :2;
        unsigned TSRNG                  :1;
        unsigned TSEN                   :1;
        unsigned RDY                    :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned ADFVR0                 :1;
        unsigned ADFVR1                 :1;
        unsigned                        :4;
        unsigned FVRRDY                 :1;
        unsigned FVREN                  :1;
    };
} FVRCONbits_t;
extern volatile FVRCONbits_t FVRCONbits __at(0x201);
// bitfield macros
#define _FVRCON_ADFVR_POSN                                  0x0
#define _FVRCON_ADFVR_POSITION                              0x0
#define _FVRCON_ADFVR_SIZE                                  0x2
#define _FVRCON_ADFVR_LENGTH                                0x2
#define _FVRCON_ADFVR_MASK                                  0x3
#define _FVRCON_TSRNG_POSN                                  0x4
#define _FVRCON_TSRNG_POSITION                              0x4
#define _FVRCON_TSRNG_SIZE                                  0x1
#define _FVRCON_TSRNG_LENGTH                                0x1
#define _FVRCON_TSRNG_MASK                                  0x10
#define _FVRCON_TSEN_POSN                                   0x5
#define _FVRCON_TSEN_POSITION                               0x5
#define _FVRCON_TSEN_SIZE                                   0x1
#define _FVRCON_TSEN_LENGTH                                 0x1
#define _FVRCON_TSEN_MASK                                   0x20
#define _FVRCON_RDY_POSN                                    0x6
#define _FVRCON_RDY_POSITION                                0x6
#define _FVRCON_RDY_SIZE                                    0x1
#define _FVRCON_RDY_LENGTH                                  0x1
#define _FVRCON_RDY_MASK                                    0x40
#define _FVRCON_EN_POSN                                     0x7
#define _FVRCON_EN_POSITION                                 0x7
#define _FVRCON_EN_SIZE                                     0x1
#define _FVRCON_EN_LENGTH                                   0x1
#define _FVRCON_EN_MASK                                     0x80
#define _FVRCON_ADFVR0_POSN                                 0x0
#define _FVRCON_ADFVR0_POSITION                             0x0
#define _FVRCON_ADFVR0_SIZE                                 0x1
#define _FVRCON_ADFVR0_LENGTH                               0x1
#define _FVRCON_ADFVR0_MASK                                 0x1
#define _FVRCON_ADFVR1_POSN                                 0x1
#define _FVRCON_ADFVR1_POSITION                             0x1
#define _FVRCON_ADFVR1_SIZE                                 0x1
#define _FVRCON_ADFVR1_LENGTH                               0x1
#define _FVRCON_ADFVR1_MASK                                 0x2
#define _FVRCON_FVRRDY_POSN                                 0x6
#define _FVRCON_FVRRDY_POSITION                             0x6
#define _FVRCON_FVRRDY_SIZE                                 0x1
#define _FVRCON_FVRRDY_LENGTH                               0x1
#define _FVRCON_FVRRDY_MASK                                 0x40
#define _FVRCON_FVREN_POSN                                  0x7
#define _FVRCON_FVREN_POSITION                              0x7
#define _FVRCON_FVREN_SIZE                                  0x1
#define _FVRCON_FVREN_LENGTH                                0x1
#define _FVRCON_FVREN_MASK                                  0x80

// Register: HLVDCON0
#define HLVDCON0 HLVDCON0
extern volatile unsigned char           HLVDCON0            __at(0x202);
#ifndef _LIB_BUILD
asm("HLVDCON0 equ 0202h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INTL                   :1;
        unsigned INTH                   :1;
        unsigned                        :2;
        unsigned RDY                    :1;
        unsigned OUT                    :1;
        unsigned                        :1;
        unsigned EN                     :1;
    };
    struct {
        unsigned HLVDINTL               :1;
        unsigned HLVDINTH               :1;
        unsigned                        :2;
        unsigned HLVDRDY                :1;
        unsigned HLVDOUT                :1;
        unsigned                        :1;
        unsigned HLVDEN                 :1;
    };
} HLVDCON0bits_t;
extern volatile HLVDCON0bits_t HLVDCON0bits __at(0x202);
// bitfield macros
#define _HLVDCON0_INTL_POSN                                 0x0
#define _HLVDCON0_INTL_POSITION                             0x0
#define _HLVDCON0_INTL_SIZE                                 0x1
#define _HLVDCON0_INTL_LENGTH                               0x1
#define _HLVDCON0_INTL_MASK                                 0x1
#define _HLVDCON0_INTH_POSN                                 0x1
#define _HLVDCON0_INTH_POSITION                             0x1
#define _HLVDCON0_INTH_SIZE                                 0x1
#define _HLVDCON0_INTH_LENGTH                               0x1
#define _HLVDCON0_INTH_MASK                                 0x2
#define _HLVDCON0_RDY_POSN                                  0x4
#define _HLVDCON0_RDY_POSITION                              0x4
#define _HLVDCON0_RDY_SIZE                                  0x1
#define _HLVDCON0_RDY_LENGTH                                0x1
#define _HLVDCON0_RDY_MASK                                  0x10
#define _HLVDCON0_OUT_POSN                                  0x5
#define _HLVDCON0_OUT_POSITION                              0x5
#define _HLVDCON0_OUT_SIZE                                  0x1
#define _HLVDCON0_OUT_LENGTH                                0x1
#define _HLVDCON0_OUT_MASK                                  0x20
#define _HLVDCON0_EN_POSN                                   0x7
#define _HLVDCON0_EN_POSITION                               0x7
#define _HLVDCON0_EN_SIZE                                   0x1
#define _HLVDCON0_EN_LENGTH                                 0x1
#define _HLVDCON0_EN_MASK                                   0x80
#define _HLVDCON0_HLVDINTL_POSN                             0x0
#define _HLVDCON0_HLVDINTL_POSITION                         0x0
#define _HLVDCON0_HLVDINTL_SIZE                             0x1
#define _HLVDCON0_HLVDINTL_LENGTH                           0x1
#define _HLVDCON0_HLVDINTL_MASK                             0x1
#define _HLVDCON0_HLVDINTH_POSN                             0x1
#define _HLVDCON0_HLVDINTH_POSITION                         0x1
#define _HLVDCON0_HLVDINTH_SIZE                             0x1
#define _HLVDCON0_HLVDINTH_LENGTH                           0x1
#define _HLVDCON0_HLVDINTH_MASK                             0x2
#define _HLVDCON0_HLVDRDY_POSN                              0x4
#define _HLVDCON0_HLVDRDY_POSITION                          0x4
#define _HLVDCON0_HLVDRDY_SIZE                              0x1
#define _HLVDCON0_HLVDRDY_LENGTH                            0x1
#define _HLVDCON0_HLVDRDY_MASK                              0x10
#define _HLVDCON0_HLVDOUT_POSN                              0x5
#define _HLVDCON0_HLVDOUT_POSITION                          0x5
#define _HLVDCON0_HLVDOUT_SIZE                              0x1
#define _HLVDCON0_HLVDOUT_LENGTH                            0x1
#define _HLVDCON0_HLVDOUT_MASK                              0x20
#define _HLVDCON0_HLVDEN_POSN                               0x7
#define _HLVDCON0_HLVDEN_POSITION                           0x7
#define _HLVDCON0_HLVDEN_SIZE                               0x1
#define _HLVDCON0_HLVDEN_LENGTH                             0x1
#define _HLVDCON0_HLVDEN_MASK                               0x80

// Register: HLVDCON1
#define HLVDCON1 HLVDCON1
extern volatile unsigned char           HLVDCON1            __at(0x203);
#ifndef _LIB_BUILD
asm("HLVDCON1 equ 0203h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SEL                    :4;
    };
    struct {
        unsigned SEL0                   :1;
        unsigned SEL1                   :1;
        unsigned SEL2                   :1;
        unsigned SEL3                   :1;
    };
    struct {
        unsigned HLVDSEL0               :1;
        unsigned HLVDSEL1               :1;
        unsigned HLVDSEL2               :1;
        unsigned HLVDSEL3               :1;
    };
} HLVDCON1bits_t;
extern volatile HLVDCON1bits_t HLVDCON1bits __at(0x203);
// bitfield macros
#define _HLVDCON1_SEL_POSN                                  0x0
#define _HLVDCON1_SEL_POSITION                              0x0
#define _HLVDCON1_SEL_SIZE                                  0x4
#define _HLVDCON1_SEL_LENGTH                                0x4
#define _HLVDCON1_SEL_MASK                                  0xF
#define _HLVDCON1_SEL0_POSN                                 0x0
#define _HLVDCON1_SEL0_POSITION                             0x0
#define _HLVDCON1_SEL0_SIZE                                 0x1
#define _HLVDCON1_SEL0_LENGTH                               0x1
#define _HLVDCON1_SEL0_MASK                                 0x1
#define _HLVDCON1_SEL1_POSN                                 0x1
#define _HLVDCON1_SEL1_POSITION                             0x1
#define _HLVDCON1_SEL1_SIZE                                 0x1
#define _HLVDCON1_SEL1_LENGTH                               0x1
#define _HLVDCON1_SEL1_MASK                                 0x2
#define _HLVDCON1_SEL2_POSN                                 0x2
#define _HLVDCON1_SEL2_POSITION                             0x2
#define _HLVDCON1_SEL2_SIZE                                 0x1
#define _HLVDCON1_SEL2_LENGTH                               0x1
#define _HLVDCON1_SEL2_MASK                                 0x4
#define _HLVDCON1_SEL3_POSN                                 0x3
#define _HLVDCON1_SEL3_POSITION                             0x3
#define _HLVDCON1_SEL3_SIZE                                 0x1
#define _HLVDCON1_SEL3_LENGTH                               0x1
#define _HLVDCON1_SEL3_MASK                                 0x8
#define _HLVDCON1_HLVDSEL0_POSN                             0x0
#define _HLVDCON1_HLVDSEL0_POSITION                         0x0
#define _HLVDCON1_HLVDSEL0_SIZE                             0x1
#define _HLVDCON1_HLVDSEL0_LENGTH                           0x1
#define _HLVDCON1_HLVDSEL0_MASK                             0x1
#define _HLVDCON1_HLVDSEL1_POSN                             0x1
#define _HLVDCON1_HLVDSEL1_POSITION                         0x1
#define _HLVDCON1_HLVDSEL1_SIZE                             0x1
#define _HLVDCON1_HLVDSEL1_LENGTH                           0x1
#define _HLVDCON1_HLVDSEL1_MASK                             0x2
#define _HLVDCON1_HLVDSEL2_POSN                             0x2
#define _HLVDCON1_HLVDSEL2_POSITION                         0x2
#define _HLVDCON1_HLVDSEL2_SIZE                             0x1
#define _HLVDCON1_HLVDSEL2_LENGTH                           0x1
#define _HLVDCON1_HLVDSEL2_MASK                             0x4
#define _HLVDCON1_HLVDSEL3_POSN                             0x3
#define _HLVDCON1_HLVDSEL3_POSITION                         0x3
#define _HLVDCON1_HLVDSEL3_SIZE                             0x1
#define _HLVDCON1_HLVDSEL3_LENGTH                           0x1
#define _HLVDCON1_HLVDSEL3_MASK                             0x8

// Register: ADLTH
#define ADLTH ADLTH
extern volatile unsigned short          ADLTH               __at(0x215);
#ifndef _LIB_BUILD
asm("ADLTH equ 0215h");
#endif

// Register: ADLTHL
#define ADLTHL ADLTHL
extern volatile unsigned char           ADLTHL              __at(0x215);
#ifndef _LIB_BUILD
asm("ADLTHL equ 0215h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LTH                    :8;
    };
    struct {
        unsigned ADLTH0                 :1;
        unsigned ADLTH1                 :1;
        unsigned ADLTH2                 :1;
        unsigned ADLTH3                 :1;
        unsigned ADLTH4                 :1;
        unsigned ADLTH5                 :1;
        unsigned ADLTH6                 :1;
        unsigned ADLTH7                 :1;
    };
    struct {
        unsigned ADLTH                  :8;
    };
    struct {
        unsigned LTH0                   :1;
        unsigned LTH1                   :1;
        unsigned LTH2                   :1;
        unsigned LTH3                   :1;
        unsigned LTH4                   :1;
        unsigned LTH5                   :1;
        unsigned LTH6                   :1;
        unsigned LTH7                   :1;
    };
} ADLTHLbits_t;
extern volatile ADLTHLbits_t ADLTHLbits __at(0x215);
// bitfield macros
#define _ADLTHL_LTH_POSN                                    0x0
#define _ADLTHL_LTH_POSITION                                0x0
#define _ADLTHL_LTH_SIZE                                    0x8
#define _ADLTHL_LTH_LENGTH                                  0x8
#define _ADLTHL_LTH_MASK                                    0xFF
#define _ADLTHL_ADLTH0_POSN                                 0x0
#define _ADLTHL_ADLTH0_POSITION                             0x0
#define _ADLTHL_ADLTH0_SIZE                                 0x1
#define _ADLTHL_ADLTH0_LENGTH                               0x1
#define _ADLTHL_ADLTH0_MASK                                 0x1
#define _ADLTHL_ADLTH1_POSN                                 0x1
#define _ADLTHL_ADLTH1_POSITION                             0x1
#define _ADLTHL_ADLTH1_SIZE                                 0x1
#define _ADLTHL_ADLTH1_LENGTH                               0x1
#define _ADLTHL_ADLTH1_MASK                                 0x2
#define _ADLTHL_ADLTH2_POSN                                 0x2
#define _ADLTHL_ADLTH2_POSITION                             0x2
#define _ADLTHL_ADLTH2_SIZE                                 0x1
#define _ADLTHL_ADLTH2_LENGTH                               0x1
#define _ADLTHL_ADLTH2_MASK                                 0x4
#define _ADLTHL_ADLTH3_POSN                                 0x3
#define _ADLTHL_ADLTH3_POSITION                             0x3
#define _ADLTHL_ADLTH3_SIZE                                 0x1
#define _ADLTHL_ADLTH3_LENGTH                               0x1
#define _ADLTHL_ADLTH3_MASK                                 0x8
#define _ADLTHL_ADLTH4_POSN                                 0x4
#define _ADLTHL_ADLTH4_POSITION                             0x4
#define _ADLTHL_ADLTH4_SIZE                                 0x1
#define _ADLTHL_ADLTH4_LENGTH                               0x1
#define _ADLTHL_ADLTH4_MASK                                 0x10
#define _ADLTHL_ADLTH5_POSN                                 0x5
#define _ADLTHL_ADLTH5_POSITION                             0x5
#define _ADLTHL_ADLTH5_SIZE                                 0x1
#define _ADLTHL_ADLTH5_LENGTH                               0x1
#define _ADLTHL_ADLTH5_MASK                                 0x20
#define _ADLTHL_ADLTH6_POSN                                 0x6
#define _ADLTHL_ADLTH6_POSITION                             0x6
#define _ADLTHL_ADLTH6_SIZE                                 0x1
#define _ADLTHL_ADLTH6_LENGTH                               0x1
#define _ADLTHL_ADLTH6_MASK                                 0x40
#define _ADLTHL_ADLTH7_POSN                                 0x7
#define _ADLTHL_ADLTH7_POSITION                             0x7
#define _ADLTHL_ADLTH7_SIZE                                 0x1
#define _ADLTHL_ADLTH7_LENGTH                               0x1
#define _ADLTHL_ADLTH7_MASK                                 0x80
#define _ADLTHL_ADLTH_POSN                                  0x0
#define _ADLTHL_ADLTH_POSITION                              0x0
#define _ADLTHL_ADLTH_SIZE                                  0x8
#define _ADLTHL_ADLTH_LENGTH                                0x8
#define _ADLTHL_ADLTH_MASK                                  0xFF
#define _ADLTHL_LTH0_POSN                                   0x0
#define _ADLTHL_LTH0_POSITION                               0x0
#define _ADLTHL_LTH0_SIZE                                   0x1
#define _ADLTHL_LTH0_LENGTH                                 0x1
#define _ADLTHL_LTH0_MASK                                   0x1
#define _ADLTHL_LTH1_POSN                                   0x1
#define _ADLTHL_LTH1_POSITION                               0x1
#define _ADLTHL_LTH1_SIZE                                   0x1
#define _ADLTHL_LTH1_LENGTH                                 0x1
#define _ADLTHL_LTH1_MASK                                   0x2
#define _ADLTHL_LTH2_POSN                                   0x2
#define _ADLTHL_LTH2_POSITION                               0x2
#define _ADLTHL_LTH2_SIZE                                   0x1
#define _ADLTHL_LTH2_LENGTH                                 0x1
#define _ADLTHL_LTH2_MASK                                   0x4
#define _ADLTHL_LTH3_POSN                                   0x3
#define _ADLTHL_LTH3_POSITION                               0x3
#define _ADLTHL_LTH3_SIZE                                   0x1
#define _ADLTHL_LTH3_LENGTH                                 0x1
#define _ADLTHL_LTH3_MASK                                   0x8
#define _ADLTHL_LTH4_POSN                                   0x4
#define _ADLTHL_LTH4_POSITION                               0x4
#define _ADLTHL_LTH4_SIZE                                   0x1
#define _ADLTHL_LTH4_LENGTH                                 0x1
#define _ADLTHL_LTH4_MASK                                   0x10
#define _ADLTHL_LTH5_POSN                                   0x5
#define _ADLTHL_LTH5_POSITION                               0x5
#define _ADLTHL_LTH5_SIZE                                   0x1
#define _ADLTHL_LTH5_LENGTH                                 0x1
#define _ADLTHL_LTH5_MASK                                   0x20
#define _ADLTHL_LTH6_POSN                                   0x6
#define _ADLTHL_LTH6_POSITION                               0x6
#define _ADLTHL_LTH6_SIZE                                   0x1
#define _ADLTHL_LTH6_LENGTH                                 0x1
#define _ADLTHL_LTH6_MASK                                   0x40
#define _ADLTHL_LTH7_POSN                                   0x7
#define _ADLTHL_LTH7_POSITION                               0x7
#define _ADLTHL_LTH7_SIZE                                   0x1
#define _ADLTHL_LTH7_LENGTH                                 0x1
#define _ADLTHL_LTH7_MASK                                   0x80

// Register: ADLTHH
#define ADLTHH ADLTHH
extern volatile unsigned char           ADLTHH              __at(0x216);
#ifndef _LIB_BUILD
asm("ADLTHH equ 0216h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LTH                    :8;
    };
    struct {
        unsigned ADLTH8                 :1;
        unsigned ADLTH9                 :1;
        unsigned ADLTH10                :1;
        unsigned ADLTH11                :1;
        unsigned ADLTH12                :1;
        unsigned ADLTH13                :1;
        unsigned ADLTH14                :1;
        unsigned ADLTH15                :1;
    };
    struct {
        unsigned ADLTH                  :8;
    };
    struct {
        unsigned LTH8                   :1;
        unsigned LTH9                   :1;
        unsigned LTH10                  :1;
        unsigned LTH11                  :1;
        unsigned LTH12                  :1;
        unsigned LTH13                  :1;
        unsigned LTH14                  :1;
        unsigned LTH15                  :1;
    };
} ADLTHHbits_t;
extern volatile ADLTHHbits_t ADLTHHbits __at(0x216);
// bitfield macros
#define _ADLTHH_LTH_POSN                                    0x0
#define _ADLTHH_LTH_POSITION                                0x0
#define _ADLTHH_LTH_SIZE                                    0x8
#define _ADLTHH_LTH_LENGTH                                  0x8
#define _ADLTHH_LTH_MASK                                    0xFF
#define _ADLTHH_ADLTH8_POSN                                 0x0
#define _ADLTHH_ADLTH8_POSITION                             0x0
#define _ADLTHH_ADLTH8_SIZE                                 0x1
#define _ADLTHH_ADLTH8_LENGTH                               0x1
#define _ADLTHH_ADLTH8_MASK                                 0x1
#define _ADLTHH_ADLTH9_POSN                                 0x1
#define _ADLTHH_ADLTH9_POSITION                             0x1
#define _ADLTHH_ADLTH9_SIZE                                 0x1
#define _ADLTHH_ADLTH9_LENGTH                               0x1
#define _ADLTHH_ADLTH9_MASK                                 0x2
#define _ADLTHH_ADLTH10_POSN                                0x2
#define _ADLTHH_ADLTH10_POSITION                            0x2
#define _ADLTHH_ADLTH10_SIZE                                0x1
#define _ADLTHH_ADLTH10_LENGTH                              0x1
#define _ADLTHH_ADLTH10_MASK                                0x4
#define _ADLTHH_ADLTH11_POSN                                0x3
#define _ADLTHH_ADLTH11_POSITION                            0x3
#define _ADLTHH_ADLTH11_SIZE                                0x1
#define _ADLTHH_ADLTH11_LENGTH                              0x1
#define _ADLTHH_ADLTH11_MASK                                0x8
#define _ADLTHH_ADLTH12_POSN                                0x4
#define _ADLTHH_ADLTH12_POSITION                            0x4
#define _ADLTHH_ADLTH12_SIZE                                0x1
#define _ADLTHH_ADLTH12_LENGTH                              0x1
#define _ADLTHH_ADLTH12_MASK                                0x10
#define _ADLTHH_ADLTH13_POSN                                0x5
#define _ADLTHH_ADLTH13_POSITION                            0x5
#define _ADLTHH_ADLTH13_SIZE                                0x1
#define _ADLTHH_ADLTH13_LENGTH                              0x1
#define _ADLTHH_ADLTH13_MASK                                0x20
#define _ADLTHH_ADLTH14_POSN                                0x6
#define _ADLTHH_ADLTH14_POSITION                            0x6
#define _ADLTHH_ADLTH14_SIZE                                0x1
#define _ADLTHH_ADLTH14_LENGTH                              0x1
#define _ADLTHH_ADLTH14_MASK                                0x40
#define _ADLTHH_ADLTH15_POSN                                0x7
#define _ADLTHH_ADLTH15_POSITION                            0x7
#define _ADLTHH_ADLTH15_SIZE                                0x1
#define _ADLTHH_ADLTH15_LENGTH                              0x1
#define _ADLTHH_ADLTH15_MASK                                0x80
#define _ADLTHH_ADLTH_POSN                                  0x0
#define _ADLTHH_ADLTH_POSITION                              0x0
#define _ADLTHH_ADLTH_SIZE                                  0x8
#define _ADLTHH_ADLTH_LENGTH                                0x8
#define _ADLTHH_ADLTH_MASK                                  0xFF
#define _ADLTHH_LTH8_POSN                                   0x0
#define _ADLTHH_LTH8_POSITION                               0x0
#define _ADLTHH_LTH8_SIZE                                   0x1
#define _ADLTHH_LTH8_LENGTH                                 0x1
#define _ADLTHH_LTH8_MASK                                   0x1
#define _ADLTHH_LTH9_POSN                                   0x1
#define _ADLTHH_LTH9_POSITION                               0x1
#define _ADLTHH_LTH9_SIZE                                   0x1
#define _ADLTHH_LTH9_LENGTH                                 0x1
#define _ADLTHH_LTH9_MASK                                   0x2
#define _ADLTHH_LTH10_POSN                                  0x2
#define _ADLTHH_LTH10_POSITION                              0x2
#define _ADLTHH_LTH10_SIZE                                  0x1
#define _ADLTHH_LTH10_LENGTH                                0x1
#define _ADLTHH_LTH10_MASK                                  0x4
#define _ADLTHH_LTH11_POSN                                  0x3
#define _ADLTHH_LTH11_POSITION                              0x3
#define _ADLTHH_LTH11_SIZE                                  0x1
#define _ADLTHH_LTH11_LENGTH                                0x1
#define _ADLTHH_LTH11_MASK                                  0x8
#define _ADLTHH_LTH12_POSN                                  0x4
#define _ADLTHH_LTH12_POSITION                              0x4
#define _ADLTHH_LTH12_SIZE                                  0x1
#define _ADLTHH_LTH12_LENGTH                                0x1
#define _ADLTHH_LTH12_MASK                                  0x10
#define _ADLTHH_LTH13_POSN                                  0x5
#define _ADLTHH_LTH13_POSITION                              0x5
#define _ADLTHH_LTH13_SIZE                                  0x1
#define _ADLTHH_LTH13_LENGTH                                0x1
#define _ADLTHH_LTH13_MASK                                  0x20
#define _ADLTHH_LTH14_POSN                                  0x6
#define _ADLTHH_LTH14_POSITION                              0x6
#define _ADLTHH_LTH14_SIZE                                  0x1
#define _ADLTHH_LTH14_LENGTH                                0x1
#define _ADLTHH_LTH14_MASK                                  0x40
#define _ADLTHH_LTH15_POSN                                  0x7
#define _ADLTHH_LTH15_POSITION                              0x7
#define _ADLTHH_LTH15_SIZE                                  0x1
#define _ADLTHH_LTH15_LENGTH                                0x1
#define _ADLTHH_LTH15_MASK                                  0x80

// Register: ADUTH
#define ADUTH ADUTH
extern volatile unsigned short          ADUTH               __at(0x217);
#ifndef _LIB_BUILD
asm("ADUTH equ 0217h");
#endif

// Register: ADUTHL
#define ADUTHL ADUTHL
extern volatile unsigned char           ADUTHL              __at(0x217);
#ifndef _LIB_BUILD
asm("ADUTHL equ 0217h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned UTH                    :8;
    };
    struct {
        unsigned ADUTH0                 :1;
        unsigned ADUTH1                 :1;
        unsigned ADUTH2                 :1;
        unsigned ADUTH3                 :1;
        unsigned ADUTH4                 :1;
        unsigned ADUTH5                 :1;
        unsigned ADUTH6                 :1;
        unsigned ADUTH7                 :1;
    };
    struct {
        unsigned ADUTH                  :8;
    };
    struct {
        unsigned UTH0                   :1;
        unsigned UTH1                   :1;
        unsigned UTH2                   :1;
        unsigned UTH3                   :1;
        unsigned UTH4                   :1;
        unsigned UTH5                   :1;
        unsigned UTH6                   :1;
        unsigned UTH7                   :1;
    };
} ADUTHLbits_t;
extern volatile ADUTHLbits_t ADUTHLbits __at(0x217);
// bitfield macros
#define _ADUTHL_UTH_POSN                                    0x0
#define _ADUTHL_UTH_POSITION                                0x0
#define _ADUTHL_UTH_SIZE                                    0x8
#define _ADUTHL_UTH_LENGTH                                  0x8
#define _ADUTHL_UTH_MASK                                    0xFF
#define _ADUTHL_ADUTH0_POSN                                 0x0
#define _ADUTHL_ADUTH0_POSITION                             0x0
#define _ADUTHL_ADUTH0_SIZE                                 0x1
#define _ADUTHL_ADUTH0_LENGTH                               0x1
#define _ADUTHL_ADUTH0_MASK                                 0x1
#define _ADUTHL_ADUTH1_POSN                                 0x1
#define _ADUTHL_ADUTH1_POSITION                             0x1
#define _ADUTHL_ADUTH1_SIZE                                 0x1
#define _ADUTHL_ADUTH1_LENGTH                               0x1
#define _ADUTHL_ADUTH1_MASK                                 0x2
#define _ADUTHL_ADUTH2_POSN                                 0x2
#define _ADUTHL_ADUTH2_POSITION                             0x2
#define _ADUTHL_ADUTH2_SIZE                                 0x1
#define _ADUTHL_ADUTH2_LENGTH                               0x1
#define _ADUTHL_ADUTH2_MASK                                 0x4
#define _ADUTHL_ADUTH3_POSN                                 0x3
#define _ADUTHL_ADUTH3_POSITION                             0x3
#define _ADUTHL_ADUTH3_SIZE                                 0x1
#define _ADUTHL_ADUTH3_LENGTH                               0x1
#define _ADUTHL_ADUTH3_MASK                                 0x8
#define _ADUTHL_ADUTH4_POSN                                 0x4
#define _ADUTHL_ADUTH4_POSITION                             0x4
#define _ADUTHL_ADUTH4_SIZE                                 0x1
#define _ADUTHL_ADUTH4_LENGTH                               0x1
#define _ADUTHL_ADUTH4_MASK                                 0x10
#define _ADUTHL_ADUTH5_POSN                                 0x5
#define _ADUTHL_ADUTH5_POSITION                             0x5
#define _ADUTHL_ADUTH5_SIZE                                 0x1
#define _ADUTHL_ADUTH5_LENGTH                               0x1
#define _ADUTHL_ADUTH5_MASK                                 0x20
#define _ADUTHL_ADUTH6_POSN                                 0x6
#define _ADUTHL_ADUTH6_POSITION                             0x6
#define _ADUTHL_ADUTH6_SIZE                                 0x1
#define _ADUTHL_ADUTH6_LENGTH                               0x1
#define _ADUTHL_ADUTH6_MASK                                 0x40
#define _ADUTHL_ADUTH7_POSN                                 0x7
#define _ADUTHL_ADUTH7_POSITION                             0x7
#define _ADUTHL_ADUTH7_SIZE                                 0x1
#define _ADUTHL_ADUTH7_LENGTH                               0x1
#define _ADUTHL_ADUTH7_MASK                                 0x80
#define _ADUTHL_ADUTH_POSN                                  0x0
#define _ADUTHL_ADUTH_POSITION                              0x0
#define _ADUTHL_ADUTH_SIZE                                  0x8
#define _ADUTHL_ADUTH_LENGTH                                0x8
#define _ADUTHL_ADUTH_MASK                                  0xFF
#define _ADUTHL_UTH0_POSN                                   0x0
#define _ADUTHL_UTH0_POSITION                               0x0
#define _ADUTHL_UTH0_SIZE                                   0x1
#define _ADUTHL_UTH0_LENGTH                                 0x1
#define _ADUTHL_UTH0_MASK                                   0x1
#define _ADUTHL_UTH1_POSN                                   0x1
#define _ADUTHL_UTH1_POSITION                               0x1
#define _ADUTHL_UTH1_SIZE                                   0x1
#define _ADUTHL_UTH1_LENGTH                                 0x1
#define _ADUTHL_UTH1_MASK                                   0x2
#define _ADUTHL_UTH2_POSN                                   0x2
#define _ADUTHL_UTH2_POSITION                               0x2
#define _ADUTHL_UTH2_SIZE                                   0x1
#define _ADUTHL_UTH2_LENGTH                                 0x1
#define _ADUTHL_UTH2_MASK                                   0x4
#define _ADUTHL_UTH3_POSN                                   0x3
#define _ADUTHL_UTH3_POSITION                               0x3
#define _ADUTHL_UTH3_SIZE                                   0x1
#define _ADUTHL_UTH3_LENGTH                                 0x1
#define _ADUTHL_UTH3_MASK                                   0x8
#define _ADUTHL_UTH4_POSN                                   0x4
#define _ADUTHL_UTH4_POSITION                               0x4
#define _ADUTHL_UTH4_SIZE                                   0x1
#define _ADUTHL_UTH4_LENGTH                                 0x1
#define _ADUTHL_UTH4_MASK                                   0x10
#define _ADUTHL_UTH5_POSN                                   0x5
#define _ADUTHL_UTH5_POSITION                               0x5
#define _ADUTHL_UTH5_SIZE                                   0x1
#define _ADUTHL_UTH5_LENGTH                                 0x1
#define _ADUTHL_UTH5_MASK                                   0x20
#define _ADUTHL_UTH6_POSN                                   0x6
#define _ADUTHL_UTH6_POSITION                               0x6
#define _ADUTHL_UTH6_SIZE                                   0x1
#define _ADUTHL_UTH6_LENGTH                                 0x1
#define _ADUTHL_UTH6_MASK                                   0x40
#define _ADUTHL_UTH7_POSN                                   0x7
#define _ADUTHL_UTH7_POSITION                               0x7
#define _ADUTHL_UTH7_SIZE                                   0x1
#define _ADUTHL_UTH7_LENGTH                                 0x1
#define _ADUTHL_UTH7_MASK                                   0x80

// Register: ADUTHH
#define ADUTHH ADUTHH
extern volatile unsigned char           ADUTHH              __at(0x218);
#ifndef _LIB_BUILD
asm("ADUTHH equ 0218h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned UTH                    :8;
    };
    struct {
        unsigned ADUTH8                 :1;
        unsigned ADUTH9                 :1;
        unsigned ADUTH10                :1;
        unsigned ADUTH11                :1;
        unsigned ADUTH12                :1;
        unsigned ADUTH13                :1;
        unsigned ADUTH14                :1;
        unsigned ADUTH15                :1;
    };
    struct {
        unsigned ADUTH                  :8;
    };
    struct {
        unsigned UTH8                   :1;
        unsigned UTH9                   :1;
        unsigned UTH10                  :1;
        unsigned UTH11                  :1;
        unsigned UTH12                  :1;
        unsigned UTH13                  :1;
        unsigned UTH14                  :1;
        unsigned UTH15                  :1;
    };
} ADUTHHbits_t;
extern volatile ADUTHHbits_t ADUTHHbits __at(0x218);
// bitfield macros
#define _ADUTHH_UTH_POSN                                    0x0
#define _ADUTHH_UTH_POSITION                                0x0
#define _ADUTHH_UTH_SIZE                                    0x8
#define _ADUTHH_UTH_LENGTH                                  0x8
#define _ADUTHH_UTH_MASK                                    0xFF
#define _ADUTHH_ADUTH8_POSN                                 0x0
#define _ADUTHH_ADUTH8_POSITION                             0x0
#define _ADUTHH_ADUTH8_SIZE                                 0x1
#define _ADUTHH_ADUTH8_LENGTH                               0x1
#define _ADUTHH_ADUTH8_MASK                                 0x1
#define _ADUTHH_ADUTH9_POSN                                 0x1
#define _ADUTHH_ADUTH9_POSITION                             0x1
#define _ADUTHH_ADUTH9_SIZE                                 0x1
#define _ADUTHH_ADUTH9_LENGTH                               0x1
#define _ADUTHH_ADUTH9_MASK                                 0x2
#define _ADUTHH_ADUTH10_POSN                                0x2
#define _ADUTHH_ADUTH10_POSITION                            0x2
#define _ADUTHH_ADUTH10_SIZE                                0x1
#define _ADUTHH_ADUTH10_LENGTH                              0x1
#define _ADUTHH_ADUTH10_MASK                                0x4
#define _ADUTHH_ADUTH11_POSN                                0x3
#define _ADUTHH_ADUTH11_POSITION                            0x3
#define _ADUTHH_ADUTH11_SIZE                                0x1
#define _ADUTHH_ADUTH11_LENGTH                              0x1
#define _ADUTHH_ADUTH11_MASK                                0x8
#define _ADUTHH_ADUTH12_POSN                                0x4
#define _ADUTHH_ADUTH12_POSITION                            0x4
#define _ADUTHH_ADUTH12_SIZE                                0x1
#define _ADUTHH_ADUTH12_LENGTH                              0x1
#define _ADUTHH_ADUTH12_MASK                                0x10
#define _ADUTHH_ADUTH13_POSN                                0x5
#define _ADUTHH_ADUTH13_POSITION                            0x5
#define _ADUTHH_ADUTH13_SIZE                                0x1
#define _ADUTHH_ADUTH13_LENGTH                              0x1
#define _ADUTHH_ADUTH13_MASK                                0x20
#define _ADUTHH_ADUTH14_POSN                                0x6
#define _ADUTHH_ADUTH14_POSITION                            0x6
#define _ADUTHH_ADUTH14_SIZE                                0x1
#define _ADUTHH_ADUTH14_LENGTH                              0x1
#define _ADUTHH_ADUTH14_MASK                                0x40
#define _ADUTHH_ADUTH15_POSN                                0x7
#define _ADUTHH_ADUTH15_POSITION                            0x7
#define _ADUTHH_ADUTH15_SIZE                                0x1
#define _ADUTHH_ADUTH15_LENGTH                              0x1
#define _ADUTHH_ADUTH15_MASK                                0x80
#define _ADUTHH_ADUTH_POSN                                  0x0
#define _ADUTHH_ADUTH_POSITION                              0x0
#define _ADUTHH_ADUTH_SIZE                                  0x8
#define _ADUTHH_ADUTH_LENGTH                                0x8
#define _ADUTHH_ADUTH_MASK                                  0xFF
#define _ADUTHH_UTH8_POSN                                   0x0
#define _ADUTHH_UTH8_POSITION                               0x0
#define _ADUTHH_UTH8_SIZE                                   0x1
#define _ADUTHH_UTH8_LENGTH                                 0x1
#define _ADUTHH_UTH8_MASK                                   0x1
#define _ADUTHH_UTH9_POSN                                   0x1
#define _ADUTHH_UTH9_POSITION                               0x1
#define _ADUTHH_UTH9_SIZE                                   0x1
#define _ADUTHH_UTH9_LENGTH                                 0x1
#define _ADUTHH_UTH9_MASK                                   0x2
#define _ADUTHH_UTH10_POSN                                  0x2
#define _ADUTHH_UTH10_POSITION                              0x2
#define _ADUTHH_UTH10_SIZE                                  0x1
#define _ADUTHH_UTH10_LENGTH                                0x1
#define _ADUTHH_UTH10_MASK                                  0x4
#define _ADUTHH_UTH11_POSN                                  0x3
#define _ADUTHH_UTH11_POSITION                              0x3
#define _ADUTHH_UTH11_SIZE                                  0x1
#define _ADUTHH_UTH11_LENGTH                                0x1
#define _ADUTHH_UTH11_MASK                                  0x8
#define _ADUTHH_UTH12_POSN                                  0x4
#define _ADUTHH_UTH12_POSITION                              0x4
#define _ADUTHH_UTH12_SIZE                                  0x1
#define _ADUTHH_UTH12_LENGTH                                0x1
#define _ADUTHH_UTH12_MASK                                  0x10
#define _ADUTHH_UTH13_POSN                                  0x5
#define _ADUTHH_UTH13_POSITION                              0x5
#define _ADUTHH_UTH13_SIZE                                  0x1
#define _ADUTHH_UTH13_LENGTH                                0x1
#define _ADUTHH_UTH13_MASK                                  0x20
#define _ADUTHH_UTH14_POSN                                  0x6
#define _ADUTHH_UTH14_POSITION                              0x6
#define _ADUTHH_UTH14_SIZE                                  0x1
#define _ADUTHH_UTH14_LENGTH                                0x1
#define _ADUTHH_UTH14_MASK                                  0x40
#define _ADUTHH_UTH15_POSN                                  0x7
#define _ADUTHH_UTH15_POSITION                              0x7
#define _ADUTHH_UTH15_SIZE                                  0x1
#define _ADUTHH_UTH15_LENGTH                                0x1
#define _ADUTHH_UTH15_MASK                                  0x80

// Register: ADERR
#define ADERR ADERR
extern volatile unsigned short          ADERR               __at(0x219);
#ifndef _LIB_BUILD
asm("ADERR equ 0219h");
#endif

// Register: ADERRL
#define ADERRL ADERRL
extern volatile unsigned char           ADERRL              __at(0x219);
#ifndef _LIB_BUILD
asm("ADERRL equ 0219h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERR                    :8;
    };
    struct {
        unsigned ADERR0                 :1;
        unsigned ADERR1                 :1;
        unsigned ADERR2                 :1;
        unsigned ADERR3                 :1;
        unsigned ADERR4                 :1;
        unsigned ADERR5                 :1;
        unsigned ADERR6                 :1;
        unsigned ADERR7                 :1;
    };
    struct {
        unsigned ADERR                  :8;
    };
    struct {
        unsigned ERR0                   :1;
        unsigned ERR1                   :1;
        unsigned ERR2                   :1;
        unsigned ERR3                   :1;
        unsigned ERR4                   :1;
        unsigned ERR5                   :1;
        unsigned ERR6                   :1;
        unsigned ERR7                   :1;
    };
} ADERRLbits_t;
extern volatile ADERRLbits_t ADERRLbits __at(0x219);
// bitfield macros
#define _ADERRL_ERR_POSN                                    0x0
#define _ADERRL_ERR_POSITION                                0x0
#define _ADERRL_ERR_SIZE                                    0x8
#define _ADERRL_ERR_LENGTH                                  0x8
#define _ADERRL_ERR_MASK                                    0xFF
#define _ADERRL_ADERR0_POSN                                 0x0
#define _ADERRL_ADERR0_POSITION                             0x0
#define _ADERRL_ADERR0_SIZE                                 0x1
#define _ADERRL_ADERR0_LENGTH                               0x1
#define _ADERRL_ADERR0_MASK                                 0x1
#define _ADERRL_ADERR1_POSN                                 0x1
#define _ADERRL_ADERR1_POSITION                             0x1
#define _ADERRL_ADERR1_SIZE                                 0x1
#define _ADERRL_ADERR1_LENGTH                               0x1
#define _ADERRL_ADERR1_MASK                                 0x2
#define _ADERRL_ADERR2_POSN                                 0x2
#define _ADERRL_ADERR2_POSITION                             0x2
#define _ADERRL_ADERR2_SIZE                                 0x1
#define _ADERRL_ADERR2_LENGTH                               0x1
#define _ADERRL_ADERR2_MASK                                 0x4
#define _ADERRL_ADERR3_POSN                                 0x3
#define _ADERRL_ADERR3_POSITION                             0x3
#define _ADERRL_ADERR3_SIZE                                 0x1
#define _ADERRL_ADERR3_LENGTH                               0x1
#define _ADERRL_ADERR3_MASK                                 0x8
#define _ADERRL_ADERR4_POSN                                 0x4
#define _ADERRL_ADERR4_POSITION                             0x4
#define _ADERRL_ADERR4_SIZE                                 0x1
#define _ADERRL_ADERR4_LENGTH                               0x1
#define _ADERRL_ADERR4_MASK                                 0x10
#define _ADERRL_ADERR5_POSN                                 0x5
#define _ADERRL_ADERR5_POSITION                             0x5
#define _ADERRL_ADERR5_SIZE                                 0x1
#define _ADERRL_ADERR5_LENGTH                               0x1
#define _ADERRL_ADERR5_MASK                                 0x20
#define _ADERRL_ADERR6_POSN                                 0x6
#define _ADERRL_ADERR6_POSITION                             0x6
#define _ADERRL_ADERR6_SIZE                                 0x1
#define _ADERRL_ADERR6_LENGTH                               0x1
#define _ADERRL_ADERR6_MASK                                 0x40
#define _ADERRL_ADERR7_POSN                                 0x7
#define _ADERRL_ADERR7_POSITION                             0x7
#define _ADERRL_ADERR7_SIZE                                 0x1
#define _ADERRL_ADERR7_LENGTH                               0x1
#define _ADERRL_ADERR7_MASK                                 0x80
#define _ADERRL_ADERR_POSN                                  0x0
#define _ADERRL_ADERR_POSITION                              0x0
#define _ADERRL_ADERR_SIZE                                  0x8
#define _ADERRL_ADERR_LENGTH                                0x8
#define _ADERRL_ADERR_MASK                                  0xFF
#define _ADERRL_ERR0_POSN                                   0x0
#define _ADERRL_ERR0_POSITION                               0x0
#define _ADERRL_ERR0_SIZE                                   0x1
#define _ADERRL_ERR0_LENGTH                                 0x1
#define _ADERRL_ERR0_MASK                                   0x1
#define _ADERRL_ERR1_POSN                                   0x1
#define _ADERRL_ERR1_POSITION                               0x1
#define _ADERRL_ERR1_SIZE                                   0x1
#define _ADERRL_ERR1_LENGTH                                 0x1
#define _ADERRL_ERR1_MASK                                   0x2
#define _ADERRL_ERR2_POSN                                   0x2
#define _ADERRL_ERR2_POSITION                               0x2
#define _ADERRL_ERR2_SIZE                                   0x1
#define _ADERRL_ERR2_LENGTH                                 0x1
#define _ADERRL_ERR2_MASK                                   0x4
#define _ADERRL_ERR3_POSN                                   0x3
#define _ADERRL_ERR3_POSITION                               0x3
#define _ADERRL_ERR3_SIZE                                   0x1
#define _ADERRL_ERR3_LENGTH                                 0x1
#define _ADERRL_ERR3_MASK                                   0x8
#define _ADERRL_ERR4_POSN                                   0x4
#define _ADERRL_ERR4_POSITION                               0x4
#define _ADERRL_ERR4_SIZE                                   0x1
#define _ADERRL_ERR4_LENGTH                                 0x1
#define _ADERRL_ERR4_MASK                                   0x10
#define _ADERRL_ERR5_POSN                                   0x5
#define _ADERRL_ERR5_POSITION                               0x5
#define _ADERRL_ERR5_SIZE                                   0x1
#define _ADERRL_ERR5_LENGTH                                 0x1
#define _ADERRL_ERR5_MASK                                   0x20
#define _ADERRL_ERR6_POSN                                   0x6
#define _ADERRL_ERR6_POSITION                               0x6
#define _ADERRL_ERR6_SIZE                                   0x1
#define _ADERRL_ERR6_LENGTH                                 0x1
#define _ADERRL_ERR6_MASK                                   0x40
#define _ADERRL_ERR7_POSN                                   0x7
#define _ADERRL_ERR7_POSITION                               0x7
#define _ADERRL_ERR7_SIZE                                   0x1
#define _ADERRL_ERR7_LENGTH                                 0x1
#define _ADERRL_ERR7_MASK                                   0x80

// Register: ADERRH
#define ADERRH ADERRH
extern volatile unsigned char           ADERRH              __at(0x21A);
#ifndef _LIB_BUILD
asm("ADERRH equ 021Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ERR                    :8;
    };
    struct {
        unsigned ADERR8                 :1;
        unsigned ADERR9                 :1;
        unsigned ADERR10                :1;
        unsigned ADERR11                :1;
        unsigned ADERR12                :1;
        unsigned ADERR13                :1;
        unsigned ADERR14                :1;
        unsigned ADERR15                :1;
    };
    struct {
        unsigned ADERR                  :8;
    };
    struct {
        unsigned ERR8                   :1;
        unsigned ERR9                   :1;
        unsigned ERR10                  :1;
        unsigned ERR11                  :1;
        unsigned ERR12                  :1;
        unsigned ERR13                  :1;
        unsigned ERR14                  :1;
        unsigned ERR15                  :1;
    };
} ADERRHbits_t;
extern volatile ADERRHbits_t ADERRHbits __at(0x21A);
// bitfield macros
#define _ADERRH_ERR_POSN                                    0x0
#define _ADERRH_ERR_POSITION                                0x0
#define _ADERRH_ERR_SIZE                                    0x8
#define _ADERRH_ERR_LENGTH                                  0x8
#define _ADERRH_ERR_MASK                                    0xFF
#define _ADERRH_ADERR8_POSN                                 0x0
#define _ADERRH_ADERR8_POSITION                             0x0
#define _ADERRH_ADERR8_SIZE                                 0x1
#define _ADERRH_ADERR8_LENGTH                               0x1
#define _ADERRH_ADERR8_MASK                                 0x1
#define _ADERRH_ADERR9_POSN                                 0x1
#define _ADERRH_ADERR9_POSITION                             0x1
#define _ADERRH_ADERR9_SIZE                                 0x1
#define _ADERRH_ADERR9_LENGTH                               0x1
#define _ADERRH_ADERR9_MASK                                 0x2
#define _ADERRH_ADERR10_POSN                                0x2
#define _ADERRH_ADERR10_POSITION                            0x2
#define _ADERRH_ADERR10_SIZE                                0x1
#define _ADERRH_ADERR10_LENGTH                              0x1
#define _ADERRH_ADERR10_MASK                                0x4
#define _ADERRH_ADERR11_POSN                                0x3
#define _ADERRH_ADERR11_POSITION                            0x3
#define _ADERRH_ADERR11_SIZE                                0x1
#define _ADERRH_ADERR11_LENGTH                              0x1
#define _ADERRH_ADERR11_MASK                                0x8
#define _ADERRH_ADERR12_POSN                                0x4
#define _ADERRH_ADERR12_POSITION                            0x4
#define _ADERRH_ADERR12_SIZE                                0x1
#define _ADERRH_ADERR12_LENGTH                              0x1
#define _ADERRH_ADERR12_MASK                                0x10
#define _ADERRH_ADERR13_POSN                                0x5
#define _ADERRH_ADERR13_POSITION                            0x5
#define _ADERRH_ADERR13_SIZE                                0x1
#define _ADERRH_ADERR13_LENGTH                              0x1
#define _ADERRH_ADERR13_MASK                                0x20
#define _ADERRH_ADERR14_POSN                                0x6
#define _ADERRH_ADERR14_POSITION                            0x6
#define _ADERRH_ADERR14_SIZE                                0x1
#define _ADERRH_ADERR14_LENGTH                              0x1
#define _ADERRH_ADERR14_MASK                                0x40
#define _ADERRH_ADERR15_POSN                                0x7
#define _ADERRH_ADERR15_POSITION                            0x7
#define _ADERRH_ADERR15_SIZE                                0x1
#define _ADERRH_ADERR15_LENGTH                              0x1
#define _ADERRH_ADERR15_MASK                                0x80
#define _ADERRH_ADERR_POSN                                  0x0
#define _ADERRH_ADERR_POSITION                              0x0
#define _ADERRH_ADERR_SIZE                                  0x8
#define _ADERRH_ADERR_LENGTH                                0x8
#define _ADERRH_ADERR_MASK                                  0xFF
#define _ADERRH_ERR8_POSN                                   0x0
#define _ADERRH_ERR8_POSITION                               0x0
#define _ADERRH_ERR8_SIZE                                   0x1
#define _ADERRH_ERR8_LENGTH                                 0x1
#define _ADERRH_ERR8_MASK                                   0x1
#define _ADERRH_ERR9_POSN                                   0x1
#define _ADERRH_ERR9_POSITION                               0x1
#define _ADERRH_ERR9_SIZE                                   0x1
#define _ADERRH_ERR9_LENGTH                                 0x1
#define _ADERRH_ERR9_MASK                                   0x2
#define _ADERRH_ERR10_POSN                                  0x2
#define _ADERRH_ERR10_POSITION                              0x2
#define _ADERRH_ERR10_SIZE                                  0x1
#define _ADERRH_ERR10_LENGTH                                0x1
#define _ADERRH_ERR10_MASK                                  0x4
#define _ADERRH_ERR11_POSN                                  0x3
#define _ADERRH_ERR11_POSITION                              0x3
#define _ADERRH_ERR11_SIZE                                  0x1
#define _ADERRH_ERR11_LENGTH                                0x1
#define _ADERRH_ERR11_MASK                                  0x8
#define _ADERRH_ERR12_POSN                                  0x4
#define _ADERRH_ERR12_POSITION                              0x4
#define _ADERRH_ERR12_SIZE                                  0x1
#define _ADERRH_ERR12_LENGTH                                0x1
#define _ADERRH_ERR12_MASK                                  0x10
#define _ADERRH_ERR13_POSN                                  0x5
#define _ADERRH_ERR13_POSITION                              0x5
#define _ADERRH_ERR13_SIZE                                  0x1
#define _ADERRH_ERR13_LENGTH                                0x1
#define _ADERRH_ERR13_MASK                                  0x20
#define _ADERRH_ERR14_POSN                                  0x6
#define _ADERRH_ERR14_POSITION                              0x6
#define _ADERRH_ERR14_SIZE                                  0x1
#define _ADERRH_ERR14_LENGTH                                0x1
#define _ADERRH_ERR14_MASK                                  0x40
#define _ADERRH_ERR15_POSN                                  0x7
#define _ADERRH_ERR15_POSITION                              0x7
#define _ADERRH_ERR15_SIZE                                  0x1
#define _ADERRH_ERR15_LENGTH                                0x1
#define _ADERRH_ERR15_MASK                                  0x80

// Register: ADSTPT
#define ADSTPT ADSTPT
extern volatile unsigned short          ADSTPT              __at(0x21B);
#ifndef _LIB_BUILD
asm("ADSTPT equ 021Bh");
#endif

// Register: ADSTPTL
#define ADSTPTL ADSTPTL
extern volatile unsigned char           ADSTPTL             __at(0x21B);
#ifndef _LIB_BUILD
asm("ADSTPTL equ 021Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STPT                   :8;
    };
    struct {
        unsigned ADSTPT0                :1;
        unsigned ADSTPT1                :1;
        unsigned ADSTPT2                :1;
        unsigned ADSTPT3                :1;
        unsigned ADSTPT4                :1;
        unsigned ADSTPT5                :1;
        unsigned ADSTPT6                :1;
        unsigned ADSTPT7                :1;
    };
    struct {
        unsigned ADSTPT                 :8;
    };
    struct {
        unsigned STPT0                  :1;
        unsigned STPT1                  :1;
        unsigned STPT2                  :1;
        unsigned STPT3                  :1;
        unsigned STPT4                  :1;
        unsigned STPT5                  :1;
        unsigned STPT6                  :1;
        unsigned STPT7                  :1;
    };
} ADSTPTLbits_t;
extern volatile ADSTPTLbits_t ADSTPTLbits __at(0x21B);
// bitfield macros
#define _ADSTPTL_STPT_POSN                                  0x0
#define _ADSTPTL_STPT_POSITION                              0x0
#define _ADSTPTL_STPT_SIZE                                  0x8
#define _ADSTPTL_STPT_LENGTH                                0x8
#define _ADSTPTL_STPT_MASK                                  0xFF
#define _ADSTPTL_ADSTPT0_POSN                               0x0
#define _ADSTPTL_ADSTPT0_POSITION                           0x0
#define _ADSTPTL_ADSTPT0_SIZE                               0x1
#define _ADSTPTL_ADSTPT0_LENGTH                             0x1
#define _ADSTPTL_ADSTPT0_MASK                               0x1
#define _ADSTPTL_ADSTPT1_POSN                               0x1
#define _ADSTPTL_ADSTPT1_POSITION                           0x1
#define _ADSTPTL_ADSTPT1_SIZE                               0x1
#define _ADSTPTL_ADSTPT1_LENGTH                             0x1
#define _ADSTPTL_ADSTPT1_MASK                               0x2
#define _ADSTPTL_ADSTPT2_POSN                               0x2
#define _ADSTPTL_ADSTPT2_POSITION                           0x2
#define _ADSTPTL_ADSTPT2_SIZE                               0x1
#define _ADSTPTL_ADSTPT2_LENGTH                             0x1
#define _ADSTPTL_ADSTPT2_MASK                               0x4
#define _ADSTPTL_ADSTPT3_POSN                               0x3
#define _ADSTPTL_ADSTPT3_POSITION                           0x3
#define _ADSTPTL_ADSTPT3_SIZE                               0x1
#define _ADSTPTL_ADSTPT3_LENGTH                             0x1
#define _ADSTPTL_ADSTPT3_MASK                               0x8
#define _ADSTPTL_ADSTPT4_POSN                               0x4
#define _ADSTPTL_ADSTPT4_POSITION                           0x4
#define _ADSTPTL_ADSTPT4_SIZE                               0x1
#define _ADSTPTL_ADSTPT4_LENGTH                             0x1
#define _ADSTPTL_ADSTPT4_MASK                               0x10
#define _ADSTPTL_ADSTPT5_POSN                               0x5
#define _ADSTPTL_ADSTPT5_POSITION                           0x5
#define _ADSTPTL_ADSTPT5_SIZE                               0x1
#define _ADSTPTL_ADSTPT5_LENGTH                             0x1
#define _ADSTPTL_ADSTPT5_MASK                               0x20
#define _ADSTPTL_ADSTPT6_POSN                               0x6
#define _ADSTPTL_ADSTPT6_POSITION                           0x6
#define _ADSTPTL_ADSTPT6_SIZE                               0x1
#define _ADSTPTL_ADSTPT6_LENGTH                             0x1
#define _ADSTPTL_ADSTPT6_MASK                               0x40
#define _ADSTPTL_ADSTPT7_POSN                               0x7
#define _ADSTPTL_ADSTPT7_POSITION                           0x7
#define _ADSTPTL_ADSTPT7_SIZE                               0x1
#define _ADSTPTL_ADSTPT7_LENGTH                             0x1
#define _ADSTPTL_ADSTPT7_MASK                               0x80
#define _ADSTPTL_ADSTPT_POSN                                0x0
#define _ADSTPTL_ADSTPT_POSITION                            0x0
#define _ADSTPTL_ADSTPT_SIZE                                0x8
#define _ADSTPTL_ADSTPT_LENGTH                              0x8
#define _ADSTPTL_ADSTPT_MASK                                0xFF
#define _ADSTPTL_STPT0_POSN                                 0x0
#define _ADSTPTL_STPT0_POSITION                             0x0
#define _ADSTPTL_STPT0_SIZE                                 0x1
#define _ADSTPTL_STPT0_LENGTH                               0x1
#define _ADSTPTL_STPT0_MASK                                 0x1
#define _ADSTPTL_STPT1_POSN                                 0x1
#define _ADSTPTL_STPT1_POSITION                             0x1
#define _ADSTPTL_STPT1_SIZE                                 0x1
#define _ADSTPTL_STPT1_LENGTH                               0x1
#define _ADSTPTL_STPT1_MASK                                 0x2
#define _ADSTPTL_STPT2_POSN                                 0x2
#define _ADSTPTL_STPT2_POSITION                             0x2
#define _ADSTPTL_STPT2_SIZE                                 0x1
#define _ADSTPTL_STPT2_LENGTH                               0x1
#define _ADSTPTL_STPT2_MASK                                 0x4
#define _ADSTPTL_STPT3_POSN                                 0x3
#define _ADSTPTL_STPT3_POSITION                             0x3
#define _ADSTPTL_STPT3_SIZE                                 0x1
#define _ADSTPTL_STPT3_LENGTH                               0x1
#define _ADSTPTL_STPT3_MASK                                 0x8
#define _ADSTPTL_STPT4_POSN                                 0x4
#define _ADSTPTL_STPT4_POSITION                             0x4
#define _ADSTPTL_STPT4_SIZE                                 0x1
#define _ADSTPTL_STPT4_LENGTH                               0x1
#define _ADSTPTL_STPT4_MASK                                 0x10
#define _ADSTPTL_STPT5_POSN                                 0x5
#define _ADSTPTL_STPT5_POSITION                             0x5
#define _ADSTPTL_STPT5_SIZE                                 0x1
#define _ADSTPTL_STPT5_LENGTH                               0x1
#define _ADSTPTL_STPT5_MASK                                 0x20
#define _ADSTPTL_STPT6_POSN                                 0x6
#define _ADSTPTL_STPT6_POSITION                             0x6
#define _ADSTPTL_STPT6_SIZE                                 0x1
#define _ADSTPTL_STPT6_LENGTH                               0x1
#define _ADSTPTL_STPT6_MASK                                 0x40
#define _ADSTPTL_STPT7_POSN                                 0x7
#define _ADSTPTL_STPT7_POSITION                             0x7
#define _ADSTPTL_STPT7_SIZE                                 0x1
#define _ADSTPTL_STPT7_LENGTH                               0x1
#define _ADSTPTL_STPT7_MASK                                 0x80

// Register: ADSTPTH
#define ADSTPTH ADSTPTH
extern volatile unsigned char           ADSTPTH             __at(0x21C);
#ifndef _LIB_BUILD
asm("ADSTPTH equ 021Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STPT                   :8;
    };
    struct {
        unsigned ADSTPT8                :1;
        unsigned ADSTPT9                :1;
        unsigned ADSTPT10               :1;
        unsigned ADSTPT11               :1;
        unsigned ADSTPT12               :1;
        unsigned ADSTPT13               :1;
        unsigned ADSTPT14               :1;
        unsigned ADSTPT15               :1;
    };
    struct {
        unsigned ADSTPT                 :8;
    };
    struct {
        unsigned STPT8                  :1;
        unsigned STPT9                  :1;
        unsigned STPT10                 :1;
        unsigned STPT11                 :1;
        unsigned STPT12                 :1;
        unsigned STPT13                 :1;
        unsigned STPT15                 :1;
        unsigned STPT16                 :1;
    };
} ADSTPTHbits_t;
extern volatile ADSTPTHbits_t ADSTPTHbits __at(0x21C);
// bitfield macros
#define _ADSTPTH_STPT_POSN                                  0x0
#define _ADSTPTH_STPT_POSITION                              0x0
#define _ADSTPTH_STPT_SIZE                                  0x8
#define _ADSTPTH_STPT_LENGTH                                0x8
#define _ADSTPTH_STPT_MASK                                  0xFF
#define _ADSTPTH_ADSTPT8_POSN                               0x0
#define _ADSTPTH_ADSTPT8_POSITION                           0x0
#define _ADSTPTH_ADSTPT8_SIZE                               0x1
#define _ADSTPTH_ADSTPT8_LENGTH                             0x1
#define _ADSTPTH_ADSTPT8_MASK                               0x1
#define _ADSTPTH_ADSTPT9_POSN                               0x1
#define _ADSTPTH_ADSTPT9_POSITION                           0x1
#define _ADSTPTH_ADSTPT9_SIZE                               0x1
#define _ADSTPTH_ADSTPT9_LENGTH                             0x1
#define _ADSTPTH_ADSTPT9_MASK                               0x2
#define _ADSTPTH_ADSTPT10_POSN                              0x2
#define _ADSTPTH_ADSTPT10_POSITION                          0x2
#define _ADSTPTH_ADSTPT10_SIZE                              0x1
#define _ADSTPTH_ADSTPT10_LENGTH                            0x1
#define _ADSTPTH_ADSTPT10_MASK                              0x4
#define _ADSTPTH_ADSTPT11_POSN                              0x3
#define _ADSTPTH_ADSTPT11_POSITION                          0x3
#define _ADSTPTH_ADSTPT11_SIZE                              0x1
#define _ADSTPTH_ADSTPT11_LENGTH                            0x1
#define _ADSTPTH_ADSTPT11_MASK                              0x8
#define _ADSTPTH_ADSTPT12_POSN                              0x4
#define _ADSTPTH_ADSTPT12_POSITION                          0x4
#define _ADSTPTH_ADSTPT12_SIZE                              0x1
#define _ADSTPTH_ADSTPT12_LENGTH                            0x1
#define _ADSTPTH_ADSTPT12_MASK                              0x10
#define _ADSTPTH_ADSTPT13_POSN                              0x5
#define _ADSTPTH_ADSTPT13_POSITION                          0x5
#define _ADSTPTH_ADSTPT13_SIZE                              0x1
#define _ADSTPTH_ADSTPT13_LENGTH                            0x1
#define _ADSTPTH_ADSTPT13_MASK                              0x20
#define _ADSTPTH_ADSTPT14_POSN                              0x6
#define _ADSTPTH_ADSTPT14_POSITION                          0x6
#define _ADSTPTH_ADSTPT14_SIZE                              0x1
#define _ADSTPTH_ADSTPT14_LENGTH                            0x1
#define _ADSTPTH_ADSTPT14_MASK                              0x40
#define _ADSTPTH_ADSTPT15_POSN                              0x7
#define _ADSTPTH_ADSTPT15_POSITION                          0x7
#define _ADSTPTH_ADSTPT15_SIZE                              0x1
#define _ADSTPTH_ADSTPT15_LENGTH                            0x1
#define _ADSTPTH_ADSTPT15_MASK                              0x80
#define _ADSTPTH_ADSTPT_POSN                                0x0
#define _ADSTPTH_ADSTPT_POSITION                            0x0
#define _ADSTPTH_ADSTPT_SIZE                                0x8
#define _ADSTPTH_ADSTPT_LENGTH                              0x8
#define _ADSTPTH_ADSTPT_MASK                                0xFF
#define _ADSTPTH_STPT8_POSN                                 0x0
#define _ADSTPTH_STPT8_POSITION                             0x0
#define _ADSTPTH_STPT8_SIZE                                 0x1
#define _ADSTPTH_STPT8_LENGTH                               0x1
#define _ADSTPTH_STPT8_MASK                                 0x1
#define _ADSTPTH_STPT9_POSN                                 0x1
#define _ADSTPTH_STPT9_POSITION                             0x1
#define _ADSTPTH_STPT9_SIZE                                 0x1
#define _ADSTPTH_STPT9_LENGTH                               0x1
#define _ADSTPTH_STPT9_MASK                                 0x2
#define _ADSTPTH_STPT10_POSN                                0x2
#define _ADSTPTH_STPT10_POSITION                            0x2
#define _ADSTPTH_STPT10_SIZE                                0x1
#define _ADSTPTH_STPT10_LENGTH                              0x1
#define _ADSTPTH_STPT10_MASK                                0x4
#define _ADSTPTH_STPT11_POSN                                0x3
#define _ADSTPTH_STPT11_POSITION                            0x3
#define _ADSTPTH_STPT11_SIZE                                0x1
#define _ADSTPTH_STPT11_LENGTH                              0x1
#define _ADSTPTH_STPT11_MASK                                0x8
#define _ADSTPTH_STPT12_POSN                                0x4
#define _ADSTPTH_STPT12_POSITION                            0x4
#define _ADSTPTH_STPT12_SIZE                                0x1
#define _ADSTPTH_STPT12_LENGTH                              0x1
#define _ADSTPTH_STPT12_MASK                                0x10
#define _ADSTPTH_STPT13_POSN                                0x5
#define _ADSTPTH_STPT13_POSITION                            0x5
#define _ADSTPTH_STPT13_SIZE                                0x1
#define _ADSTPTH_STPT13_LENGTH                              0x1
#define _ADSTPTH_STPT13_MASK                                0x20
#define _ADSTPTH_STPT15_POSN                                0x6
#define _ADSTPTH_STPT15_POSITION                            0x6
#define _ADSTPTH_STPT15_SIZE                                0x1
#define _ADSTPTH_STPT15_LENGTH                              0x1
#define _ADSTPTH_STPT15_MASK                                0x40
#define _ADSTPTH_STPT16_POSN                                0x7
#define _ADSTPTH_STPT16_POSITION                            0x7
#define _ADSTPTH_STPT16_SIZE                                0x1
#define _ADSTPTH_STPT16_LENGTH                              0x1
#define _ADSTPTH_STPT16_MASK                                0x80

// Register: ADFLTR
#define ADFLTR ADFLTR
extern volatile unsigned short          ADFLTR              __at(0x21D);
#ifndef _LIB_BUILD
asm("ADFLTR equ 021Dh");
#endif

// Register: ADFLTRL
#define ADFLTRL ADFLTRL
extern volatile unsigned char           ADFLTRL             __at(0x21D);
#ifndef _LIB_BUILD
asm("ADFLTRL equ 021Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLTR                   :8;
    };
    struct {
        unsigned ADFLTR0                :1;
        unsigned ADFLTR1                :1;
        unsigned ADFLTR2                :1;
        unsigned ADFLTR3                :1;
        unsigned ADFLTR4                :1;
        unsigned ADFLTR5                :1;
        unsigned ADFLTR6                :1;
        unsigned ADFLTR7                :1;
    };
    struct {
        unsigned ADFLTR                 :8;
    };
    struct {
        unsigned FLTR0                  :1;
        unsigned FLTR1                  :1;
        unsigned FLTR2                  :1;
        unsigned FLTR3                  :1;
        unsigned FLTR4                  :1;
        unsigned FLTR5                  :1;
        unsigned FLTR6                  :1;
        unsigned FLTR7                  :1;
    };
} ADFLTRLbits_t;
extern volatile ADFLTRLbits_t ADFLTRLbits __at(0x21D);
// bitfield macros
#define _ADFLTRL_FLTR_POSN                                  0x0
#define _ADFLTRL_FLTR_POSITION                              0x0
#define _ADFLTRL_FLTR_SIZE                                  0x8
#define _ADFLTRL_FLTR_LENGTH                                0x8
#define _ADFLTRL_FLTR_MASK                                  0xFF
#define _ADFLTRL_ADFLTR0_POSN                               0x0
#define _ADFLTRL_ADFLTR0_POSITION                           0x0
#define _ADFLTRL_ADFLTR0_SIZE                               0x1
#define _ADFLTRL_ADFLTR0_LENGTH                             0x1
#define _ADFLTRL_ADFLTR0_MASK                               0x1
#define _ADFLTRL_ADFLTR1_POSN                               0x1
#define _ADFLTRL_ADFLTR1_POSITION                           0x1
#define _ADFLTRL_ADFLTR1_SIZE                               0x1
#define _ADFLTRL_ADFLTR1_LENGTH                             0x1
#define _ADFLTRL_ADFLTR1_MASK                               0x2
#define _ADFLTRL_ADFLTR2_POSN                               0x2
#define _ADFLTRL_ADFLTR2_POSITION                           0x2
#define _ADFLTRL_ADFLTR2_SIZE                               0x1
#define _ADFLTRL_ADFLTR2_LENGTH                             0x1
#define _ADFLTRL_ADFLTR2_MASK                               0x4
#define _ADFLTRL_ADFLTR3_POSN                               0x3
#define _ADFLTRL_ADFLTR3_POSITION                           0x3
#define _ADFLTRL_ADFLTR3_SIZE                               0x1
#define _ADFLTRL_ADFLTR3_LENGTH                             0x1
#define _ADFLTRL_ADFLTR3_MASK                               0x8
#define _ADFLTRL_ADFLTR4_POSN                               0x4
#define _ADFLTRL_ADFLTR4_POSITION                           0x4
#define _ADFLTRL_ADFLTR4_SIZE                               0x1
#define _ADFLTRL_ADFLTR4_LENGTH                             0x1
#define _ADFLTRL_ADFLTR4_MASK                               0x10
#define _ADFLTRL_ADFLTR5_POSN                               0x5
#define _ADFLTRL_ADFLTR5_POSITION                           0x5
#define _ADFLTRL_ADFLTR5_SIZE                               0x1
#define _ADFLTRL_ADFLTR5_LENGTH                             0x1
#define _ADFLTRL_ADFLTR5_MASK                               0x20
#define _ADFLTRL_ADFLTR6_POSN                               0x6
#define _ADFLTRL_ADFLTR6_POSITION                           0x6
#define _ADFLTRL_ADFLTR6_SIZE                               0x1
#define _ADFLTRL_ADFLTR6_LENGTH                             0x1
#define _ADFLTRL_ADFLTR6_MASK                               0x40
#define _ADFLTRL_ADFLTR7_POSN                               0x7
#define _ADFLTRL_ADFLTR7_POSITION                           0x7
#define _ADFLTRL_ADFLTR7_SIZE                               0x1
#define _ADFLTRL_ADFLTR7_LENGTH                             0x1
#define _ADFLTRL_ADFLTR7_MASK                               0x80
#define _ADFLTRL_ADFLTR_POSN                                0x0
#define _ADFLTRL_ADFLTR_POSITION                            0x0
#define _ADFLTRL_ADFLTR_SIZE                                0x8
#define _ADFLTRL_ADFLTR_LENGTH                              0x8
#define _ADFLTRL_ADFLTR_MASK                                0xFF
#define _ADFLTRL_FLTR0_POSN                                 0x0
#define _ADFLTRL_FLTR0_POSITION                             0x0
#define _ADFLTRL_FLTR0_SIZE                                 0x1
#define _ADFLTRL_FLTR0_LENGTH                               0x1
#define _ADFLTRL_FLTR0_MASK                                 0x1
#define _ADFLTRL_FLTR1_POSN                                 0x1
#define _ADFLTRL_FLTR1_POSITION                             0x1
#define _ADFLTRL_FLTR1_SIZE                                 0x1
#define _ADFLTRL_FLTR1_LENGTH                               0x1
#define _ADFLTRL_FLTR1_MASK                                 0x2
#define _ADFLTRL_FLTR2_POSN                                 0x2
#define _ADFLTRL_FLTR2_POSITION                             0x2
#define _ADFLTRL_FLTR2_SIZE                                 0x1
#define _ADFLTRL_FLTR2_LENGTH                               0x1
#define _ADFLTRL_FLTR2_MASK                                 0x4
#define _ADFLTRL_FLTR3_POSN                                 0x3
#define _ADFLTRL_FLTR3_POSITION                             0x3
#define _ADFLTRL_FLTR3_SIZE                                 0x1
#define _ADFLTRL_FLTR3_LENGTH                               0x1
#define _ADFLTRL_FLTR3_MASK                                 0x8
#define _ADFLTRL_FLTR4_POSN                                 0x4
#define _ADFLTRL_FLTR4_POSITION                             0x4
#define _ADFLTRL_FLTR4_SIZE                                 0x1
#define _ADFLTRL_FLTR4_LENGTH                               0x1
#define _ADFLTRL_FLTR4_MASK                                 0x10
#define _ADFLTRL_FLTR5_POSN                                 0x5
#define _ADFLTRL_FLTR5_POSITION                             0x5
#define _ADFLTRL_FLTR5_SIZE                                 0x1
#define _ADFLTRL_FLTR5_LENGTH                               0x1
#define _ADFLTRL_FLTR5_MASK                                 0x20
#define _ADFLTRL_FLTR6_POSN                                 0x6
#define _ADFLTRL_FLTR6_POSITION                             0x6
#define _ADFLTRL_FLTR6_SIZE                                 0x1
#define _ADFLTRL_FLTR6_LENGTH                               0x1
#define _ADFLTRL_FLTR6_MASK                                 0x40
#define _ADFLTRL_FLTR7_POSN                                 0x7
#define _ADFLTRL_FLTR7_POSITION                             0x7
#define _ADFLTRL_FLTR7_SIZE                                 0x1
#define _ADFLTRL_FLTR7_LENGTH                               0x1
#define _ADFLTRL_FLTR7_MASK                                 0x80

// Register: ADFLTRH
#define ADFLTRH ADFLTRH
extern volatile unsigned char           ADFLTRH             __at(0x21E);
#ifndef _LIB_BUILD
asm("ADFLTRH equ 021Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FLTR                   :8;
    };
    struct {
        unsigned ADFLTR8                :1;
        unsigned ADFLTR9                :1;
        unsigned ADFLTR10               :1;
        unsigned ADFLTR11               :1;
        unsigned ADFLTR12               :1;
        unsigned ADFLTR13               :1;
        unsigned ADFLTR14               :1;
        unsigned ADFLTR15               :1;
    };
    struct {
        unsigned ADFLTR                 :8;
    };
    struct {
        unsigned FLTR8                  :1;
        unsigned FLTR9                  :1;
        unsigned FLTR10                 :1;
        unsigned FLTR11                 :1;
        unsigned FLTR12                 :1;
        unsigned FLTR13                 :1;
        unsigned FLTR14                 :1;
        unsigned FLTR15                 :1;
    };
} ADFLTRHbits_t;
extern volatile ADFLTRHbits_t ADFLTRHbits __at(0x21E);
// bitfield macros
#define _ADFLTRH_FLTR_POSN                                  0x0
#define _ADFLTRH_FLTR_POSITION                              0x0
#define _ADFLTRH_FLTR_SIZE                                  0x8
#define _ADFLTRH_FLTR_LENGTH                                0x8
#define _ADFLTRH_FLTR_MASK                                  0xFF
#define _ADFLTRH_ADFLTR8_POSN                               0x0
#define _ADFLTRH_ADFLTR8_POSITION                           0x0
#define _ADFLTRH_ADFLTR8_SIZE                               0x1
#define _ADFLTRH_ADFLTR8_LENGTH                             0x1
#define _ADFLTRH_ADFLTR8_MASK                               0x1
#define _ADFLTRH_ADFLTR9_POSN                               0x1
#define _ADFLTRH_ADFLTR9_POSITION                           0x1
#define _ADFLTRH_ADFLTR9_SIZE                               0x1
#define _ADFLTRH_ADFLTR9_LENGTH                             0x1
#define _ADFLTRH_ADFLTR9_MASK                               0x2
#define _ADFLTRH_ADFLTR10_POSN                              0x2
#define _ADFLTRH_ADFLTR10_POSITION                          0x2
#define _ADFLTRH_ADFLTR10_SIZE                              0x1
#define _ADFLTRH_ADFLTR10_LENGTH                            0x1
#define _ADFLTRH_ADFLTR10_MASK                              0x4
#define _ADFLTRH_ADFLTR11_POSN                              0x3
#define _ADFLTRH_ADFLTR11_POSITION                          0x3
#define _ADFLTRH_ADFLTR11_SIZE                              0x1
#define _ADFLTRH_ADFLTR11_LENGTH                            0x1
#define _ADFLTRH_ADFLTR11_MASK                              0x8
#define _ADFLTRH_ADFLTR12_POSN                              0x4
#define _ADFLTRH_ADFLTR12_POSITION                          0x4
#define _ADFLTRH_ADFLTR12_SIZE                              0x1
#define _ADFLTRH_ADFLTR12_LENGTH                            0x1
#define _ADFLTRH_ADFLTR12_MASK                              0x10
#define _ADFLTRH_ADFLTR13_POSN                              0x5
#define _ADFLTRH_ADFLTR13_POSITION                          0x5
#define _ADFLTRH_ADFLTR13_SIZE                              0x1
#define _ADFLTRH_ADFLTR13_LENGTH                            0x1
#define _ADFLTRH_ADFLTR13_MASK                              0x20
#define _ADFLTRH_ADFLTR14_POSN                              0x6
#define _ADFLTRH_ADFLTR14_POSITION                          0x6
#define _ADFLTRH_ADFLTR14_SIZE                              0x1
#define _ADFLTRH_ADFLTR14_LENGTH                            0x1
#define _ADFLTRH_ADFLTR14_MASK                              0x40
#define _ADFLTRH_ADFLTR15_POSN                              0x7
#define _ADFLTRH_ADFLTR15_POSITION                          0x7
#define _ADFLTRH_ADFLTR15_SIZE                              0x1
#define _ADFLTRH_ADFLTR15_LENGTH                            0x1
#define _ADFLTRH_ADFLTR15_MASK                              0x80
#define _ADFLTRH_ADFLTR_POSN                                0x0
#define _ADFLTRH_ADFLTR_POSITION                            0x0
#define _ADFLTRH_ADFLTR_SIZE                                0x8
#define _ADFLTRH_ADFLTR_LENGTH                              0x8
#define _ADFLTRH_ADFLTR_MASK                                0xFF
#define _ADFLTRH_FLTR8_POSN                                 0x0
#define _ADFLTRH_FLTR8_POSITION                             0x0
#define _ADFLTRH_FLTR8_SIZE                                 0x1
#define _ADFLTRH_FLTR8_LENGTH                               0x1
#define _ADFLTRH_FLTR8_MASK                                 0x1
#define _ADFLTRH_FLTR9_POSN                                 0x1
#define _ADFLTRH_FLTR9_POSITION                             0x1
#define _ADFLTRH_FLTR9_SIZE                                 0x1
#define _ADFLTRH_FLTR9_LENGTH                               0x1
#define _ADFLTRH_FLTR9_MASK                                 0x2
#define _ADFLTRH_FLTR10_POSN                                0x2
#define _ADFLTRH_FLTR10_POSITION                            0x2
#define _ADFLTRH_FLTR10_SIZE                                0x1
#define _ADFLTRH_FLTR10_LENGTH                              0x1
#define _ADFLTRH_FLTR10_MASK                                0x4
#define _ADFLTRH_FLTR11_POSN                                0x3
#define _ADFLTRH_FLTR11_POSITION                            0x3
#define _ADFLTRH_FLTR11_SIZE                                0x1
#define _ADFLTRH_FLTR11_LENGTH                              0x1
#define _ADFLTRH_FLTR11_MASK                                0x8
#define _ADFLTRH_FLTR12_POSN                                0x4
#define _ADFLTRH_FLTR12_POSITION                            0x4
#define _ADFLTRH_FLTR12_SIZE                                0x1
#define _ADFLTRH_FLTR12_LENGTH                              0x1
#define _ADFLTRH_FLTR12_MASK                                0x10
#define _ADFLTRH_FLTR13_POSN                                0x5
#define _ADFLTRH_FLTR13_POSITION                            0x5
#define _ADFLTRH_FLTR13_SIZE                                0x1
#define _ADFLTRH_FLTR13_LENGTH                              0x1
#define _ADFLTRH_FLTR13_MASK                                0x20
#define _ADFLTRH_FLTR14_POSN                                0x6
#define _ADFLTRH_FLTR14_POSITION                            0x6
#define _ADFLTRH_FLTR14_SIZE                                0x1
#define _ADFLTRH_FLTR14_LENGTH                              0x1
#define _ADFLTRH_FLTR14_MASK                                0x40
#define _ADFLTRH_FLTR15_POSN                                0x7
#define _ADFLTRH_FLTR15_POSITION                            0x7
#define _ADFLTRH_FLTR15_SIZE                                0x1
#define _ADFLTRH_FLTR15_LENGTH                              0x1
#define _ADFLTRH_FLTR15_MASK                                0x80

// Register: ADACC
#define ADACC ADACC
extern volatile unsigned short          ADACC               __at(0x21F);
#ifndef _LIB_BUILD
asm("ADACC equ 021Fh");
#endif

// Register: ADACCL
#define ADACCL ADACCL
extern volatile unsigned char           ADACCL              __at(0x21F);
#ifndef _LIB_BUILD
asm("ADACCL equ 021Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned ADACC0                 :1;
        unsigned ADACC1                 :1;
        unsigned ADACC2                 :1;
        unsigned ADACC3                 :1;
        unsigned ADACC4                 :1;
        unsigned ADACC5                 :1;
        unsigned ADACC6                 :1;
        unsigned ADACC7                 :1;
    };
    struct {
        unsigned ADACC                  :8;
    };
    struct {
        unsigned ACC0                   :1;
        unsigned ACC1                   :1;
        unsigned ACC2                   :1;
        unsigned ACC3                   :1;
        unsigned ACC4                   :1;
        unsigned ACC5                   :1;
        unsigned ACC6                   :1;
        unsigned ACC7                   :1;
    };
} ADACCLbits_t;
extern volatile ADACCLbits_t ADACCLbits __at(0x21F);
// bitfield macros
#define _ADACCL_ACC_POSN                                    0x0
#define _ADACCL_ACC_POSITION                                0x0
#define _ADACCL_ACC_SIZE                                    0x8
#define _ADACCL_ACC_LENGTH                                  0x8
#define _ADACCL_ACC_MASK                                    0xFF
#define _ADACCL_ADACC0_POSN                                 0x0
#define _ADACCL_ADACC0_POSITION                             0x0
#define _ADACCL_ADACC0_SIZE                                 0x1
#define _ADACCL_ADACC0_LENGTH                               0x1
#define _ADACCL_ADACC0_MASK                                 0x1
#define _ADACCL_ADACC1_POSN                                 0x1
#define _ADACCL_ADACC1_POSITION                             0x1
#define _ADACCL_ADACC1_SIZE                                 0x1
#define _ADACCL_ADACC1_LENGTH                               0x1
#define _ADACCL_ADACC1_MASK                                 0x2
#define _ADACCL_ADACC2_POSN                                 0x2
#define _ADACCL_ADACC2_POSITION                             0x2
#define _ADACCL_ADACC2_SIZE                                 0x1
#define _ADACCL_ADACC2_LENGTH                               0x1
#define _ADACCL_ADACC2_MASK                                 0x4
#define _ADACCL_ADACC3_POSN                                 0x3
#define _ADACCL_ADACC3_POSITION                             0x3
#define _ADACCL_ADACC3_SIZE                                 0x1
#define _ADACCL_ADACC3_LENGTH                               0x1
#define _ADACCL_ADACC3_MASK                                 0x8
#define _ADACCL_ADACC4_POSN                                 0x4
#define _ADACCL_ADACC4_POSITION                             0x4
#define _ADACCL_ADACC4_SIZE                                 0x1
#define _ADACCL_ADACC4_LENGTH                               0x1
#define _ADACCL_ADACC4_MASK                                 0x10
#define _ADACCL_ADACC5_POSN                                 0x5
#define _ADACCL_ADACC5_POSITION                             0x5
#define _ADACCL_ADACC5_SIZE                                 0x1
#define _ADACCL_ADACC5_LENGTH                               0x1
#define _ADACCL_ADACC5_MASK                                 0x20
#define _ADACCL_ADACC6_POSN                                 0x6
#define _ADACCL_ADACC6_POSITION                             0x6
#define _ADACCL_ADACC6_SIZE                                 0x1
#define _ADACCL_ADACC6_LENGTH                               0x1
#define _ADACCL_ADACC6_MASK                                 0x40
#define _ADACCL_ADACC7_POSN                                 0x7
#define _ADACCL_ADACC7_POSITION                             0x7
#define _ADACCL_ADACC7_SIZE                                 0x1
#define _ADACCL_ADACC7_LENGTH                               0x1
#define _ADACCL_ADACC7_MASK                                 0x80
#define _ADACCL_ADACC_POSN                                  0x0
#define _ADACCL_ADACC_POSITION                              0x0
#define _ADACCL_ADACC_SIZE                                  0x8
#define _ADACCL_ADACC_LENGTH                                0x8
#define _ADACCL_ADACC_MASK                                  0xFF
#define _ADACCL_ACC0_POSN                                   0x0
#define _ADACCL_ACC0_POSITION                               0x0
#define _ADACCL_ACC0_SIZE                                   0x1
#define _ADACCL_ACC0_LENGTH                                 0x1
#define _ADACCL_ACC0_MASK                                   0x1
#define _ADACCL_ACC1_POSN                                   0x1
#define _ADACCL_ACC1_POSITION                               0x1
#define _ADACCL_ACC1_SIZE                                   0x1
#define _ADACCL_ACC1_LENGTH                                 0x1
#define _ADACCL_ACC1_MASK                                   0x2
#define _ADACCL_ACC2_POSN                                   0x2
#define _ADACCL_ACC2_POSITION                               0x2
#define _ADACCL_ACC2_SIZE                                   0x1
#define _ADACCL_ACC2_LENGTH                                 0x1
#define _ADACCL_ACC2_MASK                                   0x4
#define _ADACCL_ACC3_POSN                                   0x3
#define _ADACCL_ACC3_POSITION                               0x3
#define _ADACCL_ACC3_SIZE                                   0x1
#define _ADACCL_ACC3_LENGTH                                 0x1
#define _ADACCL_ACC3_MASK                                   0x8
#define _ADACCL_ACC4_POSN                                   0x4
#define _ADACCL_ACC4_POSITION                               0x4
#define _ADACCL_ACC4_SIZE                                   0x1
#define _ADACCL_ACC4_LENGTH                                 0x1
#define _ADACCL_ACC4_MASK                                   0x10
#define _ADACCL_ACC5_POSN                                   0x5
#define _ADACCL_ACC5_POSITION                               0x5
#define _ADACCL_ACC5_SIZE                                   0x1
#define _ADACCL_ACC5_LENGTH                                 0x1
#define _ADACCL_ACC5_MASK                                   0x20
#define _ADACCL_ACC6_POSN                                   0x6
#define _ADACCL_ACC6_POSITION                               0x6
#define _ADACCL_ACC6_SIZE                                   0x1
#define _ADACCL_ACC6_LENGTH                                 0x1
#define _ADACCL_ACC6_MASK                                   0x40
#define _ADACCL_ACC7_POSN                                   0x7
#define _ADACCL_ACC7_POSITION                               0x7
#define _ADACCL_ACC7_SIZE                                   0x1
#define _ADACCL_ACC7_LENGTH                                 0x1
#define _ADACCL_ACC7_MASK                                   0x80

// Register: ADACCH
#define ADACCH ADACCH
extern volatile unsigned char           ADACCH              __at(0x220);
#ifndef _LIB_BUILD
asm("ADACCH equ 0220h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACC                    :8;
    };
    struct {
        unsigned ADACC8                 :1;
        unsigned ADACC9                 :1;
        unsigned ADACC10                :1;
        unsigned ADACC11                :1;
        unsigned ADACC12                :1;
        unsigned ADACC13                :1;
        unsigned ADACC14                :1;
        unsigned ADACC15                :1;
    };
    struct {
        unsigned ADACC                  :8;
    };
    struct {
        unsigned ACC8                   :1;
        unsigned ACC9                   :1;
        unsigned ACC10                  :1;
        unsigned ACC11                  :1;
        unsigned ACC12                  :1;
        unsigned ACC13                  :1;
        unsigned ACC14                  :1;
        unsigned ACC15                  :1;
    };
} ADACCHbits_t;
extern volatile ADACCHbits_t ADACCHbits __at(0x220);
// bitfield macros
#define _ADACCH_ACC_POSN                                    0x0
#define _ADACCH_ACC_POSITION                                0x0
#define _ADACCH_ACC_SIZE                                    0x8
#define _ADACCH_ACC_LENGTH                                  0x8
#define _ADACCH_ACC_MASK                                    0xFF
#define _ADACCH_ADACC8_POSN                                 0x0
#define _ADACCH_ADACC8_POSITION                             0x0
#define _ADACCH_ADACC8_SIZE                                 0x1
#define _ADACCH_ADACC8_LENGTH                               0x1
#define _ADACCH_ADACC8_MASK                                 0x1
#define _ADACCH_ADACC9_POSN                                 0x1
#define _ADACCH_ADACC9_POSITION                             0x1
#define _ADACCH_ADACC9_SIZE                                 0x1
#define _ADACCH_ADACC9_LENGTH                               0x1
#define _ADACCH_ADACC9_MASK                                 0x2
#define _ADACCH_ADACC10_POSN                                0x2
#define _ADACCH_ADACC10_POSITION                            0x2
#define _ADACCH_ADACC10_SIZE                                0x1
#define _ADACCH_ADACC10_LENGTH                              0x1
#define _ADACCH_ADACC10_MASK                                0x4
#define _ADACCH_ADACC11_POSN                                0x3
#define _ADACCH_ADACC11_POSITION                            0x3
#define _ADACCH_ADACC11_SIZE                                0x1
#define _ADACCH_ADACC11_LENGTH                              0x1
#define _ADACCH_ADACC11_MASK                                0x8
#define _ADACCH_ADACC12_POSN                                0x4
#define _ADACCH_ADACC12_POSITION                            0x4
#define _ADACCH_ADACC12_SIZE                                0x1
#define _ADACCH_ADACC12_LENGTH                              0x1
#define _ADACCH_ADACC12_MASK                                0x10
#define _ADACCH_ADACC13_POSN                                0x5
#define _ADACCH_ADACC13_POSITION                            0x5
#define _ADACCH_ADACC13_SIZE                                0x1
#define _ADACCH_ADACC13_LENGTH                              0x1
#define _ADACCH_ADACC13_MASK                                0x20
#define _ADACCH_ADACC14_POSN                                0x6
#define _ADACCH_ADACC14_POSITION                            0x6
#define _ADACCH_ADACC14_SIZE                                0x1
#define _ADACCH_ADACC14_LENGTH                              0x1
#define _ADACCH_ADACC14_MASK                                0x40
#define _ADACCH_ADACC15_POSN                                0x7
#define _ADACCH_ADACC15_POSITION                            0x7
#define _ADACCH_ADACC15_SIZE                                0x1
#define _ADACCH_ADACC15_LENGTH                              0x1
#define _ADACCH_ADACC15_MASK                                0x80
#define _ADACCH_ADACC_POSN                                  0x0
#define _ADACCH_ADACC_POSITION                              0x0
#define _ADACCH_ADACC_SIZE                                  0x8
#define _ADACCH_ADACC_LENGTH                                0x8
#define _ADACCH_ADACC_MASK                                  0xFF
#define _ADACCH_ACC8_POSN                                   0x0
#define _ADACCH_ACC8_POSITION                               0x0
#define _ADACCH_ACC8_SIZE                                   0x1
#define _ADACCH_ACC8_LENGTH                                 0x1
#define _ADACCH_ACC8_MASK                                   0x1
#define _ADACCH_ACC9_POSN                                   0x1
#define _ADACCH_ACC9_POSITION                               0x1
#define _ADACCH_ACC9_SIZE                                   0x1
#define _ADACCH_ACC9_LENGTH                                 0x1
#define _ADACCH_ACC9_MASK                                   0x2
#define _ADACCH_ACC10_POSN                                  0x2
#define _ADACCH_ACC10_POSITION                              0x2
#define _ADACCH_ACC10_SIZE                                  0x1
#define _ADACCH_ACC10_LENGTH                                0x1
#define _ADACCH_ACC10_MASK                                  0x4
#define _ADACCH_ACC11_POSN                                  0x3
#define _ADACCH_ACC11_POSITION                              0x3
#define _ADACCH_ACC11_SIZE                                  0x1
#define _ADACCH_ACC11_LENGTH                                0x1
#define _ADACCH_ACC11_MASK                                  0x8
#define _ADACCH_ACC12_POSN                                  0x4
#define _ADACCH_ACC12_POSITION                              0x4
#define _ADACCH_ACC12_SIZE                                  0x1
#define _ADACCH_ACC12_LENGTH                                0x1
#define _ADACCH_ACC12_MASK                                  0x10
#define _ADACCH_ACC13_POSN                                  0x5
#define _ADACCH_ACC13_POSITION                              0x5
#define _ADACCH_ACC13_SIZE                                  0x1
#define _ADACCH_ACC13_LENGTH                                0x1
#define _ADACCH_ACC13_MASK                                  0x20
#define _ADACCH_ACC14_POSN                                  0x6
#define _ADACCH_ACC14_POSITION                              0x6
#define _ADACCH_ACC14_SIZE                                  0x1
#define _ADACCH_ACC14_LENGTH                                0x1
#define _ADACCH_ACC14_MASK                                  0x40
#define _ADACCH_ACC15_POSN                                  0x7
#define _ADACCH_ACC15_POSITION                              0x7
#define _ADACCH_ACC15_SIZE                                  0x1
#define _ADACCH_ACC15_LENGTH                                0x1
#define _ADACCH_ACC15_MASK                                  0x80

// Register: ADCNT
#define ADCNT ADCNT
extern volatile unsigned char           ADCNT               __at(0x222);
#ifndef _LIB_BUILD
asm("ADCNT equ 0222h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CNT                    :8;
    };
    struct {
        unsigned ADCNT0                 :1;
        unsigned ADCNT1                 :1;
        unsigned ADCNT2                 :1;
        unsigned ADCNT3                 :1;
        unsigned ADCNT4                 :1;
        unsigned ADCNT5                 :1;
        unsigned ADCNT6                 :1;
        unsigned ADCNT7                 :1;
    };
    struct {
        unsigned ADCNT                  :8;
    };
    struct {
        unsigned CNT0                   :1;
        unsigned CNT1                   :1;
        unsigned CNT2                   :1;
        unsigned CNT3                   :1;
        unsigned CNT4                   :1;
        unsigned CNT5                   :1;
        unsigned CNT6                   :1;
        unsigned CNT7                   :1;
    };
} ADCNTbits_t;
extern volatile ADCNTbits_t ADCNTbits __at(0x222);
// bitfield macros
#define _ADCNT_CNT_POSN                                     0x0
#define _ADCNT_CNT_POSITION                                 0x0
#define _ADCNT_CNT_SIZE                                     0x8
#define _ADCNT_CNT_LENGTH                                   0x8
#define _ADCNT_CNT_MASK                                     0xFF
#define _ADCNT_ADCNT0_POSN                                  0x0
#define _ADCNT_ADCNT0_POSITION                              0x0
#define _ADCNT_ADCNT0_SIZE                                  0x1
#define _ADCNT_ADCNT0_LENGTH                                0x1
#define _ADCNT_ADCNT0_MASK                                  0x1
#define _ADCNT_ADCNT1_POSN                                  0x1
#define _ADCNT_ADCNT1_POSITION                              0x1
#define _ADCNT_ADCNT1_SIZE                                  0x1
#define _ADCNT_ADCNT1_LENGTH                                0x1
#define _ADCNT_ADCNT1_MASK                                  0x2
#define _ADCNT_ADCNT2_POSN                                  0x2
#define _ADCNT_ADCNT2_POSITION                              0x2
#define _ADCNT_ADCNT2_SIZE                                  0x1
#define _ADCNT_ADCNT2_LENGTH                                0x1
#define _ADCNT_ADCNT2_MASK                                  0x4
#define _ADCNT_ADCNT3_POSN                                  0x3
#define _ADCNT_ADCNT3_POSITION                              0x3
#define _ADCNT_ADCNT3_SIZE                                  0x1
#define _ADCNT_ADCNT3_LENGTH                                0x1
#define _ADCNT_ADCNT3_MASK                                  0x8
#define _ADCNT_ADCNT4_POSN                                  0x4
#define _ADCNT_ADCNT4_POSITION                              0x4
#define _ADCNT_ADCNT4_SIZE                                  0x1
#define _ADCNT_ADCNT4_LENGTH                                0x1
#define _ADCNT_ADCNT4_MASK                                  0x10
#define _ADCNT_ADCNT5_POSN                                  0x5
#define _ADCNT_ADCNT5_POSITION                              0x5
#define _ADCNT_ADCNT5_SIZE                                  0x1
#define _ADCNT_ADCNT5_LENGTH                                0x1
#define _ADCNT_ADCNT5_MASK                                  0x20
#define _ADCNT_ADCNT6_POSN                                  0x6
#define _ADCNT_ADCNT6_POSITION                              0x6
#define _ADCNT_ADCNT6_SIZE                                  0x1
#define _ADCNT_ADCNT6_LENGTH                                0x1
#define _ADCNT_ADCNT6_MASK                                  0x40
#define _ADCNT_ADCNT7_POSN                                  0x7
#define _ADCNT_ADCNT7_POSITION                              0x7
#define _ADCNT_ADCNT7_SIZE                                  0x1
#define _ADCNT_ADCNT7_LENGTH                                0x1
#define _ADCNT_ADCNT7_MASK                                  0x80
#define _ADCNT_ADCNT_POSN                                   0x0
#define _ADCNT_ADCNT_POSITION                               0x0
#define _ADCNT_ADCNT_SIZE                                   0x8
#define _ADCNT_ADCNT_LENGTH                                 0x8
#define _ADCNT_ADCNT_MASK                                   0xFF
#define _ADCNT_CNT0_POSN                                    0x0
#define _ADCNT_CNT0_POSITION                                0x0
#define _ADCNT_CNT0_SIZE                                    0x1
#define _ADCNT_CNT0_LENGTH                                  0x1
#define _ADCNT_CNT0_MASK                                    0x1
#define _ADCNT_CNT1_POSN                                    0x1
#define _ADCNT_CNT1_POSITION                                0x1
#define _ADCNT_CNT1_SIZE                                    0x1
#define _ADCNT_CNT1_LENGTH                                  0x1
#define _ADCNT_CNT1_MASK                                    0x2
#define _ADCNT_CNT2_POSN                                    0x2
#define _ADCNT_CNT2_POSITION                                0x2
#define _ADCNT_CNT2_SIZE                                    0x1
#define _ADCNT_CNT2_LENGTH                                  0x1
#define _ADCNT_CNT2_MASK                                    0x4
#define _ADCNT_CNT3_POSN                                    0x3
#define _ADCNT_CNT3_POSITION                                0x3
#define _ADCNT_CNT3_SIZE                                    0x1
#define _ADCNT_CNT3_LENGTH                                  0x1
#define _ADCNT_CNT3_MASK                                    0x8
#define _ADCNT_CNT4_POSN                                    0x4
#define _ADCNT_CNT4_POSITION                                0x4
#define _ADCNT_CNT4_SIZE                                    0x1
#define _ADCNT_CNT4_LENGTH                                  0x1
#define _ADCNT_CNT4_MASK                                    0x10
#define _ADCNT_CNT5_POSN                                    0x5
#define _ADCNT_CNT5_POSITION                                0x5
#define _ADCNT_CNT5_SIZE                                    0x1
#define _ADCNT_CNT5_LENGTH                                  0x1
#define _ADCNT_CNT5_MASK                                    0x20
#define _ADCNT_CNT6_POSN                                    0x6
#define _ADCNT_CNT6_POSITION                                0x6
#define _ADCNT_CNT6_SIZE                                    0x1
#define _ADCNT_CNT6_LENGTH                                  0x1
#define _ADCNT_CNT6_MASK                                    0x40
#define _ADCNT_CNT7_POSN                                    0x7
#define _ADCNT_CNT7_POSITION                                0x7
#define _ADCNT_CNT7_SIZE                                    0x1
#define _ADCNT_CNT7_LENGTH                                  0x1
#define _ADCNT_CNT7_MASK                                    0x80

// Register: ADRPT
#define ADRPT ADRPT
extern volatile unsigned char           ADRPT               __at(0x223);
#ifndef _LIB_BUILD
asm("ADRPT equ 0223h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RPT                    :8;
    };
    struct {
        unsigned ADRPT0                 :1;
        unsigned ADRPT1                 :1;
        unsigned ADRPT2                 :1;
        unsigned ADRPT3                 :1;
        unsigned ADRPT4                 :1;
        unsigned ADRPT5                 :1;
        unsigned ADRPT6                 :1;
        unsigned ADRPT7                 :1;
    };
    struct {
        unsigned ADRPT                  :8;
    };
    struct {
        unsigned RPT0                   :1;
        unsigned RPT1                   :1;
        unsigned RPT2                   :1;
        unsigned RPT3                   :1;
        unsigned RPT4                   :1;
        unsigned RPT5                   :1;
        unsigned RPT6                   :1;
        unsigned RPT7                   :1;
    };
} ADRPTbits_t;
extern volatile ADRPTbits_t ADRPTbits __at(0x223);
// bitfield macros
#define _ADRPT_RPT_POSN                                     0x0
#define _ADRPT_RPT_POSITION                                 0x0
#define _ADRPT_RPT_SIZE                                     0x8
#define _ADRPT_RPT_LENGTH                                   0x8
#define _ADRPT_RPT_MASK                                     0xFF
#define _ADRPT_ADRPT0_POSN                                  0x0
#define _ADRPT_ADRPT0_POSITION                              0x0
#define _ADRPT_ADRPT0_SIZE                                  0x1
#define _ADRPT_ADRPT0_LENGTH                                0x1
#define _ADRPT_ADRPT0_MASK                                  0x1
#define _ADRPT_ADRPT1_POSN                                  0x1
#define _ADRPT_ADRPT1_POSITION                              0x1
#define _ADRPT_ADRPT1_SIZE                                  0x1
#define _ADRPT_ADRPT1_LENGTH                                0x1
#define _ADRPT_ADRPT1_MASK                                  0x2
#define _ADRPT_ADRPT2_POSN                                  0x2
#define _ADRPT_ADRPT2_POSITION                              0x2
#define _ADRPT_ADRPT2_SIZE                                  0x1
#define _ADRPT_ADRPT2_LENGTH                                0x1
#define _ADRPT_ADRPT2_MASK                                  0x4
#define _ADRPT_ADRPT3_POSN                                  0x3
#define _ADRPT_ADRPT3_POSITION                              0x3
#define _ADRPT_ADRPT3_SIZE                                  0x1
#define _ADRPT_ADRPT3_LENGTH                                0x1
#define _ADRPT_ADRPT3_MASK                                  0x8
#define _ADRPT_ADRPT4_POSN                                  0x4
#define _ADRPT_ADRPT4_POSITION                              0x4
#define _ADRPT_ADRPT4_SIZE                                  0x1
#define _ADRPT_ADRPT4_LENGTH                                0x1
#define _ADRPT_ADRPT4_MASK                                  0x10
#define _ADRPT_ADRPT5_POSN                                  0x5
#define _ADRPT_ADRPT5_POSITION                              0x5
#define _ADRPT_ADRPT5_SIZE                                  0x1
#define _ADRPT_ADRPT5_LENGTH                                0x1
#define _ADRPT_ADRPT5_MASK                                  0x20
#define _ADRPT_ADRPT6_POSN                                  0x6
#define _ADRPT_ADRPT6_POSITION                              0x6
#define _ADRPT_ADRPT6_SIZE                                  0x1
#define _ADRPT_ADRPT6_LENGTH                                0x1
#define _ADRPT_ADRPT6_MASK                                  0x40
#define _ADRPT_ADRPT7_POSN                                  0x7
#define _ADRPT_ADRPT7_POSITION                              0x7
#define _ADRPT_ADRPT7_SIZE                                  0x1
#define _ADRPT_ADRPT7_LENGTH                                0x1
#define _ADRPT_ADRPT7_MASK                                  0x80
#define _ADRPT_ADRPT_POSN                                   0x0
#define _ADRPT_ADRPT_POSITION                               0x0
#define _ADRPT_ADRPT_SIZE                                   0x8
#define _ADRPT_ADRPT_LENGTH                                 0x8
#define _ADRPT_ADRPT_MASK                                   0xFF
#define _ADRPT_RPT0_POSN                                    0x0
#define _ADRPT_RPT0_POSITION                                0x0
#define _ADRPT_RPT0_SIZE                                    0x1
#define _ADRPT_RPT0_LENGTH                                  0x1
#define _ADRPT_RPT0_MASK                                    0x1
#define _ADRPT_RPT1_POSN                                    0x1
#define _ADRPT_RPT1_POSITION                                0x1
#define _ADRPT_RPT1_SIZE                                    0x1
#define _ADRPT_RPT1_LENGTH                                  0x1
#define _ADRPT_RPT1_MASK                                    0x2
#define _ADRPT_RPT2_POSN                                    0x2
#define _ADRPT_RPT2_POSITION                                0x2
#define _ADRPT_RPT2_SIZE                                    0x1
#define _ADRPT_RPT2_LENGTH                                  0x1
#define _ADRPT_RPT2_MASK                                    0x4
#define _ADRPT_RPT3_POSN                                    0x3
#define _ADRPT_RPT3_POSITION                                0x3
#define _ADRPT_RPT3_SIZE                                    0x1
#define _ADRPT_RPT3_LENGTH                                  0x1
#define _ADRPT_RPT3_MASK                                    0x8
#define _ADRPT_RPT4_POSN                                    0x4
#define _ADRPT_RPT4_POSITION                                0x4
#define _ADRPT_RPT4_SIZE                                    0x1
#define _ADRPT_RPT4_LENGTH                                  0x1
#define _ADRPT_RPT4_MASK                                    0x10
#define _ADRPT_RPT5_POSN                                    0x5
#define _ADRPT_RPT5_POSITION                                0x5
#define _ADRPT_RPT5_SIZE                                    0x1
#define _ADRPT_RPT5_LENGTH                                  0x1
#define _ADRPT_RPT5_MASK                                    0x20
#define _ADRPT_RPT6_POSN                                    0x6
#define _ADRPT_RPT6_POSITION                                0x6
#define _ADRPT_RPT6_SIZE                                    0x1
#define _ADRPT_RPT6_LENGTH                                  0x1
#define _ADRPT_RPT6_MASK                                    0x40
#define _ADRPT_RPT7_POSN                                    0x7
#define _ADRPT_RPT7_POSITION                                0x7
#define _ADRPT_RPT7_SIZE                                    0x1
#define _ADRPT_RPT7_LENGTH                                  0x1
#define _ADRPT_RPT7_MASK                                    0x80

// Register: ADPREV
#define ADPREV ADPREV
extern volatile unsigned short          ADPREV              __at(0x224);
#ifndef _LIB_BUILD
asm("ADPREV equ 0224h");
#endif

// Register: ADPREVL
#define ADPREVL ADPREVL
extern volatile unsigned char           ADPREVL             __at(0x224);
#ifndef _LIB_BUILD
asm("ADPREVL equ 0224h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREV                   :8;
    };
    struct {
        unsigned ADPREV0                :1;
        unsigned ADPREV1                :1;
        unsigned ADPREV2                :1;
        unsigned ADPREV3                :1;
        unsigned ADPREV4                :1;
        unsigned ADPREV5                :1;
        unsigned ADPREV6                :1;
        unsigned ADPREV7                :1;
    };
    struct {
        unsigned ADPREV                 :8;
    };
    struct {
        unsigned PREV0                  :1;
        unsigned PREV1                  :1;
        unsigned PREV2                  :1;
        unsigned PREV3                  :1;
        unsigned PREV4                  :1;
        unsigned PREV5                  :1;
        unsigned PREV6                  :1;
        unsigned PREV7                  :1;
    };
} ADPREVLbits_t;
extern volatile ADPREVLbits_t ADPREVLbits __at(0x224);
// bitfield macros
#define _ADPREVL_PREV_POSN                                  0x0
#define _ADPREVL_PREV_POSITION                              0x0
#define _ADPREVL_PREV_SIZE                                  0x8
#define _ADPREVL_PREV_LENGTH                                0x8
#define _ADPREVL_PREV_MASK                                  0xFF
#define _ADPREVL_ADPREV0_POSN                               0x0
#define _ADPREVL_ADPREV0_POSITION                           0x0
#define _ADPREVL_ADPREV0_SIZE                               0x1
#define _ADPREVL_ADPREV0_LENGTH                             0x1
#define _ADPREVL_ADPREV0_MASK                               0x1
#define _ADPREVL_ADPREV1_POSN                               0x1
#define _ADPREVL_ADPREV1_POSITION                           0x1
#define _ADPREVL_ADPREV1_SIZE                               0x1
#define _ADPREVL_ADPREV1_LENGTH                             0x1
#define _ADPREVL_ADPREV1_MASK                               0x2
#define _ADPREVL_ADPREV2_POSN                               0x2
#define _ADPREVL_ADPREV2_POSITION                           0x2
#define _ADPREVL_ADPREV2_SIZE                               0x1
#define _ADPREVL_ADPREV2_LENGTH                             0x1
#define _ADPREVL_ADPREV2_MASK                               0x4
#define _ADPREVL_ADPREV3_POSN                               0x3
#define _ADPREVL_ADPREV3_POSITION                           0x3
#define _ADPREVL_ADPREV3_SIZE                               0x1
#define _ADPREVL_ADPREV3_LENGTH                             0x1
#define _ADPREVL_ADPREV3_MASK                               0x8
#define _ADPREVL_ADPREV4_POSN                               0x4
#define _ADPREVL_ADPREV4_POSITION                           0x4
#define _ADPREVL_ADPREV4_SIZE                               0x1
#define _ADPREVL_ADPREV4_LENGTH                             0x1
#define _ADPREVL_ADPREV4_MASK                               0x10
#define _ADPREVL_ADPREV5_POSN                               0x5
#define _ADPREVL_ADPREV5_POSITION                           0x5
#define _ADPREVL_ADPREV5_SIZE                               0x1
#define _ADPREVL_ADPREV5_LENGTH                             0x1
#define _ADPREVL_ADPREV5_MASK                               0x20
#define _ADPREVL_ADPREV6_POSN                               0x6
#define _ADPREVL_ADPREV6_POSITION                           0x6
#define _ADPREVL_ADPREV6_SIZE                               0x1
#define _ADPREVL_ADPREV6_LENGTH                             0x1
#define _ADPREVL_ADPREV6_MASK                               0x40
#define _ADPREVL_ADPREV7_POSN                               0x7
#define _ADPREVL_ADPREV7_POSITION                           0x7
#define _ADPREVL_ADPREV7_SIZE                               0x1
#define _ADPREVL_ADPREV7_LENGTH                             0x1
#define _ADPREVL_ADPREV7_MASK                               0x80
#define _ADPREVL_ADPREV_POSN                                0x0
#define _ADPREVL_ADPREV_POSITION                            0x0
#define _ADPREVL_ADPREV_SIZE                                0x8
#define _ADPREVL_ADPREV_LENGTH                              0x8
#define _ADPREVL_ADPREV_MASK                                0xFF
#define _ADPREVL_PREV0_POSN                                 0x0
#define _ADPREVL_PREV0_POSITION                             0x0
#define _ADPREVL_PREV0_SIZE                                 0x1
#define _ADPREVL_PREV0_LENGTH                               0x1
#define _ADPREVL_PREV0_MASK                                 0x1
#define _ADPREVL_PREV1_POSN                                 0x1
#define _ADPREVL_PREV1_POSITION                             0x1
#define _ADPREVL_PREV1_SIZE                                 0x1
#define _ADPREVL_PREV1_LENGTH                               0x1
#define _ADPREVL_PREV1_MASK                                 0x2
#define _ADPREVL_PREV2_POSN                                 0x2
#define _ADPREVL_PREV2_POSITION                             0x2
#define _ADPREVL_PREV2_SIZE                                 0x1
#define _ADPREVL_PREV2_LENGTH                               0x1
#define _ADPREVL_PREV2_MASK                                 0x4
#define _ADPREVL_PREV3_POSN                                 0x3
#define _ADPREVL_PREV3_POSITION                             0x3
#define _ADPREVL_PREV3_SIZE                                 0x1
#define _ADPREVL_PREV3_LENGTH                               0x1
#define _ADPREVL_PREV3_MASK                                 0x8
#define _ADPREVL_PREV4_POSN                                 0x4
#define _ADPREVL_PREV4_POSITION                             0x4
#define _ADPREVL_PREV4_SIZE                                 0x1
#define _ADPREVL_PREV4_LENGTH                               0x1
#define _ADPREVL_PREV4_MASK                                 0x10
#define _ADPREVL_PREV5_POSN                                 0x5
#define _ADPREVL_PREV5_POSITION                             0x5
#define _ADPREVL_PREV5_SIZE                                 0x1
#define _ADPREVL_PREV5_LENGTH                               0x1
#define _ADPREVL_PREV5_MASK                                 0x20
#define _ADPREVL_PREV6_POSN                                 0x6
#define _ADPREVL_PREV6_POSITION                             0x6
#define _ADPREVL_PREV6_SIZE                                 0x1
#define _ADPREVL_PREV6_LENGTH                               0x1
#define _ADPREVL_PREV6_MASK                                 0x40
#define _ADPREVL_PREV7_POSN                                 0x7
#define _ADPREVL_PREV7_POSITION                             0x7
#define _ADPREVL_PREV7_SIZE                                 0x1
#define _ADPREVL_PREV7_LENGTH                               0x1
#define _ADPREVL_PREV7_MASK                                 0x80

// Register: ADPREVH
#define ADPREVH ADPREVH
extern volatile unsigned char           ADPREVH             __at(0x225);
#ifndef _LIB_BUILD
asm("ADPREVH equ 0225h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREV                   :8;
    };
    struct {
        unsigned ADPREV8                :1;
        unsigned ADPREV9                :1;
        unsigned ADPREV10               :1;
        unsigned ADPREV11               :1;
        unsigned ADPREV12               :1;
        unsigned ADPREV13               :1;
        unsigned ADPREV14               :1;
        unsigned ADPREV15               :1;
    };
    struct {
        unsigned ADPREV                 :8;
    };
    struct {
        unsigned PREV8                  :1;
        unsigned PREV9                  :1;
        unsigned PREV10                 :1;
        unsigned PREV11                 :1;
        unsigned PREV12                 :1;
        unsigned PREV13                 :1;
        unsigned PREV14                 :1;
        unsigned PREV15                 :1;
    };
} ADPREVHbits_t;
extern volatile ADPREVHbits_t ADPREVHbits __at(0x225);
// bitfield macros
#define _ADPREVH_PREV_POSN                                  0x0
#define _ADPREVH_PREV_POSITION                              0x0
#define _ADPREVH_PREV_SIZE                                  0x8
#define _ADPREVH_PREV_LENGTH                                0x8
#define _ADPREVH_PREV_MASK                                  0xFF
#define _ADPREVH_ADPREV8_POSN                               0x0
#define _ADPREVH_ADPREV8_POSITION                           0x0
#define _ADPREVH_ADPREV8_SIZE                               0x1
#define _ADPREVH_ADPREV8_LENGTH                             0x1
#define _ADPREVH_ADPREV8_MASK                               0x1
#define _ADPREVH_ADPREV9_POSN                               0x1
#define _ADPREVH_ADPREV9_POSITION                           0x1
#define _ADPREVH_ADPREV9_SIZE                               0x1
#define _ADPREVH_ADPREV9_LENGTH                             0x1
#define _ADPREVH_ADPREV9_MASK                               0x2
#define _ADPREVH_ADPREV10_POSN                              0x2
#define _ADPREVH_ADPREV10_POSITION                          0x2
#define _ADPREVH_ADPREV10_SIZE                              0x1
#define _ADPREVH_ADPREV10_LENGTH                            0x1
#define _ADPREVH_ADPREV10_MASK                              0x4
#define _ADPREVH_ADPREV11_POSN                              0x3
#define _ADPREVH_ADPREV11_POSITION                          0x3
#define _ADPREVH_ADPREV11_SIZE                              0x1
#define _ADPREVH_ADPREV11_LENGTH                            0x1
#define _ADPREVH_ADPREV11_MASK                              0x8
#define _ADPREVH_ADPREV12_POSN                              0x4
#define _ADPREVH_ADPREV12_POSITION                          0x4
#define _ADPREVH_ADPREV12_SIZE                              0x1
#define _ADPREVH_ADPREV12_LENGTH                            0x1
#define _ADPREVH_ADPREV12_MASK                              0x10
#define _ADPREVH_ADPREV13_POSN                              0x5
#define _ADPREVH_ADPREV13_POSITION                          0x5
#define _ADPREVH_ADPREV13_SIZE                              0x1
#define _ADPREVH_ADPREV13_LENGTH                            0x1
#define _ADPREVH_ADPREV13_MASK                              0x20
#define _ADPREVH_ADPREV14_POSN                              0x6
#define _ADPREVH_ADPREV14_POSITION                          0x6
#define _ADPREVH_ADPREV14_SIZE                              0x1
#define _ADPREVH_ADPREV14_LENGTH                            0x1
#define _ADPREVH_ADPREV14_MASK                              0x40
#define _ADPREVH_ADPREV15_POSN                              0x7
#define _ADPREVH_ADPREV15_POSITION                          0x7
#define _ADPREVH_ADPREV15_SIZE                              0x1
#define _ADPREVH_ADPREV15_LENGTH                            0x1
#define _ADPREVH_ADPREV15_MASK                              0x80
#define _ADPREVH_ADPREV_POSN                                0x0
#define _ADPREVH_ADPREV_POSITION                            0x0
#define _ADPREVH_ADPREV_SIZE                                0x8
#define _ADPREVH_ADPREV_LENGTH                              0x8
#define _ADPREVH_ADPREV_MASK                                0xFF
#define _ADPREVH_PREV8_POSN                                 0x0
#define _ADPREVH_PREV8_POSITION                             0x0
#define _ADPREVH_PREV8_SIZE                                 0x1
#define _ADPREVH_PREV8_LENGTH                               0x1
#define _ADPREVH_PREV8_MASK                                 0x1
#define _ADPREVH_PREV9_POSN                                 0x1
#define _ADPREVH_PREV9_POSITION                             0x1
#define _ADPREVH_PREV9_SIZE                                 0x1
#define _ADPREVH_PREV9_LENGTH                               0x1
#define _ADPREVH_PREV9_MASK                                 0x2
#define _ADPREVH_PREV10_POSN                                0x2
#define _ADPREVH_PREV10_POSITION                            0x2
#define _ADPREVH_PREV10_SIZE                                0x1
#define _ADPREVH_PREV10_LENGTH                              0x1
#define _ADPREVH_PREV10_MASK                                0x4
#define _ADPREVH_PREV11_POSN                                0x3
#define _ADPREVH_PREV11_POSITION                            0x3
#define _ADPREVH_PREV11_SIZE                                0x1
#define _ADPREVH_PREV11_LENGTH                              0x1
#define _ADPREVH_PREV11_MASK                                0x8
#define _ADPREVH_PREV12_POSN                                0x4
#define _ADPREVH_PREV12_POSITION                            0x4
#define _ADPREVH_PREV12_SIZE                                0x1
#define _ADPREVH_PREV12_LENGTH                              0x1
#define _ADPREVH_PREV12_MASK                                0x10
#define _ADPREVH_PREV13_POSN                                0x5
#define _ADPREVH_PREV13_POSITION                            0x5
#define _ADPREVH_PREV13_SIZE                                0x1
#define _ADPREVH_PREV13_LENGTH                              0x1
#define _ADPREVH_PREV13_MASK                                0x20
#define _ADPREVH_PREV14_POSN                                0x6
#define _ADPREVH_PREV14_POSITION                            0x6
#define _ADPREVH_PREV14_SIZE                                0x1
#define _ADPREVH_PREV14_LENGTH                              0x1
#define _ADPREVH_PREV14_MASK                                0x40
#define _ADPREVH_PREV15_POSN                                0x7
#define _ADPREVH_PREV15_POSITION                            0x7
#define _ADPREVH_PREV15_SIZE                                0x1
#define _ADPREVH_PREV15_LENGTH                              0x1
#define _ADPREVH_PREV15_MASK                                0x80

// Register: ADRES
#define ADRES ADRES
extern volatile unsigned short          ADRES               __at(0x226);
#ifndef _LIB_BUILD
asm("ADRES equ 0226h");
#endif

// Register: ADRESL
#define ADRESL ADRESL
extern volatile unsigned char           ADRESL              __at(0x226);
#ifndef _LIB_BUILD
asm("ADRESL equ 0226h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RES                    :8;
    };
    struct {
        unsigned ADRES0                 :1;
        unsigned ADRES1                 :1;
        unsigned ADRES2                 :1;
        unsigned ADRES3                 :1;
        unsigned ADRES4                 :1;
        unsigned ADRES5                 :1;
        unsigned ADRES6                 :1;
        unsigned ADRES7                 :1;
    };
    struct {
        unsigned ADRES                  :8;
    };
    struct {
        unsigned RES0                   :1;
        unsigned RES1                   :1;
        unsigned RES2                   :1;
        unsigned RES3                   :1;
        unsigned RES4                   :1;
        unsigned RES5                   :1;
        unsigned RES6                   :1;
        unsigned RES7                   :1;
    };
} ADRESLbits_t;
extern volatile ADRESLbits_t ADRESLbits __at(0x226);
// bitfield macros
#define _ADRESL_RES_POSN                                    0x0
#define _ADRESL_RES_POSITION                                0x0
#define _ADRESL_RES_SIZE                                    0x8
#define _ADRESL_RES_LENGTH                                  0x8
#define _ADRESL_RES_MASK                                    0xFF
#define _ADRESL_ADRES0_POSN                                 0x0
#define _ADRESL_ADRES0_POSITION                             0x0
#define _ADRESL_ADRES0_SIZE                                 0x1
#define _ADRESL_ADRES0_LENGTH                               0x1
#define _ADRESL_ADRES0_MASK                                 0x1
#define _ADRESL_ADRES1_POSN                                 0x1
#define _ADRESL_ADRES1_POSITION                             0x1
#define _ADRESL_ADRES1_SIZE                                 0x1
#define _ADRESL_ADRES1_LENGTH                               0x1
#define _ADRESL_ADRES1_MASK                                 0x2
#define _ADRESL_ADRES2_POSN                                 0x2
#define _ADRESL_ADRES2_POSITION                             0x2
#define _ADRESL_ADRES2_SIZE                                 0x1
#define _ADRESL_ADRES2_LENGTH                               0x1
#define _ADRESL_ADRES2_MASK                                 0x4
#define _ADRESL_ADRES3_POSN                                 0x3
#define _ADRESL_ADRES3_POSITION                             0x3
#define _ADRESL_ADRES3_SIZE                                 0x1
#define _ADRESL_ADRES3_LENGTH                               0x1
#define _ADRESL_ADRES3_MASK                                 0x8
#define _ADRESL_ADRES4_POSN                                 0x4
#define _ADRESL_ADRES4_POSITION                             0x4
#define _ADRESL_ADRES4_SIZE                                 0x1
#define _ADRESL_ADRES4_LENGTH                               0x1
#define _ADRESL_ADRES4_MASK                                 0x10
#define _ADRESL_ADRES5_POSN                                 0x5
#define _ADRESL_ADRES5_POSITION                             0x5
#define _ADRESL_ADRES5_SIZE                                 0x1
#define _ADRESL_ADRES5_LENGTH                               0x1
#define _ADRESL_ADRES5_MASK                                 0x20
#define _ADRESL_ADRES6_POSN                                 0x6
#define _ADRESL_ADRES6_POSITION                             0x6
#define _ADRESL_ADRES6_SIZE                                 0x1
#define _ADRESL_ADRES6_LENGTH                               0x1
#define _ADRESL_ADRES6_MASK                                 0x40
#define _ADRESL_ADRES7_POSN                                 0x7
#define _ADRESL_ADRES7_POSITION                             0x7
#define _ADRESL_ADRES7_SIZE                                 0x1
#define _ADRESL_ADRES7_LENGTH                               0x1
#define _ADRESL_ADRES7_MASK                                 0x80
#define _ADRESL_ADRES_POSN                                  0x0
#define _ADRESL_ADRES_POSITION                              0x0
#define _ADRESL_ADRES_SIZE                                  0x8
#define _ADRESL_ADRES_LENGTH                                0x8
#define _ADRESL_ADRES_MASK                                  0xFF
#define _ADRESL_RES0_POSN                                   0x0
#define _ADRESL_RES0_POSITION                               0x0
#define _ADRESL_RES0_SIZE                                   0x1
#define _ADRESL_RES0_LENGTH                                 0x1
#define _ADRESL_RES0_MASK                                   0x1
#define _ADRESL_RES1_POSN                                   0x1
#define _ADRESL_RES1_POSITION                               0x1
#define _ADRESL_RES1_SIZE                                   0x1
#define _ADRESL_RES1_LENGTH                                 0x1
#define _ADRESL_RES1_MASK                                   0x2
#define _ADRESL_RES2_POSN                                   0x2
#define _ADRESL_RES2_POSITION                               0x2
#define _ADRESL_RES2_SIZE                                   0x1
#define _ADRESL_RES2_LENGTH                                 0x1
#define _ADRESL_RES2_MASK                                   0x4
#define _ADRESL_RES3_POSN                                   0x3
#define _ADRESL_RES3_POSITION                               0x3
#define _ADRESL_RES3_SIZE                                   0x1
#define _ADRESL_RES3_LENGTH                                 0x1
#define _ADRESL_RES3_MASK                                   0x8
#define _ADRESL_RES4_POSN                                   0x4
#define _ADRESL_RES4_POSITION                               0x4
#define _ADRESL_RES4_SIZE                                   0x1
#define _ADRESL_RES4_LENGTH                                 0x1
#define _ADRESL_RES4_MASK                                   0x10
#define _ADRESL_RES5_POSN                                   0x5
#define _ADRESL_RES5_POSITION                               0x5
#define _ADRESL_RES5_SIZE                                   0x1
#define _ADRESL_RES5_LENGTH                                 0x1
#define _ADRESL_RES5_MASK                                   0x20
#define _ADRESL_RES6_POSN                                   0x6
#define _ADRESL_RES6_POSITION                               0x6
#define _ADRESL_RES6_SIZE                                   0x1
#define _ADRESL_RES6_LENGTH                                 0x1
#define _ADRESL_RES6_MASK                                   0x40
#define _ADRESL_RES7_POSN                                   0x7
#define _ADRESL_RES7_POSITION                               0x7
#define _ADRESL_RES7_SIZE                                   0x1
#define _ADRESL_RES7_LENGTH                                 0x1
#define _ADRESL_RES7_MASK                                   0x80

// Register: ADRESH
#define ADRESH ADRESH
extern volatile unsigned char           ADRESH              __at(0x227);
#ifndef _LIB_BUILD
asm("ADRESH equ 0227h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADRES8                 :1;
        unsigned ADRES9                 :1;
        unsigned ADRES10                :1;
        unsigned ADRES11                :1;
        unsigned ADRES12                :1;
        unsigned ADRES13                :1;
        unsigned ADRES14                :1;
        unsigned ADRES15                :1;
    };
    struct {
        unsigned ADRES                  :8;
    };
    struct {
        unsigned RES8                   :1;
        unsigned RES9                   :1;
        unsigned RES10                  :1;
        unsigned RES11                  :1;
        unsigned RES12                  :1;
        unsigned RES13                  :1;
        unsigned RES14                  :1;
        unsigned RES15                  :1;
    };
} ADRESHbits_t;
extern volatile ADRESHbits_t ADRESHbits __at(0x227);
// bitfield macros
#define _ADRESH_ADRES8_POSN                                 0x0
#define _ADRESH_ADRES8_POSITION                             0x0
#define _ADRESH_ADRES8_SIZE                                 0x1
#define _ADRESH_ADRES8_LENGTH                               0x1
#define _ADRESH_ADRES8_MASK                                 0x1
#define _ADRESH_ADRES9_POSN                                 0x1
#define _ADRESH_ADRES9_POSITION                             0x1
#define _ADRESH_ADRES9_SIZE                                 0x1
#define _ADRESH_ADRES9_LENGTH                               0x1
#define _ADRESH_ADRES9_MASK                                 0x2
#define _ADRESH_ADRES10_POSN                                0x2
#define _ADRESH_ADRES10_POSITION                            0x2
#define _ADRESH_ADRES10_SIZE                                0x1
#define _ADRESH_ADRES10_LENGTH                              0x1
#define _ADRESH_ADRES10_MASK                                0x4
#define _ADRESH_ADRES11_POSN                                0x3
#define _ADRESH_ADRES11_POSITION                            0x3
#define _ADRESH_ADRES11_SIZE                                0x1
#define _ADRESH_ADRES11_LENGTH                              0x1
#define _ADRESH_ADRES11_MASK                                0x8
#define _ADRESH_ADRES12_POSN                                0x4
#define _ADRESH_ADRES12_POSITION                            0x4
#define _ADRESH_ADRES12_SIZE                                0x1
#define _ADRESH_ADRES12_LENGTH                              0x1
#define _ADRESH_ADRES12_MASK                                0x10
#define _ADRESH_ADRES13_POSN                                0x5
#define _ADRESH_ADRES13_POSITION                            0x5
#define _ADRESH_ADRES13_SIZE                                0x1
#define _ADRESH_ADRES13_LENGTH                              0x1
#define _ADRESH_ADRES13_MASK                                0x20
#define _ADRESH_ADRES14_POSN                                0x6
#define _ADRESH_ADRES14_POSITION                            0x6
#define _ADRESH_ADRES14_SIZE                                0x1
#define _ADRESH_ADRES14_LENGTH                              0x1
#define _ADRESH_ADRES14_MASK                                0x40
#define _ADRESH_ADRES15_POSN                                0x7
#define _ADRESH_ADRES15_POSITION                            0x7
#define _ADRESH_ADRES15_SIZE                                0x1
#define _ADRESH_ADRES15_LENGTH                              0x1
#define _ADRESH_ADRES15_MASK                                0x80
#define _ADRESH_ADRES_POSN                                  0x0
#define _ADRESH_ADRES_POSITION                              0x0
#define _ADRESH_ADRES_SIZE                                  0x8
#define _ADRESH_ADRES_LENGTH                                0x8
#define _ADRESH_ADRES_MASK                                  0xFF
#define _ADRESH_RES8_POSN                                   0x0
#define _ADRESH_RES8_POSITION                               0x0
#define _ADRESH_RES8_SIZE                                   0x1
#define _ADRESH_RES8_LENGTH                                 0x1
#define _ADRESH_RES8_MASK                                   0x1
#define _ADRESH_RES9_POSN                                   0x1
#define _ADRESH_RES9_POSITION                               0x1
#define _ADRESH_RES9_SIZE                                   0x1
#define _ADRESH_RES9_LENGTH                                 0x1
#define _ADRESH_RES9_MASK                                   0x2
#define _ADRESH_RES10_POSN                                  0x2
#define _ADRESH_RES10_POSITION                              0x2
#define _ADRESH_RES10_SIZE                                  0x1
#define _ADRESH_RES10_LENGTH                                0x1
#define _ADRESH_RES10_MASK                                  0x4
#define _ADRESH_RES11_POSN                                  0x3
#define _ADRESH_RES11_POSITION                              0x3
#define _ADRESH_RES11_SIZE                                  0x1
#define _ADRESH_RES11_LENGTH                                0x1
#define _ADRESH_RES11_MASK                                  0x8
#define _ADRESH_RES12_POSN                                  0x4
#define _ADRESH_RES12_POSITION                              0x4
#define _ADRESH_RES12_SIZE                                  0x1
#define _ADRESH_RES12_LENGTH                                0x1
#define _ADRESH_RES12_MASK                                  0x10
#define _ADRESH_RES13_POSN                                  0x5
#define _ADRESH_RES13_POSITION                              0x5
#define _ADRESH_RES13_SIZE                                  0x1
#define _ADRESH_RES13_LENGTH                                0x1
#define _ADRESH_RES13_MASK                                  0x20
#define _ADRESH_RES14_POSN                                  0x6
#define _ADRESH_RES14_POSITION                              0x6
#define _ADRESH_RES14_SIZE                                  0x1
#define _ADRESH_RES14_LENGTH                                0x1
#define _ADRESH_RES14_MASK                                  0x40
#define _ADRESH_RES15_POSN                                  0x7
#define _ADRESH_RES15_POSITION                              0x7
#define _ADRESH_RES15_SIZE                                  0x1
#define _ADRESH_RES15_LENGTH                                0x1
#define _ADRESH_RES15_MASK                                  0x80

// Register: ADPCH
#define ADPCH ADPCH
extern volatile unsigned char           ADPCH               __at(0x228);
#ifndef _LIB_BUILD
asm("ADPCH equ 0228h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :8;
    };
    struct {
        unsigned ADPCH0                 :1;
        unsigned ADPCH1                 :1;
        unsigned ADPCH2                 :1;
        unsigned ADPCH3                 :1;
        unsigned ADPCH4                 :1;
        unsigned ADPCH5                 :1;
    };
} ADPCHbits_t;
extern volatile ADPCHbits_t ADPCHbits __at(0x228);
// bitfield macros
#define _ADPCH_PCH_POSN                                     0x0
#define _ADPCH_PCH_POSITION                                 0x0
#define _ADPCH_PCH_SIZE                                     0x8
#define _ADPCH_PCH_LENGTH                                   0x8
#define _ADPCH_PCH_MASK                                     0xFF
#define _ADPCH_ADPCH0_POSN                                  0x0
#define _ADPCH_ADPCH0_POSITION                              0x0
#define _ADPCH_ADPCH0_SIZE                                  0x1
#define _ADPCH_ADPCH0_LENGTH                                0x1
#define _ADPCH_ADPCH0_MASK                                  0x1
#define _ADPCH_ADPCH1_POSN                                  0x1
#define _ADPCH_ADPCH1_POSITION                              0x1
#define _ADPCH_ADPCH1_SIZE                                  0x1
#define _ADPCH_ADPCH1_LENGTH                                0x1
#define _ADPCH_ADPCH1_MASK                                  0x2
#define _ADPCH_ADPCH2_POSN                                  0x2
#define _ADPCH_ADPCH2_POSITION                              0x2
#define _ADPCH_ADPCH2_SIZE                                  0x1
#define _ADPCH_ADPCH2_LENGTH                                0x1
#define _ADPCH_ADPCH2_MASK                                  0x4
#define _ADPCH_ADPCH3_POSN                                  0x3
#define _ADPCH_ADPCH3_POSITION                              0x3
#define _ADPCH_ADPCH3_SIZE                                  0x1
#define _ADPCH_ADPCH3_LENGTH                                0x1
#define _ADPCH_ADPCH3_MASK                                  0x8
#define _ADPCH_ADPCH4_POSN                                  0x4
#define _ADPCH_ADPCH4_POSITION                              0x4
#define _ADPCH_ADPCH4_SIZE                                  0x1
#define _ADPCH_ADPCH4_LENGTH                                0x1
#define _ADPCH_ADPCH4_MASK                                  0x10
#define _ADPCH_ADPCH5_POSN                                  0x5
#define _ADPCH_ADPCH5_POSITION                              0x5
#define _ADPCH_ADPCH5_SIZE                                  0x1
#define _ADPCH_ADPCH5_LENGTH                                0x1
#define _ADPCH_ADPCH5_MASK                                  0x20

// Register: ADNCH
#define ADNCH ADNCH
extern volatile unsigned char           ADNCH               __at(0x229);
#ifndef _LIB_BUILD
asm("ADNCH equ 0229h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NCH                    :8;
    };
    struct {
        unsigned ADNCH0                 :1;
        unsigned ADNCH1                 :1;
        unsigned ADNCH2                 :1;
        unsigned ADNCH3                 :1;
        unsigned ADNCH4                 :1;
        unsigned ADNCH5                 :1;
    };
} ADNCHbits_t;
extern volatile ADNCHbits_t ADNCHbits __at(0x229);
// bitfield macros
#define _ADNCH_NCH_POSN                                     0x0
#define _ADNCH_NCH_POSITION                                 0x0
#define _ADNCH_NCH_SIZE                                     0x8
#define _ADNCH_NCH_LENGTH                                   0x8
#define _ADNCH_NCH_MASK                                     0xFF
#define _ADNCH_ADNCH0_POSN                                  0x0
#define _ADNCH_ADNCH0_POSITION                              0x0
#define _ADNCH_ADNCH0_SIZE                                  0x1
#define _ADNCH_ADNCH0_LENGTH                                0x1
#define _ADNCH_ADNCH0_MASK                                  0x1
#define _ADNCH_ADNCH1_POSN                                  0x1
#define _ADNCH_ADNCH1_POSITION                              0x1
#define _ADNCH_ADNCH1_SIZE                                  0x1
#define _ADNCH_ADNCH1_LENGTH                                0x1
#define _ADNCH_ADNCH1_MASK                                  0x2
#define _ADNCH_ADNCH2_POSN                                  0x2
#define _ADNCH_ADNCH2_POSITION                              0x2
#define _ADNCH_ADNCH2_SIZE                                  0x1
#define _ADNCH_ADNCH2_LENGTH                                0x1
#define _ADNCH_ADNCH2_MASK                                  0x4
#define _ADNCH_ADNCH3_POSN                                  0x3
#define _ADNCH_ADNCH3_POSITION                              0x3
#define _ADNCH_ADNCH3_SIZE                                  0x1
#define _ADNCH_ADNCH3_LENGTH                                0x1
#define _ADNCH_ADNCH3_MASK                                  0x8
#define _ADNCH_ADNCH4_POSN                                  0x4
#define _ADNCH_ADNCH4_POSITION                              0x4
#define _ADNCH_ADNCH4_SIZE                                  0x1
#define _ADNCH_ADNCH4_LENGTH                                0x1
#define _ADNCH_ADNCH4_MASK                                  0x10
#define _ADNCH_ADNCH5_POSN                                  0x5
#define _ADNCH_ADNCH5_POSITION                              0x5
#define _ADNCH_ADNCH5_SIZE                                  0x1
#define _ADNCH_ADNCH5_LENGTH                                0x1
#define _ADNCH_ADNCH5_MASK                                  0x20

// Register: ADACQ
#define ADACQ ADACQ
extern volatile unsigned short          ADACQ               __at(0x22A);
#ifndef _LIB_BUILD
asm("ADACQ equ 022Ah");
#endif

// Register: ADACQL
#define ADACQL ADACQL
extern volatile unsigned char           ADACQL              __at(0x22A);
#ifndef _LIB_BUILD
asm("ADACQL equ 022Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACQ                    :8;
    };
    struct {
        unsigned ADACQ0                 :1;
        unsigned ADACQ1                 :1;
        unsigned ADACQ2                 :1;
        unsigned ADACQ3                 :1;
        unsigned ADACQ4                 :1;
        unsigned ADACQ5                 :1;
        unsigned ADACQ6                 :1;
        unsigned ADACQ7                 :1;
    };
    struct {
        unsigned ADACQ                  :8;
    };
    struct {
        unsigned ACQ0                   :1;
        unsigned ACQ1                   :1;
        unsigned ACQ2                   :1;
        unsigned ACQ3                   :1;
        unsigned ACQ4                   :1;
        unsigned ACQ5                   :1;
        unsigned ACQ6                   :1;
        unsigned ACQ7                   :1;
    };
} ADACQLbits_t;
extern volatile ADACQLbits_t ADACQLbits __at(0x22A);
// bitfield macros
#define _ADACQL_ACQ_POSN                                    0x0
#define _ADACQL_ACQ_POSITION                                0x0
#define _ADACQL_ACQ_SIZE                                    0x8
#define _ADACQL_ACQ_LENGTH                                  0x8
#define _ADACQL_ACQ_MASK                                    0xFF
#define _ADACQL_ADACQ0_POSN                                 0x0
#define _ADACQL_ADACQ0_POSITION                             0x0
#define _ADACQL_ADACQ0_SIZE                                 0x1
#define _ADACQL_ADACQ0_LENGTH                               0x1
#define _ADACQL_ADACQ0_MASK                                 0x1
#define _ADACQL_ADACQ1_POSN                                 0x1
#define _ADACQL_ADACQ1_POSITION                             0x1
#define _ADACQL_ADACQ1_SIZE                                 0x1
#define _ADACQL_ADACQ1_LENGTH                               0x1
#define _ADACQL_ADACQ1_MASK                                 0x2
#define _ADACQL_ADACQ2_POSN                                 0x2
#define _ADACQL_ADACQ2_POSITION                             0x2
#define _ADACQL_ADACQ2_SIZE                                 0x1
#define _ADACQL_ADACQ2_LENGTH                               0x1
#define _ADACQL_ADACQ2_MASK                                 0x4
#define _ADACQL_ADACQ3_POSN                                 0x3
#define _ADACQL_ADACQ3_POSITION                             0x3
#define _ADACQL_ADACQ3_SIZE                                 0x1
#define _ADACQL_ADACQ3_LENGTH                               0x1
#define _ADACQL_ADACQ3_MASK                                 0x8
#define _ADACQL_ADACQ4_POSN                                 0x4
#define _ADACQL_ADACQ4_POSITION                             0x4
#define _ADACQL_ADACQ4_SIZE                                 0x1
#define _ADACQL_ADACQ4_LENGTH                               0x1
#define _ADACQL_ADACQ4_MASK                                 0x10
#define _ADACQL_ADACQ5_POSN                                 0x5
#define _ADACQL_ADACQ5_POSITION                             0x5
#define _ADACQL_ADACQ5_SIZE                                 0x1
#define _ADACQL_ADACQ5_LENGTH                               0x1
#define _ADACQL_ADACQ5_MASK                                 0x20
#define _ADACQL_ADACQ6_POSN                                 0x6
#define _ADACQL_ADACQ6_POSITION                             0x6
#define _ADACQL_ADACQ6_SIZE                                 0x1
#define _ADACQL_ADACQ6_LENGTH                               0x1
#define _ADACQL_ADACQ6_MASK                                 0x40
#define _ADACQL_ADACQ7_POSN                                 0x7
#define _ADACQL_ADACQ7_POSITION                             0x7
#define _ADACQL_ADACQ7_SIZE                                 0x1
#define _ADACQL_ADACQ7_LENGTH                               0x1
#define _ADACQL_ADACQ7_MASK                                 0x80
#define _ADACQL_ADACQ_POSN                                  0x0
#define _ADACQL_ADACQ_POSITION                              0x0
#define _ADACQL_ADACQ_SIZE                                  0x8
#define _ADACQL_ADACQ_LENGTH                                0x8
#define _ADACQL_ADACQ_MASK                                  0xFF
#define _ADACQL_ACQ0_POSN                                   0x0
#define _ADACQL_ACQ0_POSITION                               0x0
#define _ADACQL_ACQ0_SIZE                                   0x1
#define _ADACQL_ACQ0_LENGTH                                 0x1
#define _ADACQL_ACQ0_MASK                                   0x1
#define _ADACQL_ACQ1_POSN                                   0x1
#define _ADACQL_ACQ1_POSITION                               0x1
#define _ADACQL_ACQ1_SIZE                                   0x1
#define _ADACQL_ACQ1_LENGTH                                 0x1
#define _ADACQL_ACQ1_MASK                                   0x2
#define _ADACQL_ACQ2_POSN                                   0x2
#define _ADACQL_ACQ2_POSITION                               0x2
#define _ADACQL_ACQ2_SIZE                                   0x1
#define _ADACQL_ACQ2_LENGTH                                 0x1
#define _ADACQL_ACQ2_MASK                                   0x4
#define _ADACQL_ACQ3_POSN                                   0x3
#define _ADACQL_ACQ3_POSITION                               0x3
#define _ADACQL_ACQ3_SIZE                                   0x1
#define _ADACQL_ACQ3_LENGTH                                 0x1
#define _ADACQL_ACQ3_MASK                                   0x8
#define _ADACQL_ACQ4_POSN                                   0x4
#define _ADACQL_ACQ4_POSITION                               0x4
#define _ADACQL_ACQ4_SIZE                                   0x1
#define _ADACQL_ACQ4_LENGTH                                 0x1
#define _ADACQL_ACQ4_MASK                                   0x10
#define _ADACQL_ACQ5_POSN                                   0x5
#define _ADACQL_ACQ5_POSITION                               0x5
#define _ADACQL_ACQ5_SIZE                                   0x1
#define _ADACQL_ACQ5_LENGTH                                 0x1
#define _ADACQL_ACQ5_MASK                                   0x20
#define _ADACQL_ACQ6_POSN                                   0x6
#define _ADACQL_ACQ6_POSITION                               0x6
#define _ADACQL_ACQ6_SIZE                                   0x1
#define _ADACQL_ACQ6_LENGTH                                 0x1
#define _ADACQL_ACQ6_MASK                                   0x40
#define _ADACQL_ACQ7_POSN                                   0x7
#define _ADACQL_ACQ7_POSITION                               0x7
#define _ADACQL_ACQ7_SIZE                                   0x1
#define _ADACQL_ACQ7_LENGTH                                 0x1
#define _ADACQL_ACQ7_MASK                                   0x80

// Register: ADACQH
#define ADACQH ADACQH
extern volatile unsigned char           ADACQH              __at(0x22B);
#ifndef _LIB_BUILD
asm("ADACQH equ 022Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACQ                    :5;
    };
    struct {
        unsigned ADACQ8                 :1;
        unsigned ADACQ9                 :1;
        unsigned ADACQ10                :1;
        unsigned ADACQ11                :1;
        unsigned ADACQ12                :1;
    };
    struct {
        unsigned ADACQ                  :5;
    };
    struct {
        unsigned ACQ8                   :1;
        unsigned ACQ9                   :1;
        unsigned ACQ10                  :1;
        unsigned ACQ11                  :1;
        unsigned ACQ12                  :1;
    };
} ADACQHbits_t;
extern volatile ADACQHbits_t ADACQHbits __at(0x22B);
// bitfield macros
#define _ADACQH_ACQ_POSN                                    0x0
#define _ADACQH_ACQ_POSITION                                0x0
#define _ADACQH_ACQ_SIZE                                    0x5
#define _ADACQH_ACQ_LENGTH                                  0x5
#define _ADACQH_ACQ_MASK                                    0x1F
#define _ADACQH_ADACQ8_POSN                                 0x0
#define _ADACQH_ADACQ8_POSITION                             0x0
#define _ADACQH_ADACQ8_SIZE                                 0x1
#define _ADACQH_ADACQ8_LENGTH                               0x1
#define _ADACQH_ADACQ8_MASK                                 0x1
#define _ADACQH_ADACQ9_POSN                                 0x1
#define _ADACQH_ADACQ9_POSITION                             0x1
#define _ADACQH_ADACQ9_SIZE                                 0x1
#define _ADACQH_ADACQ9_LENGTH                               0x1
#define _ADACQH_ADACQ9_MASK                                 0x2
#define _ADACQH_ADACQ10_POSN                                0x2
#define _ADACQH_ADACQ10_POSITION                            0x2
#define _ADACQH_ADACQ10_SIZE                                0x1
#define _ADACQH_ADACQ10_LENGTH                              0x1
#define _ADACQH_ADACQ10_MASK                                0x4
#define _ADACQH_ADACQ11_POSN                                0x3
#define _ADACQH_ADACQ11_POSITION                            0x3
#define _ADACQH_ADACQ11_SIZE                                0x1
#define _ADACQH_ADACQ11_LENGTH                              0x1
#define _ADACQH_ADACQ11_MASK                                0x8
#define _ADACQH_ADACQ12_POSN                                0x4
#define _ADACQH_ADACQ12_POSITION                            0x4
#define _ADACQH_ADACQ12_SIZE                                0x1
#define _ADACQH_ADACQ12_LENGTH                              0x1
#define _ADACQH_ADACQ12_MASK                                0x10
#define _ADACQH_ADACQ_POSN                                  0x0
#define _ADACQH_ADACQ_POSITION                              0x0
#define _ADACQH_ADACQ_SIZE                                  0x5
#define _ADACQH_ADACQ_LENGTH                                0x5
#define _ADACQH_ADACQ_MASK                                  0x1F
#define _ADACQH_ACQ8_POSN                                   0x0
#define _ADACQH_ACQ8_POSITION                               0x0
#define _ADACQH_ACQ8_SIZE                                   0x1
#define _ADACQH_ACQ8_LENGTH                                 0x1
#define _ADACQH_ACQ8_MASK                                   0x1
#define _ADACQH_ACQ9_POSN                                   0x1
#define _ADACQH_ACQ9_POSITION                               0x1
#define _ADACQH_ACQ9_SIZE                                   0x1
#define _ADACQH_ACQ9_LENGTH                                 0x1
#define _ADACQH_ACQ9_MASK                                   0x2
#define _ADACQH_ACQ10_POSN                                  0x2
#define _ADACQH_ACQ10_POSITION                              0x2
#define _ADACQH_ACQ10_SIZE                                  0x1
#define _ADACQH_ACQ10_LENGTH                                0x1
#define _ADACQH_ACQ10_MASK                                  0x4
#define _ADACQH_ACQ11_POSN                                  0x3
#define _ADACQH_ACQ11_POSITION                              0x3
#define _ADACQH_ACQ11_SIZE                                  0x1
#define _ADACQH_ACQ11_LENGTH                                0x1
#define _ADACQH_ACQ11_MASK                                  0x8
#define _ADACQH_ACQ12_POSN                                  0x4
#define _ADACQH_ACQ12_POSITION                              0x4
#define _ADACQH_ACQ12_SIZE                                  0x1
#define _ADACQH_ACQ12_LENGTH                                0x1
#define _ADACQH_ACQ12_MASK                                  0x10

// Register: ADCAP
#define ADCAP ADCAP
extern volatile unsigned char           ADCAP               __at(0x22C);
#ifndef _LIB_BUILD
asm("ADCAP equ 022Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CAP                    :8;
    };
    struct {
        unsigned ADCAP0                 :1;
        unsigned ADCAP1                 :1;
        unsigned ADCAP2                 :1;
        unsigned ADCAP3                 :1;
        unsigned ADCAP4                 :1;
    };
} ADCAPbits_t;
extern volatile ADCAPbits_t ADCAPbits __at(0x22C);
// bitfield macros
#define _ADCAP_CAP_POSN                                     0x0
#define _ADCAP_CAP_POSITION                                 0x0
#define _ADCAP_CAP_SIZE                                     0x8
#define _ADCAP_CAP_LENGTH                                   0x8
#define _ADCAP_CAP_MASK                                     0xFF
#define _ADCAP_ADCAP0_POSN                                  0x0
#define _ADCAP_ADCAP0_POSITION                              0x0
#define _ADCAP_ADCAP0_SIZE                                  0x1
#define _ADCAP_ADCAP0_LENGTH                                0x1
#define _ADCAP_ADCAP0_MASK                                  0x1
#define _ADCAP_ADCAP1_POSN                                  0x1
#define _ADCAP_ADCAP1_POSITION                              0x1
#define _ADCAP_ADCAP1_SIZE                                  0x1
#define _ADCAP_ADCAP1_LENGTH                                0x1
#define _ADCAP_ADCAP1_MASK                                  0x2
#define _ADCAP_ADCAP2_POSN                                  0x2
#define _ADCAP_ADCAP2_POSITION                              0x2
#define _ADCAP_ADCAP2_SIZE                                  0x1
#define _ADCAP_ADCAP2_LENGTH                                0x1
#define _ADCAP_ADCAP2_MASK                                  0x4
#define _ADCAP_ADCAP3_POSN                                  0x3
#define _ADCAP_ADCAP3_POSITION                              0x3
#define _ADCAP_ADCAP3_SIZE                                  0x1
#define _ADCAP_ADCAP3_LENGTH                                0x1
#define _ADCAP_ADCAP3_MASK                                  0x8
#define _ADCAP_ADCAP4_POSN                                  0x4
#define _ADCAP_ADCAP4_POSITION                              0x4
#define _ADCAP_ADCAP4_SIZE                                  0x1
#define _ADCAP_ADCAP4_LENGTH                                0x1
#define _ADCAP_ADCAP4_MASK                                  0x10

// Register: ADPRE
#define ADPRE ADPRE
extern volatile unsigned short          ADPRE               __at(0x22D);
#ifndef _LIB_BUILD
asm("ADPRE equ 022Dh");
#endif

// Register: ADPREL
#define ADPREL ADPREL
extern volatile unsigned char           ADPREL              __at(0x22D);
#ifndef _LIB_BUILD
asm("ADPREL equ 022Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRE                    :8;
    };
    struct {
        unsigned PRE0                   :1;
        unsigned PRE1                   :1;
        unsigned PRE2                   :1;
        unsigned PRE3                   :1;
        unsigned PRE4                   :1;
        unsigned PRE5                   :1;
        unsigned PRE6                   :1;
        unsigned PRE7                   :1;
    };
    struct {
        unsigned ADPRE                  :8;
    };
    struct {
        unsigned ADPRE0                 :1;
        unsigned ADPRE1                 :1;
        unsigned ADPRE2                 :1;
        unsigned ADPRE3                 :1;
        unsigned ADPRE4                 :1;
        unsigned ADPRE5                 :1;
        unsigned ADPRE6                 :1;
        unsigned ADPRE7                 :1;
    };
} ADPRELbits_t;
extern volatile ADPRELbits_t ADPRELbits __at(0x22D);
// bitfield macros
#define _ADPREL_PRE_POSN                                    0x0
#define _ADPREL_PRE_POSITION                                0x0
#define _ADPREL_PRE_SIZE                                    0x8
#define _ADPREL_PRE_LENGTH                                  0x8
#define _ADPREL_PRE_MASK                                    0xFF
#define _ADPREL_PRE0_POSN                                   0x0
#define _ADPREL_PRE0_POSITION                               0x0
#define _ADPREL_PRE0_SIZE                                   0x1
#define _ADPREL_PRE0_LENGTH                                 0x1
#define _ADPREL_PRE0_MASK                                   0x1
#define _ADPREL_PRE1_POSN                                   0x1
#define _ADPREL_PRE1_POSITION                               0x1
#define _ADPREL_PRE1_SIZE                                   0x1
#define _ADPREL_PRE1_LENGTH                                 0x1
#define _ADPREL_PRE1_MASK                                   0x2
#define _ADPREL_PRE2_POSN                                   0x2
#define _ADPREL_PRE2_POSITION                               0x2
#define _ADPREL_PRE2_SIZE                                   0x1
#define _ADPREL_PRE2_LENGTH                                 0x1
#define _ADPREL_PRE2_MASK                                   0x4
#define _ADPREL_PRE3_POSN                                   0x3
#define _ADPREL_PRE3_POSITION                               0x3
#define _ADPREL_PRE3_SIZE                                   0x1
#define _ADPREL_PRE3_LENGTH                                 0x1
#define _ADPREL_PRE3_MASK                                   0x8
#define _ADPREL_PRE4_POSN                                   0x4
#define _ADPREL_PRE4_POSITION                               0x4
#define _ADPREL_PRE4_SIZE                                   0x1
#define _ADPREL_PRE4_LENGTH                                 0x1
#define _ADPREL_PRE4_MASK                                   0x10
#define _ADPREL_PRE5_POSN                                   0x5
#define _ADPREL_PRE5_POSITION                               0x5
#define _ADPREL_PRE5_SIZE                                   0x1
#define _ADPREL_PRE5_LENGTH                                 0x1
#define _ADPREL_PRE5_MASK                                   0x20
#define _ADPREL_PRE6_POSN                                   0x6
#define _ADPREL_PRE6_POSITION                               0x6
#define _ADPREL_PRE6_SIZE                                   0x1
#define _ADPREL_PRE6_LENGTH                                 0x1
#define _ADPREL_PRE6_MASK                                   0x40
#define _ADPREL_PRE7_POSN                                   0x7
#define _ADPREL_PRE7_POSITION                               0x7
#define _ADPREL_PRE7_SIZE                                   0x1
#define _ADPREL_PRE7_LENGTH                                 0x1
#define _ADPREL_PRE7_MASK                                   0x80
#define _ADPREL_ADPRE_POSN                                  0x0
#define _ADPREL_ADPRE_POSITION                              0x0
#define _ADPREL_ADPRE_SIZE                                  0x8
#define _ADPREL_ADPRE_LENGTH                                0x8
#define _ADPREL_ADPRE_MASK                                  0xFF
#define _ADPREL_ADPRE0_POSN                                 0x0
#define _ADPREL_ADPRE0_POSITION                             0x0
#define _ADPREL_ADPRE0_SIZE                                 0x1
#define _ADPREL_ADPRE0_LENGTH                               0x1
#define _ADPREL_ADPRE0_MASK                                 0x1
#define _ADPREL_ADPRE1_POSN                                 0x1
#define _ADPREL_ADPRE1_POSITION                             0x1
#define _ADPREL_ADPRE1_SIZE                                 0x1
#define _ADPREL_ADPRE1_LENGTH                               0x1
#define _ADPREL_ADPRE1_MASK                                 0x2
#define _ADPREL_ADPRE2_POSN                                 0x2
#define _ADPREL_ADPRE2_POSITION                             0x2
#define _ADPREL_ADPRE2_SIZE                                 0x1
#define _ADPREL_ADPRE2_LENGTH                               0x1
#define _ADPREL_ADPRE2_MASK                                 0x4
#define _ADPREL_ADPRE3_POSN                                 0x3
#define _ADPREL_ADPRE3_POSITION                             0x3
#define _ADPREL_ADPRE3_SIZE                                 0x1
#define _ADPREL_ADPRE3_LENGTH                               0x1
#define _ADPREL_ADPRE3_MASK                                 0x8
#define _ADPREL_ADPRE4_POSN                                 0x4
#define _ADPREL_ADPRE4_POSITION                             0x4
#define _ADPREL_ADPRE4_SIZE                                 0x1
#define _ADPREL_ADPRE4_LENGTH                               0x1
#define _ADPREL_ADPRE4_MASK                                 0x10
#define _ADPREL_ADPRE5_POSN                                 0x5
#define _ADPREL_ADPRE5_POSITION                             0x5
#define _ADPREL_ADPRE5_SIZE                                 0x1
#define _ADPREL_ADPRE5_LENGTH                               0x1
#define _ADPREL_ADPRE5_MASK                                 0x20
#define _ADPREL_ADPRE6_POSN                                 0x6
#define _ADPREL_ADPRE6_POSITION                             0x6
#define _ADPREL_ADPRE6_SIZE                                 0x1
#define _ADPREL_ADPRE6_LENGTH                               0x1
#define _ADPREL_ADPRE6_MASK                                 0x40
#define _ADPREL_ADPRE7_POSN                                 0x7
#define _ADPREL_ADPRE7_POSITION                             0x7
#define _ADPREL_ADPRE7_SIZE                                 0x1
#define _ADPREL_ADPRE7_LENGTH                               0x1
#define _ADPREL_ADPRE7_MASK                                 0x80

// Register: ADPREH
#define ADPREH ADPREH
extern volatile unsigned char           ADPREH              __at(0x22E);
#ifndef _LIB_BUILD
asm("ADPREH equ 022Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRE                    :5;
    };
    struct {
        unsigned PRE8                   :1;
        unsigned PRE9                   :1;
        unsigned PRE10                  :1;
        unsigned PRE11                  :1;
        unsigned PRE12                  :1;
    };
    struct {
        unsigned ADPRE                  :5;
    };
    struct {
        unsigned ADPRE8                 :1;
        unsigned ADPRE9                 :1;
        unsigned ADPRE10                :1;
        unsigned ADPRE11                :1;
        unsigned ADPRE12                :1;
    };
} ADPREHbits_t;
extern volatile ADPREHbits_t ADPREHbits __at(0x22E);
// bitfield macros
#define _ADPREH_PRE_POSN                                    0x0
#define _ADPREH_PRE_POSITION                                0x0
#define _ADPREH_PRE_SIZE                                    0x5
#define _ADPREH_PRE_LENGTH                                  0x5
#define _ADPREH_PRE_MASK                                    0x1F
#define _ADPREH_PRE8_POSN                                   0x0
#define _ADPREH_PRE8_POSITION                               0x0
#define _ADPREH_PRE8_SIZE                                   0x1
#define _ADPREH_PRE8_LENGTH                                 0x1
#define _ADPREH_PRE8_MASK                                   0x1
#define _ADPREH_PRE9_POSN                                   0x1
#define _ADPREH_PRE9_POSITION                               0x1
#define _ADPREH_PRE9_SIZE                                   0x1
#define _ADPREH_PRE9_LENGTH                                 0x1
#define _ADPREH_PRE9_MASK                                   0x2
#define _ADPREH_PRE10_POSN                                  0x2
#define _ADPREH_PRE10_POSITION                              0x2
#define _ADPREH_PRE10_SIZE                                  0x1
#define _ADPREH_PRE10_LENGTH                                0x1
#define _ADPREH_PRE10_MASK                                  0x4
#define _ADPREH_PRE11_POSN                                  0x3
#define _ADPREH_PRE11_POSITION                              0x3
#define _ADPREH_PRE11_SIZE                                  0x1
#define _ADPREH_PRE11_LENGTH                                0x1
#define _ADPREH_PRE11_MASK                                  0x8
#define _ADPREH_PRE12_POSN                                  0x4
#define _ADPREH_PRE12_POSITION                              0x4
#define _ADPREH_PRE12_SIZE                                  0x1
#define _ADPREH_PRE12_LENGTH                                0x1
#define _ADPREH_PRE12_MASK                                  0x10
#define _ADPREH_ADPRE_POSN                                  0x0
#define _ADPREH_ADPRE_POSITION                              0x0
#define _ADPREH_ADPRE_SIZE                                  0x5
#define _ADPREH_ADPRE_LENGTH                                0x5
#define _ADPREH_ADPRE_MASK                                  0x1F
#define _ADPREH_ADPRE8_POSN                                 0x0
#define _ADPREH_ADPRE8_POSITION                             0x0
#define _ADPREH_ADPRE8_SIZE                                 0x1
#define _ADPREH_ADPRE8_LENGTH                               0x1
#define _ADPREH_ADPRE8_MASK                                 0x1
#define _ADPREH_ADPRE9_POSN                                 0x1
#define _ADPREH_ADPRE9_POSITION                             0x1
#define _ADPREH_ADPRE9_SIZE                                 0x1
#define _ADPREH_ADPRE9_LENGTH                               0x1
#define _ADPREH_ADPRE9_MASK                                 0x2
#define _ADPREH_ADPRE10_POSN                                0x2
#define _ADPREH_ADPRE10_POSITION                            0x2
#define _ADPREH_ADPRE10_SIZE                                0x1
#define _ADPREH_ADPRE10_LENGTH                              0x1
#define _ADPREH_ADPRE10_MASK                                0x4
#define _ADPREH_ADPRE11_POSN                                0x3
#define _ADPREH_ADPRE11_POSITION                            0x3
#define _ADPREH_ADPRE11_SIZE                                0x1
#define _ADPREH_ADPRE11_LENGTH                              0x1
#define _ADPREH_ADPRE11_MASK                                0x8
#define _ADPREH_ADPRE12_POSN                                0x4
#define _ADPREH_ADPRE12_POSITION                            0x4
#define _ADPREH_ADPRE12_SIZE                                0x1
#define _ADPREH_ADPRE12_LENGTH                              0x1
#define _ADPREH_ADPRE12_MASK                                0x10

// Register: ADCON0
#define ADCON0 ADCON0
extern volatile unsigned char           ADCON0              __at(0x22F);
#ifndef _LIB_BUILD
asm("ADCON0 equ 022Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned GO                     :1;
        unsigned                        :1;
        unsigned FM                     :2;
        unsigned CS                     :1;
        unsigned                        :1;
        unsigned CONT                   :1;
        unsigned ON                     :1;
    };
    struct {
        unsigned ADGO                   :1;
        unsigned                        :1;
        unsigned ADFM                   :2;
        unsigned ADCS                   :1;
        unsigned                        :1;
        unsigned ADCONT                 :1;
        unsigned ADON                   :1;
    };
    struct {
        unsigned DONE                   :1;
        unsigned                        :1;
        unsigned FM0                    :1;
    };
    struct {
        unsigned GO_NOT_DONE            :1;
    };
    struct {
        unsigned GO_nDONE               :1;
        unsigned                        :1;
        unsigned ADFM0                  :1;
    };
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits __at(0x22F);
// bitfield macros
#define _ADCON0_GO_POSN                                     0x0
#define _ADCON0_GO_POSITION                                 0x0
#define _ADCON0_GO_SIZE                                     0x1
#define _ADCON0_GO_LENGTH                                   0x1
#define _ADCON0_GO_MASK                                     0x1
#define _ADCON0_FM_POSN                                     0x2
#define _ADCON0_FM_POSITION                                 0x2
#define _ADCON0_FM_SIZE                                     0x2
#define _ADCON0_FM_LENGTH                                   0x2
#define _ADCON0_FM_MASK                                     0xC
#define _ADCON0_CS_POSN                                     0x4
#define _ADCON0_CS_POSITION                                 0x4
#define _ADCON0_CS_SIZE                                     0x1
#define _ADCON0_CS_LENGTH                                   0x1
#define _ADCON0_CS_MASK                                     0x10
#define _ADCON0_CONT_POSN                                   0x6
#define _ADCON0_CONT_POSITION                               0x6
#define _ADCON0_CONT_SIZE                                   0x1
#define _ADCON0_CONT_LENGTH                                 0x1
#define _ADCON0_CONT_MASK                                   0x40
#define _ADCON0_ON_POSN                                     0x7
#define _ADCON0_ON_POSITION                                 0x7
#define _ADCON0_ON_SIZE                                     0x1
#define _ADCON0_ON_LENGTH                                   0x1
#define _ADCON0_ON_MASK                                     0x80
#define _ADCON0_ADGO_POSN                                   0x0
#define _ADCON0_ADGO_POSITION                               0x0
#define _ADCON0_ADGO_SIZE                                   0x1
#define _ADCON0_ADGO_LENGTH                                 0x1
#define _ADCON0_ADGO_MASK                                   0x1
#define _ADCON0_ADFM_POSN                                   0x2
#define _ADCON0_ADFM_POSITION                               0x2
#define _ADCON0_ADFM_SIZE                                   0x2
#define _ADCON0_ADFM_LENGTH                                 0x2
#define _ADCON0_ADFM_MASK                                   0xC
#define _ADCON0_ADCS_POSN                                   0x4
#define _ADCON0_ADCS_POSITION                               0x4
#define _ADCON0_ADCS_SIZE                                   0x1
#define _ADCON0_ADCS_LENGTH                                 0x1
#define _ADCON0_ADCS_MASK                                   0x10
#define _ADCON0_ADCONT_POSN                                 0x6
#define _ADCON0_ADCONT_POSITION                             0x6
#define _ADCON0_ADCONT_SIZE                                 0x1
#define _ADCON0_ADCONT_LENGTH                               0x1
#define _ADCON0_ADCONT_MASK                                 0x40
#define _ADCON0_ADON_POSN                                   0x7
#define _ADCON0_ADON_POSITION                               0x7
#define _ADCON0_ADON_SIZE                                   0x1
#define _ADCON0_ADON_LENGTH                                 0x1
#define _ADCON0_ADON_MASK                                   0x80
#define _ADCON0_DONE_POSN                                   0x0
#define _ADCON0_DONE_POSITION                               0x0
#define _ADCON0_DONE_SIZE                                   0x1
#define _ADCON0_DONE_LENGTH                                 0x1
#define _ADCON0_DONE_MASK                                   0x1
#define _ADCON0_FM0_POSN                                    0x2
#define _ADCON0_FM0_POSITION                                0x2
#define _ADCON0_FM0_SIZE                                    0x1
#define _ADCON0_FM0_LENGTH                                  0x1
#define _ADCON0_FM0_MASK                                    0x4
#define _ADCON0_GO_NOT_DONE_POSN                            0x0
#define _ADCON0_GO_NOT_DONE_POSITION                        0x0
#define _ADCON0_GO_NOT_DONE_SIZE                            0x1
#define _ADCON0_GO_NOT_DONE_LENGTH                          0x1
#define _ADCON0_GO_NOT_DONE_MASK                            0x1
#define _ADCON0_GO_nDONE_POSN                               0x0
#define _ADCON0_GO_nDONE_POSITION                           0x0
#define _ADCON0_GO_nDONE_SIZE                               0x1
#define _ADCON0_GO_nDONE_LENGTH                             0x1
#define _ADCON0_GO_nDONE_MASK                               0x1
#define _ADCON0_ADFM0_POSN                                  0x2
#define _ADCON0_ADFM0_POSITION                              0x2
#define _ADCON0_ADFM0_SIZE                                  0x1
#define _ADCON0_ADFM0_LENGTH                                0x1
#define _ADCON0_ADFM0_MASK                                  0x4

// Register: ADCON1
#define ADCON1 ADCON1
extern volatile unsigned char           ADCON1              __at(0x230);
#ifndef _LIB_BUILD
asm("ADCON1 equ 0230h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DSEN                   :1;
        unsigned PCSC                   :1;
        unsigned                        :3;
        unsigned GPOL                   :1;
        unsigned IPEN                   :1;
        unsigned PPOL                   :1;
    };
    struct {
        unsigned ADDSEN                 :1;
        unsigned ADPCSC                 :1;
        unsigned                        :3;
        unsigned ADGPOL                 :1;
        unsigned ADIPEN                 :1;
        unsigned ADPPOL                 :1;
    };
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits __at(0x230);
// bitfield macros
#define _ADCON1_DSEN_POSN                                   0x0
#define _ADCON1_DSEN_POSITION                               0x0
#define _ADCON1_DSEN_SIZE                                   0x1
#define _ADCON1_DSEN_LENGTH                                 0x1
#define _ADCON1_DSEN_MASK                                   0x1
#define _ADCON1_PCSC_POSN                                   0x1
#define _ADCON1_PCSC_POSITION                               0x1
#define _ADCON1_PCSC_SIZE                                   0x1
#define _ADCON1_PCSC_LENGTH                                 0x1
#define _ADCON1_PCSC_MASK                                   0x2
#define _ADCON1_GPOL_POSN                                   0x5
#define _ADCON1_GPOL_POSITION                               0x5
#define _ADCON1_GPOL_SIZE                                   0x1
#define _ADCON1_GPOL_LENGTH                                 0x1
#define _ADCON1_GPOL_MASK                                   0x20
#define _ADCON1_IPEN_POSN                                   0x6
#define _ADCON1_IPEN_POSITION                               0x6
#define _ADCON1_IPEN_SIZE                                   0x1
#define _ADCON1_IPEN_LENGTH                                 0x1
#define _ADCON1_IPEN_MASK                                   0x40
#define _ADCON1_PPOL_POSN                                   0x7
#define _ADCON1_PPOL_POSITION                               0x7
#define _ADCON1_PPOL_SIZE                                   0x1
#define _ADCON1_PPOL_LENGTH                                 0x1
#define _ADCON1_PPOL_MASK                                   0x80
#define _ADCON1_ADDSEN_POSN                                 0x0
#define _ADCON1_ADDSEN_POSITION                             0x0
#define _ADCON1_ADDSEN_SIZE                                 0x1
#define _ADCON1_ADDSEN_LENGTH                               0x1
#define _ADCON1_ADDSEN_MASK                                 0x1
#define _ADCON1_ADPCSC_POSN                                 0x1
#define _ADCON1_ADPCSC_POSITION                             0x1
#define _ADCON1_ADPCSC_SIZE                                 0x1
#define _ADCON1_ADPCSC_LENGTH                               0x1
#define _ADCON1_ADPCSC_MASK                                 0x2
#define _ADCON1_ADGPOL_POSN                                 0x5
#define _ADCON1_ADGPOL_POSITION                             0x5
#define _ADCON1_ADGPOL_SIZE                                 0x1
#define _ADCON1_ADGPOL_LENGTH                               0x1
#define _ADCON1_ADGPOL_MASK                                 0x20
#define _ADCON1_ADIPEN_POSN                                 0x6
#define _ADCON1_ADIPEN_POSITION                             0x6
#define _ADCON1_ADIPEN_SIZE                                 0x1
#define _ADCON1_ADIPEN_LENGTH                               0x1
#define _ADCON1_ADIPEN_MASK                                 0x40
#define _ADCON1_ADPPOL_POSN                                 0x7
#define _ADCON1_ADPPOL_POSITION                             0x7
#define _ADCON1_ADPPOL_SIZE                                 0x1
#define _ADCON1_ADPPOL_LENGTH                               0x1
#define _ADCON1_ADPPOL_MASK                                 0x80

// Register: ADCON2
#define ADCON2 ADCON2
extern volatile unsigned char           ADCON2              __at(0x231);
#ifndef _LIB_BUILD
asm("ADCON2 equ 0231h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned MD                     :3;
        unsigned ACLR                   :1;
        unsigned CRS                    :3;
        unsigned PSIS                   :1;
    };
    struct {
        unsigned ADMD0                  :1;
        unsigned ADMD1                  :1;
        unsigned ADMD2                  :1;
        unsigned ADACLR                 :1;
        unsigned ADCRS0                 :1;
        unsigned ADCRS1                 :1;
        unsigned ADCRS2                 :1;
        unsigned ADPSIS                 :1;
    };
    struct {
        unsigned ADMD                   :3;
        unsigned                        :1;
        unsigned ADCRS                  :3;
    };
    struct {
        unsigned MD0                    :1;
        unsigned MD1                    :1;
        unsigned MD2                    :1;
        unsigned                        :1;
        unsigned CRS0                   :1;
        unsigned CRS1                   :1;
        unsigned CRS2                   :1;
    };
} ADCON2bits_t;
extern volatile ADCON2bits_t ADCON2bits __at(0x231);
// bitfield macros
#define _ADCON2_MD_POSN                                     0x0
#define _ADCON2_MD_POSITION                                 0x0
#define _ADCON2_MD_SIZE                                     0x3
#define _ADCON2_MD_LENGTH                                   0x3
#define _ADCON2_MD_MASK                                     0x7
#define _ADCON2_ACLR_POSN                                   0x3
#define _ADCON2_ACLR_POSITION                               0x3
#define _ADCON2_ACLR_SIZE                                   0x1
#define _ADCON2_ACLR_LENGTH                                 0x1
#define _ADCON2_ACLR_MASK                                   0x8
#define _ADCON2_CRS_POSN                                    0x4
#define _ADCON2_CRS_POSITION                                0x4
#define _ADCON2_CRS_SIZE                                    0x3
#define _ADCON2_CRS_LENGTH                                  0x3
#define _ADCON2_CRS_MASK                                    0x70
#define _ADCON2_PSIS_POSN                                   0x7
#define _ADCON2_PSIS_POSITION                               0x7
#define _ADCON2_PSIS_SIZE                                   0x1
#define _ADCON2_PSIS_LENGTH                                 0x1
#define _ADCON2_PSIS_MASK                                   0x80
#define _ADCON2_ADMD0_POSN                                  0x0
#define _ADCON2_ADMD0_POSITION                              0x0
#define _ADCON2_ADMD0_SIZE                                  0x1
#define _ADCON2_ADMD0_LENGTH                                0x1
#define _ADCON2_ADMD0_MASK                                  0x1
#define _ADCON2_ADMD1_POSN                                  0x1
#define _ADCON2_ADMD1_POSITION                              0x1
#define _ADCON2_ADMD1_SIZE                                  0x1
#define _ADCON2_ADMD1_LENGTH                                0x1
#define _ADCON2_ADMD1_MASK                                  0x2
#define _ADCON2_ADMD2_POSN                                  0x2
#define _ADCON2_ADMD2_POSITION                              0x2
#define _ADCON2_ADMD2_SIZE                                  0x1
#define _ADCON2_ADMD2_LENGTH                                0x1
#define _ADCON2_ADMD2_MASK                                  0x4
#define _ADCON2_ADACLR_POSN                                 0x3
#define _ADCON2_ADACLR_POSITION                             0x3
#define _ADCON2_ADACLR_SIZE                                 0x1
#define _ADCON2_ADACLR_LENGTH                               0x1
#define _ADCON2_ADACLR_MASK                                 0x8
#define _ADCON2_ADCRS0_POSN                                 0x4
#define _ADCON2_ADCRS0_POSITION                             0x4
#define _ADCON2_ADCRS0_SIZE                                 0x1
#define _ADCON2_ADCRS0_LENGTH                               0x1
#define _ADCON2_ADCRS0_MASK                                 0x10
#define _ADCON2_ADCRS1_POSN                                 0x5
#define _ADCON2_ADCRS1_POSITION                             0x5
#define _ADCON2_ADCRS1_SIZE                                 0x1
#define _ADCON2_ADCRS1_LENGTH                               0x1
#define _ADCON2_ADCRS1_MASK                                 0x20
#define _ADCON2_ADCRS2_POSN                                 0x6
#define _ADCON2_ADCRS2_POSITION                             0x6
#define _ADCON2_ADCRS2_SIZE                                 0x1
#define _ADCON2_ADCRS2_LENGTH                               0x1
#define _ADCON2_ADCRS2_MASK                                 0x40
#define _ADCON2_ADPSIS_POSN                                 0x7
#define _ADCON2_ADPSIS_POSITION                             0x7
#define _ADCON2_ADPSIS_SIZE                                 0x1
#define _ADCON2_ADPSIS_LENGTH                               0x1
#define _ADCON2_ADPSIS_MASK                                 0x80
#define _ADCON2_ADMD_POSN                                   0x0
#define _ADCON2_ADMD_POSITION                               0x0
#define _ADCON2_ADMD_SIZE                                   0x3
#define _ADCON2_ADMD_LENGTH                                 0x3
#define _ADCON2_ADMD_MASK                                   0x7
#define _ADCON2_ADCRS_POSN                                  0x4
#define _ADCON2_ADCRS_POSITION                              0x4
#define _ADCON2_ADCRS_SIZE                                  0x3
#define _ADCON2_ADCRS_LENGTH                                0x3
#define _ADCON2_ADCRS_MASK                                  0x70
#define _ADCON2_MD0_POSN                                    0x0
#define _ADCON2_MD0_POSITION                                0x0
#define _ADCON2_MD0_SIZE                                    0x1
#define _ADCON2_MD0_LENGTH                                  0x1
#define _ADCON2_MD0_MASK                                    0x1
#define _ADCON2_MD1_POSN                                    0x1
#define _ADCON2_MD1_POSITION                                0x1
#define _ADCON2_MD1_SIZE                                    0x1
#define _ADCON2_MD1_LENGTH                                  0x1
#define _ADCON2_MD1_MASK                                    0x2
#define _ADCON2_MD2_POSN                                    0x2
#define _ADCON2_MD2_POSITION                                0x2
#define _ADCON2_MD2_SIZE                                    0x1
#define _ADCON2_MD2_LENGTH                                  0x1
#define _ADCON2_MD2_MASK                                    0x4
#define _ADCON2_CRS0_POSN                                   0x4
#define _ADCON2_CRS0_POSITION                               0x4
#define _ADCON2_CRS0_SIZE                                   0x1
#define _ADCON2_CRS0_LENGTH                                 0x1
#define _ADCON2_CRS0_MASK                                   0x10
#define _ADCON2_CRS1_POSN                                   0x5
#define _ADCON2_CRS1_POSITION                               0x5
#define _ADCON2_CRS1_SIZE                                   0x1
#define _ADCON2_CRS1_LENGTH                                 0x1
#define _ADCON2_CRS1_MASK                                   0x20
#define _ADCON2_CRS2_POSN                                   0x6
#define _ADCON2_CRS2_POSITION                               0x6
#define _ADCON2_CRS2_SIZE                                   0x1
#define _ADCON2_CRS2_LENGTH                                 0x1
#define _ADCON2_CRS2_MASK                                   0x40

// Register: ADCON3
#define ADCON3 ADCON3
extern volatile unsigned char           ADCON3              __at(0x232);
#ifndef _LIB_BUILD
asm("ADCON3 equ 0232h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMD                    :3;
        unsigned SOI                    :1;
        unsigned CALC                   :3;
    };
    struct {
        unsigned ADTMD0                 :1;
        unsigned ADTMD1                 :1;
        unsigned ADTMD2                 :1;
        unsigned ADSOI                  :1;
        unsigned ADCALC0                :1;
        unsigned ADCALC1                :1;
        unsigned ADCALC2                :1;
    };
    struct {
        unsigned ADTMD                  :3;
        unsigned                        :1;
        unsigned ADCALC                 :3;
    };
    struct {
        unsigned TMD0                   :1;
        unsigned TMD1                   :1;
        unsigned TMD2                   :1;
        unsigned                        :1;
        unsigned CALC0                  :1;
        unsigned CALC1                  :1;
        unsigned CALC2                  :1;
    };
} ADCON3bits_t;
extern volatile ADCON3bits_t ADCON3bits __at(0x232);
// bitfield macros
#define _ADCON3_TMD_POSN                                    0x0
#define _ADCON3_TMD_POSITION                                0x0
#define _ADCON3_TMD_SIZE                                    0x3
#define _ADCON3_TMD_LENGTH                                  0x3
#define _ADCON3_TMD_MASK                                    0x7
#define _ADCON3_SOI_POSN                                    0x3
#define _ADCON3_SOI_POSITION                                0x3
#define _ADCON3_SOI_SIZE                                    0x1
#define _ADCON3_SOI_LENGTH                                  0x1
#define _ADCON3_SOI_MASK                                    0x8
#define _ADCON3_CALC_POSN                                   0x4
#define _ADCON3_CALC_POSITION                               0x4
#define _ADCON3_CALC_SIZE                                   0x3
#define _ADCON3_CALC_LENGTH                                 0x3
#define _ADCON3_CALC_MASK                                   0x70
#define _ADCON3_ADTMD0_POSN                                 0x0
#define _ADCON3_ADTMD0_POSITION                             0x0
#define _ADCON3_ADTMD0_SIZE                                 0x1
#define _ADCON3_ADTMD0_LENGTH                               0x1
#define _ADCON3_ADTMD0_MASK                                 0x1
#define _ADCON3_ADTMD1_POSN                                 0x1
#define _ADCON3_ADTMD1_POSITION                             0x1
#define _ADCON3_ADTMD1_SIZE                                 0x1
#define _ADCON3_ADTMD1_LENGTH                               0x1
#define _ADCON3_ADTMD1_MASK                                 0x2
#define _ADCON3_ADTMD2_POSN                                 0x2
#define _ADCON3_ADTMD2_POSITION                             0x2
#define _ADCON3_ADTMD2_SIZE                                 0x1
#define _ADCON3_ADTMD2_LENGTH                               0x1
#define _ADCON3_ADTMD2_MASK                                 0x4
#define _ADCON3_ADSOI_POSN                                  0x3
#define _ADCON3_ADSOI_POSITION                              0x3
#define _ADCON3_ADSOI_SIZE                                  0x1
#define _ADCON3_ADSOI_LENGTH                                0x1
#define _ADCON3_ADSOI_MASK                                  0x8
#define _ADCON3_ADCALC0_POSN                                0x4
#define _ADCON3_ADCALC0_POSITION                            0x4
#define _ADCON3_ADCALC0_SIZE                                0x1
#define _ADCON3_ADCALC0_LENGTH                              0x1
#define _ADCON3_ADCALC0_MASK                                0x10
#define _ADCON3_ADCALC1_POSN                                0x5
#define _ADCON3_ADCALC1_POSITION                            0x5
#define _ADCON3_ADCALC1_SIZE                                0x1
#define _ADCON3_ADCALC1_LENGTH                              0x1
#define _ADCON3_ADCALC1_MASK                                0x20
#define _ADCON3_ADCALC2_POSN                                0x6
#define _ADCON3_ADCALC2_POSITION                            0x6
#define _ADCON3_ADCALC2_SIZE                                0x1
#define _ADCON3_ADCALC2_LENGTH                              0x1
#define _ADCON3_ADCALC2_MASK                                0x40
#define _ADCON3_ADTMD_POSN                                  0x0
#define _ADCON3_ADTMD_POSITION                              0x0
#define _ADCON3_ADTMD_SIZE                                  0x3
#define _ADCON3_ADTMD_LENGTH                                0x3
#define _ADCON3_ADTMD_MASK                                  0x7
#define _ADCON3_ADCALC_POSN                                 0x4
#define _ADCON3_ADCALC_POSITION                             0x4
#define _ADCON3_ADCALC_SIZE                                 0x3
#define _ADCON3_ADCALC_LENGTH                               0x3
#define _ADCON3_ADCALC_MASK                                 0x70
#define _ADCON3_TMD0_POSN                                   0x0
#define _ADCON3_TMD0_POSITION                               0x0
#define _ADCON3_TMD0_SIZE                                   0x1
#define _ADCON3_TMD0_LENGTH                                 0x1
#define _ADCON3_TMD0_MASK                                   0x1
#define _ADCON3_TMD1_POSN                                   0x1
#define _ADCON3_TMD1_POSITION                               0x1
#define _ADCON3_TMD1_SIZE                                   0x1
#define _ADCON3_TMD1_LENGTH                                 0x1
#define _ADCON3_TMD1_MASK                                   0x2
#define _ADCON3_TMD2_POSN                                   0x2
#define _ADCON3_TMD2_POSITION                               0x2
#define _ADCON3_TMD2_SIZE                                   0x1
#define _ADCON3_TMD2_LENGTH                                 0x1
#define _ADCON3_TMD2_MASK                                   0x4
#define _ADCON3_CALC0_POSN                                  0x4
#define _ADCON3_CALC0_POSITION                              0x4
#define _ADCON3_CALC0_SIZE                                  0x1
#define _ADCON3_CALC0_LENGTH                                0x1
#define _ADCON3_CALC0_MASK                                  0x10
#define _ADCON3_CALC1_POSN                                  0x5
#define _ADCON3_CALC1_POSITION                              0x5
#define _ADCON3_CALC1_SIZE                                  0x1
#define _ADCON3_CALC1_LENGTH                                0x1
#define _ADCON3_CALC1_MASK                                  0x20
#define _ADCON3_CALC2_POSN                                  0x6
#define _ADCON3_CALC2_POSITION                              0x6
#define _ADCON3_CALC2_SIZE                                  0x1
#define _ADCON3_CALC2_LENGTH                                0x1
#define _ADCON3_CALC2_MASK                                  0x40

// Register: ADSTAT
#define ADSTAT ADSTAT
extern volatile unsigned char           ADSTAT              __at(0x233);
#ifndef _LIB_BUILD
asm("ADSTAT equ 0233h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STAT                   :3;
        unsigned                        :1;
        unsigned MATH                   :1;
        unsigned LTHR                   :1;
        unsigned UTHR                   :1;
        unsigned AOV                    :1;
    };
    struct {
        unsigned ADSTAT0                :1;
        unsigned ADSTAT1                :1;
        unsigned ADSTAT2                :1;
        unsigned                        :1;
        unsigned ADMATH                 :1;
        unsigned ADLTHR                 :1;
        unsigned ADUTHR                 :1;
        unsigned ADAOV                  :1;
    };
    struct {
        unsigned ADSTAT                 :3;
        unsigned                        :4;
        unsigned ADOV                   :1;
    };
    struct {
        unsigned STAT0                  :1;
        unsigned STAT1                  :1;
        unsigned STAT2                  :1;
        unsigned                        :4;
        unsigned OV                     :1;
    };
} ADSTATbits_t;
extern volatile ADSTATbits_t ADSTATbits __at(0x233);
// bitfield macros
#define _ADSTAT_STAT_POSN                                   0x0
#define _ADSTAT_STAT_POSITION                               0x0
#define _ADSTAT_STAT_SIZE                                   0x3
#define _ADSTAT_STAT_LENGTH                                 0x3
#define _ADSTAT_STAT_MASK                                   0x7
#define _ADSTAT_MATH_POSN                                   0x4
#define _ADSTAT_MATH_POSITION                               0x4
#define _ADSTAT_MATH_SIZE                                   0x1
#define _ADSTAT_MATH_LENGTH                                 0x1
#define _ADSTAT_MATH_MASK                                   0x10
#define _ADSTAT_LTHR_POSN                                   0x5
#define _ADSTAT_LTHR_POSITION                               0x5
#define _ADSTAT_LTHR_SIZE                                   0x1
#define _ADSTAT_LTHR_LENGTH                                 0x1
#define _ADSTAT_LTHR_MASK                                   0x20
#define _ADSTAT_UTHR_POSN                                   0x6
#define _ADSTAT_UTHR_POSITION                               0x6
#define _ADSTAT_UTHR_SIZE                                   0x1
#define _ADSTAT_UTHR_LENGTH                                 0x1
#define _ADSTAT_UTHR_MASK                                   0x40
#define _ADSTAT_AOV_POSN                                    0x7
#define _ADSTAT_AOV_POSITION                                0x7
#define _ADSTAT_AOV_SIZE                                    0x1
#define _ADSTAT_AOV_LENGTH                                  0x1
#define _ADSTAT_AOV_MASK                                    0x80
#define _ADSTAT_ADSTAT0_POSN                                0x0
#define _ADSTAT_ADSTAT0_POSITION                            0x0
#define _ADSTAT_ADSTAT0_SIZE                                0x1
#define _ADSTAT_ADSTAT0_LENGTH                              0x1
#define _ADSTAT_ADSTAT0_MASK                                0x1
#define _ADSTAT_ADSTAT1_POSN                                0x1
#define _ADSTAT_ADSTAT1_POSITION                            0x1
#define _ADSTAT_ADSTAT1_SIZE                                0x1
#define _ADSTAT_ADSTAT1_LENGTH                              0x1
#define _ADSTAT_ADSTAT1_MASK                                0x2
#define _ADSTAT_ADSTAT2_POSN                                0x2
#define _ADSTAT_ADSTAT2_POSITION                            0x2
#define _ADSTAT_ADSTAT2_SIZE                                0x1
#define _ADSTAT_ADSTAT2_LENGTH                              0x1
#define _ADSTAT_ADSTAT2_MASK                                0x4
#define _ADSTAT_ADMATH_POSN                                 0x4
#define _ADSTAT_ADMATH_POSITION                             0x4
#define _ADSTAT_ADMATH_SIZE                                 0x1
#define _ADSTAT_ADMATH_LENGTH                               0x1
#define _ADSTAT_ADMATH_MASK                                 0x10
#define _ADSTAT_ADLTHR_POSN                                 0x5
#define _ADSTAT_ADLTHR_POSITION                             0x5
#define _ADSTAT_ADLTHR_SIZE                                 0x1
#define _ADSTAT_ADLTHR_LENGTH                               0x1
#define _ADSTAT_ADLTHR_MASK                                 0x20
#define _ADSTAT_ADUTHR_POSN                                 0x6
#define _ADSTAT_ADUTHR_POSITION                             0x6
#define _ADSTAT_ADUTHR_SIZE                                 0x1
#define _ADSTAT_ADUTHR_LENGTH                               0x1
#define _ADSTAT_ADUTHR_MASK                                 0x40
#define _ADSTAT_ADAOV_POSN                                  0x7
#define _ADSTAT_ADAOV_POSITION                              0x7
#define _ADSTAT_ADAOV_SIZE                                  0x1
#define _ADSTAT_ADAOV_LENGTH                                0x1
#define _ADSTAT_ADAOV_MASK                                  0x80
#define _ADSTAT_ADSTAT_POSN                                 0x0
#define _ADSTAT_ADSTAT_POSITION                             0x0
#define _ADSTAT_ADSTAT_SIZE                                 0x3
#define _ADSTAT_ADSTAT_LENGTH                               0x3
#define _ADSTAT_ADSTAT_MASK                                 0x7
#define _ADSTAT_ADOV_POSN                                   0x7
#define _ADSTAT_ADOV_POSITION                               0x7
#define _ADSTAT_ADOV_SIZE                                   0x1
#define _ADSTAT_ADOV_LENGTH                                 0x1
#define _ADSTAT_ADOV_MASK                                   0x80
#define _ADSTAT_STAT0_POSN                                  0x0
#define _ADSTAT_STAT0_POSITION                              0x0
#define _ADSTAT_STAT0_SIZE                                  0x1
#define _ADSTAT_STAT0_LENGTH                                0x1
#define _ADSTAT_STAT0_MASK                                  0x1
#define _ADSTAT_STAT1_POSN                                  0x1
#define _ADSTAT_STAT1_POSITION                              0x1
#define _ADSTAT_STAT1_SIZE                                  0x1
#define _ADSTAT_STAT1_LENGTH                                0x1
#define _ADSTAT_STAT1_MASK                                  0x2
#define _ADSTAT_STAT2_POSN                                  0x2
#define _ADSTAT_STAT2_POSITION                              0x2
#define _ADSTAT_STAT2_SIZE                                  0x1
#define _ADSTAT_STAT2_LENGTH                                0x1
#define _ADSTAT_STAT2_MASK                                  0x4
#define _ADSTAT_OV_POSN                                     0x7
#define _ADSTAT_OV_POSITION                                 0x7
#define _ADSTAT_OV_SIZE                                     0x1
#define _ADSTAT_OV_LENGTH                                   0x1
#define _ADSTAT_OV_MASK                                     0x80

// Register: ADREF
#define ADREF ADREF
extern volatile unsigned char           ADREF               __at(0x234);
#ifndef _LIB_BUILD
asm("ADREF equ 0234h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREF                   :4;
        unsigned NREF                   :4;
    };
    struct {
        unsigned ADPREF                 :4;
        unsigned ADNREF                 :4;
    };
    struct {
        unsigned PREF0                  :1;
        unsigned PREF1                  :1;
        unsigned                        :2;
        unsigned NREF0                  :1;
    };
    struct {
        unsigned ADPREF0                :1;
        unsigned ADPREF1                :1;
        unsigned                        :2;
        unsigned ADNREF0                :1;
    };
} ADREFbits_t;
extern volatile ADREFbits_t ADREFbits __at(0x234);
// bitfield macros
#define _ADREF_PREF_POSN                                    0x0
#define _ADREF_PREF_POSITION                                0x0
#define _ADREF_PREF_SIZE                                    0x4
#define _ADREF_PREF_LENGTH                                  0x4
#define _ADREF_PREF_MASK                                    0xF
#define _ADREF_NREF_POSN                                    0x4
#define _ADREF_NREF_POSITION                                0x4
#define _ADREF_NREF_SIZE                                    0x4
#define _ADREF_NREF_LENGTH                                  0x4
#define _ADREF_NREF_MASK                                    0xF0
#define _ADREF_ADPREF_POSN                                  0x0
#define _ADREF_ADPREF_POSITION                              0x0
#define _ADREF_ADPREF_SIZE                                  0x4
#define _ADREF_ADPREF_LENGTH                                0x4
#define _ADREF_ADPREF_MASK                                  0xF
#define _ADREF_ADNREF_POSN                                  0x4
#define _ADREF_ADNREF_POSITION                              0x4
#define _ADREF_ADNREF_SIZE                                  0x4
#define _ADREF_ADNREF_LENGTH                                0x4
#define _ADREF_ADNREF_MASK                                  0xF0
#define _ADREF_PREF0_POSN                                   0x0
#define _ADREF_PREF0_POSITION                               0x0
#define _ADREF_PREF0_SIZE                                   0x1
#define _ADREF_PREF0_LENGTH                                 0x1
#define _ADREF_PREF0_MASK                                   0x1
#define _ADREF_PREF1_POSN                                   0x1
#define _ADREF_PREF1_POSITION                               0x1
#define _ADREF_PREF1_SIZE                                   0x1
#define _ADREF_PREF1_LENGTH                                 0x1
#define _ADREF_PREF1_MASK                                   0x2
#define _ADREF_NREF0_POSN                                   0x4
#define _ADREF_NREF0_POSITION                               0x4
#define _ADREF_NREF0_SIZE                                   0x1
#define _ADREF_NREF0_LENGTH                                 0x1
#define _ADREF_NREF0_MASK                                   0x10
#define _ADREF_ADPREF0_POSN                                 0x0
#define _ADREF_ADPREF0_POSITION                             0x0
#define _ADREF_ADPREF0_SIZE                                 0x1
#define _ADREF_ADPREF0_LENGTH                               0x1
#define _ADREF_ADPREF0_MASK                                 0x1
#define _ADREF_ADPREF1_POSN                                 0x1
#define _ADREF_ADPREF1_POSITION                             0x1
#define _ADREF_ADPREF1_SIZE                                 0x1
#define _ADREF_ADPREF1_LENGTH                               0x1
#define _ADREF_ADPREF1_MASK                                 0x2
#define _ADREF_ADNREF0_POSN                                 0x4
#define _ADREF_ADNREF0_POSITION                             0x4
#define _ADREF_ADNREF0_SIZE                                 0x1
#define _ADREF_ADNREF0_LENGTH                               0x1
#define _ADREF_ADNREF0_MASK                                 0x10

// Register: ADACT
#define ADACT ADACT
extern volatile unsigned char           ADACT               __at(0x235);
#ifndef _LIB_BUILD
asm("ADACT equ 0235h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACT                    :8;
    };
    struct {
        unsigned ADACT0                 :1;
        unsigned ADACT1                 :1;
        unsigned ADACT2                 :1;
        unsigned ADACT3                 :1;
        unsigned ADACT4                 :1;
        unsigned ADACT5                 :1;
    };
    struct {
        unsigned ADACT                  :8;
    };
    struct {
        unsigned ACT0                   :1;
        unsigned ACT1                   :1;
        unsigned ACT2                   :1;
        unsigned ACT3                   :1;
        unsigned ACT4                   :1;
        unsigned ACT5                   :1;
    };
} ADACTbits_t;
extern volatile ADACTbits_t ADACTbits __at(0x235);
// bitfield macros
#define _ADACT_ACT_POSN                                     0x0
#define _ADACT_ACT_POSITION                                 0x0
#define _ADACT_ACT_SIZE                                     0x8
#define _ADACT_ACT_LENGTH                                   0x8
#define _ADACT_ACT_MASK                                     0xFF
#define _ADACT_ADACT0_POSN                                  0x0
#define _ADACT_ADACT0_POSITION                              0x0
#define _ADACT_ADACT0_SIZE                                  0x1
#define _ADACT_ADACT0_LENGTH                                0x1
#define _ADACT_ADACT0_MASK                                  0x1
#define _ADACT_ADACT1_POSN                                  0x1
#define _ADACT_ADACT1_POSITION                              0x1
#define _ADACT_ADACT1_SIZE                                  0x1
#define _ADACT_ADACT1_LENGTH                                0x1
#define _ADACT_ADACT1_MASK                                  0x2
#define _ADACT_ADACT2_POSN                                  0x2
#define _ADACT_ADACT2_POSITION                              0x2
#define _ADACT_ADACT2_SIZE                                  0x1
#define _ADACT_ADACT2_LENGTH                                0x1
#define _ADACT_ADACT2_MASK                                  0x4
#define _ADACT_ADACT3_POSN                                  0x3
#define _ADACT_ADACT3_POSITION                              0x3
#define _ADACT_ADACT3_SIZE                                  0x1
#define _ADACT_ADACT3_LENGTH                                0x1
#define _ADACT_ADACT3_MASK                                  0x8
#define _ADACT_ADACT4_POSN                                  0x4
#define _ADACT_ADACT4_POSITION                              0x4
#define _ADACT_ADACT4_SIZE                                  0x1
#define _ADACT_ADACT4_LENGTH                                0x1
#define _ADACT_ADACT4_MASK                                  0x10
#define _ADACT_ADACT5_POSN                                  0x5
#define _ADACT_ADACT5_POSITION                              0x5
#define _ADACT_ADACT5_SIZE                                  0x1
#define _ADACT_ADACT5_LENGTH                                0x1
#define _ADACT_ADACT5_MASK                                  0x20
#define _ADACT_ADACT_POSN                                   0x0
#define _ADACT_ADACT_POSITION                               0x0
#define _ADACT_ADACT_SIZE                                   0x8
#define _ADACT_ADACT_LENGTH                                 0x8
#define _ADACT_ADACT_MASK                                   0xFF
#define _ADACT_ACT0_POSN                                    0x0
#define _ADACT_ACT0_POSITION                                0x0
#define _ADACT_ACT0_SIZE                                    0x1
#define _ADACT_ACT0_LENGTH                                  0x1
#define _ADACT_ACT0_MASK                                    0x1
#define _ADACT_ACT1_POSN                                    0x1
#define _ADACT_ACT1_POSITION                                0x1
#define _ADACT_ACT1_SIZE                                    0x1
#define _ADACT_ACT1_LENGTH                                  0x1
#define _ADACT_ACT1_MASK                                    0x2
#define _ADACT_ACT2_POSN                                    0x2
#define _ADACT_ACT2_POSITION                                0x2
#define _ADACT_ACT2_SIZE                                    0x1
#define _ADACT_ACT2_LENGTH                                  0x1
#define _ADACT_ACT2_MASK                                    0x4
#define _ADACT_ACT3_POSN                                    0x3
#define _ADACT_ACT3_POSITION                                0x3
#define _ADACT_ACT3_SIZE                                    0x1
#define _ADACT_ACT3_LENGTH                                  0x1
#define _ADACT_ACT3_MASK                                    0x8
#define _ADACT_ACT4_POSN                                    0x4
#define _ADACT_ACT4_POSITION                                0x4
#define _ADACT_ACT4_SIZE                                    0x1
#define _ADACT_ACT4_LENGTH                                  0x1
#define _ADACT_ACT4_MASK                                    0x10
#define _ADACT_ACT5_POSN                                    0x5
#define _ADACT_ACT5_POSITION                                0x5
#define _ADACT_ACT5_SIZE                                    0x1
#define _ADACT_ACT5_LENGTH                                  0x1
#define _ADACT_ACT5_MASK                                    0x20

// Register: ADCLK
#define ADCLK ADCLK
extern volatile unsigned char           ADCLK               __at(0x236);
#ifndef _LIB_BUILD
asm("ADCLK equ 0236h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CS                     :8;
    };
    struct {
        unsigned ADCS0                  :1;
        unsigned ADCS1                  :1;
        unsigned ADCS2                  :1;
        unsigned ADCS3                  :1;
        unsigned ADCS4                  :1;
        unsigned ADCS5                  :1;
    };
    struct {
        unsigned ADCS                   :8;
    };
    struct {
        unsigned CS0                    :1;
        unsigned CS1                    :1;
        unsigned CS2                    :1;
        unsigned CS3                    :1;
        unsigned CS4                    :1;
        unsigned CS5                    :1;
    };
} ADCLKbits_t;
extern volatile ADCLKbits_t ADCLKbits __at(0x236);
// bitfield macros
#define _ADCLK_CS_POSN                                      0x0
#define _ADCLK_CS_POSITION                                  0x0
#define _ADCLK_CS_SIZE                                      0x8
#define _ADCLK_CS_LENGTH                                    0x8
#define _ADCLK_CS_MASK                                      0xFF
#define _ADCLK_ADCS0_POSN                                   0x0
#define _ADCLK_ADCS0_POSITION                               0x0
#define _ADCLK_ADCS0_SIZE                                   0x1
#define _ADCLK_ADCS0_LENGTH                                 0x1
#define _ADCLK_ADCS0_MASK                                   0x1
#define _ADCLK_ADCS1_POSN                                   0x1
#define _ADCLK_ADCS1_POSITION                               0x1
#define _ADCLK_ADCS1_SIZE                                   0x1
#define _ADCLK_ADCS1_LENGTH                                 0x1
#define _ADCLK_ADCS1_MASK                                   0x2
#define _ADCLK_ADCS2_POSN                                   0x2
#define _ADCLK_ADCS2_POSITION                               0x2
#define _ADCLK_ADCS2_SIZE                                   0x1
#define _ADCLK_ADCS2_LENGTH                                 0x1
#define _ADCLK_ADCS2_MASK                                   0x4
#define _ADCLK_ADCS3_POSN                                   0x3
#define _ADCLK_ADCS3_POSITION                               0x3
#define _ADCLK_ADCS3_SIZE                                   0x1
#define _ADCLK_ADCS3_LENGTH                                 0x1
#define _ADCLK_ADCS3_MASK                                   0x8
#define _ADCLK_ADCS4_POSN                                   0x4
#define _ADCLK_ADCS4_POSITION                               0x4
#define _ADCLK_ADCS4_SIZE                                   0x1
#define _ADCLK_ADCS4_LENGTH                                 0x1
#define _ADCLK_ADCS4_MASK                                   0x10
#define _ADCLK_ADCS5_POSN                                   0x5
#define _ADCLK_ADCS5_POSITION                               0x5
#define _ADCLK_ADCS5_SIZE                                   0x1
#define _ADCLK_ADCS5_LENGTH                                 0x1
#define _ADCLK_ADCS5_MASK                                   0x20
#define _ADCLK_ADCS_POSN                                    0x0
#define _ADCLK_ADCS_POSITION                                0x0
#define _ADCLK_ADCS_SIZE                                    0x8
#define _ADCLK_ADCS_LENGTH                                  0x8
#define _ADCLK_ADCS_MASK                                    0xFF
#define _ADCLK_CS0_POSN                                     0x0
#define _ADCLK_CS0_POSITION                                 0x0
#define _ADCLK_CS0_SIZE                                     0x1
#define _ADCLK_CS0_LENGTH                                   0x1
#define _ADCLK_CS0_MASK                                     0x1
#define _ADCLK_CS1_POSN                                     0x1
#define _ADCLK_CS1_POSITION                                 0x1
#define _ADCLK_CS1_SIZE                                     0x1
#define _ADCLK_CS1_LENGTH                                   0x1
#define _ADCLK_CS1_MASK                                     0x2
#define _ADCLK_CS2_POSN                                     0x2
#define _ADCLK_CS2_POSITION                                 0x2
#define _ADCLK_CS2_SIZE                                     0x1
#define _ADCLK_CS2_LENGTH                                   0x1
#define _ADCLK_CS2_MASK                                     0x4
#define _ADCLK_CS3_POSN                                     0x3
#define _ADCLK_CS3_POSITION                                 0x3
#define _ADCLK_CS3_SIZE                                     0x1
#define _ADCLK_CS3_LENGTH                                   0x1
#define _ADCLK_CS3_MASK                                     0x8
#define _ADCLK_CS4_POSN                                     0x4
#define _ADCLK_CS4_POSITION                                 0x4
#define _ADCLK_CS4_SIZE                                     0x1
#define _ADCLK_CS4_LENGTH                                   0x1
#define _ADCLK_CS4_MASK                                     0x10
#define _ADCLK_CS5_POSN                                     0x5
#define _ADCLK_CS5_POSITION                                 0x5
#define _ADCLK_CS5_SIZE                                     0x1
#define _ADCLK_CS5_LENGTH                                   0x1
#define _ADCLK_CS5_MASK                                     0x20

// Register: ADCG1A
#define ADCG1A ADCG1A
extern volatile unsigned char           ADCG1A              __at(0x237);
#ifndef _LIB_BUILD
asm("ADCG1A equ 0237h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CGA0                   :1;
        unsigned CGA1                   :1;
        unsigned CGA2                   :1;
        unsigned                        :1;
        unsigned CGA4                   :1;
        unsigned CGA5                   :1;
    };
} ADCG1Abits_t;
extern volatile ADCG1Abits_t ADCG1Abits __at(0x237);
// bitfield macros
#define _ADCG1A_CGA0_POSN                                   0x0
#define _ADCG1A_CGA0_POSITION                               0x0
#define _ADCG1A_CGA0_SIZE                                   0x1
#define _ADCG1A_CGA0_LENGTH                                 0x1
#define _ADCG1A_CGA0_MASK                                   0x1
#define _ADCG1A_CGA1_POSN                                   0x1
#define _ADCG1A_CGA1_POSITION                               0x1
#define _ADCG1A_CGA1_SIZE                                   0x1
#define _ADCG1A_CGA1_LENGTH                                 0x1
#define _ADCG1A_CGA1_MASK                                   0x2
#define _ADCG1A_CGA2_POSN                                   0x2
#define _ADCG1A_CGA2_POSITION                               0x2
#define _ADCG1A_CGA2_SIZE                                   0x1
#define _ADCG1A_CGA2_LENGTH                                 0x1
#define _ADCG1A_CGA2_MASK                                   0x4
#define _ADCG1A_CGA4_POSN                                   0x4
#define _ADCG1A_CGA4_POSITION                               0x4
#define _ADCG1A_CGA4_SIZE                                   0x1
#define _ADCG1A_CGA4_LENGTH                                 0x1
#define _ADCG1A_CGA4_MASK                                   0x10
#define _ADCG1A_CGA5_POSN                                   0x5
#define _ADCG1A_CGA5_POSITION                               0x5
#define _ADCG1A_CGA5_SIZE                                   0x1
#define _ADCG1A_CGA5_LENGTH                                 0x1
#define _ADCG1A_CGA5_MASK                                   0x20

// Register: ADCG1C
#define ADCG1C ADCG1C
extern volatile unsigned char           ADCG1C              __at(0x239);
#ifndef _LIB_BUILD
asm("ADCG1C equ 0239h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CGC0                   :1;
        unsigned CGC1                   :1;
        unsigned                        :1;
        unsigned CGC3                   :1;
        unsigned CGC4                   :1;
        unsigned CGC5                   :1;
        unsigned CGC6                   :1;
        unsigned CGC7                   :1;
    };
} ADCG1Cbits_t;
extern volatile ADCG1Cbits_t ADCG1Cbits __at(0x239);
// bitfield macros
#define _ADCG1C_CGC0_POSN                                   0x0
#define _ADCG1C_CGC0_POSITION                               0x0
#define _ADCG1C_CGC0_SIZE                                   0x1
#define _ADCG1C_CGC0_LENGTH                                 0x1
#define _ADCG1C_CGC0_MASK                                   0x1
#define _ADCG1C_CGC1_POSN                                   0x1
#define _ADCG1C_CGC1_POSITION                               0x1
#define _ADCG1C_CGC1_SIZE                                   0x1
#define _ADCG1C_CGC1_LENGTH                                 0x1
#define _ADCG1C_CGC1_MASK                                   0x2
#define _ADCG1C_CGC3_POSN                                   0x3
#define _ADCG1C_CGC3_POSITION                               0x3
#define _ADCG1C_CGC3_SIZE                                   0x1
#define _ADCG1C_CGC3_LENGTH                                 0x1
#define _ADCG1C_CGC3_MASK                                   0x8
#define _ADCG1C_CGC4_POSN                                   0x4
#define _ADCG1C_CGC4_POSITION                               0x4
#define _ADCG1C_CGC4_SIZE                                   0x1
#define _ADCG1C_CGC4_LENGTH                                 0x1
#define _ADCG1C_CGC4_MASK                                   0x10
#define _ADCG1C_CGC5_POSN                                   0x5
#define _ADCG1C_CGC5_POSITION                               0x5
#define _ADCG1C_CGC5_SIZE                                   0x1
#define _ADCG1C_CGC5_LENGTH                                 0x1
#define _ADCG1C_CGC5_MASK                                   0x20
#define _ADCG1C_CGC6_POSN                                   0x6
#define _ADCG1C_CGC6_POSITION                               0x6
#define _ADCG1C_CGC6_SIZE                                   0x1
#define _ADCG1C_CGC6_LENGTH                                 0x1
#define _ADCG1C_CGC6_MASK                                   0x40
#define _ADCG1C_CGC7_POSN                                   0x7
#define _ADCG1C_CGC7_POSITION                               0x7
#define _ADCG1C_CGC7_SIZE                                   0x1
#define _ADCG1C_CGC7_LENGTH                                 0x1
#define _ADCG1C_CGC7_MASK                                   0x80

// Register: PMD0
#define PMD0 PMD0
extern volatile unsigned char           PMD0                __at(0x300);
#ifndef _LIB_BUILD
asm("PMD0 equ 0300h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMA1MD                 :1;
        unsigned DMA2MD                 :1;
        unsigned DMA3MD                 :1;
        unsigned DMA4MD                 :1;
        unsigned                        :1;
        unsigned CRCMD                  :1;
        unsigned SCANMD                 :1;
        unsigned SYSCMD                 :1;
    };
} PMD0bits_t;
extern volatile PMD0bits_t PMD0bits __at(0x300);
// bitfield macros
#define _PMD0_DMA1MD_POSN                                   0x0
#define _PMD0_DMA1MD_POSITION                               0x0
#define _PMD0_DMA1MD_SIZE                                   0x1
#define _PMD0_DMA1MD_LENGTH                                 0x1
#define _PMD0_DMA1MD_MASK                                   0x1
#define _PMD0_DMA2MD_POSN                                   0x1
#define _PMD0_DMA2MD_POSITION                               0x1
#define _PMD0_DMA2MD_SIZE                                   0x1
#define _PMD0_DMA2MD_LENGTH                                 0x1
#define _PMD0_DMA2MD_MASK                                   0x2
#define _PMD0_DMA3MD_POSN                                   0x2
#define _PMD0_DMA3MD_POSITION                               0x2
#define _PMD0_DMA3MD_SIZE                                   0x1
#define _PMD0_DMA3MD_LENGTH                                 0x1
#define _PMD0_DMA3MD_MASK                                   0x4
#define _PMD0_DMA4MD_POSN                                   0x3
#define _PMD0_DMA4MD_POSITION                               0x3
#define _PMD0_DMA4MD_SIZE                                   0x1
#define _PMD0_DMA4MD_LENGTH                                 0x1
#define _PMD0_DMA4MD_MASK                                   0x8
#define _PMD0_CRCMD_POSN                                    0x5
#define _PMD0_CRCMD_POSITION                                0x5
#define _PMD0_CRCMD_SIZE                                    0x1
#define _PMD0_CRCMD_LENGTH                                  0x1
#define _PMD0_CRCMD_MASK                                    0x20
#define _PMD0_SCANMD_POSN                                   0x6
#define _PMD0_SCANMD_POSITION                               0x6
#define _PMD0_SCANMD_SIZE                                   0x1
#define _PMD0_SCANMD_LENGTH                                 0x1
#define _PMD0_SCANMD_MASK                                   0x40
#define _PMD0_SYSCMD_POSN                                   0x7
#define _PMD0_SYSCMD_POSITION                               0x7
#define _PMD0_SYSCMD_SIZE                                   0x1
#define _PMD0_SYSCMD_LENGTH                                 0x1
#define _PMD0_SYSCMD_MASK                                   0x80

// Register: PMD1
#define PMD1 PMD1
extern volatile unsigned char           PMD1                __at(0x301);
#ifndef _LIB_BUILD
asm("PMD1 equ 0301h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ACTMD                  :1;
        unsigned PORTWMD                :1;
        unsigned IOCMD                  :1;
        unsigned CLKRMD                 :1;
        unsigned TMR0MD                 :1;
        unsigned TMR1MD                 :1;
        unsigned TMR2MD                 :1;
        unsigned TMR4MD                 :1;
    };
} PMD1bits_t;
extern volatile PMD1bits_t PMD1bits __at(0x301);
// bitfield macros
#define _PMD1_ACTMD_POSN                                    0x0
#define _PMD1_ACTMD_POSITION                                0x0
#define _PMD1_ACTMD_SIZE                                    0x1
#define _PMD1_ACTMD_LENGTH                                  0x1
#define _PMD1_ACTMD_MASK                                    0x1
#define _PMD1_PORTWMD_POSN                                  0x1
#define _PMD1_PORTWMD_POSITION                              0x1
#define _PMD1_PORTWMD_SIZE                                  0x1
#define _PMD1_PORTWMD_LENGTH                                0x1
#define _PMD1_PORTWMD_MASK                                  0x2
#define _PMD1_IOCMD_POSN                                    0x2
#define _PMD1_IOCMD_POSITION                                0x2
#define _PMD1_IOCMD_SIZE                                    0x1
#define _PMD1_IOCMD_LENGTH                                  0x1
#define _PMD1_IOCMD_MASK                                    0x4
#define _PMD1_CLKRMD_POSN                                   0x3
#define _PMD1_CLKRMD_POSITION                               0x3
#define _PMD1_CLKRMD_SIZE                                   0x1
#define _PMD1_CLKRMD_LENGTH                                 0x1
#define _PMD1_CLKRMD_MASK                                   0x8
#define _PMD1_TMR0MD_POSN                                   0x4
#define _PMD1_TMR0MD_POSITION                               0x4
#define _PMD1_TMR0MD_SIZE                                   0x1
#define _PMD1_TMR0MD_LENGTH                                 0x1
#define _PMD1_TMR0MD_MASK                                   0x10
#define _PMD1_TMR1MD_POSN                                   0x5
#define _PMD1_TMR1MD_POSITION                               0x5
#define _PMD1_TMR1MD_SIZE                                   0x1
#define _PMD1_TMR1MD_LENGTH                                 0x1
#define _PMD1_TMR1MD_MASK                                   0x20
#define _PMD1_TMR2MD_POSN                                   0x6
#define _PMD1_TMR2MD_POSITION                               0x6
#define _PMD1_TMR2MD_SIZE                                   0x1
#define _PMD1_TMR2MD_LENGTH                                 0x1
#define _PMD1_TMR2MD_MASK                                   0x40
#define _PMD1_TMR4MD_POSN                                   0x7
#define _PMD1_TMR4MD_POSITION                               0x7
#define _PMD1_TMR4MD_SIZE                                   0x1
#define _PMD1_TMR4MD_LENGTH                                 0x1
#define _PMD1_TMR4MD_MASK                                   0x80

// Register: PMD2
#define PMD2 PMD2
extern volatile unsigned char           PMD2                __at(0x302);
#ifndef _LIB_BUILD
asm("PMD2 equ 0302h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TU16AMD                :1;
        unsigned TU16BMD                :1;
        unsigned CCP1MD                 :1;
        unsigned CCP2MD                 :1;
        unsigned PWM1MD                 :1;
        unsigned PWM2MD                 :1;
        unsigned CWG1MD                 :1;
        unsigned CLC1MD                 :1;
    };
} PMD2bits_t;
extern volatile PMD2bits_t PMD2bits __at(0x302);
// bitfield macros
#define _PMD2_TU16AMD_POSN                                  0x0
#define _PMD2_TU16AMD_POSITION                              0x0
#define _PMD2_TU16AMD_SIZE                                  0x1
#define _PMD2_TU16AMD_LENGTH                                0x1
#define _PMD2_TU16AMD_MASK                                  0x1
#define _PMD2_TU16BMD_POSN                                  0x1
#define _PMD2_TU16BMD_POSITION                              0x1
#define _PMD2_TU16BMD_SIZE                                  0x1
#define _PMD2_TU16BMD_LENGTH                                0x1
#define _PMD2_TU16BMD_MASK                                  0x2
#define _PMD2_CCP1MD_POSN                                   0x2
#define _PMD2_CCP1MD_POSITION                               0x2
#define _PMD2_CCP1MD_SIZE                                   0x1
#define _PMD2_CCP1MD_LENGTH                                 0x1
#define _PMD2_CCP1MD_MASK                                   0x4
#define _PMD2_CCP2MD_POSN                                   0x3
#define _PMD2_CCP2MD_POSITION                               0x3
#define _PMD2_CCP2MD_SIZE                                   0x1
#define _PMD2_CCP2MD_LENGTH                                 0x1
#define _PMD2_CCP2MD_MASK                                   0x8
#define _PMD2_PWM1MD_POSN                                   0x4
#define _PMD2_PWM1MD_POSITION                               0x4
#define _PMD2_PWM1MD_SIZE                                   0x1
#define _PMD2_PWM1MD_LENGTH                                 0x1
#define _PMD2_PWM1MD_MASK                                   0x10
#define _PMD2_PWM2MD_POSN                                   0x5
#define _PMD2_PWM2MD_POSITION                               0x5
#define _PMD2_PWM2MD_SIZE                                   0x1
#define _PMD2_PWM2MD_LENGTH                                 0x1
#define _PMD2_PWM2MD_MASK                                   0x20
#define _PMD2_CWG1MD_POSN                                   0x6
#define _PMD2_CWG1MD_POSITION                               0x6
#define _PMD2_CWG1MD_SIZE                                   0x1
#define _PMD2_CWG1MD_LENGTH                                 0x1
#define _PMD2_CWG1MD_MASK                                   0x40
#define _PMD2_CLC1MD_POSN                                   0x7
#define _PMD2_CLC1MD_POSITION                               0x7
#define _PMD2_CLC1MD_SIZE                                   0x1
#define _PMD2_CLC1MD_LENGTH                                 0x1
#define _PMD2_CLC1MD_MASK                                   0x80

// Register: PMD3
#define PMD3 PMD3
extern volatile unsigned char           PMD3                __at(0x303);
#ifndef _LIB_BUILD
asm("PMD3 equ 0303h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLC2MD                 :1;
        unsigned CLC3MD                 :1;
        unsigned CLC4MD                 :1;
        unsigned U1MD                   :1;
        unsigned U2MD                   :1;
        unsigned SPI1MD                 :1;
        unsigned I2C1MD                 :1;
        unsigned I3C1MD                 :1;
    };
} PMD3bits_t;
extern volatile PMD3bits_t PMD3bits __at(0x303);
// bitfield macros
#define _PMD3_CLC2MD_POSN                                   0x0
#define _PMD3_CLC2MD_POSITION                               0x0
#define _PMD3_CLC2MD_SIZE                                   0x1
#define _PMD3_CLC2MD_LENGTH                                 0x1
#define _PMD3_CLC2MD_MASK                                   0x1
#define _PMD3_CLC3MD_POSN                                   0x1
#define _PMD3_CLC3MD_POSITION                               0x1
#define _PMD3_CLC3MD_SIZE                                   0x1
#define _PMD3_CLC3MD_LENGTH                                 0x1
#define _PMD3_CLC3MD_MASK                                   0x2
#define _PMD3_CLC4MD_POSN                                   0x2
#define _PMD3_CLC4MD_POSITION                               0x2
#define _PMD3_CLC4MD_SIZE                                   0x1
#define _PMD3_CLC4MD_LENGTH                                 0x1
#define _PMD3_CLC4MD_MASK                                   0x4
#define _PMD3_U1MD_POSN                                     0x3
#define _PMD3_U1MD_POSITION                                 0x3
#define _PMD3_U1MD_SIZE                                     0x1
#define _PMD3_U1MD_LENGTH                                   0x1
#define _PMD3_U1MD_MASK                                     0x8
#define _PMD3_U2MD_POSN                                     0x4
#define _PMD3_U2MD_POSITION                                 0x4
#define _PMD3_U2MD_SIZE                                     0x1
#define _PMD3_U2MD_LENGTH                                   0x1
#define _PMD3_U2MD_MASK                                     0x10
#define _PMD3_SPI1MD_POSN                                   0x5
#define _PMD3_SPI1MD_POSITION                               0x5
#define _PMD3_SPI1MD_SIZE                                   0x1
#define _PMD3_SPI1MD_LENGTH                                 0x1
#define _PMD3_SPI1MD_MASK                                   0x20
#define _PMD3_I2C1MD_POSN                                   0x6
#define _PMD3_I2C1MD_POSITION                               0x6
#define _PMD3_I2C1MD_SIZE                                   0x1
#define _PMD3_I2C1MD_LENGTH                                 0x1
#define _PMD3_I2C1MD_MASK                                   0x40
#define _PMD3_I3C1MD_POSN                                   0x7
#define _PMD3_I3C1MD_POSITION                               0x7
#define _PMD3_I3C1MD_SIZE                                   0x1
#define _PMD3_I3C1MD_LENGTH                                 0x1
#define _PMD3_I3C1MD_MASK                                   0x80

// Register: PMD4
#define PMD4 PMD4
extern volatile unsigned char           PMD4                __at(0x304);
#ifndef _LIB_BUILD
asm("PMD4 equ 0304h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :1;
        unsigned FVRMD                  :1;
        unsigned HLVDMD                 :1;
        unsigned ADCMD                  :1;
    };
} PMD4bits_t;
extern volatile PMD4bits_t PMD4bits __at(0x304);
// bitfield macros
#define _PMD4_FVRMD_POSN                                    0x1
#define _PMD4_FVRMD_POSITION                                0x1
#define _PMD4_FVRMD_SIZE                                    0x1
#define _PMD4_FVRMD_LENGTH                                  0x1
#define _PMD4_FVRMD_MASK                                    0x2
#define _PMD4_HLVDMD_POSN                                   0x2
#define _PMD4_HLVDMD_POSITION                               0x2
#define _PMD4_HLVDMD_SIZE                                   0x1
#define _PMD4_HLVDMD_LENGTH                                 0x1
#define _PMD4_HLVDMD_MASK                                   0x4
#define _PMD4_ADCMD_POSN                                    0x3
#define _PMD4_ADCMD_POSITION                                0x3
#define _PMD4_ADCMD_SIZE                                    0x1
#define _PMD4_ADCMD_LENGTH                                  0x1
#define _PMD4_ADCMD_MASK                                    0x8

// Register: RC0FEAT
#define RC0FEAT RC0FEAT
extern volatile unsigned char           RC0FEAT             __at(0x312);
#ifndef _LIB_BUILD
asm("RC0FEAT equ 0312h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYSBUF                 :3;
        unsigned I3CBUF                 :3;
        unsigned SLEW                   :2;
    };
} RC0FEATbits_t;
extern volatile RC0FEATbits_t RC0FEATbits __at(0x312);
// bitfield macros
#define _RC0FEAT_SYSBUF_POSN                                0x0
#define _RC0FEAT_SYSBUF_POSITION                            0x0
#define _RC0FEAT_SYSBUF_SIZE                                0x3
#define _RC0FEAT_SYSBUF_LENGTH                              0x3
#define _RC0FEAT_SYSBUF_MASK                                0x7
#define _RC0FEAT_I3CBUF_POSN                                0x3
#define _RC0FEAT_I3CBUF_POSITION                            0x3
#define _RC0FEAT_I3CBUF_SIZE                                0x3
#define _RC0FEAT_I3CBUF_LENGTH                              0x3
#define _RC0FEAT_I3CBUF_MASK                                0x38
#define _RC0FEAT_SLEW_POSN                                  0x6
#define _RC0FEAT_SLEW_POSITION                              0x6
#define _RC0FEAT_SLEW_SIZE                                  0x2
#define _RC0FEAT_SLEW_LENGTH                                0x2
#define _RC0FEAT_SLEW_MASK                                  0xC0

// Register: RC1FEAT
#define RC1FEAT RC1FEAT
extern volatile unsigned char           RC1FEAT             __at(0x313);
#ifndef _LIB_BUILD
asm("RC1FEAT equ 0313h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYSBUF                 :3;
        unsigned I3CBUF                 :3;
        unsigned SLEW                   :2;
    };
} RC1FEATbits_t;
extern volatile RC1FEATbits_t RC1FEATbits __at(0x313);
// bitfield macros
#define _RC1FEAT_SYSBUF_POSN                                0x0
#define _RC1FEAT_SYSBUF_POSITION                            0x0
#define _RC1FEAT_SYSBUF_SIZE                                0x3
#define _RC1FEAT_SYSBUF_LENGTH                              0x3
#define _RC1FEAT_SYSBUF_MASK                                0x7
#define _RC1FEAT_I3CBUF_POSN                                0x3
#define _RC1FEAT_I3CBUF_POSITION                            0x3
#define _RC1FEAT_I3CBUF_SIZE                                0x3
#define _RC1FEAT_I3CBUF_LENGTH                              0x3
#define _RC1FEAT_I3CBUF_MASK                                0x38
#define _RC1FEAT_SLEW_POSN                                  0x6
#define _RC1FEAT_SLEW_POSITION                              0x6
#define _RC1FEAT_SLEW_SIZE                                  0x2
#define _RC1FEAT_SLEW_LENGTH                                0x2
#define _RC1FEAT_SLEW_MASK                                  0xC0

// Register: RC4FEAT
#define RC4FEAT RC4FEAT
extern volatile unsigned char           RC4FEAT             __at(0x315);
#ifndef _LIB_BUILD
asm("RC4FEAT equ 0315h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYSBUF                 :2;
        unsigned                        :4;
        unsigned SLEW                   :2;
    };
} RC4FEATbits_t;
extern volatile RC4FEATbits_t RC4FEATbits __at(0x315);
// bitfield macros
#define _RC4FEAT_SYSBUF_POSN                                0x0
#define _RC4FEAT_SYSBUF_POSITION                            0x0
#define _RC4FEAT_SYSBUF_SIZE                                0x2
#define _RC4FEAT_SYSBUF_LENGTH                              0x2
#define _RC4FEAT_SYSBUF_MASK                                0x3
#define _RC4FEAT_SLEW_POSN                                  0x6
#define _RC4FEAT_SLEW_POSITION                              0x6
#define _RC4FEAT_SLEW_SIZE                                  0x2
#define _RC4FEAT_SLEW_LENGTH                                0x2
#define _RC4FEAT_SLEW_MASK                                  0xC0

// Register: RC5FEAT
#define RC5FEAT RC5FEAT
extern volatile unsigned char           RC5FEAT             __at(0x316);
#ifndef _LIB_BUILD
asm("RC5FEAT equ 0316h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SYSBUF                 :2;
        unsigned                        :4;
        unsigned SLEW                   :2;
    };
} RC5FEATbits_t;
extern volatile RC5FEATbits_t RC5FEATbits __at(0x316);
// bitfield macros
#define _RC5FEAT_SYSBUF_POSN                                0x0
#define _RC5FEAT_SYSBUF_POSITION                            0x0
#define _RC5FEAT_SYSBUF_SIZE                                0x2
#define _RC5FEAT_SYSBUF_LENGTH                              0x2
#define _RC5FEAT_SYSBUF_MASK                                0x3
#define _RC5FEAT_SLEW_POSN                                  0x6
#define _RC5FEAT_SLEW_POSITION                              0x6
#define _RC5FEAT_SLEW_SIZE                                  0x2
#define _RC5FEAT_SLEW_LENGTH                                0x2
#define _RC5FEAT_SLEW_MASK                                  0xC0

// Register: RA0PPS
#define RA0PPS RA0PPS
extern volatile unsigned char           RA0PPS              __at(0x319);
#ifndef _LIB_BUILD
asm("RA0PPS equ 0319h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0PPS0                :1;
        unsigned RA0PPS1                :1;
        unsigned RA0PPS2                :1;
        unsigned RA0PPS3                :1;
        unsigned RA0PPS4                :1;
    };
} RA0PPSbits_t;
extern volatile RA0PPSbits_t RA0PPSbits __at(0x319);
// bitfield macros
#define _RA0PPS_RA0PPS0_POSN                                0x0
#define _RA0PPS_RA0PPS0_POSITION                            0x0
#define _RA0PPS_RA0PPS0_SIZE                                0x1
#define _RA0PPS_RA0PPS0_LENGTH                              0x1
#define _RA0PPS_RA0PPS0_MASK                                0x1
#define _RA0PPS_RA0PPS1_POSN                                0x1
#define _RA0PPS_RA0PPS1_POSITION                            0x1
#define _RA0PPS_RA0PPS1_SIZE                                0x1
#define _RA0PPS_RA0PPS1_LENGTH                              0x1
#define _RA0PPS_RA0PPS1_MASK                                0x2
#define _RA0PPS_RA0PPS2_POSN                                0x2
#define _RA0PPS_RA0PPS2_POSITION                            0x2
#define _RA0PPS_RA0PPS2_SIZE                                0x1
#define _RA0PPS_RA0PPS2_LENGTH                              0x1
#define _RA0PPS_RA0PPS2_MASK                                0x4
#define _RA0PPS_RA0PPS3_POSN                                0x3
#define _RA0PPS_RA0PPS3_POSITION                            0x3
#define _RA0PPS_RA0PPS3_SIZE                                0x1
#define _RA0PPS_RA0PPS3_LENGTH                              0x1
#define _RA0PPS_RA0PPS3_MASK                                0x8
#define _RA0PPS_RA0PPS4_POSN                                0x4
#define _RA0PPS_RA0PPS4_POSITION                            0x4
#define _RA0PPS_RA0PPS4_SIZE                                0x1
#define _RA0PPS_RA0PPS4_LENGTH                              0x1
#define _RA0PPS_RA0PPS4_MASK                                0x10

// Register: RA1PPS
#define RA1PPS RA1PPS
extern volatile unsigned char           RA1PPS              __at(0x31A);
#ifndef _LIB_BUILD
asm("RA1PPS equ 031Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA1PPS0                :1;
        unsigned RA1PPS1                :1;
        unsigned RA1PPS2                :1;
        unsigned RA1PPS3                :1;
        unsigned RA1PPS4                :1;
    };
} RA1PPSbits_t;
extern volatile RA1PPSbits_t RA1PPSbits __at(0x31A);
// bitfield macros
#define _RA1PPS_RA1PPS0_POSN                                0x0
#define _RA1PPS_RA1PPS0_POSITION                            0x0
#define _RA1PPS_RA1PPS0_SIZE                                0x1
#define _RA1PPS_RA1PPS0_LENGTH                              0x1
#define _RA1PPS_RA1PPS0_MASK                                0x1
#define _RA1PPS_RA1PPS1_POSN                                0x1
#define _RA1PPS_RA1PPS1_POSITION                            0x1
#define _RA1PPS_RA1PPS1_SIZE                                0x1
#define _RA1PPS_RA1PPS1_LENGTH                              0x1
#define _RA1PPS_RA1PPS1_MASK                                0x2
#define _RA1PPS_RA1PPS2_POSN                                0x2
#define _RA1PPS_RA1PPS2_POSITION                            0x2
#define _RA1PPS_RA1PPS2_SIZE                                0x1
#define _RA1PPS_RA1PPS2_LENGTH                              0x1
#define _RA1PPS_RA1PPS2_MASK                                0x4
#define _RA1PPS_RA1PPS3_POSN                                0x3
#define _RA1PPS_RA1PPS3_POSITION                            0x3
#define _RA1PPS_RA1PPS3_SIZE                                0x1
#define _RA1PPS_RA1PPS3_LENGTH                              0x1
#define _RA1PPS_RA1PPS3_MASK                                0x8
#define _RA1PPS_RA1PPS4_POSN                                0x4
#define _RA1PPS_RA1PPS4_POSITION                            0x4
#define _RA1PPS_RA1PPS4_SIZE                                0x1
#define _RA1PPS_RA1PPS4_LENGTH                              0x1
#define _RA1PPS_RA1PPS4_MASK                                0x10

// Register: RA2PPS
#define RA2PPS RA2PPS
extern volatile unsigned char           RA2PPS              __at(0x31B);
#ifndef _LIB_BUILD
asm("RA2PPS equ 031Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA2PPS0                :1;
        unsigned RA2PPS1                :1;
        unsigned RA2PPS2                :1;
        unsigned RA2PPS3                :1;
        unsigned RA2PPS4                :1;
    };
} RA2PPSbits_t;
extern volatile RA2PPSbits_t RA2PPSbits __at(0x31B);
// bitfield macros
#define _RA2PPS_RA2PPS0_POSN                                0x0
#define _RA2PPS_RA2PPS0_POSITION                            0x0
#define _RA2PPS_RA2PPS0_SIZE                                0x1
#define _RA2PPS_RA2PPS0_LENGTH                              0x1
#define _RA2PPS_RA2PPS0_MASK                                0x1
#define _RA2PPS_RA2PPS1_POSN                                0x1
#define _RA2PPS_RA2PPS1_POSITION                            0x1
#define _RA2PPS_RA2PPS1_SIZE                                0x1
#define _RA2PPS_RA2PPS1_LENGTH                              0x1
#define _RA2PPS_RA2PPS1_MASK                                0x2
#define _RA2PPS_RA2PPS2_POSN                                0x2
#define _RA2PPS_RA2PPS2_POSITION                            0x2
#define _RA2PPS_RA2PPS2_SIZE                                0x1
#define _RA2PPS_RA2PPS2_LENGTH                              0x1
#define _RA2PPS_RA2PPS2_MASK                                0x4
#define _RA2PPS_RA2PPS3_POSN                                0x3
#define _RA2PPS_RA2PPS3_POSITION                            0x3
#define _RA2PPS_RA2PPS3_SIZE                                0x1
#define _RA2PPS_RA2PPS3_LENGTH                              0x1
#define _RA2PPS_RA2PPS3_MASK                                0x8
#define _RA2PPS_RA2PPS4_POSN                                0x4
#define _RA2PPS_RA2PPS4_POSITION                            0x4
#define _RA2PPS_RA2PPS4_SIZE                                0x1
#define _RA2PPS_RA2PPS4_LENGTH                              0x1
#define _RA2PPS_RA2PPS4_MASK                                0x10

// Register: RA4PPS
#define RA4PPS RA4PPS
extern volatile unsigned char           RA4PPS              __at(0x31D);
#ifndef _LIB_BUILD
asm("RA4PPS equ 031Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA4PPS0                :1;
        unsigned RA4PPS1                :1;
        unsigned RA4PPS2                :1;
        unsigned RA4PPS3                :1;
        unsigned RA4PPS4                :1;
    };
} RA4PPSbits_t;
extern volatile RA4PPSbits_t RA4PPSbits __at(0x31D);
// bitfield macros
#define _RA4PPS_RA4PPS0_POSN                                0x0
#define _RA4PPS_RA4PPS0_POSITION                            0x0
#define _RA4PPS_RA4PPS0_SIZE                                0x1
#define _RA4PPS_RA4PPS0_LENGTH                              0x1
#define _RA4PPS_RA4PPS0_MASK                                0x1
#define _RA4PPS_RA4PPS1_POSN                                0x1
#define _RA4PPS_RA4PPS1_POSITION                            0x1
#define _RA4PPS_RA4PPS1_SIZE                                0x1
#define _RA4PPS_RA4PPS1_LENGTH                              0x1
#define _RA4PPS_RA4PPS1_MASK                                0x2
#define _RA4PPS_RA4PPS2_POSN                                0x2
#define _RA4PPS_RA4PPS2_POSITION                            0x2
#define _RA4PPS_RA4PPS2_SIZE                                0x1
#define _RA4PPS_RA4PPS2_LENGTH                              0x1
#define _RA4PPS_RA4PPS2_MASK                                0x4
#define _RA4PPS_RA4PPS3_POSN                                0x3
#define _RA4PPS_RA4PPS3_POSITION                            0x3
#define _RA4PPS_RA4PPS3_SIZE                                0x1
#define _RA4PPS_RA4PPS3_LENGTH                              0x1
#define _RA4PPS_RA4PPS3_MASK                                0x8
#define _RA4PPS_RA4PPS4_POSN                                0x4
#define _RA4PPS_RA4PPS4_POSITION                            0x4
#define _RA4PPS_RA4PPS4_SIZE                                0x1
#define _RA4PPS_RA4PPS4_LENGTH                              0x1
#define _RA4PPS_RA4PPS4_MASK                                0x10

// Register: RA5PPS
#define RA5PPS RA5PPS
extern volatile unsigned char           RA5PPS              __at(0x31E);
#ifndef _LIB_BUILD
asm("RA5PPS equ 031Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA5PPS0                :1;
        unsigned RA5PPS1                :1;
        unsigned RA5PPS2                :1;
        unsigned RA5PPS3                :1;
        unsigned RA5PPS4                :1;
    };
} RA5PPSbits_t;
extern volatile RA5PPSbits_t RA5PPSbits __at(0x31E);
// bitfield macros
#define _RA5PPS_RA5PPS0_POSN                                0x0
#define _RA5PPS_RA5PPS0_POSITION                            0x0
#define _RA5PPS_RA5PPS0_SIZE                                0x1
#define _RA5PPS_RA5PPS0_LENGTH                              0x1
#define _RA5PPS_RA5PPS0_MASK                                0x1
#define _RA5PPS_RA5PPS1_POSN                                0x1
#define _RA5PPS_RA5PPS1_POSITION                            0x1
#define _RA5PPS_RA5PPS1_SIZE                                0x1
#define _RA5PPS_RA5PPS1_LENGTH                              0x1
#define _RA5PPS_RA5PPS1_MASK                                0x2
#define _RA5PPS_RA5PPS2_POSN                                0x2
#define _RA5PPS_RA5PPS2_POSITION                            0x2
#define _RA5PPS_RA5PPS2_SIZE                                0x1
#define _RA5PPS_RA5PPS2_LENGTH                              0x1
#define _RA5PPS_RA5PPS2_MASK                                0x4
#define _RA5PPS_RA5PPS3_POSN                                0x3
#define _RA5PPS_RA5PPS3_POSITION                            0x3
#define _RA5PPS_RA5PPS3_SIZE                                0x1
#define _RA5PPS_RA5PPS3_LENGTH                              0x1
#define _RA5PPS_RA5PPS3_MASK                                0x8
#define _RA5PPS_RA5PPS4_POSN                                0x4
#define _RA5PPS_RA5PPS4_POSITION                            0x4
#define _RA5PPS_RA5PPS4_SIZE                                0x1
#define _RA5PPS_RA5PPS4_LENGTH                              0x1
#define _RA5PPS_RA5PPS4_MASK                                0x10

// Register: RC0PPS
#define RC0PPS RC0PPS
extern volatile unsigned char           RC0PPS              __at(0x329);
#ifndef _LIB_BUILD
asm("RC0PPS equ 0329h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0PPS0                :1;
        unsigned RC0PPS1                :1;
        unsigned RC0PPS2                :1;
        unsigned RC0PPS3                :1;
        unsigned RC0PPS4                :1;
    };
} RC0PPSbits_t;
extern volatile RC0PPSbits_t RC0PPSbits __at(0x329);
// bitfield macros
#define _RC0PPS_RC0PPS0_POSN                                0x0
#define _RC0PPS_RC0PPS0_POSITION                            0x0
#define _RC0PPS_RC0PPS0_SIZE                                0x1
#define _RC0PPS_RC0PPS0_LENGTH                              0x1
#define _RC0PPS_RC0PPS0_MASK                                0x1
#define _RC0PPS_RC0PPS1_POSN                                0x1
#define _RC0PPS_RC0PPS1_POSITION                            0x1
#define _RC0PPS_RC0PPS1_SIZE                                0x1
#define _RC0PPS_RC0PPS1_LENGTH                              0x1
#define _RC0PPS_RC0PPS1_MASK                                0x2
#define _RC0PPS_RC0PPS2_POSN                                0x2
#define _RC0PPS_RC0PPS2_POSITION                            0x2
#define _RC0PPS_RC0PPS2_SIZE                                0x1
#define _RC0PPS_RC0PPS2_LENGTH                              0x1
#define _RC0PPS_RC0PPS2_MASK                                0x4
#define _RC0PPS_RC0PPS3_POSN                                0x3
#define _RC0PPS_RC0PPS3_POSITION                            0x3
#define _RC0PPS_RC0PPS3_SIZE                                0x1
#define _RC0PPS_RC0PPS3_LENGTH                              0x1
#define _RC0PPS_RC0PPS3_MASK                                0x8
#define _RC0PPS_RC0PPS4_POSN                                0x4
#define _RC0PPS_RC0PPS4_POSITION                            0x4
#define _RC0PPS_RC0PPS4_SIZE                                0x1
#define _RC0PPS_RC0PPS4_LENGTH                              0x1
#define _RC0PPS_RC0PPS4_MASK                                0x10

// Register: RC1PPS
#define RC1PPS RC1PPS
extern volatile unsigned char           RC1PPS              __at(0x32A);
#ifndef _LIB_BUILD
asm("RC1PPS equ 032Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC1PPS0                :1;
        unsigned RC1PPS1                :1;
        unsigned RC1PPS2                :1;
        unsigned RC1PPS3                :1;
        unsigned RC1PPS4                :1;
    };
} RC1PPSbits_t;
extern volatile RC1PPSbits_t RC1PPSbits __at(0x32A);
// bitfield macros
#define _RC1PPS_RC1PPS0_POSN                                0x0
#define _RC1PPS_RC1PPS0_POSITION                            0x0
#define _RC1PPS_RC1PPS0_SIZE                                0x1
#define _RC1PPS_RC1PPS0_LENGTH                              0x1
#define _RC1PPS_RC1PPS0_MASK                                0x1
#define _RC1PPS_RC1PPS1_POSN                                0x1
#define _RC1PPS_RC1PPS1_POSITION                            0x1
#define _RC1PPS_RC1PPS1_SIZE                                0x1
#define _RC1PPS_RC1PPS1_LENGTH                              0x1
#define _RC1PPS_RC1PPS1_MASK                                0x2
#define _RC1PPS_RC1PPS2_POSN                                0x2
#define _RC1PPS_RC1PPS2_POSITION                            0x2
#define _RC1PPS_RC1PPS2_SIZE                                0x1
#define _RC1PPS_RC1PPS2_LENGTH                              0x1
#define _RC1PPS_RC1PPS2_MASK                                0x4
#define _RC1PPS_RC1PPS3_POSN                                0x3
#define _RC1PPS_RC1PPS3_POSITION                            0x3
#define _RC1PPS_RC1PPS3_SIZE                                0x1
#define _RC1PPS_RC1PPS3_LENGTH                              0x1
#define _RC1PPS_RC1PPS3_MASK                                0x8
#define _RC1PPS_RC1PPS4_POSN                                0x4
#define _RC1PPS_RC1PPS4_POSITION                            0x4
#define _RC1PPS_RC1PPS4_SIZE                                0x1
#define _RC1PPS_RC1PPS4_LENGTH                              0x1
#define _RC1PPS_RC1PPS4_MASK                                0x10

// Register: RC3PPS
#define RC3PPS RC3PPS
extern volatile unsigned char           RC3PPS              __at(0x32C);
#ifndef _LIB_BUILD
asm("RC3PPS equ 032Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC3PPS0                :1;
        unsigned RC3PPS1                :1;
        unsigned RC3PPS2                :1;
        unsigned RC3PPS3                :1;
        unsigned RC3PPS4                :1;
    };
} RC3PPSbits_t;
extern volatile RC3PPSbits_t RC3PPSbits __at(0x32C);
// bitfield macros
#define _RC3PPS_RC3PPS0_POSN                                0x0
#define _RC3PPS_RC3PPS0_POSITION                            0x0
#define _RC3PPS_RC3PPS0_SIZE                                0x1
#define _RC3PPS_RC3PPS0_LENGTH                              0x1
#define _RC3PPS_RC3PPS0_MASK                                0x1
#define _RC3PPS_RC3PPS1_POSN                                0x1
#define _RC3PPS_RC3PPS1_POSITION                            0x1
#define _RC3PPS_RC3PPS1_SIZE                                0x1
#define _RC3PPS_RC3PPS1_LENGTH                              0x1
#define _RC3PPS_RC3PPS1_MASK                                0x2
#define _RC3PPS_RC3PPS2_POSN                                0x2
#define _RC3PPS_RC3PPS2_POSITION                            0x2
#define _RC3PPS_RC3PPS2_SIZE                                0x1
#define _RC3PPS_RC3PPS2_LENGTH                              0x1
#define _RC3PPS_RC3PPS2_MASK                                0x4
#define _RC3PPS_RC3PPS3_POSN                                0x3
#define _RC3PPS_RC3PPS3_POSITION                            0x3
#define _RC3PPS_RC3PPS3_SIZE                                0x1
#define _RC3PPS_RC3PPS3_LENGTH                              0x1
#define _RC3PPS_RC3PPS3_MASK                                0x8
#define _RC3PPS_RC3PPS4_POSN                                0x4
#define _RC3PPS_RC3PPS4_POSITION                            0x4
#define _RC3PPS_RC3PPS4_SIZE                                0x1
#define _RC3PPS_RC3PPS4_LENGTH                              0x1
#define _RC3PPS_RC3PPS4_MASK                                0x10

// Register: RC4PPS
#define RC4PPS RC4PPS
extern volatile unsigned char           RC4PPS              __at(0x32D);
#ifndef _LIB_BUILD
asm("RC4PPS equ 032Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC4PPS0                :1;
        unsigned RC4PPS1                :1;
        unsigned RC4PPS2                :1;
        unsigned RC4PPS3                :1;
        unsigned RC4PPS4                :1;
    };
} RC4PPSbits_t;
extern volatile RC4PPSbits_t RC4PPSbits __at(0x32D);
// bitfield macros
#define _RC4PPS_RC4PPS0_POSN                                0x0
#define _RC4PPS_RC4PPS0_POSITION                            0x0
#define _RC4PPS_RC4PPS0_SIZE                                0x1
#define _RC4PPS_RC4PPS0_LENGTH                              0x1
#define _RC4PPS_RC4PPS0_MASK                                0x1
#define _RC4PPS_RC4PPS1_POSN                                0x1
#define _RC4PPS_RC4PPS1_POSITION                            0x1
#define _RC4PPS_RC4PPS1_SIZE                                0x1
#define _RC4PPS_RC4PPS1_LENGTH                              0x1
#define _RC4PPS_RC4PPS1_MASK                                0x2
#define _RC4PPS_RC4PPS2_POSN                                0x2
#define _RC4PPS_RC4PPS2_POSITION                            0x2
#define _RC4PPS_RC4PPS2_SIZE                                0x1
#define _RC4PPS_RC4PPS2_LENGTH                              0x1
#define _RC4PPS_RC4PPS2_MASK                                0x4
#define _RC4PPS_RC4PPS3_POSN                                0x3
#define _RC4PPS_RC4PPS3_POSITION                            0x3
#define _RC4PPS_RC4PPS3_SIZE                                0x1
#define _RC4PPS_RC4PPS3_LENGTH                              0x1
#define _RC4PPS_RC4PPS3_MASK                                0x8
#define _RC4PPS_RC4PPS4_POSN                                0x4
#define _RC4PPS_RC4PPS4_POSITION                            0x4
#define _RC4PPS_RC4PPS4_SIZE                                0x1
#define _RC4PPS_RC4PPS4_LENGTH                              0x1
#define _RC4PPS_RC4PPS4_MASK                                0x10

// Register: RC5PPS
#define RC5PPS RC5PPS
extern volatile unsigned char           RC5PPS              __at(0x32E);
#ifndef _LIB_BUILD
asm("RC5PPS equ 032Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC5PPS0                :1;
        unsigned RC5PPS1                :1;
        unsigned RC5PPS2                :1;
        unsigned RC5PPS3                :1;
        unsigned RC5PPS4                :1;
    };
} RC5PPSbits_t;
extern volatile RC5PPSbits_t RC5PPSbits __at(0x32E);
// bitfield macros
#define _RC5PPS_RC5PPS0_POSN                                0x0
#define _RC5PPS_RC5PPS0_POSITION                            0x0
#define _RC5PPS_RC5PPS0_SIZE                                0x1
#define _RC5PPS_RC5PPS0_LENGTH                              0x1
#define _RC5PPS_RC5PPS0_MASK                                0x1
#define _RC5PPS_RC5PPS1_POSN                                0x1
#define _RC5PPS_RC5PPS1_POSITION                            0x1
#define _RC5PPS_RC5PPS1_SIZE                                0x1
#define _RC5PPS_RC5PPS1_LENGTH                              0x1
#define _RC5PPS_RC5PPS1_MASK                                0x2
#define _RC5PPS_RC5PPS2_POSN                                0x2
#define _RC5PPS_RC5PPS2_POSITION                            0x2
#define _RC5PPS_RC5PPS2_SIZE                                0x1
#define _RC5PPS_RC5PPS2_LENGTH                              0x1
#define _RC5PPS_RC5PPS2_MASK                                0x4
#define _RC5PPS_RC5PPS3_POSN                                0x3
#define _RC5PPS_RC5PPS3_POSITION                            0x3
#define _RC5PPS_RC5PPS3_SIZE                                0x1
#define _RC5PPS_RC5PPS3_LENGTH                              0x1
#define _RC5PPS_RC5PPS3_MASK                                0x8
#define _RC5PPS_RC5PPS4_POSN                                0x4
#define _RC5PPS_RC5PPS4_POSITION                            0x4
#define _RC5PPS_RC5PPS4_SIZE                                0x1
#define _RC5PPS_RC5PPS4_LENGTH                              0x1
#define _RC5PPS_RC5PPS4_MASK                                0x10

// Register: PPSLOCK
#define PPSLOCK PPSLOCK
extern volatile unsigned char           PPSLOCK             __at(0x351);
#ifndef _LIB_BUILD
asm("PPSLOCK equ 0351h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PPSLOCKED              :1;
    };
} PPSLOCKbits_t;
extern volatile PPSLOCKbits_t PPSLOCKbits __at(0x351);
// bitfield macros
#define _PPSLOCK_PPSLOCKED_POSN                             0x0
#define _PPSLOCK_PPSLOCKED_POSITION                         0x0
#define _PPSLOCK_PPSLOCKED_SIZE                             0x1
#define _PPSLOCK_PPSLOCKED_LENGTH                           0x1
#define _PPSLOCK_PPSLOCKED_MASK                             0x1

// Register: INT0PPS
#define INT0PPS INT0PPS
extern volatile unsigned char           INT0PPS             __at(0x352);
#ifndef _LIB_BUILD
asm("INT0PPS equ 0352h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT0PPS                :5;
    };
    struct {
        unsigned INT0PPS0               :1;
        unsigned INT0PPS1               :1;
        unsigned INT0PPS2               :1;
        unsigned INT0PPS3               :1;
        unsigned INT0PPS4               :1;
    };
} INT0PPSbits_t;
extern volatile INT0PPSbits_t INT0PPSbits __at(0x352);
// bitfield macros
#define _INT0PPS_INT0PPS_POSN                               0x0
#define _INT0PPS_INT0PPS_POSITION                           0x0
#define _INT0PPS_INT0PPS_SIZE                               0x5
#define _INT0PPS_INT0PPS_LENGTH                             0x5
#define _INT0PPS_INT0PPS_MASK                               0x1F
#define _INT0PPS_INT0PPS0_POSN                              0x0
#define _INT0PPS_INT0PPS0_POSITION                          0x0
#define _INT0PPS_INT0PPS0_SIZE                              0x1
#define _INT0PPS_INT0PPS0_LENGTH                            0x1
#define _INT0PPS_INT0PPS0_MASK                              0x1
#define _INT0PPS_INT0PPS1_POSN                              0x1
#define _INT0PPS_INT0PPS1_POSITION                          0x1
#define _INT0PPS_INT0PPS1_SIZE                              0x1
#define _INT0PPS_INT0PPS1_LENGTH                            0x1
#define _INT0PPS_INT0PPS1_MASK                              0x2
#define _INT0PPS_INT0PPS2_POSN                              0x2
#define _INT0PPS_INT0PPS2_POSITION                          0x2
#define _INT0PPS_INT0PPS2_SIZE                              0x1
#define _INT0PPS_INT0PPS2_LENGTH                            0x1
#define _INT0PPS_INT0PPS2_MASK                              0x4
#define _INT0PPS_INT0PPS3_POSN                              0x3
#define _INT0PPS_INT0PPS3_POSITION                          0x3
#define _INT0PPS_INT0PPS3_SIZE                              0x1
#define _INT0PPS_INT0PPS3_LENGTH                            0x1
#define _INT0PPS_INT0PPS3_MASK                              0x8
#define _INT0PPS_INT0PPS4_POSN                              0x4
#define _INT0PPS_INT0PPS4_POSITION                          0x4
#define _INT0PPS_INT0PPS4_SIZE                              0x1
#define _INT0PPS_INT0PPS4_LENGTH                            0x1
#define _INT0PPS_INT0PPS4_MASK                              0x10

// Register: INT1PPS
#define INT1PPS INT1PPS
extern volatile unsigned char           INT1PPS             __at(0x353);
#ifndef _LIB_BUILD
asm("INT1PPS equ 0353h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT1PPS                :5;
    };
    struct {
        unsigned INT1PPS0               :1;
        unsigned INT1PPS1               :1;
        unsigned INT1PPS2               :1;
        unsigned INT1PPS3               :1;
        unsigned INT1PPS4               :1;
    };
} INT1PPSbits_t;
extern volatile INT1PPSbits_t INT1PPSbits __at(0x353);
// bitfield macros
#define _INT1PPS_INT1PPS_POSN                               0x0
#define _INT1PPS_INT1PPS_POSITION                           0x0
#define _INT1PPS_INT1PPS_SIZE                               0x5
#define _INT1PPS_INT1PPS_LENGTH                             0x5
#define _INT1PPS_INT1PPS_MASK                               0x1F
#define _INT1PPS_INT1PPS0_POSN                              0x0
#define _INT1PPS_INT1PPS0_POSITION                          0x0
#define _INT1PPS_INT1PPS0_SIZE                              0x1
#define _INT1PPS_INT1PPS0_LENGTH                            0x1
#define _INT1PPS_INT1PPS0_MASK                              0x1
#define _INT1PPS_INT1PPS1_POSN                              0x1
#define _INT1PPS_INT1PPS1_POSITION                          0x1
#define _INT1PPS_INT1PPS1_SIZE                              0x1
#define _INT1PPS_INT1PPS1_LENGTH                            0x1
#define _INT1PPS_INT1PPS1_MASK                              0x2
#define _INT1PPS_INT1PPS2_POSN                              0x2
#define _INT1PPS_INT1PPS2_POSITION                          0x2
#define _INT1PPS_INT1PPS2_SIZE                              0x1
#define _INT1PPS_INT1PPS2_LENGTH                            0x1
#define _INT1PPS_INT1PPS2_MASK                              0x4
#define _INT1PPS_INT1PPS3_POSN                              0x3
#define _INT1PPS_INT1PPS3_POSITION                          0x3
#define _INT1PPS_INT1PPS3_SIZE                              0x1
#define _INT1PPS_INT1PPS3_LENGTH                            0x1
#define _INT1PPS_INT1PPS3_MASK                              0x8
#define _INT1PPS_INT1PPS4_POSN                              0x4
#define _INT1PPS_INT1PPS4_POSITION                          0x4
#define _INT1PPS_INT1PPS4_SIZE                              0x1
#define _INT1PPS_INT1PPS4_LENGTH                            0x1
#define _INT1PPS_INT1PPS4_MASK                              0x10

// Register: INT2PPS
#define INT2PPS INT2PPS
extern volatile unsigned char           INT2PPS             __at(0x354);
#ifndef _LIB_BUILD
asm("INT2PPS equ 0354h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT2PPS                :5;
    };
    struct {
        unsigned INT2PPS0               :1;
        unsigned INT2PPS1               :1;
        unsigned INT2PPS2               :1;
        unsigned INT2PPS3               :1;
        unsigned INT2PPS4               :1;
    };
} INT2PPSbits_t;
extern volatile INT2PPSbits_t INT2PPSbits __at(0x354);
// bitfield macros
#define _INT2PPS_INT2PPS_POSN                               0x0
#define _INT2PPS_INT2PPS_POSITION                           0x0
#define _INT2PPS_INT2PPS_SIZE                               0x5
#define _INT2PPS_INT2PPS_LENGTH                             0x5
#define _INT2PPS_INT2PPS_MASK                               0x1F
#define _INT2PPS_INT2PPS0_POSN                              0x0
#define _INT2PPS_INT2PPS0_POSITION                          0x0
#define _INT2PPS_INT2PPS0_SIZE                              0x1
#define _INT2PPS_INT2PPS0_LENGTH                            0x1
#define _INT2PPS_INT2PPS0_MASK                              0x1
#define _INT2PPS_INT2PPS1_POSN                              0x1
#define _INT2PPS_INT2PPS1_POSITION                          0x1
#define _INT2PPS_INT2PPS1_SIZE                              0x1
#define _INT2PPS_INT2PPS1_LENGTH                            0x1
#define _INT2PPS_INT2PPS1_MASK                              0x2
#define _INT2PPS_INT2PPS2_POSN                              0x2
#define _INT2PPS_INT2PPS2_POSITION                          0x2
#define _INT2PPS_INT2PPS2_SIZE                              0x1
#define _INT2PPS_INT2PPS2_LENGTH                            0x1
#define _INT2PPS_INT2PPS2_MASK                              0x4
#define _INT2PPS_INT2PPS3_POSN                              0x3
#define _INT2PPS_INT2PPS3_POSITION                          0x3
#define _INT2PPS_INT2PPS3_SIZE                              0x1
#define _INT2PPS_INT2PPS3_LENGTH                            0x1
#define _INT2PPS_INT2PPS3_MASK                              0x8
#define _INT2PPS_INT2PPS4_POSN                              0x4
#define _INT2PPS_INT2PPS4_POSITION                          0x4
#define _INT2PPS_INT2PPS4_SIZE                              0x1
#define _INT2PPS_INT2PPS4_LENGTH                            0x1
#define _INT2PPS_INT2PPS4_MASK                              0x10

// Register: T0CKIPPS
#define T0CKIPPS T0CKIPPS
extern volatile unsigned char           T0CKIPPS            __at(0x355);
#ifndef _LIB_BUILD
asm("T0CKIPPS equ 0355h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T0CKIPPS               :5;
    };
    struct {
        unsigned T0CKIPPS0              :1;
        unsigned T0CKIPPS1              :1;
        unsigned T0CKIPPS2              :1;
        unsigned T0CKIPPS3              :1;
        unsigned T0CKIPPS4              :1;
    };
} T0CKIPPSbits_t;
extern volatile T0CKIPPSbits_t T0CKIPPSbits __at(0x355);
// bitfield macros
#define _T0CKIPPS_T0CKIPPS_POSN                             0x0
#define _T0CKIPPS_T0CKIPPS_POSITION                         0x0
#define _T0CKIPPS_T0CKIPPS_SIZE                             0x5
#define _T0CKIPPS_T0CKIPPS_LENGTH                           0x5
#define _T0CKIPPS_T0CKIPPS_MASK                             0x1F
#define _T0CKIPPS_T0CKIPPS0_POSN                            0x0
#define _T0CKIPPS_T0CKIPPS0_POSITION                        0x0
#define _T0CKIPPS_T0CKIPPS0_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS0_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS0_MASK                            0x1
#define _T0CKIPPS_T0CKIPPS1_POSN                            0x1
#define _T0CKIPPS_T0CKIPPS1_POSITION                        0x1
#define _T0CKIPPS_T0CKIPPS1_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS1_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS1_MASK                            0x2
#define _T0CKIPPS_T0CKIPPS2_POSN                            0x2
#define _T0CKIPPS_T0CKIPPS2_POSITION                        0x2
#define _T0CKIPPS_T0CKIPPS2_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS2_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS2_MASK                            0x4
#define _T0CKIPPS_T0CKIPPS3_POSN                            0x3
#define _T0CKIPPS_T0CKIPPS3_POSITION                        0x3
#define _T0CKIPPS_T0CKIPPS3_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS3_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS3_MASK                            0x8
#define _T0CKIPPS_T0CKIPPS4_POSN                            0x4
#define _T0CKIPPS_T0CKIPPS4_POSITION                        0x4
#define _T0CKIPPS_T0CKIPPS4_SIZE                            0x1
#define _T0CKIPPS_T0CKIPPS4_LENGTH                          0x1
#define _T0CKIPPS_T0CKIPPS4_MASK                            0x10

// Register: T1CKIPPS
#define T1CKIPPS T1CKIPPS
extern volatile unsigned char           T1CKIPPS            __at(0x356);
#ifndef _LIB_BUILD
asm("T1CKIPPS equ 0356h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1CKIPPS               :5;
    };
    struct {
        unsigned T1CKIPPS0              :1;
        unsigned T1CKIPPS1              :1;
        unsigned T1CKIPPS2              :1;
        unsigned T1CKIPPS3              :1;
        unsigned T1CKIPPS4              :1;
    };
} T1CKIPPSbits_t;
extern volatile T1CKIPPSbits_t T1CKIPPSbits __at(0x356);
// bitfield macros
#define _T1CKIPPS_T1CKIPPS_POSN                             0x0
#define _T1CKIPPS_T1CKIPPS_POSITION                         0x0
#define _T1CKIPPS_T1CKIPPS_SIZE                             0x5
#define _T1CKIPPS_T1CKIPPS_LENGTH                           0x5
#define _T1CKIPPS_T1CKIPPS_MASK                             0x1F
#define _T1CKIPPS_T1CKIPPS0_POSN                            0x0
#define _T1CKIPPS_T1CKIPPS0_POSITION                        0x0
#define _T1CKIPPS_T1CKIPPS0_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS0_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS0_MASK                            0x1
#define _T1CKIPPS_T1CKIPPS1_POSN                            0x1
#define _T1CKIPPS_T1CKIPPS1_POSITION                        0x1
#define _T1CKIPPS_T1CKIPPS1_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS1_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS1_MASK                            0x2
#define _T1CKIPPS_T1CKIPPS2_POSN                            0x2
#define _T1CKIPPS_T1CKIPPS2_POSITION                        0x2
#define _T1CKIPPS_T1CKIPPS2_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS2_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS2_MASK                            0x4
#define _T1CKIPPS_T1CKIPPS3_POSN                            0x3
#define _T1CKIPPS_T1CKIPPS3_POSITION                        0x3
#define _T1CKIPPS_T1CKIPPS3_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS3_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS3_MASK                            0x8
#define _T1CKIPPS_T1CKIPPS4_POSN                            0x4
#define _T1CKIPPS_T1CKIPPS4_POSITION                        0x4
#define _T1CKIPPS_T1CKIPPS4_SIZE                            0x1
#define _T1CKIPPS_T1CKIPPS4_LENGTH                          0x1
#define _T1CKIPPS_T1CKIPPS4_MASK                            0x10

// Register: T1GPPS
#define T1GPPS T1GPPS
extern volatile unsigned char           T1GPPS              __at(0x357);
#ifndef _LIB_BUILD
asm("T1GPPS equ 0357h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T1GPPS                 :5;
    };
    struct {
        unsigned T1GPPS0                :1;
        unsigned T1GPPS1                :1;
        unsigned T1GPPS2                :1;
        unsigned T1GPPS3                :1;
        unsigned T1GPPS4                :1;
    };
} T1GPPSbits_t;
extern volatile T1GPPSbits_t T1GPPSbits __at(0x357);
// bitfield macros
#define _T1GPPS_T1GPPS_POSN                                 0x0
#define _T1GPPS_T1GPPS_POSITION                             0x0
#define _T1GPPS_T1GPPS_SIZE                                 0x5
#define _T1GPPS_T1GPPS_LENGTH                               0x5
#define _T1GPPS_T1GPPS_MASK                                 0x1F
#define _T1GPPS_T1GPPS0_POSN                                0x0
#define _T1GPPS_T1GPPS0_POSITION                            0x0
#define _T1GPPS_T1GPPS0_SIZE                                0x1
#define _T1GPPS_T1GPPS0_LENGTH                              0x1
#define _T1GPPS_T1GPPS0_MASK                                0x1
#define _T1GPPS_T1GPPS1_POSN                                0x1
#define _T1GPPS_T1GPPS1_POSITION                            0x1
#define _T1GPPS_T1GPPS1_SIZE                                0x1
#define _T1GPPS_T1GPPS1_LENGTH                              0x1
#define _T1GPPS_T1GPPS1_MASK                                0x2
#define _T1GPPS_T1GPPS2_POSN                                0x2
#define _T1GPPS_T1GPPS2_POSITION                            0x2
#define _T1GPPS_T1GPPS2_SIZE                                0x1
#define _T1GPPS_T1GPPS2_LENGTH                              0x1
#define _T1GPPS_T1GPPS2_MASK                                0x4
#define _T1GPPS_T1GPPS3_POSN                                0x3
#define _T1GPPS_T1GPPS3_POSITION                            0x3
#define _T1GPPS_T1GPPS3_SIZE                                0x1
#define _T1GPPS_T1GPPS3_LENGTH                              0x1
#define _T1GPPS_T1GPPS3_MASK                                0x8
#define _T1GPPS_T1GPPS4_POSN                                0x4
#define _T1GPPS_T1GPPS4_POSITION                            0x4
#define _T1GPPS_T1GPPS4_SIZE                                0x1
#define _T1GPPS_T1GPPS4_LENGTH                              0x1
#define _T1GPPS_T1GPPS4_MASK                                0x10

// Register: T2INPPS
#define T2INPPS T2INPPS
extern volatile unsigned char           T2INPPS             __at(0x360);
#ifndef _LIB_BUILD
asm("T2INPPS equ 0360h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T2INPPS                :5;
    };
    struct {
        unsigned T2INPPS0               :1;
        unsigned T2INPPS1               :1;
        unsigned T2INPPS2               :1;
        unsigned T2INPPS3               :1;
        unsigned T2INPPS4               :1;
    };
} T2INPPSbits_t;
extern volatile T2INPPSbits_t T2INPPSbits __at(0x360);
// bitfield macros
#define _T2INPPS_T2INPPS_POSN                               0x0
#define _T2INPPS_T2INPPS_POSITION                           0x0
#define _T2INPPS_T2INPPS_SIZE                               0x5
#define _T2INPPS_T2INPPS_LENGTH                             0x5
#define _T2INPPS_T2INPPS_MASK                               0x1F
#define _T2INPPS_T2INPPS0_POSN                              0x0
#define _T2INPPS_T2INPPS0_POSITION                          0x0
#define _T2INPPS_T2INPPS0_SIZE                              0x1
#define _T2INPPS_T2INPPS0_LENGTH                            0x1
#define _T2INPPS_T2INPPS0_MASK                              0x1
#define _T2INPPS_T2INPPS1_POSN                              0x1
#define _T2INPPS_T2INPPS1_POSITION                          0x1
#define _T2INPPS_T2INPPS1_SIZE                              0x1
#define _T2INPPS_T2INPPS1_LENGTH                            0x1
#define _T2INPPS_T2INPPS1_MASK                              0x2
#define _T2INPPS_T2INPPS2_POSN                              0x2
#define _T2INPPS_T2INPPS2_POSITION                          0x2
#define _T2INPPS_T2INPPS2_SIZE                              0x1
#define _T2INPPS_T2INPPS2_LENGTH                            0x1
#define _T2INPPS_T2INPPS2_MASK                              0x4
#define _T2INPPS_T2INPPS3_POSN                              0x3
#define _T2INPPS_T2INPPS3_POSITION                          0x3
#define _T2INPPS_T2INPPS3_SIZE                              0x1
#define _T2INPPS_T2INPPS3_LENGTH                            0x1
#define _T2INPPS_T2INPPS3_MASK                              0x8
#define _T2INPPS_T2INPPS4_POSN                              0x4
#define _T2INPPS_T2INPPS4_POSITION                          0x4
#define _T2INPPS_T2INPPS4_SIZE                              0x1
#define _T2INPPS_T2INPPS4_LENGTH                            0x1
#define _T2INPPS_T2INPPS4_MASK                              0x10

// Register: T4INPPS
#define T4INPPS T4INPPS
extern volatile unsigned char           T4INPPS             __at(0x361);
#ifndef _LIB_BUILD
asm("T4INPPS equ 0361h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned T4INPPS                :5;
    };
    struct {
        unsigned T4INPPS0               :1;
        unsigned T4INPPS1               :1;
        unsigned T4INPPS2               :1;
        unsigned T4INPPS3               :1;
        unsigned T4INPPS4               :1;
    };
} T4INPPSbits_t;
extern volatile T4INPPSbits_t T4INPPSbits __at(0x361);
// bitfield macros
#define _T4INPPS_T4INPPS_POSN                               0x0
#define _T4INPPS_T4INPPS_POSITION                           0x0
#define _T4INPPS_T4INPPS_SIZE                               0x5
#define _T4INPPS_T4INPPS_LENGTH                             0x5
#define _T4INPPS_T4INPPS_MASK                               0x1F
#define _T4INPPS_T4INPPS0_POSN                              0x0
#define _T4INPPS_T4INPPS0_POSITION                          0x0
#define _T4INPPS_T4INPPS0_SIZE                              0x1
#define _T4INPPS_T4INPPS0_LENGTH                            0x1
#define _T4INPPS_T4INPPS0_MASK                              0x1
#define _T4INPPS_T4INPPS1_POSN                              0x1
#define _T4INPPS_T4INPPS1_POSITION                          0x1
#define _T4INPPS_T4INPPS1_SIZE                              0x1
#define _T4INPPS_T4INPPS1_LENGTH                            0x1
#define _T4INPPS_T4INPPS1_MASK                              0x2
#define _T4INPPS_T4INPPS2_POSN                              0x2
#define _T4INPPS_T4INPPS2_POSITION                          0x2
#define _T4INPPS_T4INPPS2_SIZE                              0x1
#define _T4INPPS_T4INPPS2_LENGTH                            0x1
#define _T4INPPS_T4INPPS2_MASK                              0x4
#define _T4INPPS_T4INPPS3_POSN                              0x3
#define _T4INPPS_T4INPPS3_POSITION                          0x3
#define _T4INPPS_T4INPPS3_SIZE                              0x1
#define _T4INPPS_T4INPPS3_LENGTH                            0x1
#define _T4INPPS_T4INPPS3_MASK                              0x8
#define _T4INPPS_T4INPPS4_POSN                              0x4
#define _T4INPPS_T4INPPS4_POSITION                          0x4
#define _T4INPPS_T4INPPS4_SIZE                              0x1
#define _T4INPPS_T4INPPS4_LENGTH                            0x1
#define _T4INPPS_T4INPPS4_MASK                              0x10

// Register: TUIN0PPS
#define TUIN0PPS TUIN0PPS
extern volatile unsigned char           TUIN0PPS            __at(0x365);
#ifndef _LIB_BUILD
asm("TUIN0PPS equ 0365h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TUIN0PPS               :5;
    };
    struct {
        unsigned TUIN0PPS0              :1;
        unsigned TUIN0PPS1              :1;
        unsigned TUIN0PPS2              :1;
        unsigned TUIN0PPS3              :1;
        unsigned TUIN0PPS4              :1;
    };
} TUIN0PPSbits_t;
extern volatile TUIN0PPSbits_t TUIN0PPSbits __at(0x365);
// bitfield macros
#define _TUIN0PPS_TUIN0PPS_POSN                             0x0
#define _TUIN0PPS_TUIN0PPS_POSITION                         0x0
#define _TUIN0PPS_TUIN0PPS_SIZE                             0x5
#define _TUIN0PPS_TUIN0PPS_LENGTH                           0x5
#define _TUIN0PPS_TUIN0PPS_MASK                             0x1F
#define _TUIN0PPS_TUIN0PPS0_POSN                            0x0
#define _TUIN0PPS_TUIN0PPS0_POSITION                        0x0
#define _TUIN0PPS_TUIN0PPS0_SIZE                            0x1
#define _TUIN0PPS_TUIN0PPS0_LENGTH                          0x1
#define _TUIN0PPS_TUIN0PPS0_MASK                            0x1
#define _TUIN0PPS_TUIN0PPS1_POSN                            0x1
#define _TUIN0PPS_TUIN0PPS1_POSITION                        0x1
#define _TUIN0PPS_TUIN0PPS1_SIZE                            0x1
#define _TUIN0PPS_TUIN0PPS1_LENGTH                          0x1
#define _TUIN0PPS_TUIN0PPS1_MASK                            0x2
#define _TUIN0PPS_TUIN0PPS2_POSN                            0x2
#define _TUIN0PPS_TUIN0PPS2_POSITION                        0x2
#define _TUIN0PPS_TUIN0PPS2_SIZE                            0x1
#define _TUIN0PPS_TUIN0PPS2_LENGTH                          0x1
#define _TUIN0PPS_TUIN0PPS2_MASK                            0x4
#define _TUIN0PPS_TUIN0PPS3_POSN                            0x3
#define _TUIN0PPS_TUIN0PPS3_POSITION                        0x3
#define _TUIN0PPS_TUIN0PPS3_SIZE                            0x1
#define _TUIN0PPS_TUIN0PPS3_LENGTH                          0x1
#define _TUIN0PPS_TUIN0PPS3_MASK                            0x8
#define _TUIN0PPS_TUIN0PPS4_POSN                            0x4
#define _TUIN0PPS_TUIN0PPS4_POSITION                        0x4
#define _TUIN0PPS_TUIN0PPS4_SIZE                            0x1
#define _TUIN0PPS_TUIN0PPS4_LENGTH                          0x1
#define _TUIN0PPS_TUIN0PPS4_MASK                            0x10

// Register: TUIN1PPS
#define TUIN1PPS TUIN1PPS
extern volatile unsigned char           TUIN1PPS            __at(0x366);
#ifndef _LIB_BUILD
asm("TUIN1PPS equ 0366h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TUIN1PPS               :5;
    };
    struct {
        unsigned TUIN1PPS0              :1;
        unsigned TUIN1PPS1              :1;
        unsigned TUIN1PPS2              :1;
        unsigned TUIN1PPS3              :1;
        unsigned TUIN1PPS4              :1;
    };
} TUIN1PPSbits_t;
extern volatile TUIN1PPSbits_t TUIN1PPSbits __at(0x366);
// bitfield macros
#define _TUIN1PPS_TUIN1PPS_POSN                             0x0
#define _TUIN1PPS_TUIN1PPS_POSITION                         0x0
#define _TUIN1PPS_TUIN1PPS_SIZE                             0x5
#define _TUIN1PPS_TUIN1PPS_LENGTH                           0x5
#define _TUIN1PPS_TUIN1PPS_MASK                             0x1F
#define _TUIN1PPS_TUIN1PPS0_POSN                            0x0
#define _TUIN1PPS_TUIN1PPS0_POSITION                        0x0
#define _TUIN1PPS_TUIN1PPS0_SIZE                            0x1
#define _TUIN1PPS_TUIN1PPS0_LENGTH                          0x1
#define _TUIN1PPS_TUIN1PPS0_MASK                            0x1
#define _TUIN1PPS_TUIN1PPS1_POSN                            0x1
#define _TUIN1PPS_TUIN1PPS1_POSITION                        0x1
#define _TUIN1PPS_TUIN1PPS1_SIZE                            0x1
#define _TUIN1PPS_TUIN1PPS1_LENGTH                          0x1
#define _TUIN1PPS_TUIN1PPS1_MASK                            0x2
#define _TUIN1PPS_TUIN1PPS2_POSN                            0x2
#define _TUIN1PPS_TUIN1PPS2_POSITION                        0x2
#define _TUIN1PPS_TUIN1PPS2_SIZE                            0x1
#define _TUIN1PPS_TUIN1PPS2_LENGTH                          0x1
#define _TUIN1PPS_TUIN1PPS2_MASK                            0x4
#define _TUIN1PPS_TUIN1PPS3_POSN                            0x3
#define _TUIN1PPS_TUIN1PPS3_POSITION                        0x3
#define _TUIN1PPS_TUIN1PPS3_SIZE                            0x1
#define _TUIN1PPS_TUIN1PPS3_LENGTH                          0x1
#define _TUIN1PPS_TUIN1PPS3_MASK                            0x8
#define _TUIN1PPS_TUIN1PPS4_POSN                            0x4
#define _TUIN1PPS_TUIN1PPS4_POSITION                        0x4
#define _TUIN1PPS_TUIN1PPS4_SIZE                            0x1
#define _TUIN1PPS_TUIN1PPS4_LENGTH                          0x1
#define _TUIN1PPS_TUIN1PPS4_MASK                            0x10

// Register: CCP1PPS
#define CCP1PPS CCP1PPS
extern volatile unsigned char           CCP1PPS             __at(0x369);
#ifndef _LIB_BUILD
asm("CCP1PPS equ 0369h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP1PPS                :5;
    };
    struct {
        unsigned CCP1PPS0               :1;
        unsigned CCP1PPS1               :1;
        unsigned CCP1PPS2               :1;
        unsigned CCP1PPS3               :1;
        unsigned CCP1PPS4               :1;
    };
} CCP1PPSbits_t;
extern volatile CCP1PPSbits_t CCP1PPSbits __at(0x369);
// bitfield macros
#define _CCP1PPS_CCP1PPS_POSN                               0x0
#define _CCP1PPS_CCP1PPS_POSITION                           0x0
#define _CCP1PPS_CCP1PPS_SIZE                               0x5
#define _CCP1PPS_CCP1PPS_LENGTH                             0x5
#define _CCP1PPS_CCP1PPS_MASK                               0x1F
#define _CCP1PPS_CCP1PPS0_POSN                              0x0
#define _CCP1PPS_CCP1PPS0_POSITION                          0x0
#define _CCP1PPS_CCP1PPS0_SIZE                              0x1
#define _CCP1PPS_CCP1PPS0_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS0_MASK                              0x1
#define _CCP1PPS_CCP1PPS1_POSN                              0x1
#define _CCP1PPS_CCP1PPS1_POSITION                          0x1
#define _CCP1PPS_CCP1PPS1_SIZE                              0x1
#define _CCP1PPS_CCP1PPS1_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS1_MASK                              0x2
#define _CCP1PPS_CCP1PPS2_POSN                              0x2
#define _CCP1PPS_CCP1PPS2_POSITION                          0x2
#define _CCP1PPS_CCP1PPS2_SIZE                              0x1
#define _CCP1PPS_CCP1PPS2_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS2_MASK                              0x4
#define _CCP1PPS_CCP1PPS3_POSN                              0x3
#define _CCP1PPS_CCP1PPS3_POSITION                          0x3
#define _CCP1PPS_CCP1PPS3_SIZE                              0x1
#define _CCP1PPS_CCP1PPS3_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS3_MASK                              0x8
#define _CCP1PPS_CCP1PPS4_POSN                              0x4
#define _CCP1PPS_CCP1PPS4_POSITION                          0x4
#define _CCP1PPS_CCP1PPS4_SIZE                              0x1
#define _CCP1PPS_CCP1PPS4_LENGTH                            0x1
#define _CCP1PPS_CCP1PPS4_MASK                              0x10

// Register: CCP2PPS
#define CCP2PPS CCP2PPS
extern volatile unsigned char           CCP2PPS             __at(0x36A);
#ifndef _LIB_BUILD
asm("CCP2PPS equ 036Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CCP2PPS                :5;
    };
    struct {
        unsigned CCP2PPS0               :1;
        unsigned CCP2PPS1               :1;
        unsigned CCP2PPS2               :1;
        unsigned CCP2PPS3               :1;
        unsigned CCP2PPS4               :1;
    };
} CCP2PPSbits_t;
extern volatile CCP2PPSbits_t CCP2PPSbits __at(0x36A);
// bitfield macros
#define _CCP2PPS_CCP2PPS_POSN                               0x0
#define _CCP2PPS_CCP2PPS_POSITION                           0x0
#define _CCP2PPS_CCP2PPS_SIZE                               0x5
#define _CCP2PPS_CCP2PPS_LENGTH                             0x5
#define _CCP2PPS_CCP2PPS_MASK                               0x1F
#define _CCP2PPS_CCP2PPS0_POSN                              0x0
#define _CCP2PPS_CCP2PPS0_POSITION                          0x0
#define _CCP2PPS_CCP2PPS0_SIZE                              0x1
#define _CCP2PPS_CCP2PPS0_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS0_MASK                              0x1
#define _CCP2PPS_CCP2PPS1_POSN                              0x1
#define _CCP2PPS_CCP2PPS1_POSITION                          0x1
#define _CCP2PPS_CCP2PPS1_SIZE                              0x1
#define _CCP2PPS_CCP2PPS1_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS1_MASK                              0x2
#define _CCP2PPS_CCP2PPS2_POSN                              0x2
#define _CCP2PPS_CCP2PPS2_POSITION                          0x2
#define _CCP2PPS_CCP2PPS2_SIZE                              0x1
#define _CCP2PPS_CCP2PPS2_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS2_MASK                              0x4
#define _CCP2PPS_CCP2PPS3_POSN                              0x3
#define _CCP2PPS_CCP2PPS3_POSITION                          0x3
#define _CCP2PPS_CCP2PPS3_SIZE                              0x1
#define _CCP2PPS_CCP2PPS3_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS3_MASK                              0x8
#define _CCP2PPS_CCP2PPS4_POSN                              0x4
#define _CCP2PPS_CCP2PPS4_POSITION                          0x4
#define _CCP2PPS_CCP2PPS4_SIZE                              0x1
#define _CCP2PPS_CCP2PPS4_LENGTH                            0x1
#define _CCP2PPS_CCP2PPS4_MASK                              0x10

// Register: STATUS_CSHAD
#define STATUS_CSHAD STATUS_CSHAD
extern volatile unsigned char           STATUS_CSHAD        __at(0x373);
#ifndef _LIB_BUILD
asm("STATUS_CSHAD equ 0373h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned NOT_PD                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned NOT_TO                 :1;
    };
    struct {
        unsigned C                      :1;
        unsigned DC                     :1;
        unsigned Z                      :1;
        unsigned OV                     :1;
        unsigned N                      :1;
        unsigned nPD                    :1;
        unsigned nTO                    :1;
    };
    struct {
        unsigned                        :5;
        unsigned PD                     :1;
        unsigned TO                     :1;
    };
} STATUS_CSHADbits_t;
extern volatile STATUS_CSHADbits_t STATUS_CSHADbits __at(0x373);
// bitfield macros
#define _STATUS_CSHAD_NOT_PD_POSN                           0x5
#define _STATUS_CSHAD_NOT_PD_POSITION                       0x5
#define _STATUS_CSHAD_NOT_PD_SIZE                           0x1
#define _STATUS_CSHAD_NOT_PD_LENGTH                         0x1
#define _STATUS_CSHAD_NOT_PD_MASK                           0x20
#define _STATUS_CSHAD_NOT_TO_POSN                           0x6
#define _STATUS_CSHAD_NOT_TO_POSITION                       0x6
#define _STATUS_CSHAD_NOT_TO_SIZE                           0x1
#define _STATUS_CSHAD_NOT_TO_LENGTH                         0x1
#define _STATUS_CSHAD_NOT_TO_MASK                           0x40
#define _STATUS_CSHAD_C_POSN                                0x0
#define _STATUS_CSHAD_C_POSITION                            0x0
#define _STATUS_CSHAD_C_SIZE                                0x1
#define _STATUS_CSHAD_C_LENGTH                              0x1
#define _STATUS_CSHAD_C_MASK                                0x1
#define _STATUS_CSHAD_DC_POSN                               0x1
#define _STATUS_CSHAD_DC_POSITION                           0x1
#define _STATUS_CSHAD_DC_SIZE                               0x1
#define _STATUS_CSHAD_DC_LENGTH                             0x1
#define _STATUS_CSHAD_DC_MASK                               0x2
#define _STATUS_CSHAD_Z_POSN                                0x2
#define _STATUS_CSHAD_Z_POSITION                            0x2
#define _STATUS_CSHAD_Z_SIZE                                0x1
#define _STATUS_CSHAD_Z_LENGTH                              0x1
#define _STATUS_CSHAD_Z_MASK                                0x4
#define _STATUS_CSHAD_OV_POSN                               0x3
#define _STATUS_CSHAD_OV_POSITION                           0x3
#define _STATUS_CSHAD_OV_SIZE                               0x1
#define _STATUS_CSHAD_OV_LENGTH                             0x1
#define _STATUS_CSHAD_OV_MASK                               0x8
#define _STATUS_CSHAD_N_POSN                                0x4
#define _STATUS_CSHAD_N_POSITION                            0x4
#define _STATUS_CSHAD_N_SIZE                                0x1
#define _STATUS_CSHAD_N_LENGTH                              0x1
#define _STATUS_CSHAD_N_MASK                                0x10
#define _STATUS_CSHAD_nPD_POSN                              0x5
#define _STATUS_CSHAD_nPD_POSITION                          0x5
#define _STATUS_CSHAD_nPD_SIZE                              0x1
#define _STATUS_CSHAD_nPD_LENGTH                            0x1
#define _STATUS_CSHAD_nPD_MASK                              0x20
#define _STATUS_CSHAD_nTO_POSN                              0x6
#define _STATUS_CSHAD_nTO_POSITION                          0x6
#define _STATUS_CSHAD_nTO_SIZE                              0x1
#define _STATUS_CSHAD_nTO_LENGTH                            0x1
#define _STATUS_CSHAD_nTO_MASK                              0x40
#define _STATUS_CSHAD_PD_POSN                               0x5
#define _STATUS_CSHAD_PD_POSITION                           0x5
#define _STATUS_CSHAD_PD_SIZE                               0x1
#define _STATUS_CSHAD_PD_LENGTH                             0x1
#define _STATUS_CSHAD_PD_MASK                               0x20
#define _STATUS_CSHAD_TO_POSN                               0x6
#define _STATUS_CSHAD_TO_POSITION                           0x6
#define _STATUS_CSHAD_TO_SIZE                               0x1
#define _STATUS_CSHAD_TO_LENGTH                             0x1
#define _STATUS_CSHAD_TO_MASK                               0x40

// Register: WREG_CSHAD
#define WREG_CSHAD WREG_CSHAD
extern volatile unsigned char           WREG_CSHAD          __at(0x374);
#ifndef _LIB_BUILD
asm("WREG_CSHAD equ 0374h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG                   :8;
    };
} WREG_CSHADbits_t;
extern volatile WREG_CSHADbits_t WREG_CSHADbits __at(0x374);
// bitfield macros
#define _WREG_CSHAD_WREG_POSN                               0x0
#define _WREG_CSHAD_WREG_POSITION                           0x0
#define _WREG_CSHAD_WREG_SIZE                               0x8
#define _WREG_CSHAD_WREG_LENGTH                             0x8
#define _WREG_CSHAD_WREG_MASK                               0xFF

// Register: BSR_CSHAD
#define BSR_CSHAD BSR_CSHAD
extern volatile unsigned char           BSR_CSHAD           __at(0x375);
#ifndef _LIB_BUILD
asm("BSR_CSHAD equ 0375h");
#endif

// Register: SHADCON
#define SHADCON SHADCON
extern volatile unsigned char           SHADCON             __at(0x376);
#ifndef _LIB_BUILD
asm("SHADCON equ 0376h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SHADLO                 :1;
    };
} SHADCONbits_t;
extern volatile SHADCONbits_t SHADCONbits __at(0x376);
// bitfield macros
#define _SHADCON_SHADLO_POSN                                0x0
#define _SHADCON_SHADLO_POSITION                            0x0
#define _SHADCON_SHADLO_SIZE                                0x1
#define _SHADCON_SHADLO_LENGTH                              0x1
#define _SHADCON_SHADLO_MASK                                0x1

// Register: STATUS_SHAD
#define STATUS_SHAD STATUS_SHAD
extern volatile unsigned char           STATUS_SHAD         __at(0x377);
#ifndef _LIB_BUILD
asm("STATUS_SHAD equ 0377h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned NOT_PD                 :1;
    };
    struct {
        unsigned                        :6;
        unsigned NOT_TO                 :1;
    };
    struct {
        unsigned C                      :1;
        unsigned DC                     :1;
        unsigned Z                      :1;
        unsigned OV                     :1;
        unsigned N                      :1;
        unsigned nPD                    :1;
        unsigned nTO                    :1;
    };
    struct {
        unsigned                        :5;
        unsigned PD                     :1;
        unsigned TO                     :1;
    };
} STATUS_SHADbits_t;
extern volatile STATUS_SHADbits_t STATUS_SHADbits __at(0x377);
// bitfield macros
#define _STATUS_SHAD_NOT_PD_POSN                            0x5
#define _STATUS_SHAD_NOT_PD_POSITION                        0x5
#define _STATUS_SHAD_NOT_PD_SIZE                            0x1
#define _STATUS_SHAD_NOT_PD_LENGTH                          0x1
#define _STATUS_SHAD_NOT_PD_MASK                            0x20
#define _STATUS_SHAD_NOT_TO_POSN                            0x6
#define _STATUS_SHAD_NOT_TO_POSITION                        0x6
#define _STATUS_SHAD_NOT_TO_SIZE                            0x1
#define _STATUS_SHAD_NOT_TO_LENGTH                          0x1
#define _STATUS_SHAD_NOT_TO_MASK                            0x40
#define _STATUS_SHAD_C_POSN                                 0x0
#define _STATUS_SHAD_C_POSITION                             0x0
#define _STATUS_SHAD_C_SIZE                                 0x1
#define _STATUS_SHAD_C_LENGTH                               0x1
#define _STATUS_SHAD_C_MASK                                 0x1
#define _STATUS_SHAD_DC_POSN                                0x1
#define _STATUS_SHAD_DC_POSITION                            0x1
#define _STATUS_SHAD_DC_SIZE                                0x1
#define _STATUS_SHAD_DC_LENGTH                              0x1
#define _STATUS_SHAD_DC_MASK                                0x2
#define _STATUS_SHAD_Z_POSN                                 0x2
#define _STATUS_SHAD_Z_POSITION                             0x2
#define _STATUS_SHAD_Z_SIZE                                 0x1
#define _STATUS_SHAD_Z_LENGTH                               0x1
#define _STATUS_SHAD_Z_MASK                                 0x4
#define _STATUS_SHAD_OV_POSN                                0x3
#define _STATUS_SHAD_OV_POSITION                            0x3
#define _STATUS_SHAD_OV_SIZE                                0x1
#define _STATUS_SHAD_OV_LENGTH                              0x1
#define _STATUS_SHAD_OV_MASK                                0x8
#define _STATUS_SHAD_N_POSN                                 0x4
#define _STATUS_SHAD_N_POSITION                             0x4
#define _STATUS_SHAD_N_SIZE                                 0x1
#define _STATUS_SHAD_N_LENGTH                               0x1
#define _STATUS_SHAD_N_MASK                                 0x10
#define _STATUS_SHAD_nPD_POSN                               0x5
#define _STATUS_SHAD_nPD_POSITION                           0x5
#define _STATUS_SHAD_nPD_SIZE                               0x1
#define _STATUS_SHAD_nPD_LENGTH                             0x1
#define _STATUS_SHAD_nPD_MASK                               0x20
#define _STATUS_SHAD_nTO_POSN                               0x6
#define _STATUS_SHAD_nTO_POSITION                           0x6
#define _STATUS_SHAD_nTO_SIZE                               0x1
#define _STATUS_SHAD_nTO_LENGTH                             0x1
#define _STATUS_SHAD_nTO_MASK                               0x40
#define _STATUS_SHAD_PD_POSN                                0x5
#define _STATUS_SHAD_PD_POSITION                            0x5
#define _STATUS_SHAD_PD_SIZE                                0x1
#define _STATUS_SHAD_PD_LENGTH                              0x1
#define _STATUS_SHAD_PD_MASK                                0x20
#define _STATUS_SHAD_TO_POSN                                0x6
#define _STATUS_SHAD_TO_POSITION                            0x6
#define _STATUS_SHAD_TO_SIZE                                0x1
#define _STATUS_SHAD_TO_LENGTH                              0x1
#define _STATUS_SHAD_TO_MASK                                0x40

// Register: WREG_SHAD
#define WREG_SHAD WREG_SHAD
extern volatile unsigned char           WREG_SHAD           __at(0x378);
#ifndef _LIB_BUILD
asm("WREG_SHAD equ 0378h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG                   :8;
    };
} WREG_SHADbits_t;
extern volatile WREG_SHADbits_t WREG_SHADbits __at(0x378);
// bitfield macros
#define _WREG_SHAD_WREG_POSN                                0x0
#define _WREG_SHAD_WREG_POSITION                            0x0
#define _WREG_SHAD_WREG_SIZE                                0x8
#define _WREG_SHAD_WREG_LENGTH                              0x8
#define _WREG_SHAD_WREG_MASK                                0xFF

// Register: BSR_SHAD
#define BSR_SHAD BSR_SHAD
extern volatile unsigned char           BSR_SHAD            __at(0x379);
#ifndef _LIB_BUILD
asm("BSR_SHAD equ 0379h");
#endif

// Register: PCLAT_SHAD
#define PCLAT_SHAD PCLAT_SHAD
extern volatile unsigned short          PCLAT_SHAD          __at(0x37A);
#ifndef _LIB_BUILD
asm("PCLAT_SHAD equ 037Ah");
#endif

// Register: PCLATH_SHAD
#define PCLATH_SHAD PCLATH_SHAD
extern volatile unsigned char           PCLATH_SHAD         __at(0x37A);
#ifndef _LIB_BUILD
asm("PCLATH_SHAD equ 037Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :8;
    };
} PCLATH_SHADbits_t;
extern volatile PCLATH_SHADbits_t PCLATH_SHADbits __at(0x37A);
// bitfield macros
#define _PCLATH_SHAD_PCH_POSN                               0x0
#define _PCLATH_SHAD_PCH_POSITION                           0x0
#define _PCLATH_SHAD_PCH_SIZE                               0x8
#define _PCLATH_SHAD_PCH_LENGTH                             0x8
#define _PCLATH_SHAD_PCH_MASK                               0xFF

// Register: PCLATU_SHAD
#define PCLATU_SHAD PCLATU_SHAD
extern volatile unsigned char           PCLATU_SHAD         __at(0x37B);
#ifndef _LIB_BUILD
asm("PCLATU_SHAD equ 037Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCU                    :5;
    };
} PCLATU_SHADbits_t;
extern volatile PCLATU_SHADbits_t PCLATU_SHADbits __at(0x37B);
// bitfield macros
#define _PCLATU_SHAD_PCU_POSN                               0x0
#define _PCLATU_SHAD_PCU_POSITION                           0x0
#define _PCLATU_SHAD_PCU_SIZE                               0x5
#define _PCLATU_SHAD_PCU_LENGTH                             0x5
#define _PCLATU_SHAD_PCU_MASK                               0x1F

// Register: FSR0_SHAD
#define FSR0_SHAD FSR0_SHAD
extern volatile unsigned short          FSR0_SHAD           __at(0x37C);
#ifndef _LIB_BUILD
asm("FSR0_SHAD equ 037Ch");
#endif

// Register: FSR0L_SHAD
#define FSR0L_SHAD FSR0L_SHAD
extern volatile unsigned char           FSR0L_SHAD          __at(0x37C);
#ifndef _LIB_BUILD
asm("FSR0L_SHAD equ 037Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L                  :8;
    };
} FSR0L_SHADbits_t;
extern volatile FSR0L_SHADbits_t FSR0L_SHADbits __at(0x37C);
// bitfield macros
#define _FSR0L_SHAD_FSR0L_POSN                              0x0
#define _FSR0L_SHAD_FSR0L_POSITION                          0x0
#define _FSR0L_SHAD_FSR0L_SIZE                              0x8
#define _FSR0L_SHAD_FSR0L_LENGTH                            0x8
#define _FSR0L_SHAD_FSR0L_MASK                              0xFF

// Register: FSR0H_SHAD
#define FSR0H_SHAD FSR0H_SHAD
extern volatile unsigned char           FSR0H_SHAD          __at(0x37D);
#ifndef _LIB_BUILD
asm("FSR0H_SHAD equ 037Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0H                  :6;
    };
} FSR0H_SHADbits_t;
extern volatile FSR0H_SHADbits_t FSR0H_SHADbits __at(0x37D);
// bitfield macros
#define _FSR0H_SHAD_FSR0H_POSN                              0x0
#define _FSR0H_SHAD_FSR0H_POSITION                          0x0
#define _FSR0H_SHAD_FSR0H_SIZE                              0x6
#define _FSR0H_SHAD_FSR0H_LENGTH                            0x6
#define _FSR0H_SHAD_FSR0H_MASK                              0x3F

// Register: FSR1_SHAD
#define FSR1_SHAD FSR1_SHAD
extern volatile unsigned short          FSR1_SHAD           __at(0x37E);
#ifndef _LIB_BUILD
asm("FSR1_SHAD equ 037Eh");
#endif

// Register: FSR1L_SHAD
#define FSR1L_SHAD FSR1L_SHAD
extern volatile unsigned char           FSR1L_SHAD          __at(0x37E);
#ifndef _LIB_BUILD
asm("FSR1L_SHAD equ 037Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L                  :8;
    };
} FSR1L_SHADbits_t;
extern volatile FSR1L_SHADbits_t FSR1L_SHADbits __at(0x37E);
// bitfield macros
#define _FSR1L_SHAD_FSR1L_POSN                              0x0
#define _FSR1L_SHAD_FSR1L_POSITION                          0x0
#define _FSR1L_SHAD_FSR1L_SIZE                              0x8
#define _FSR1L_SHAD_FSR1L_LENGTH                            0x8
#define _FSR1L_SHAD_FSR1L_MASK                              0xFF

// Register: FSR1H_SHAD
#define FSR1H_SHAD FSR1H_SHAD
extern volatile unsigned char           FSR1H_SHAD          __at(0x37F);
#ifndef _LIB_BUILD
asm("FSR1H_SHAD equ 037Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1H                  :6;
    };
} FSR1H_SHADbits_t;
extern volatile FSR1H_SHADbits_t FSR1H_SHADbits __at(0x37F);
// bitfield macros
#define _FSR1H_SHAD_FSR1H_POSN                              0x0
#define _FSR1H_SHAD_FSR1H_POSITION                          0x0
#define _FSR1H_SHAD_FSR1H_SIZE                              0x6
#define _FSR1H_SHAD_FSR1H_LENGTH                            0x6
#define _FSR1H_SHAD_FSR1H_MASK                              0x3F

// Register: FSR2_SHAD
#define FSR2_SHAD FSR2_SHAD
extern volatile unsigned short          FSR2_SHAD           __at(0x380);
#ifndef _LIB_BUILD
asm("FSR2_SHAD equ 0380h");
#endif

// Register: FSR2L_SHAD
#define FSR2L_SHAD FSR2L_SHAD
extern volatile unsigned char           FSR2L_SHAD          __at(0x380);
#ifndef _LIB_BUILD
asm("FSR2L_SHAD equ 0380h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR2L                  :8;
    };
} FSR2L_SHADbits_t;
extern volatile FSR2L_SHADbits_t FSR2L_SHADbits __at(0x380);
// bitfield macros
#define _FSR2L_SHAD_FSR2L_POSN                              0x0
#define _FSR2L_SHAD_FSR2L_POSITION                          0x0
#define _FSR2L_SHAD_FSR2L_SIZE                              0x8
#define _FSR2L_SHAD_FSR2L_LENGTH                            0x8
#define _FSR2L_SHAD_FSR2L_MASK                              0xFF

// Register: FSR2H_SHAD
#define FSR2H_SHAD FSR2H_SHAD
extern volatile unsigned char           FSR2H_SHAD          __at(0x381);
#ifndef _LIB_BUILD
asm("FSR2H_SHAD equ 0381h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR2H                  :6;
    };
} FSR2H_SHADbits_t;
extern volatile FSR2H_SHADbits_t FSR2H_SHADbits __at(0x381);
// bitfield macros
#define _FSR2H_SHAD_FSR2H_POSN                              0x0
#define _FSR2H_SHAD_FSR2H_POSITION                          0x0
#define _FSR2H_SHAD_FSR2H_SIZE                              0x6
#define _FSR2H_SHAD_FSR2H_LENGTH                            0x6
#define _FSR2H_SHAD_FSR2H_MASK                              0x3F

// Register: PROD_SHAD
#define PROD_SHAD PROD_SHAD
extern volatile unsigned short          PROD_SHAD           __at(0x382);
#ifndef _LIB_BUILD
asm("PROD_SHAD equ 0382h");
#endif

// Register: PRODL_SHAD
#define PRODL_SHAD PRODL_SHAD
extern volatile unsigned char           PRODL_SHAD          __at(0x382);
#ifndef _LIB_BUILD
asm("PRODL_SHAD equ 0382h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRODL                  :8;
    };
} PRODL_SHADbits_t;
extern volatile PRODL_SHADbits_t PRODL_SHADbits __at(0x382);
// bitfield macros
#define _PRODL_SHAD_PRODL_POSN                              0x0
#define _PRODL_SHAD_PRODL_POSITION                          0x0
#define _PRODL_SHAD_PRODL_SIZE                              0x8
#define _PRODL_SHAD_PRODL_LENGTH                            0x8
#define _PRODL_SHAD_PRODL_MASK                              0xFF

// Register: PRODH_SHAD
#define PRODH_SHAD PRODH_SHAD
extern volatile unsigned char           PRODH_SHAD          __at(0x383);
#ifndef _LIB_BUILD
asm("PRODH_SHAD equ 0383h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRODH                  :8;
    };
} PRODH_SHADbits_t;
extern volatile PRODH_SHADbits_t PRODH_SHADbits __at(0x383);
// bitfield macros
#define _PRODH_SHAD_PRODH_POSN                              0x0
#define _PRODH_SHAD_PRODH_POSITION                          0x0
#define _PRODH_SHAD_PRODH_SIZE                              0x8
#define _PRODH_SHAD_PRODH_LENGTH                            0x8
#define _PRODH_SHAD_PRODH_MASK                              0xFF

// Register: PWMIN0PPS
#define PWMIN0PPS PWMIN0PPS
extern volatile unsigned char           PWMIN0PPS           __at(0x384);
#ifndef _LIB_BUILD
asm("PWMIN0PPS equ 0384h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PWMIN0PPS              :5;
    };
    struct {
        unsigned PWMIN0PPS0             :1;
        unsigned PWMIN0PPS1             :1;
        unsigned PWMIN0PPS2             :1;
        unsigned PWMIN0PPS3             :1;
        unsigned PWMIN0PPS4             :1;
    };
} PWMIN0PPSbits_t;
extern volatile PWMIN0PPSbits_t PWMIN0PPSbits __at(0x384);
// bitfield macros
#define _PWMIN0PPS_PWMIN0PPS_POSN                           0x0
#define _PWMIN0PPS_PWMIN0PPS_POSITION                       0x0
#define _PWMIN0PPS_PWMIN0PPS_SIZE                           0x5
#define _PWMIN0PPS_PWMIN0PPS_LENGTH                         0x5
#define _PWMIN0PPS_PWMIN0PPS_MASK                           0x1F
#define _PWMIN0PPS_PWMIN0PPS0_POSN                          0x0
#define _PWMIN0PPS_PWMIN0PPS0_POSITION                      0x0
#define _PWMIN0PPS_PWMIN0PPS0_SIZE                          0x1
#define _PWMIN0PPS_PWMIN0PPS0_LENGTH                        0x1
#define _PWMIN0PPS_PWMIN0PPS0_MASK                          0x1
#define _PWMIN0PPS_PWMIN0PPS1_POSN                          0x1
#define _PWMIN0PPS_PWMIN0PPS1_POSITION                      0x1
#define _PWMIN0PPS_PWMIN0PPS1_SIZE                          0x1
#define _PWMIN0PPS_PWMIN0PPS1_LENGTH                        0x1
#define _PWMIN0PPS_PWMIN0PPS1_MASK                          0x2
#define _PWMIN0PPS_PWMIN0PPS2_POSN                          0x2
#define _PWMIN0PPS_PWMIN0PPS2_POSITION                      0x2
#define _PWMIN0PPS_PWMIN0PPS2_SIZE                          0x1
#define _PWMIN0PPS_PWMIN0PPS2_LENGTH                        0x1
#define _PWMIN0PPS_PWMIN0PPS2_MASK                          0x4
#define _PWMIN0PPS_PWMIN0PPS3_POSN                          0x3
#define _PWMIN0PPS_PWMIN0PPS3_POSITION                      0x3
#define _PWMIN0PPS_PWMIN0PPS3_SIZE                          0x1
#define _PWMIN0PPS_PWMIN0PPS3_LENGTH                        0x1
#define _PWMIN0PPS_PWMIN0PPS3_MASK                          0x8
#define _PWMIN0PPS_PWMIN0PPS4_POSN                          0x4
#define _PWMIN0PPS_PWMIN0PPS4_POSITION                      0x4
#define _PWMIN0PPS_PWMIN0PPS4_SIZE                          0x1
#define _PWMIN0PPS_PWMIN0PPS4_LENGTH                        0x1
#define _PWMIN0PPS_PWMIN0PPS4_MASK                          0x10

// Register: PWMIN1PPS
#define PWMIN1PPS PWMIN1PPS
extern volatile unsigned char           PWMIN1PPS           __at(0x385);
#ifndef _LIB_BUILD
asm("PWMIN1PPS equ 0385h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PWMIN1PPS              :5;
    };
    struct {
        unsigned PWMIN1PPS0             :1;
        unsigned PWMIN1PPS1             :1;
        unsigned PWMIN1PPS2             :1;
        unsigned PWMIN1PPS3             :1;
        unsigned PWMIN1PPS4             :1;
    };
} PWMIN1PPSbits_t;
extern volatile PWMIN1PPSbits_t PWMIN1PPSbits __at(0x385);
// bitfield macros
#define _PWMIN1PPS_PWMIN1PPS_POSN                           0x0
#define _PWMIN1PPS_PWMIN1PPS_POSITION                       0x0
#define _PWMIN1PPS_PWMIN1PPS_SIZE                           0x5
#define _PWMIN1PPS_PWMIN1PPS_LENGTH                         0x5
#define _PWMIN1PPS_PWMIN1PPS_MASK                           0x1F
#define _PWMIN1PPS_PWMIN1PPS0_POSN                          0x0
#define _PWMIN1PPS_PWMIN1PPS0_POSITION                      0x0
#define _PWMIN1PPS_PWMIN1PPS0_SIZE                          0x1
#define _PWMIN1PPS_PWMIN1PPS0_LENGTH                        0x1
#define _PWMIN1PPS_PWMIN1PPS0_MASK                          0x1
#define _PWMIN1PPS_PWMIN1PPS1_POSN                          0x1
#define _PWMIN1PPS_PWMIN1PPS1_POSITION                      0x1
#define _PWMIN1PPS_PWMIN1PPS1_SIZE                          0x1
#define _PWMIN1PPS_PWMIN1PPS1_LENGTH                        0x1
#define _PWMIN1PPS_PWMIN1PPS1_MASK                          0x2
#define _PWMIN1PPS_PWMIN1PPS2_POSN                          0x2
#define _PWMIN1PPS_PWMIN1PPS2_POSITION                      0x2
#define _PWMIN1PPS_PWMIN1PPS2_SIZE                          0x1
#define _PWMIN1PPS_PWMIN1PPS2_LENGTH                        0x1
#define _PWMIN1PPS_PWMIN1PPS2_MASK                          0x4
#define _PWMIN1PPS_PWMIN1PPS3_POSN                          0x3
#define _PWMIN1PPS_PWMIN1PPS3_POSITION                      0x3
#define _PWMIN1PPS_PWMIN1PPS3_SIZE                          0x1
#define _PWMIN1PPS_PWMIN1PPS3_LENGTH                        0x1
#define _PWMIN1PPS_PWMIN1PPS3_MASK                          0x8
#define _PWMIN1PPS_PWMIN1PPS4_POSN                          0x4
#define _PWMIN1PPS_PWMIN1PPS4_POSITION                      0x4
#define _PWMIN1PPS_PWMIN1PPS4_SIZE                          0x1
#define _PWMIN1PPS_PWMIN1PPS4_LENGTH                        0x1
#define _PWMIN1PPS_PWMIN1PPS4_MASK                          0x10

// Register: PWM1ERSPPS
#define PWM1ERSPPS PWM1ERSPPS
extern volatile unsigned char           PWM1ERSPPS          __at(0x386);
#ifndef _LIB_BUILD
asm("PWM1ERSPPS equ 0386h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PWM1ERSPPS             :5;
    };
    struct {
        unsigned PWM1ERSPPS0            :1;
        unsigned PWM1ERSPPS1            :1;
        unsigned PWM1ERSPPS2            :1;
        unsigned PWM1ERSPPS3            :1;
        unsigned PWM1ERSPPS4            :1;
    };
} PWM1ERSPPSbits_t;
extern volatile PWM1ERSPPSbits_t PWM1ERSPPSbits __at(0x386);
// bitfield macros
#define _PWM1ERSPPS_PWM1ERSPPS_POSN                         0x0
#define _PWM1ERSPPS_PWM1ERSPPS_POSITION                     0x0
#define _PWM1ERSPPS_PWM1ERSPPS_SIZE                         0x5
#define _PWM1ERSPPS_PWM1ERSPPS_LENGTH                       0x5
#define _PWM1ERSPPS_PWM1ERSPPS_MASK                         0x1F
#define _PWM1ERSPPS_PWM1ERSPPS0_POSN                        0x0
#define _PWM1ERSPPS_PWM1ERSPPS0_POSITION                    0x0
#define _PWM1ERSPPS_PWM1ERSPPS0_SIZE                        0x1
#define _PWM1ERSPPS_PWM1ERSPPS0_LENGTH                      0x1
#define _PWM1ERSPPS_PWM1ERSPPS0_MASK                        0x1
#define _PWM1ERSPPS_PWM1ERSPPS1_POSN                        0x1
#define _PWM1ERSPPS_PWM1ERSPPS1_POSITION                    0x1
#define _PWM1ERSPPS_PWM1ERSPPS1_SIZE                        0x1
#define _PWM1ERSPPS_PWM1ERSPPS1_LENGTH                      0x1
#define _PWM1ERSPPS_PWM1ERSPPS1_MASK                        0x2
#define _PWM1ERSPPS_PWM1ERSPPS2_POSN                        0x2
#define _PWM1ERSPPS_PWM1ERSPPS2_POSITION                    0x2
#define _PWM1ERSPPS_PWM1ERSPPS2_SIZE                        0x1
#define _PWM1ERSPPS_PWM1ERSPPS2_LENGTH                      0x1
#define _PWM1ERSPPS_PWM1ERSPPS2_MASK                        0x4
#define _PWM1ERSPPS_PWM1ERSPPS3_POSN                        0x3
#define _PWM1ERSPPS_PWM1ERSPPS3_POSITION                    0x3
#define _PWM1ERSPPS_PWM1ERSPPS3_SIZE                        0x1
#define _PWM1ERSPPS_PWM1ERSPPS3_LENGTH                      0x1
#define _PWM1ERSPPS_PWM1ERSPPS3_MASK                        0x8
#define _PWM1ERSPPS_PWM1ERSPPS4_POSN                        0x4
#define _PWM1ERSPPS_PWM1ERSPPS4_POSITION                    0x4
#define _PWM1ERSPPS_PWM1ERSPPS4_SIZE                        0x1
#define _PWM1ERSPPS_PWM1ERSPPS4_LENGTH                      0x1
#define _PWM1ERSPPS_PWM1ERSPPS4_MASK                        0x10

// Register: PWM2ERSPPS
#define PWM2ERSPPS PWM2ERSPPS
extern volatile unsigned char           PWM2ERSPPS          __at(0x387);
#ifndef _LIB_BUILD
asm("PWM2ERSPPS equ 0387h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PWM2ERSPPS             :5;
    };
    struct {
        unsigned PWM2ERSPPS0            :1;
        unsigned PWM2ERSPPS1            :1;
        unsigned PWM2ERSPPS2            :1;
        unsigned PWM2ERSPPS3            :1;
        unsigned PWM2ERSPPS4            :1;
    };
} PWM2ERSPPSbits_t;
extern volatile PWM2ERSPPSbits_t PWM2ERSPPSbits __at(0x387);
// bitfield macros
#define _PWM2ERSPPS_PWM2ERSPPS_POSN                         0x0
#define _PWM2ERSPPS_PWM2ERSPPS_POSITION                     0x0
#define _PWM2ERSPPS_PWM2ERSPPS_SIZE                         0x5
#define _PWM2ERSPPS_PWM2ERSPPS_LENGTH                       0x5
#define _PWM2ERSPPS_PWM2ERSPPS_MASK                         0x1F
#define _PWM2ERSPPS_PWM2ERSPPS0_POSN                        0x0
#define _PWM2ERSPPS_PWM2ERSPPS0_POSITION                    0x0
#define _PWM2ERSPPS_PWM2ERSPPS0_SIZE                        0x1
#define _PWM2ERSPPS_PWM2ERSPPS0_LENGTH                      0x1
#define _PWM2ERSPPS_PWM2ERSPPS0_MASK                        0x1
#define _PWM2ERSPPS_PWM2ERSPPS1_POSN                        0x1
#define _PWM2ERSPPS_PWM2ERSPPS1_POSITION                    0x1
#define _PWM2ERSPPS_PWM2ERSPPS1_SIZE                        0x1
#define _PWM2ERSPPS_PWM2ERSPPS1_LENGTH                      0x1
#define _PWM2ERSPPS_PWM2ERSPPS1_MASK                        0x2
#define _PWM2ERSPPS_PWM2ERSPPS2_POSN                        0x2
#define _PWM2ERSPPS_PWM2ERSPPS2_POSITION                    0x2
#define _PWM2ERSPPS_PWM2ERSPPS2_SIZE                        0x1
#define _PWM2ERSPPS_PWM2ERSPPS2_LENGTH                      0x1
#define _PWM2ERSPPS_PWM2ERSPPS2_MASK                        0x4
#define _PWM2ERSPPS_PWM2ERSPPS3_POSN                        0x3
#define _PWM2ERSPPS_PWM2ERSPPS3_POSITION                    0x3
#define _PWM2ERSPPS_PWM2ERSPPS3_SIZE                        0x1
#define _PWM2ERSPPS_PWM2ERSPPS3_LENGTH                      0x1
#define _PWM2ERSPPS_PWM2ERSPPS3_MASK                        0x8
#define _PWM2ERSPPS_PWM2ERSPPS4_POSN                        0x4
#define _PWM2ERSPPS_PWM2ERSPPS4_POSITION                    0x4
#define _PWM2ERSPPS_PWM2ERSPPS4_SIZE                        0x1
#define _PWM2ERSPPS_PWM2ERSPPS4_LENGTH                      0x1
#define _PWM2ERSPPS_PWM2ERSPPS4_MASK                        0x10

// Register: CWG1PPS
#define CWG1PPS CWG1PPS
extern volatile unsigned char           CWG1PPS             __at(0x399);
#ifndef _LIB_BUILD
asm("CWG1PPS equ 0399h");
#endif
// aliases
extern volatile unsigned char           CWG1INPPS           __at(0x399);
#ifndef _LIB_BUILD
asm("CWG1INPPS equ 0399h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CWG1INPPS              :5;
    };
    struct {
        unsigned CWGINPPS0              :1;
        unsigned CWGINPPS1              :1;
        unsigned CWGINPPS2              :1;
        unsigned CWGINPPS3              :1;
        unsigned CWGINPPS4              :1;
    };
    struct {
        unsigned CWG1INPPS0             :1;
        unsigned CWG1INPPS1             :1;
        unsigned CWG1INPPS2             :1;
        unsigned CWG1INPPS3             :1;
        unsigned CWG1INPPS4             :1;
    };
    struct {
        unsigned CWGINPPS               :5;
    };
} CWG1PPSbits_t;
extern volatile CWG1PPSbits_t CWG1PPSbits __at(0x399);
// bitfield macros
#define _CWG1PPS_CWG1INPPS_POSN                             0x0
#define _CWG1PPS_CWG1INPPS_POSITION                         0x0
#define _CWG1PPS_CWG1INPPS_SIZE                             0x5
#define _CWG1PPS_CWG1INPPS_LENGTH                           0x5
#define _CWG1PPS_CWG1INPPS_MASK                             0x1F
#define _CWG1PPS_CWGINPPS0_POSN                             0x0
#define _CWG1PPS_CWGINPPS0_POSITION                         0x0
#define _CWG1PPS_CWGINPPS0_SIZE                             0x1
#define _CWG1PPS_CWGINPPS0_LENGTH                           0x1
#define _CWG1PPS_CWGINPPS0_MASK                             0x1
#define _CWG1PPS_CWGINPPS1_POSN                             0x1
#define _CWG1PPS_CWGINPPS1_POSITION                         0x1
#define _CWG1PPS_CWGINPPS1_SIZE                             0x1
#define _CWG1PPS_CWGINPPS1_LENGTH                           0x1
#define _CWG1PPS_CWGINPPS1_MASK                             0x2
#define _CWG1PPS_CWGINPPS2_POSN                             0x2
#define _CWG1PPS_CWGINPPS2_POSITION                         0x2
#define _CWG1PPS_CWGINPPS2_SIZE                             0x1
#define _CWG1PPS_CWGINPPS2_LENGTH                           0x1
#define _CWG1PPS_CWGINPPS2_MASK                             0x4
#define _CWG1PPS_CWGINPPS3_POSN                             0x3
#define _CWG1PPS_CWGINPPS3_POSITION                         0x3
#define _CWG1PPS_CWGINPPS3_SIZE                             0x1
#define _CWG1PPS_CWGINPPS3_LENGTH                           0x1
#define _CWG1PPS_CWGINPPS3_MASK                             0x8
#define _CWG1PPS_CWGINPPS4_POSN                             0x4
#define _CWG1PPS_CWGINPPS4_POSITION                         0x4
#define _CWG1PPS_CWGINPPS4_SIZE                             0x1
#define _CWG1PPS_CWGINPPS4_LENGTH                           0x1
#define _CWG1PPS_CWGINPPS4_MASK                             0x10
#define _CWG1PPS_CWG1INPPS0_POSN                            0x0
#define _CWG1PPS_CWG1INPPS0_POSITION                        0x0
#define _CWG1PPS_CWG1INPPS0_SIZE                            0x1
#define _CWG1PPS_CWG1INPPS0_LENGTH                          0x1
#define _CWG1PPS_CWG1INPPS0_MASK                            0x1
#define _CWG1PPS_CWG1INPPS1_POSN                            0x1
#define _CWG1PPS_CWG1INPPS1_POSITION                        0x1
#define _CWG1PPS_CWG1INPPS1_SIZE                            0x1
#define _CWG1PPS_CWG1INPPS1_LENGTH                          0x1
#define _CWG1PPS_CWG1INPPS1_MASK                            0x2
#define _CWG1PPS_CWG1INPPS2_POSN                            0x2
#define _CWG1PPS_CWG1INPPS2_POSITION                        0x2
#define _CWG1PPS_CWG1INPPS2_SIZE                            0x1
#define _CWG1PPS_CWG1INPPS2_LENGTH                          0x1
#define _CWG1PPS_CWG1INPPS2_MASK                            0x4
#define _CWG1PPS_CWG1INPPS3_POSN                            0x3
#define _CWG1PPS_CWG1INPPS3_POSITION                        0x3
#define _CWG1PPS_CWG1INPPS3_SIZE                            0x1
#define _CWG1PPS_CWG1INPPS3_LENGTH                          0x1
#define _CWG1PPS_CWG1INPPS3_MASK                            0x8
#define _CWG1PPS_CWG1INPPS4_POSN                            0x4
#define _CWG1PPS_CWG1INPPS4_POSITION                        0x4
#define _CWG1PPS_CWG1INPPS4_SIZE                            0x1
#define _CWG1PPS_CWG1INPPS4_LENGTH                          0x1
#define _CWG1PPS_CWG1INPPS4_MASK                            0x10
#define _CWG1PPS_CWGINPPS_POSN                              0x0
#define _CWG1PPS_CWGINPPS_POSITION                          0x0
#define _CWG1PPS_CWGINPPS_SIZE                              0x5
#define _CWG1PPS_CWGINPPS_LENGTH                            0x5
#define _CWG1PPS_CWGINPPS_MASK                              0x1F
// alias bitfield definitions
typedef union {
    struct {
        unsigned CWG1INPPS              :5;
    };
    struct {
        unsigned CWGINPPS0              :1;
        unsigned CWGINPPS1              :1;
        unsigned CWGINPPS2              :1;
        unsigned CWGINPPS3              :1;
        unsigned CWGINPPS4              :1;
    };
    struct {
        unsigned CWG1INPPS0             :1;
        unsigned CWG1INPPS1             :1;
        unsigned CWG1INPPS2             :1;
        unsigned CWG1INPPS3             :1;
        unsigned CWG1INPPS4             :1;
    };
    struct {
        unsigned CWGINPPS               :5;
    };
} CWG1INPPSbits_t;
extern volatile CWG1INPPSbits_t CWG1INPPSbits __at(0x399);
// bitfield macros
#define _CWG1INPPS_CWG1INPPS_POSN                           0x0
#define _CWG1INPPS_CWG1INPPS_POSITION                       0x0
#define _CWG1INPPS_CWG1INPPS_SIZE                           0x5
#define _CWG1INPPS_CWG1INPPS_LENGTH                         0x5
#define _CWG1INPPS_CWG1INPPS_MASK                           0x1F
#define _CWG1INPPS_CWGINPPS0_POSN                           0x0
#define _CWG1INPPS_CWGINPPS0_POSITION                       0x0
#define _CWG1INPPS_CWGINPPS0_SIZE                           0x1
#define _CWG1INPPS_CWGINPPS0_LENGTH                         0x1
#define _CWG1INPPS_CWGINPPS0_MASK                           0x1
#define _CWG1INPPS_CWGINPPS1_POSN                           0x1
#define _CWG1INPPS_CWGINPPS1_POSITION                       0x1
#define _CWG1INPPS_CWGINPPS1_SIZE                           0x1
#define _CWG1INPPS_CWGINPPS1_LENGTH                         0x1
#define _CWG1INPPS_CWGINPPS1_MASK                           0x2
#define _CWG1INPPS_CWGINPPS2_POSN                           0x2
#define _CWG1INPPS_CWGINPPS2_POSITION                       0x2
#define _CWG1INPPS_CWGINPPS2_SIZE                           0x1
#define _CWG1INPPS_CWGINPPS2_LENGTH                         0x1
#define _CWG1INPPS_CWGINPPS2_MASK                           0x4
#define _CWG1INPPS_CWGINPPS3_POSN                           0x3
#define _CWG1INPPS_CWGINPPS3_POSITION                       0x3
#define _CWG1INPPS_CWGINPPS3_SIZE                           0x1
#define _CWG1INPPS_CWGINPPS3_LENGTH                         0x1
#define _CWG1INPPS_CWGINPPS3_MASK                           0x8
#define _CWG1INPPS_CWGINPPS4_POSN                           0x4
#define _CWG1INPPS_CWGINPPS4_POSITION                       0x4
#define _CWG1INPPS_CWGINPPS4_SIZE                           0x1
#define _CWG1INPPS_CWGINPPS4_LENGTH                         0x1
#define _CWG1INPPS_CWGINPPS4_MASK                           0x10
#define _CWG1INPPS_CWG1INPPS0_POSN                          0x0
#define _CWG1INPPS_CWG1INPPS0_POSITION                      0x0
#define _CWG1INPPS_CWG1INPPS0_SIZE                          0x1
#define _CWG1INPPS_CWG1INPPS0_LENGTH                        0x1
#define _CWG1INPPS_CWG1INPPS0_MASK                          0x1
#define _CWG1INPPS_CWG1INPPS1_POSN                          0x1
#define _CWG1INPPS_CWG1INPPS1_POSITION                      0x1
#define _CWG1INPPS_CWG1INPPS1_SIZE                          0x1
#define _CWG1INPPS_CWG1INPPS1_LENGTH                        0x1
#define _CWG1INPPS_CWG1INPPS1_MASK                          0x2
#define _CWG1INPPS_CWG1INPPS2_POSN                          0x2
#define _CWG1INPPS_CWG1INPPS2_POSITION                      0x2
#define _CWG1INPPS_CWG1INPPS2_SIZE                          0x1
#define _CWG1INPPS_CWG1INPPS2_LENGTH                        0x1
#define _CWG1INPPS_CWG1INPPS2_MASK                          0x4
#define _CWG1INPPS_CWG1INPPS3_POSN                          0x3
#define _CWG1INPPS_CWG1INPPS3_POSITION                      0x3
#define _CWG1INPPS_CWG1INPPS3_SIZE                          0x1
#define _CWG1INPPS_CWG1INPPS3_LENGTH                        0x1
#define _CWG1INPPS_CWG1INPPS3_MASK                          0x8
#define _CWG1INPPS_CWG1INPPS4_POSN                          0x4
#define _CWG1INPPS_CWG1INPPS4_POSITION                      0x4
#define _CWG1INPPS_CWG1INPPS4_SIZE                          0x1
#define _CWG1INPPS_CWG1INPPS4_LENGTH                        0x1
#define _CWG1INPPS_CWG1INPPS4_MASK                          0x10
#define _CWG1INPPS_CWGINPPS_POSN                            0x0
#define _CWG1INPPS_CWGINPPS_POSITION                        0x0
#define _CWG1INPPS_CWGINPPS_SIZE                            0x5
#define _CWG1INPPS_CWGINPPS_LENGTH                          0x5
#define _CWG1INPPS_CWGINPPS_MASK                            0x1F

// Register: CLCIN0PPS
#define CLCIN0PPS CLCIN0PPS
extern volatile unsigned char           CLCIN0PPS           __at(0x39D);
#ifndef _LIB_BUILD
asm("CLCIN0PPS equ 039Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN0PPS              :5;
    };
    struct {
        unsigned CLCIN0PPS0             :1;
        unsigned CLCIN0PPS1             :1;
        unsigned CLCIN0PPS2             :1;
        unsigned CLCIN0PPS3             :1;
        unsigned CLCIN0PPS4             :1;
    };
} CLCIN0PPSbits_t;
extern volatile CLCIN0PPSbits_t CLCIN0PPSbits __at(0x39D);
// bitfield macros
#define _CLCIN0PPS_CLCIN0PPS_POSN                           0x0
#define _CLCIN0PPS_CLCIN0PPS_POSITION                       0x0
#define _CLCIN0PPS_CLCIN0PPS_SIZE                           0x5
#define _CLCIN0PPS_CLCIN0PPS_LENGTH                         0x5
#define _CLCIN0PPS_CLCIN0PPS_MASK                           0x1F
#define _CLCIN0PPS_CLCIN0PPS0_POSN                          0x0
#define _CLCIN0PPS_CLCIN0PPS0_POSITION                      0x0
#define _CLCIN0PPS_CLCIN0PPS0_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS0_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS0_MASK                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_POSN                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_POSITION                      0x1
#define _CLCIN0PPS_CLCIN0PPS1_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS1_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS1_MASK                          0x2
#define _CLCIN0PPS_CLCIN0PPS2_POSN                          0x2
#define _CLCIN0PPS_CLCIN0PPS2_POSITION                      0x2
#define _CLCIN0PPS_CLCIN0PPS2_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS2_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS2_MASK                          0x4
#define _CLCIN0PPS_CLCIN0PPS3_POSN                          0x3
#define _CLCIN0PPS_CLCIN0PPS3_POSITION                      0x3
#define _CLCIN0PPS_CLCIN0PPS3_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS3_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS3_MASK                          0x8
#define _CLCIN0PPS_CLCIN0PPS4_POSN                          0x4
#define _CLCIN0PPS_CLCIN0PPS4_POSITION                      0x4
#define _CLCIN0PPS_CLCIN0PPS4_SIZE                          0x1
#define _CLCIN0PPS_CLCIN0PPS4_LENGTH                        0x1
#define _CLCIN0PPS_CLCIN0PPS4_MASK                          0x10

// Register: CLCIN1PPS
#define CLCIN1PPS CLCIN1PPS
extern volatile unsigned char           CLCIN1PPS           __at(0x39E);
#ifndef _LIB_BUILD
asm("CLCIN1PPS equ 039Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN1PPS              :5;
    };
    struct {
        unsigned CLCIN1PPS0             :1;
        unsigned CLCIN1PPS1             :1;
        unsigned CLCIN1PPS2             :1;
        unsigned CLCIN1PPS3             :1;
        unsigned CLCIN1PPS4             :1;
    };
} CLCIN1PPSbits_t;
extern volatile CLCIN1PPSbits_t CLCIN1PPSbits __at(0x39E);
// bitfield macros
#define _CLCIN1PPS_CLCIN1PPS_POSN                           0x0
#define _CLCIN1PPS_CLCIN1PPS_POSITION                       0x0
#define _CLCIN1PPS_CLCIN1PPS_SIZE                           0x5
#define _CLCIN1PPS_CLCIN1PPS_LENGTH                         0x5
#define _CLCIN1PPS_CLCIN1PPS_MASK                           0x1F
#define _CLCIN1PPS_CLCIN1PPS0_POSN                          0x0
#define _CLCIN1PPS_CLCIN1PPS0_POSITION                      0x0
#define _CLCIN1PPS_CLCIN1PPS0_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS0_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS0_MASK                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_POSN                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_POSITION                      0x1
#define _CLCIN1PPS_CLCIN1PPS1_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS1_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS1_MASK                          0x2
#define _CLCIN1PPS_CLCIN1PPS2_POSN                          0x2
#define _CLCIN1PPS_CLCIN1PPS2_POSITION                      0x2
#define _CLCIN1PPS_CLCIN1PPS2_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS2_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS2_MASK                          0x4
#define _CLCIN1PPS_CLCIN1PPS3_POSN                          0x3
#define _CLCIN1PPS_CLCIN1PPS3_POSITION                      0x3
#define _CLCIN1PPS_CLCIN1PPS3_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS3_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS3_MASK                          0x8
#define _CLCIN1PPS_CLCIN1PPS4_POSN                          0x4
#define _CLCIN1PPS_CLCIN1PPS4_POSITION                      0x4
#define _CLCIN1PPS_CLCIN1PPS4_SIZE                          0x1
#define _CLCIN1PPS_CLCIN1PPS4_LENGTH                        0x1
#define _CLCIN1PPS_CLCIN1PPS4_MASK                          0x10

// Register: CLCIN2PPS
#define CLCIN2PPS CLCIN2PPS
extern volatile unsigned char           CLCIN2PPS           __at(0x39F);
#ifndef _LIB_BUILD
asm("CLCIN2PPS equ 039Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN2PPS              :5;
    };
    struct {
        unsigned CLCIN2PPS0             :1;
        unsigned CLCIN2PPS1             :1;
        unsigned CLCIN2PPS2             :1;
        unsigned CLCIN2PPS3             :1;
        unsigned CLCIN2PPS4             :1;
    };
} CLCIN2PPSbits_t;
extern volatile CLCIN2PPSbits_t CLCIN2PPSbits __at(0x39F);
// bitfield macros
#define _CLCIN2PPS_CLCIN2PPS_POSN                           0x0
#define _CLCIN2PPS_CLCIN2PPS_POSITION                       0x0
#define _CLCIN2PPS_CLCIN2PPS_SIZE                           0x5
#define _CLCIN2PPS_CLCIN2PPS_LENGTH                         0x5
#define _CLCIN2PPS_CLCIN2PPS_MASK                           0x1F
#define _CLCIN2PPS_CLCIN2PPS0_POSN                          0x0
#define _CLCIN2PPS_CLCIN2PPS0_POSITION                      0x0
#define _CLCIN2PPS_CLCIN2PPS0_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS0_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS0_MASK                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_POSN                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_POSITION                      0x1
#define _CLCIN2PPS_CLCIN2PPS1_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS1_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS1_MASK                          0x2
#define _CLCIN2PPS_CLCIN2PPS2_POSN                          0x2
#define _CLCIN2PPS_CLCIN2PPS2_POSITION                      0x2
#define _CLCIN2PPS_CLCIN2PPS2_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS2_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS2_MASK                          0x4
#define _CLCIN2PPS_CLCIN2PPS3_POSN                          0x3
#define _CLCIN2PPS_CLCIN2PPS3_POSITION                      0x3
#define _CLCIN2PPS_CLCIN2PPS3_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS3_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS3_MASK                          0x8
#define _CLCIN2PPS_CLCIN2PPS4_POSN                          0x4
#define _CLCIN2PPS_CLCIN2PPS4_POSITION                      0x4
#define _CLCIN2PPS_CLCIN2PPS4_SIZE                          0x1
#define _CLCIN2PPS_CLCIN2PPS4_LENGTH                        0x1
#define _CLCIN2PPS_CLCIN2PPS4_MASK                          0x10

// Register: CLCIN3PPS
#define CLCIN3PPS CLCIN3PPS
extern volatile unsigned char           CLCIN3PPS           __at(0x3A0);
#ifndef _LIB_BUILD
asm("CLCIN3PPS equ 03A0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLCIN3PPS              :5;
    };
    struct {
        unsigned CLCIN3PPS0             :1;
        unsigned CLCIN3PPS1             :1;
        unsigned CLCIN3PPS2             :1;
        unsigned CLCIN3PPS3             :1;
        unsigned CLCIN3PPS4             :1;
    };
} CLCIN3PPSbits_t;
extern volatile CLCIN3PPSbits_t CLCIN3PPSbits __at(0x3A0);
// bitfield macros
#define _CLCIN3PPS_CLCIN3PPS_POSN                           0x0
#define _CLCIN3PPS_CLCIN3PPS_POSITION                       0x0
#define _CLCIN3PPS_CLCIN3PPS_SIZE                           0x5
#define _CLCIN3PPS_CLCIN3PPS_LENGTH                         0x5
#define _CLCIN3PPS_CLCIN3PPS_MASK                           0x1F
#define _CLCIN3PPS_CLCIN3PPS0_POSN                          0x0
#define _CLCIN3PPS_CLCIN3PPS0_POSITION                      0x0
#define _CLCIN3PPS_CLCIN3PPS0_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS0_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS0_MASK                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_POSN                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_POSITION                      0x1
#define _CLCIN3PPS_CLCIN3PPS1_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS1_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS1_MASK                          0x2
#define _CLCIN3PPS_CLCIN3PPS2_POSN                          0x2
#define _CLCIN3PPS_CLCIN3PPS2_POSITION                      0x2
#define _CLCIN3PPS_CLCIN3PPS2_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS2_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS2_MASK                          0x4
#define _CLCIN3PPS_CLCIN3PPS3_POSN                          0x3
#define _CLCIN3PPS_CLCIN3PPS3_POSITION                      0x3
#define _CLCIN3PPS_CLCIN3PPS3_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS3_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS3_MASK                          0x8
#define _CLCIN3PPS_CLCIN3PPS4_POSN                          0x4
#define _CLCIN3PPS_CLCIN3PPS4_POSITION                      0x4
#define _CLCIN3PPS_CLCIN3PPS4_SIZE                          0x1
#define _CLCIN3PPS_CLCIN3PPS4_LENGTH                        0x1
#define _CLCIN3PPS_CLCIN3PPS4_MASK                          0x10

// Register: U1CTSPPS
#define U1CTSPPS U1CTSPPS
extern volatile unsigned char           U1CTSPPS            __at(0x3A1);
#ifndef _LIB_BUILD
asm("U1CTSPPS equ 03A1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U1CTSPPS               :5;
    };
    struct {
        unsigned U1CTSPPS0              :1;
        unsigned U1CTSPPS1              :1;
        unsigned U1CTSPPS2              :1;
        unsigned U1CTSPPS3              :1;
        unsigned U1CTSPPS4              :1;
    };
} U1CTSPPSbits_t;
extern volatile U1CTSPPSbits_t U1CTSPPSbits __at(0x3A1);
// bitfield macros
#define _U1CTSPPS_U1CTSPPS_POSN                             0x0
#define _U1CTSPPS_U1CTSPPS_POSITION                         0x0
#define _U1CTSPPS_U1CTSPPS_SIZE                             0x5
#define _U1CTSPPS_U1CTSPPS_LENGTH                           0x5
#define _U1CTSPPS_U1CTSPPS_MASK                             0x1F
#define _U1CTSPPS_U1CTSPPS0_POSN                            0x0
#define _U1CTSPPS_U1CTSPPS0_POSITION                        0x0
#define _U1CTSPPS_U1CTSPPS0_SIZE                            0x1
#define _U1CTSPPS_U1CTSPPS0_LENGTH                          0x1
#define _U1CTSPPS_U1CTSPPS0_MASK                            0x1
#define _U1CTSPPS_U1CTSPPS1_POSN                            0x1
#define _U1CTSPPS_U1CTSPPS1_POSITION                        0x1
#define _U1CTSPPS_U1CTSPPS1_SIZE                            0x1
#define _U1CTSPPS_U1CTSPPS1_LENGTH                          0x1
#define _U1CTSPPS_U1CTSPPS1_MASK                            0x2
#define _U1CTSPPS_U1CTSPPS2_POSN                            0x2
#define _U1CTSPPS_U1CTSPPS2_POSITION                        0x2
#define _U1CTSPPS_U1CTSPPS2_SIZE                            0x1
#define _U1CTSPPS_U1CTSPPS2_LENGTH                          0x1
#define _U1CTSPPS_U1CTSPPS2_MASK                            0x4
#define _U1CTSPPS_U1CTSPPS3_POSN                            0x3
#define _U1CTSPPS_U1CTSPPS3_POSITION                        0x3
#define _U1CTSPPS_U1CTSPPS3_SIZE                            0x1
#define _U1CTSPPS_U1CTSPPS3_LENGTH                          0x1
#define _U1CTSPPS_U1CTSPPS3_MASK                            0x8
#define _U1CTSPPS_U1CTSPPS4_POSN                            0x4
#define _U1CTSPPS_U1CTSPPS4_POSITION                        0x4
#define _U1CTSPPS_U1CTSPPS4_SIZE                            0x1
#define _U1CTSPPS_U1CTSPPS4_LENGTH                          0x1
#define _U1CTSPPS_U1CTSPPS4_MASK                            0x10

// Register: U1RXPPS
#define U1RXPPS U1RXPPS
extern volatile unsigned char           U1RXPPS             __at(0x3A2);
#ifndef _LIB_BUILD
asm("U1RXPPS equ 03A2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U1RXPPS                :5;
    };
    struct {
        unsigned U1RXPPS0               :1;
        unsigned U1RXPPS1               :1;
        unsigned U1RXPPS2               :1;
        unsigned U1RXPPS3               :1;
        unsigned U1RXPPS4               :1;
    };
} U1RXPPSbits_t;
extern volatile U1RXPPSbits_t U1RXPPSbits __at(0x3A2);
// bitfield macros
#define _U1RXPPS_U1RXPPS_POSN                               0x0
#define _U1RXPPS_U1RXPPS_POSITION                           0x0
#define _U1RXPPS_U1RXPPS_SIZE                               0x5
#define _U1RXPPS_U1RXPPS_LENGTH                             0x5
#define _U1RXPPS_U1RXPPS_MASK                               0x1F
#define _U1RXPPS_U1RXPPS0_POSN                              0x0
#define _U1RXPPS_U1RXPPS0_POSITION                          0x0
#define _U1RXPPS_U1RXPPS0_SIZE                              0x1
#define _U1RXPPS_U1RXPPS0_LENGTH                            0x1
#define _U1RXPPS_U1RXPPS0_MASK                              0x1
#define _U1RXPPS_U1RXPPS1_POSN                              0x1
#define _U1RXPPS_U1RXPPS1_POSITION                          0x1
#define _U1RXPPS_U1RXPPS1_SIZE                              0x1
#define _U1RXPPS_U1RXPPS1_LENGTH                            0x1
#define _U1RXPPS_U1RXPPS1_MASK                              0x2
#define _U1RXPPS_U1RXPPS2_POSN                              0x2
#define _U1RXPPS_U1RXPPS2_POSITION                          0x2
#define _U1RXPPS_U1RXPPS2_SIZE                              0x1
#define _U1RXPPS_U1RXPPS2_LENGTH                            0x1
#define _U1RXPPS_U1RXPPS2_MASK                              0x4
#define _U1RXPPS_U1RXPPS3_POSN                              0x3
#define _U1RXPPS_U1RXPPS3_POSITION                          0x3
#define _U1RXPPS_U1RXPPS3_SIZE                              0x1
#define _U1RXPPS_U1RXPPS3_LENGTH                            0x1
#define _U1RXPPS_U1RXPPS3_MASK                              0x8
#define _U1RXPPS_U1RXPPS4_POSN                              0x4
#define _U1RXPPS_U1RXPPS4_POSITION                          0x4
#define _U1RXPPS_U1RXPPS4_SIZE                              0x1
#define _U1RXPPS_U1RXPPS4_LENGTH                            0x1
#define _U1RXPPS_U1RXPPS4_MASK                              0x10

// Register: U2CTSPPS
#define U2CTSPPS U2CTSPPS
extern volatile unsigned char           U2CTSPPS            __at(0x3A3);
#ifndef _LIB_BUILD
asm("U2CTSPPS equ 03A3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U2CTSPPS               :5;
    };
    struct {
        unsigned U2CTSPPS0              :1;
        unsigned U2CTSPPS1              :1;
        unsigned U2CTSPPS2              :1;
        unsigned U2CTSPPS3              :1;
        unsigned U2CTSPPS4              :1;
    };
} U2CTSPPSbits_t;
extern volatile U2CTSPPSbits_t U2CTSPPSbits __at(0x3A3);
// bitfield macros
#define _U2CTSPPS_U2CTSPPS_POSN                             0x0
#define _U2CTSPPS_U2CTSPPS_POSITION                         0x0
#define _U2CTSPPS_U2CTSPPS_SIZE                             0x5
#define _U2CTSPPS_U2CTSPPS_LENGTH                           0x5
#define _U2CTSPPS_U2CTSPPS_MASK                             0x1F
#define _U2CTSPPS_U2CTSPPS0_POSN                            0x0
#define _U2CTSPPS_U2CTSPPS0_POSITION                        0x0
#define _U2CTSPPS_U2CTSPPS0_SIZE                            0x1
#define _U2CTSPPS_U2CTSPPS0_LENGTH                          0x1
#define _U2CTSPPS_U2CTSPPS0_MASK                            0x1
#define _U2CTSPPS_U2CTSPPS1_POSN                            0x1
#define _U2CTSPPS_U2CTSPPS1_POSITION                        0x1
#define _U2CTSPPS_U2CTSPPS1_SIZE                            0x1
#define _U2CTSPPS_U2CTSPPS1_LENGTH                          0x1
#define _U2CTSPPS_U2CTSPPS1_MASK                            0x2
#define _U2CTSPPS_U2CTSPPS2_POSN                            0x2
#define _U2CTSPPS_U2CTSPPS2_POSITION                        0x2
#define _U2CTSPPS_U2CTSPPS2_SIZE                            0x1
#define _U2CTSPPS_U2CTSPPS2_LENGTH                          0x1
#define _U2CTSPPS_U2CTSPPS2_MASK                            0x4
#define _U2CTSPPS_U2CTSPPS3_POSN                            0x3
#define _U2CTSPPS_U2CTSPPS3_POSITION                        0x3
#define _U2CTSPPS_U2CTSPPS3_SIZE                            0x1
#define _U2CTSPPS_U2CTSPPS3_LENGTH                          0x1
#define _U2CTSPPS_U2CTSPPS3_MASK                            0x8
#define _U2CTSPPS_U2CTSPPS4_POSN                            0x4
#define _U2CTSPPS_U2CTSPPS4_POSITION                        0x4
#define _U2CTSPPS_U2CTSPPS4_SIZE                            0x1
#define _U2CTSPPS_U2CTSPPS4_LENGTH                          0x1
#define _U2CTSPPS_U2CTSPPS4_MASK                            0x10

// Register: U2RXPPS
#define U2RXPPS U2RXPPS
extern volatile unsigned char           U2RXPPS             __at(0x3A4);
#ifndef _LIB_BUILD
asm("U2RXPPS equ 03A4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U2RXPPS                :5;
    };
    struct {
        unsigned U2RXPPS0               :1;
        unsigned U2RXPPS1               :1;
        unsigned U2RXPPS2               :1;
        unsigned U2RXPPS3               :1;
        unsigned U2RXPPS4               :1;
    };
} U2RXPPSbits_t;
extern volatile U2RXPPSbits_t U2RXPPSbits __at(0x3A4);
// bitfield macros
#define _U2RXPPS_U2RXPPS_POSN                               0x0
#define _U2RXPPS_U2RXPPS_POSITION                           0x0
#define _U2RXPPS_U2RXPPS_SIZE                               0x5
#define _U2RXPPS_U2RXPPS_LENGTH                             0x5
#define _U2RXPPS_U2RXPPS_MASK                               0x1F
#define _U2RXPPS_U2RXPPS0_POSN                              0x0
#define _U2RXPPS_U2RXPPS0_POSITION                          0x0
#define _U2RXPPS_U2RXPPS0_SIZE                              0x1
#define _U2RXPPS_U2RXPPS0_LENGTH                            0x1
#define _U2RXPPS_U2RXPPS0_MASK                              0x1
#define _U2RXPPS_U2RXPPS1_POSN                              0x1
#define _U2RXPPS_U2RXPPS1_POSITION                          0x1
#define _U2RXPPS_U2RXPPS1_SIZE                              0x1
#define _U2RXPPS_U2RXPPS1_LENGTH                            0x1
#define _U2RXPPS_U2RXPPS1_MASK                              0x2
#define _U2RXPPS_U2RXPPS2_POSN                              0x2
#define _U2RXPPS_U2RXPPS2_POSITION                          0x2
#define _U2RXPPS_U2RXPPS2_SIZE                              0x1
#define _U2RXPPS_U2RXPPS2_LENGTH                            0x1
#define _U2RXPPS_U2RXPPS2_MASK                              0x4
#define _U2RXPPS_U2RXPPS3_POSN                              0x3
#define _U2RXPPS_U2RXPPS3_POSITION                          0x3
#define _U2RXPPS_U2RXPPS3_SIZE                              0x1
#define _U2RXPPS_U2RXPPS3_LENGTH                            0x1
#define _U2RXPPS_U2RXPPS3_MASK                              0x8
#define _U2RXPPS_U2RXPPS4_POSN                              0x4
#define _U2RXPPS_U2RXPPS4_POSITION                          0x4
#define _U2RXPPS_U2RXPPS4_SIZE                              0x1
#define _U2RXPPS_U2RXPPS4_LENGTH                            0x1
#define _U2RXPPS_U2RXPPS4_MASK                              0x10

// Register: SPI1SCKPPS
#define SPI1SCKPPS SPI1SCKPPS
extern volatile unsigned char           SPI1SCKPPS          __at(0x3A7);
#ifndef _LIB_BUILD
asm("SPI1SCKPPS equ 03A7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPI1SCKPPS             :5;
    };
    struct {
        unsigned SPI1SCKPPS0            :1;
        unsigned SPI1SCKPPS1            :1;
        unsigned SPI1SCKPPS2            :1;
        unsigned SPI1SCKPPS3            :1;
        unsigned SPI1SCKPPS4            :1;
    };
} SPI1SCKPPSbits_t;
extern volatile SPI1SCKPPSbits_t SPI1SCKPPSbits __at(0x3A7);
// bitfield macros
#define _SPI1SCKPPS_SPI1SCKPPS_POSN                         0x0
#define _SPI1SCKPPS_SPI1SCKPPS_POSITION                     0x0
#define _SPI1SCKPPS_SPI1SCKPPS_SIZE                         0x5
#define _SPI1SCKPPS_SPI1SCKPPS_LENGTH                       0x5
#define _SPI1SCKPPS_SPI1SCKPPS_MASK                         0x1F
#define _SPI1SCKPPS_SPI1SCKPPS0_POSN                        0x0
#define _SPI1SCKPPS_SPI1SCKPPS0_POSITION                    0x0
#define _SPI1SCKPPS_SPI1SCKPPS0_SIZE                        0x1
#define _SPI1SCKPPS_SPI1SCKPPS0_LENGTH                      0x1
#define _SPI1SCKPPS_SPI1SCKPPS0_MASK                        0x1
#define _SPI1SCKPPS_SPI1SCKPPS1_POSN                        0x1
#define _SPI1SCKPPS_SPI1SCKPPS1_POSITION                    0x1
#define _SPI1SCKPPS_SPI1SCKPPS1_SIZE                        0x1
#define _SPI1SCKPPS_SPI1SCKPPS1_LENGTH                      0x1
#define _SPI1SCKPPS_SPI1SCKPPS1_MASK                        0x2
#define _SPI1SCKPPS_SPI1SCKPPS2_POSN                        0x2
#define _SPI1SCKPPS_SPI1SCKPPS2_POSITION                    0x2
#define _SPI1SCKPPS_SPI1SCKPPS2_SIZE                        0x1
#define _SPI1SCKPPS_SPI1SCKPPS2_LENGTH                      0x1
#define _SPI1SCKPPS_SPI1SCKPPS2_MASK                        0x4
#define _SPI1SCKPPS_SPI1SCKPPS3_POSN                        0x3
#define _SPI1SCKPPS_SPI1SCKPPS3_POSITION                    0x3
#define _SPI1SCKPPS_SPI1SCKPPS3_SIZE                        0x1
#define _SPI1SCKPPS_SPI1SCKPPS3_LENGTH                      0x1
#define _SPI1SCKPPS_SPI1SCKPPS3_MASK                        0x8
#define _SPI1SCKPPS_SPI1SCKPPS4_POSN                        0x4
#define _SPI1SCKPPS_SPI1SCKPPS4_POSITION                    0x4
#define _SPI1SCKPPS_SPI1SCKPPS4_SIZE                        0x1
#define _SPI1SCKPPS_SPI1SCKPPS4_LENGTH                      0x1
#define _SPI1SCKPPS_SPI1SCKPPS4_MASK                        0x10

// Register: SPI1SDIPPS
#define SPI1SDIPPS SPI1SDIPPS
extern volatile unsigned char           SPI1SDIPPS          __at(0x3A8);
#ifndef _LIB_BUILD
asm("SPI1SDIPPS equ 03A8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPI1SDIPPS             :5;
    };
    struct {
        unsigned SPI1SDIPPS0            :1;
        unsigned SPI1SDIPPS1            :1;
        unsigned SPI1SDIPPS2            :1;
        unsigned SPI1SDIPPS3            :1;
        unsigned SPI1SDIPPS4            :1;
    };
} SPI1SDIPPSbits_t;
extern volatile SPI1SDIPPSbits_t SPI1SDIPPSbits __at(0x3A8);
// bitfield macros
#define _SPI1SDIPPS_SPI1SDIPPS_POSN                         0x0
#define _SPI1SDIPPS_SPI1SDIPPS_POSITION                     0x0
#define _SPI1SDIPPS_SPI1SDIPPS_SIZE                         0x5
#define _SPI1SDIPPS_SPI1SDIPPS_LENGTH                       0x5
#define _SPI1SDIPPS_SPI1SDIPPS_MASK                         0x1F
#define _SPI1SDIPPS_SPI1SDIPPS0_POSN                        0x0
#define _SPI1SDIPPS_SPI1SDIPPS0_POSITION                    0x0
#define _SPI1SDIPPS_SPI1SDIPPS0_SIZE                        0x1
#define _SPI1SDIPPS_SPI1SDIPPS0_LENGTH                      0x1
#define _SPI1SDIPPS_SPI1SDIPPS0_MASK                        0x1
#define _SPI1SDIPPS_SPI1SDIPPS1_POSN                        0x1
#define _SPI1SDIPPS_SPI1SDIPPS1_POSITION                    0x1
#define _SPI1SDIPPS_SPI1SDIPPS1_SIZE                        0x1
#define _SPI1SDIPPS_SPI1SDIPPS1_LENGTH                      0x1
#define _SPI1SDIPPS_SPI1SDIPPS1_MASK                        0x2
#define _SPI1SDIPPS_SPI1SDIPPS2_POSN                        0x2
#define _SPI1SDIPPS_SPI1SDIPPS2_POSITION                    0x2
#define _SPI1SDIPPS_SPI1SDIPPS2_SIZE                        0x1
#define _SPI1SDIPPS_SPI1SDIPPS2_LENGTH                      0x1
#define _SPI1SDIPPS_SPI1SDIPPS2_MASK                        0x4
#define _SPI1SDIPPS_SPI1SDIPPS3_POSN                        0x3
#define _SPI1SDIPPS_SPI1SDIPPS3_POSITION                    0x3
#define _SPI1SDIPPS_SPI1SDIPPS3_SIZE                        0x1
#define _SPI1SDIPPS_SPI1SDIPPS3_LENGTH                      0x1
#define _SPI1SDIPPS_SPI1SDIPPS3_MASK                        0x8
#define _SPI1SDIPPS_SPI1SDIPPS4_POSN                        0x4
#define _SPI1SDIPPS_SPI1SDIPPS4_POSITION                    0x4
#define _SPI1SDIPPS_SPI1SDIPPS4_SIZE                        0x1
#define _SPI1SDIPPS_SPI1SDIPPS4_LENGTH                      0x1
#define _SPI1SDIPPS_SPI1SDIPPS4_MASK                        0x10

// Register: SPI1SSPPS
#define SPI1SSPPS SPI1SSPPS
extern volatile unsigned char           SPI1SSPPS           __at(0x3A9);
#ifndef _LIB_BUILD
asm("SPI1SSPPS equ 03A9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPI1SSPPS              :5;
    };
    struct {
        unsigned SPI1SSPPS0             :1;
        unsigned SPI1SSPPS1             :1;
        unsigned SPI1SSPPS2             :1;
        unsigned SPI1SSPPS3             :1;
        unsigned SPI1SSPPS4             :1;
    };
} SPI1SSPPSbits_t;
extern volatile SPI1SSPPSbits_t SPI1SSPPSbits __at(0x3A9);
// bitfield macros
#define _SPI1SSPPS_SPI1SSPPS_POSN                           0x0
#define _SPI1SSPPS_SPI1SSPPS_POSITION                       0x0
#define _SPI1SSPPS_SPI1SSPPS_SIZE                           0x5
#define _SPI1SSPPS_SPI1SSPPS_LENGTH                         0x5
#define _SPI1SSPPS_SPI1SSPPS_MASK                           0x1F
#define _SPI1SSPPS_SPI1SSPPS0_POSN                          0x0
#define _SPI1SSPPS_SPI1SSPPS0_POSITION                      0x0
#define _SPI1SSPPS_SPI1SSPPS0_SIZE                          0x1
#define _SPI1SSPPS_SPI1SSPPS0_LENGTH                        0x1
#define _SPI1SSPPS_SPI1SSPPS0_MASK                          0x1
#define _SPI1SSPPS_SPI1SSPPS1_POSN                          0x1
#define _SPI1SSPPS_SPI1SSPPS1_POSITION                      0x1
#define _SPI1SSPPS_SPI1SSPPS1_SIZE                          0x1
#define _SPI1SSPPS_SPI1SSPPS1_LENGTH                        0x1
#define _SPI1SSPPS_SPI1SSPPS1_MASK                          0x2
#define _SPI1SSPPS_SPI1SSPPS2_POSN                          0x2
#define _SPI1SSPPS_SPI1SSPPS2_POSITION                      0x2
#define _SPI1SSPPS_SPI1SSPPS2_SIZE                          0x1
#define _SPI1SSPPS_SPI1SSPPS2_LENGTH                        0x1
#define _SPI1SSPPS_SPI1SSPPS2_MASK                          0x4
#define _SPI1SSPPS_SPI1SSPPS3_POSN                          0x3
#define _SPI1SSPPS_SPI1SSPPS3_POSITION                      0x3
#define _SPI1SSPPS_SPI1SSPPS3_SIZE                          0x1
#define _SPI1SSPPS_SPI1SSPPS3_LENGTH                        0x1
#define _SPI1SSPPS_SPI1SSPPS3_MASK                          0x8
#define _SPI1SSPPS_SPI1SSPPS4_POSN                          0x4
#define _SPI1SSPPS_SPI1SSPPS4_POSITION                      0x4
#define _SPI1SSPPS_SPI1SSPPS4_SIZE                          0x1
#define _SPI1SSPPS_SPI1SSPPS4_LENGTH                        0x1
#define _SPI1SSPPS_SPI1SSPPS4_MASK                          0x10

// Register: I2C1SCLPPS
#define I2C1SCLPPS I2C1SCLPPS
extern volatile unsigned char           I2C1SCLPPS          __at(0x3AD);
#ifndef _LIB_BUILD
asm("I2C1SCLPPS equ 03ADh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I2C1SCLPPS             :5;
    };
    struct {
        unsigned I2C1SCLPPS0            :1;
        unsigned I2C1SCLPPS1            :1;
        unsigned I2C1SCLPPS2            :1;
        unsigned I2C1SCLPPS3            :1;
        unsigned I2C1SCLPPS4            :1;
    };
} I2C1SCLPPSbits_t;
extern volatile I2C1SCLPPSbits_t I2C1SCLPPSbits __at(0x3AD);
// bitfield macros
#define _I2C1SCLPPS_I2C1SCLPPS_POSN                         0x0
#define _I2C1SCLPPS_I2C1SCLPPS_POSITION                     0x0
#define _I2C1SCLPPS_I2C1SCLPPS_SIZE                         0x5
#define _I2C1SCLPPS_I2C1SCLPPS_LENGTH                       0x5
#define _I2C1SCLPPS_I2C1SCLPPS_MASK                         0x1F
#define _I2C1SCLPPS_I2C1SCLPPS0_POSN                        0x0
#define _I2C1SCLPPS_I2C1SCLPPS0_POSITION                    0x0
#define _I2C1SCLPPS_I2C1SCLPPS0_SIZE                        0x1
#define _I2C1SCLPPS_I2C1SCLPPS0_LENGTH                      0x1
#define _I2C1SCLPPS_I2C1SCLPPS0_MASK                        0x1
#define _I2C1SCLPPS_I2C1SCLPPS1_POSN                        0x1
#define _I2C1SCLPPS_I2C1SCLPPS1_POSITION                    0x1
#define _I2C1SCLPPS_I2C1SCLPPS1_SIZE                        0x1
#define _I2C1SCLPPS_I2C1SCLPPS1_LENGTH                      0x1
#define _I2C1SCLPPS_I2C1SCLPPS1_MASK                        0x2
#define _I2C1SCLPPS_I2C1SCLPPS2_POSN                        0x2
#define _I2C1SCLPPS_I2C1SCLPPS2_POSITION                    0x2
#define _I2C1SCLPPS_I2C1SCLPPS2_SIZE                        0x1
#define _I2C1SCLPPS_I2C1SCLPPS2_LENGTH                      0x1
#define _I2C1SCLPPS_I2C1SCLPPS2_MASK                        0x4
#define _I2C1SCLPPS_I2C1SCLPPS3_POSN                        0x3
#define _I2C1SCLPPS_I2C1SCLPPS3_POSITION                    0x3
#define _I2C1SCLPPS_I2C1SCLPPS3_SIZE                        0x1
#define _I2C1SCLPPS_I2C1SCLPPS3_LENGTH                      0x1
#define _I2C1SCLPPS_I2C1SCLPPS3_MASK                        0x8
#define _I2C1SCLPPS_I2C1SCLPPS4_POSN                        0x4
#define _I2C1SCLPPS_I2C1SCLPPS4_POSITION                    0x4
#define _I2C1SCLPPS_I2C1SCLPPS4_SIZE                        0x1
#define _I2C1SCLPPS_I2C1SCLPPS4_LENGTH                      0x1
#define _I2C1SCLPPS_I2C1SCLPPS4_MASK                        0x10

// Register: I2C1SDAPPS
#define I2C1SDAPPS I2C1SDAPPS
extern volatile unsigned char           I2C1SDAPPS          __at(0x3AE);
#ifndef _LIB_BUILD
asm("I2C1SDAPPS equ 03AEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I2C1SDAPPS             :5;
    };
    struct {
        unsigned I2C1SDAPPS0            :1;
        unsigned I2C1SDAPPS1            :1;
        unsigned I2C1SDAPPS2            :1;
        unsigned I2C1SDAPPS3            :1;
        unsigned I2C1SDAPPS4            :1;
    };
} I2C1SDAPPSbits_t;
extern volatile I2C1SDAPPSbits_t I2C1SDAPPSbits __at(0x3AE);
// bitfield macros
#define _I2C1SDAPPS_I2C1SDAPPS_POSN                         0x0
#define _I2C1SDAPPS_I2C1SDAPPS_POSITION                     0x0
#define _I2C1SDAPPS_I2C1SDAPPS_SIZE                         0x5
#define _I2C1SDAPPS_I2C1SDAPPS_LENGTH                       0x5
#define _I2C1SDAPPS_I2C1SDAPPS_MASK                         0x1F
#define _I2C1SDAPPS_I2C1SDAPPS0_POSN                        0x0
#define _I2C1SDAPPS_I2C1SDAPPS0_POSITION                    0x0
#define _I2C1SDAPPS_I2C1SDAPPS0_SIZE                        0x1
#define _I2C1SDAPPS_I2C1SDAPPS0_LENGTH                      0x1
#define _I2C1SDAPPS_I2C1SDAPPS0_MASK                        0x1
#define _I2C1SDAPPS_I2C1SDAPPS1_POSN                        0x1
#define _I2C1SDAPPS_I2C1SDAPPS1_POSITION                    0x1
#define _I2C1SDAPPS_I2C1SDAPPS1_SIZE                        0x1
#define _I2C1SDAPPS_I2C1SDAPPS1_LENGTH                      0x1
#define _I2C1SDAPPS_I2C1SDAPPS1_MASK                        0x2
#define _I2C1SDAPPS_I2C1SDAPPS2_POSN                        0x2
#define _I2C1SDAPPS_I2C1SDAPPS2_POSITION                    0x2
#define _I2C1SDAPPS_I2C1SDAPPS2_SIZE                        0x1
#define _I2C1SDAPPS_I2C1SDAPPS2_LENGTH                      0x1
#define _I2C1SDAPPS_I2C1SDAPPS2_MASK                        0x4
#define _I2C1SDAPPS_I2C1SDAPPS3_POSN                        0x3
#define _I2C1SDAPPS_I2C1SDAPPS3_POSITION                    0x3
#define _I2C1SDAPPS_I2C1SDAPPS3_SIZE                        0x1
#define _I2C1SDAPPS_I2C1SDAPPS3_LENGTH                      0x1
#define _I2C1SDAPPS_I2C1SDAPPS3_MASK                        0x8
#define _I2C1SDAPPS_I2C1SDAPPS4_POSN                        0x4
#define _I2C1SDAPPS_I2C1SDAPPS4_POSITION                    0x4
#define _I2C1SDAPPS_I2C1SDAPPS4_SIZE                        0x1
#define _I2C1SDAPPS_I2C1SDAPPS4_LENGTH                      0x1
#define _I2C1SDAPPS_I2C1SDAPPS4_MASK                        0x10

// Register: ADACTPPS
#define ADACTPPS ADACTPPS
extern volatile unsigned char           ADACTPPS            __at(0x3B1);
#ifndef _LIB_BUILD
asm("ADACTPPS equ 03B1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ADACTPPS               :5;
    };
    struct {
        unsigned ADACTPPS0              :1;
        unsigned ADACTPPS1              :1;
        unsigned ADACTPPS2              :1;
        unsigned ADACTPPS3              :1;
        unsigned ADACTPPS4              :1;
    };
} ADACTPPSbits_t;
extern volatile ADACTPPSbits_t ADACTPPSbits __at(0x3B1);
// bitfield macros
#define _ADACTPPS_ADACTPPS_POSN                             0x0
#define _ADACTPPS_ADACTPPS_POSITION                         0x0
#define _ADACTPPS_ADACTPPS_SIZE                             0x5
#define _ADACTPPS_ADACTPPS_LENGTH                           0x5
#define _ADACTPPS_ADACTPPS_MASK                             0x1F
#define _ADACTPPS_ADACTPPS0_POSN                            0x0
#define _ADACTPPS_ADACTPPS0_POSITION                        0x0
#define _ADACTPPS_ADACTPPS0_SIZE                            0x1
#define _ADACTPPS_ADACTPPS0_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS0_MASK                            0x1
#define _ADACTPPS_ADACTPPS1_POSN                            0x1
#define _ADACTPPS_ADACTPPS1_POSITION                        0x1
#define _ADACTPPS_ADACTPPS1_SIZE                            0x1
#define _ADACTPPS_ADACTPPS1_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS1_MASK                            0x2
#define _ADACTPPS_ADACTPPS2_POSN                            0x2
#define _ADACTPPS_ADACTPPS2_POSITION                        0x2
#define _ADACTPPS_ADACTPPS2_SIZE                            0x1
#define _ADACTPPS_ADACTPPS2_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS2_MASK                            0x4
#define _ADACTPPS_ADACTPPS3_POSN                            0x3
#define _ADACTPPS_ADACTPPS3_POSITION                        0x3
#define _ADACTPPS_ADACTPPS3_SIZE                            0x1
#define _ADACTPPS_ADACTPPS3_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS3_MASK                            0x8
#define _ADACTPPS_ADACTPPS4_POSN                            0x4
#define _ADACTPPS_ADACTPPS4_POSITION                        0x4
#define _ADACTPPS_ADACTPPS4_SIZE                            0x1
#define _ADACTPPS_ADACTPPS4_LENGTH                          0x1
#define _ADACTPPS_ADACTPPS4_MASK                            0x10

// Register: ANSELA
#define ANSELA ANSELA
extern volatile unsigned char           ANSELA              __at(0x416);
#ifndef _LIB_BUILD
asm("ANSELA equ 0416h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ANSELA0                :1;
        unsigned ANSELA1                :1;
        unsigned ANSELA2                :1;
        unsigned                        :1;
        unsigned ANSELA4                :1;
        unsigned ANSELA5                :1;
    };
} ANSELAbits_t;
extern volatile ANSELAbits_t ANSELAbits __at(0x416);
// bitfield macros
#define _ANSELA_ANSELA0_POSN                                0x0
#define _ANSELA_ANSELA0_POSITION                            0x0
#define _ANSELA_ANSELA0_SIZE                                0x1
#define _ANSELA_ANSELA0_LENGTH                              0x1
#define _ANSELA_ANSELA0_MASK                                0x1
#define _ANSELA_ANSELA1_POSN                                0x1
#define _ANSELA_ANSELA1_POSITION                            0x1
#define _ANSELA_ANSELA1_SIZE                                0x1
#define _ANSELA_ANSELA1_LENGTH                              0x1
#define _ANSELA_ANSELA1_MASK                                0x2
#define _ANSELA_ANSELA2_POSN                                0x2
#define _ANSELA_ANSELA2_POSITION                            0x2
#define _ANSELA_ANSELA2_SIZE                                0x1
#define _ANSELA_ANSELA2_LENGTH                              0x1
#define _ANSELA_ANSELA2_MASK                                0x4
#define _ANSELA_ANSELA4_POSN                                0x4
#define _ANSELA_ANSELA4_POSITION                            0x4
#define _ANSELA_ANSELA4_SIZE                                0x1
#define _ANSELA_ANSELA4_LENGTH                              0x1
#define _ANSELA_ANSELA4_MASK                                0x10
#define _ANSELA_ANSELA5_POSN                                0x5
#define _ANSELA_ANSELA5_POSITION                            0x5
#define _ANSELA_ANSELA5_SIZE                                0x1
#define _ANSELA_ANSELA5_LENGTH                              0x1
#define _ANSELA_ANSELA5_MASK                                0x20

// Register: WPUA
#define WPUA WPUA
extern volatile unsigned char           WPUA                __at(0x417);
#ifndef _LIB_BUILD
asm("WPUA equ 0417h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUA0                  :1;
        unsigned WPUA1                  :1;
        unsigned WPUA2                  :1;
        unsigned WPUA3                  :1;
        unsigned WPUA4                  :1;
        unsigned WPUA5                  :1;
    };
} WPUAbits_t;
extern volatile WPUAbits_t WPUAbits __at(0x417);
// bitfield macros
#define _WPUA_WPUA0_POSN                                    0x0
#define _WPUA_WPUA0_POSITION                                0x0
#define _WPUA_WPUA0_SIZE                                    0x1
#define _WPUA_WPUA0_LENGTH                                  0x1
#define _WPUA_WPUA0_MASK                                    0x1
#define _WPUA_WPUA1_POSN                                    0x1
#define _WPUA_WPUA1_POSITION                                0x1
#define _WPUA_WPUA1_SIZE                                    0x1
#define _WPUA_WPUA1_LENGTH                                  0x1
#define _WPUA_WPUA1_MASK                                    0x2
#define _WPUA_WPUA2_POSN                                    0x2
#define _WPUA_WPUA2_POSITION                                0x2
#define _WPUA_WPUA2_SIZE                                    0x1
#define _WPUA_WPUA2_LENGTH                                  0x1
#define _WPUA_WPUA2_MASK                                    0x4
#define _WPUA_WPUA3_POSN                                    0x3
#define _WPUA_WPUA3_POSITION                                0x3
#define _WPUA_WPUA3_SIZE                                    0x1
#define _WPUA_WPUA3_LENGTH                                  0x1
#define _WPUA_WPUA3_MASK                                    0x8
#define _WPUA_WPUA4_POSN                                    0x4
#define _WPUA_WPUA4_POSITION                                0x4
#define _WPUA_WPUA4_SIZE                                    0x1
#define _WPUA_WPUA4_LENGTH                                  0x1
#define _WPUA_WPUA4_MASK                                    0x10
#define _WPUA_WPUA5_POSN                                    0x5
#define _WPUA_WPUA5_POSITION                                0x5
#define _WPUA_WPUA5_SIZE                                    0x1
#define _WPUA_WPUA5_LENGTH                                  0x1
#define _WPUA_WPUA5_MASK                                    0x20

// Register: ODCONA
#define ODCONA ODCONA
extern volatile unsigned char           ODCONA              __at(0x418);
#ifndef _LIB_BUILD
asm("ODCONA equ 0418h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCA0                  :1;
        unsigned ODCA1                  :1;
        unsigned ODCA2                  :1;
        unsigned                        :1;
        unsigned ODCA4                  :1;
        unsigned ODCA5                  :1;
    };
} ODCONAbits_t;
extern volatile ODCONAbits_t ODCONAbits __at(0x418);
// bitfield macros
#define _ODCONA_ODCA0_POSN                                  0x0
#define _ODCONA_ODCA0_POSITION                              0x0
#define _ODCONA_ODCA0_SIZE                                  0x1
#define _ODCONA_ODCA0_LENGTH                                0x1
#define _ODCONA_ODCA0_MASK                                  0x1
#define _ODCONA_ODCA1_POSN                                  0x1
#define _ODCONA_ODCA1_POSITION                              0x1
#define _ODCONA_ODCA1_SIZE                                  0x1
#define _ODCONA_ODCA1_LENGTH                                0x1
#define _ODCONA_ODCA1_MASK                                  0x2
#define _ODCONA_ODCA2_POSN                                  0x2
#define _ODCONA_ODCA2_POSITION                              0x2
#define _ODCONA_ODCA2_SIZE                                  0x1
#define _ODCONA_ODCA2_LENGTH                                0x1
#define _ODCONA_ODCA2_MASK                                  0x4
#define _ODCONA_ODCA4_POSN                                  0x4
#define _ODCONA_ODCA4_POSITION                              0x4
#define _ODCONA_ODCA4_SIZE                                  0x1
#define _ODCONA_ODCA4_LENGTH                                0x1
#define _ODCONA_ODCA4_MASK                                  0x10
#define _ODCONA_ODCA5_POSN                                  0x5
#define _ODCONA_ODCA5_POSITION                              0x5
#define _ODCONA_ODCA5_SIZE                                  0x1
#define _ODCONA_ODCA5_LENGTH                                0x1
#define _ODCONA_ODCA5_MASK                                  0x20

// Register: SLRCONA
#define SLRCONA SLRCONA
extern volatile unsigned char           SLRCONA             __at(0x419);
#ifndef _LIB_BUILD
asm("SLRCONA equ 0419h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRA0                  :1;
        unsigned SLRA1                  :1;
        unsigned SLRA2                  :1;
        unsigned                        :1;
        unsigned SLRA4                  :1;
        unsigned SLRA5                  :1;
    };
} SLRCONAbits_t;
extern volatile SLRCONAbits_t SLRCONAbits __at(0x419);
// bitfield macros
#define _SLRCONA_SLRA0_POSN                                 0x0
#define _SLRCONA_SLRA0_POSITION                             0x0
#define _SLRCONA_SLRA0_SIZE                                 0x1
#define _SLRCONA_SLRA0_LENGTH                               0x1
#define _SLRCONA_SLRA0_MASK                                 0x1
#define _SLRCONA_SLRA1_POSN                                 0x1
#define _SLRCONA_SLRA1_POSITION                             0x1
#define _SLRCONA_SLRA1_SIZE                                 0x1
#define _SLRCONA_SLRA1_LENGTH                               0x1
#define _SLRCONA_SLRA1_MASK                                 0x2
#define _SLRCONA_SLRA2_POSN                                 0x2
#define _SLRCONA_SLRA2_POSITION                             0x2
#define _SLRCONA_SLRA2_SIZE                                 0x1
#define _SLRCONA_SLRA2_LENGTH                               0x1
#define _SLRCONA_SLRA2_MASK                                 0x4
#define _SLRCONA_SLRA4_POSN                                 0x4
#define _SLRCONA_SLRA4_POSITION                             0x4
#define _SLRCONA_SLRA4_SIZE                                 0x1
#define _SLRCONA_SLRA4_LENGTH                               0x1
#define _SLRCONA_SLRA4_MASK                                 0x10
#define _SLRCONA_SLRA5_POSN                                 0x5
#define _SLRCONA_SLRA5_POSITION                             0x5
#define _SLRCONA_SLRA5_SIZE                                 0x1
#define _SLRCONA_SLRA5_LENGTH                               0x1
#define _SLRCONA_SLRA5_MASK                                 0x20

// Register: INLVLA
#define INLVLA INLVLA
extern volatile unsigned char           INLVLA              __at(0x41A);
#ifndef _LIB_BUILD
asm("INLVLA equ 041Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLA0                :1;
        unsigned INLVLA1                :1;
        unsigned INLVLA2                :1;
        unsigned INLVLA3                :1;
        unsigned INLVLA4                :1;
        unsigned INLVLA5                :1;
    };
} INLVLAbits_t;
extern volatile INLVLAbits_t INLVLAbits __at(0x41A);
// bitfield macros
#define _INLVLA_INLVLA0_POSN                                0x0
#define _INLVLA_INLVLA0_POSITION                            0x0
#define _INLVLA_INLVLA0_SIZE                                0x1
#define _INLVLA_INLVLA0_LENGTH                              0x1
#define _INLVLA_INLVLA0_MASK                                0x1
#define _INLVLA_INLVLA1_POSN                                0x1
#define _INLVLA_INLVLA1_POSITION                            0x1
#define _INLVLA_INLVLA1_SIZE                                0x1
#define _INLVLA_INLVLA1_LENGTH                              0x1
#define _INLVLA_INLVLA1_MASK                                0x2
#define _INLVLA_INLVLA2_POSN                                0x2
#define _INLVLA_INLVLA2_POSITION                            0x2
#define _INLVLA_INLVLA2_SIZE                                0x1
#define _INLVLA_INLVLA2_LENGTH                              0x1
#define _INLVLA_INLVLA2_MASK                                0x4
#define _INLVLA_INLVLA3_POSN                                0x3
#define _INLVLA_INLVLA3_POSITION                            0x3
#define _INLVLA_INLVLA3_SIZE                                0x1
#define _INLVLA_INLVLA3_LENGTH                              0x1
#define _INLVLA_INLVLA3_MASK                                0x8
#define _INLVLA_INLVLA4_POSN                                0x4
#define _INLVLA_INLVLA4_POSITION                            0x4
#define _INLVLA_INLVLA4_SIZE                                0x1
#define _INLVLA_INLVLA4_LENGTH                              0x1
#define _INLVLA_INLVLA4_MASK                                0x10
#define _INLVLA_INLVLA5_POSN                                0x5
#define _INLVLA_INLVLA5_POSITION                            0x5
#define _INLVLA_INLVLA5_SIZE                                0x1
#define _INLVLA_INLVLA5_LENGTH                              0x1
#define _INLVLA_INLVLA5_MASK                                0x20

// Register: IOCAP
#define IOCAP IOCAP
extern volatile unsigned char           IOCAP               __at(0x41B);
#ifndef _LIB_BUILD
asm("IOCAP equ 041Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAP0                 :1;
        unsigned IOCAP1                 :1;
        unsigned IOCAP2                 :1;
        unsigned IOCAP3                 :1;
        unsigned IOCAP4                 :1;
        unsigned IOCAP5                 :1;
    };
} IOCAPbits_t;
extern volatile IOCAPbits_t IOCAPbits __at(0x41B);
// bitfield macros
#define _IOCAP_IOCAP0_POSN                                  0x0
#define _IOCAP_IOCAP0_POSITION                              0x0
#define _IOCAP_IOCAP0_SIZE                                  0x1
#define _IOCAP_IOCAP0_LENGTH                                0x1
#define _IOCAP_IOCAP0_MASK                                  0x1
#define _IOCAP_IOCAP1_POSN                                  0x1
#define _IOCAP_IOCAP1_POSITION                              0x1
#define _IOCAP_IOCAP1_SIZE                                  0x1
#define _IOCAP_IOCAP1_LENGTH                                0x1
#define _IOCAP_IOCAP1_MASK                                  0x2
#define _IOCAP_IOCAP2_POSN                                  0x2
#define _IOCAP_IOCAP2_POSITION                              0x2
#define _IOCAP_IOCAP2_SIZE                                  0x1
#define _IOCAP_IOCAP2_LENGTH                                0x1
#define _IOCAP_IOCAP2_MASK                                  0x4
#define _IOCAP_IOCAP3_POSN                                  0x3
#define _IOCAP_IOCAP3_POSITION                              0x3
#define _IOCAP_IOCAP3_SIZE                                  0x1
#define _IOCAP_IOCAP3_LENGTH                                0x1
#define _IOCAP_IOCAP3_MASK                                  0x8
#define _IOCAP_IOCAP4_POSN                                  0x4
#define _IOCAP_IOCAP4_POSITION                              0x4
#define _IOCAP_IOCAP4_SIZE                                  0x1
#define _IOCAP_IOCAP4_LENGTH                                0x1
#define _IOCAP_IOCAP4_MASK                                  0x10
#define _IOCAP_IOCAP5_POSN                                  0x5
#define _IOCAP_IOCAP5_POSITION                              0x5
#define _IOCAP_IOCAP5_SIZE                                  0x1
#define _IOCAP_IOCAP5_LENGTH                                0x1
#define _IOCAP_IOCAP5_MASK                                  0x20

// Register: IOCAN
#define IOCAN IOCAN
extern volatile unsigned char           IOCAN               __at(0x41C);
#ifndef _LIB_BUILD
asm("IOCAN equ 041Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAN0                 :1;
        unsigned IOCAN1                 :1;
        unsigned IOCAN2                 :1;
        unsigned IOCAN3                 :1;
        unsigned IOCAN4                 :1;
        unsigned IOCAN5                 :1;
    };
} IOCANbits_t;
extern volatile IOCANbits_t IOCANbits __at(0x41C);
// bitfield macros
#define _IOCAN_IOCAN0_POSN                                  0x0
#define _IOCAN_IOCAN0_POSITION                              0x0
#define _IOCAN_IOCAN0_SIZE                                  0x1
#define _IOCAN_IOCAN0_LENGTH                                0x1
#define _IOCAN_IOCAN0_MASK                                  0x1
#define _IOCAN_IOCAN1_POSN                                  0x1
#define _IOCAN_IOCAN1_POSITION                              0x1
#define _IOCAN_IOCAN1_SIZE                                  0x1
#define _IOCAN_IOCAN1_LENGTH                                0x1
#define _IOCAN_IOCAN1_MASK                                  0x2
#define _IOCAN_IOCAN2_POSN                                  0x2
#define _IOCAN_IOCAN2_POSITION                              0x2
#define _IOCAN_IOCAN2_SIZE                                  0x1
#define _IOCAN_IOCAN2_LENGTH                                0x1
#define _IOCAN_IOCAN2_MASK                                  0x4
#define _IOCAN_IOCAN3_POSN                                  0x3
#define _IOCAN_IOCAN3_POSITION                              0x3
#define _IOCAN_IOCAN3_SIZE                                  0x1
#define _IOCAN_IOCAN3_LENGTH                                0x1
#define _IOCAN_IOCAN3_MASK                                  0x8
#define _IOCAN_IOCAN4_POSN                                  0x4
#define _IOCAN_IOCAN4_POSITION                              0x4
#define _IOCAN_IOCAN4_SIZE                                  0x1
#define _IOCAN_IOCAN4_LENGTH                                0x1
#define _IOCAN_IOCAN4_MASK                                  0x10
#define _IOCAN_IOCAN5_POSN                                  0x5
#define _IOCAN_IOCAN5_POSITION                              0x5
#define _IOCAN_IOCAN5_SIZE                                  0x1
#define _IOCAN_IOCAN5_LENGTH                                0x1
#define _IOCAN_IOCAN5_MASK                                  0x20

// Register: IOCAF
#define IOCAF IOCAF
extern volatile unsigned char           IOCAF               __at(0x41D);
#ifndef _LIB_BUILD
asm("IOCAF equ 041Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCAF0                 :1;
        unsigned IOCAF1                 :1;
        unsigned IOCAF2                 :1;
        unsigned IOCAF3                 :1;
        unsigned IOCAF4                 :1;
        unsigned IOCAF5                 :1;
    };
} IOCAFbits_t;
extern volatile IOCAFbits_t IOCAFbits __at(0x41D);
// bitfield macros
#define _IOCAF_IOCAF0_POSN                                  0x0
#define _IOCAF_IOCAF0_POSITION                              0x0
#define _IOCAF_IOCAF0_SIZE                                  0x1
#define _IOCAF_IOCAF0_LENGTH                                0x1
#define _IOCAF_IOCAF0_MASK                                  0x1
#define _IOCAF_IOCAF1_POSN                                  0x1
#define _IOCAF_IOCAF1_POSITION                              0x1
#define _IOCAF_IOCAF1_SIZE                                  0x1
#define _IOCAF_IOCAF1_LENGTH                                0x1
#define _IOCAF_IOCAF1_MASK                                  0x2
#define _IOCAF_IOCAF2_POSN                                  0x2
#define _IOCAF_IOCAF2_POSITION                              0x2
#define _IOCAF_IOCAF2_SIZE                                  0x1
#define _IOCAF_IOCAF2_LENGTH                                0x1
#define _IOCAF_IOCAF2_MASK                                  0x4
#define _IOCAF_IOCAF3_POSN                                  0x3
#define _IOCAF_IOCAF3_POSITION                              0x3
#define _IOCAF_IOCAF3_SIZE                                  0x1
#define _IOCAF_IOCAF3_LENGTH                                0x1
#define _IOCAF_IOCAF3_MASK                                  0x8
#define _IOCAF_IOCAF4_POSN                                  0x4
#define _IOCAF_IOCAF4_POSITION                              0x4
#define _IOCAF_IOCAF4_SIZE                                  0x1
#define _IOCAF_IOCAF4_LENGTH                                0x1
#define _IOCAF_IOCAF4_MASK                                  0x10
#define _IOCAF_IOCAF5_POSN                                  0x5
#define _IOCAF_IOCAF5_POSITION                              0x5
#define _IOCAF_IOCAF5_SIZE                                  0x1
#define _IOCAF_IOCAF5_LENGTH                                0x1
#define _IOCAF_IOCAF5_MASK                                  0x20

// Register: ANSELC
#define ANSELC ANSELC
extern volatile unsigned char           ANSELC              __at(0x42A);
#ifndef _LIB_BUILD
asm("ANSELC equ 042Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :3;
        unsigned ANSELC3                :1;
        unsigned ANSELC4                :1;
        unsigned ANSELC5                :1;
        unsigned ANSELC6                :1;
        unsigned ANSELC7                :1;
    };
} ANSELCbits_t;
extern volatile ANSELCbits_t ANSELCbits __at(0x42A);
// bitfield macros
#define _ANSELC_ANSELC3_POSN                                0x3
#define _ANSELC_ANSELC3_POSITION                            0x3
#define _ANSELC_ANSELC3_SIZE                                0x1
#define _ANSELC_ANSELC3_LENGTH                              0x1
#define _ANSELC_ANSELC3_MASK                                0x8
#define _ANSELC_ANSELC4_POSN                                0x4
#define _ANSELC_ANSELC4_POSITION                            0x4
#define _ANSELC_ANSELC4_SIZE                                0x1
#define _ANSELC_ANSELC4_LENGTH                              0x1
#define _ANSELC_ANSELC4_MASK                                0x10
#define _ANSELC_ANSELC5_POSN                                0x5
#define _ANSELC_ANSELC5_POSITION                            0x5
#define _ANSELC_ANSELC5_SIZE                                0x1
#define _ANSELC_ANSELC5_LENGTH                              0x1
#define _ANSELC_ANSELC5_MASK                                0x20
#define _ANSELC_ANSELC6_POSN                                0x6
#define _ANSELC_ANSELC6_POSITION                            0x6
#define _ANSELC_ANSELC6_SIZE                                0x1
#define _ANSELC_ANSELC6_LENGTH                              0x1
#define _ANSELC_ANSELC6_MASK                                0x40
#define _ANSELC_ANSELC7_POSN                                0x7
#define _ANSELC_ANSELC7_POSITION                            0x7
#define _ANSELC_ANSELC7_SIZE                                0x1
#define _ANSELC_ANSELC7_LENGTH                              0x1
#define _ANSELC_ANSELC7_MASK                                0x80

// Register: WPUC
#define WPUC WPUC
extern volatile unsigned char           WPUC                __at(0x42B);
#ifndef _LIB_BUILD
asm("WPUC equ 042Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WPUC0                  :1;
        unsigned WPUC1                  :1;
        unsigned                        :1;
        unsigned WPUC3                  :1;
        unsigned WPUC4                  :1;
        unsigned WPUC5                  :1;
        unsigned WPUC6                  :1;
        unsigned WPUC7                  :1;
    };
} WPUCbits_t;
extern volatile WPUCbits_t WPUCbits __at(0x42B);
// bitfield macros
#define _WPUC_WPUC0_POSN                                    0x0
#define _WPUC_WPUC0_POSITION                                0x0
#define _WPUC_WPUC0_SIZE                                    0x1
#define _WPUC_WPUC0_LENGTH                                  0x1
#define _WPUC_WPUC0_MASK                                    0x1
#define _WPUC_WPUC1_POSN                                    0x1
#define _WPUC_WPUC1_POSITION                                0x1
#define _WPUC_WPUC1_SIZE                                    0x1
#define _WPUC_WPUC1_LENGTH                                  0x1
#define _WPUC_WPUC1_MASK                                    0x2
#define _WPUC_WPUC3_POSN                                    0x3
#define _WPUC_WPUC3_POSITION                                0x3
#define _WPUC_WPUC3_SIZE                                    0x1
#define _WPUC_WPUC3_LENGTH                                  0x1
#define _WPUC_WPUC3_MASK                                    0x8
#define _WPUC_WPUC4_POSN                                    0x4
#define _WPUC_WPUC4_POSITION                                0x4
#define _WPUC_WPUC4_SIZE                                    0x1
#define _WPUC_WPUC4_LENGTH                                  0x1
#define _WPUC_WPUC4_MASK                                    0x10
#define _WPUC_WPUC5_POSN                                    0x5
#define _WPUC_WPUC5_POSITION                                0x5
#define _WPUC_WPUC5_SIZE                                    0x1
#define _WPUC_WPUC5_LENGTH                                  0x1
#define _WPUC_WPUC5_MASK                                    0x20
#define _WPUC_WPUC6_POSN                                    0x6
#define _WPUC_WPUC6_POSITION                                0x6
#define _WPUC_WPUC6_SIZE                                    0x1
#define _WPUC_WPUC6_LENGTH                                  0x1
#define _WPUC_WPUC6_MASK                                    0x40
#define _WPUC_WPUC7_POSN                                    0x7
#define _WPUC_WPUC7_POSITION                                0x7
#define _WPUC_WPUC7_SIZE                                    0x1
#define _WPUC_WPUC7_LENGTH                                  0x1
#define _WPUC_WPUC7_MASK                                    0x80

// Register: ODCONC
#define ODCONC ODCONC
extern volatile unsigned char           ODCONC              __at(0x42C);
#ifndef _LIB_BUILD
asm("ODCONC equ 042Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned ODCC0                  :1;
        unsigned ODCC1                  :1;
        unsigned                        :1;
        unsigned ODCC3                  :1;
        unsigned ODCC4                  :1;
        unsigned ODCC5                  :1;
        unsigned ODCC6                  :1;
        unsigned ODCC7                  :1;
    };
} ODCONCbits_t;
extern volatile ODCONCbits_t ODCONCbits __at(0x42C);
// bitfield macros
#define _ODCONC_ODCC0_POSN                                  0x0
#define _ODCONC_ODCC0_POSITION                              0x0
#define _ODCONC_ODCC0_SIZE                                  0x1
#define _ODCONC_ODCC0_LENGTH                                0x1
#define _ODCONC_ODCC0_MASK                                  0x1
#define _ODCONC_ODCC1_POSN                                  0x1
#define _ODCONC_ODCC1_POSITION                              0x1
#define _ODCONC_ODCC1_SIZE                                  0x1
#define _ODCONC_ODCC1_LENGTH                                0x1
#define _ODCONC_ODCC1_MASK                                  0x2
#define _ODCONC_ODCC3_POSN                                  0x3
#define _ODCONC_ODCC3_POSITION                              0x3
#define _ODCONC_ODCC3_SIZE                                  0x1
#define _ODCONC_ODCC3_LENGTH                                0x1
#define _ODCONC_ODCC3_MASK                                  0x8
#define _ODCONC_ODCC4_POSN                                  0x4
#define _ODCONC_ODCC4_POSITION                              0x4
#define _ODCONC_ODCC4_SIZE                                  0x1
#define _ODCONC_ODCC4_LENGTH                                0x1
#define _ODCONC_ODCC4_MASK                                  0x10
#define _ODCONC_ODCC5_POSN                                  0x5
#define _ODCONC_ODCC5_POSITION                              0x5
#define _ODCONC_ODCC5_SIZE                                  0x1
#define _ODCONC_ODCC5_LENGTH                                0x1
#define _ODCONC_ODCC5_MASK                                  0x20
#define _ODCONC_ODCC6_POSN                                  0x6
#define _ODCONC_ODCC6_POSITION                              0x6
#define _ODCONC_ODCC6_SIZE                                  0x1
#define _ODCONC_ODCC6_LENGTH                                0x1
#define _ODCONC_ODCC6_MASK                                  0x40
#define _ODCONC_ODCC7_POSN                                  0x7
#define _ODCONC_ODCC7_POSITION                              0x7
#define _ODCONC_ODCC7_SIZE                                  0x1
#define _ODCONC_ODCC7_LENGTH                                0x1
#define _ODCONC_ODCC7_MASK                                  0x80

// Register: SLRCONC
#define SLRCONC SLRCONC
extern volatile unsigned char           SLRCONC             __at(0x42D);
#ifndef _LIB_BUILD
asm("SLRCONC equ 042Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SLRC0                  :1;
        unsigned SLRC1                  :1;
        unsigned                        :1;
        unsigned SLRC3                  :1;
        unsigned SLRC4                  :1;
        unsigned SLRC5                  :1;
        unsigned SLRC6                  :1;
        unsigned SLRC7                  :1;
    };
} SLRCONCbits_t;
extern volatile SLRCONCbits_t SLRCONCbits __at(0x42D);
// bitfield macros
#define _SLRCONC_SLRC0_POSN                                 0x0
#define _SLRCONC_SLRC0_POSITION                             0x0
#define _SLRCONC_SLRC0_SIZE                                 0x1
#define _SLRCONC_SLRC0_LENGTH                               0x1
#define _SLRCONC_SLRC0_MASK                                 0x1
#define _SLRCONC_SLRC1_POSN                                 0x1
#define _SLRCONC_SLRC1_POSITION                             0x1
#define _SLRCONC_SLRC1_SIZE                                 0x1
#define _SLRCONC_SLRC1_LENGTH                               0x1
#define _SLRCONC_SLRC1_MASK                                 0x2
#define _SLRCONC_SLRC3_POSN                                 0x3
#define _SLRCONC_SLRC3_POSITION                             0x3
#define _SLRCONC_SLRC3_SIZE                                 0x1
#define _SLRCONC_SLRC3_LENGTH                               0x1
#define _SLRCONC_SLRC3_MASK                                 0x8
#define _SLRCONC_SLRC4_POSN                                 0x4
#define _SLRCONC_SLRC4_POSITION                             0x4
#define _SLRCONC_SLRC4_SIZE                                 0x1
#define _SLRCONC_SLRC4_LENGTH                               0x1
#define _SLRCONC_SLRC4_MASK                                 0x10
#define _SLRCONC_SLRC5_POSN                                 0x5
#define _SLRCONC_SLRC5_POSITION                             0x5
#define _SLRCONC_SLRC5_SIZE                                 0x1
#define _SLRCONC_SLRC5_LENGTH                               0x1
#define _SLRCONC_SLRC5_MASK                                 0x20
#define _SLRCONC_SLRC6_POSN                                 0x6
#define _SLRCONC_SLRC6_POSITION                             0x6
#define _SLRCONC_SLRC6_SIZE                                 0x1
#define _SLRCONC_SLRC6_LENGTH                               0x1
#define _SLRCONC_SLRC6_MASK                                 0x40
#define _SLRCONC_SLRC7_POSN                                 0x7
#define _SLRCONC_SLRC7_POSITION                             0x7
#define _SLRCONC_SLRC7_SIZE                                 0x1
#define _SLRCONC_SLRC7_LENGTH                               0x1
#define _SLRCONC_SLRC7_MASK                                 0x80

// Register: INLVLC
#define INLVLC INLVLC
extern volatile unsigned char           INLVLC              __at(0x42E);
#ifndef _LIB_BUILD
asm("INLVLC equ 042Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INLVLC0                :1;
        unsigned INLVLC1                :1;
        unsigned                        :1;
        unsigned INLVLC3                :1;
        unsigned INLVLC4                :1;
        unsigned INLVLC5                :1;
        unsigned INLVLC6                :1;
        unsigned INLVLC7                :1;
    };
} INLVLCbits_t;
extern volatile INLVLCbits_t INLVLCbits __at(0x42E);
// bitfield macros
#define _INLVLC_INLVLC0_POSN                                0x0
#define _INLVLC_INLVLC0_POSITION                            0x0
#define _INLVLC_INLVLC0_SIZE                                0x1
#define _INLVLC_INLVLC0_LENGTH                              0x1
#define _INLVLC_INLVLC0_MASK                                0x1
#define _INLVLC_INLVLC1_POSN                                0x1
#define _INLVLC_INLVLC1_POSITION                            0x1
#define _INLVLC_INLVLC1_SIZE                                0x1
#define _INLVLC_INLVLC1_LENGTH                              0x1
#define _INLVLC_INLVLC1_MASK                                0x2
#define _INLVLC_INLVLC3_POSN                                0x3
#define _INLVLC_INLVLC3_POSITION                            0x3
#define _INLVLC_INLVLC3_SIZE                                0x1
#define _INLVLC_INLVLC3_LENGTH                              0x1
#define _INLVLC_INLVLC3_MASK                                0x8
#define _INLVLC_INLVLC4_POSN                                0x4
#define _INLVLC_INLVLC4_POSITION                            0x4
#define _INLVLC_INLVLC4_SIZE                                0x1
#define _INLVLC_INLVLC4_LENGTH                              0x1
#define _INLVLC_INLVLC4_MASK                                0x10
#define _INLVLC_INLVLC5_POSN                                0x5
#define _INLVLC_INLVLC5_POSITION                            0x5
#define _INLVLC_INLVLC5_SIZE                                0x1
#define _INLVLC_INLVLC5_LENGTH                              0x1
#define _INLVLC_INLVLC5_MASK                                0x20
#define _INLVLC_INLVLC6_POSN                                0x6
#define _INLVLC_INLVLC6_POSITION                            0x6
#define _INLVLC_INLVLC6_SIZE                                0x1
#define _INLVLC_INLVLC6_LENGTH                              0x1
#define _INLVLC_INLVLC6_MASK                                0x40
#define _INLVLC_INLVLC7_POSN                                0x7
#define _INLVLC_INLVLC7_POSITION                            0x7
#define _INLVLC_INLVLC7_SIZE                                0x1
#define _INLVLC_INLVLC7_LENGTH                              0x1
#define _INLVLC_INLVLC7_MASK                                0x80

// Register: IOCCP
#define IOCCP IOCCP
extern volatile unsigned char           IOCCP               __at(0x42F);
#ifndef _LIB_BUILD
asm("IOCCP equ 042Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCP0                 :1;
        unsigned IOCCP1                 :1;
        unsigned                        :1;
        unsigned IOCCP3                 :1;
        unsigned IOCCP4                 :1;
        unsigned IOCCP5                 :1;
        unsigned IOCCP6                 :1;
        unsigned IOCCP7                 :1;
    };
} IOCCPbits_t;
extern volatile IOCCPbits_t IOCCPbits __at(0x42F);
// bitfield macros
#define _IOCCP_IOCCP0_POSN                                  0x0
#define _IOCCP_IOCCP0_POSITION                              0x0
#define _IOCCP_IOCCP0_SIZE                                  0x1
#define _IOCCP_IOCCP0_LENGTH                                0x1
#define _IOCCP_IOCCP0_MASK                                  0x1
#define _IOCCP_IOCCP1_POSN                                  0x1
#define _IOCCP_IOCCP1_POSITION                              0x1
#define _IOCCP_IOCCP1_SIZE                                  0x1
#define _IOCCP_IOCCP1_LENGTH                                0x1
#define _IOCCP_IOCCP1_MASK                                  0x2
#define _IOCCP_IOCCP3_POSN                                  0x3
#define _IOCCP_IOCCP3_POSITION                              0x3
#define _IOCCP_IOCCP3_SIZE                                  0x1
#define _IOCCP_IOCCP3_LENGTH                                0x1
#define _IOCCP_IOCCP3_MASK                                  0x8
#define _IOCCP_IOCCP4_POSN                                  0x4
#define _IOCCP_IOCCP4_POSITION                              0x4
#define _IOCCP_IOCCP4_SIZE                                  0x1
#define _IOCCP_IOCCP4_LENGTH                                0x1
#define _IOCCP_IOCCP4_MASK                                  0x10
#define _IOCCP_IOCCP5_POSN                                  0x5
#define _IOCCP_IOCCP5_POSITION                              0x5
#define _IOCCP_IOCCP5_SIZE                                  0x1
#define _IOCCP_IOCCP5_LENGTH                                0x1
#define _IOCCP_IOCCP5_MASK                                  0x20
#define _IOCCP_IOCCP6_POSN                                  0x6
#define _IOCCP_IOCCP6_POSITION                              0x6
#define _IOCCP_IOCCP6_SIZE                                  0x1
#define _IOCCP_IOCCP6_LENGTH                                0x1
#define _IOCCP_IOCCP6_MASK                                  0x40
#define _IOCCP_IOCCP7_POSN                                  0x7
#define _IOCCP_IOCCP7_POSITION                              0x7
#define _IOCCP_IOCCP7_SIZE                                  0x1
#define _IOCCP_IOCCP7_LENGTH                                0x1
#define _IOCCP_IOCCP7_MASK                                  0x80

// Register: IOCCN
#define IOCCN IOCCN
extern volatile unsigned char           IOCCN               __at(0x430);
#ifndef _LIB_BUILD
asm("IOCCN equ 0430h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCN0                 :1;
        unsigned IOCCN1                 :1;
        unsigned                        :1;
        unsigned IOCCN3                 :1;
        unsigned IOCCN4                 :1;
        unsigned IOCCN5                 :1;
        unsigned IOCCN6                 :1;
        unsigned IOCCN7                 :1;
    };
} IOCCNbits_t;
extern volatile IOCCNbits_t IOCCNbits __at(0x430);
// bitfield macros
#define _IOCCN_IOCCN0_POSN                                  0x0
#define _IOCCN_IOCCN0_POSITION                              0x0
#define _IOCCN_IOCCN0_SIZE                                  0x1
#define _IOCCN_IOCCN0_LENGTH                                0x1
#define _IOCCN_IOCCN0_MASK                                  0x1
#define _IOCCN_IOCCN1_POSN                                  0x1
#define _IOCCN_IOCCN1_POSITION                              0x1
#define _IOCCN_IOCCN1_SIZE                                  0x1
#define _IOCCN_IOCCN1_LENGTH                                0x1
#define _IOCCN_IOCCN1_MASK                                  0x2
#define _IOCCN_IOCCN3_POSN                                  0x3
#define _IOCCN_IOCCN3_POSITION                              0x3
#define _IOCCN_IOCCN3_SIZE                                  0x1
#define _IOCCN_IOCCN3_LENGTH                                0x1
#define _IOCCN_IOCCN3_MASK                                  0x8
#define _IOCCN_IOCCN4_POSN                                  0x4
#define _IOCCN_IOCCN4_POSITION                              0x4
#define _IOCCN_IOCCN4_SIZE                                  0x1
#define _IOCCN_IOCCN4_LENGTH                                0x1
#define _IOCCN_IOCCN4_MASK                                  0x10
#define _IOCCN_IOCCN5_POSN                                  0x5
#define _IOCCN_IOCCN5_POSITION                              0x5
#define _IOCCN_IOCCN5_SIZE                                  0x1
#define _IOCCN_IOCCN5_LENGTH                                0x1
#define _IOCCN_IOCCN5_MASK                                  0x20
#define _IOCCN_IOCCN6_POSN                                  0x6
#define _IOCCN_IOCCN6_POSITION                              0x6
#define _IOCCN_IOCCN6_SIZE                                  0x1
#define _IOCCN_IOCCN6_LENGTH                                0x1
#define _IOCCN_IOCCN6_MASK                                  0x40
#define _IOCCN_IOCCN7_POSN                                  0x7
#define _IOCCN_IOCCN7_POSITION                              0x7
#define _IOCCN_IOCCN7_SIZE                                  0x1
#define _IOCCN_IOCCN7_LENGTH                                0x1
#define _IOCCN_IOCCN7_MASK                                  0x80

// Register: IOCCF
#define IOCCF IOCCF
extern volatile unsigned char           IOCCF               __at(0x431);
#ifndef _LIB_BUILD
asm("IOCCF equ 0431h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCCF0                 :1;
        unsigned IOCCF1                 :1;
        unsigned                        :1;
        unsigned IOCCF3                 :1;
        unsigned IOCCF4                 :1;
        unsigned IOCCF5                 :1;
        unsigned IOCCF6                 :1;
        unsigned IOCCF7                 :1;
    };
} IOCCFbits_t;
extern volatile IOCCFbits_t IOCCFbits __at(0x431);
// bitfield macros
#define _IOCCF_IOCCF0_POSN                                  0x0
#define _IOCCF_IOCCF0_POSITION                              0x0
#define _IOCCF_IOCCF0_SIZE                                  0x1
#define _IOCCF_IOCCF0_LENGTH                                0x1
#define _IOCCF_IOCCF0_MASK                                  0x1
#define _IOCCF_IOCCF1_POSN                                  0x1
#define _IOCCF_IOCCF1_POSITION                              0x1
#define _IOCCF_IOCCF1_SIZE                                  0x1
#define _IOCCF_IOCCF1_LENGTH                                0x1
#define _IOCCF_IOCCF1_MASK                                  0x2
#define _IOCCF_IOCCF3_POSN                                  0x3
#define _IOCCF_IOCCF3_POSITION                              0x3
#define _IOCCF_IOCCF3_SIZE                                  0x1
#define _IOCCF_IOCCF3_LENGTH                                0x1
#define _IOCCF_IOCCF3_MASK                                  0x8
#define _IOCCF_IOCCF4_POSN                                  0x4
#define _IOCCF_IOCCF4_POSITION                              0x4
#define _IOCCF_IOCCF4_SIZE                                  0x1
#define _IOCCF_IOCCF4_LENGTH                                0x1
#define _IOCCF_IOCCF4_MASK                                  0x10
#define _IOCCF_IOCCF5_POSN                                  0x5
#define _IOCCF_IOCCF5_POSITION                              0x5
#define _IOCCF_IOCCF5_SIZE                                  0x1
#define _IOCCF_IOCCF5_LENGTH                                0x1
#define _IOCCF_IOCCF5_MASK                                  0x20
#define _IOCCF_IOCCF6_POSN                                  0x6
#define _IOCCF_IOCCF6_POSITION                              0x6
#define _IOCCF_IOCCF6_SIZE                                  0x1
#define _IOCCF_IOCCF6_LENGTH                                0x1
#define _IOCCF_IOCCF6_MASK                                  0x40
#define _IOCCF_IOCCF7_POSN                                  0x7
#define _IOCCF_IOCCF7_POSITION                              0x7
#define _IOCCF_IOCCF7_SIZE                                  0x1
#define _IOCCF_IOCCF7_LENGTH                                0x1
#define _IOCCF_IOCCF7_MASK                                  0x80

// Register: IOCWP
#define IOCWP IOCWP
extern volatile unsigned char           IOCWP               __at(0x457);
#ifndef _LIB_BUILD
asm("IOCWP equ 0457h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCWP0                 :1;
        unsigned IOCWP1                 :1;
        unsigned IOCWP2                 :1;
        unsigned IOCWP3                 :1;
        unsigned IOCWP4                 :1;
        unsigned IOCWP5                 :1;
        unsigned IOCWP6                 :1;
        unsigned IOCWP7                 :1;
    };
} IOCWPbits_t;
extern volatile IOCWPbits_t IOCWPbits __at(0x457);
// bitfield macros
#define _IOCWP_IOCWP0_POSN                                  0x0
#define _IOCWP_IOCWP0_POSITION                              0x0
#define _IOCWP_IOCWP0_SIZE                                  0x1
#define _IOCWP_IOCWP0_LENGTH                                0x1
#define _IOCWP_IOCWP0_MASK                                  0x1
#define _IOCWP_IOCWP1_POSN                                  0x1
#define _IOCWP_IOCWP1_POSITION                              0x1
#define _IOCWP_IOCWP1_SIZE                                  0x1
#define _IOCWP_IOCWP1_LENGTH                                0x1
#define _IOCWP_IOCWP1_MASK                                  0x2
#define _IOCWP_IOCWP2_POSN                                  0x2
#define _IOCWP_IOCWP2_POSITION                              0x2
#define _IOCWP_IOCWP2_SIZE                                  0x1
#define _IOCWP_IOCWP2_LENGTH                                0x1
#define _IOCWP_IOCWP2_MASK                                  0x4
#define _IOCWP_IOCWP3_POSN                                  0x3
#define _IOCWP_IOCWP3_POSITION                              0x3
#define _IOCWP_IOCWP3_SIZE                                  0x1
#define _IOCWP_IOCWP3_LENGTH                                0x1
#define _IOCWP_IOCWP3_MASK                                  0x8
#define _IOCWP_IOCWP4_POSN                                  0x4
#define _IOCWP_IOCWP4_POSITION                              0x4
#define _IOCWP_IOCWP4_SIZE                                  0x1
#define _IOCWP_IOCWP4_LENGTH                                0x1
#define _IOCWP_IOCWP4_MASK                                  0x10
#define _IOCWP_IOCWP5_POSN                                  0x5
#define _IOCWP_IOCWP5_POSITION                              0x5
#define _IOCWP_IOCWP5_SIZE                                  0x1
#define _IOCWP_IOCWP5_LENGTH                                0x1
#define _IOCWP_IOCWP5_MASK                                  0x20
#define _IOCWP_IOCWP6_POSN                                  0x6
#define _IOCWP_IOCWP6_POSITION                              0x6
#define _IOCWP_IOCWP6_SIZE                                  0x1
#define _IOCWP_IOCWP6_LENGTH                                0x1
#define _IOCWP_IOCWP6_MASK                                  0x40
#define _IOCWP_IOCWP7_POSN                                  0x7
#define _IOCWP_IOCWP7_POSITION                              0x7
#define _IOCWP_IOCWP7_SIZE                                  0x1
#define _IOCWP_IOCWP7_LENGTH                                0x1
#define _IOCWP_IOCWP7_MASK                                  0x80

// Register: IOCWN
#define IOCWN IOCWN
extern volatile unsigned char           IOCWN               __at(0x458);
#ifndef _LIB_BUILD
asm("IOCWN equ 0458h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCWN0                 :1;
        unsigned IOCWN1                 :1;
        unsigned IOCWN2                 :1;
        unsigned IOCWN3                 :1;
        unsigned IOCWN4                 :1;
        unsigned IOCWN5                 :1;
        unsigned IOCWN6                 :1;
        unsigned IOCWN7                 :1;
    };
} IOCWNbits_t;
extern volatile IOCWNbits_t IOCWNbits __at(0x458);
// bitfield macros
#define _IOCWN_IOCWN0_POSN                                  0x0
#define _IOCWN_IOCWN0_POSITION                              0x0
#define _IOCWN_IOCWN0_SIZE                                  0x1
#define _IOCWN_IOCWN0_LENGTH                                0x1
#define _IOCWN_IOCWN0_MASK                                  0x1
#define _IOCWN_IOCWN1_POSN                                  0x1
#define _IOCWN_IOCWN1_POSITION                              0x1
#define _IOCWN_IOCWN1_SIZE                                  0x1
#define _IOCWN_IOCWN1_LENGTH                                0x1
#define _IOCWN_IOCWN1_MASK                                  0x2
#define _IOCWN_IOCWN2_POSN                                  0x2
#define _IOCWN_IOCWN2_POSITION                              0x2
#define _IOCWN_IOCWN2_SIZE                                  0x1
#define _IOCWN_IOCWN2_LENGTH                                0x1
#define _IOCWN_IOCWN2_MASK                                  0x4
#define _IOCWN_IOCWN3_POSN                                  0x3
#define _IOCWN_IOCWN3_POSITION                              0x3
#define _IOCWN_IOCWN3_SIZE                                  0x1
#define _IOCWN_IOCWN3_LENGTH                                0x1
#define _IOCWN_IOCWN3_MASK                                  0x8
#define _IOCWN_IOCWN4_POSN                                  0x4
#define _IOCWN_IOCWN4_POSITION                              0x4
#define _IOCWN_IOCWN4_SIZE                                  0x1
#define _IOCWN_IOCWN4_LENGTH                                0x1
#define _IOCWN_IOCWN4_MASK                                  0x10
#define _IOCWN_IOCWN5_POSN                                  0x5
#define _IOCWN_IOCWN5_POSITION                              0x5
#define _IOCWN_IOCWN5_SIZE                                  0x1
#define _IOCWN_IOCWN5_LENGTH                                0x1
#define _IOCWN_IOCWN5_MASK                                  0x20
#define _IOCWN_IOCWN6_POSN                                  0x6
#define _IOCWN_IOCWN6_POSITION                              0x6
#define _IOCWN_IOCWN6_SIZE                                  0x1
#define _IOCWN_IOCWN6_LENGTH                                0x1
#define _IOCWN_IOCWN6_MASK                                  0x40
#define _IOCWN_IOCWN7_POSN                                  0x7
#define _IOCWN_IOCWN7_POSITION                              0x7
#define _IOCWN_IOCWN7_SIZE                                  0x1
#define _IOCWN_IOCWN7_LENGTH                                0x1
#define _IOCWN_IOCWN7_MASK                                  0x80

// Register: IOCWF
#define IOCWF IOCWF
extern volatile unsigned char           IOCWF               __at(0x459);
#ifndef _LIB_BUILD
asm("IOCWF equ 0459h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IOCWF0                 :1;
        unsigned IOCWF1                 :1;
        unsigned IOCWF2                 :1;
        unsigned IOCWF3                 :1;
        unsigned IOCWF4                 :1;
        unsigned IOCWF5                 :1;
        unsigned IOCWF6                 :1;
        unsigned IOCWF7                 :1;
    };
} IOCWFbits_t;
extern volatile IOCWFbits_t IOCWFbits __at(0x459);
// bitfield macros
#define _IOCWF_IOCWF0_POSN                                  0x0
#define _IOCWF_IOCWF0_POSITION                              0x0
#define _IOCWF_IOCWF0_SIZE                                  0x1
#define _IOCWF_IOCWF0_LENGTH                                0x1
#define _IOCWF_IOCWF0_MASK                                  0x1
#define _IOCWF_IOCWF1_POSN                                  0x1
#define _IOCWF_IOCWF1_POSITION                              0x1
#define _IOCWF_IOCWF1_SIZE                                  0x1
#define _IOCWF_IOCWF1_LENGTH                                0x1
#define _IOCWF_IOCWF1_MASK                                  0x2
#define _IOCWF_IOCWF2_POSN                                  0x2
#define _IOCWF_IOCWF2_POSITION                              0x2
#define _IOCWF_IOCWF2_SIZE                                  0x1
#define _IOCWF_IOCWF2_LENGTH                                0x1
#define _IOCWF_IOCWF2_MASK                                  0x4
#define _IOCWF_IOCWF3_POSN                                  0x3
#define _IOCWF_IOCWF3_POSITION                              0x3
#define _IOCWF_IOCWF3_SIZE                                  0x1
#define _IOCWF_IOCWF3_LENGTH                                0x1
#define _IOCWF_IOCWF3_MASK                                  0x8
#define _IOCWF_IOCWF4_POSN                                  0x4
#define _IOCWF_IOCWF4_POSITION                              0x4
#define _IOCWF_IOCWF4_SIZE                                  0x1
#define _IOCWF_IOCWF4_LENGTH                                0x1
#define _IOCWF_IOCWF4_MASK                                  0x10
#define _IOCWF_IOCWF5_POSN                                  0x5
#define _IOCWF_IOCWF5_POSITION                              0x5
#define _IOCWF_IOCWF5_SIZE                                  0x1
#define _IOCWF_IOCWF5_LENGTH                                0x1
#define _IOCWF_IOCWF5_MASK                                  0x20
#define _IOCWF_IOCWF6_POSN                                  0x6
#define _IOCWF_IOCWF6_POSITION                              0x6
#define _IOCWF_IOCWF6_SIZE                                  0x1
#define _IOCWF_IOCWF6_LENGTH                                0x1
#define _IOCWF_IOCWF6_MASK                                  0x40
#define _IOCWF_IOCWF7_POSN                                  0x7
#define _IOCWF_IOCWF7_POSITION                              0x7
#define _IOCWF_IOCWF7_SIZE                                  0x1
#define _IOCWF_IOCWF7_LENGTH                                0x1
#define _IOCWF_IOCWF7_MASK                                  0x80

// Register: IVTLOCK
#define IVTLOCK IVTLOCK
extern volatile unsigned char           IVTLOCK             __at(0x460);
#ifndef _LIB_BUILD
asm("IVTLOCK equ 0460h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IVTLOCKED              :1;
    };
} IVTLOCKbits_t;
extern volatile IVTLOCKbits_t IVTLOCKbits __at(0x460);
// bitfield macros
#define _IVTLOCK_IVTLOCKED_POSN                             0x0
#define _IVTLOCK_IVTLOCKED_POSITION                         0x0
#define _IVTLOCK_IVTLOCKED_SIZE                             0x1
#define _IVTLOCK_IVTLOCKED_LENGTH                           0x1
#define _IVTLOCK_IVTLOCKED_MASK                             0x1

// Register: INTCON0
#define INTCON0 INTCON0
extern volatile unsigned char           INTCON0             __at(0x461);
#ifndef _LIB_BUILD
asm("INTCON0 equ 0461h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INT0EDG                :1;
        unsigned INT1EDG                :1;
        unsigned INT2EDG                :1;
        unsigned                        :2;
        unsigned IPEN                   :1;
        unsigned GIEL                   :1;
        unsigned GIE                    :1;
    };
    struct {
        unsigned                        :7;
        unsigned GIEH                   :1;
    };
} INTCON0bits_t;
extern volatile INTCON0bits_t INTCON0bits __at(0x461);
// bitfield macros
#define _INTCON0_INT0EDG_POSN                               0x0
#define _INTCON0_INT0EDG_POSITION                           0x0
#define _INTCON0_INT0EDG_SIZE                               0x1
#define _INTCON0_INT0EDG_LENGTH                             0x1
#define _INTCON0_INT0EDG_MASK                               0x1
#define _INTCON0_INT1EDG_POSN                               0x1
#define _INTCON0_INT1EDG_POSITION                           0x1
#define _INTCON0_INT1EDG_SIZE                               0x1
#define _INTCON0_INT1EDG_LENGTH                             0x1
#define _INTCON0_INT1EDG_MASK                               0x2
#define _INTCON0_INT2EDG_POSN                               0x2
#define _INTCON0_INT2EDG_POSITION                           0x2
#define _INTCON0_INT2EDG_SIZE                               0x1
#define _INTCON0_INT2EDG_LENGTH                             0x1
#define _INTCON0_INT2EDG_MASK                               0x4
#define _INTCON0_IPEN_POSN                                  0x5
#define _INTCON0_IPEN_POSITION                              0x5
#define _INTCON0_IPEN_SIZE                                  0x1
#define _INTCON0_IPEN_LENGTH                                0x1
#define _INTCON0_IPEN_MASK                                  0x20
#define _INTCON0_GIEL_POSN                                  0x6
#define _INTCON0_GIEL_POSITION                              0x6
#define _INTCON0_GIEL_SIZE                                  0x1
#define _INTCON0_GIEL_LENGTH                                0x1
#define _INTCON0_GIEL_MASK                                  0x40
#define _INTCON0_GIE_POSN                                   0x7
#define _INTCON0_GIE_POSITION                               0x7
#define _INTCON0_GIE_SIZE                                   0x1
#define _INTCON0_GIE_LENGTH                                 0x1
#define _INTCON0_GIE_MASK                                   0x80
#define _INTCON0_GIEH_POSN                                  0x7
#define _INTCON0_GIEH_POSITION                              0x7
#define _INTCON0_GIEH_SIZE                                  0x1
#define _INTCON0_GIEH_LENGTH                                0x1
#define _INTCON0_GIEH_MASK                                  0x80

// Register: INTCON1
#define INTCON1 INTCON1
extern volatile unsigned char           INTCON1             __at(0x462);
#ifndef _LIB_BUILD
asm("INTCON1 equ 0462h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :6;
        unsigned STAT                   :2;
    };
    struct {
        unsigned                        :6;
        unsigned STAT0                  :1;
        unsigned STAT1                  :1;
    };
} INTCON1bits_t;
extern volatile INTCON1bits_t INTCON1bits __at(0x462);
// bitfield macros
#define _INTCON1_STAT_POSN                                  0x6
#define _INTCON1_STAT_POSITION                              0x6
#define _INTCON1_STAT_SIZE                                  0x2
#define _INTCON1_STAT_LENGTH                                0x2
#define _INTCON1_STAT_MASK                                  0xC0
#define _INTCON1_STAT0_POSN                                 0x6
#define _INTCON1_STAT0_POSITION                             0x6
#define _INTCON1_STAT0_SIZE                                 0x1
#define _INTCON1_STAT0_LENGTH                               0x1
#define _INTCON1_STAT0_MASK                                 0x40
#define _INTCON1_STAT1_POSN                                 0x7
#define _INTCON1_STAT1_POSITION                             0x7
#define _INTCON1_STAT1_SIZE                                 0x1
#define _INTCON1_STAT1_LENGTH                               0x1
#define _INTCON1_STAT1_MASK                                 0x80

// Register: IVTAD
#define IVTAD IVTAD
#ifndef __CCI__
extern volatile __uint24                IVTAD               __at(0x463);
#endif
#ifndef _LIB_BUILD
asm("IVTAD equ 0463h");
#endif

// Register: IVTADL
#define IVTADL IVTADL
extern volatile unsigned char           IVTADL              __at(0x463);
#ifndef _LIB_BUILD
asm("IVTADL equ 0463h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IVTADL                 :8;
    };
} IVTADLbits_t;
extern volatile IVTADLbits_t IVTADLbits __at(0x463);
// bitfield macros
#define _IVTADL_IVTADL_POSN                                 0x0
#define _IVTADL_IVTADL_POSITION                             0x0
#define _IVTADL_IVTADL_SIZE                                 0x8
#define _IVTADL_IVTADL_LENGTH                               0x8
#define _IVTADL_IVTADL_MASK                                 0xFF

// Register: IVTADH
#define IVTADH IVTADH
extern volatile unsigned char           IVTADH              __at(0x464);
#ifndef _LIB_BUILD
asm("IVTADH equ 0464h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IVTADH                 :8;
    };
} IVTADHbits_t;
extern volatile IVTADHbits_t IVTADHbits __at(0x464);
// bitfield macros
#define _IVTADH_IVTADH_POSN                                 0x0
#define _IVTADH_IVTADH_POSITION                             0x0
#define _IVTADH_IVTADH_SIZE                                 0x8
#define _IVTADH_IVTADH_LENGTH                               0x8
#define _IVTADH_IVTADH_MASK                                 0xFF

// Register: IVTADU
#define IVTADU IVTADU
extern volatile unsigned char           IVTADU              __at(0x465);
#ifndef _LIB_BUILD
asm("IVTADU equ 0465h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IVTADU                 :5;
    };
} IVTADUbits_t;
extern volatile IVTADUbits_t IVTADUbits __at(0x465);
// bitfield macros
#define _IVTADU_IVTADU_POSN                                 0x0
#define _IVTADU_IVTADU_POSITION                             0x0
#define _IVTADU_IVTADU_SIZE                                 0x5
#define _IVTADU_IVTADU_LENGTH                               0x5
#define _IVTADU_IVTADU_MASK                                 0x1F

// Register: IVTBASE
#define IVTBASE IVTBASE
#ifndef __CCI__
extern volatile __uint24                IVTBASE             __at(0x466);
#endif
#ifndef _LIB_BUILD
asm("IVTBASE equ 0466h");
#endif

// Register: IVTBASEL
#define IVTBASEL IVTBASEL
extern volatile unsigned char           IVTBASEL            __at(0x466);
#ifndef _LIB_BUILD
asm("IVTBASEL equ 0466h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IVTBASEL               :8;
    };
} IVTBASELbits_t;
extern volatile IVTBASELbits_t IVTBASELbits __at(0x466);
// bitfield macros
#define _IVTBASEL_IVTBASEL_POSN                             0x0
#define _IVTBASEL_IVTBASEL_POSITION                         0x0
#define _IVTBASEL_IVTBASEL_SIZE                             0x8
#define _IVTBASEL_IVTBASEL_LENGTH                           0x8
#define _IVTBASEL_IVTBASEL_MASK                             0xFF

// Register: IVTBASEH
#define IVTBASEH IVTBASEH
extern volatile unsigned char           IVTBASEH            __at(0x467);
#ifndef _LIB_BUILD
asm("IVTBASEH equ 0467h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IVTBASEH               :8;
    };
} IVTBASEHbits_t;
extern volatile IVTBASEHbits_t IVTBASEHbits __at(0x467);
// bitfield macros
#define _IVTBASEH_IVTBASEH_POSN                             0x0
#define _IVTBASEH_IVTBASEH_POSITION                         0x0
#define _IVTBASEH_IVTBASEH_SIZE                             0x8
#define _IVTBASEH_IVTBASEH_LENGTH                           0x8
#define _IVTBASEH_IVTBASEH_MASK                             0xFF

// Register: IVTBASEU
#define IVTBASEU IVTBASEU
extern volatile unsigned char           IVTBASEU            __at(0x468);
#ifndef _LIB_BUILD
asm("IVTBASEU equ 0468h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IVTBASEU               :5;
    };
} IVTBASEUbits_t;
extern volatile IVTBASEUbits_t IVTBASEUbits __at(0x468);
// bitfield macros
#define _IVTBASEU_IVTBASEU_POSN                             0x0
#define _IVTBASEU_IVTBASEU_POSITION                         0x0
#define _IVTBASEU_IVTBASEU_SIZE                             0x5
#define _IVTBASEU_IVTBASEU_LENGTH                           0x5
#define _IVTBASEU_IVTBASEU_MASK                             0x1F

// Register: PIR0
#define PIR0 PIR0
extern volatile unsigned char           PIR0                __at(0x469);
#ifndef _LIB_BUILD
asm("PIR0 equ 0469h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SWIF                   :1;
        unsigned INT0IF                 :1;
        unsigned INT1IF                 :1;
        unsigned INT2IF                 :1;
        unsigned DMA1SCNTIF             :1;
        unsigned DMA1DCNTIF             :1;
        unsigned DMA1ORIF               :1;
        unsigned DMA1AIF                :1;
    };
} PIR0bits_t;
extern volatile PIR0bits_t PIR0bits __at(0x469);
// bitfield macros
#define _PIR0_SWIF_POSN                                     0x0
#define _PIR0_SWIF_POSITION                                 0x0
#define _PIR0_SWIF_SIZE                                     0x1
#define _PIR0_SWIF_LENGTH                                   0x1
#define _PIR0_SWIF_MASK                                     0x1
#define _PIR0_INT0IF_POSN                                   0x1
#define _PIR0_INT0IF_POSITION                               0x1
#define _PIR0_INT0IF_SIZE                                   0x1
#define _PIR0_INT0IF_LENGTH                                 0x1
#define _PIR0_INT0IF_MASK                                   0x2
#define _PIR0_INT1IF_POSN                                   0x2
#define _PIR0_INT1IF_POSITION                               0x2
#define _PIR0_INT1IF_SIZE                                   0x1
#define _PIR0_INT1IF_LENGTH                                 0x1
#define _PIR0_INT1IF_MASK                                   0x4
#define _PIR0_INT2IF_POSN                                   0x3
#define _PIR0_INT2IF_POSITION                               0x3
#define _PIR0_INT2IF_SIZE                                   0x1
#define _PIR0_INT2IF_LENGTH                                 0x1
#define _PIR0_INT2IF_MASK                                   0x8
#define _PIR0_DMA1SCNTIF_POSN                               0x4
#define _PIR0_DMA1SCNTIF_POSITION                           0x4
#define _PIR0_DMA1SCNTIF_SIZE                               0x1
#define _PIR0_DMA1SCNTIF_LENGTH                             0x1
#define _PIR0_DMA1SCNTIF_MASK                               0x10
#define _PIR0_DMA1DCNTIF_POSN                               0x5
#define _PIR0_DMA1DCNTIF_POSITION                           0x5
#define _PIR0_DMA1DCNTIF_SIZE                               0x1
#define _PIR0_DMA1DCNTIF_LENGTH                             0x1
#define _PIR0_DMA1DCNTIF_MASK                               0x20
#define _PIR0_DMA1ORIF_POSN                                 0x6
#define _PIR0_DMA1ORIF_POSITION                             0x6
#define _PIR0_DMA1ORIF_SIZE                                 0x1
#define _PIR0_DMA1ORIF_LENGTH                               0x1
#define _PIR0_DMA1ORIF_MASK                                 0x40
#define _PIR0_DMA1AIF_POSN                                  0x7
#define _PIR0_DMA1AIF_POSITION                              0x7
#define _PIR0_DMA1AIF_SIZE                                  0x1
#define _PIR0_DMA1AIF_LENGTH                                0x1
#define _PIR0_DMA1AIF_MASK                                  0x80

// Register: PIR1
#define PIR1 PIR1
extern volatile unsigned char           PIR1                __at(0x46A);
#ifndef _LIB_BUILD
asm("PIR1 equ 046Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMA2SCNTIF             :1;
        unsigned DMA2DCNTIF             :1;
        unsigned DMA2ORIF               :1;
        unsigned DMA2AIF                :1;
        unsigned DMA3SCNTIF             :1;
        unsigned DMA3DCNTIF             :1;
        unsigned DMA3ORIF               :1;
        unsigned DMA3AIF                :1;
    };
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits __at(0x46A);
// bitfield macros
#define _PIR1_DMA2SCNTIF_POSN                               0x0
#define _PIR1_DMA2SCNTIF_POSITION                           0x0
#define _PIR1_DMA2SCNTIF_SIZE                               0x1
#define _PIR1_DMA2SCNTIF_LENGTH                             0x1
#define _PIR1_DMA2SCNTIF_MASK                               0x1
#define _PIR1_DMA2DCNTIF_POSN                               0x1
#define _PIR1_DMA2DCNTIF_POSITION                           0x1
#define _PIR1_DMA2DCNTIF_SIZE                               0x1
#define _PIR1_DMA2DCNTIF_LENGTH                             0x1
#define _PIR1_DMA2DCNTIF_MASK                               0x2
#define _PIR1_DMA2ORIF_POSN                                 0x2
#define _PIR1_DMA2ORIF_POSITION                             0x2
#define _PIR1_DMA2ORIF_SIZE                                 0x1
#define _PIR1_DMA2ORIF_LENGTH                               0x1
#define _PIR1_DMA2ORIF_MASK                                 0x4
#define _PIR1_DMA2AIF_POSN                                  0x3
#define _PIR1_DMA2AIF_POSITION                              0x3
#define _PIR1_DMA2AIF_SIZE                                  0x1
#define _PIR1_DMA2AIF_LENGTH                                0x1
#define _PIR1_DMA2AIF_MASK                                  0x8
#define _PIR1_DMA3SCNTIF_POSN                               0x4
#define _PIR1_DMA3SCNTIF_POSITION                           0x4
#define _PIR1_DMA3SCNTIF_SIZE                               0x1
#define _PIR1_DMA3SCNTIF_LENGTH                             0x1
#define _PIR1_DMA3SCNTIF_MASK                               0x10
#define _PIR1_DMA3DCNTIF_POSN                               0x5
#define _PIR1_DMA3DCNTIF_POSITION                           0x5
#define _PIR1_DMA3DCNTIF_SIZE                               0x1
#define _PIR1_DMA3DCNTIF_LENGTH                             0x1
#define _PIR1_DMA3DCNTIF_MASK                               0x20
#define _PIR1_DMA3ORIF_POSN                                 0x6
#define _PIR1_DMA3ORIF_POSITION                             0x6
#define _PIR1_DMA3ORIF_SIZE                                 0x1
#define _PIR1_DMA3ORIF_LENGTH                               0x1
#define _PIR1_DMA3ORIF_MASK                                 0x40
#define _PIR1_DMA3AIF_POSN                                  0x7
#define _PIR1_DMA3AIF_POSITION                              0x7
#define _PIR1_DMA3AIF_SIZE                                  0x1
#define _PIR1_DMA3AIF_LENGTH                                0x1
#define _PIR1_DMA3AIF_MASK                                  0x80

// Register: PIR2
#define PIR2 PIR2
extern volatile unsigned char           PIR2                __at(0x46B);
#ifndef _LIB_BUILD
asm("PIR2 equ 046Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMA4SCNTIF             :1;
        unsigned DMA4DCNTIF             :1;
        unsigned DMA4ORIF               :1;
        unsigned DMA4AIF                :1;
        unsigned NVMIF                  :1;
        unsigned CRCIF                  :1;
        unsigned SCANIF                 :1;
        unsigned ACTIF                  :1;
    };
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits __at(0x46B);
// bitfield macros
#define _PIR2_DMA4SCNTIF_POSN                               0x0
#define _PIR2_DMA4SCNTIF_POSITION                           0x0
#define _PIR2_DMA4SCNTIF_SIZE                               0x1
#define _PIR2_DMA4SCNTIF_LENGTH                             0x1
#define _PIR2_DMA4SCNTIF_MASK                               0x1
#define _PIR2_DMA4DCNTIF_POSN                               0x1
#define _PIR2_DMA4DCNTIF_POSITION                           0x1
#define _PIR2_DMA4DCNTIF_SIZE                               0x1
#define _PIR2_DMA4DCNTIF_LENGTH                             0x1
#define _PIR2_DMA4DCNTIF_MASK                               0x2
#define _PIR2_DMA4ORIF_POSN                                 0x2
#define _PIR2_DMA4ORIF_POSITION                             0x2
#define _PIR2_DMA4ORIF_SIZE                                 0x1
#define _PIR2_DMA4ORIF_LENGTH                               0x1
#define _PIR2_DMA4ORIF_MASK                                 0x4
#define _PIR2_DMA4AIF_POSN                                  0x3
#define _PIR2_DMA4AIF_POSITION                              0x3
#define _PIR2_DMA4AIF_SIZE                                  0x1
#define _PIR2_DMA4AIF_LENGTH                                0x1
#define _PIR2_DMA4AIF_MASK                                  0x8
#define _PIR2_NVMIF_POSN                                    0x4
#define _PIR2_NVMIF_POSITION                                0x4
#define _PIR2_NVMIF_SIZE                                    0x1
#define _PIR2_NVMIF_LENGTH                                  0x1
#define _PIR2_NVMIF_MASK                                    0x10
#define _PIR2_CRCIF_POSN                                    0x5
#define _PIR2_CRCIF_POSITION                                0x5
#define _PIR2_CRCIF_SIZE                                    0x1
#define _PIR2_CRCIF_LENGTH                                  0x1
#define _PIR2_CRCIF_MASK                                    0x20
#define _PIR2_SCANIF_POSN                                   0x6
#define _PIR2_SCANIF_POSITION                               0x6
#define _PIR2_SCANIF_SIZE                                   0x1
#define _PIR2_SCANIF_LENGTH                                 0x1
#define _PIR2_SCANIF_MASK                                   0x40
#define _PIR2_ACTIF_POSN                                    0x7
#define _PIR2_ACTIF_POSITION                                0x7
#define _PIR2_ACTIF_SIZE                                    0x1
#define _PIR2_ACTIF_LENGTH                                  0x1
#define _PIR2_ACTIF_MASK                                    0x80

// Register: PIR3
#define PIR3 PIR3
extern volatile unsigned char           PIR3                __at(0x46C);
#ifndef _LIB_BUILD
asm("PIR3 equ 046Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CSWIF                  :1;
        unsigned OSFIF                  :1;
        unsigned VDDIO2IF               :1;
        unsigned                        :1;
        unsigned IOCIF                  :1;
        unsigned TMR0IF                 :1;
        unsigned TMR1IF                 :1;
        unsigned TMR1GIF                :1;
    };
} PIR3bits_t;
extern volatile PIR3bits_t PIR3bits __at(0x46C);
// bitfield macros
#define _PIR3_CSWIF_POSN                                    0x0
#define _PIR3_CSWIF_POSITION                                0x0
#define _PIR3_CSWIF_SIZE                                    0x1
#define _PIR3_CSWIF_LENGTH                                  0x1
#define _PIR3_CSWIF_MASK                                    0x1
#define _PIR3_OSFIF_POSN                                    0x1
#define _PIR3_OSFIF_POSITION                                0x1
#define _PIR3_OSFIF_SIZE                                    0x1
#define _PIR3_OSFIF_LENGTH                                  0x1
#define _PIR3_OSFIF_MASK                                    0x2
#define _PIR3_VDDIO2IF_POSN                                 0x2
#define _PIR3_VDDIO2IF_POSITION                             0x2
#define _PIR3_VDDIO2IF_SIZE                                 0x1
#define _PIR3_VDDIO2IF_LENGTH                               0x1
#define _PIR3_VDDIO2IF_MASK                                 0x4
#define _PIR3_IOCIF_POSN                                    0x4
#define _PIR3_IOCIF_POSITION                                0x4
#define _PIR3_IOCIF_SIZE                                    0x1
#define _PIR3_IOCIF_LENGTH                                  0x1
#define _PIR3_IOCIF_MASK                                    0x10
#define _PIR3_TMR0IF_POSN                                   0x5
#define _PIR3_TMR0IF_POSITION                               0x5
#define _PIR3_TMR0IF_SIZE                                   0x1
#define _PIR3_TMR0IF_LENGTH                                 0x1
#define _PIR3_TMR0IF_MASK                                   0x20
#define _PIR3_TMR1IF_POSN                                   0x6
#define _PIR3_TMR1IF_POSITION                               0x6
#define _PIR3_TMR1IF_SIZE                                   0x1
#define _PIR3_TMR1IF_LENGTH                                 0x1
#define _PIR3_TMR1IF_MASK                                   0x40
#define _PIR3_TMR1GIF_POSN                                  0x7
#define _PIR3_TMR1GIF_POSITION                              0x7
#define _PIR3_TMR1GIF_SIZE                                  0x1
#define _PIR3_TMR1GIF_LENGTH                                0x1
#define _PIR3_TMR1GIF_MASK                                  0x80

// Register: PIR4
#define PIR4 PIR4
extern volatile unsigned char           PIR4                __at(0x46D);
#ifndef _LIB_BUILD
asm("PIR4 equ 046Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR2IF                 :1;
        unsigned TMR4IF                 :1;
        unsigned TU16AIF                :1;
        unsigned TU16BIF                :1;
        unsigned CCP1IF                 :1;
        unsigned CCP2IF                 :1;
        unsigned PWM1PIF                :1;
        unsigned PWM1IF                 :1;
    };
} PIR4bits_t;
extern volatile PIR4bits_t PIR4bits __at(0x46D);
// bitfield macros
#define _PIR4_TMR2IF_POSN                                   0x0
#define _PIR4_TMR2IF_POSITION                               0x0
#define _PIR4_TMR2IF_SIZE                                   0x1
#define _PIR4_TMR2IF_LENGTH                                 0x1
#define _PIR4_TMR2IF_MASK                                   0x1
#define _PIR4_TMR4IF_POSN                                   0x1
#define _PIR4_TMR4IF_POSITION                               0x1
#define _PIR4_TMR4IF_SIZE                                   0x1
#define _PIR4_TMR4IF_LENGTH                                 0x1
#define _PIR4_TMR4IF_MASK                                   0x2
#define _PIR4_TU16AIF_POSN                                  0x2
#define _PIR4_TU16AIF_POSITION                              0x2
#define _PIR4_TU16AIF_SIZE                                  0x1
#define _PIR4_TU16AIF_LENGTH                                0x1
#define _PIR4_TU16AIF_MASK                                  0x4
#define _PIR4_TU16BIF_POSN                                  0x3
#define _PIR4_TU16BIF_POSITION                              0x3
#define _PIR4_TU16BIF_SIZE                                  0x1
#define _PIR4_TU16BIF_LENGTH                                0x1
#define _PIR4_TU16BIF_MASK                                  0x8
#define _PIR4_CCP1IF_POSN                                   0x4
#define _PIR4_CCP1IF_POSITION                               0x4
#define _PIR4_CCP1IF_SIZE                                   0x1
#define _PIR4_CCP1IF_LENGTH                                 0x1
#define _PIR4_CCP1IF_MASK                                   0x10
#define _PIR4_CCP2IF_POSN                                   0x5
#define _PIR4_CCP2IF_POSITION                               0x5
#define _PIR4_CCP2IF_SIZE                                   0x1
#define _PIR4_CCP2IF_LENGTH                                 0x1
#define _PIR4_CCP2IF_MASK                                   0x20
#define _PIR4_PWM1PIF_POSN                                  0x6
#define _PIR4_PWM1PIF_POSITION                              0x6
#define _PIR4_PWM1PIF_SIZE                                  0x1
#define _PIR4_PWM1PIF_LENGTH                                0x1
#define _PIR4_PWM1PIF_MASK                                  0x40
#define _PIR4_PWM1IF_POSN                                   0x7
#define _PIR4_PWM1IF_POSITION                               0x7
#define _PIR4_PWM1IF_SIZE                                   0x1
#define _PIR4_PWM1IF_LENGTH                                 0x1
#define _PIR4_PWM1IF_MASK                                   0x80

// Register: PIR5
#define PIR5 PIR5
extern volatile unsigned char           PIR5                __at(0x46E);
#ifndef _LIB_BUILD
asm("PIR5 equ 046Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PWM2PIF                :1;
        unsigned PWM2IF                 :1;
        unsigned CWG1IF                 :1;
        unsigned CLC1IF                 :1;
        unsigned CLC2IF                 :1;
        unsigned CLC3IF                 :1;
        unsigned CLC4IF                 :1;
        unsigned IOCSRIF                :1;
    };
} PIR5bits_t;
extern volatile PIR5bits_t PIR5bits __at(0x46E);
// bitfield macros
#define _PIR5_PWM2PIF_POSN                                  0x0
#define _PIR5_PWM2PIF_POSITION                              0x0
#define _PIR5_PWM2PIF_SIZE                                  0x1
#define _PIR5_PWM2PIF_LENGTH                                0x1
#define _PIR5_PWM2PIF_MASK                                  0x1
#define _PIR5_PWM2IF_POSN                                   0x1
#define _PIR5_PWM2IF_POSITION                               0x1
#define _PIR5_PWM2IF_SIZE                                   0x1
#define _PIR5_PWM2IF_LENGTH                                 0x1
#define _PIR5_PWM2IF_MASK                                   0x2
#define _PIR5_CWG1IF_POSN                                   0x2
#define _PIR5_CWG1IF_POSITION                               0x2
#define _PIR5_CWG1IF_SIZE                                   0x1
#define _PIR5_CWG1IF_LENGTH                                 0x1
#define _PIR5_CWG1IF_MASK                                   0x4
#define _PIR5_CLC1IF_POSN                                   0x3
#define _PIR5_CLC1IF_POSITION                               0x3
#define _PIR5_CLC1IF_SIZE                                   0x1
#define _PIR5_CLC1IF_LENGTH                                 0x1
#define _PIR5_CLC1IF_MASK                                   0x8
#define _PIR5_CLC2IF_POSN                                   0x4
#define _PIR5_CLC2IF_POSITION                               0x4
#define _PIR5_CLC2IF_SIZE                                   0x1
#define _PIR5_CLC2IF_LENGTH                                 0x1
#define _PIR5_CLC2IF_MASK                                   0x10
#define _PIR5_CLC3IF_POSN                                   0x5
#define _PIR5_CLC3IF_POSITION                               0x5
#define _PIR5_CLC3IF_SIZE                                   0x1
#define _PIR5_CLC3IF_LENGTH                                 0x1
#define _PIR5_CLC3IF_MASK                                   0x20
#define _PIR5_CLC4IF_POSN                                   0x6
#define _PIR5_CLC4IF_POSITION                               0x6
#define _PIR5_CLC4IF_SIZE                                   0x1
#define _PIR5_CLC4IF_LENGTH                                 0x1
#define _PIR5_CLC4IF_MASK                                   0x40
#define _PIR5_IOCSRIF_POSN                                  0x7
#define _PIR5_IOCSRIF_POSITION                              0x7
#define _PIR5_IOCSRIF_SIZE                                  0x1
#define _PIR5_IOCSRIF_LENGTH                                0x1
#define _PIR5_IOCSRIF_MASK                                  0x80

// Register: PIR6
#define PIR6 PIR6
extern volatile unsigned char           PIR6                __at(0x46F);
#ifndef _LIB_BUILD
asm("PIR6 equ 046Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U1RXIF                 :1;
        unsigned U1TXIF                 :1;
        unsigned U1IF                   :1;
        unsigned U1EIF                  :1;
        unsigned U2RXIF                 :1;
        unsigned U2TXIF                 :1;
        unsigned U2IF                   :1;
        unsigned U2EIF                  :1;
    };
} PIR6bits_t;
extern volatile PIR6bits_t PIR6bits __at(0x46F);
// bitfield macros
#define _PIR6_U1RXIF_POSN                                   0x0
#define _PIR6_U1RXIF_POSITION                               0x0
#define _PIR6_U1RXIF_SIZE                                   0x1
#define _PIR6_U1RXIF_LENGTH                                 0x1
#define _PIR6_U1RXIF_MASK                                   0x1
#define _PIR6_U1TXIF_POSN                                   0x1
#define _PIR6_U1TXIF_POSITION                               0x1
#define _PIR6_U1TXIF_SIZE                                   0x1
#define _PIR6_U1TXIF_LENGTH                                 0x1
#define _PIR6_U1TXIF_MASK                                   0x2
#define _PIR6_U1IF_POSN                                     0x2
#define _PIR6_U1IF_POSITION                                 0x2
#define _PIR6_U1IF_SIZE                                     0x1
#define _PIR6_U1IF_LENGTH                                   0x1
#define _PIR6_U1IF_MASK                                     0x4
#define _PIR6_U1EIF_POSN                                    0x3
#define _PIR6_U1EIF_POSITION                                0x3
#define _PIR6_U1EIF_SIZE                                    0x1
#define _PIR6_U1EIF_LENGTH                                  0x1
#define _PIR6_U1EIF_MASK                                    0x8
#define _PIR6_U2RXIF_POSN                                   0x4
#define _PIR6_U2RXIF_POSITION                               0x4
#define _PIR6_U2RXIF_SIZE                                   0x1
#define _PIR6_U2RXIF_LENGTH                                 0x1
#define _PIR6_U2RXIF_MASK                                   0x10
#define _PIR6_U2TXIF_POSN                                   0x5
#define _PIR6_U2TXIF_POSITION                               0x5
#define _PIR6_U2TXIF_SIZE                                   0x1
#define _PIR6_U2TXIF_LENGTH                                 0x1
#define _PIR6_U2TXIF_MASK                                   0x20
#define _PIR6_U2IF_POSN                                     0x6
#define _PIR6_U2IF_POSITION                                 0x6
#define _PIR6_U2IF_SIZE                                     0x1
#define _PIR6_U2IF_LENGTH                                   0x1
#define _PIR6_U2IF_MASK                                     0x40
#define _PIR6_U2EIF_POSN                                    0x7
#define _PIR6_U2EIF_POSITION                                0x7
#define _PIR6_U2EIF_SIZE                                    0x1
#define _PIR6_U2EIF_LENGTH                                  0x1
#define _PIR6_U2EIF_MASK                                    0x80

// Register: PIR7
#define PIR7 PIR7
extern volatile unsigned char           PIR7                __at(0x470);
#ifndef _LIB_BUILD
asm("PIR7 equ 0470h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPI1RXIF               :1;
        unsigned SPI1TXIF               :1;
        unsigned SPI1IF                 :1;
        unsigned I2C1RXIF               :1;
        unsigned I2C1TXIF               :1;
        unsigned I2C1IF                 :1;
        unsigned I2C1EIF                :1;
    };
} PIR7bits_t;
extern volatile PIR7bits_t PIR7bits __at(0x470);
// bitfield macros
#define _PIR7_SPI1RXIF_POSN                                 0x0
#define _PIR7_SPI1RXIF_POSITION                             0x0
#define _PIR7_SPI1RXIF_SIZE                                 0x1
#define _PIR7_SPI1RXIF_LENGTH                               0x1
#define _PIR7_SPI1RXIF_MASK                                 0x1
#define _PIR7_SPI1TXIF_POSN                                 0x1
#define _PIR7_SPI1TXIF_POSITION                             0x1
#define _PIR7_SPI1TXIF_SIZE                                 0x1
#define _PIR7_SPI1TXIF_LENGTH                               0x1
#define _PIR7_SPI1TXIF_MASK                                 0x2
#define _PIR7_SPI1IF_POSN                                   0x2
#define _PIR7_SPI1IF_POSITION                               0x2
#define _PIR7_SPI1IF_SIZE                                   0x1
#define _PIR7_SPI1IF_LENGTH                                 0x1
#define _PIR7_SPI1IF_MASK                                   0x4
#define _PIR7_I2C1RXIF_POSN                                 0x3
#define _PIR7_I2C1RXIF_POSITION                             0x3
#define _PIR7_I2C1RXIF_SIZE                                 0x1
#define _PIR7_I2C1RXIF_LENGTH                               0x1
#define _PIR7_I2C1RXIF_MASK                                 0x8
#define _PIR7_I2C1TXIF_POSN                                 0x4
#define _PIR7_I2C1TXIF_POSITION                             0x4
#define _PIR7_I2C1TXIF_SIZE                                 0x1
#define _PIR7_I2C1TXIF_LENGTH                               0x1
#define _PIR7_I2C1TXIF_MASK                                 0x10
#define _PIR7_I2C1IF_POSN                                   0x5
#define _PIR7_I2C1IF_POSITION                               0x5
#define _PIR7_I2C1IF_SIZE                                   0x1
#define _PIR7_I2C1IF_LENGTH                                 0x1
#define _PIR7_I2C1IF_MASK                                   0x20
#define _PIR7_I2C1EIF_POSN                                  0x6
#define _PIR7_I2C1EIF_POSITION                              0x6
#define _PIR7_I2C1EIF_SIZE                                  0x1
#define _PIR7_I2C1EIF_LENGTH                                0x1
#define _PIR7_I2C1EIF_MASK                                  0x40

// Register: PIR8
#define PIR8 PIR8
extern volatile unsigned char           PIR8                __at(0x471);
#ifndef _LIB_BUILD
asm("PIR8 equ 0471h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I3C1RXIF               :1;
        unsigned I3C1TXIF               :1;
        unsigned I3C1IF                 :1;
        unsigned I3C1EIF                :1;
        unsigned I3C1RIF                :1;
    };
} PIR8bits_t;
extern volatile PIR8bits_t PIR8bits __at(0x471);
// bitfield macros
#define _PIR8_I3C1RXIF_POSN                                 0x0
#define _PIR8_I3C1RXIF_POSITION                             0x0
#define _PIR8_I3C1RXIF_SIZE                                 0x1
#define _PIR8_I3C1RXIF_LENGTH                               0x1
#define _PIR8_I3C1RXIF_MASK                                 0x1
#define _PIR8_I3C1TXIF_POSN                                 0x1
#define _PIR8_I3C1TXIF_POSITION                             0x1
#define _PIR8_I3C1TXIF_SIZE                                 0x1
#define _PIR8_I3C1TXIF_LENGTH                               0x1
#define _PIR8_I3C1TXIF_MASK                                 0x2
#define _PIR8_I3C1IF_POSN                                   0x2
#define _PIR8_I3C1IF_POSITION                               0x2
#define _PIR8_I3C1IF_SIZE                                   0x1
#define _PIR8_I3C1IF_LENGTH                                 0x1
#define _PIR8_I3C1IF_MASK                                   0x4
#define _PIR8_I3C1EIF_POSN                                  0x3
#define _PIR8_I3C1EIF_POSITION                              0x3
#define _PIR8_I3C1EIF_SIZE                                  0x1
#define _PIR8_I3C1EIF_LENGTH                                0x1
#define _PIR8_I3C1EIF_MASK                                  0x8
#define _PIR8_I3C1RIF_POSN                                  0x4
#define _PIR8_I3C1RIF_POSITION                              0x4
#define _PIR8_I3C1RIF_SIZE                                  0x1
#define _PIR8_I3C1RIF_LENGTH                                0x1
#define _PIR8_I3C1RIF_MASK                                  0x10

// Register: PIR9
#define PIR9 PIR9
extern volatile unsigned char           PIR9                __at(0x472);
#ifndef _LIB_BUILD
asm("PIR9 equ 0472h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned HLVDIF                 :1;
        unsigned ADIF                   :1;
        unsigned ADTIF                  :1;
    };
} PIR9bits_t;
extern volatile PIR9bits_t PIR9bits __at(0x472);
// bitfield macros
#define _PIR9_HLVDIF_POSN                                   0x5
#define _PIR9_HLVDIF_POSITION                               0x5
#define _PIR9_HLVDIF_SIZE                                   0x1
#define _PIR9_HLVDIF_LENGTH                                 0x1
#define _PIR9_HLVDIF_MASK                                   0x20
#define _PIR9_ADIF_POSN                                     0x6
#define _PIR9_ADIF_POSITION                                 0x6
#define _PIR9_ADIF_SIZE                                     0x1
#define _PIR9_ADIF_LENGTH                                   0x1
#define _PIR9_ADIF_MASK                                     0x40
#define _PIR9_ADTIF_POSN                                    0x7
#define _PIR9_ADTIF_POSITION                                0x7
#define _PIR9_ADTIF_SIZE                                    0x1
#define _PIR9_ADTIF_LENGTH                                  0x1
#define _PIR9_ADTIF_MASK                                    0x80

// Register: PIE0
#define PIE0 PIE0
extern volatile unsigned char           PIE0                __at(0x473);
#ifndef _LIB_BUILD
asm("PIE0 equ 0473h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SWIE                   :1;
        unsigned INT0IE                 :1;
        unsigned INT1IE                 :1;
        unsigned INT2IE                 :1;
        unsigned DMA1SCNTIE             :1;
        unsigned DMA1DCNTIE             :1;
        unsigned DMA1ORIE               :1;
        unsigned DMA1AIE                :1;
    };
} PIE0bits_t;
extern volatile PIE0bits_t PIE0bits __at(0x473);
// bitfield macros
#define _PIE0_SWIE_POSN                                     0x0
#define _PIE0_SWIE_POSITION                                 0x0
#define _PIE0_SWIE_SIZE                                     0x1
#define _PIE0_SWIE_LENGTH                                   0x1
#define _PIE0_SWIE_MASK                                     0x1
#define _PIE0_INT0IE_POSN                                   0x1
#define _PIE0_INT0IE_POSITION                               0x1
#define _PIE0_INT0IE_SIZE                                   0x1
#define _PIE0_INT0IE_LENGTH                                 0x1
#define _PIE0_INT0IE_MASK                                   0x2
#define _PIE0_INT1IE_POSN                                   0x2
#define _PIE0_INT1IE_POSITION                               0x2
#define _PIE0_INT1IE_SIZE                                   0x1
#define _PIE0_INT1IE_LENGTH                                 0x1
#define _PIE0_INT1IE_MASK                                   0x4
#define _PIE0_INT2IE_POSN                                   0x3
#define _PIE0_INT2IE_POSITION                               0x3
#define _PIE0_INT2IE_SIZE                                   0x1
#define _PIE0_INT2IE_LENGTH                                 0x1
#define _PIE0_INT2IE_MASK                                   0x8
#define _PIE0_DMA1SCNTIE_POSN                               0x4
#define _PIE0_DMA1SCNTIE_POSITION                           0x4
#define _PIE0_DMA1SCNTIE_SIZE                               0x1
#define _PIE0_DMA1SCNTIE_LENGTH                             0x1
#define _PIE0_DMA1SCNTIE_MASK                               0x10
#define _PIE0_DMA1DCNTIE_POSN                               0x5
#define _PIE0_DMA1DCNTIE_POSITION                           0x5
#define _PIE0_DMA1DCNTIE_SIZE                               0x1
#define _PIE0_DMA1DCNTIE_LENGTH                             0x1
#define _PIE0_DMA1DCNTIE_MASK                               0x20
#define _PIE0_DMA1ORIE_POSN                                 0x6
#define _PIE0_DMA1ORIE_POSITION                             0x6
#define _PIE0_DMA1ORIE_SIZE                                 0x1
#define _PIE0_DMA1ORIE_LENGTH                               0x1
#define _PIE0_DMA1ORIE_MASK                                 0x40
#define _PIE0_DMA1AIE_POSN                                  0x7
#define _PIE0_DMA1AIE_POSITION                              0x7
#define _PIE0_DMA1AIE_SIZE                                  0x1
#define _PIE0_DMA1AIE_LENGTH                                0x1
#define _PIE0_DMA1AIE_MASK                                  0x80

// Register: PIE1
#define PIE1 PIE1
extern volatile unsigned char           PIE1                __at(0x474);
#ifndef _LIB_BUILD
asm("PIE1 equ 0474h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMA2SCNTIE             :1;
        unsigned DMA2DCNTIE             :1;
        unsigned DMA2ORIE               :1;
        unsigned DMA2AIE                :1;
        unsigned DMA3SCNTIE             :1;
        unsigned DMA3DCNTIE             :1;
        unsigned DMA3ORIE               :1;
        unsigned DMA3AIE                :1;
    };
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits __at(0x474);
// bitfield macros
#define _PIE1_DMA2SCNTIE_POSN                               0x0
#define _PIE1_DMA2SCNTIE_POSITION                           0x0
#define _PIE1_DMA2SCNTIE_SIZE                               0x1
#define _PIE1_DMA2SCNTIE_LENGTH                             0x1
#define _PIE1_DMA2SCNTIE_MASK                               0x1
#define _PIE1_DMA2DCNTIE_POSN                               0x1
#define _PIE1_DMA2DCNTIE_POSITION                           0x1
#define _PIE1_DMA2DCNTIE_SIZE                               0x1
#define _PIE1_DMA2DCNTIE_LENGTH                             0x1
#define _PIE1_DMA2DCNTIE_MASK                               0x2
#define _PIE1_DMA2ORIE_POSN                                 0x2
#define _PIE1_DMA2ORIE_POSITION                             0x2
#define _PIE1_DMA2ORIE_SIZE                                 0x1
#define _PIE1_DMA2ORIE_LENGTH                               0x1
#define _PIE1_DMA2ORIE_MASK                                 0x4
#define _PIE1_DMA2AIE_POSN                                  0x3
#define _PIE1_DMA2AIE_POSITION                              0x3
#define _PIE1_DMA2AIE_SIZE                                  0x1
#define _PIE1_DMA2AIE_LENGTH                                0x1
#define _PIE1_DMA2AIE_MASK                                  0x8
#define _PIE1_DMA3SCNTIE_POSN                               0x4
#define _PIE1_DMA3SCNTIE_POSITION                           0x4
#define _PIE1_DMA3SCNTIE_SIZE                               0x1
#define _PIE1_DMA3SCNTIE_LENGTH                             0x1
#define _PIE1_DMA3SCNTIE_MASK                               0x10
#define _PIE1_DMA3DCNTIE_POSN                               0x5
#define _PIE1_DMA3DCNTIE_POSITION                           0x5
#define _PIE1_DMA3DCNTIE_SIZE                               0x1
#define _PIE1_DMA3DCNTIE_LENGTH                             0x1
#define _PIE1_DMA3DCNTIE_MASK                               0x20
#define _PIE1_DMA3ORIE_POSN                                 0x6
#define _PIE1_DMA3ORIE_POSITION                             0x6
#define _PIE1_DMA3ORIE_SIZE                                 0x1
#define _PIE1_DMA3ORIE_LENGTH                               0x1
#define _PIE1_DMA3ORIE_MASK                                 0x40
#define _PIE1_DMA3AIE_POSN                                  0x7
#define _PIE1_DMA3AIE_POSITION                              0x7
#define _PIE1_DMA3AIE_SIZE                                  0x1
#define _PIE1_DMA3AIE_LENGTH                                0x1
#define _PIE1_DMA3AIE_MASK                                  0x80

// Register: PIE2
#define PIE2 PIE2
extern volatile unsigned char           PIE2                __at(0x475);
#ifndef _LIB_BUILD
asm("PIE2 equ 0475h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMA4SCNTIE             :1;
        unsigned DMA4DCNTIE             :1;
        unsigned DMA4ORIE               :1;
        unsigned DMA4AIE                :1;
        unsigned NVMIE                  :1;
        unsigned CRCIE                  :1;
        unsigned SCANIE                 :1;
        unsigned ACTIE                  :1;
    };
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits __at(0x475);
// bitfield macros
#define _PIE2_DMA4SCNTIE_POSN                               0x0
#define _PIE2_DMA4SCNTIE_POSITION                           0x0
#define _PIE2_DMA4SCNTIE_SIZE                               0x1
#define _PIE2_DMA4SCNTIE_LENGTH                             0x1
#define _PIE2_DMA4SCNTIE_MASK                               0x1
#define _PIE2_DMA4DCNTIE_POSN                               0x1
#define _PIE2_DMA4DCNTIE_POSITION                           0x1
#define _PIE2_DMA4DCNTIE_SIZE                               0x1
#define _PIE2_DMA4DCNTIE_LENGTH                             0x1
#define _PIE2_DMA4DCNTIE_MASK                               0x2
#define _PIE2_DMA4ORIE_POSN                                 0x2
#define _PIE2_DMA4ORIE_POSITION                             0x2
#define _PIE2_DMA4ORIE_SIZE                                 0x1
#define _PIE2_DMA4ORIE_LENGTH                               0x1
#define _PIE2_DMA4ORIE_MASK                                 0x4
#define _PIE2_DMA4AIE_POSN                                  0x3
#define _PIE2_DMA4AIE_POSITION                              0x3
#define _PIE2_DMA4AIE_SIZE                                  0x1
#define _PIE2_DMA4AIE_LENGTH                                0x1
#define _PIE2_DMA4AIE_MASK                                  0x8
#define _PIE2_NVMIE_POSN                                    0x4
#define _PIE2_NVMIE_POSITION                                0x4
#define _PIE2_NVMIE_SIZE                                    0x1
#define _PIE2_NVMIE_LENGTH                                  0x1
#define _PIE2_NVMIE_MASK                                    0x10
#define _PIE2_CRCIE_POSN                                    0x5
#define _PIE2_CRCIE_POSITION                                0x5
#define _PIE2_CRCIE_SIZE                                    0x1
#define _PIE2_CRCIE_LENGTH                                  0x1
#define _PIE2_CRCIE_MASK                                    0x20
#define _PIE2_SCANIE_POSN                                   0x6
#define _PIE2_SCANIE_POSITION                               0x6
#define _PIE2_SCANIE_SIZE                                   0x1
#define _PIE2_SCANIE_LENGTH                                 0x1
#define _PIE2_SCANIE_MASK                                   0x40
#define _PIE2_ACTIE_POSN                                    0x7
#define _PIE2_ACTIE_POSITION                                0x7
#define _PIE2_ACTIE_SIZE                                    0x1
#define _PIE2_ACTIE_LENGTH                                  0x1
#define _PIE2_ACTIE_MASK                                    0x80

// Register: PIE3
#define PIE3 PIE3
extern volatile unsigned char           PIE3                __at(0x476);
#ifndef _LIB_BUILD
asm("PIE3 equ 0476h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CSWIE                  :1;
        unsigned OSFIE                  :1;
        unsigned VDDIO2IE               :1;
        unsigned                        :1;
        unsigned IOCIE                  :1;
        unsigned TMR0IE                 :1;
        unsigned TMR1IE                 :1;
        unsigned TMR1GIE                :1;
    };
} PIE3bits_t;
extern volatile PIE3bits_t PIE3bits __at(0x476);
// bitfield macros
#define _PIE3_CSWIE_POSN                                    0x0
#define _PIE3_CSWIE_POSITION                                0x0
#define _PIE3_CSWIE_SIZE                                    0x1
#define _PIE3_CSWIE_LENGTH                                  0x1
#define _PIE3_CSWIE_MASK                                    0x1
#define _PIE3_OSFIE_POSN                                    0x1
#define _PIE3_OSFIE_POSITION                                0x1
#define _PIE3_OSFIE_SIZE                                    0x1
#define _PIE3_OSFIE_LENGTH                                  0x1
#define _PIE3_OSFIE_MASK                                    0x2
#define _PIE3_VDDIO2IE_POSN                                 0x2
#define _PIE3_VDDIO2IE_POSITION                             0x2
#define _PIE3_VDDIO2IE_SIZE                                 0x1
#define _PIE3_VDDIO2IE_LENGTH                               0x1
#define _PIE3_VDDIO2IE_MASK                                 0x4
#define _PIE3_IOCIE_POSN                                    0x4
#define _PIE3_IOCIE_POSITION                                0x4
#define _PIE3_IOCIE_SIZE                                    0x1
#define _PIE3_IOCIE_LENGTH                                  0x1
#define _PIE3_IOCIE_MASK                                    0x10
#define _PIE3_TMR0IE_POSN                                   0x5
#define _PIE3_TMR0IE_POSITION                               0x5
#define _PIE3_TMR0IE_SIZE                                   0x1
#define _PIE3_TMR0IE_LENGTH                                 0x1
#define _PIE3_TMR0IE_MASK                                   0x20
#define _PIE3_TMR1IE_POSN                                   0x6
#define _PIE3_TMR1IE_POSITION                               0x6
#define _PIE3_TMR1IE_SIZE                                   0x1
#define _PIE3_TMR1IE_LENGTH                                 0x1
#define _PIE3_TMR1IE_MASK                                   0x40
#define _PIE3_TMR1GIE_POSN                                  0x7
#define _PIE3_TMR1GIE_POSITION                              0x7
#define _PIE3_TMR1GIE_SIZE                                  0x1
#define _PIE3_TMR1GIE_LENGTH                                0x1
#define _PIE3_TMR1GIE_MASK                                  0x80

// Register: PIE4
#define PIE4 PIE4
extern volatile unsigned char           PIE4                __at(0x477);
#ifndef _LIB_BUILD
asm("PIE4 equ 0477h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR2IE                 :1;
        unsigned TMR4IE                 :1;
        unsigned TU16AIE                :1;
        unsigned TU16BIE                :1;
        unsigned CCP1IE                 :1;
        unsigned CCP2IE                 :1;
        unsigned PWM1PIE                :1;
        unsigned PWM1IE                 :1;
    };
} PIE4bits_t;
extern volatile PIE4bits_t PIE4bits __at(0x477);
// bitfield macros
#define _PIE4_TMR2IE_POSN                                   0x0
#define _PIE4_TMR2IE_POSITION                               0x0
#define _PIE4_TMR2IE_SIZE                                   0x1
#define _PIE4_TMR2IE_LENGTH                                 0x1
#define _PIE4_TMR2IE_MASK                                   0x1
#define _PIE4_TMR4IE_POSN                                   0x1
#define _PIE4_TMR4IE_POSITION                               0x1
#define _PIE4_TMR4IE_SIZE                                   0x1
#define _PIE4_TMR4IE_LENGTH                                 0x1
#define _PIE4_TMR4IE_MASK                                   0x2
#define _PIE4_TU16AIE_POSN                                  0x2
#define _PIE4_TU16AIE_POSITION                              0x2
#define _PIE4_TU16AIE_SIZE                                  0x1
#define _PIE4_TU16AIE_LENGTH                                0x1
#define _PIE4_TU16AIE_MASK                                  0x4
#define _PIE4_TU16BIE_POSN                                  0x3
#define _PIE4_TU16BIE_POSITION                              0x3
#define _PIE4_TU16BIE_SIZE                                  0x1
#define _PIE4_TU16BIE_LENGTH                                0x1
#define _PIE4_TU16BIE_MASK                                  0x8
#define _PIE4_CCP1IE_POSN                                   0x4
#define _PIE4_CCP1IE_POSITION                               0x4
#define _PIE4_CCP1IE_SIZE                                   0x1
#define _PIE4_CCP1IE_LENGTH                                 0x1
#define _PIE4_CCP1IE_MASK                                   0x10
#define _PIE4_CCP2IE_POSN                                   0x5
#define _PIE4_CCP2IE_POSITION                               0x5
#define _PIE4_CCP2IE_SIZE                                   0x1
#define _PIE4_CCP2IE_LENGTH                                 0x1
#define _PIE4_CCP2IE_MASK                                   0x20
#define _PIE4_PWM1PIE_POSN                                  0x6
#define _PIE4_PWM1PIE_POSITION                              0x6
#define _PIE4_PWM1PIE_SIZE                                  0x1
#define _PIE4_PWM1PIE_LENGTH                                0x1
#define _PIE4_PWM1PIE_MASK                                  0x40
#define _PIE4_PWM1IE_POSN                                   0x7
#define _PIE4_PWM1IE_POSITION                               0x7
#define _PIE4_PWM1IE_SIZE                                   0x1
#define _PIE4_PWM1IE_LENGTH                                 0x1
#define _PIE4_PWM1IE_MASK                                   0x80

// Register: PIE5
#define PIE5 PIE5
extern volatile unsigned char           PIE5                __at(0x478);
#ifndef _LIB_BUILD
asm("PIE5 equ 0478h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PWM2PIE                :1;
        unsigned PWM2IE                 :1;
        unsigned CWG1IE                 :1;
        unsigned CLC1IE                 :1;
        unsigned CLC2IE                 :1;
        unsigned CLC3IE                 :1;
        unsigned CLC4IE                 :1;
        unsigned IOCSRIE                :1;
    };
} PIE5bits_t;
extern volatile PIE5bits_t PIE5bits __at(0x478);
// bitfield macros
#define _PIE5_PWM2PIE_POSN                                  0x0
#define _PIE5_PWM2PIE_POSITION                              0x0
#define _PIE5_PWM2PIE_SIZE                                  0x1
#define _PIE5_PWM2PIE_LENGTH                                0x1
#define _PIE5_PWM2PIE_MASK                                  0x1
#define _PIE5_PWM2IE_POSN                                   0x1
#define _PIE5_PWM2IE_POSITION                               0x1
#define _PIE5_PWM2IE_SIZE                                   0x1
#define _PIE5_PWM2IE_LENGTH                                 0x1
#define _PIE5_PWM2IE_MASK                                   0x2
#define _PIE5_CWG1IE_POSN                                   0x2
#define _PIE5_CWG1IE_POSITION                               0x2
#define _PIE5_CWG1IE_SIZE                                   0x1
#define _PIE5_CWG1IE_LENGTH                                 0x1
#define _PIE5_CWG1IE_MASK                                   0x4
#define _PIE5_CLC1IE_POSN                                   0x3
#define _PIE5_CLC1IE_POSITION                               0x3
#define _PIE5_CLC1IE_SIZE                                   0x1
#define _PIE5_CLC1IE_LENGTH                                 0x1
#define _PIE5_CLC1IE_MASK                                   0x8
#define _PIE5_CLC2IE_POSN                                   0x4
#define _PIE5_CLC2IE_POSITION                               0x4
#define _PIE5_CLC2IE_SIZE                                   0x1
#define _PIE5_CLC2IE_LENGTH                                 0x1
#define _PIE5_CLC2IE_MASK                                   0x10
#define _PIE5_CLC3IE_POSN                                   0x5
#define _PIE5_CLC3IE_POSITION                               0x5
#define _PIE5_CLC3IE_SIZE                                   0x1
#define _PIE5_CLC3IE_LENGTH                                 0x1
#define _PIE5_CLC3IE_MASK                                   0x20
#define _PIE5_CLC4IE_POSN                                   0x6
#define _PIE5_CLC4IE_POSITION                               0x6
#define _PIE5_CLC4IE_SIZE                                   0x1
#define _PIE5_CLC4IE_LENGTH                                 0x1
#define _PIE5_CLC4IE_MASK                                   0x40
#define _PIE5_IOCSRIE_POSN                                  0x7
#define _PIE5_IOCSRIE_POSITION                              0x7
#define _PIE5_IOCSRIE_SIZE                                  0x1
#define _PIE5_IOCSRIE_LENGTH                                0x1
#define _PIE5_IOCSRIE_MASK                                  0x80

// Register: PIE6
#define PIE6 PIE6
extern volatile unsigned char           PIE6                __at(0x479);
#ifndef _LIB_BUILD
asm("PIE6 equ 0479h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U1RXIE                 :1;
        unsigned U1TXIE                 :1;
        unsigned U1IE                   :1;
        unsigned U1EIE                  :1;
        unsigned U2RXIE                 :1;
        unsigned U2TXIE                 :1;
        unsigned U2IE                   :1;
        unsigned U2EIE                  :1;
    };
} PIE6bits_t;
extern volatile PIE6bits_t PIE6bits __at(0x479);
// bitfield macros
#define _PIE6_U1RXIE_POSN                                   0x0
#define _PIE6_U1RXIE_POSITION                               0x0
#define _PIE6_U1RXIE_SIZE                                   0x1
#define _PIE6_U1RXIE_LENGTH                                 0x1
#define _PIE6_U1RXIE_MASK                                   0x1
#define _PIE6_U1TXIE_POSN                                   0x1
#define _PIE6_U1TXIE_POSITION                               0x1
#define _PIE6_U1TXIE_SIZE                                   0x1
#define _PIE6_U1TXIE_LENGTH                                 0x1
#define _PIE6_U1TXIE_MASK                                   0x2
#define _PIE6_U1IE_POSN                                     0x2
#define _PIE6_U1IE_POSITION                                 0x2
#define _PIE6_U1IE_SIZE                                     0x1
#define _PIE6_U1IE_LENGTH                                   0x1
#define _PIE6_U1IE_MASK                                     0x4
#define _PIE6_U1EIE_POSN                                    0x3
#define _PIE6_U1EIE_POSITION                                0x3
#define _PIE6_U1EIE_SIZE                                    0x1
#define _PIE6_U1EIE_LENGTH                                  0x1
#define _PIE6_U1EIE_MASK                                    0x8
#define _PIE6_U2RXIE_POSN                                   0x4
#define _PIE6_U2RXIE_POSITION                               0x4
#define _PIE6_U2RXIE_SIZE                                   0x1
#define _PIE6_U2RXIE_LENGTH                                 0x1
#define _PIE6_U2RXIE_MASK                                   0x10
#define _PIE6_U2TXIE_POSN                                   0x5
#define _PIE6_U2TXIE_POSITION                               0x5
#define _PIE6_U2TXIE_SIZE                                   0x1
#define _PIE6_U2TXIE_LENGTH                                 0x1
#define _PIE6_U2TXIE_MASK                                   0x20
#define _PIE6_U2IE_POSN                                     0x6
#define _PIE6_U2IE_POSITION                                 0x6
#define _PIE6_U2IE_SIZE                                     0x1
#define _PIE6_U2IE_LENGTH                                   0x1
#define _PIE6_U2IE_MASK                                     0x40
#define _PIE6_U2EIE_POSN                                    0x7
#define _PIE6_U2EIE_POSITION                                0x7
#define _PIE6_U2EIE_SIZE                                    0x1
#define _PIE6_U2EIE_LENGTH                                  0x1
#define _PIE6_U2EIE_MASK                                    0x80

// Register: PIE7
#define PIE7 PIE7
extern volatile unsigned char           PIE7                __at(0x47A);
#ifndef _LIB_BUILD
asm("PIE7 equ 047Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPI1RXIE               :1;
        unsigned SPI1TXIE               :1;
        unsigned SPI1IE                 :1;
        unsigned I2C1RXIE               :1;
        unsigned I2C1TXIE               :1;
        unsigned I2C1IE                 :1;
        unsigned I2C1EIE                :1;
    };
} PIE7bits_t;
extern volatile PIE7bits_t PIE7bits __at(0x47A);
// bitfield macros
#define _PIE7_SPI1RXIE_POSN                                 0x0
#define _PIE7_SPI1RXIE_POSITION                             0x0
#define _PIE7_SPI1RXIE_SIZE                                 0x1
#define _PIE7_SPI1RXIE_LENGTH                               0x1
#define _PIE7_SPI1RXIE_MASK                                 0x1
#define _PIE7_SPI1TXIE_POSN                                 0x1
#define _PIE7_SPI1TXIE_POSITION                             0x1
#define _PIE7_SPI1TXIE_SIZE                                 0x1
#define _PIE7_SPI1TXIE_LENGTH                               0x1
#define _PIE7_SPI1TXIE_MASK                                 0x2
#define _PIE7_SPI1IE_POSN                                   0x2
#define _PIE7_SPI1IE_POSITION                               0x2
#define _PIE7_SPI1IE_SIZE                                   0x1
#define _PIE7_SPI1IE_LENGTH                                 0x1
#define _PIE7_SPI1IE_MASK                                   0x4
#define _PIE7_I2C1RXIE_POSN                                 0x3
#define _PIE7_I2C1RXIE_POSITION                             0x3
#define _PIE7_I2C1RXIE_SIZE                                 0x1
#define _PIE7_I2C1RXIE_LENGTH                               0x1
#define _PIE7_I2C1RXIE_MASK                                 0x8
#define _PIE7_I2C1TXIE_POSN                                 0x4
#define _PIE7_I2C1TXIE_POSITION                             0x4
#define _PIE7_I2C1TXIE_SIZE                                 0x1
#define _PIE7_I2C1TXIE_LENGTH                               0x1
#define _PIE7_I2C1TXIE_MASK                                 0x10
#define _PIE7_I2C1IE_POSN                                   0x5
#define _PIE7_I2C1IE_POSITION                               0x5
#define _PIE7_I2C1IE_SIZE                                   0x1
#define _PIE7_I2C1IE_LENGTH                                 0x1
#define _PIE7_I2C1IE_MASK                                   0x20
#define _PIE7_I2C1EIE_POSN                                  0x6
#define _PIE7_I2C1EIE_POSITION                              0x6
#define _PIE7_I2C1EIE_SIZE                                  0x1
#define _PIE7_I2C1EIE_LENGTH                                0x1
#define _PIE7_I2C1EIE_MASK                                  0x40

// Register: PIE8
#define PIE8 PIE8
extern volatile unsigned char           PIE8                __at(0x47B);
#ifndef _LIB_BUILD
asm("PIE8 equ 047Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I3C1RXIE               :1;
        unsigned I3C1TXIE               :1;
        unsigned I3C1IE                 :1;
        unsigned I3C1EIE                :1;
        unsigned I3C1RIE                :1;
    };
} PIE8bits_t;
extern volatile PIE8bits_t PIE8bits __at(0x47B);
// bitfield macros
#define _PIE8_I3C1RXIE_POSN                                 0x0
#define _PIE8_I3C1RXIE_POSITION                             0x0
#define _PIE8_I3C1RXIE_SIZE                                 0x1
#define _PIE8_I3C1RXIE_LENGTH                               0x1
#define _PIE8_I3C1RXIE_MASK                                 0x1
#define _PIE8_I3C1TXIE_POSN                                 0x1
#define _PIE8_I3C1TXIE_POSITION                             0x1
#define _PIE8_I3C1TXIE_SIZE                                 0x1
#define _PIE8_I3C1TXIE_LENGTH                               0x1
#define _PIE8_I3C1TXIE_MASK                                 0x2
#define _PIE8_I3C1IE_POSN                                   0x2
#define _PIE8_I3C1IE_POSITION                               0x2
#define _PIE8_I3C1IE_SIZE                                   0x1
#define _PIE8_I3C1IE_LENGTH                                 0x1
#define _PIE8_I3C1IE_MASK                                   0x4
#define _PIE8_I3C1EIE_POSN                                  0x3
#define _PIE8_I3C1EIE_POSITION                              0x3
#define _PIE8_I3C1EIE_SIZE                                  0x1
#define _PIE8_I3C1EIE_LENGTH                                0x1
#define _PIE8_I3C1EIE_MASK                                  0x8
#define _PIE8_I3C1RIE_POSN                                  0x4
#define _PIE8_I3C1RIE_POSITION                              0x4
#define _PIE8_I3C1RIE_SIZE                                  0x1
#define _PIE8_I3C1RIE_LENGTH                                0x1
#define _PIE8_I3C1RIE_MASK                                  0x10

// Register: PIE9
#define PIE9 PIE9
extern volatile unsigned char           PIE9                __at(0x47C);
#ifndef _LIB_BUILD
asm("PIE9 equ 047Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned HLVDIE                 :1;
        unsigned ADIE                   :1;
        unsigned ADTIE                  :1;
    };
} PIE9bits_t;
extern volatile PIE9bits_t PIE9bits __at(0x47C);
// bitfield macros
#define _PIE9_HLVDIE_POSN                                   0x5
#define _PIE9_HLVDIE_POSITION                               0x5
#define _PIE9_HLVDIE_SIZE                                   0x1
#define _PIE9_HLVDIE_LENGTH                                 0x1
#define _PIE9_HLVDIE_MASK                                   0x20
#define _PIE9_ADIE_POSN                                     0x6
#define _PIE9_ADIE_POSITION                                 0x6
#define _PIE9_ADIE_SIZE                                     0x1
#define _PIE9_ADIE_LENGTH                                   0x1
#define _PIE9_ADIE_MASK                                     0x40
#define _PIE9_ADTIE_POSN                                    0x7
#define _PIE9_ADTIE_POSITION                                0x7
#define _PIE9_ADTIE_SIZE                                    0x1
#define _PIE9_ADTIE_LENGTH                                  0x1
#define _PIE9_ADTIE_MASK                                    0x80

// Register: IPR0
#define IPR0 IPR0
extern volatile unsigned char           IPR0                __at(0x47D);
#ifndef _LIB_BUILD
asm("IPR0 equ 047Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SWIP                   :1;
        unsigned INT0IP                 :1;
        unsigned INT1IP                 :1;
        unsigned INT2IP                 :1;
        unsigned DMA1SCNTIP             :1;
        unsigned DMA1DCNTIP             :1;
        unsigned DMA1ORIP               :1;
        unsigned DMA1AIP                :1;
    };
} IPR0bits_t;
extern volatile IPR0bits_t IPR0bits __at(0x47D);
// bitfield macros
#define _IPR0_SWIP_POSN                                     0x0
#define _IPR0_SWIP_POSITION                                 0x0
#define _IPR0_SWIP_SIZE                                     0x1
#define _IPR0_SWIP_LENGTH                                   0x1
#define _IPR0_SWIP_MASK                                     0x1
#define _IPR0_INT0IP_POSN                                   0x1
#define _IPR0_INT0IP_POSITION                               0x1
#define _IPR0_INT0IP_SIZE                                   0x1
#define _IPR0_INT0IP_LENGTH                                 0x1
#define _IPR0_INT0IP_MASK                                   0x2
#define _IPR0_INT1IP_POSN                                   0x2
#define _IPR0_INT1IP_POSITION                               0x2
#define _IPR0_INT1IP_SIZE                                   0x1
#define _IPR0_INT1IP_LENGTH                                 0x1
#define _IPR0_INT1IP_MASK                                   0x4
#define _IPR0_INT2IP_POSN                                   0x3
#define _IPR0_INT2IP_POSITION                               0x3
#define _IPR0_INT2IP_SIZE                                   0x1
#define _IPR0_INT2IP_LENGTH                                 0x1
#define _IPR0_INT2IP_MASK                                   0x8
#define _IPR0_DMA1SCNTIP_POSN                               0x4
#define _IPR0_DMA1SCNTIP_POSITION                           0x4
#define _IPR0_DMA1SCNTIP_SIZE                               0x1
#define _IPR0_DMA1SCNTIP_LENGTH                             0x1
#define _IPR0_DMA1SCNTIP_MASK                               0x10
#define _IPR0_DMA1DCNTIP_POSN                               0x5
#define _IPR0_DMA1DCNTIP_POSITION                           0x5
#define _IPR0_DMA1DCNTIP_SIZE                               0x1
#define _IPR0_DMA1DCNTIP_LENGTH                             0x1
#define _IPR0_DMA1DCNTIP_MASK                               0x20
#define _IPR0_DMA1ORIP_POSN                                 0x6
#define _IPR0_DMA1ORIP_POSITION                             0x6
#define _IPR0_DMA1ORIP_SIZE                                 0x1
#define _IPR0_DMA1ORIP_LENGTH                               0x1
#define _IPR0_DMA1ORIP_MASK                                 0x40
#define _IPR0_DMA1AIP_POSN                                  0x7
#define _IPR0_DMA1AIP_POSITION                              0x7
#define _IPR0_DMA1AIP_SIZE                                  0x1
#define _IPR0_DMA1AIP_LENGTH                                0x1
#define _IPR0_DMA1AIP_MASK                                  0x80

// Register: IPR1
#define IPR1 IPR1
extern volatile unsigned char           IPR1                __at(0x47E);
#ifndef _LIB_BUILD
asm("IPR1 equ 047Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMA2SCNTIP             :1;
        unsigned DMA2DCNTIP             :1;
        unsigned DMA2ORIP               :1;
        unsigned DMA2AIP                :1;
        unsigned DMA3SCNTIP             :1;
        unsigned DMA3DCNTIP             :1;
        unsigned DMA3ORIP               :1;
        unsigned DMA3AIP                :1;
    };
} IPR1bits_t;
extern volatile IPR1bits_t IPR1bits __at(0x47E);
// bitfield macros
#define _IPR1_DMA2SCNTIP_POSN                               0x0
#define _IPR1_DMA2SCNTIP_POSITION                           0x0
#define _IPR1_DMA2SCNTIP_SIZE                               0x1
#define _IPR1_DMA2SCNTIP_LENGTH                             0x1
#define _IPR1_DMA2SCNTIP_MASK                               0x1
#define _IPR1_DMA2DCNTIP_POSN                               0x1
#define _IPR1_DMA2DCNTIP_POSITION                           0x1
#define _IPR1_DMA2DCNTIP_SIZE                               0x1
#define _IPR1_DMA2DCNTIP_LENGTH                             0x1
#define _IPR1_DMA2DCNTIP_MASK                               0x2
#define _IPR1_DMA2ORIP_POSN                                 0x2
#define _IPR1_DMA2ORIP_POSITION                             0x2
#define _IPR1_DMA2ORIP_SIZE                                 0x1
#define _IPR1_DMA2ORIP_LENGTH                               0x1
#define _IPR1_DMA2ORIP_MASK                                 0x4
#define _IPR1_DMA2AIP_POSN                                  0x3
#define _IPR1_DMA2AIP_POSITION                              0x3
#define _IPR1_DMA2AIP_SIZE                                  0x1
#define _IPR1_DMA2AIP_LENGTH                                0x1
#define _IPR1_DMA2AIP_MASK                                  0x8
#define _IPR1_DMA3SCNTIP_POSN                               0x4
#define _IPR1_DMA3SCNTIP_POSITION                           0x4
#define _IPR1_DMA3SCNTIP_SIZE                               0x1
#define _IPR1_DMA3SCNTIP_LENGTH                             0x1
#define _IPR1_DMA3SCNTIP_MASK                               0x10
#define _IPR1_DMA3DCNTIP_POSN                               0x5
#define _IPR1_DMA3DCNTIP_POSITION                           0x5
#define _IPR1_DMA3DCNTIP_SIZE                               0x1
#define _IPR1_DMA3DCNTIP_LENGTH                             0x1
#define _IPR1_DMA3DCNTIP_MASK                               0x20
#define _IPR1_DMA3ORIP_POSN                                 0x6
#define _IPR1_DMA3ORIP_POSITION                             0x6
#define _IPR1_DMA3ORIP_SIZE                                 0x1
#define _IPR1_DMA3ORIP_LENGTH                               0x1
#define _IPR1_DMA3ORIP_MASK                                 0x40
#define _IPR1_DMA3AIP_POSN                                  0x7
#define _IPR1_DMA3AIP_POSITION                              0x7
#define _IPR1_DMA3AIP_SIZE                                  0x1
#define _IPR1_DMA3AIP_LENGTH                                0x1
#define _IPR1_DMA3AIP_MASK                                  0x80

// Register: IPR2
#define IPR2 IPR2
extern volatile unsigned char           IPR2                __at(0x47F);
#ifndef _LIB_BUILD
asm("IPR2 equ 047Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DMA4SCNTIP             :1;
        unsigned DMA4DCNTIP             :1;
        unsigned DMA4ORIP               :1;
        unsigned DMA4AIP                :1;
        unsigned NVMIP                  :1;
        unsigned CRCIP                  :1;
        unsigned SCANIP                 :1;
        unsigned ACTIP                  :1;
    };
} IPR2bits_t;
extern volatile IPR2bits_t IPR2bits __at(0x47F);
// bitfield macros
#define _IPR2_DMA4SCNTIP_POSN                               0x0
#define _IPR2_DMA4SCNTIP_POSITION                           0x0
#define _IPR2_DMA4SCNTIP_SIZE                               0x1
#define _IPR2_DMA4SCNTIP_LENGTH                             0x1
#define _IPR2_DMA4SCNTIP_MASK                               0x1
#define _IPR2_DMA4DCNTIP_POSN                               0x1
#define _IPR2_DMA4DCNTIP_POSITION                           0x1
#define _IPR2_DMA4DCNTIP_SIZE                               0x1
#define _IPR2_DMA4DCNTIP_LENGTH                             0x1
#define _IPR2_DMA4DCNTIP_MASK                               0x2
#define _IPR2_DMA4ORIP_POSN                                 0x2
#define _IPR2_DMA4ORIP_POSITION                             0x2
#define _IPR2_DMA4ORIP_SIZE                                 0x1
#define _IPR2_DMA4ORIP_LENGTH                               0x1
#define _IPR2_DMA4ORIP_MASK                                 0x4
#define _IPR2_DMA4AIP_POSN                                  0x3
#define _IPR2_DMA4AIP_POSITION                              0x3
#define _IPR2_DMA4AIP_SIZE                                  0x1
#define _IPR2_DMA4AIP_LENGTH                                0x1
#define _IPR2_DMA4AIP_MASK                                  0x8
#define _IPR2_NVMIP_POSN                                    0x4
#define _IPR2_NVMIP_POSITION                                0x4
#define _IPR2_NVMIP_SIZE                                    0x1
#define _IPR2_NVMIP_LENGTH                                  0x1
#define _IPR2_NVMIP_MASK                                    0x10
#define _IPR2_CRCIP_POSN                                    0x5
#define _IPR2_CRCIP_POSITION                                0x5
#define _IPR2_CRCIP_SIZE                                    0x1
#define _IPR2_CRCIP_LENGTH                                  0x1
#define _IPR2_CRCIP_MASK                                    0x20
#define _IPR2_SCANIP_POSN                                   0x6
#define _IPR2_SCANIP_POSITION                               0x6
#define _IPR2_SCANIP_SIZE                                   0x1
#define _IPR2_SCANIP_LENGTH                                 0x1
#define _IPR2_SCANIP_MASK                                   0x40
#define _IPR2_ACTIP_POSN                                    0x7
#define _IPR2_ACTIP_POSITION                                0x7
#define _IPR2_ACTIP_SIZE                                    0x1
#define _IPR2_ACTIP_LENGTH                                  0x1
#define _IPR2_ACTIP_MASK                                    0x80

// Register: IPR3
#define IPR3 IPR3
extern volatile unsigned char           IPR3                __at(0x480);
#ifndef _LIB_BUILD
asm("IPR3 equ 0480h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CSWIP                  :1;
        unsigned OSFIP                  :1;
        unsigned VDDIO2IP               :1;
        unsigned                        :1;
        unsigned IOCIP                  :1;
        unsigned TMR0IP                 :1;
        unsigned TMR1IP                 :1;
        unsigned TMR1GIP                :1;
    };
} IPR3bits_t;
extern volatile IPR3bits_t IPR3bits __at(0x480);
// bitfield macros
#define _IPR3_CSWIP_POSN                                    0x0
#define _IPR3_CSWIP_POSITION                                0x0
#define _IPR3_CSWIP_SIZE                                    0x1
#define _IPR3_CSWIP_LENGTH                                  0x1
#define _IPR3_CSWIP_MASK                                    0x1
#define _IPR3_OSFIP_POSN                                    0x1
#define _IPR3_OSFIP_POSITION                                0x1
#define _IPR3_OSFIP_SIZE                                    0x1
#define _IPR3_OSFIP_LENGTH                                  0x1
#define _IPR3_OSFIP_MASK                                    0x2
#define _IPR3_VDDIO2IP_POSN                                 0x2
#define _IPR3_VDDIO2IP_POSITION                             0x2
#define _IPR3_VDDIO2IP_SIZE                                 0x1
#define _IPR3_VDDIO2IP_LENGTH                               0x1
#define _IPR3_VDDIO2IP_MASK                                 0x4
#define _IPR3_IOCIP_POSN                                    0x4
#define _IPR3_IOCIP_POSITION                                0x4
#define _IPR3_IOCIP_SIZE                                    0x1
#define _IPR3_IOCIP_LENGTH                                  0x1
#define _IPR3_IOCIP_MASK                                    0x10
#define _IPR3_TMR0IP_POSN                                   0x5
#define _IPR3_TMR0IP_POSITION                               0x5
#define _IPR3_TMR0IP_SIZE                                   0x1
#define _IPR3_TMR0IP_LENGTH                                 0x1
#define _IPR3_TMR0IP_MASK                                   0x20
#define _IPR3_TMR1IP_POSN                                   0x6
#define _IPR3_TMR1IP_POSITION                               0x6
#define _IPR3_TMR1IP_SIZE                                   0x1
#define _IPR3_TMR1IP_LENGTH                                 0x1
#define _IPR3_TMR1IP_MASK                                   0x40
#define _IPR3_TMR1GIP_POSN                                  0x7
#define _IPR3_TMR1GIP_POSITION                              0x7
#define _IPR3_TMR1GIP_SIZE                                  0x1
#define _IPR3_TMR1GIP_LENGTH                                0x1
#define _IPR3_TMR1GIP_MASK                                  0x80

// Register: IPR4
#define IPR4 IPR4
extern volatile unsigned char           IPR4                __at(0x481);
#ifndef _LIB_BUILD
asm("IPR4 equ 0481h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TMR2IP                 :1;
        unsigned TMR4IP                 :1;
        unsigned TU16AIP                :1;
        unsigned TU16BIP                :1;
        unsigned CCP1IP                 :1;
        unsigned CCP2IP                 :1;
        unsigned PWM1PIP                :1;
        unsigned PWM1IP                 :1;
    };
} IPR4bits_t;
extern volatile IPR4bits_t IPR4bits __at(0x481);
// bitfield macros
#define _IPR4_TMR2IP_POSN                                   0x0
#define _IPR4_TMR2IP_POSITION                               0x0
#define _IPR4_TMR2IP_SIZE                                   0x1
#define _IPR4_TMR2IP_LENGTH                                 0x1
#define _IPR4_TMR2IP_MASK                                   0x1
#define _IPR4_TMR4IP_POSN                                   0x1
#define _IPR4_TMR4IP_POSITION                               0x1
#define _IPR4_TMR4IP_SIZE                                   0x1
#define _IPR4_TMR4IP_LENGTH                                 0x1
#define _IPR4_TMR4IP_MASK                                   0x2
#define _IPR4_TU16AIP_POSN                                  0x2
#define _IPR4_TU16AIP_POSITION                              0x2
#define _IPR4_TU16AIP_SIZE                                  0x1
#define _IPR4_TU16AIP_LENGTH                                0x1
#define _IPR4_TU16AIP_MASK                                  0x4
#define _IPR4_TU16BIP_POSN                                  0x3
#define _IPR4_TU16BIP_POSITION                              0x3
#define _IPR4_TU16BIP_SIZE                                  0x1
#define _IPR4_TU16BIP_LENGTH                                0x1
#define _IPR4_TU16BIP_MASK                                  0x8
#define _IPR4_CCP1IP_POSN                                   0x4
#define _IPR4_CCP1IP_POSITION                               0x4
#define _IPR4_CCP1IP_SIZE                                   0x1
#define _IPR4_CCP1IP_LENGTH                                 0x1
#define _IPR4_CCP1IP_MASK                                   0x10
#define _IPR4_CCP2IP_POSN                                   0x5
#define _IPR4_CCP2IP_POSITION                               0x5
#define _IPR4_CCP2IP_SIZE                                   0x1
#define _IPR4_CCP2IP_LENGTH                                 0x1
#define _IPR4_CCP2IP_MASK                                   0x20
#define _IPR4_PWM1PIP_POSN                                  0x6
#define _IPR4_PWM1PIP_POSITION                              0x6
#define _IPR4_PWM1PIP_SIZE                                  0x1
#define _IPR4_PWM1PIP_LENGTH                                0x1
#define _IPR4_PWM1PIP_MASK                                  0x40
#define _IPR4_PWM1IP_POSN                                   0x7
#define _IPR4_PWM1IP_POSITION                               0x7
#define _IPR4_PWM1IP_SIZE                                   0x1
#define _IPR4_PWM1IP_LENGTH                                 0x1
#define _IPR4_PWM1IP_MASK                                   0x80

// Register: IPR5
#define IPR5 IPR5
extern volatile unsigned char           IPR5                __at(0x482);
#ifndef _LIB_BUILD
asm("IPR5 equ 0482h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PWM2PIP                :1;
        unsigned PWM2IP                 :1;
        unsigned CWG1IP                 :1;
        unsigned CLC1IP                 :1;
        unsigned CLC2IP                 :1;
        unsigned CLC3IP                 :1;
        unsigned CLC4IP                 :1;
        unsigned IOCSRIP                :1;
    };
} IPR5bits_t;
extern volatile IPR5bits_t IPR5bits __at(0x482);
// bitfield macros
#define _IPR5_PWM2PIP_POSN                                  0x0
#define _IPR5_PWM2PIP_POSITION                              0x0
#define _IPR5_PWM2PIP_SIZE                                  0x1
#define _IPR5_PWM2PIP_LENGTH                                0x1
#define _IPR5_PWM2PIP_MASK                                  0x1
#define _IPR5_PWM2IP_POSN                                   0x1
#define _IPR5_PWM2IP_POSITION                               0x1
#define _IPR5_PWM2IP_SIZE                                   0x1
#define _IPR5_PWM2IP_LENGTH                                 0x1
#define _IPR5_PWM2IP_MASK                                   0x2
#define _IPR5_CWG1IP_POSN                                   0x2
#define _IPR5_CWG1IP_POSITION                               0x2
#define _IPR5_CWG1IP_SIZE                                   0x1
#define _IPR5_CWG1IP_LENGTH                                 0x1
#define _IPR5_CWG1IP_MASK                                   0x4
#define _IPR5_CLC1IP_POSN                                   0x3
#define _IPR5_CLC1IP_POSITION                               0x3
#define _IPR5_CLC1IP_SIZE                                   0x1
#define _IPR5_CLC1IP_LENGTH                                 0x1
#define _IPR5_CLC1IP_MASK                                   0x8
#define _IPR5_CLC2IP_POSN                                   0x4
#define _IPR5_CLC2IP_POSITION                               0x4
#define _IPR5_CLC2IP_SIZE                                   0x1
#define _IPR5_CLC2IP_LENGTH                                 0x1
#define _IPR5_CLC2IP_MASK                                   0x10
#define _IPR5_CLC3IP_POSN                                   0x5
#define _IPR5_CLC3IP_POSITION                               0x5
#define _IPR5_CLC3IP_SIZE                                   0x1
#define _IPR5_CLC3IP_LENGTH                                 0x1
#define _IPR5_CLC3IP_MASK                                   0x20
#define _IPR5_CLC4IP_POSN                                   0x6
#define _IPR5_CLC4IP_POSITION                               0x6
#define _IPR5_CLC4IP_SIZE                                   0x1
#define _IPR5_CLC4IP_LENGTH                                 0x1
#define _IPR5_CLC4IP_MASK                                   0x40
#define _IPR5_IOCSRIP_POSN                                  0x7
#define _IPR5_IOCSRIP_POSITION                              0x7
#define _IPR5_IOCSRIP_SIZE                                  0x1
#define _IPR5_IOCSRIP_LENGTH                                0x1
#define _IPR5_IOCSRIP_MASK                                  0x80

// Register: IPR6
#define IPR6 IPR6
extern volatile unsigned char           IPR6                __at(0x483);
#ifndef _LIB_BUILD
asm("IPR6 equ 0483h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned U1RXIP                 :1;
        unsigned U1TXIP                 :1;
        unsigned U1IP                   :1;
        unsigned U1EIP                  :1;
        unsigned U2RXIP                 :1;
        unsigned U2TXIP                 :1;
        unsigned U2IP                   :1;
        unsigned U2EIP                  :1;
    };
} IPR6bits_t;
extern volatile IPR6bits_t IPR6bits __at(0x483);
// bitfield macros
#define _IPR6_U1RXIP_POSN                                   0x0
#define _IPR6_U1RXIP_POSITION                               0x0
#define _IPR6_U1RXIP_SIZE                                   0x1
#define _IPR6_U1RXIP_LENGTH                                 0x1
#define _IPR6_U1RXIP_MASK                                   0x1
#define _IPR6_U1TXIP_POSN                                   0x1
#define _IPR6_U1TXIP_POSITION                               0x1
#define _IPR6_U1TXIP_SIZE                                   0x1
#define _IPR6_U1TXIP_LENGTH                                 0x1
#define _IPR6_U1TXIP_MASK                                   0x2
#define _IPR6_U1IP_POSN                                     0x2
#define _IPR6_U1IP_POSITION                                 0x2
#define _IPR6_U1IP_SIZE                                     0x1
#define _IPR6_U1IP_LENGTH                                   0x1
#define _IPR6_U1IP_MASK                                     0x4
#define _IPR6_U1EIP_POSN                                    0x3
#define _IPR6_U1EIP_POSITION                                0x3
#define _IPR6_U1EIP_SIZE                                    0x1
#define _IPR6_U1EIP_LENGTH                                  0x1
#define _IPR6_U1EIP_MASK                                    0x8
#define _IPR6_U2RXIP_POSN                                   0x4
#define _IPR6_U2RXIP_POSITION                               0x4
#define _IPR6_U2RXIP_SIZE                                   0x1
#define _IPR6_U2RXIP_LENGTH                                 0x1
#define _IPR6_U2RXIP_MASK                                   0x10
#define _IPR6_U2TXIP_POSN                                   0x5
#define _IPR6_U2TXIP_POSITION                               0x5
#define _IPR6_U2TXIP_SIZE                                   0x1
#define _IPR6_U2TXIP_LENGTH                                 0x1
#define _IPR6_U2TXIP_MASK                                   0x20
#define _IPR6_U2IP_POSN                                     0x6
#define _IPR6_U2IP_POSITION                                 0x6
#define _IPR6_U2IP_SIZE                                     0x1
#define _IPR6_U2IP_LENGTH                                   0x1
#define _IPR6_U2IP_MASK                                     0x40
#define _IPR6_U2EIP_POSN                                    0x7
#define _IPR6_U2EIP_POSITION                                0x7
#define _IPR6_U2EIP_SIZE                                    0x1
#define _IPR6_U2EIP_LENGTH                                  0x1
#define _IPR6_U2EIP_MASK                                    0x80

// Register: IPR7
#define IPR7 IPR7
extern volatile unsigned char           IPR7                __at(0x484);
#ifndef _LIB_BUILD
asm("IPR7 equ 0484h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned SPI1RXIP               :1;
        unsigned SPI1TXIP               :1;
        unsigned SPI1IP                 :1;
        unsigned I2C1RXIP               :1;
        unsigned I2C1TXIP               :1;
        unsigned I2C1IP                 :1;
        unsigned I2C1EIP                :1;
    };
} IPR7bits_t;
extern volatile IPR7bits_t IPR7bits __at(0x484);
// bitfield macros
#define _IPR7_SPI1RXIP_POSN                                 0x0
#define _IPR7_SPI1RXIP_POSITION                             0x0
#define _IPR7_SPI1RXIP_SIZE                                 0x1
#define _IPR7_SPI1RXIP_LENGTH                               0x1
#define _IPR7_SPI1RXIP_MASK                                 0x1
#define _IPR7_SPI1TXIP_POSN                                 0x1
#define _IPR7_SPI1TXIP_POSITION                             0x1
#define _IPR7_SPI1TXIP_SIZE                                 0x1
#define _IPR7_SPI1TXIP_LENGTH                               0x1
#define _IPR7_SPI1TXIP_MASK                                 0x2
#define _IPR7_SPI1IP_POSN                                   0x2
#define _IPR7_SPI1IP_POSITION                               0x2
#define _IPR7_SPI1IP_SIZE                                   0x1
#define _IPR7_SPI1IP_LENGTH                                 0x1
#define _IPR7_SPI1IP_MASK                                   0x4
#define _IPR7_I2C1RXIP_POSN                                 0x3
#define _IPR7_I2C1RXIP_POSITION                             0x3
#define _IPR7_I2C1RXIP_SIZE                                 0x1
#define _IPR7_I2C1RXIP_LENGTH                               0x1
#define _IPR7_I2C1RXIP_MASK                                 0x8
#define _IPR7_I2C1TXIP_POSN                                 0x4
#define _IPR7_I2C1TXIP_POSITION                             0x4
#define _IPR7_I2C1TXIP_SIZE                                 0x1
#define _IPR7_I2C1TXIP_LENGTH                               0x1
#define _IPR7_I2C1TXIP_MASK                                 0x10
#define _IPR7_I2C1IP_POSN                                   0x5
#define _IPR7_I2C1IP_POSITION                               0x5
#define _IPR7_I2C1IP_SIZE                                   0x1
#define _IPR7_I2C1IP_LENGTH                                 0x1
#define _IPR7_I2C1IP_MASK                                   0x20
#define _IPR7_I2C1EIP_POSN                                  0x6
#define _IPR7_I2C1EIP_POSITION                              0x6
#define _IPR7_I2C1EIP_SIZE                                  0x1
#define _IPR7_I2C1EIP_LENGTH                                0x1
#define _IPR7_I2C1EIP_MASK                                  0x40

// Register: IPR8
#define IPR8 IPR8
extern volatile unsigned char           IPR8                __at(0x485);
#ifndef _LIB_BUILD
asm("IPR8 equ 0485h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned I3C1RXIP               :1;
        unsigned I3C1TXIP               :1;
        unsigned I3C1IP                 :1;
        unsigned I3C1EIP                :1;
        unsigned I3C1RIP                :1;
    };
} IPR8bits_t;
extern volatile IPR8bits_t IPR8bits __at(0x485);
// bitfield macros
#define _IPR8_I3C1RXIP_POSN                                 0x0
#define _IPR8_I3C1RXIP_POSITION                             0x0
#define _IPR8_I3C1RXIP_SIZE                                 0x1
#define _IPR8_I3C1RXIP_LENGTH                               0x1
#define _IPR8_I3C1RXIP_MASK                                 0x1
#define _IPR8_I3C1TXIP_POSN                                 0x1
#define _IPR8_I3C1TXIP_POSITION                             0x1
#define _IPR8_I3C1TXIP_SIZE                                 0x1
#define _IPR8_I3C1TXIP_LENGTH                               0x1
#define _IPR8_I3C1TXIP_MASK                                 0x2
#define _IPR8_I3C1IP_POSN                                   0x2
#define _IPR8_I3C1IP_POSITION                               0x2
#define _IPR8_I3C1IP_SIZE                                   0x1
#define _IPR8_I3C1IP_LENGTH                                 0x1
#define _IPR8_I3C1IP_MASK                                   0x4
#define _IPR8_I3C1EIP_POSN                                  0x3
#define _IPR8_I3C1EIP_POSITION                              0x3
#define _IPR8_I3C1EIP_SIZE                                  0x1
#define _IPR8_I3C1EIP_LENGTH                                0x1
#define _IPR8_I3C1EIP_MASK                                  0x8
#define _IPR8_I3C1RIP_POSN                                  0x4
#define _IPR8_I3C1RIP_POSITION                              0x4
#define _IPR8_I3C1RIP_SIZE                                  0x1
#define _IPR8_I3C1RIP_LENGTH                                0x1
#define _IPR8_I3C1RIP_MASK                                  0x10

// Register: IPR9
#define IPR9 IPR9
extern volatile unsigned char           IPR9                __at(0x486);
#ifndef _LIB_BUILD
asm("IPR9 equ 0486h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned                        :5;
        unsigned HLVDIP                 :1;
        unsigned ADIP                   :1;
        unsigned ADTIP                  :1;
    };
} IPR9bits_t;
extern volatile IPR9bits_t IPR9bits __at(0x486);
// bitfield macros
#define _IPR9_HLVDIP_POSN                                   0x5
#define _IPR9_HLVDIP_POSITION                               0x5
#define _IPR9_HLVDIP_SIZE                                   0x1
#define _IPR9_HLVDIP_LENGTH                                 0x1
#define _IPR9_HLVDIP_MASK                                   0x20
#define _IPR9_ADIP_POSN                                     0x6
#define _IPR9_ADIP_POSITION                                 0x6
#define _IPR9_ADIP_SIZE                                     0x1
#define _IPR9_ADIP_LENGTH                                   0x1
#define _IPR9_ADIP_MASK                                     0x40
#define _IPR9_ADTIP_POSN                                    0x7
#define _IPR9_ADTIP_POSITION                                0x7
#define _IPR9_ADTIP_SIZE                                    0x1
#define _IPR9_ADTIP_LENGTH                                  0x1
#define _IPR9_ADTIP_MASK                                    0x80

// Register: PORTA
#define PORTA PORTA
extern volatile unsigned char           PORTA               __at(0x487);
#ifndef _LIB_BUILD
asm("PORTA equ 0487h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RA0                    :1;
        unsigned RA1                    :1;
        unsigned RA2                    :1;
        unsigned RA3                    :1;
        unsigned RA4                    :1;
        unsigned RA5                    :1;
    };
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits __at(0x487);
// bitfield macros
#define _PORTA_RA0_POSN                                     0x0
#define _PORTA_RA0_POSITION                                 0x0
#define _PORTA_RA0_SIZE                                     0x1
#define _PORTA_RA0_LENGTH                                   0x1
#define _PORTA_RA0_MASK                                     0x1
#define _PORTA_RA1_POSN                                     0x1
#define _PORTA_RA1_POSITION                                 0x1
#define _PORTA_RA1_SIZE                                     0x1
#define _PORTA_RA1_LENGTH                                   0x1
#define _PORTA_RA1_MASK                                     0x2
#define _PORTA_RA2_POSN                                     0x2
#define _PORTA_RA2_POSITION                                 0x2
#define _PORTA_RA2_SIZE                                     0x1
#define _PORTA_RA2_LENGTH                                   0x1
#define _PORTA_RA2_MASK                                     0x4
#define _PORTA_RA3_POSN                                     0x3
#define _PORTA_RA3_POSITION                                 0x3
#define _PORTA_RA3_SIZE                                     0x1
#define _PORTA_RA3_LENGTH                                   0x1
#define _PORTA_RA3_MASK                                     0x8
#define _PORTA_RA4_POSN                                     0x4
#define _PORTA_RA4_POSITION                                 0x4
#define _PORTA_RA4_SIZE                                     0x1
#define _PORTA_RA4_LENGTH                                   0x1
#define _PORTA_RA4_MASK                                     0x10
#define _PORTA_RA5_POSN                                     0x5
#define _PORTA_RA5_POSITION                                 0x5
#define _PORTA_RA5_SIZE                                     0x1
#define _PORTA_RA5_LENGTH                                   0x1
#define _PORTA_RA5_MASK                                     0x20

// Register: PORTC
#define PORTC PORTC
extern volatile unsigned char           PORTC               __at(0x489);
#ifndef _LIB_BUILD
asm("PORTC equ 0489h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RC0                    :1;
        unsigned RC1                    :1;
        unsigned                        :1;
        unsigned RC3                    :1;
        unsigned RC4                    :1;
        unsigned RC5                    :1;
        unsigned RC6                    :1;
        unsigned RC7                    :1;
    };
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits __at(0x489);
// bitfield macros
#define _PORTC_RC0_POSN                                     0x0
#define _PORTC_RC0_POSITION                                 0x0
#define _PORTC_RC0_SIZE                                     0x1
#define _PORTC_RC0_LENGTH                                   0x1
#define _PORTC_RC0_MASK                                     0x1
#define _PORTC_RC1_POSN                                     0x1
#define _PORTC_RC1_POSITION                                 0x1
#define _PORTC_RC1_SIZE                                     0x1
#define _PORTC_RC1_LENGTH                                   0x1
#define _PORTC_RC1_MASK                                     0x2
#define _PORTC_RC3_POSN                                     0x3
#define _PORTC_RC3_POSITION                                 0x3
#define _PORTC_RC3_SIZE                                     0x1
#define _PORTC_RC3_LENGTH                                   0x1
#define _PORTC_RC3_MASK                                     0x8
#define _PORTC_RC4_POSN                                     0x4
#define _PORTC_RC4_POSITION                                 0x4
#define _PORTC_RC4_SIZE                                     0x1
#define _PORTC_RC4_LENGTH                                   0x1
#define _PORTC_RC4_MASK                                     0x10
#define _PORTC_RC5_POSN                                     0x5
#define _PORTC_RC5_POSITION                                 0x5
#define _PORTC_RC5_SIZE                                     0x1
#define _PORTC_RC5_LENGTH                                   0x1
#define _PORTC_RC5_MASK                                     0x20
#define _PORTC_RC6_POSN                                     0x6
#define _PORTC_RC6_POSITION                                 0x6
#define _PORTC_RC6_SIZE                                     0x1
#define _PORTC_RC6_LENGTH                                   0x1
#define _PORTC_RC6_MASK                                     0x40
#define _PORTC_RC7_POSN                                     0x7
#define _PORTC_RC7_POSITION                                 0x7
#define _PORTC_RC7_SIZE                                     0x1
#define _PORTC_RC7_LENGTH                                   0x1
#define _PORTC_RC7_MASK                                     0x80

// Register: TRISA
#define TRISA TRISA
extern volatile unsigned char           TRISA               __at(0x48D);
#ifndef _LIB_BUILD
asm("TRISA equ 048Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISA0                 :1;
        unsigned TRISA1                 :1;
        unsigned TRISA2                 :1;
        unsigned                        :1;
        unsigned TRISA4                 :1;
        unsigned TRISA5                 :1;
    };
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits __at(0x48D);
// bitfield macros
#define _TRISA_TRISA0_POSN                                  0x0
#define _TRISA_TRISA0_POSITION                              0x0
#define _TRISA_TRISA0_SIZE                                  0x1
#define _TRISA_TRISA0_LENGTH                                0x1
#define _TRISA_TRISA0_MASK                                  0x1
#define _TRISA_TRISA1_POSN                                  0x1
#define _TRISA_TRISA1_POSITION                              0x1
#define _TRISA_TRISA1_SIZE                                  0x1
#define _TRISA_TRISA1_LENGTH                                0x1
#define _TRISA_TRISA1_MASK                                  0x2
#define _TRISA_TRISA2_POSN                                  0x2
#define _TRISA_TRISA2_POSITION                              0x2
#define _TRISA_TRISA2_SIZE                                  0x1
#define _TRISA_TRISA2_LENGTH                                0x1
#define _TRISA_TRISA2_MASK                                  0x4
#define _TRISA_TRISA4_POSN                                  0x4
#define _TRISA_TRISA4_POSITION                              0x4
#define _TRISA_TRISA4_SIZE                                  0x1
#define _TRISA_TRISA4_LENGTH                                0x1
#define _TRISA_TRISA4_MASK                                  0x10
#define _TRISA_TRISA5_POSN                                  0x5
#define _TRISA_TRISA5_POSITION                              0x5
#define _TRISA_TRISA5_SIZE                                  0x1
#define _TRISA_TRISA5_LENGTH                                0x1
#define _TRISA_TRISA5_MASK                                  0x20

// Register: TRISC
#define TRISC TRISC
extern volatile unsigned char           TRISC               __at(0x48F);
#ifndef _LIB_BUILD
asm("TRISC equ 048Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TRISC0                 :1;
        unsigned TRISC1                 :1;
        unsigned                        :1;
        unsigned TRISC3                 :1;
        unsigned TRISC4                 :1;
        unsigned TRISC5                 :1;
        unsigned TRISC6                 :1;
        unsigned TRISC7                 :1;
    };
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits __at(0x48F);
// bitfield macros
#define _TRISC_TRISC0_POSN                                  0x0
#define _TRISC_TRISC0_POSITION                              0x0
#define _TRISC_TRISC0_SIZE                                  0x1
#define _TRISC_TRISC0_LENGTH                                0x1
#define _TRISC_TRISC0_MASK                                  0x1
#define _TRISC_TRISC1_POSN                                  0x1
#define _TRISC_TRISC1_POSITION                              0x1
#define _TRISC_TRISC1_SIZE                                  0x1
#define _TRISC_TRISC1_LENGTH                                0x1
#define _TRISC_TRISC1_MASK                                  0x2
#define _TRISC_TRISC3_POSN                                  0x3
#define _TRISC_TRISC3_POSITION                              0x3
#define _TRISC_TRISC3_SIZE                                  0x1
#define _TRISC_TRISC3_LENGTH                                0x1
#define _TRISC_TRISC3_MASK                                  0x8
#define _TRISC_TRISC4_POSN                                  0x4
#define _TRISC_TRISC4_POSITION                              0x4
#define _TRISC_TRISC4_SIZE                                  0x1
#define _TRISC_TRISC4_LENGTH                                0x1
#define _TRISC_TRISC4_MASK                                  0x10
#define _TRISC_TRISC5_POSN                                  0x5
#define _TRISC_TRISC5_POSITION                              0x5
#define _TRISC_TRISC5_SIZE                                  0x1
#define _TRISC_TRISC5_LENGTH                                0x1
#define _TRISC_TRISC5_MASK                                  0x20
#define _TRISC_TRISC6_POSN                                  0x6
#define _TRISC_TRISC6_POSITION                              0x6
#define _TRISC_TRISC6_SIZE                                  0x1
#define _TRISC_TRISC6_LENGTH                                0x1
#define _TRISC_TRISC6_MASK                                  0x40
#define _TRISC_TRISC7_POSN                                  0x7
#define _TRISC_TRISC7_POSITION                              0x7
#define _TRISC_TRISC7_SIZE                                  0x1
#define _TRISC_TRISC7_LENGTH                                0x1
#define _TRISC_TRISC7_MASK                                  0x80

// Register: LATA
#define LATA LATA
extern volatile unsigned char           LATA                __at(0x493);
#ifndef _LIB_BUILD
asm("LATA equ 0493h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATA0                  :1;
        unsigned LATA1                  :1;
        unsigned LATA2                  :1;
        unsigned                        :1;
        unsigned LATA4                  :1;
        unsigned LATA5                  :1;
    };
} LATAbits_t;
extern volatile LATAbits_t LATAbits __at(0x493);
// bitfield macros
#define _LATA_LATA0_POSN                                    0x0
#define _LATA_LATA0_POSITION                                0x0
#define _LATA_LATA0_SIZE                                    0x1
#define _LATA_LATA0_LENGTH                                  0x1
#define _LATA_LATA0_MASK                                    0x1
#define _LATA_LATA1_POSN                                    0x1
#define _LATA_LATA1_POSITION                                0x1
#define _LATA_LATA1_SIZE                                    0x1
#define _LATA_LATA1_LENGTH                                  0x1
#define _LATA_LATA1_MASK                                    0x2
#define _LATA_LATA2_POSN                                    0x2
#define _LATA_LATA2_POSITION                                0x2
#define _LATA_LATA2_SIZE                                    0x1
#define _LATA_LATA2_LENGTH                                  0x1
#define _LATA_LATA2_MASK                                    0x4
#define _LATA_LATA4_POSN                                    0x4
#define _LATA_LATA4_POSITION                                0x4
#define _LATA_LATA4_SIZE                                    0x1
#define _LATA_LATA4_LENGTH                                  0x1
#define _LATA_LATA4_MASK                                    0x10
#define _LATA_LATA5_POSN                                    0x5
#define _LATA_LATA5_POSITION                                0x5
#define _LATA_LATA5_SIZE                                    0x1
#define _LATA_LATA5_LENGTH                                  0x1
#define _LATA_LATA5_MASK                                    0x20

// Register: LATC
#define LATC LATC
extern volatile unsigned char           LATC                __at(0x495);
#ifndef _LIB_BUILD
asm("LATC equ 0495h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATC0                  :1;
        unsigned LATC1                  :1;
        unsigned                        :1;
        unsigned LATC3                  :1;
        unsigned LATC4                  :1;
        unsigned LATC5                  :1;
        unsigned LATC6                  :1;
        unsigned LATC7                  :1;
    };
} LATCbits_t;
extern volatile LATCbits_t LATCbits __at(0x495);
// bitfield macros
#define _LATC_LATC0_POSN                                    0x0
#define _LATC_LATC0_POSITION                                0x0
#define _LATC_LATC0_SIZE                                    0x1
#define _LATC_LATC0_LENGTH                                  0x1
#define _LATC_LATC0_MASK                                    0x1
#define _LATC_LATC1_POSN                                    0x1
#define _LATC_LATC1_POSITION                                0x1
#define _LATC_LATC1_SIZE                                    0x1
#define _LATC_LATC1_LENGTH                                  0x1
#define _LATC_LATC1_MASK                                    0x2
#define _LATC_LATC3_POSN                                    0x3
#define _LATC_LATC3_POSITION                                0x3
#define _LATC_LATC3_SIZE                                    0x1
#define _LATC_LATC3_LENGTH                                  0x1
#define _LATC_LATC3_MASK                                    0x8
#define _LATC_LATC4_POSN                                    0x4
#define _LATC_LATC4_POSITION                                0x4
#define _LATC_LATC4_SIZE                                    0x1
#define _LATC_LATC4_LENGTH                                  0x1
#define _LATC_LATC4_MASK                                    0x10
#define _LATC_LATC5_POSN                                    0x5
#define _LATC_LATC5_POSITION                                0x5
#define _LATC_LATC5_SIZE                                    0x1
#define _LATC_LATC5_LENGTH                                  0x1
#define _LATC_LATC5_MASK                                    0x20
#define _LATC_LATC6_POSN                                    0x6
#define _LATC_LATC6_POSITION                                0x6
#define _LATC_LATC6_SIZE                                    0x1
#define _LATC_LATC6_LENGTH                                  0x1
#define _LATC_LATC6_MASK                                    0x40
#define _LATC_LATC7_POSN                                    0x7
#define _LATC_LATC7_POSITION                                0x7
#define _LATC_LATC7_SIZE                                    0x1
#define _LATC_LATC7_LENGTH                                  0x1
#define _LATC_LATC7_MASK                                    0x80

// Register: PORTW
#define PORTW PORTW
extern volatile unsigned char           PORTW               __at(0x499);
#ifndef _LIB_BUILD
asm("PORTW equ 0499h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned RW0                    :1;
        unsigned RW1                    :1;
        unsigned RW2                    :1;
        unsigned RW3                    :1;
        unsigned RW4                    :1;
        unsigned RW5                    :1;
        unsigned RW6                    :1;
        unsigned RW7                    :1;
    };
} PORTWbits_t;
extern volatile PORTWbits_t PORTWbits __at(0x499);
// bitfield macros
#define _PORTW_RW0_POSN                                     0x0
#define _PORTW_RW0_POSITION                                 0x0
#define _PORTW_RW0_SIZE                                     0x1
#define _PORTW_RW0_LENGTH                                   0x1
#define _PORTW_RW0_MASK                                     0x1
#define _PORTW_RW1_POSN                                     0x1
#define _PORTW_RW1_POSITION                                 0x1
#define _PORTW_RW1_SIZE                                     0x1
#define _PORTW_RW1_LENGTH                                   0x1
#define _PORTW_RW1_MASK                                     0x2
#define _PORTW_RW2_POSN                                     0x2
#define _PORTW_RW2_POSITION                                 0x2
#define _PORTW_RW2_SIZE                                     0x1
#define _PORTW_RW2_LENGTH                                   0x1
#define _PORTW_RW2_MASK                                     0x4
#define _PORTW_RW3_POSN                                     0x3
#define _PORTW_RW3_POSITION                                 0x3
#define _PORTW_RW3_SIZE                                     0x1
#define _PORTW_RW3_LENGTH                                   0x1
#define _PORTW_RW3_MASK                                     0x8
#define _PORTW_RW4_POSN                                     0x4
#define _PORTW_RW4_POSITION                                 0x4
#define _PORTW_RW4_SIZE                                     0x1
#define _PORTW_RW4_LENGTH                                   0x1
#define _PORTW_RW4_MASK                                     0x10
#define _PORTW_RW5_POSN                                     0x5
#define _PORTW_RW5_POSITION                                 0x5
#define _PORTW_RW5_SIZE                                     0x1
#define _PORTW_RW5_LENGTH                                   0x1
#define _PORTW_RW5_MASK                                     0x20
#define _PORTW_RW6_POSN                                     0x6
#define _PORTW_RW6_POSITION                                 0x6
#define _PORTW_RW6_SIZE                                     0x1
#define _PORTW_RW6_LENGTH                                   0x1
#define _PORTW_RW6_MASK                                     0x40
#define _PORTW_RW7_POSN                                     0x7
#define _PORTW_RW7_POSITION                                 0x7
#define _PORTW_RW7_SIZE                                     0x1
#define _PORTW_RW7_LENGTH                                   0x1
#define _PORTW_RW7_MASK                                     0x80

// Register: LATW
#define LATW LATW
extern volatile unsigned char           LATW                __at(0x49A);
#ifndef _LIB_BUILD
asm("LATW equ 049Ah");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned LATW0                  :1;
        unsigned LATW1                  :1;
        unsigned LATW2                  :1;
        unsigned LATW3                  :1;
        unsigned LATW4                  :1;
        unsigned LATW5                  :1;
        unsigned LATW6                  :1;
        unsigned LATW7                  :1;
    };
} LATWbits_t;
extern volatile LATWbits_t LATWbits __at(0x49A);
// bitfield macros
#define _LATW_LATW0_POSN                                    0x0
#define _LATW_LATW0_POSITION                                0x0
#define _LATW_LATW0_SIZE                                    0x1
#define _LATW_LATW0_LENGTH                                  0x1
#define _LATW_LATW0_MASK                                    0x1
#define _LATW_LATW1_POSN                                    0x1
#define _LATW_LATW1_POSITION                                0x1
#define _LATW_LATW1_SIZE                                    0x1
#define _LATW_LATW1_LENGTH                                  0x1
#define _LATW_LATW1_MASK                                    0x2
#define _LATW_LATW2_POSN                                    0x2
#define _LATW_LATW2_POSITION                                0x2
#define _LATW_LATW2_SIZE                                    0x1
#define _LATW_LATW2_LENGTH                                  0x1
#define _LATW_LATW2_MASK                                    0x4
#define _LATW_LATW3_POSN                                    0x3
#define _LATW_LATW3_POSITION                                0x3
#define _LATW_LATW3_SIZE                                    0x1
#define _LATW_LATW3_LENGTH                                  0x1
#define _LATW_LATW3_MASK                                    0x8
#define _LATW_LATW4_POSN                                    0x4
#define _LATW_LATW4_POSITION                                0x4
#define _LATW_LATW4_SIZE                                    0x1
#define _LATW_LATW4_LENGTH                                  0x1
#define _LATW_LATW4_MASK                                    0x10
#define _LATW_LATW5_POSN                                    0x5
#define _LATW_LATW5_POSITION                                0x5
#define _LATW_LATW5_SIZE                                    0x1
#define _LATW_LATW5_LENGTH                                  0x1
#define _LATW_LATW5_MASK                                    0x20
#define _LATW_LATW6_POSN                                    0x6
#define _LATW_LATW6_POSITION                                0x6
#define _LATW_LATW6_SIZE                                    0x1
#define _LATW_LATW6_LENGTH                                  0x1
#define _LATW_LATW6_MASK                                    0x40
#define _LATW_LATW7_POSN                                    0x7
#define _LATW_LATW7_POSITION                                0x7
#define _LATW_LATW7_SIZE                                    0x1
#define _LATW_LATW7_LENGTH                                  0x1
#define _LATW_LATW7_MASK                                    0x80

// Register: PORTWIN0
#define PORTWIN0 PORTWIN0
extern volatile unsigned char           PORTWIN0            __at(0x49B);
#ifndef _LIB_BUILD
asm("PORTWIN0 equ 049Bh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IN                     :8;
    };
    struct {
        unsigned IN0                    :1;
        unsigned IN1                    :1;
        unsigned IN2                    :1;
    };
} PORTWIN0bits_t;
extern volatile PORTWIN0bits_t PORTWIN0bits __at(0x49B);
// bitfield macros
#define _PORTWIN0_IN_POSN                                   0x0
#define _PORTWIN0_IN_POSITION                               0x0
#define _PORTWIN0_IN_SIZE                                   0x8
#define _PORTWIN0_IN_LENGTH                                 0x8
#define _PORTWIN0_IN_MASK                                   0xFF
#define _PORTWIN0_IN0_POSN                                  0x0
#define _PORTWIN0_IN0_POSITION                              0x0
#define _PORTWIN0_IN0_SIZE                                  0x1
#define _PORTWIN0_IN0_LENGTH                                0x1
#define _PORTWIN0_IN0_MASK                                  0x1
#define _PORTWIN0_IN1_POSN                                  0x1
#define _PORTWIN0_IN1_POSITION                              0x1
#define _PORTWIN0_IN1_SIZE                                  0x1
#define _PORTWIN0_IN1_LENGTH                                0x1
#define _PORTWIN0_IN1_MASK                                  0x2
#define _PORTWIN0_IN2_POSN                                  0x2
#define _PORTWIN0_IN2_POSITION                              0x2
#define _PORTWIN0_IN2_SIZE                                  0x1
#define _PORTWIN0_IN2_LENGTH                                0x1
#define _PORTWIN0_IN2_MASK                                  0x4

// Register: PORTWIN1
#define PORTWIN1 PORTWIN1
extern volatile unsigned char           PORTWIN1            __at(0x49C);
#ifndef _LIB_BUILD
asm("PORTWIN1 equ 049Ch");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IN                     :8;
    };
    struct {
        unsigned IN0                    :1;
        unsigned IN1                    :1;
        unsigned IN2                    :1;
    };
} PORTWIN1bits_t;
extern volatile PORTWIN1bits_t PORTWIN1bits __at(0x49C);
// bitfield macros
#define _PORTWIN1_IN_POSN                                   0x0
#define _PORTWIN1_IN_POSITION                               0x0
#define _PORTWIN1_IN_SIZE                                   0x8
#define _PORTWIN1_IN_LENGTH                                 0x8
#define _PORTWIN1_IN_MASK                                   0xFF
#define _PORTWIN1_IN0_POSN                                  0x0
#define _PORTWIN1_IN0_POSITION                              0x0
#define _PORTWIN1_IN0_SIZE                                  0x1
#define _PORTWIN1_IN0_LENGTH                                0x1
#define _PORTWIN1_IN0_MASK                                  0x1
#define _PORTWIN1_IN1_POSN                                  0x1
#define _PORTWIN1_IN1_POSITION                              0x1
#define _PORTWIN1_IN1_SIZE                                  0x1
#define _PORTWIN1_IN1_LENGTH                                0x1
#define _PORTWIN1_IN1_MASK                                  0x2
#define _PORTWIN1_IN2_POSN                                  0x2
#define _PORTWIN1_IN2_POSITION                              0x2
#define _PORTWIN1_IN2_SIZE                                  0x1
#define _PORTWIN1_IN2_LENGTH                                0x1
#define _PORTWIN1_IN2_MASK                                  0x4

// Register: PORTWIN2
#define PORTWIN2 PORTWIN2
extern volatile unsigned char           PORTWIN2            __at(0x49D);
#ifndef _LIB_BUILD
asm("PORTWIN2 equ 049Dh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IN                     :8;
    };
    struct {
        unsigned IN0                    :1;
        unsigned IN1                    :1;
        unsigned IN2                    :1;
    };
} PORTWIN2bits_t;
extern volatile PORTWIN2bits_t PORTWIN2bits __at(0x49D);
// bitfield macros
#define _PORTWIN2_IN_POSN                                   0x0
#define _PORTWIN2_IN_POSITION                               0x0
#define _PORTWIN2_IN_SIZE                                   0x8
#define _PORTWIN2_IN_LENGTH                                 0x8
#define _PORTWIN2_IN_MASK                                   0xFF
#define _PORTWIN2_IN0_POSN                                  0x0
#define _PORTWIN2_IN0_POSITION                              0x0
#define _PORTWIN2_IN0_SIZE                                  0x1
#define _PORTWIN2_IN0_LENGTH                                0x1
#define _PORTWIN2_IN0_MASK                                  0x1
#define _PORTWIN2_IN1_POSN                                  0x1
#define _PORTWIN2_IN1_POSITION                              0x1
#define _PORTWIN2_IN1_SIZE                                  0x1
#define _PORTWIN2_IN1_LENGTH                                0x1
#define _PORTWIN2_IN1_MASK                                  0x2
#define _PORTWIN2_IN2_POSN                                  0x2
#define _PORTWIN2_IN2_POSITION                              0x2
#define _PORTWIN2_IN2_SIZE                                  0x1
#define _PORTWIN2_IN2_LENGTH                                0x1
#define _PORTWIN2_IN2_MASK                                  0x4

// Register: PORTWIN3
#define PORTWIN3 PORTWIN3
extern volatile unsigned char           PORTWIN3            __at(0x49E);
#ifndef _LIB_BUILD
asm("PORTWIN3 equ 049Eh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IN                     :8;
    };
    struct {
        unsigned IN0                    :1;
        unsigned IN1                    :1;
        unsigned IN2                    :1;
    };
} PORTWIN3bits_t;
extern volatile PORTWIN3bits_t PORTWIN3bits __at(0x49E);
// bitfield macros
#define _PORTWIN3_IN_POSN                                   0x0
#define _PORTWIN3_IN_POSITION                               0x0
#define _PORTWIN3_IN_SIZE                                   0x8
#define _PORTWIN3_IN_LENGTH                                 0x8
#define _PORTWIN3_IN_MASK                                   0xFF
#define _PORTWIN3_IN0_POSN                                  0x0
#define _PORTWIN3_IN0_POSITION                              0x0
#define _PORTWIN3_IN0_SIZE                                  0x1
#define _PORTWIN3_IN0_LENGTH                                0x1
#define _PORTWIN3_IN0_MASK                                  0x1
#define _PORTWIN3_IN1_POSN                                  0x1
#define _PORTWIN3_IN1_POSITION                              0x1
#define _PORTWIN3_IN1_SIZE                                  0x1
#define _PORTWIN3_IN1_LENGTH                                0x1
#define _PORTWIN3_IN1_MASK                                  0x2
#define _PORTWIN3_IN2_POSN                                  0x2
#define _PORTWIN3_IN2_POSITION                              0x2
#define _PORTWIN3_IN2_SIZE                                  0x1
#define _PORTWIN3_IN2_LENGTH                                0x1
#define _PORTWIN3_IN2_MASK                                  0x4

// Register: PORTWIN4
#define PORTWIN4 PORTWIN4
extern volatile unsigned char           PORTWIN4            __at(0x49F);
#ifndef _LIB_BUILD
asm("PORTWIN4 equ 049Fh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IN                     :8;
    };
    struct {
        unsigned IN0                    :1;
        unsigned IN1                    :1;
        unsigned IN2                    :1;
    };
} PORTWIN4bits_t;
extern volatile PORTWIN4bits_t PORTWIN4bits __at(0x49F);
// bitfield macros
#define _PORTWIN4_IN_POSN                                   0x0
#define _PORTWIN4_IN_POSITION                               0x0
#define _PORTWIN4_IN_SIZE                                   0x8
#define _PORTWIN4_IN_LENGTH                                 0x8
#define _PORTWIN4_IN_MASK                                   0xFF
#define _PORTWIN4_IN0_POSN                                  0x0
#define _PORTWIN4_IN0_POSITION                              0x0
#define _PORTWIN4_IN0_SIZE                                  0x1
#define _PORTWIN4_IN0_LENGTH                                0x1
#define _PORTWIN4_IN0_MASK                                  0x1
#define _PORTWIN4_IN1_POSN                                  0x1
#define _PORTWIN4_IN1_POSITION                              0x1
#define _PORTWIN4_IN1_SIZE                                  0x1
#define _PORTWIN4_IN1_LENGTH                                0x1
#define _PORTWIN4_IN1_MASK                                  0x2
#define _PORTWIN4_IN2_POSN                                  0x2
#define _PORTWIN4_IN2_POSITION                              0x2
#define _PORTWIN4_IN2_SIZE                                  0x1
#define _PORTWIN4_IN2_LENGTH                                0x1
#define _PORTWIN4_IN2_MASK                                  0x4

// Register: PORTWIN5
#define PORTWIN5 PORTWIN5
extern volatile unsigned char           PORTWIN5            __at(0x4A0);
#ifndef _LIB_BUILD
asm("PORTWIN5 equ 04A0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IN                     :8;
    };
    struct {
        unsigned IN0                    :1;
        unsigned IN1                    :1;
        unsigned IN2                    :1;
    };
} PORTWIN5bits_t;
extern volatile PORTWIN5bits_t PORTWIN5bits __at(0x4A0);
// bitfield macros
#define _PORTWIN5_IN_POSN                                   0x0
#define _PORTWIN5_IN_POSITION                               0x0
#define _PORTWIN5_IN_SIZE                                   0x8
#define _PORTWIN5_IN_LENGTH                                 0x8
#define _PORTWIN5_IN_MASK                                   0xFF
#define _PORTWIN5_IN0_POSN                                  0x0
#define _PORTWIN5_IN0_POSITION                              0x0
#define _PORTWIN5_IN0_SIZE                                  0x1
#define _PORTWIN5_IN0_LENGTH                                0x1
#define _PORTWIN5_IN0_MASK                                  0x1
#define _PORTWIN5_IN1_POSN                                  0x1
#define _PORTWIN5_IN1_POSITION                              0x1
#define _PORTWIN5_IN1_SIZE                                  0x1
#define _PORTWIN5_IN1_LENGTH                                0x1
#define _PORTWIN5_IN1_MASK                                  0x2
#define _PORTWIN5_IN2_POSN                                  0x2
#define _PORTWIN5_IN2_POSITION                              0x2
#define _PORTWIN5_IN2_SIZE                                  0x1
#define _PORTWIN5_IN2_LENGTH                                0x1
#define _PORTWIN5_IN2_MASK                                  0x4

// Register: PORTWIN6
#define PORTWIN6 PORTWIN6
extern volatile unsigned char           PORTWIN6            __at(0x4A1);
#ifndef _LIB_BUILD
asm("PORTWIN6 equ 04A1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IN                     :8;
    };
    struct {
        unsigned IN0                    :1;
        unsigned IN1                    :1;
        unsigned IN2                    :1;
    };
} PORTWIN6bits_t;
extern volatile PORTWIN6bits_t PORTWIN6bits __at(0x4A1);
// bitfield macros
#define _PORTWIN6_IN_POSN                                   0x0
#define _PORTWIN6_IN_POSITION                               0x0
#define _PORTWIN6_IN_SIZE                                   0x8
#define _PORTWIN6_IN_LENGTH                                 0x8
#define _PORTWIN6_IN_MASK                                   0xFF
#define _PORTWIN6_IN0_POSN                                  0x0
#define _PORTWIN6_IN0_POSITION                              0x0
#define _PORTWIN6_IN0_SIZE                                  0x1
#define _PORTWIN6_IN0_LENGTH                                0x1
#define _PORTWIN6_IN0_MASK                                  0x1
#define _PORTWIN6_IN1_POSN                                  0x1
#define _PORTWIN6_IN1_POSITION                              0x1
#define _PORTWIN6_IN1_SIZE                                  0x1
#define _PORTWIN6_IN1_LENGTH                                0x1
#define _PORTWIN6_IN1_MASK                                  0x2
#define _PORTWIN6_IN2_POSN                                  0x2
#define _PORTWIN6_IN2_POSITION                              0x2
#define _PORTWIN6_IN2_SIZE                                  0x1
#define _PORTWIN6_IN2_LENGTH                                0x1
#define _PORTWIN6_IN2_MASK                                  0x4

// Register: PORTWIN7
#define PORTWIN7 PORTWIN7
extern volatile unsigned char           PORTWIN7            __at(0x4A2);
#ifndef _LIB_BUILD
asm("PORTWIN7 equ 04A2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned IN                     :8;
    };
    struct {
        unsigned IN0                    :1;
        unsigned IN1                    :1;
        unsigned IN2                    :1;
    };
} PORTWIN7bits_t;
extern volatile PORTWIN7bits_t PORTWIN7bits __at(0x4A2);
// bitfield macros
#define _PORTWIN7_IN_POSN                                   0x0
#define _PORTWIN7_IN_POSITION                               0x0
#define _PORTWIN7_IN_SIZE                                   0x8
#define _PORTWIN7_IN_LENGTH                                 0x8
#define _PORTWIN7_IN_MASK                                   0xFF
#define _PORTWIN7_IN0_POSN                                  0x0
#define _PORTWIN7_IN0_POSITION                              0x0
#define _PORTWIN7_IN0_SIZE                                  0x1
#define _PORTWIN7_IN0_LENGTH                                0x1
#define _PORTWIN7_IN0_MASK                                  0x1
#define _PORTWIN7_IN1_POSN                                  0x1
#define _PORTWIN7_IN1_POSITION                              0x1
#define _PORTWIN7_IN1_SIZE                                  0x1
#define _PORTWIN7_IN1_LENGTH                                0x1
#define _PORTWIN7_IN1_MASK                                  0x2
#define _PORTWIN7_IN2_POSN                                  0x2
#define _PORTWIN7_IN2_POSITION                              0x2
#define _PORTWIN7_IN2_SIZE                                  0x1
#define _PORTWIN7_IN2_LENGTH                                0x1
#define _PORTWIN7_IN2_MASK                                  0x4

// Register: PORTWCLK
#define PORTWCLK PORTWCLK
extern volatile unsigned char           PORTWCLK            __at(0x4A3);
#ifndef _LIB_BUILD
asm("PORTWCLK equ 04A3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLK                    :8;
    };
    struct {
        unsigned CLK0                   :1;
        unsigned CLK1                   :1;
        unsigned CLK2                   :1;
        unsigned CLK3                   :1;
        unsigned CLK4                   :1;
    };
    struct {
        unsigned PWCLK                  :8;
    };
} PORTWCLKbits_t;
extern volatile PORTWCLKbits_t PORTWCLKbits __at(0x4A3);
// bitfield macros
#define _PORTWCLK_CLK_POSN                                  0x0
#define _PORTWCLK_CLK_POSITION                              0x0
#define _PORTWCLK_CLK_SIZE                                  0x8
#define _PORTWCLK_CLK_LENGTH                                0x8
#define _PORTWCLK_CLK_MASK                                  0xFF
#define _PORTWCLK_CLK0_POSN                                 0x0
#define _PORTWCLK_CLK0_POSITION                             0x0
#define _PORTWCLK_CLK0_SIZE                                 0x1
#define _PORTWCLK_CLK0_LENGTH                               0x1
#define _PORTWCLK_CLK0_MASK                                 0x1
#define _PORTWCLK_CLK1_POSN                                 0x1
#define _PORTWCLK_CLK1_POSITION                             0x1
#define _PORTWCLK_CLK1_SIZE                                 0x1
#define _PORTWCLK_CLK1_LENGTH                               0x1
#define _PORTWCLK_CLK1_MASK                                 0x2
#define _PORTWCLK_CLK2_POSN                                 0x2
#define _PORTWCLK_CLK2_POSITION                             0x2
#define _PORTWCLK_CLK2_SIZE                                 0x1
#define _PORTWCLK_CLK2_LENGTH                               0x1
#define _PORTWCLK_CLK2_MASK                                 0x4
#define _PORTWCLK_CLK3_POSN                                 0x3
#define _PORTWCLK_CLK3_POSITION                             0x3
#define _PORTWCLK_CLK3_SIZE                                 0x1
#define _PORTWCLK_CLK3_LENGTH                               0x1
#define _PORTWCLK_CLK3_MASK                                 0x8
#define _PORTWCLK_CLK4_POSN                                 0x4
#define _PORTWCLK_CLK4_POSITION                             0x4
#define _PORTWCLK_CLK4_SIZE                                 0x1
#define _PORTWCLK_CLK4_LENGTH                               0x1
#define _PORTWCLK_CLK4_MASK                                 0x10
#define _PORTWCLK_PWCLK_POSN                                0x0
#define _PORTWCLK_PWCLK_POSITION                            0x0
#define _PORTWCLK_PWCLK_SIZE                                0x8
#define _PORTWCLK_PWCLK_LENGTH                              0x8
#define _PORTWCLK_PWCLK_MASK                                0xFF

// Register: PORTWDF
#define PORTWDF PORTWDF
extern volatile unsigned char           PORTWDF             __at(0x4A4);
#ifndef _LIB_BUILD
asm("PORTWDF equ 04A4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DF0                    :1;
        unsigned DF1                    :1;
        unsigned DF2                    :1;
        unsigned DF3                    :1;
        unsigned DF4                    :1;
        unsigned DF5                    :1;
        unsigned DF6                    :1;
        unsigned DF7                    :1;
    };
    struct {
        unsigned PWDF0                  :1;
        unsigned PWDF1                  :1;
        unsigned PWDF2                  :1;
        unsigned PWDF3                  :1;
        unsigned PWDF4                  :1;
        unsigned PWDF5                  :1;
        unsigned PWDF6                  :1;
        unsigned PWDF7                  :1;
    };
    struct {
        unsigned DF                     :8;
    };
    struct {
        unsigned PWDF                   :8;
    };
} PORTWDFbits_t;
extern volatile PORTWDFbits_t PORTWDFbits __at(0x4A4);
// bitfield macros
#define _PORTWDF_DF0_POSN                                   0x0
#define _PORTWDF_DF0_POSITION                               0x0
#define _PORTWDF_DF0_SIZE                                   0x1
#define _PORTWDF_DF0_LENGTH                                 0x1
#define _PORTWDF_DF0_MASK                                   0x1
#define _PORTWDF_DF1_POSN                                   0x1
#define _PORTWDF_DF1_POSITION                               0x1
#define _PORTWDF_DF1_SIZE                                   0x1
#define _PORTWDF_DF1_LENGTH                                 0x1
#define _PORTWDF_DF1_MASK                                   0x2
#define _PORTWDF_DF2_POSN                                   0x2
#define _PORTWDF_DF2_POSITION                               0x2
#define _PORTWDF_DF2_SIZE                                   0x1
#define _PORTWDF_DF2_LENGTH                                 0x1
#define _PORTWDF_DF2_MASK                                   0x4
#define _PORTWDF_DF3_POSN                                   0x3
#define _PORTWDF_DF3_POSITION                               0x3
#define _PORTWDF_DF3_SIZE                                   0x1
#define _PORTWDF_DF3_LENGTH                                 0x1
#define _PORTWDF_DF3_MASK                                   0x8
#define _PORTWDF_DF4_POSN                                   0x4
#define _PORTWDF_DF4_POSITION                               0x4
#define _PORTWDF_DF4_SIZE                                   0x1
#define _PORTWDF_DF4_LENGTH                                 0x1
#define _PORTWDF_DF4_MASK                                   0x10
#define _PORTWDF_DF5_POSN                                   0x5
#define _PORTWDF_DF5_POSITION                               0x5
#define _PORTWDF_DF5_SIZE                                   0x1
#define _PORTWDF_DF5_LENGTH                                 0x1
#define _PORTWDF_DF5_MASK                                   0x20
#define _PORTWDF_DF6_POSN                                   0x6
#define _PORTWDF_DF6_POSITION                               0x6
#define _PORTWDF_DF6_SIZE                                   0x1
#define _PORTWDF_DF6_LENGTH                                 0x1
#define _PORTWDF_DF6_MASK                                   0x40
#define _PORTWDF_DF7_POSN                                   0x7
#define _PORTWDF_DF7_POSITION                               0x7
#define _PORTWDF_DF7_SIZE                                   0x1
#define _PORTWDF_DF7_LENGTH                                 0x1
#define _PORTWDF_DF7_MASK                                   0x80
#define _PORTWDF_PWDF0_POSN                                 0x0
#define _PORTWDF_PWDF0_POSITION                             0x0
#define _PORTWDF_PWDF0_SIZE                                 0x1
#define _PORTWDF_PWDF0_LENGTH                               0x1
#define _PORTWDF_PWDF0_MASK                                 0x1
#define _PORTWDF_PWDF1_POSN                                 0x1
#define _PORTWDF_PWDF1_POSITION                             0x1
#define _PORTWDF_PWDF1_SIZE                                 0x1
#define _PORTWDF_PWDF1_LENGTH                               0x1
#define _PORTWDF_PWDF1_MASK                                 0x2
#define _PORTWDF_PWDF2_POSN                                 0x2
#define _PORTWDF_PWDF2_POSITION                             0x2
#define _PORTWDF_PWDF2_SIZE                                 0x1
#define _PORTWDF_PWDF2_LENGTH                               0x1
#define _PORTWDF_PWDF2_MASK                                 0x4
#define _PORTWDF_PWDF3_POSN                                 0x3
#define _PORTWDF_PWDF3_POSITION                             0x3
#define _PORTWDF_PWDF3_SIZE                                 0x1
#define _PORTWDF_PWDF3_LENGTH                               0x1
#define _PORTWDF_PWDF3_MASK                                 0x8
#define _PORTWDF_PWDF4_POSN                                 0x4
#define _PORTWDF_PWDF4_POSITION                             0x4
#define _PORTWDF_PWDF4_SIZE                                 0x1
#define _PORTWDF_PWDF4_LENGTH                               0x1
#define _PORTWDF_PWDF4_MASK                                 0x10
#define _PORTWDF_PWDF5_POSN                                 0x5
#define _PORTWDF_PWDF5_POSITION                             0x5
#define _PORTWDF_PWDF5_SIZE                                 0x1
#define _PORTWDF_PWDF5_LENGTH                               0x1
#define _PORTWDF_PWDF5_MASK                                 0x20
#define _PORTWDF_PWDF6_POSN                                 0x6
#define _PORTWDF_PWDF6_POSITION                             0x6
#define _PORTWDF_PWDF6_SIZE                                 0x1
#define _PORTWDF_PWDF6_LENGTH                               0x1
#define _PORTWDF_PWDF6_MASK                                 0x40
#define _PORTWDF_PWDF7_POSN                                 0x7
#define _PORTWDF_PWDF7_POSITION                             0x7
#define _PORTWDF_PWDF7_SIZE                                 0x1
#define _PORTWDF_PWDF7_LENGTH                               0x1
#define _PORTWDF_PWDF7_MASK                                 0x80
#define _PORTWDF_DF_POSN                                    0x0
#define _PORTWDF_DF_POSITION                                0x0
#define _PORTWDF_DF_SIZE                                    0x8
#define _PORTWDF_DF_LENGTH                                  0x8
#define _PORTWDF_DF_MASK                                    0xFF
#define _PORTWDF_PWDF_POSN                                  0x0
#define _PORTWDF_PWDF_POSITION                              0x0
#define _PORTWDF_PWDF_SIZE                                  0x8
#define _PORTWDF_PWDF_LENGTH                                0x8
#define _PORTWDF_PWDF_MASK                                  0xFF

// Register: PORTWCON
#define PORTWCON PORTWCON
extern volatile unsigned char           PORTWCON            __at(0x4A5);
#ifndef _LIB_BUILD
asm("PORTWCON equ 04A5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned CLKEN                  :1;
    };
} PORTWCONbits_t;
extern volatile PORTWCONbits_t PORTWCONbits __at(0x4A5);
// bitfield macros
#define _PORTWCON_CLKEN_POSN                                0x0
#define _PORTWCON_CLKEN_POSITION                            0x0
#define _PORTWCON_CLKEN_SIZE                                0x1
#define _PORTWCON_CLKEN_LENGTH                              0x1
#define _PORTWCON_CLKEN_MASK                                0x1

// Register: MVIOSTAT
#define MVIOSTAT MVIOSTAT
extern volatile unsigned char           MVIOSTAT            __at(0x4A6);
#ifndef _LIB_BUILD
asm("MVIOSTAT equ 04A6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned VDDIO2RDY              :1;
    };
} MVIOSTATbits_t;
extern volatile MVIOSTATbits_t MVIOSTATbits __at(0x4A6);
// bitfield macros
#define _MVIOSTAT_VDDIO2RDY_POSN                            0x0
#define _MVIOSTAT_VDDIO2RDY_POSITION                        0x0
#define _MVIOSTAT_VDDIO2RDY_SIZE                            0x1
#define _MVIOSTAT_VDDIO2RDY_LENGTH                          0x1
#define _MVIOSTAT_VDDIO2RDY_MASK                            0x1

// Register: STATUS
#define STATUS STATUS
extern volatile unsigned char           STATUS              __at(0x4D8);
#ifndef _LIB_BUILD
asm("STATUS equ 04D8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned C                      :1;
        unsigned DC                     :1;
        unsigned Z                      :1;
        unsigned OV                     :1;
        unsigned N                      :1;
        unsigned PD                     :1;
        unsigned TO                     :1;
    };
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits __at(0x4D8);
// bitfield macros
#define _STATUS_C_POSN                                      0x0
#define _STATUS_C_POSITION                                  0x0
#define _STATUS_C_SIZE                                      0x1
#define _STATUS_C_LENGTH                                    0x1
#define _STATUS_C_MASK                                      0x1
#define _STATUS_DC_POSN                                     0x1
#define _STATUS_DC_POSITION                                 0x1
#define _STATUS_DC_SIZE                                     0x1
#define _STATUS_DC_LENGTH                                   0x1
#define _STATUS_DC_MASK                                     0x2
#define _STATUS_Z_POSN                                      0x2
#define _STATUS_Z_POSITION                                  0x2
#define _STATUS_Z_SIZE                                      0x1
#define _STATUS_Z_LENGTH                                    0x1
#define _STATUS_Z_MASK                                      0x4
#define _STATUS_OV_POSN                                     0x3
#define _STATUS_OV_POSITION                                 0x3
#define _STATUS_OV_SIZE                                     0x1
#define _STATUS_OV_LENGTH                                   0x1
#define _STATUS_OV_MASK                                     0x8
#define _STATUS_N_POSN                                      0x4
#define _STATUS_N_POSITION                                  0x4
#define _STATUS_N_SIZE                                      0x1
#define _STATUS_N_LENGTH                                    0x1
#define _STATUS_N_MASK                                      0x10
#define _STATUS_PD_POSN                                     0x5
#define _STATUS_PD_POSITION                                 0x5
#define _STATUS_PD_SIZE                                     0x1
#define _STATUS_PD_LENGTH                                   0x1
#define _STATUS_PD_MASK                                     0x20
#define _STATUS_TO_POSN                                     0x6
#define _STATUS_TO_POSITION                                 0x6
#define _STATUS_TO_SIZE                                     0x1
#define _STATUS_TO_LENGTH                                   0x1
#define _STATUS_TO_MASK                                     0x40

// Register: FSR2
#define FSR2 FSR2
extern volatile unsigned short          FSR2                __at(0x4D9);
#ifndef _LIB_BUILD
asm("FSR2 equ 04D9h");
#endif

// Register: FSR2L
#define FSR2L FSR2L
extern volatile unsigned char           FSR2L               __at(0x4D9);
#ifndef _LIB_BUILD
asm("FSR2L equ 04D9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR2L                  :8;
    };
} FSR2Lbits_t;
extern volatile FSR2Lbits_t FSR2Lbits __at(0x4D9);
// bitfield macros
#define _FSR2L_FSR2L_POSN                                   0x0
#define _FSR2L_FSR2L_POSITION                               0x0
#define _FSR2L_FSR2L_SIZE                                   0x8
#define _FSR2L_FSR2L_LENGTH                                 0x8
#define _FSR2L_FSR2L_MASK                                   0xFF

// Register: FSR2H
#define FSR2H FSR2H
extern volatile unsigned char           FSR2H               __at(0x4DA);
#ifndef _LIB_BUILD
asm("FSR2H equ 04DAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR2H                  :6;
    };
} FSR2Hbits_t;
extern volatile FSR2Hbits_t FSR2Hbits __at(0x4DA);
// bitfield macros
#define _FSR2H_FSR2H_POSN                                   0x0
#define _FSR2H_FSR2H_POSITION                               0x0
#define _FSR2H_FSR2H_SIZE                                   0x6
#define _FSR2H_FSR2H_LENGTH                                 0x6
#define _FSR2H_FSR2H_MASK                                   0x3F

// Register: PLUSW2
#define PLUSW2 PLUSW2
extern volatile unsigned char           PLUSW2              __at(0x4DB);
#ifndef _LIB_BUILD
asm("PLUSW2 equ 04DBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLUSW2                 :8;
    };
} PLUSW2bits_t;
extern volatile PLUSW2bits_t PLUSW2bits __at(0x4DB);
// bitfield macros
#define _PLUSW2_PLUSW2_POSN                                 0x0
#define _PLUSW2_PLUSW2_POSITION                             0x0
#define _PLUSW2_PLUSW2_SIZE                                 0x8
#define _PLUSW2_PLUSW2_LENGTH                               0x8
#define _PLUSW2_PLUSW2_MASK                                 0xFF

// Register: PREINC2
#define PREINC2 PREINC2
extern volatile unsigned char           PREINC2             __at(0x4DC);
#ifndef _LIB_BUILD
asm("PREINC2 equ 04DCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREINC2                :8;
    };
} PREINC2bits_t;
extern volatile PREINC2bits_t PREINC2bits __at(0x4DC);
// bitfield macros
#define _PREINC2_PREINC2_POSN                               0x0
#define _PREINC2_PREINC2_POSITION                           0x0
#define _PREINC2_PREINC2_SIZE                               0x8
#define _PREINC2_PREINC2_LENGTH                             0x8
#define _PREINC2_PREINC2_MASK                               0xFF

// Register: POSTDEC2
#define POSTDEC2 POSTDEC2
extern volatile unsigned char           POSTDEC2            __at(0x4DD);
#ifndef _LIB_BUILD
asm("POSTDEC2 equ 04DDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTDEC2               :8;
    };
} POSTDEC2bits_t;
extern volatile POSTDEC2bits_t POSTDEC2bits __at(0x4DD);
// bitfield macros
#define _POSTDEC2_POSTDEC2_POSN                             0x0
#define _POSTDEC2_POSTDEC2_POSITION                         0x0
#define _POSTDEC2_POSTDEC2_SIZE                             0x8
#define _POSTDEC2_POSTDEC2_LENGTH                           0x8
#define _POSTDEC2_POSTDEC2_MASK                             0xFF

// Register: POSTINC2
#define POSTINC2 POSTINC2
extern volatile unsigned char           POSTINC2            __at(0x4DE);
#ifndef _LIB_BUILD
asm("POSTINC2 equ 04DEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTINC2               :8;
    };
} POSTINC2bits_t;
extern volatile POSTINC2bits_t POSTINC2bits __at(0x4DE);
// bitfield macros
#define _POSTINC2_POSTINC2_POSN                             0x0
#define _POSTINC2_POSTINC2_POSITION                         0x0
#define _POSTINC2_POSTINC2_SIZE                             0x8
#define _POSTINC2_POSTINC2_LENGTH                           0x8
#define _POSTINC2_POSTINC2_MASK                             0xFF

// Register: INDF2
#define INDF2 INDF2
extern volatile unsigned char           INDF2               __at(0x4DF);
#ifndef _LIB_BUILD
asm("INDF2 equ 04DFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF2                  :8;
    };
} INDF2bits_t;
extern volatile INDF2bits_t INDF2bits __at(0x4DF);
// bitfield macros
#define _INDF2_INDF2_POSN                                   0x0
#define _INDF2_INDF2_POSITION                               0x0
#define _INDF2_INDF2_SIZE                                   0x8
#define _INDF2_INDF2_LENGTH                                 0x8
#define _INDF2_INDF2_MASK                                   0xFF

// Register: BSR
#define BSR BSR
extern volatile unsigned char           BSR                 __at(0x4E0);
#ifndef _LIB_BUILD
asm("BSR equ 04E0h");
#endif

// Register: FSR1
#define FSR1 FSR1
extern volatile unsigned short          FSR1                __at(0x4E1);
#ifndef _LIB_BUILD
asm("FSR1 equ 04E1h");
#endif

// Register: FSR1L
#define FSR1L FSR1L
extern volatile unsigned char           FSR1L               __at(0x4E1);
#ifndef _LIB_BUILD
asm("FSR1L equ 04E1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1L                  :8;
    };
} FSR1Lbits_t;
extern volatile FSR1Lbits_t FSR1Lbits __at(0x4E1);
// bitfield macros
#define _FSR1L_FSR1L_POSN                                   0x0
#define _FSR1L_FSR1L_POSITION                               0x0
#define _FSR1L_FSR1L_SIZE                                   0x8
#define _FSR1L_FSR1L_LENGTH                                 0x8
#define _FSR1L_FSR1L_MASK                                   0xFF

// Register: FSR1H
#define FSR1H FSR1H
extern volatile unsigned char           FSR1H               __at(0x4E2);
#ifndef _LIB_BUILD
asm("FSR1H equ 04E2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR1H                  :6;
    };
} FSR1Hbits_t;
extern volatile FSR1Hbits_t FSR1Hbits __at(0x4E2);
// bitfield macros
#define _FSR1H_FSR1H_POSN                                   0x0
#define _FSR1H_FSR1H_POSITION                               0x0
#define _FSR1H_FSR1H_SIZE                                   0x6
#define _FSR1H_FSR1H_LENGTH                                 0x6
#define _FSR1H_FSR1H_MASK                                   0x3F

// Register: PLUSW1
#define PLUSW1 PLUSW1
extern volatile unsigned char           PLUSW1              __at(0x4E3);
#ifndef _LIB_BUILD
asm("PLUSW1 equ 04E3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLUSW1                 :8;
    };
} PLUSW1bits_t;
extern volatile PLUSW1bits_t PLUSW1bits __at(0x4E3);
// bitfield macros
#define _PLUSW1_PLUSW1_POSN                                 0x0
#define _PLUSW1_PLUSW1_POSITION                             0x0
#define _PLUSW1_PLUSW1_SIZE                                 0x8
#define _PLUSW1_PLUSW1_LENGTH                               0x8
#define _PLUSW1_PLUSW1_MASK                                 0xFF

// Register: PREINC1
#define PREINC1 PREINC1
extern volatile unsigned char           PREINC1             __at(0x4E4);
#ifndef _LIB_BUILD
asm("PREINC1 equ 04E4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREINC1                :8;
    };
} PREINC1bits_t;
extern volatile PREINC1bits_t PREINC1bits __at(0x4E4);
// bitfield macros
#define _PREINC1_PREINC1_POSN                               0x0
#define _PREINC1_PREINC1_POSITION                           0x0
#define _PREINC1_PREINC1_SIZE                               0x8
#define _PREINC1_PREINC1_LENGTH                             0x8
#define _PREINC1_PREINC1_MASK                               0xFF

// Register: POSTDEC1
#define POSTDEC1 POSTDEC1
extern volatile unsigned char           POSTDEC1            __at(0x4E5);
#ifndef _LIB_BUILD
asm("POSTDEC1 equ 04E5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTDEC1               :8;
    };
} POSTDEC1bits_t;
extern volatile POSTDEC1bits_t POSTDEC1bits __at(0x4E5);
// bitfield macros
#define _POSTDEC1_POSTDEC1_POSN                             0x0
#define _POSTDEC1_POSTDEC1_POSITION                         0x0
#define _POSTDEC1_POSTDEC1_SIZE                             0x8
#define _POSTDEC1_POSTDEC1_LENGTH                           0x8
#define _POSTDEC1_POSTDEC1_MASK                             0xFF

// Register: POSTINC1
#define POSTINC1 POSTINC1
extern volatile unsigned char           POSTINC1            __at(0x4E6);
#ifndef _LIB_BUILD
asm("POSTINC1 equ 04E6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTINC1               :8;
    };
} POSTINC1bits_t;
extern volatile POSTINC1bits_t POSTINC1bits __at(0x4E6);
// bitfield macros
#define _POSTINC1_POSTINC1_POSN                             0x0
#define _POSTINC1_POSTINC1_POSITION                         0x0
#define _POSTINC1_POSTINC1_SIZE                             0x8
#define _POSTINC1_POSTINC1_LENGTH                           0x8
#define _POSTINC1_POSTINC1_MASK                             0xFF

// Register: INDF1
#define INDF1 INDF1
extern volatile unsigned char           INDF1               __at(0x4E7);
#ifndef _LIB_BUILD
asm("INDF1 equ 04E7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF1                  :8;
    };
} INDF1bits_t;
extern volatile INDF1bits_t INDF1bits __at(0x4E7);
// bitfield macros
#define _INDF1_INDF1_POSN                                   0x0
#define _INDF1_INDF1_POSITION                               0x0
#define _INDF1_INDF1_SIZE                                   0x8
#define _INDF1_INDF1_LENGTH                                 0x8
#define _INDF1_INDF1_MASK                                   0xFF

// Register: WREG
#define WREG WREG
extern volatile unsigned char           WREG                __at(0x4E8);
#ifndef _LIB_BUILD
asm("WREG equ 04E8h");
#endif
// aliases
// extern volatile unsigned char           W                   __at(0x4E8);
#ifndef _LIB_BUILD
// asm("W equ 04E8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned WREG                   :8;
    };
} WREGbits_t;
extern volatile WREGbits_t WREGbits __at(0x4E8);
// bitfield macros
#define _WREG_WREG_POSN                                     0x0
#define _WREG_WREG_POSITION                                 0x0
#define _WREG_WREG_SIZE                                     0x8
#define _WREG_WREG_LENGTH                                   0x8
#define _WREG_WREG_MASK                                     0xFF
// alias bitfield definitions
typedef union {
    struct {
        unsigned WREG                   :8;
    };
} Wbits_t;
extern volatile Wbits_t Wbits __at(0x4E8);
// bitfield macros
#define _W_WREG_POSN                                        0x0
#define _W_WREG_POSITION                                    0x0
#define _W_WREG_SIZE                                        0x8
#define _W_WREG_LENGTH                                      0x8
#define _W_WREG_MASK                                        0xFF

// Register: FSR0
#define FSR0 FSR0
extern volatile unsigned short          FSR0                __at(0x4E9);
#ifndef _LIB_BUILD
asm("FSR0 equ 04E9h");
#endif

// Register: FSR0L
#define FSR0L FSR0L
extern volatile unsigned char           FSR0L               __at(0x4E9);
#ifndef _LIB_BUILD
asm("FSR0L equ 04E9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0L                  :8;
    };
} FSR0Lbits_t;
extern volatile FSR0Lbits_t FSR0Lbits __at(0x4E9);
// bitfield macros
#define _FSR0L_FSR0L_POSN                                   0x0
#define _FSR0L_FSR0L_POSITION                               0x0
#define _FSR0L_FSR0L_SIZE                                   0x8
#define _FSR0L_FSR0L_LENGTH                                 0x8
#define _FSR0L_FSR0L_MASK                                   0xFF

// Register: FSR0H
#define FSR0H FSR0H
extern volatile unsigned char           FSR0H               __at(0x4EA);
#ifndef _LIB_BUILD
asm("FSR0H equ 04EAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned FSR0H                  :6;
    };
} FSR0Hbits_t;
extern volatile FSR0Hbits_t FSR0Hbits __at(0x4EA);
// bitfield macros
#define _FSR0H_FSR0H_POSN                                   0x0
#define _FSR0H_FSR0H_POSITION                               0x0
#define _FSR0H_FSR0H_SIZE                                   0x6
#define _FSR0H_FSR0H_LENGTH                                 0x6
#define _FSR0H_FSR0H_MASK                                   0x3F

// Register: PLUSW0
#define PLUSW0 PLUSW0
extern volatile unsigned char           PLUSW0              __at(0x4EB);
#ifndef _LIB_BUILD
asm("PLUSW0 equ 04EBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PLUSW0                 :8;
    };
} PLUSW0bits_t;
extern volatile PLUSW0bits_t PLUSW0bits __at(0x4EB);
// bitfield macros
#define _PLUSW0_PLUSW0_POSN                                 0x0
#define _PLUSW0_PLUSW0_POSITION                             0x0
#define _PLUSW0_PLUSW0_SIZE                                 0x8
#define _PLUSW0_PLUSW0_LENGTH                               0x8
#define _PLUSW0_PLUSW0_MASK                                 0xFF

// Register: PREINC0
#define PREINC0 PREINC0
extern volatile unsigned char           PREINC0             __at(0x4EC);
#ifndef _LIB_BUILD
asm("PREINC0 equ 04ECh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PREINC0                :8;
    };
} PREINC0bits_t;
extern volatile PREINC0bits_t PREINC0bits __at(0x4EC);
// bitfield macros
#define _PREINC0_PREINC0_POSN                               0x0
#define _PREINC0_PREINC0_POSITION                           0x0
#define _PREINC0_PREINC0_SIZE                               0x8
#define _PREINC0_PREINC0_LENGTH                             0x8
#define _PREINC0_PREINC0_MASK                               0xFF

// Register: POSTDEC0
#define POSTDEC0 POSTDEC0
extern volatile unsigned char           POSTDEC0            __at(0x4ED);
#ifndef _LIB_BUILD
asm("POSTDEC0 equ 04EDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTDEC0               :8;
    };
} POSTDEC0bits_t;
extern volatile POSTDEC0bits_t POSTDEC0bits __at(0x4ED);
// bitfield macros
#define _POSTDEC0_POSTDEC0_POSN                             0x0
#define _POSTDEC0_POSTDEC0_POSITION                         0x0
#define _POSTDEC0_POSTDEC0_SIZE                             0x8
#define _POSTDEC0_POSTDEC0_LENGTH                           0x8
#define _POSTDEC0_POSTDEC0_MASK                             0xFF

// Register: POSTINC0
#define POSTINC0 POSTINC0
extern volatile unsigned char           POSTINC0            __at(0x4EE);
#ifndef _LIB_BUILD
asm("POSTINC0 equ 04EEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned POSTINC0               :8;
    };
} POSTINC0bits_t;
extern volatile POSTINC0bits_t POSTINC0bits __at(0x4EE);
// bitfield macros
#define _POSTINC0_POSTINC0_POSN                             0x0
#define _POSTINC0_POSTINC0_POSITION                         0x0
#define _POSTINC0_POSTINC0_SIZE                             0x8
#define _POSTINC0_POSTINC0_LENGTH                           0x8
#define _POSTINC0_POSTINC0_MASK                             0xFF

// Register: INDF0
#define INDF0 INDF0
extern volatile unsigned char           INDF0               __at(0x4EF);
#ifndef _LIB_BUILD
asm("INDF0 equ 04EFh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned INDF0                  :8;
    };
} INDF0bits_t;
extern volatile INDF0bits_t INDF0bits __at(0x4EF);
// bitfield macros
#define _INDF0_INDF0_POSN                                   0x0
#define _INDF0_INDF0_POSITION                               0x0
#define _INDF0_INDF0_SIZE                                   0x8
#define _INDF0_INDF0_LENGTH                                 0x8
#define _INDF0_INDF0_MASK                                   0xFF

// Register: PCON0
#define PCON0 PCON0
extern volatile unsigned char           PCON0               __at(0x4F0);
#ifndef _LIB_BUILD
asm("PCON0 equ 04F0h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NOT_BOR                :1;
    };
    struct {
        unsigned                        :1;
        unsigned NOT_POR                :1;
    };
    struct {
        unsigned                        :2;
        unsigned NOT_RI                 :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_RMCLR              :1;
    };
    struct {
        unsigned                        :4;
        unsigned NOT_RWDT               :1;
    };
    struct {
        unsigned                        :5;
        unsigned NOT_WDTWV              :1;
    };
    struct {
        unsigned nBOR                   :1;
        unsigned nPOR                   :1;
        unsigned nRI                    :1;
        unsigned nRMCLR                 :1;
        unsigned nRWDT                  :1;
        unsigned nWDTWV                 :1;
        unsigned STKUNF                 :1;
        unsigned STKOVF                 :1;
    };
    struct {
        unsigned BOR                    :1;
        unsigned POR                    :1;
        unsigned RI                     :1;
        unsigned RMCLR                  :1;
        unsigned RWDT                   :1;
        unsigned WDTWV                  :1;
    };
} PCON0bits_t;
extern volatile PCON0bits_t PCON0bits __at(0x4F0);
// bitfield macros
#define _PCON0_NOT_BOR_POSN                                 0x0
#define _PCON0_NOT_BOR_POSITION                             0x0
#define _PCON0_NOT_BOR_SIZE                                 0x1
#define _PCON0_NOT_BOR_LENGTH                               0x1
#define _PCON0_NOT_BOR_MASK                                 0x1
#define _PCON0_NOT_POR_POSN                                 0x1
#define _PCON0_NOT_POR_POSITION                             0x1
#define _PCON0_NOT_POR_SIZE                                 0x1
#define _PCON0_NOT_POR_LENGTH                               0x1
#define _PCON0_NOT_POR_MASK                                 0x2
#define _PCON0_NOT_RI_POSN                                  0x2
#define _PCON0_NOT_RI_POSITION                              0x2
#define _PCON0_NOT_RI_SIZE                                  0x1
#define _PCON0_NOT_RI_LENGTH                                0x1
#define _PCON0_NOT_RI_MASK                                  0x4
#define _PCON0_NOT_RMCLR_POSN                               0x3
#define _PCON0_NOT_RMCLR_POSITION                           0x3
#define _PCON0_NOT_RMCLR_SIZE                               0x1
#define _PCON0_NOT_RMCLR_LENGTH                             0x1
#define _PCON0_NOT_RMCLR_MASK                               0x8
#define _PCON0_NOT_RWDT_POSN                                0x4
#define _PCON0_NOT_RWDT_POSITION                            0x4
#define _PCON0_NOT_RWDT_SIZE                                0x1
#define _PCON0_NOT_RWDT_LENGTH                              0x1
#define _PCON0_NOT_RWDT_MASK                                0x10
#define _PCON0_NOT_WDTWV_POSN                               0x5
#define _PCON0_NOT_WDTWV_POSITION                           0x5
#define _PCON0_NOT_WDTWV_SIZE                               0x1
#define _PCON0_NOT_WDTWV_LENGTH                             0x1
#define _PCON0_NOT_WDTWV_MASK                               0x20
#define _PCON0_nBOR_POSN                                    0x0
#define _PCON0_nBOR_POSITION                                0x0
#define _PCON0_nBOR_SIZE                                    0x1
#define _PCON0_nBOR_LENGTH                                  0x1
#define _PCON0_nBOR_MASK                                    0x1
#define _PCON0_nPOR_POSN                                    0x1
#define _PCON0_nPOR_POSITION                                0x1
#define _PCON0_nPOR_SIZE                                    0x1
#define _PCON0_nPOR_LENGTH                                  0x1
#define _PCON0_nPOR_MASK                                    0x2
#define _PCON0_nRI_POSN                                     0x2
#define _PCON0_nRI_POSITION                                 0x2
#define _PCON0_nRI_SIZE                                     0x1
#define _PCON0_nRI_LENGTH                                   0x1
#define _PCON0_nRI_MASK                                     0x4
#define _PCON0_nRMCLR_POSN                                  0x3
#define _PCON0_nRMCLR_POSITION                              0x3
#define _PCON0_nRMCLR_SIZE                                  0x1
#define _PCON0_nRMCLR_LENGTH                                0x1
#define _PCON0_nRMCLR_MASK                                  0x8
#define _PCON0_nRWDT_POSN                                   0x4
#define _PCON0_nRWDT_POSITION                               0x4
#define _PCON0_nRWDT_SIZE                                   0x1
#define _PCON0_nRWDT_LENGTH                                 0x1
#define _PCON0_nRWDT_MASK                                   0x10
#define _PCON0_nWDTWV_POSN                                  0x5
#define _PCON0_nWDTWV_POSITION                              0x5
#define _PCON0_nWDTWV_SIZE                                  0x1
#define _PCON0_nWDTWV_LENGTH                                0x1
#define _PCON0_nWDTWV_MASK                                  0x20
#define _PCON0_STKUNF_POSN                                  0x6
#define _PCON0_STKUNF_POSITION                              0x6
#define _PCON0_STKUNF_SIZE                                  0x1
#define _PCON0_STKUNF_LENGTH                                0x1
#define _PCON0_STKUNF_MASK                                  0x40
#define _PCON0_STKOVF_POSN                                  0x7
#define _PCON0_STKOVF_POSITION                              0x7
#define _PCON0_STKOVF_SIZE                                  0x1
#define _PCON0_STKOVF_LENGTH                                0x1
#define _PCON0_STKOVF_MASK                                  0x80
#define _PCON0_BOR_POSN                                     0x0
#define _PCON0_BOR_POSITION                                 0x0
#define _PCON0_BOR_SIZE                                     0x1
#define _PCON0_BOR_LENGTH                                   0x1
#define _PCON0_BOR_MASK                                     0x1
#define _PCON0_POR_POSN                                     0x1
#define _PCON0_POR_POSITION                                 0x1
#define _PCON0_POR_SIZE                                     0x1
#define _PCON0_POR_LENGTH                                   0x1
#define _PCON0_POR_MASK                                     0x2
#define _PCON0_RI_POSN                                      0x2
#define _PCON0_RI_POSITION                                  0x2
#define _PCON0_RI_SIZE                                      0x1
#define _PCON0_RI_LENGTH                                    0x1
#define _PCON0_RI_MASK                                      0x4
#define _PCON0_RMCLR_POSN                                   0x3
#define _PCON0_RMCLR_POSITION                               0x3
#define _PCON0_RMCLR_SIZE                                   0x1
#define _PCON0_RMCLR_LENGTH                                 0x1
#define _PCON0_RMCLR_MASK                                   0x8
#define _PCON0_RWDT_POSN                                    0x4
#define _PCON0_RWDT_POSITION                                0x4
#define _PCON0_RWDT_SIZE                                    0x1
#define _PCON0_RWDT_LENGTH                                  0x1
#define _PCON0_RWDT_MASK                                    0x10
#define _PCON0_WDTWV_POSN                                   0x5
#define _PCON0_WDTWV_POSITION                               0x5
#define _PCON0_WDTWV_SIZE                                   0x1
#define _PCON0_WDTWV_LENGTH                                 0x1
#define _PCON0_WDTWV_MASK                                   0x20

// Register: PCON1
#define PCON1 PCON1
extern volatile unsigned char           PCON1               __at(0x4F1);
#ifndef _LIB_BUILD
asm("PCON1 equ 04F1h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned NOT_RCM                :1;
    };
    struct {
        unsigned                        :1;
        unsigned NOT_MEMV               :1;
    };
    struct {
        unsigned                        :2;
        unsigned NOT_RVREG              :1;
    };
    struct {
        unsigned                        :3;
        unsigned NOT_PORVDDIO2          :1;
    };
    struct {
        unsigned nRCM                   :1;
        unsigned nMEMV                  :1;
        unsigned nRVREG                 :1;
        unsigned nPORVDDIO2             :1;
    };
    struct {
        unsigned RCM                    :1;
        unsigned MEMV                   :1;
        unsigned RVREG                  :1;
        unsigned PORVDDIO2              :1;
    };
} PCON1bits_t;
extern volatile PCON1bits_t PCON1bits __at(0x4F1);
// bitfield macros
#define _PCON1_NOT_RCM_POSN                                 0x0
#define _PCON1_NOT_RCM_POSITION                             0x0
#define _PCON1_NOT_RCM_SIZE                                 0x1
#define _PCON1_NOT_RCM_LENGTH                               0x1
#define _PCON1_NOT_RCM_MASK                                 0x1
#define _PCON1_NOT_MEMV_POSN                                0x1
#define _PCON1_NOT_MEMV_POSITION                            0x1
#define _PCON1_NOT_MEMV_SIZE                                0x1
#define _PCON1_NOT_MEMV_LENGTH                              0x1
#define _PCON1_NOT_MEMV_MASK                                0x2
#define _PCON1_NOT_RVREG_POSN                               0x2
#define _PCON1_NOT_RVREG_POSITION                           0x2
#define _PCON1_NOT_RVREG_SIZE                               0x1
#define _PCON1_NOT_RVREG_LENGTH                             0x1
#define _PCON1_NOT_RVREG_MASK                               0x4
#define _PCON1_NOT_PORVDDIO2_POSN                           0x3
#define _PCON1_NOT_PORVDDIO2_POSITION                       0x3
#define _PCON1_NOT_PORVDDIO2_SIZE                           0x1
#define _PCON1_NOT_PORVDDIO2_LENGTH                         0x1
#define _PCON1_NOT_PORVDDIO2_MASK                           0x8
#define _PCON1_nRCM_POSN                                    0x0
#define _PCON1_nRCM_POSITION                                0x0
#define _PCON1_nRCM_SIZE                                    0x1
#define _PCON1_nRCM_LENGTH                                  0x1
#define _PCON1_nRCM_MASK                                    0x1
#define _PCON1_nMEMV_POSN                                   0x1
#define _PCON1_nMEMV_POSITION                               0x1
#define _PCON1_nMEMV_SIZE                                   0x1
#define _PCON1_nMEMV_LENGTH                                 0x1
#define _PCON1_nMEMV_MASK                                   0x2
#define _PCON1_nRVREG_POSN                                  0x2
#define _PCON1_nRVREG_POSITION                              0x2
#define _PCON1_nRVREG_SIZE                                  0x1
#define _PCON1_nRVREG_LENGTH                                0x1
#define _PCON1_nRVREG_MASK                                  0x4
#define _PCON1_nPORVDDIO2_POSN                              0x3
#define _PCON1_nPORVDDIO2_POSITION                          0x3
#define _PCON1_nPORVDDIO2_SIZE                              0x1
#define _PCON1_nPORVDDIO2_LENGTH                            0x1
#define _PCON1_nPORVDDIO2_MASK                              0x8
#define _PCON1_RCM_POSN                                     0x0
#define _PCON1_RCM_POSITION                                 0x0
#define _PCON1_RCM_SIZE                                     0x1
#define _PCON1_RCM_LENGTH                                   0x1
#define _PCON1_RCM_MASK                                     0x1
#define _PCON1_MEMV_POSN                                    0x1
#define _PCON1_MEMV_POSITION                                0x1
#define _PCON1_MEMV_SIZE                                    0x1
#define _PCON1_MEMV_LENGTH                                  0x1
#define _PCON1_MEMV_MASK                                    0x2
#define _PCON1_RVREG_POSN                                   0x2
#define _PCON1_RVREG_POSITION                               0x2
#define _PCON1_RVREG_SIZE                                   0x1
#define _PCON1_RVREG_LENGTH                                 0x1
#define _PCON1_RVREG_MASK                                   0x4
#define _PCON1_PORVDDIO2_POSN                               0x3
#define _PCON1_PORVDDIO2_POSITION                           0x3
#define _PCON1_PORVDDIO2_SIZE                               0x1
#define _PCON1_PORVDDIO2_LENGTH                             0x1
#define _PCON1_PORVDDIO2_MASK                               0x8

// Register: CPUDOZE
#define CPUDOZE CPUDOZE
extern volatile unsigned char           CPUDOZE             __at(0x4F2);
#ifndef _LIB_BUILD
asm("CPUDOZE equ 04F2h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned DOZE                   :3;
        unsigned                        :1;
        unsigned DOE                    :1;
        unsigned ROI                    :1;
        unsigned DOZEN                  :1;
        unsigned IDLEN                  :1;
    };
    struct {
        unsigned DOZE0                  :1;
        unsigned DOZE1                  :1;
        unsigned DOZE2                  :1;
    };
} CPUDOZEbits_t;
extern volatile CPUDOZEbits_t CPUDOZEbits __at(0x4F2);
// bitfield macros
#define _CPUDOZE_DOZE_POSN                                  0x0
#define _CPUDOZE_DOZE_POSITION                              0x0
#define _CPUDOZE_DOZE_SIZE                                  0x3
#define _CPUDOZE_DOZE_LENGTH                                0x3
#define _CPUDOZE_DOZE_MASK                                  0x7
#define _CPUDOZE_DOE_POSN                                   0x4
#define _CPUDOZE_DOE_POSITION                               0x4
#define _CPUDOZE_DOE_SIZE                                   0x1
#define _CPUDOZE_DOE_LENGTH                                 0x1
#define _CPUDOZE_DOE_MASK                                   0x10
#define _CPUDOZE_ROI_POSN                                   0x5
#define _CPUDOZE_ROI_POSITION                               0x5
#define _CPUDOZE_ROI_SIZE                                   0x1
#define _CPUDOZE_ROI_LENGTH                                 0x1
#define _CPUDOZE_ROI_MASK                                   0x20
#define _CPUDOZE_DOZEN_POSN                                 0x6
#define _CPUDOZE_DOZEN_POSITION                             0x6
#define _CPUDOZE_DOZEN_SIZE                                 0x1
#define _CPUDOZE_DOZEN_LENGTH                               0x1
#define _CPUDOZE_DOZEN_MASK                                 0x40
#define _CPUDOZE_IDLEN_POSN                                 0x7
#define _CPUDOZE_IDLEN_POSITION                             0x7
#define _CPUDOZE_IDLEN_SIZE                                 0x1
#define _CPUDOZE_IDLEN_LENGTH                               0x1
#define _CPUDOZE_IDLEN_MASK                                 0x80
#define _CPUDOZE_DOZE0_POSN                                 0x0
#define _CPUDOZE_DOZE0_POSITION                             0x0
#define _CPUDOZE_DOZE0_SIZE                                 0x1
#define _CPUDOZE_DOZE0_LENGTH                               0x1
#define _CPUDOZE_DOZE0_MASK                                 0x1
#define _CPUDOZE_DOZE1_POSN                                 0x1
#define _CPUDOZE_DOZE1_POSITION                             0x1
#define _CPUDOZE_DOZE1_SIZE                                 0x1
#define _CPUDOZE_DOZE1_LENGTH                               0x1
#define _CPUDOZE_DOZE1_MASK                                 0x2
#define _CPUDOZE_DOZE2_POSN                                 0x2
#define _CPUDOZE_DOZE2_POSITION                             0x2
#define _CPUDOZE_DOZE2_SIZE                                 0x1
#define _CPUDOZE_DOZE2_LENGTH                               0x1
#define _CPUDOZE_DOZE2_MASK                                 0x4

// Register: PROD
#define PROD PROD
extern volatile unsigned short          PROD                __at(0x4F3);
#ifndef _LIB_BUILD
asm("PROD equ 04F3h");
#endif

// Register: PRODL
#define PRODL PRODL
extern volatile unsigned char           PRODL               __at(0x4F3);
#ifndef _LIB_BUILD
asm("PRODL equ 04F3h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRODL                  :8;
    };
} PRODLbits_t;
extern volatile PRODLbits_t PRODLbits __at(0x4F3);
// bitfield macros
#define _PRODL_PRODL_POSN                                   0x0
#define _PRODL_PRODL_POSITION                               0x0
#define _PRODL_PRODL_SIZE                                   0x8
#define _PRODL_PRODL_LENGTH                                 0x8
#define _PRODL_PRODL_MASK                                   0xFF

// Register: PRODH
#define PRODH PRODH
extern volatile unsigned char           PRODH               __at(0x4F4);
#ifndef _LIB_BUILD
asm("PRODH equ 04F4h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PRODH                  :8;
    };
} PRODHbits_t;
extern volatile PRODHbits_t PRODHbits __at(0x4F4);
// bitfield macros
#define _PRODH_PRODH_POSN                                   0x0
#define _PRODH_PRODH_POSITION                               0x0
#define _PRODH_PRODH_SIZE                                   0x8
#define _PRODH_PRODH_LENGTH                                 0x8
#define _PRODH_PRODH_MASK                                   0xFF

// Register: TABLAT
#define TABLAT TABLAT
extern volatile unsigned char           TABLAT              __at(0x4F5);
#ifndef _LIB_BUILD
asm("TABLAT equ 04F5h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TABLAT                 :8;
    };
} TABLATbits_t;
extern volatile TABLATbits_t TABLATbits __at(0x4F5);
// bitfield macros
#define _TABLAT_TABLAT_POSN                                 0x0
#define _TABLAT_TABLAT_POSITION                             0x0
#define _TABLAT_TABLAT_SIZE                                 0x8
#define _TABLAT_TABLAT_LENGTH                               0x8
#define _TABLAT_TABLAT_MASK                                 0xFF

// Register: TBLPTR
#define TBLPTR TBLPTR
#ifndef __CCI__
extern volatile __uint24                TBLPTR              __at(0x4F6);
#endif
#ifndef _LIB_BUILD
asm("TBLPTR equ 04F6h");
#endif

// Register: TBLPTRL
#define TBLPTRL TBLPTRL
extern volatile unsigned char           TBLPTRL             __at(0x4F6);
#ifndef _LIB_BUILD
asm("TBLPTRL equ 04F6h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TBLPTRL                :8;
    };
} TBLPTRLbits_t;
extern volatile TBLPTRLbits_t TBLPTRLbits __at(0x4F6);
// bitfield macros
#define _TBLPTRL_TBLPTRL_POSN                               0x0
#define _TBLPTRL_TBLPTRL_POSITION                           0x0
#define _TBLPTRL_TBLPTRL_SIZE                               0x8
#define _TBLPTRL_TBLPTRL_LENGTH                             0x8
#define _TBLPTRL_TBLPTRL_MASK                               0xFF

// Register: TBLPTRH
#define TBLPTRH TBLPTRH
extern volatile unsigned char           TBLPTRH             __at(0x4F7);
#ifndef _LIB_BUILD
asm("TBLPTRH equ 04F7h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TBLPTRH                :8;
    };
} TBLPTRHbits_t;
extern volatile TBLPTRHbits_t TBLPTRHbits __at(0x4F7);
// bitfield macros
#define _TBLPTRH_TBLPTRH_POSN                               0x0
#define _TBLPTRH_TBLPTRH_POSITION                           0x0
#define _TBLPTRH_TBLPTRH_SIZE                               0x8
#define _TBLPTRH_TBLPTRH_LENGTH                             0x8
#define _TBLPTRH_TBLPTRH_MASK                               0xFF

// Register: TBLPTRU
#define TBLPTRU TBLPTRU
extern volatile unsigned char           TBLPTRU             __at(0x4F8);
#ifndef _LIB_BUILD
asm("TBLPTRU equ 04F8h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TBLPTRU                :6;
    };
} TBLPTRUbits_t;
extern volatile TBLPTRUbits_t TBLPTRUbits __at(0x4F8);
// bitfield macros
#define _TBLPTRU_TBLPTRU_POSN                               0x0
#define _TBLPTRU_TBLPTRU_POSITION                           0x0
#define _TBLPTRU_TBLPTRU_SIZE                               0x6
#define _TBLPTRU_TBLPTRU_LENGTH                             0x6
#define _TBLPTRU_TBLPTRU_MASK                               0x3F

// Register: PCLAT
#define PCLAT PCLAT
#ifndef __CCI__
extern volatile __uint24                PCLAT               __at(0x4F9);
#endif
#ifndef _LIB_BUILD
asm("PCLAT equ 04F9h");
#endif

// Register: PCL
#define PCL PCL
extern volatile unsigned char           PCL                 __at(0x4F9);
#ifndef _LIB_BUILD
asm("PCL equ 04F9h");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PC                     :8;
    };
} PCLbits_t;
extern volatile PCLbits_t PCLbits __at(0x4F9);
// bitfield macros
#define _PCL_PC_POSN                                        0x0
#define _PCL_PC_POSITION                                    0x0
#define _PCL_PC_SIZE                                        0x8
#define _PCL_PC_LENGTH                                      0x8
#define _PCL_PC_MASK                                        0xFF

// Register: PCLATH
#define PCLATH PCLATH
extern volatile unsigned char           PCLATH              __at(0x4FA);
#ifndef _LIB_BUILD
asm("PCLATH equ 04FAh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCH                    :8;
    };
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits __at(0x4FA);
// bitfield macros
#define _PCLATH_PCH_POSN                                    0x0
#define _PCLATH_PCH_POSITION                                0x0
#define _PCLATH_PCH_SIZE                                    0x8
#define _PCLATH_PCH_LENGTH                                  0x8
#define _PCLATH_PCH_MASK                                    0xFF

// Register: PCLATU
#define PCLATU PCLATU
extern volatile unsigned char           PCLATU              __at(0x4FB);
#ifndef _LIB_BUILD
asm("PCLATU equ 04FBh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned PCU                    :5;
    };
} PCLATUbits_t;
extern volatile PCLATUbits_t PCLATUbits __at(0x4FB);
// bitfield macros
#define _PCLATU_PCU_POSN                                    0x0
#define _PCLATU_PCU_POSITION                                0x0
#define _PCLATU_PCU_SIZE                                    0x5
#define _PCLATU_PCU_LENGTH                                  0x5
#define _PCLATU_PCU_MASK                                    0x1F

// Register: STKPTR
#define STKPTR STKPTR
extern volatile unsigned char           STKPTR              __at(0x4FC);
#ifndef _LIB_BUILD
asm("STKPTR equ 04FCh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned STKPTR                 :7;
    };
} STKPTRbits_t;
extern volatile STKPTRbits_t STKPTRbits __at(0x4FC);
// bitfield macros
#define _STKPTR_STKPTR_POSN                                 0x0
#define _STKPTR_STKPTR_POSITION                             0x0
#define _STKPTR_STKPTR_SIZE                                 0x7
#define _STKPTR_STKPTR_LENGTH                               0x7
#define _STKPTR_STKPTR_MASK                                 0x7F

// Register: TOS
#define TOS TOS
#ifndef __CCI__
extern volatile __uint24                TOS                 __at(0x4FD);
#endif
#ifndef _LIB_BUILD
asm("TOS equ 04FDh");
#endif

// Register: TOSL
#define TOSL TOSL
extern volatile unsigned char           TOSL                __at(0x4FD);
#ifndef _LIB_BUILD
asm("TOSL equ 04FDh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSL                   :8;
    };
} TOSLbits_t;
extern volatile TOSLbits_t TOSLbits __at(0x4FD);
// bitfield macros
#define _TOSL_TOSL_POSN                                     0x0
#define _TOSL_TOSL_POSITION                                 0x0
#define _TOSL_TOSL_SIZE                                     0x8
#define _TOSL_TOSL_LENGTH                                   0x8
#define _TOSL_TOSL_MASK                                     0xFF

// Register: TOSH
#define TOSH TOSH
extern volatile unsigned char           TOSH                __at(0x4FE);
#ifndef _LIB_BUILD
asm("TOSH equ 04FEh");
#endif
// bitfield definitions
typedef union {
    struct {
        unsigned TOSH                   :8;
    };
} TOSHbits_t;
extern volatile TOSHbits_t TOSHbits __at(0x4FE);
// bitfield macros
#define _TOSH_TOSH_POSN                                     0x0
#define _TOSH_TOSH_POSITION                                 0x0
#define _TOSH_TOSH_SIZE                                     0x8
#define _TOSH_TOSH_LENGTH                                   0x8
#define _TOSH_TOSH_MASK                                     0xFF

// Register: TOSU
#define TOSU TOSU
extern volatile unsigned char           TOSU                __at(0x4FF);
#ifndef _LIB_BUILD
asm("TOSU equ 04FFh");
#endif

/*
 * Register Mirrors in DMA Space
 */

// Register: CCPR1L
#define                                 CCPR1L_M1           0x4000
// Register: CCPR1H
#define                                 CCPR1H_M1           0x4001
// Register: CCPR2L
#define                                 CCPR2L_M1           0x4002
// Register: CCPR2H
#define                                 CCPR2H_M1           0x4003
// Register: PWM1S1P1L
#define                                 PWM1S1P1L_M1        0x4006
// Register: PWM1S1P1H
#define                                 PWM1S1P1H_M1        0x4007
// Register: PWM2S1P1L
#define                                 PWM2S1P1L_M1        0x4008
// Register: PWM2S1P1H
#define                                 PWM2S1P1H_M1        0x4009
// Register: PWM1S1P1L
#define                                 PWM1S1P1L_M2        0x4010
// Register: PWM1S1P1H
#define                                 PWM1S1P1H_M2        0x4011
// Register: PWM1S1P2L
#define                                 PWM1S1P2L_M1        0x4012
// Register: PWM1S1P2H
#define                                 PWM1S1P2H_M1        0x4013
// Register: PWM2S1P1L
#define                                 PWM2S1P1L_M2        0x4014
// Register: PWM2S1P1H
#define                                 PWM2S1P1H_M2        0x4015
// Register: PWM2S1P2L
#define                                 PWM2S1P2L_M1        0x4016
// Register: PWM2S1P2H
#define                                 PWM2S1P2H_M1        0x4017
// Register: PWM1S1P1L
#define                                 PWM1S1P1L_M3        0x4020
// Register: PWM1S1P1H
#define                                 PWM1S1P1H_M3        0x4021
// Register: PWM1S1P2L
#define                                 PWM1S1P2L_M2        0x4022
// Register: PWM1S1P2H
#define                                 PWM1S1P2H_M2        0x4023
// Register: PWM1PRL
#define                                 PWM1PRL_M1          0x4024
// Register: PWM1PRH
#define                                 PWM1PRH_M1          0x4025
// Register: PWM2S1P1L
#define                                 PWM2S1P1L_M3        0x4026
// Register: PWM2S1P1H
#define                                 PWM2S1P1H_M3        0x4027
// Register: PWM2S1P2L
#define                                 PWM2S1P2L_M2        0x4028
// Register: PWM2S1P2H
#define                                 PWM2S1P2H_M2        0x4029
// Register: PWM2PRL
#define                                 PWM2PRL_M1          0x402A
// Register: PWM2PRH
#define                                 PWM2PRH_M1          0x402B
// Register: CCPR1L
#define                                 CCPR1L_M2           0x4040
// Register: CCPR1H
#define                                 CCPR1H_M2           0x4041
// Register: T2PR
#define                                 T2PR_M1             0x4042
// Register: CCPR2L
#define                                 CCPR2L_M2           0x4043
// Register: CCPR2H
#define                                 CCPR2H_M2           0x4044
// Register: T4PR
#define                                 T4PR_M1             0x4045
// Register: ADLTHL
#define                                 ADLTHL_M1           0x4060
// Register: ADLTHH
#define                                 ADLTHH_M1           0x4061
// Register: ADUTHL
#define                                 ADUTHL_M1           0x4062
// Register: ADUTHH
#define                                 ADUTHH_M1           0x4063
// Register: ADERRL
#define                                 ADERRL_M1           0x4064
// Register: ADERRH
#define                                 ADERRH_M1           0x4065
// Register: ADSTPTL
#define                                 ADSTPTL_M1          0x4066
// Register: ADSTPTH
#define                                 ADSTPTH_M1          0x4067
// Register: ADFLTRL
#define                                 ADFLTRL_M1          0x4068
// Register: ADFLTRH
#define                                 ADFLTRH_M1          0x4069
// Register: ADACCL
#define                                 ADACCL_M1           0x406A
// Register: ADACCH
#define                                 ADACCH_M1           0x406B
// Register: ADCNT
#define                                 ADCNT_M1            0x406D
// Register: ADRPT
#define                                 ADRPT_M1            0x406E
// Register: ADPREVL
#define                                 ADPREVL_M1          0x406F
// Register: ADPREVH
#define                                 ADPREVH_M1          0x4070
// Register: ADACQL
#define                                 ADACQL_M1           0x4071
// Register: ADACQH
#define                                 ADACQH_M1           0x4072
// Register: ADCAP
#define                                 ADCAP_M1            0x4073
// Register: ADCON0
#define                                 ADCON0_M1           0x4074
// Register: ADCON1
#define                                 ADCON1_M1           0x4075
// Register: ADCON2
#define                                 ADCON2_M1           0x4076
// Register: ADCON3
#define                                 ADCON3_M1           0x4077
// Register: ADREF
#define                                 ADREF_M1            0x4078
// Register: ADACT
#define                                 ADACT_M1            0x4079
// Register: ADCLK
#define                                 ADCLK_M1            0x407A
// Register: ADPCH
#define                                 ADPCH_M1            0x407B
// Register: ADRESL
#define                                 ADRESL_M1           0x407C
// Register: ADRESH
#define                                 ADRESH_M1           0x407D
// Register: ADLTHL
#define                                 ADLTHL_M2           0x40E0
// Register: ADLTHH
#define                                 ADLTHH_M2           0x40E1
// Register: ADUTHL
#define                                 ADUTHL_M2           0x40E2
// Register: ADUTHH
#define                                 ADUTHH_M2           0x40E3
// Register: ADERRL
#define                                 ADERRL_M2           0x40E4
// Register: ADERRH
#define                                 ADERRH_M2           0x40E5
// Register: ADSTPTL
#define                                 ADSTPTL_M2          0x40E6
// Register: ADSTPTH
#define                                 ADSTPTH_M2          0x40E7
// Register: ADFLTRL
#define                                 ADFLTRL_M2          0x40E8
// Register: ADFLTRH
#define                                 ADFLTRH_M2          0x40E9
// Register: ADACCL
#define                                 ADACCL_M2           0x40EA
// Register: ADACCH
#define                                 ADACCH_M2           0x40EB
// Register: ADCNT
#define                                 ADCNT_M2            0x40ED
// Register: ADRPT
#define                                 ADRPT_M2            0x40EE
// Register: ADPREVL
#define                                 ADPREVL_M2          0x40EF
// Register: ADPREVH
#define                                 ADPREVH_M2          0x40F0
// Register: ADACQL
#define                                 ADACQL_M2           0x40F1
// Register: ADACQH
#define                                 ADACQH_M2           0x40F2
// Register: ADCAP
#define                                 ADCAP_M2            0x40F3
// Register: ADPCH
#define                                 ADPCH_M2            0x40F4
// Register: ADRESL
#define                                 ADRESL_M2           0x40F5
// Register: ADRESH
#define                                 ADRESH_M2           0x40F6
// Register: DMAnBUF
#define                                 DMAnBUF_DMA1        0x4100
// Register: DMAnDCNTL
#define                                 DMAnDCNTL_DMA1      0x4101
// Register: DMAnDCNTH
#define                                 DMAnDCNTH_DMA1      0x4102
// Register: DMAnDPTRL
#define                                 DMAnDPTRL_DMA1      0x4103
// Register: DMAnDPTRH
#define                                 DMAnDPTRH_DMA1      0x4104
// Register: DMAnDSZL
#define                                 DMAnDSZL_DMA1       0x4105
// Register: DMAnDSZH
#define                                 DMAnDSZH_DMA1       0x4106
// Register: DMAnDSAL
#define                                 DMAnDSAL_DMA1       0x4107
// Register: DMAnDSAH
#define                                 DMAnDSAH_DMA1       0x4108
// Register: DMAnSCNTL
#define                                 DMAnSCNTL_DMA1      0x4109
// Register: DMAnSCNTH
#define                                 DMAnSCNTH_DMA1      0x410A
// Register: DMAnSPTRL
#define                                 DMAnSPTRL_DMA1      0x410B
// Register: DMAnSPTRH
#define                                 DMAnSPTRH_DMA1      0x410C
// Register: DMAnSPTRU
#define                                 DMAnSPTRU_DMA1      0x410D
// Register: DMAnSSZL
#define                                 DMAnSSZL_DMA1       0x410E
// Register: DMAnSSZH
#define                                 DMAnSSZH_DMA1       0x410F
// Register: DMAnSSAL
#define                                 DMAnSSAL_DMA1       0x4110
// Register: DMAnSSAH
#define                                 DMAnSSAH_DMA1       0x4111
// Register: DMAnSSAU
#define                                 DMAnSSAU_DMA1       0x4112
// Register: DMAnCON0
#define                                 DMAnCON0_DMA1       0x4113
// Register: DMAnCON1
#define                                 DMAnCON1_DMA1       0x4114
// Register: DMAnAIRQ
#define                                 DMAnAIRQ_DMA1       0x4115
// Register: DMAnSIRQ
#define                                 DMAnSIRQ_DMA1       0x4116
// Register: DMAnBUF
#define                                 DMAnBUF_DMA2        0x4117
// Register: DMAnDCNTL
#define                                 DMAnDCNTL_DMA2      0x4118
// Register: DMAnDCNTH
#define                                 DMAnDCNTH_DMA2      0x4119
// Register: DMAnDPTRL
#define                                 DMAnDPTRL_DMA2      0x411A
// Register: DMAnDPTRH
#define                                 DMAnDPTRH_DMA2      0x411B
// Register: DMAnDSZL
#define                                 DMAnDSZL_DMA2       0x411C
// Register: DMAnDSZH
#define                                 DMAnDSZH_DMA2       0x411D
// Register: DMAnDSAL
#define                                 DMAnDSAL_DMA2       0x411E
// Register: DMAnDSAH
#define                                 DMAnDSAH_DMA2       0x411F
// Register: DMAnSCNTL
#define                                 DMAnSCNTL_DMA2      0x4120
// Register: DMAnSCNTH
#define                                 DMAnSCNTH_DMA2      0x4121
// Register: DMAnSPTRL
#define                                 DMAnSPTRL_DMA2      0x4122
// Register: DMAnSPTRH
#define                                 DMAnSPTRH_DMA2      0x4123
// Register: DMAnSPTRU
#define                                 DMAnSPTRU_DMA2      0x4124
// Register: DMAnSSZL
#define                                 DMAnSSZL_DMA2       0x4125
// Register: DMAnSSZH
#define                                 DMAnSSZH_DMA2       0x4126
// Register: DMAnSSAL
#define                                 DMAnSSAL_DMA2       0x4127
// Register: DMAnSSAH
#define                                 DMAnSSAH_DMA2       0x4128
// Register: DMAnSSAU
#define                                 DMAnSSAU_DMA2       0x4129
// Register: DMAnCON0
#define                                 DMAnCON0_DMA2       0x412A
// Register: DMAnCON1
#define                                 DMAnCON1_DMA2       0x412B
// Register: DMAnAIRQ
#define                                 DMAnAIRQ_DMA2       0x412C
// Register: DMAnSIRQ
#define                                 DMAnSIRQ_DMA2       0x412D
// Register: DMAnBUF
#define                                 DMAnBUF_DMA3        0x412E
// Register: DMAnDCNTL
#define                                 DMAnDCNTL_DMA3      0x412F
// Register: DMAnDCNTH
#define                                 DMAnDCNTH_DMA3      0x4130
// Register: DMAnDPTRL
#define                                 DMAnDPTRL_DMA3      0x4131
// Register: DMAnDPTRH
#define                                 DMAnDPTRH_DMA3      0x4132
// Register: DMAnDSZL
#define                                 DMAnDSZL_DMA3       0x4133
// Register: DMAnDSZH
#define                                 DMAnDSZH_DMA3       0x4134
// Register: DMAnDSAL
#define                                 DMAnDSAL_DMA3       0x4135
// Register: DMAnDSAH
#define                                 DMAnDSAH_DMA3       0x4136
// Register: DMAnSCNTL
#define                                 DMAnSCNTL_DMA3      0x4137
// Register: DMAnSCNTH
#define                                 DMAnSCNTH_DMA3      0x4138
// Register: DMAnSPTRL
#define                                 DMAnSPTRL_DMA3      0x4139
// Register: DMAnSPTRH
#define                                 DMAnSPTRH_DMA3      0x413A
// Register: DMAnSPTRU
#define                                 DMAnSPTRU_DMA3      0x413B
// Register: DMAnSSZL
#define                                 DMAnSSZL_DMA3       0x413C
// Register: DMAnSSZH
#define                                 DMAnSSZH_DMA3       0x413D
// Register: DMAnSSAL
#define                                 DMAnSSAL_DMA3       0x413E
// Register: DMAnSSAH
#define                                 DMAnSSAH_DMA3       0x413F
// Register: DMAnSSAU
#define                                 DMAnSSAU_DMA3       0x4140
// Register: DMAnCON0
#define                                 DMAnCON0_DMA3       0x4141
// Register: DMAnCON1
#define                                 DMAnCON1_DMA3       0x4142
// Register: DMAnAIRQ
#define                                 DMAnAIRQ_DMA3       0x4143
// Register: DMAnSIRQ
#define                                 DMAnSIRQ_DMA3       0x4144
// Register: DMAnBUF
#define                                 DMAnBUF_DMA4        0x4145
// Register: DMAnDCNTL
#define                                 DMAnDCNTL_DMA4      0x4146
// Register: DMAnDCNTH
#define                                 DMAnDCNTH_DMA4      0x4147
// Register: DMAnDPTRL
#define                                 DMAnDPTRL_DMA4      0x4148
// Register: DMAnDPTRH
#define                                 DMAnDPTRH_DMA4      0x4149
// Register: DMAnDSZL
#define                                 DMAnDSZL_DMA4       0x414A
// Register: DMAnDSZH
#define                                 DMAnDSZH_DMA4       0x414B
// Register: DMAnDSAL
#define                                 DMAnDSAL_DMA4       0x414C
// Register: DMAnDSAH
#define                                 DMAnDSAH_DMA4       0x414D
// Register: DMAnSCNTL
#define                                 DMAnSCNTL_DMA4      0x414E
// Register: DMAnSCNTH
#define                                 DMAnSCNTH_DMA4      0x414F
// Register: DMAnSPTRL
#define                                 DMAnSPTRL_DMA4      0x4150
// Register: DMAnSPTRH
#define                                 DMAnSPTRH_DMA4      0x4151
// Register: DMAnSPTRU
#define                                 DMAnSPTRU_DMA4      0x4152
// Register: DMAnSSZL
#define                                 DMAnSSZL_DMA4       0x4153
// Register: DMAnSSZH
#define                                 DMAnSSZH_DMA4       0x4154
// Register: DMAnSSAL
#define                                 DMAnSSAL_DMA4       0x4155
// Register: DMAnSSAH
#define                                 DMAnSSAH_DMA4       0x4156
// Register: DMAnSSAU
#define                                 DMAnSSAU_DMA4       0x4157
// Register: DMAnCON0
#define                                 DMAnCON0_DMA4       0x4158
// Register: DMAnCON1
#define                                 DMAnCON1_DMA4       0x4159
// Register: DMAnAIRQ
#define                                 DMAnAIRQ_DMA4       0x415A
// Register: DMAnSIRQ
#define                                 DMAnSIRQ_DMA4       0x415B
// Register: IOCAF
#define                                 IOCAF_M1            0x41E0
// Register: IOCCF
#define                                 IOCCF_M1            0x41E2
// Register: IOCWF
#define                                 IOCWF_M1            0x41E4
// Register: TU16APRL
#define                                 TU16APRL_M1         0x41F0
// Register: TU16APRH
#define                                 TU16APRH_M1         0x41F1
// Register: TU16BPRL
#define                                 TU16BPRL_M1         0x41F2
// Register: TU16BPRH
#define                                 TU16BPRH_M1         0x41F3
// Register: TMR1L
#define                                 TMR1L_M1            0x41F6
// Register: TMR1H
#define                                 TMR1H_M1            0x41F7
/*
 * Device Information Area (DIA) Table
 */
extern const unsigned char              _DIA[64]            __at(0x2C0000);

extern const unsigned short             _DIA_MUI[8]         __at(0x2C0000);
#define DIA_MUI                                             0x2C0000
extern const unsigned short             _DIA_MUI0           __at(0x2C0000);
#define DIA_MUI0                                            0x2C0000
extern const unsigned short             _DIA_MUI1           __at(0x2C0002);
#define DIA_MUI1                                            0x2C0002
extern const unsigned short             _DIA_MUI2           __at(0x2C0004);
#define DIA_MUI2                                            0x2C0004
extern const unsigned short             _DIA_MUI3           __at(0x2C0006);
#define DIA_MUI3                                            0x2C0006
extern const unsigned short             _DIA_MUI4           __at(0x2C0008);
#define DIA_MUI4                                            0x2C0008
extern const unsigned short             _DIA_MUI5           __at(0x2C000A);
#define DIA_MUI5                                            0x2C000A
extern const unsigned short             _DIA_MUI6           __at(0x2C000C);
#define DIA_MUI6                                            0x2C000C
extern const unsigned short             _DIA_MUI7           __at(0x2C000E);
#define DIA_MUI7                                            0x2C000E

extern const unsigned short             _DIA_EUI[10]        __at(0x2C0010);
#define DIA_EUI                                             0x2C0010
extern const unsigned short             _DIA_EUI0           __at(0x2C0010);
#define DIA_EUI0                                            0x2C0010
extern const unsigned short             _DIA_EUI1           __at(0x2C0012);
#define DIA_EUI1                                            0x2C0012
extern const unsigned short             _DIA_EUI2           __at(0x2C0014);
#define DIA_EUI2                                            0x2C0014
extern const unsigned short             _DIA_EUI3           __at(0x2C0016);
#define DIA_EUI3                                            0x2C0016
extern const unsigned short             _DIA_EUI4           __at(0x2C0018);
#define DIA_EUI4                                            0x2C0018
extern const unsigned short             _DIA_EUI5           __at(0x2C001A);
#define DIA_EUI5                                            0x2C001A
extern const unsigned short             _DIA_EUI6           __at(0x2C001C);
#define DIA_EUI6                                            0x2C001C
extern const unsigned short             _DIA_EUI7           __at(0x2C001E);
#define DIA_EUI7                                            0x2C001E
extern const unsigned short             _DIA_EUI8           __at(0x2C0020);
#define DIA_EUI8                                            0x2C0020
extern const unsigned short             _DIA_EUI9           __at(0x2C0022);
#define DIA_EUI9                                            0x2C0022

extern const unsigned short             _DIA_TSLR[3]        __at(0x2C0024);
#define DIA_TSLR                                            0x2C0024
extern const unsigned short             _DIA_TSLR1          __at(0x2C0024);
#define DIA_TSLR1                                           0x2C0024
extern const unsigned short             _DIA_TSLR2          __at(0x2C0026);
#define DIA_TSLR2                                           0x2C0026
extern const unsigned short             _DIA_TSLR3          __at(0x2C0028);
#define DIA_TSLR3                                           0x2C0028

extern const unsigned short             _DIA_TSHR[3]        __at(0x2C002A);
#define DIA_TSHR                                            0x2C002A
extern const unsigned short             _DIA_TSHR1          __at(0x2C002A);
#define DIA_TSHR1                                           0x2C002A
extern const unsigned short             _DIA_TSHR2          __at(0x2C002C);
#define DIA_TSHR2                                           0x2C002C
extern const unsigned short             _DIA_TSHR3          __at(0x2C002E);
#define DIA_TSHR3                                           0x2C002E

extern const unsigned short             _DIA_FVRA[3]        __at(0x2C0030);
#define DIA_FVRA                                            0x2C0030
extern const unsigned short             _DIA_FVRA1X         __at(0x2C0030);
#define DIA_FVRA1X                                          0x2C0030
extern const unsigned short             _DIA_FVRA2X         __at(0x2C0032);
#define DIA_FVRA2X                                          0x2C0032
extern const unsigned short             _DIA_FVRA4X         __at(0x2C0034);
#define DIA_FVRA4X                                          0x2C0034

extern const unsigned short             _DIA_FVRC[3]        __at(0x2C0036);
#define DIA_FVRC                                            0x2C0036
extern const unsigned short             _DIA_FVRC1X         __at(0x2C0036);
#define DIA_FVRC1X                                          0x2C0036
extern const unsigned short             _DIA_FVRC2X         __at(0x2C0038);
#define DIA_FVRC2X                                          0x2C0038
extern const unsigned short             _DIA_FVRC4X         __at(0x2C003A);
#define DIA_FVRC4X                                          0x2C003A

/*
 * Device Configuration Information (DCI) Table
 */
extern const unsigned char              _DCI[10]            __at(0x3C0000);

extern const unsigned short             _DCI_ERSIZ          __at(0x3C0000);
#define DCI_ERSIZ                                           0x3C0000
extern const unsigned short             _DCI_WLSIZ          __at(0x3C0002);
#define DCI_WLSIZ                                           0x3C0002
extern const unsigned short             _DCI_URSIZ          __at(0x3C0004);
#define DCI_URSIZ                                           0x3C0004
extern const unsigned short             _DCI_EESIZ          __at(0x3C0006);
#define DCI_EESIZ                                           0x3C0006
extern const unsigned short             _DCI_PCNT           __at(0x3C0008);
#define DCI_PCNT                                            0x3C0008

/*
 * Configuration and ID Registers
 */
extern const unsigned char              _CONFIGs[26]        __at(0x300000);
// Register: CONFIG1
extern const unsigned char              _CONFIG1            __at(0x300000);
// bitfield definitions
typedef union {
    struct {
        unsigned FEXTOSC                :3;
        unsigned                        :1;
        unsigned RSTOSC                 :3;
    };
} _CONFIG1bits_t;
extern const _CONFIG1bits_t _CONFIG1bits __at(0x300000);

// Register: CONFIG2
extern const unsigned char              _CONFIG2            __at(0x300001);
// bitfield definitions
typedef union {
    struct {
        unsigned CLKOUTEN               :1;
        unsigned PR1WAY                 :1;
        unsigned BBEN                   :1;
        unsigned CSWEN                  :1;
        unsigned                        :1;
        unsigned FCMEN                  :1;
        unsigned FCMENP                 :1;
        unsigned FCMENS                 :1;
    };
} _CONFIG2bits_t;
extern const _CONFIG2bits_t _CONFIG2bits __at(0x300001);

// Register: CONFIG3
extern const unsigned char              _CONFIG3            __at(0x300002);
// bitfield definitions
typedef union {
    struct {
        unsigned MCLRE                  :1;
        unsigned PWRTS                  :2;
        unsigned MVECEN                 :1;
        unsigned IVT1WAY                :1;
        unsigned LPBOREN                :1;
        unsigned BOREN                  :2;
    };
} _CONFIG3bits_t;
extern const _CONFIG3bits_t _CONFIG3bits __at(0x300002);

// Register: CONFIG4
extern const unsigned char              _CONFIG4            __at(0x300003);
// bitfield definitions
typedef union {
    struct {
        unsigned BORV                   :2;
        unsigned                        :1;
        unsigned PPS1WAY                :1;
        unsigned STVREN                 :1;
        unsigned LVP                    :1;
        unsigned _DEBUG                 :1;
        unsigned XINST                  :1;
    };
} _CONFIG4bits_t;
extern const _CONFIG4bits_t _CONFIG4bits __at(0x300003);

// Register: CONFIG5
extern const unsigned char              _CONFIG5            __at(0x300004);
// bitfield definitions
typedef union {
    struct {
        unsigned WDTCPS                 :5;
        unsigned WDTE                   :2;
    };
} _CONFIG5bits_t;
extern const _CONFIG5bits_t _CONFIG5bits __at(0x300004);

// Register: CONFIG6
extern const unsigned char              _CONFIG6            __at(0x300005);
// bitfield definitions
typedef union {
    struct {
        unsigned WDTCWS                 :3;
        unsigned WDTCCS                 :3;
    };
} _CONFIG6bits_t;
extern const _CONFIG6bits_t _CONFIG6bits __at(0x300005);

// Register: CONFIG7
extern const unsigned char              _CONFIG7            __at(0x300006);
// bitfield definitions
typedef union {
    struct {
        unsigned VDDIO2MD               :1;
    };
} _CONFIG7bits_t;
extern const _CONFIG7bits_t _CONFIG7bits __at(0x300006);

// Register: CONFIG8
extern const unsigned char              _CONFIG8            __at(0x300007);
// bitfield definitions
typedef union {
    struct {
        unsigned BBSIZE                 :8;
    };
} _CONFIG8bits_t;
extern const _CONFIG8bits_t _CONFIG8bits __at(0x300007);

// Register: CONFIG10
extern const unsigned char              _CONFIG10           __at(0x300008);
// bitfield definitions
typedef union {
    struct {
        unsigned WRTB                   :1;
        unsigned WRTC                   :1;
        unsigned WRTD                   :1;
        unsigned WRTSAF                 :1;
        unsigned                        :3;
        unsigned WRTAPP                 :1;
    };
} _CONFIG10bits_t;
extern const _CONFIG10bits_t _CONFIG10bits __at(0x300008);

// Register: CONFIG11
extern const unsigned char              _CONFIG11           __at(0x300009);
// bitfield definitions
typedef union {
    struct {
        unsigned CP                     :1;
    };
} _CONFIG11bits_t;
extern const _CONFIG11bits_t _CONFIG11bits __at(0x300009);

// Register: CONFIG12
extern const unsigned char              _CONFIG12           __at(0x30000A);
// bitfield definitions
typedef union {
    struct {
        unsigned CPD                    :1;
    };
} _CONFIG12bits_t;
extern const _CONFIG12bits_t _CONFIG12bits __at(0x30000A);

// Register: CONFIG14
extern const unsigned char              _CONFIG14           __at(0x300018);
// bitfield definitions
typedef union {
    struct {
        unsigned SAFLOCK                :1;
    };
} _CONFIG14bits_t;
extern const _CONFIG14bits_t _CONFIG14bits __at(0x300018);

// Register: CONFIG9
extern const unsigned char              _CONFIG9            __at(0x300019);
// bitfield definitions
typedef union {
    struct {
        unsigned SAFSZ                  :8;
    };
} _CONFIG9bits_t;
extern const _CONFIG9bits_t _CONFIG9bits __at(0x300019);

extern const unsigned short             _IDLOCs[32]         __at(0x200000);
// Register: IDLOC0
extern const unsigned short             _IDLOC0             __at(0x200000);

// Register: IDLOC1
extern const unsigned short             _IDLOC1             __at(0x200002);

// Register: IDLOC2
extern const unsigned short             _IDLOC2             __at(0x200004);

// Register: IDLOC3
extern const unsigned short             _IDLOC3             __at(0x200006);

// Register: IDLOC4
extern const unsigned short             _IDLOC4             __at(0x200008);

// Register: IDLOC5
extern const unsigned short             _IDLOC5             __at(0x20000A);

// Register: IDLOC6
extern const unsigned short             _IDLOC6             __at(0x20000C);

// Register: IDLOC7
extern const unsigned short             _IDLOC7             __at(0x20000E);

// Register: IDLOC8
extern const unsigned short             _IDLOC8             __at(0x200010);

// Register: IDLOC9
extern const unsigned short             _IDLOC9             __at(0x200012);

// Register: IDLOC10
extern const unsigned short             _IDLOC10            __at(0x200014);

// Register: IDLOC11
extern const unsigned short             _IDLOC11            __at(0x200016);

// Register: IDLOC12
extern const unsigned short             _IDLOC12            __at(0x200018);

// Register: IDLOC13
extern const unsigned short             _IDLOC13            __at(0x20001A);

// Register: IDLOC14
extern const unsigned short             _IDLOC14            __at(0x20001C);

// Register: IDLOC15
extern const unsigned short             _IDLOC15            __at(0x20001E);

// Register: IDLOC16
extern const unsigned short             _IDLOC16            __at(0x200020);

// Register: IDLOC17
extern const unsigned short             _IDLOC17            __at(0x200022);

// Register: IDLOC18
extern const unsigned short             _IDLOC18            __at(0x200024);

// Register: IDLOC19
extern const unsigned short             _IDLOC19            __at(0x200026);

// Register: IDLOC20
extern const unsigned short             _IDLOC20            __at(0x200028);

// Register: IDLOC21
extern const unsigned short             _IDLOC21            __at(0x20002A);

// Register: IDLOC22
extern const unsigned short             _IDLOC22            __at(0x20002C);

// Register: IDLOC23
extern const unsigned short             _IDLOC23            __at(0x20002E);

// Register: IDLOC24
extern const unsigned short             _IDLOC24            __at(0x200030);

// Register: IDLOC25
extern const unsigned short             _IDLOC25            __at(0x200032);

// Register: IDLOC26
extern const unsigned short             _IDLOC26            __at(0x200034);

// Register: IDLOC27
extern const unsigned short             _IDLOC27            __at(0x200036);

// Register: IDLOC28
extern const unsigned short             _IDLOC28            __at(0x200038);

// Register: IDLOC29
extern const unsigned short             _IDLOC29            __at(0x20003A);

// Register: IDLOC30
extern const unsigned short             _IDLOC30            __at(0x20003C);

// Register: IDLOC31
extern const unsigned short             _IDLOC31            __at(0x20003E);

/*
 * Device ID
 */
extern const unsigned short             _DEVID              __at(0x3FFFFE);

/*
 * Revision ID
 */
extern const unsigned short             _REVID              __at(0x3FFFFC);

/*
 * Bit Definitions
 */
#define _DEPRECATED __attribute__((__deprecated__))
#ifndef BANKMASK
#define BANKMASK(addr) ((addr)&0FFh)
#endif
#define _BIT_ACCESS(r,b) ___mkstr(BANKMASK(r)) "," ___mkstr(b)
#ifndef PAGEMASK
#define PAGEMASK(addr) ((addr)&0FFFFFh)
#endif
// I2C1CON2<ABD>
extern volatile __bit                   ABD                 __at(0xF44);	// @ (0x1E8 * 8 + 4)
#define                                 ABD_bit             _BIT_ACCESS(I2C1CON2,4)
// I3C1ERRIE1<ABEIE>
extern volatile __bit                   ABEIE               __at(0x48B);	// @ (0x91 * 8 + 3)
#define                                 ABEIE_bit           _BIT_ACCESS(I3C1ERRIE1,3)
// I3C1ERRIR1<ABEIF>
extern volatile __bit                   ABEIF               __at(0x46B);	// @ (0x8D * 8 + 3)
#define                                 ABEIF_bit           _BIT_ACCESS(I3C1ERRIR1,3)
// ADACCL<ACC0>
extern volatile __bit                   ACC0                __at(0x10F8);	// @ (0x21F * 8 + 0)
#define                                 ACC0_bit            _BIT_ACCESS(ADACCL,0)
// ADACCL<ACC1>
extern volatile __bit                   ACC1                __at(0x10F9);	// @ (0x21F * 8 + 1)
#define                                 ACC1_bit            _BIT_ACCESS(ADACCL,1)
// ADACCH<ACC10>
extern volatile __bit                   ACC10               __at(0x1102);	// @ (0x220 * 8 + 2)
#define                                 ACC10_bit           _BIT_ACCESS(ADACCH,2)
// ADACCH<ACC11>
extern volatile __bit                   ACC11               __at(0x1103);	// @ (0x220 * 8 + 3)
#define                                 ACC11_bit           _BIT_ACCESS(ADACCH,3)
// ADACCH<ACC12>
extern volatile __bit                   ACC12               __at(0x1104);	// @ (0x220 * 8 + 4)
#define                                 ACC12_bit           _BIT_ACCESS(ADACCH,4)
// ADACCH<ACC13>
extern volatile __bit                   ACC13               __at(0x1105);	// @ (0x220 * 8 + 5)
#define                                 ACC13_bit           _BIT_ACCESS(ADACCH,5)
// ADACCH<ACC14>
extern volatile __bit                   ACC14               __at(0x1106);	// @ (0x220 * 8 + 6)
#define                                 ACC14_bit           _BIT_ACCESS(ADACCH,6)
// ADACCH<ACC15>
extern volatile __bit                   ACC15               __at(0x1107);	// @ (0x220 * 8 + 7)
#define                                 ACC15_bit           _BIT_ACCESS(ADACCH,7)
// ADACCL<ACC2>
extern volatile __bit                   ACC2                __at(0x10FA);	// @ (0x21F * 8 + 2)
#define                                 ACC2_bit            _BIT_ACCESS(ADACCL,2)
// ADACCL<ACC3>
extern volatile __bit                   ACC3                __at(0x10FB);	// @ (0x21F * 8 + 3)
#define                                 ACC3_bit            _BIT_ACCESS(ADACCL,3)
// ADACCL<ACC4>
extern volatile __bit                   ACC4                __at(0x10FC);	// @ (0x21F * 8 + 4)
#define                                 ACC4_bit            _BIT_ACCESS(ADACCL,4)
// ADACCL<ACC5>
extern volatile __bit                   ACC5                __at(0x10FD);	// @ (0x21F * 8 + 5)
#define                                 ACC5_bit            _BIT_ACCESS(ADACCL,5)
// ADACCL<ACC6>
extern volatile __bit                   ACC6                __at(0x10FE);	// @ (0x21F * 8 + 6)
#define                                 ACC6_bit            _BIT_ACCESS(ADACCL,6)
// ADACCL<ACC7>
extern volatile __bit                   ACC7                __at(0x10FF);	// @ (0x21F * 8 + 7)
#define                                 ACC7_bit            _BIT_ACCESS(ADACCL,7)
// ADACCH<ACC8>
extern volatile __bit                   ACC8                __at(0x1100);	// @ (0x220 * 8 + 0)
#define                                 ACC8_bit            _BIT_ACCESS(ADACCH,0)
// ADACCH<ACC9>
extern volatile __bit                   ACC9                __at(0x1101);	// @ (0x220 * 8 + 1)
#define                                 ACC9_bit            _BIT_ACCESS(ADACCH,1)
// CRCCON0<ACCM>
extern volatile __bit                   ACCM                __at(0x344);	// @ (0x68 * 8 + 4)
#define                                 ACCM_bit            _BIT_ACCESS(CRCCON0,4)
// CRCCON0<ACCMOD>
extern volatile __bit                   ACCMOD              __at(0x344);	// @ (0x68 * 8 + 4)
#define                                 ACCMOD_bit          _BIT_ACCESS(CRCCON0,4)
// I2C1CON1<ACKCNT>
extern volatile __bit                   ACKCNT              __at(0xF3F);	// @ (0x1E7 * 8 + 7)
#define                                 ACKCNT_bit          _BIT_ACCESS(I2C1CON1,7)
// I2C1CON1<ACKDT>
extern volatile __bit                   ACKDT               __at(0xF3E);	// @ (0x1E7 * 8 + 6)
#define                                 ACKDT_bit           _BIT_ACCESS(I2C1CON1,6)
// I3C1CON0<ACKP>
extern volatile __bit                   ACKP                __at(0x41A);	// @ (0x83 * 8 + 2)
#define                                 ACKP_bit            _BIT_ACCESS(I3C1CON0,2)
// I3C1CON1<ACKPOS>
extern volatile __bit                   ACKPOS              __at(0x420);	// @ (0x84 * 8 + 0)
#define                                 ACKPOS_bit          _BIT_ACCESS(I3C1CON1,0)
// I2C1CON1<ACKSTAT>
extern volatile __bit                   ACKSTAT             __at(0xF3D);	// @ (0x1E7 * 8 + 5)
#define                                 ACKSTAT_bit         _BIT_ACCESS(I2C1CON1,5)
// I2C1CON1<ACKT>
extern volatile __bit                   ACKT                __at(0xF3C);	// @ (0x1E7 * 8 + 4)
#define                                 ACKT_bit            _BIT_ACCESS(I2C1CON1,4)
// I2C1PIE<ACKT1IE>
extern volatile __bit                   ACKT1IE             __at(0xF5E);	// @ (0x1EB * 8 + 6)
#define                                 ACKT1IE_bit         _BIT_ACCESS(I2C1PIE,6)
// I2C1PIR<ACKT1IF>
extern volatile __bit                   ACKT1IF             __at(0xF56);	// @ (0x1EA * 8 + 6)
#define                                 ACKT1IF_bit         _BIT_ACCESS(I2C1PIR,6)
// I2C1PIE<ACKTIE>
extern volatile __bit                   ACKTIE              __at(0xF5E);	// @ (0x1EB * 8 + 6)
#define                                 ACKTIE_bit          _BIT_ACCESS(I2C1PIE,6)
// I2C1PIR<ACKTIF>
extern volatile __bit                   ACKTIF              __at(0xF56);	// @ (0x1EA * 8 + 6)
#define                                 ACKTIF_bit          _BIT_ACCESS(I2C1PIR,6)
// ADCON2<ACLR>
extern volatile __bit                   ACLR                __at(0x118B);	// @ (0x231 * 8 + 3)
#define                                 ACLR_bit            _BIT_ACCESS(ADCON2,3)
// I2C1CON2<ACNT>
extern volatile __bit                   ACNT                __at(0xF47);	// @ (0x1E8 * 8 + 7)
#define                                 ACNT_bit            _BIT_ACCESS(I2C1CON2,7)
// I2C1CON3<ACNTMD0>
extern volatile __bit                   ACNTMD0             __at(0xF48);	// @ (0x1E9 * 8 + 0)
#define                                 ACNTMD0_bit         _BIT_ACCESS(I2C1CON3,0)
// I2C1CON3<ACNTMD1>
extern volatile __bit                   ACNTMD1             __at(0xF49);	// @ (0x1E9 * 8 + 1)
#define                                 ACNTMD1_bit         _BIT_ACCESS(I2C1CON3,1)
// ADACQL<ACQ0>
extern volatile __bit                   ACQ0                __at(0x1150);	// @ (0x22A * 8 + 0)
#define                                 ACQ0_bit            _BIT_ACCESS(ADACQL,0)
// ADACQL<ACQ1>
extern volatile __bit                   ACQ1                __at(0x1151);	// @ (0x22A * 8 + 1)
#define                                 ACQ1_bit            _BIT_ACCESS(ADACQL,1)
// ADACQH<ACQ10>
extern volatile __bit                   ACQ10               __at(0x115A);	// @ (0x22B * 8 + 2)
#define                                 ACQ10_bit           _BIT_ACCESS(ADACQH,2)
// ADACQH<ACQ11>
extern volatile __bit                   ACQ11               __at(0x115B);	// @ (0x22B * 8 + 3)
#define                                 ACQ11_bit           _BIT_ACCESS(ADACQH,3)
// ADACQH<ACQ12>
extern volatile __bit                   ACQ12               __at(0x115C);	// @ (0x22B * 8 + 4)
#define                                 ACQ12_bit           _BIT_ACCESS(ADACQH,4)
// ADACQL<ACQ2>
extern volatile __bit                   ACQ2                __at(0x1152);	// @ (0x22A * 8 + 2)
#define                                 ACQ2_bit            _BIT_ACCESS(ADACQL,2)
// ADACQL<ACQ3>
extern volatile __bit                   ACQ3                __at(0x1153);	// @ (0x22A * 8 + 3)
#define                                 ACQ3_bit            _BIT_ACCESS(ADACQL,3)
// ADACQL<ACQ4>
extern volatile __bit                   ACQ4                __at(0x1154);	// @ (0x22A * 8 + 4)
#define                                 ACQ4_bit            _BIT_ACCESS(ADACQL,4)
// ADACQL<ACQ5>
extern volatile __bit                   ACQ5                __at(0x1155);	// @ (0x22A * 8 + 5)
#define                                 ACQ5_bit            _BIT_ACCESS(ADACQL,5)
// ADACQL<ACQ6>
extern volatile __bit                   ACQ6                __at(0x1156);	// @ (0x22A * 8 + 6)
#define                                 ACQ6_bit            _BIT_ACCESS(ADACQL,6)
// ADACQL<ACQ7>
extern volatile __bit                   ACQ7                __at(0x1157);	// @ (0x22A * 8 + 7)
#define                                 ACQ7_bit            _BIT_ACCESS(ADACQL,7)
// ADACQH<ACQ8>
extern volatile __bit                   ACQ8                __at(0x1158);	// @ (0x22B * 8 + 0)
#define                                 ACQ8_bit            _BIT_ACCESS(ADACQH,0)
// ADACQH<ACQ9>
extern volatile __bit                   ACQ9                __at(0x1159);	// @ (0x22B * 8 + 1)
#define                                 ACQ9_bit            _BIT_ACCESS(ADACQH,1)
// ADACT<ACT0>
extern volatile __bit                   ACT0                __at(0x11A8);	// @ (0x235 * 8 + 0)
#define                                 ACT0_bit            _BIT_ACCESS(ADACT,0)
// ADACT<ACT1>
extern volatile __bit                   ACT1                __at(0x11A9);	// @ (0x235 * 8 + 1)
#define                                 ACT1_bit            _BIT_ACCESS(ADACT,1)
// ADACT<ACT2>
extern volatile __bit                   ACT2                __at(0x11AA);	// @ (0x235 * 8 + 2)
#define                                 ACT2_bit            _BIT_ACCESS(ADACT,2)
// ADACT<ACT3>
extern volatile __bit                   ACT3                __at(0x11AB);	// @ (0x235 * 8 + 3)
#define                                 ACT3_bit            _BIT_ACCESS(ADACT,3)
// ADACT<ACT4>
extern volatile __bit                   ACT4                __at(0x11AC);	// @ (0x235 * 8 + 4)
#define                                 ACT4_bit            _BIT_ACCESS(ADACT,4)
// ADACT<ACT5>
extern volatile __bit                   ACT5                __at(0x11AD);	// @ (0x235 * 8 + 5)
#define                                 ACT5_bit            _BIT_ACCESS(ADACT,5)
// ACTCON<ACTEN>
extern volatile __bit                   ACTEN               __at(0x40F);	// @ (0x81 * 8 + 7)
#define                                 ACTEN_bit           _BIT_ACCESS(ACTCON,7)
// PIE2<ACTIE>
extern volatile __bit                   ACTIE               __at(0x23AF);	// @ (0x475 * 8 + 7)
#define                                 ACTIE_bit           _BIT_ACCESS(PIE2,7)
// PIR2<ACTIF>
extern volatile __bit                   ACTIF               __at(0x235F);	// @ (0x46B * 8 + 7)
#define                                 ACTIF_bit           _BIT_ACCESS(PIR2,7)
// IPR2<ACTIP>
extern volatile __bit                   ACTIP               __at(0x23FF);	// @ (0x47F * 8 + 7)
#define                                 ACTIP_bit           _BIT_ACCESS(IPR2,7)
// ACTCON<ACTLOCK>
extern volatile __bit                   ACTLOCK             __at(0x40B);	// @ (0x81 * 8 + 3)
#define                                 ACTLOCK_bit         _BIT_ACCESS(ACTCON,3)
// PMD1<ACTMD>
extern volatile __bit                   ACTMD               __at(0x1808);	// @ (0x301 * 8 + 0)
#define                                 ACTMD_bit           _BIT_ACCESS(PMD1,0)
// I3C1DSTAT0<ACTMODE0>
extern volatile __bit                   ACTMODE0            __at(0x556);	// @ (0xAA * 8 + 6)
#define                                 ACTMODE0_bit        _BIT_ACCESS(I3C1DSTAT0,6)
// I3C1DSTAT0<ACTMODE1>
extern volatile __bit                   ACTMODE1            __at(0x557);	// @ (0xAA * 8 + 7)
#define                                 ACTMODE1_bit        _BIT_ACCESS(I3C1DSTAT0,7)
// ACTCON<ACTORS>
extern volatile __bit                   ACTORS              __at(0x409);	// @ (0x81 * 8 + 1)
#define                                 ACTORS_bit          _BIT_ACCESS(ACTCON,1)
// ACTCON<ACTUD>
extern volatile __bit                   ACTUD               __at(0x40E);	// @ (0x81 * 8 + 6)
#define                                 ACTUD_bit           _BIT_ACCESS(ACTCON,6)
// ADACCL<ADACC0>
extern volatile __bit                   ADACC0              __at(0x10F8);	// @ (0x21F * 8 + 0)
#define                                 ADACC0_bit          _BIT_ACCESS(ADACCL,0)
// ADACCL<ADACC1>
extern volatile __bit                   ADACC1              __at(0x10F9);	// @ (0x21F * 8 + 1)
#define                                 ADACC1_bit          _BIT_ACCESS(ADACCL,1)
// ADACCH<ADACC10>
extern volatile __bit                   ADACC10             __at(0x1102);	// @ (0x220 * 8 + 2)
#define                                 ADACC10_bit         _BIT_ACCESS(ADACCH,2)
// ADACCH<ADACC11>
extern volatile __bit                   ADACC11             __at(0x1103);	// @ (0x220 * 8 + 3)
#define                                 ADACC11_bit         _BIT_ACCESS(ADACCH,3)
// ADACCH<ADACC12>
extern volatile __bit                   ADACC12             __at(0x1104);	// @ (0x220 * 8 + 4)
#define                                 ADACC12_bit         _BIT_ACCESS(ADACCH,4)
// ADACCH<ADACC13>
extern volatile __bit                   ADACC13             __at(0x1105);	// @ (0x220 * 8 + 5)
#define                                 ADACC13_bit         _BIT_ACCESS(ADACCH,5)
// ADACCH<ADACC14>
extern volatile __bit                   ADACC14             __at(0x1106);	// @ (0x220 * 8 + 6)
#define                                 ADACC14_bit         _BIT_ACCESS(ADACCH,6)
// ADACCH<ADACC15>
extern volatile __bit                   ADACC15             __at(0x1107);	// @ (0x220 * 8 + 7)
#define                                 ADACC15_bit         _BIT_ACCESS(ADACCH,7)
// ADACCL<ADACC2>
extern volatile __bit                   ADACC2              __at(0x10FA);	// @ (0x21F * 8 + 2)
#define                                 ADACC2_bit          _BIT_ACCESS(ADACCL,2)
// ADACCL<ADACC3>
extern volatile __bit                   ADACC3              __at(0x10FB);	// @ (0x21F * 8 + 3)
#define                                 ADACC3_bit          _BIT_ACCESS(ADACCL,3)
// ADACCL<ADACC4>
extern volatile __bit                   ADACC4              __at(0x10FC);	// @ (0x21F * 8 + 4)
#define                                 ADACC4_bit          _BIT_ACCESS(ADACCL,4)
// ADACCL<ADACC5>
extern volatile __bit                   ADACC5              __at(0x10FD);	// @ (0x21F * 8 + 5)
#define                                 ADACC5_bit          _BIT_ACCESS(ADACCL,5)
// ADACCL<ADACC6>
extern volatile __bit                   ADACC6              __at(0x10FE);	// @ (0x21F * 8 + 6)
#define                                 ADACC6_bit          _BIT_ACCESS(ADACCL,6)
// ADACCL<ADACC7>
extern volatile __bit                   ADACC7              __at(0x10FF);	// @ (0x21F * 8 + 7)
#define                                 ADACC7_bit          _BIT_ACCESS(ADACCL,7)
// ADACCH<ADACC8>
extern volatile __bit                   ADACC8              __at(0x1100);	// @ (0x220 * 8 + 0)
#define                                 ADACC8_bit          _BIT_ACCESS(ADACCH,0)
// ADACCH<ADACC9>
extern volatile __bit                   ADACC9              __at(0x1101);	// @ (0x220 * 8 + 1)
#define                                 ADACC9_bit          _BIT_ACCESS(ADACCH,1)
// ADCON2<ADACLR>
extern volatile __bit                   ADACLR              __at(0x118B);	// @ (0x231 * 8 + 3)
#define                                 ADACLR_bit          _BIT_ACCESS(ADCON2,3)
// ADACQL<ADACQ0>
extern volatile __bit                   ADACQ0              __at(0x1150);	// @ (0x22A * 8 + 0)
#define                                 ADACQ0_bit          _BIT_ACCESS(ADACQL,0)
// ADACQL<ADACQ1>
extern volatile __bit                   ADACQ1              __at(0x1151);	// @ (0x22A * 8 + 1)
#define                                 ADACQ1_bit          _BIT_ACCESS(ADACQL,1)
// ADACQH<ADACQ10>
extern volatile __bit                   ADACQ10             __at(0x115A);	// @ (0x22B * 8 + 2)
#define                                 ADACQ10_bit         _BIT_ACCESS(ADACQH,2)
// ADACQH<ADACQ11>
extern volatile __bit                   ADACQ11             __at(0x115B);	// @ (0x22B * 8 + 3)
#define                                 ADACQ11_bit         _BIT_ACCESS(ADACQH,3)
// ADACQH<ADACQ12>
extern volatile __bit                   ADACQ12             __at(0x115C);	// @ (0x22B * 8 + 4)
#define                                 ADACQ12_bit         _BIT_ACCESS(ADACQH,4)
// ADACQL<ADACQ2>
extern volatile __bit                   ADACQ2              __at(0x1152);	// @ (0x22A * 8 + 2)
#define                                 ADACQ2_bit          _BIT_ACCESS(ADACQL,2)
// ADACQL<ADACQ3>
extern volatile __bit                   ADACQ3              __at(0x1153);	// @ (0x22A * 8 + 3)
#define                                 ADACQ3_bit          _BIT_ACCESS(ADACQL,3)
// ADACQL<ADACQ4>
extern volatile __bit                   ADACQ4              __at(0x1154);	// @ (0x22A * 8 + 4)
#define                                 ADACQ4_bit          _BIT_ACCESS(ADACQL,4)
// ADACQL<ADACQ5>
extern volatile __bit                   ADACQ5              __at(0x1155);	// @ (0x22A * 8 + 5)
#define                                 ADACQ5_bit          _BIT_ACCESS(ADACQL,5)
// ADACQL<ADACQ6>
extern volatile __bit                   ADACQ6              __at(0x1156);	// @ (0x22A * 8 + 6)
#define                                 ADACQ6_bit          _BIT_ACCESS(ADACQL,6)
// ADACQL<ADACQ7>
extern volatile __bit                   ADACQ7              __at(0x1157);	// @ (0x22A * 8 + 7)
#define                                 ADACQ7_bit          _BIT_ACCESS(ADACQL,7)
// ADACQH<ADACQ8>
extern volatile __bit                   ADACQ8              __at(0x1158);	// @ (0x22B * 8 + 0)
#define                                 ADACQ8_bit          _BIT_ACCESS(ADACQH,0)
// ADACQH<ADACQ9>
extern volatile __bit                   ADACQ9              __at(0x1159);	// @ (0x22B * 8 + 1)
#define                                 ADACQ9_bit          _BIT_ACCESS(ADACQH,1)
// ADACT<ADACT0>
extern volatile __bit                   ADACT0              __at(0x11A8);	// @ (0x235 * 8 + 0)
#define                                 ADACT0_bit          _BIT_ACCESS(ADACT,0)
// ADACT<ADACT1>
extern volatile __bit                   ADACT1              __at(0x11A9);	// @ (0x235 * 8 + 1)
#define                                 ADACT1_bit          _BIT_ACCESS(ADACT,1)
// ADACT<ADACT2>
extern volatile __bit                   ADACT2              __at(0x11AA);	// @ (0x235 * 8 + 2)
#define                                 ADACT2_bit          _BIT_ACCESS(ADACT,2)
// ADACT<ADACT3>
extern volatile __bit                   ADACT3              __at(0x11AB);	// @ (0x235 * 8 + 3)
#define                                 ADACT3_bit          _BIT_ACCESS(ADACT,3)
// ADACT<ADACT4>
extern volatile __bit                   ADACT4              __at(0x11AC);	// @ (0x235 * 8 + 4)
#define                                 ADACT4_bit          _BIT_ACCESS(ADACT,4)
// ADACT<ADACT5>
extern volatile __bit                   ADACT5              __at(0x11AD);	// @ (0x235 * 8 + 5)
#define                                 ADACT5_bit          _BIT_ACCESS(ADACT,5)
// ADACTPPS<ADACTPPS0>
extern volatile __bit                   ADACTPPS0           __at(0x1D88);	// @ (0x3B1 * 8 + 0)
#define                                 ADACTPPS0_bit       _BIT_ACCESS(ADACTPPS,0)
// ADACTPPS<ADACTPPS1>
extern volatile __bit                   ADACTPPS1           __at(0x1D89);	// @ (0x3B1 * 8 + 1)
#define                                 ADACTPPS1_bit       _BIT_ACCESS(ADACTPPS,1)
// ADACTPPS<ADACTPPS2>
extern volatile __bit                   ADACTPPS2           __at(0x1D8A);	// @ (0x3B1 * 8 + 2)
#define                                 ADACTPPS2_bit       _BIT_ACCESS(ADACTPPS,2)
// ADACTPPS<ADACTPPS3>
extern volatile __bit                   ADACTPPS3           __at(0x1D8B);	// @ (0x3B1 * 8 + 3)
#define                                 ADACTPPS3_bit       _BIT_ACCESS(ADACTPPS,3)
// ADACTPPS<ADACTPPS4>
extern volatile __bit                   ADACTPPS4           __at(0x1D8C);	// @ (0x3B1 * 8 + 4)
#define                                 ADACTPPS4_bit       _BIT_ACCESS(ADACTPPS,4)
// ADSTAT<ADAOV>
extern volatile __bit                   ADAOV               __at(0x119F);	// @ (0x233 * 8 + 7)
#define                                 ADAOV_bit           _BIT_ACCESS(ADSTAT,7)
// ADCON3<ADCALC0>
extern volatile __bit                   ADCALC0             __at(0x1194);	// @ (0x232 * 8 + 4)
#define                                 ADCALC0_bit         _BIT_ACCESS(ADCON3,4)
// ADCON3<ADCALC1>
extern volatile __bit                   ADCALC1             __at(0x1195);	// @ (0x232 * 8 + 5)
#define                                 ADCALC1_bit         _BIT_ACCESS(ADCON3,5)
// ADCON3<ADCALC2>
extern volatile __bit                   ADCALC2             __at(0x1196);	// @ (0x232 * 8 + 6)
#define                                 ADCALC2_bit         _BIT_ACCESS(ADCON3,6)
// ADCAP<ADCAP0>
extern volatile __bit                   ADCAP0              __at(0x1160);	// @ (0x22C * 8 + 0)
#define                                 ADCAP0_bit          _BIT_ACCESS(ADCAP,0)
// ADCAP<ADCAP1>
extern volatile __bit                   ADCAP1              __at(0x1161);	// @ (0x22C * 8 + 1)
#define                                 ADCAP1_bit          _BIT_ACCESS(ADCAP,1)
// ADCAP<ADCAP2>
extern volatile __bit                   ADCAP2              __at(0x1162);	// @ (0x22C * 8 + 2)
#define                                 ADCAP2_bit          _BIT_ACCESS(ADCAP,2)
// ADCAP<ADCAP3>
extern volatile __bit                   ADCAP3              __at(0x1163);	// @ (0x22C * 8 + 3)
#define                                 ADCAP3_bit          _BIT_ACCESS(ADCAP,3)
// ADCAP<ADCAP4>
extern volatile __bit                   ADCAP4              __at(0x1164);	// @ (0x22C * 8 + 4)
#define                                 ADCAP4_bit          _BIT_ACCESS(ADCAP,4)
// PMD4<ADCMD>
extern volatile __bit                   ADCMD               __at(0x1823);	// @ (0x304 * 8 + 3)
#define                                 ADCMD_bit           _BIT_ACCESS(PMD4,3)
// ADCNT<ADCNT0>
extern volatile __bit                   ADCNT0              __at(0x1110);	// @ (0x222 * 8 + 0)
#define                                 ADCNT0_bit          _BIT_ACCESS(ADCNT,0)
// ADCNT<ADCNT1>
extern volatile __bit                   ADCNT1              __at(0x1111);	// @ (0x222 * 8 + 1)
#define                                 ADCNT1_bit          _BIT_ACCESS(ADCNT,1)
// ADCNT<ADCNT2>
extern volatile __bit                   ADCNT2              __at(0x1112);	// @ (0x222 * 8 + 2)
#define                                 ADCNT2_bit          _BIT_ACCESS(ADCNT,2)
// ADCNT<ADCNT3>
extern volatile __bit                   ADCNT3              __at(0x1113);	// @ (0x222 * 8 + 3)
#define                                 ADCNT3_bit          _BIT_ACCESS(ADCNT,3)
// ADCNT<ADCNT4>
extern volatile __bit                   ADCNT4              __at(0x1114);	// @ (0x222 * 8 + 4)
#define                                 ADCNT4_bit          _BIT_ACCESS(ADCNT,4)
// ADCNT<ADCNT5>
extern volatile __bit                   ADCNT5              __at(0x1115);	// @ (0x222 * 8 + 5)
#define                                 ADCNT5_bit          _BIT_ACCESS(ADCNT,5)
// ADCNT<ADCNT6>
extern volatile __bit                   ADCNT6              __at(0x1116);	// @ (0x222 * 8 + 6)
#define                                 ADCNT6_bit          _BIT_ACCESS(ADCNT,6)
// ADCNT<ADCNT7>
extern volatile __bit                   ADCNT7              __at(0x1117);	// @ (0x222 * 8 + 7)
#define                                 ADCNT7_bit          _BIT_ACCESS(ADCNT,7)
// ADCON0<ADCONT>
extern volatile __bit                   ADCONT              __at(0x117E);	// @ (0x22F * 8 + 6)
#define                                 ADCONT_bit          _BIT_ACCESS(ADCON0,6)
// ADCON2<ADCRS0>
extern volatile __bit                   ADCRS0              __at(0x118C);	// @ (0x231 * 8 + 4)
#define                                 ADCRS0_bit          _BIT_ACCESS(ADCON2,4)
// ADCON2<ADCRS1>
extern volatile __bit                   ADCRS1              __at(0x118D);	// @ (0x231 * 8 + 5)
#define                                 ADCRS1_bit          _BIT_ACCESS(ADCON2,5)
// ADCON2<ADCRS2>
extern volatile __bit                   ADCRS2              __at(0x118E);	// @ (0x231 * 8 + 6)
#define                                 ADCRS2_bit          _BIT_ACCESS(ADCON2,6)
// ADCON0<ADCS>
extern volatile __bit                   ADCS                __at(0x117C);	// @ (0x22F * 8 + 4)
#define                                 ADCS_bit            _BIT_ACCESS(ADCON0,4)
// ADCLK<ADCS0>
extern volatile __bit                   ADCS0               __at(0x11B0);	// @ (0x236 * 8 + 0)
#define                                 ADCS0_bit           _BIT_ACCESS(ADCLK,0)
// ADCLK<ADCS1>
extern volatile __bit                   ADCS1               __at(0x11B1);	// @ (0x236 * 8 + 1)
#define                                 ADCS1_bit           _BIT_ACCESS(ADCLK,1)
// ADCLK<ADCS2>
extern volatile __bit                   ADCS2               __at(0x11B2);	// @ (0x236 * 8 + 2)
#define                                 ADCS2_bit           _BIT_ACCESS(ADCLK,2)
// ADCLK<ADCS3>
extern volatile __bit                   ADCS3               __at(0x11B3);	// @ (0x236 * 8 + 3)
#define                                 ADCS3_bit           _BIT_ACCESS(ADCLK,3)
// ADCLK<ADCS4>
extern volatile __bit                   ADCS4               __at(0x11B4);	// @ (0x236 * 8 + 4)
#define                                 ADCS4_bit           _BIT_ACCESS(ADCLK,4)
// ADCLK<ADCS5>
extern volatile __bit                   ADCS5               __at(0x11B5);	// @ (0x236 * 8 + 5)
#define                                 ADCS5_bit           _BIT_ACCESS(ADCLK,5)
// ADCON1<ADDSEN>
extern volatile __bit                   ADDSEN              __at(0x1180);	// @ (0x230 * 8 + 0)
#define                                 ADDSEN_bit          _BIT_ACCESS(ADCON1,0)
// ADERRL<ADERR0>
extern volatile __bit                   ADERR0              __at(0x10C8);	// @ (0x219 * 8 + 0)
#define                                 ADERR0_bit          _BIT_ACCESS(ADERRL,0)
// ADERRL<ADERR1>
extern volatile __bit                   ADERR1              __at(0x10C9);	// @ (0x219 * 8 + 1)
#define                                 ADERR1_bit          _BIT_ACCESS(ADERRL,1)
// ADERRH<ADERR10>
extern volatile __bit                   ADERR10             __at(0x10D2);	// @ (0x21A * 8 + 2)
#define                                 ADERR10_bit         _BIT_ACCESS(ADERRH,2)
// ADERRH<ADERR11>
extern volatile __bit                   ADERR11             __at(0x10D3);	// @ (0x21A * 8 + 3)
#define                                 ADERR11_bit         _BIT_ACCESS(ADERRH,3)
// ADERRH<ADERR12>
extern volatile __bit                   ADERR12             __at(0x10D4);	// @ (0x21A * 8 + 4)
#define                                 ADERR12_bit         _BIT_ACCESS(ADERRH,4)
// ADERRH<ADERR13>
extern volatile __bit                   ADERR13             __at(0x10D5);	// @ (0x21A * 8 + 5)
#define                                 ADERR13_bit         _BIT_ACCESS(ADERRH,5)
// ADERRH<ADERR14>
extern volatile __bit                   ADERR14             __at(0x10D6);	// @ (0x21A * 8 + 6)
#define                                 ADERR14_bit         _BIT_ACCESS(ADERRH,6)
// ADERRH<ADERR15>
extern volatile __bit                   ADERR15             __at(0x10D7);	// @ (0x21A * 8 + 7)
#define                                 ADERR15_bit         _BIT_ACCESS(ADERRH,7)
// ADERRL<ADERR2>
extern volatile __bit                   ADERR2              __at(0x10CA);	// @ (0x219 * 8 + 2)
#define                                 ADERR2_bit          _BIT_ACCESS(ADERRL,2)
// ADERRL<ADERR3>
extern volatile __bit                   ADERR3              __at(0x10CB);	// @ (0x219 * 8 + 3)
#define                                 ADERR3_bit          _BIT_ACCESS(ADERRL,3)
// ADERRL<ADERR4>
extern volatile __bit                   ADERR4              __at(0x10CC);	// @ (0x219 * 8 + 4)
#define                                 ADERR4_bit          _BIT_ACCESS(ADERRL,4)
// ADERRL<ADERR5>
extern volatile __bit                   ADERR5              __at(0x10CD);	// @ (0x219 * 8 + 5)
#define                                 ADERR5_bit          _BIT_ACCESS(ADERRL,5)
// ADERRL<ADERR6>
extern volatile __bit                   ADERR6              __at(0x10CE);	// @ (0x219 * 8 + 6)
#define                                 ADERR6_bit          _BIT_ACCESS(ADERRL,6)
// ADERRL<ADERR7>
extern volatile __bit                   ADERR7              __at(0x10CF);	// @ (0x219 * 8 + 7)
#define                                 ADERR7_bit          _BIT_ACCESS(ADERRL,7)
// ADERRH<ADERR8>
extern volatile __bit                   ADERR8              __at(0x10D0);	// @ (0x21A * 8 + 0)
#define                                 ADERR8_bit          _BIT_ACCESS(ADERRH,0)
// ADERRH<ADERR9>
extern volatile __bit                   ADERR9              __at(0x10D1);	// @ (0x21A * 8 + 1)
#define                                 ADERR9_bit          _BIT_ACCESS(ADERRH,1)
// ADFLTRL<ADFLTR0>
extern volatile __bit                   ADFLTR0             __at(0x10E8);	// @ (0x21D * 8 + 0)
#define                                 ADFLTR0_bit         _BIT_ACCESS(ADFLTRL,0)
// ADFLTRL<ADFLTR1>
extern volatile __bit                   ADFLTR1             __at(0x10E9);	// @ (0x21D * 8 + 1)
#define                                 ADFLTR1_bit         _BIT_ACCESS(ADFLTRL,1)
// ADFLTRH<ADFLTR10>
extern volatile __bit                   ADFLTR10            __at(0x10F2);	// @ (0x21E * 8 + 2)
#define                                 ADFLTR10_bit        _BIT_ACCESS(ADFLTRH,2)
// ADFLTRH<ADFLTR11>
extern volatile __bit                   ADFLTR11            __at(0x10F3);	// @ (0x21E * 8 + 3)
#define                                 ADFLTR11_bit        _BIT_ACCESS(ADFLTRH,3)
// ADFLTRH<ADFLTR12>
extern volatile __bit                   ADFLTR12            __at(0x10F4);	// @ (0x21E * 8 + 4)
#define                                 ADFLTR12_bit        _BIT_ACCESS(ADFLTRH,4)
// ADFLTRH<ADFLTR13>
extern volatile __bit                   ADFLTR13            __at(0x10F5);	// @ (0x21E * 8 + 5)
#define                                 ADFLTR13_bit        _BIT_ACCESS(ADFLTRH,5)
// ADFLTRH<ADFLTR14>
extern volatile __bit                   ADFLTR14            __at(0x10F6);	// @ (0x21E * 8 + 6)
#define                                 ADFLTR14_bit        _BIT_ACCESS(ADFLTRH,6)
// ADFLTRH<ADFLTR15>
extern volatile __bit                   ADFLTR15            __at(0x10F7);	// @ (0x21E * 8 + 7)
#define                                 ADFLTR15_bit        _BIT_ACCESS(ADFLTRH,7)
// ADFLTRL<ADFLTR2>
extern volatile __bit                   ADFLTR2             __at(0x10EA);	// @ (0x21D * 8 + 2)
#define                                 ADFLTR2_bit         _BIT_ACCESS(ADFLTRL,2)
// ADFLTRL<ADFLTR3>
extern volatile __bit                   ADFLTR3             __at(0x10EB);	// @ (0x21D * 8 + 3)
#define                                 ADFLTR3_bit         _BIT_ACCESS(ADFLTRL,3)
// ADFLTRL<ADFLTR4>
extern volatile __bit                   ADFLTR4             __at(0x10EC);	// @ (0x21D * 8 + 4)
#define                                 ADFLTR4_bit         _BIT_ACCESS(ADFLTRL,4)
// ADFLTRL<ADFLTR5>
extern volatile __bit                   ADFLTR5             __at(0x10ED);	// @ (0x21D * 8 + 5)
#define                                 ADFLTR5_bit         _BIT_ACCESS(ADFLTRL,5)
// ADFLTRL<ADFLTR6>
extern volatile __bit                   ADFLTR6             __at(0x10EE);	// @ (0x21D * 8 + 6)
#define                                 ADFLTR6_bit         _BIT_ACCESS(ADFLTRL,6)
// ADFLTRL<ADFLTR7>
extern volatile __bit                   ADFLTR7             __at(0x10EF);	// @ (0x21D * 8 + 7)
#define                                 ADFLTR7_bit         _BIT_ACCESS(ADFLTRL,7)
// ADFLTRH<ADFLTR8>
extern volatile __bit                   ADFLTR8             __at(0x10F0);	// @ (0x21E * 8 + 0)
#define                                 ADFLTR8_bit         _BIT_ACCESS(ADFLTRH,0)
// ADFLTRH<ADFLTR9>
extern volatile __bit                   ADFLTR9             __at(0x10F1);	// @ (0x21E * 8 + 1)
#define                                 ADFLTR9_bit         _BIT_ACCESS(ADFLTRH,1)
// ADCON0<ADFM0>
extern volatile __bit                   ADFM0               __at(0x117A);	// @ (0x22F * 8 + 2)
#define                                 ADFM0_bit           _BIT_ACCESS(ADCON0,2)
// FVRCON<ADFVR0>
extern volatile __bit                   ADFVR0              __at(0x1008);	// @ (0x201 * 8 + 0)
#define                                 ADFVR0_bit          _BIT_ACCESS(FVRCON,0)
// FVRCON<ADFVR1>
extern volatile __bit                   ADFVR1              __at(0x1009);	// @ (0x201 * 8 + 1)
#define                                 ADFVR1_bit          _BIT_ACCESS(FVRCON,1)
// ADCON0<ADGO>
extern volatile __bit                   ADGO                __at(0x1178);	// @ (0x22F * 8 + 0)
#define                                 ADGO_bit            _BIT_ACCESS(ADCON0,0)
// ADCON1<ADGPOL>
extern volatile __bit                   ADGPOL              __at(0x1185);	// @ (0x230 * 8 + 5)
#define                                 ADGPOL_bit          _BIT_ACCESS(ADCON1,5)
// PIE9<ADIE>
extern volatile __bit                   ADIE                __at(0x23E6);	// @ (0x47C * 8 + 6)
#define                                 ADIE_bit            _BIT_ACCESS(PIE9,6)
// PIR9<ADIF>
extern volatile __bit                   ADIF                __at(0x2396);	// @ (0x472 * 8 + 6)
#define                                 ADIF_bit            _BIT_ACCESS(PIR9,6)
// IPR9<ADIP>
extern volatile __bit                   ADIP                __at(0x2436);	// @ (0x486 * 8 + 6)
#define                                 ADIP_bit            _BIT_ACCESS(IPR9,6)
// ADCON1<ADIPEN>
extern volatile __bit                   ADIPEN              __at(0x1186);	// @ (0x230 * 8 + 6)
#define                                 ADIPEN_bit          _BIT_ACCESS(ADCON1,6)
// ADLTHL<ADLTH0>
extern volatile __bit                   ADLTH0              __at(0x10A8);	// @ (0x215 * 8 + 0)
#define                                 ADLTH0_bit          _BIT_ACCESS(ADLTHL,0)
// ADLTHL<ADLTH1>
extern volatile __bit                   ADLTH1              __at(0x10A9);	// @ (0x215 * 8 + 1)
#define                                 ADLTH1_bit          _BIT_ACCESS(ADLTHL,1)
// ADLTHH<ADLTH10>
extern volatile __bit                   ADLTH10             __at(0x10B2);	// @ (0x216 * 8 + 2)
#define                                 ADLTH10_bit         _BIT_ACCESS(ADLTHH,2)
// ADLTHH<ADLTH11>
extern volatile __bit                   ADLTH11             __at(0x10B3);	// @ (0x216 * 8 + 3)
#define                                 ADLTH11_bit         _BIT_ACCESS(ADLTHH,3)
// ADLTHH<ADLTH12>
extern volatile __bit                   ADLTH12             __at(0x10B4);	// @ (0x216 * 8 + 4)
#define                                 ADLTH12_bit         _BIT_ACCESS(ADLTHH,4)
// ADLTHH<ADLTH13>
extern volatile __bit                   ADLTH13             __at(0x10B5);	// @ (0x216 * 8 + 5)
#define                                 ADLTH13_bit         _BIT_ACCESS(ADLTHH,5)
// ADLTHH<ADLTH14>
extern volatile __bit                   ADLTH14             __at(0x10B6);	// @ (0x216 * 8 + 6)
#define                                 ADLTH14_bit         _BIT_ACCESS(ADLTHH,6)
// ADLTHH<ADLTH15>
extern volatile __bit                   ADLTH15             __at(0x10B7);	// @ (0x216 * 8 + 7)
#define                                 ADLTH15_bit         _BIT_ACCESS(ADLTHH,7)
// ADLTHL<ADLTH2>
extern volatile __bit                   ADLTH2              __at(0x10AA);	// @ (0x215 * 8 + 2)
#define                                 ADLTH2_bit          _BIT_ACCESS(ADLTHL,2)
// ADLTHL<ADLTH3>
extern volatile __bit                   ADLTH3              __at(0x10AB);	// @ (0x215 * 8 + 3)
#define                                 ADLTH3_bit          _BIT_ACCESS(ADLTHL,3)
// ADLTHL<ADLTH4>
extern volatile __bit                   ADLTH4              __at(0x10AC);	// @ (0x215 * 8 + 4)
#define                                 ADLTH4_bit          _BIT_ACCESS(ADLTHL,4)
// ADLTHL<ADLTH5>
extern volatile __bit                   ADLTH5              __at(0x10AD);	// @ (0x215 * 8 + 5)
#define                                 ADLTH5_bit          _BIT_ACCESS(ADLTHL,5)
// ADLTHL<ADLTH6>
extern volatile __bit                   ADLTH6              __at(0x10AE);	// @ (0x215 * 8 + 6)
#define                                 ADLTH6_bit          _BIT_ACCESS(ADLTHL,6)
// ADLTHL<ADLTH7>
extern volatile __bit                   ADLTH7              __at(0x10AF);	// @ (0x215 * 8 + 7)
#define                                 ADLTH7_bit          _BIT_ACCESS(ADLTHL,7)
// ADLTHH<ADLTH8>
extern volatile __bit                   ADLTH8              __at(0x10B0);	// @ (0x216 * 8 + 0)
#define                                 ADLTH8_bit          _BIT_ACCESS(ADLTHH,0)
// ADLTHH<ADLTH9>
extern volatile __bit                   ADLTH9              __at(0x10B1);	// @ (0x216 * 8 + 1)
#define                                 ADLTH9_bit          _BIT_ACCESS(ADLTHH,1)
// ADSTAT<ADLTHR>
extern volatile __bit                   ADLTHR              __at(0x119D);	// @ (0x233 * 8 + 5)
#define                                 ADLTHR_bit          _BIT_ACCESS(ADSTAT,5)
// ADSTAT<ADMATH>
extern volatile __bit                   ADMATH              __at(0x119C);	// @ (0x233 * 8 + 4)
#define                                 ADMATH_bit          _BIT_ACCESS(ADSTAT,4)
// ADCON2<ADMD0>
extern volatile __bit                   ADMD0               __at(0x1188);	// @ (0x231 * 8 + 0)
#define                                 ADMD0_bit           _BIT_ACCESS(ADCON2,0)
// ADCON2<ADMD1>
extern volatile __bit                   ADMD1               __at(0x1189);	// @ (0x231 * 8 + 1)
#define                                 ADMD1_bit           _BIT_ACCESS(ADCON2,1)
// ADCON2<ADMD2>
extern volatile __bit                   ADMD2               __at(0x118A);	// @ (0x231 * 8 + 2)
#define                                 ADMD2_bit           _BIT_ACCESS(ADCON2,2)
// ADNCH<ADNCH0>
extern volatile __bit                   ADNCH0              __at(0x1148);	// @ (0x229 * 8 + 0)
#define                                 ADNCH0_bit          _BIT_ACCESS(ADNCH,0)
// ADNCH<ADNCH1>
extern volatile __bit                   ADNCH1              __at(0x1149);	// @ (0x229 * 8 + 1)
#define                                 ADNCH1_bit          _BIT_ACCESS(ADNCH,1)
// ADNCH<ADNCH2>
extern volatile __bit                   ADNCH2              __at(0x114A);	// @ (0x229 * 8 + 2)
#define                                 ADNCH2_bit          _BIT_ACCESS(ADNCH,2)
// ADNCH<ADNCH3>
extern volatile __bit                   ADNCH3              __at(0x114B);	// @ (0x229 * 8 + 3)
#define                                 ADNCH3_bit          _BIT_ACCESS(ADNCH,3)
// ADNCH<ADNCH4>
extern volatile __bit                   ADNCH4              __at(0x114C);	// @ (0x229 * 8 + 4)
#define                                 ADNCH4_bit          _BIT_ACCESS(ADNCH,4)
// ADNCH<ADNCH5>
extern volatile __bit                   ADNCH5              __at(0x114D);	// @ (0x229 * 8 + 5)
#define                                 ADNCH5_bit          _BIT_ACCESS(ADNCH,5)
// ADREF<ADNREF0>
extern volatile __bit                   ADNREF0             __at(0x11A4);	// @ (0x234 * 8 + 4)
#define                                 ADNREF0_bit         _BIT_ACCESS(ADREF,4)
// OSCEN<ADOEN>
extern volatile __bit                   ADOEN               __at(0x3F2);	// @ (0x7E * 8 + 2)
#define                                 ADOEN_bit           _BIT_ACCESS(OSCEN,2)
// ADCON0<ADON>
extern volatile __bit                   ADON                __at(0x117F);	// @ (0x22F * 8 + 7)
#define                                 ADON_bit            _BIT_ACCESS(ADCON0,7)
// OSCSTAT<ADOR>
extern volatile __bit                   ADOR                __at(0x3EA);	// @ (0x7D * 8 + 2)
#define                                 ADOR_bit            _BIT_ACCESS(OSCSTAT,2)
// ADSTAT<ADOV>
extern volatile __bit                   ADOV                __at(0x119F);	// @ (0x233 * 8 + 7)
#define                                 ADOV_bit            _BIT_ACCESS(ADSTAT,7)
// ADPCH<ADPCH0>
extern volatile __bit                   ADPCH0              __at(0x1140);	// @ (0x228 * 8 + 0)
#define                                 ADPCH0_bit          _BIT_ACCESS(ADPCH,0)
// ADPCH<ADPCH1>
extern volatile __bit                   ADPCH1              __at(0x1141);	// @ (0x228 * 8 + 1)
#define                                 ADPCH1_bit          _BIT_ACCESS(ADPCH,1)
// ADPCH<ADPCH2>
extern volatile __bit                   ADPCH2              __at(0x1142);	// @ (0x228 * 8 + 2)
#define                                 ADPCH2_bit          _BIT_ACCESS(ADPCH,2)
// ADPCH<ADPCH3>
extern volatile __bit                   ADPCH3              __at(0x1143);	// @ (0x228 * 8 + 3)
#define                                 ADPCH3_bit          _BIT_ACCESS(ADPCH,3)
// ADPCH<ADPCH4>
extern volatile __bit                   ADPCH4              __at(0x1144);	// @ (0x228 * 8 + 4)
#define                                 ADPCH4_bit          _BIT_ACCESS(ADPCH,4)
// ADPCH<ADPCH5>
extern volatile __bit                   ADPCH5              __at(0x1145);	// @ (0x228 * 8 + 5)
#define                                 ADPCH5_bit          _BIT_ACCESS(ADPCH,5)
// ADCON1<ADPCSC>
extern volatile __bit                   ADPCSC              __at(0x1181);	// @ (0x230 * 8 + 1)
#define                                 ADPCSC_bit          _BIT_ACCESS(ADCON1,1)
// ADCON1<ADPPOL>
extern volatile __bit                   ADPPOL              __at(0x1187);	// @ (0x230 * 8 + 7)
#define                                 ADPPOL_bit          _BIT_ACCESS(ADCON1,7)
// ADPREL<ADPRE0>
extern volatile __bit                   ADPRE0              __at(0x1168);	// @ (0x22D * 8 + 0)
#define                                 ADPRE0_bit          _BIT_ACCESS(ADPREL,0)
// ADPREL<ADPRE1>
extern volatile __bit                   ADPRE1              __at(0x1169);	// @ (0x22D * 8 + 1)
#define                                 ADPRE1_bit          _BIT_ACCESS(ADPREL,1)
// ADPREH<ADPRE10>
extern volatile __bit                   ADPRE10             __at(0x1172);	// @ (0x22E * 8 + 2)
#define                                 ADPRE10_bit         _BIT_ACCESS(ADPREH,2)
// ADPREH<ADPRE11>
extern volatile __bit                   ADPRE11             __at(0x1173);	// @ (0x22E * 8 + 3)
#define                                 ADPRE11_bit         _BIT_ACCESS(ADPREH,3)
// ADPREH<ADPRE12>
extern volatile __bit                   ADPRE12             __at(0x1174);	// @ (0x22E * 8 + 4)
#define                                 ADPRE12_bit         _BIT_ACCESS(ADPREH,4)
// ADPREL<ADPRE2>
extern volatile __bit                   ADPRE2              __at(0x116A);	// @ (0x22D * 8 + 2)
#define                                 ADPRE2_bit          _BIT_ACCESS(ADPREL,2)
// ADPREL<ADPRE3>
extern volatile __bit                   ADPRE3              __at(0x116B);	// @ (0x22D * 8 + 3)
#define                                 ADPRE3_bit          _BIT_ACCESS(ADPREL,3)
// ADPREL<ADPRE4>
extern volatile __bit                   ADPRE4              __at(0x116C);	// @ (0x22D * 8 + 4)
#define                                 ADPRE4_bit          _BIT_ACCESS(ADPREL,4)
// ADPREL<ADPRE5>
extern volatile __bit                   ADPRE5              __at(0x116D);	// @ (0x22D * 8 + 5)
#define                                 ADPRE5_bit          _BIT_ACCESS(ADPREL,5)
// ADPREL<ADPRE6>
extern volatile __bit                   ADPRE6              __at(0x116E);	// @ (0x22D * 8 + 6)
#define                                 ADPRE6_bit          _BIT_ACCESS(ADPREL,6)
// ADPREL<ADPRE7>
extern volatile __bit                   ADPRE7              __at(0x116F);	// @ (0x22D * 8 + 7)
#define                                 ADPRE7_bit          _BIT_ACCESS(ADPREL,7)
// ADPREH<ADPRE8>
extern volatile __bit                   ADPRE8              __at(0x1170);	// @ (0x22E * 8 + 0)
#define                                 ADPRE8_bit          _BIT_ACCESS(ADPREH,0)
// ADPREH<ADPRE9>
extern volatile __bit                   ADPRE9              __at(0x1171);	// @ (0x22E * 8 + 1)
#define                                 ADPRE9_bit          _BIT_ACCESS(ADPREH,1)
// ADREF<ADPREF0>
extern volatile __bit                   ADPREF0             __at(0x11A0);	// @ (0x234 * 8 + 0)
#define                                 ADPREF0_bit         _BIT_ACCESS(ADREF,0)
// ADREF<ADPREF1>
extern volatile __bit                   ADPREF1             __at(0x11A1);	// @ (0x234 * 8 + 1)
#define                                 ADPREF1_bit         _BIT_ACCESS(ADREF,1)
// ADPREVL<ADPREV0>
extern volatile __bit                   ADPREV0             __at(0x1120);	// @ (0x224 * 8 + 0)
#define                                 ADPREV0_bit         _BIT_ACCESS(ADPREVL,0)
// ADPREVL<ADPREV1>
extern volatile __bit                   ADPREV1             __at(0x1121);	// @ (0x224 * 8 + 1)
#define                                 ADPREV1_bit         _BIT_ACCESS(ADPREVL,1)
// ADPREVH<ADPREV10>
extern volatile __bit                   ADPREV10            __at(0x112A);	// @ (0x225 * 8 + 2)
#define                                 ADPREV10_bit        _BIT_ACCESS(ADPREVH,2)
// ADPREVH<ADPREV11>
extern volatile __bit                   ADPREV11            __at(0x112B);	// @ (0x225 * 8 + 3)
#define                                 ADPREV11_bit        _BIT_ACCESS(ADPREVH,3)
// ADPREVH<ADPREV12>
extern volatile __bit                   ADPREV12            __at(0x112C);	// @ (0x225 * 8 + 4)
#define                                 ADPREV12_bit        _BIT_ACCESS(ADPREVH,4)
// ADPREVH<ADPREV13>
extern volatile __bit                   ADPREV13            __at(0x112D);	// @ (0x225 * 8 + 5)
#define                                 ADPREV13_bit        _BIT_ACCESS(ADPREVH,5)
// ADPREVH<ADPREV14>
extern volatile __bit                   ADPREV14            __at(0x112E);	// @ (0x225 * 8 + 6)
#define                                 ADPREV14_bit        _BIT_ACCESS(ADPREVH,6)
// ADPREVH<ADPREV15>
extern volatile __bit                   ADPREV15            __at(0x112F);	// @ (0x225 * 8 + 7)
#define                                 ADPREV15_bit        _BIT_ACCESS(ADPREVH,7)
// ADPREVL<ADPREV2>
extern volatile __bit                   ADPREV2             __at(0x1122);	// @ (0x224 * 8 + 2)
#define                                 ADPREV2_bit         _BIT_ACCESS(ADPREVL,2)
// ADPREVL<ADPREV3>
extern volatile __bit                   ADPREV3             __at(0x1123);	// @ (0x224 * 8 + 3)
#define                                 ADPREV3_bit         _BIT_ACCESS(ADPREVL,3)
// ADPREVL<ADPREV4>
extern volatile __bit                   ADPREV4             __at(0x1124);	// @ (0x224 * 8 + 4)
#define                                 ADPREV4_bit         _BIT_ACCESS(ADPREVL,4)
// ADPREVL<ADPREV5>
extern volatile __bit                   ADPREV5             __at(0x1125);	// @ (0x224 * 8 + 5)
#define                                 ADPREV5_bit         _BIT_ACCESS(ADPREVL,5)
// ADPREVL<ADPREV6>
extern volatile __bit                   ADPREV6             __at(0x1126);	// @ (0x224 * 8 + 6)
#define                                 ADPREV6_bit         _BIT_ACCESS(ADPREVL,6)
// ADPREVL<ADPREV7>
extern volatile __bit                   ADPREV7             __at(0x1127);	// @ (0x224 * 8 + 7)
#define                                 ADPREV7_bit         _BIT_ACCESS(ADPREVL,7)
// ADPREVH<ADPREV8>
extern volatile __bit                   ADPREV8             __at(0x1128);	// @ (0x225 * 8 + 0)
#define                                 ADPREV8_bit         _BIT_ACCESS(ADPREVH,0)
// ADPREVH<ADPREV9>
extern volatile __bit                   ADPREV9             __at(0x1129);	// @ (0x225 * 8 + 1)
#define                                 ADPREV9_bit         _BIT_ACCESS(ADPREVH,1)
// ADCON2<ADPSIS>
extern volatile __bit                   ADPSIS              __at(0x118F);	// @ (0x231 * 8 + 7)
#define                                 ADPSIS_bit          _BIT_ACCESS(ADCON2,7)
// I2C1PIE<ADR1IE>
extern volatile __bit                   ADR1IE              __at(0xF5B);	// @ (0x1EB * 8 + 3)
#define                                 ADR1IE_bit          _BIT_ACCESS(I2C1PIE,3)
// I2C1PIR<ADR1IF>
extern volatile __bit                   ADR1IF              __at(0xF53);	// @ (0x1EA * 8 + 3)
#define                                 ADR1IF_bit          _BIT_ACCESS(I2C1PIR,3)
// ADRESL<ADRES0>
extern volatile __bit                   ADRES0              __at(0x1130);	// @ (0x226 * 8 + 0)
#define                                 ADRES0_bit          _BIT_ACCESS(ADRESL,0)
// ADRESL<ADRES1>
extern volatile __bit                   ADRES1              __at(0x1131);	// @ (0x226 * 8 + 1)
#define                                 ADRES1_bit          _BIT_ACCESS(ADRESL,1)
// ADRESH<ADRES10>
extern volatile __bit                   ADRES10             __at(0x113A);	// @ (0x227 * 8 + 2)
#define                                 ADRES10_bit         _BIT_ACCESS(ADRESH,2)
// ADRESH<ADRES11>
extern volatile __bit                   ADRES11             __at(0x113B);	// @ (0x227 * 8 + 3)
#define                                 ADRES11_bit         _BIT_ACCESS(ADRESH,3)
// ADRESH<ADRES12>
extern volatile __bit                   ADRES12             __at(0x113C);	// @ (0x227 * 8 + 4)
#define                                 ADRES12_bit         _BIT_ACCESS(ADRESH,4)
// ADRESH<ADRES13>
extern volatile __bit                   ADRES13             __at(0x113D);	// @ (0x227 * 8 + 5)
#define                                 ADRES13_bit         _BIT_ACCESS(ADRESH,5)
// ADRESH<ADRES14>
extern volatile __bit                   ADRES14             __at(0x113E);	// @ (0x227 * 8 + 6)
#define                                 ADRES14_bit         _BIT_ACCESS(ADRESH,6)
// ADRESH<ADRES15>
extern volatile __bit                   ADRES15             __at(0x113F);	// @ (0x227 * 8 + 7)
#define                                 ADRES15_bit         _BIT_ACCESS(ADRESH,7)
// ADRESL<ADRES2>
extern volatile __bit                   ADRES2              __at(0x1132);	// @ (0x226 * 8 + 2)
#define                                 ADRES2_bit          _BIT_ACCESS(ADRESL,2)
// ADRESL<ADRES3>
extern volatile __bit                   ADRES3              __at(0x1133);	// @ (0x226 * 8 + 3)
#define                                 ADRES3_bit          _BIT_ACCESS(ADRESL,3)
// ADRESL<ADRES4>
extern volatile __bit                   ADRES4              __at(0x1134);	// @ (0x226 * 8 + 4)
#define                                 ADRES4_bit          _BIT_ACCESS(ADRESL,4)
// ADRESL<ADRES5>
extern volatile __bit                   ADRES5              __at(0x1135);	// @ (0x226 * 8 + 5)
#define                                 ADRES5_bit          _BIT_ACCESS(ADRESL,5)
// ADRESL<ADRES6>
extern volatile __bit                   ADRES6              __at(0x1136);	// @ (0x226 * 8 + 6)
#define                                 ADRES6_bit          _BIT_ACCESS(ADRESL,6)
// ADRESL<ADRES7>
extern volatile __bit                   ADRES7              __at(0x1137);	// @ (0x226 * 8 + 7)
#define                                 ADRES7_bit          _BIT_ACCESS(ADRESL,7)
// ADRESH<ADRES8>
extern volatile __bit                   ADRES8              __at(0x1138);	// @ (0x227 * 8 + 0)
#define                                 ADRES8_bit          _BIT_ACCESS(ADRESH,0)
// ADRESH<ADRES9>
extern volatile __bit                   ADRES9              __at(0x1139);	// @ (0x227 * 8 + 1)
#define                                 ADRES9_bit          _BIT_ACCESS(ADRESH,1)
// I2C1PIE<ADRIE>
extern volatile __bit                   ADRIE               __at(0xF5B);	// @ (0x1EB * 8 + 3)
#define                                 ADRIE_bit           _BIT_ACCESS(I2C1PIE,3)
// I2C1PIR<ADRIF>
extern volatile __bit                   ADRIF               __at(0xF53);	// @ (0x1EA * 8 + 3)
#define                                 ADRIF_bit           _BIT_ACCESS(I2C1PIR,3)
// ADRPT<ADRPT0>
extern volatile __bit                   ADRPT0              __at(0x1118);	// @ (0x223 * 8 + 0)
#define                                 ADRPT0_bit          _BIT_ACCESS(ADRPT,0)
// ADRPT<ADRPT1>
extern volatile __bit                   ADRPT1              __at(0x1119);	// @ (0x223 * 8 + 1)
#define                                 ADRPT1_bit          _BIT_ACCESS(ADRPT,1)
// ADRPT<ADRPT2>
extern volatile __bit                   ADRPT2              __at(0x111A);	// @ (0x223 * 8 + 2)
#define                                 ADRPT2_bit          _BIT_ACCESS(ADRPT,2)
// ADRPT<ADRPT3>
extern volatile __bit                   ADRPT3              __at(0x111B);	// @ (0x223 * 8 + 3)
#define                                 ADRPT3_bit          _BIT_ACCESS(ADRPT,3)
// ADRPT<ADRPT4>
extern volatile __bit                   ADRPT4              __at(0x111C);	// @ (0x223 * 8 + 4)
#define                                 ADRPT4_bit          _BIT_ACCESS(ADRPT,4)
// ADRPT<ADRPT5>
extern volatile __bit                   ADRPT5              __at(0x111D);	// @ (0x223 * 8 + 5)
#define                                 ADRPT5_bit          _BIT_ACCESS(ADRPT,5)
// ADRPT<ADRPT6>
extern volatile __bit                   ADRPT6              __at(0x111E);	// @ (0x223 * 8 + 6)
#define                                 ADRPT6_bit          _BIT_ACCESS(ADRPT,6)
// ADRPT<ADRPT7>
extern volatile __bit                   ADRPT7              __at(0x111F);	// @ (0x223 * 8 + 7)
#define                                 ADRPT7_bit          _BIT_ACCESS(ADRPT,7)
// ADCON3<ADSOI>
extern volatile __bit                   ADSOI               __at(0x1193);	// @ (0x232 * 8 + 3)
#define                                 ADSOI_bit           _BIT_ACCESS(ADCON3,3)
// ADSTAT<ADSTAT0>
extern volatile __bit                   ADSTAT0             __at(0x1198);	// @ (0x233 * 8 + 0)
#define                                 ADSTAT0_bit         _BIT_ACCESS(ADSTAT,0)
// ADSTAT<ADSTAT1>
extern volatile __bit                   ADSTAT1             __at(0x1199);	// @ (0x233 * 8 + 1)
#define                                 ADSTAT1_bit         _BIT_ACCESS(ADSTAT,1)
// ADSTAT<ADSTAT2>
extern volatile __bit                   ADSTAT2             __at(0x119A);	// @ (0x233 * 8 + 2)
#define                                 ADSTAT2_bit         _BIT_ACCESS(ADSTAT,2)
// ADSTPTL<ADSTPT0>
extern volatile __bit                   ADSTPT0             __at(0x10D8);	// @ (0x21B * 8 + 0)
#define                                 ADSTPT0_bit         _BIT_ACCESS(ADSTPTL,0)
// ADSTPTL<ADSTPT1>
extern volatile __bit                   ADSTPT1             __at(0x10D9);	// @ (0x21B * 8 + 1)
#define                                 ADSTPT1_bit         _BIT_ACCESS(ADSTPTL,1)
// ADSTPTH<ADSTPT10>
extern volatile __bit                   ADSTPT10            __at(0x10E2);	// @ (0x21C * 8 + 2)
#define                                 ADSTPT10_bit        _BIT_ACCESS(ADSTPTH,2)
// ADSTPTH<ADSTPT11>
extern volatile __bit                   ADSTPT11            __at(0x10E3);	// @ (0x21C * 8 + 3)
#define                                 ADSTPT11_bit        _BIT_ACCESS(ADSTPTH,3)
// ADSTPTH<ADSTPT12>
extern volatile __bit                   ADSTPT12            __at(0x10E4);	// @ (0x21C * 8 + 4)
#define                                 ADSTPT12_bit        _BIT_ACCESS(ADSTPTH,4)
// ADSTPTH<ADSTPT13>
extern volatile __bit                   ADSTPT13            __at(0x10E5);	// @ (0x21C * 8 + 5)
#define                                 ADSTPT13_bit        _BIT_ACCESS(ADSTPTH,5)
// ADSTPTH<ADSTPT14>
extern volatile __bit                   ADSTPT14            __at(0x10E6);	// @ (0x21C * 8 + 6)
#define                                 ADSTPT14_bit        _BIT_ACCESS(ADSTPTH,6)
// ADSTPTH<ADSTPT15>
extern volatile __bit                   ADSTPT15            __at(0x10E7);	// @ (0x21C * 8 + 7)
#define                                 ADSTPT15_bit        _BIT_ACCESS(ADSTPTH,7)
// ADSTPTL<ADSTPT2>
extern volatile __bit                   ADSTPT2             __at(0x10DA);	// @ (0x21B * 8 + 2)
#define                                 ADSTPT2_bit         _BIT_ACCESS(ADSTPTL,2)
// ADSTPTL<ADSTPT3>
extern volatile __bit                   ADSTPT3             __at(0x10DB);	// @ (0x21B * 8 + 3)
#define                                 ADSTPT3_bit         _BIT_ACCESS(ADSTPTL,3)
// ADSTPTL<ADSTPT4>
extern volatile __bit                   ADSTPT4             __at(0x10DC);	// @ (0x21B * 8 + 4)
#define                                 ADSTPT4_bit         _BIT_ACCESS(ADSTPTL,4)
// ADSTPTL<ADSTPT5>
extern volatile __bit                   ADSTPT5             __at(0x10DD);	// @ (0x21B * 8 + 5)
#define                                 ADSTPT5_bit         _BIT_ACCESS(ADSTPTL,5)
// ADSTPTL<ADSTPT6>
extern volatile __bit                   ADSTPT6             __at(0x10DE);	// @ (0x21B * 8 + 6)
#define                                 ADSTPT6_bit         _BIT_ACCESS(ADSTPTL,6)
// ADSTPTL<ADSTPT7>
extern volatile __bit                   ADSTPT7             __at(0x10DF);	// @ (0x21B * 8 + 7)
#define                                 ADSTPT7_bit         _BIT_ACCESS(ADSTPTL,7)
// ADSTPTH<ADSTPT8>
extern volatile __bit                   ADSTPT8             __at(0x10E0);	// @ (0x21C * 8 + 0)
#define                                 ADSTPT8_bit         _BIT_ACCESS(ADSTPTH,0)
// ADSTPTH<ADSTPT9>
extern volatile __bit                   ADSTPT9             __at(0x10E1);	// @ (0x21C * 8 + 1)
#define                                 ADSTPT9_bit         _BIT_ACCESS(ADSTPTH,1)
// PIE9<ADTIE>
extern volatile __bit                   ADTIE               __at(0x23E7);	// @ (0x47C * 8 + 7)
#define                                 ADTIE_bit           _BIT_ACCESS(PIE9,7)
// PIR9<ADTIF>
extern volatile __bit                   ADTIF               __at(0x2397);	// @ (0x472 * 8 + 7)
#define                                 ADTIF_bit           _BIT_ACCESS(PIR9,7)
// IPR9<ADTIP>
extern volatile __bit                   ADTIP               __at(0x2437);	// @ (0x486 * 8 + 7)
#define                                 ADTIP_bit           _BIT_ACCESS(IPR9,7)
// ADCON3<ADTMD0>
extern volatile __bit                   ADTMD0              __at(0x1190);	// @ (0x232 * 8 + 0)
#define                                 ADTMD0_bit          _BIT_ACCESS(ADCON3,0)
// ADCON3<ADTMD1>
extern volatile __bit                   ADTMD1              __at(0x1191);	// @ (0x232 * 8 + 1)
#define                                 ADTMD1_bit          _BIT_ACCESS(ADCON3,1)
// ADCON3<ADTMD2>
extern volatile __bit                   ADTMD2              __at(0x1192);	// @ (0x232 * 8 + 2)
#define                                 ADTMD2_bit          _BIT_ACCESS(ADCON3,2)
// ADUTHL<ADUTH0>
extern volatile __bit                   ADUTH0              __at(0x10B8);	// @ (0x217 * 8 + 0)
#define                                 ADUTH0_bit          _BIT_ACCESS(ADUTHL,0)
// ADUTHL<ADUTH1>
extern volatile __bit                   ADUTH1              __at(0x10B9);	// @ (0x217 * 8 + 1)
#define                                 ADUTH1_bit          _BIT_ACCESS(ADUTHL,1)
// ADUTHH<ADUTH10>
extern volatile __bit                   ADUTH10             __at(0x10C2);	// @ (0x218 * 8 + 2)
#define                                 ADUTH10_bit         _BIT_ACCESS(ADUTHH,2)
// ADUTHH<ADUTH11>
extern volatile __bit                   ADUTH11             __at(0x10C3);	// @ (0x218 * 8 + 3)
#define                                 ADUTH11_bit         _BIT_ACCESS(ADUTHH,3)
// ADUTHH<ADUTH12>
extern volatile __bit                   ADUTH12             __at(0x10C4);	// @ (0x218 * 8 + 4)
#define                                 ADUTH12_bit         _BIT_ACCESS(ADUTHH,4)
// ADUTHH<ADUTH13>
extern volatile __bit                   ADUTH13             __at(0x10C5);	// @ (0x218 * 8 + 5)
#define                                 ADUTH13_bit         _BIT_ACCESS(ADUTHH,5)
// ADUTHH<ADUTH14>
extern volatile __bit                   ADUTH14             __at(0x10C6);	// @ (0x218 * 8 + 6)
#define                                 ADUTH14_bit         _BIT_ACCESS(ADUTHH,6)
// ADUTHH<ADUTH15>
extern volatile __bit                   ADUTH15             __at(0x10C7);	// @ (0x218 * 8 + 7)
#define                                 ADUTH15_bit         _BIT_ACCESS(ADUTHH,7)
// ADUTHL<ADUTH2>
extern volatile __bit                   ADUTH2              __at(0x10BA);	// @ (0x217 * 8 + 2)
#define                                 ADUTH2_bit          _BIT_ACCESS(ADUTHL,2)
// ADUTHL<ADUTH3>
extern volatile __bit                   ADUTH3              __at(0x10BB);	// @ (0x217 * 8 + 3)
#define                                 ADUTH3_bit          _BIT_ACCESS(ADUTHL,3)
// ADUTHL<ADUTH4>
extern volatile __bit                   ADUTH4              __at(0x10BC);	// @ (0x217 * 8 + 4)
#define                                 ADUTH4_bit          _BIT_ACCESS(ADUTHL,4)
// ADUTHL<ADUTH5>
extern volatile __bit                   ADUTH5              __at(0x10BD);	// @ (0x217 * 8 + 5)
#define                                 ADUTH5_bit          _BIT_ACCESS(ADUTHL,5)
// ADUTHL<ADUTH6>
extern volatile __bit                   ADUTH6              __at(0x10BE);	// @ (0x217 * 8 + 6)
#define                                 ADUTH6_bit          _BIT_ACCESS(ADUTHL,6)
// ADUTHL<ADUTH7>
extern volatile __bit                   ADUTH7              __at(0x10BF);	// @ (0x217 * 8 + 7)
#define                                 ADUTH7_bit          _BIT_ACCESS(ADUTHL,7)
// ADUTHH<ADUTH8>
extern volatile __bit                   ADUTH8              __at(0x10C0);	// @ (0x218 * 8 + 0)
#define                                 ADUTH8_bit          _BIT_ACCESS(ADUTHH,0)
// ADUTHH<ADUTH9>
extern volatile __bit                   ADUTH9              __at(0x10C1);	// @ (0x218 * 8 + 1)
#define                                 ADUTH9_bit          _BIT_ACCESS(ADUTHH,1)
// ADSTAT<ADUTHR>
extern volatile __bit                   ADUTHR              __at(0x119E);	// @ (0x233 * 8 + 6)
#define                                 ADUTHR_bit          _BIT_ACCESS(ADSTAT,6)
// DMAnAIRQ<AIRQ0>
extern volatile __bit                   AIRQ0               __at(0x2B0);	// @ (0x56 * 8 + 0)
#define                                 AIRQ0_bit           _BIT_ACCESS(DMAnAIRQ,0)
// DMAnAIRQ<AIRQ1>
extern volatile __bit                   AIRQ1               __at(0x2B1);	// @ (0x56 * 8 + 1)
#define                                 AIRQ1_bit           _BIT_ACCESS(DMAnAIRQ,1)
// DMAnAIRQ<AIRQ2>
extern volatile __bit                   AIRQ2               __at(0x2B2);	// @ (0x56 * 8 + 2)
#define                                 AIRQ2_bit           _BIT_ACCESS(DMAnAIRQ,2)
// DMAnAIRQ<AIRQ3>
extern volatile __bit                   AIRQ3               __at(0x2B3);	// @ (0x56 * 8 + 3)
#define                                 AIRQ3_bit           _BIT_ACCESS(DMAnAIRQ,3)
// DMAnAIRQ<AIRQ4>
extern volatile __bit                   AIRQ4               __at(0x2B4);	// @ (0x56 * 8 + 4)
#define                                 AIRQ4_bit           _BIT_ACCESS(DMAnAIRQ,4)
// DMAnAIRQ<AIRQ5>
extern volatile __bit                   AIRQ5               __at(0x2B5);	// @ (0x56 * 8 + 5)
#define                                 AIRQ5_bit           _BIT_ACCESS(DMAnAIRQ,5)
// DMAnAIRQ<AIRQ6>
extern volatile __bit                   AIRQ6               __at(0x2B6);	// @ (0x56 * 8 + 6)
#define                                 AIRQ6_bit           _BIT_ACCESS(DMAnAIRQ,6)
// DMAnAIRQ<AIRQ7>
extern volatile __bit                   AIRQ7               __at(0x2B7);	// @ (0x56 * 8 + 7)
#define                                 AIRQ7_bit           _BIT_ACCESS(DMAnAIRQ,7)
// DMAnCON0<AIRQEN>
extern volatile __bit                   AIRQEN              __at(0x2A2);	// @ (0x54 * 8 + 2)
#define                                 AIRQEN_bit          _BIT_ACCESS(DMAnCON0,2)
// ANSELA<ANSELA0>
extern volatile __bit                   ANSELA0             __at(0x20B0);	// @ (0x416 * 8 + 0)
#define                                 ANSELA0_bit         _BIT_ACCESS(ANSELA,0)
// ANSELA<ANSELA1>
extern volatile __bit                   ANSELA1             __at(0x20B1);	// @ (0x416 * 8 + 1)
#define                                 ANSELA1_bit         _BIT_ACCESS(ANSELA,1)
// ANSELA<ANSELA2>
extern volatile __bit                   ANSELA2             __at(0x20B2);	// @ (0x416 * 8 + 2)
#define                                 ANSELA2_bit         _BIT_ACCESS(ANSELA,2)
// ANSELA<ANSELA4>
extern volatile __bit                   ANSELA4             __at(0x20B4);	// @ (0x416 * 8 + 4)
#define                                 ANSELA4_bit         _BIT_ACCESS(ANSELA,4)
// ANSELA<ANSELA5>
extern volatile __bit                   ANSELA5             __at(0x20B5);	// @ (0x416 * 8 + 5)
#define                                 ANSELA5_bit         _BIT_ACCESS(ANSELA,5)
// ANSELC<ANSELC3>
extern volatile __bit                   ANSELC3             __at(0x2153);	// @ (0x42A * 8 + 3)
#define                                 ANSELC3_bit         _BIT_ACCESS(ANSELC,3)
// ANSELC<ANSELC4>
extern volatile __bit                   ANSELC4             __at(0x2154);	// @ (0x42A * 8 + 4)
#define                                 ANSELC4_bit         _BIT_ACCESS(ANSELC,4)
// ANSELC<ANSELC5>
extern volatile __bit                   ANSELC5             __at(0x2155);	// @ (0x42A * 8 + 5)
#define                                 ANSELC5_bit         _BIT_ACCESS(ANSELC,5)
// ANSELC<ANSELC6>
extern volatile __bit                   ANSELC6             __at(0x2156);	// @ (0x42A * 8 + 6)
#define                                 ANSELC6_bit         _BIT_ACCESS(ANSELC,6)
// ANSELC<ANSELC7>
extern volatile __bit                   ANSELC7             __at(0x2157);	// @ (0x42A * 8 + 7)
#define                                 ANSELC7_bit         _BIT_ACCESS(ANSELC,7)
// ADSTAT<AOV>
extern volatile __bit                   AOV                 __at(0x119F);	// @ (0x233 * 8 + 7)
#define                                 AOV_bit             _BIT_ACCESS(ADSTAT,7)
// CWG1AS1<AS0E>
extern volatile __bit                   AS0E                __at(0xD00);	// @ (0x1A0 * 8 + 0)
#define                                 AS0E_bit            _BIT_ACCESS(CWG1AS1,0)
// CWG1AS1<AS1E>
extern volatile __bit                   AS1E                __at(0xD01);	// @ (0x1A0 * 8 + 1)
#define                                 AS1E_bit            _BIT_ACCESS(CWG1AS1,1)
// CWG1AS1<AS2E>
extern volatile __bit                   AS2E                __at(0xD02);	// @ (0x1A0 * 8 + 2)
#define                                 AS2E_bit            _BIT_ACCESS(CWG1AS1,2)
// CWG1AS1<AS6E>
extern volatile __bit                   AS6E                __at(0xD06);	// @ (0x1A0 * 8 + 6)
#define                                 AS6E_bit            _BIT_ACCESS(CWG1AS1,6)
// CWG1AS1<AS7E>
extern volatile __bit                   AS7E                __at(0xD07);	// @ (0x1A0 * 8 + 7)
#define                                 AS7E_bit            _BIT_ACCESS(CWG1AS1,7)
// T0CON1<ASYNC>
extern volatile __bit                   ASYNC               __at(0x834);	// @ (0x106 * 8 + 4)
#define                                 ASYNC_bit           _BIT_ACCESS(T0CON1,4)
// SPI1BAUD<BAUD0>
extern volatile __bit                   BAUD0               __at(0xF00);	// @ (0x1E0 * 8 + 0)
#define                                 BAUD0_bit           _BIT_ACCESS(SPI1BAUD,0)
// SPI1BAUD<BAUD1>
extern volatile __bit                   BAUD1               __at(0xF01);	// @ (0x1E0 * 8 + 1)
#define                                 BAUD1_bit           _BIT_ACCESS(SPI1BAUD,1)
// SPI1BAUD<BAUD2>
extern volatile __bit                   BAUD2               __at(0xF02);	// @ (0x1E0 * 8 + 2)
#define                                 BAUD2_bit           _BIT_ACCESS(SPI1BAUD,2)
// SPI1BAUD<BAUD3>
extern volatile __bit                   BAUD3               __at(0xF03);	// @ (0x1E0 * 8 + 3)
#define                                 BAUD3_bit           _BIT_ACCESS(SPI1BAUD,3)
// SPI1BAUD<BAUD4>
extern volatile __bit                   BAUD4               __at(0xF04);	// @ (0x1E0 * 8 + 4)
#define                                 BAUD4_bit           _BIT_ACCESS(SPI1BAUD,4)
// SPI1BAUD<BAUD5>
extern volatile __bit                   BAUD5               __at(0xF05);	// @ (0x1E0 * 8 + 5)
#define                                 BAUD5_bit           _BIT_ACCESS(SPI1BAUD,5)
// SPI1BAUD<BAUD6>
extern volatile __bit                   BAUD6               __at(0xF06);	// @ (0x1E0 * 8 + 6)
#define                                 BAUD6_bit           _BIT_ACCESS(SPI1BAUD,6)
// SPI1BAUD<BAUD7>
extern volatile __bit                   BAUD7               __at(0xF07);	// @ (0x1E0 * 8 + 7)
#define                                 BAUD7_bit           _BIT_ACCESS(SPI1BAUD,7)
// I2C1ERR<BCL1IE>
extern volatile __bit                   BCL1IE              __at(0xF61);	// @ (0x1EC * 8 + 1)
#define                                 BCL1IE_bit          _BIT_ACCESS(I2C1ERR,1)
// I2C1ERR<BCL1IF>
extern volatile __bit                   BCL1IF              __at(0xF65);	// @ (0x1EC * 8 + 5)
#define                                 BCL1IF_bit          _BIT_ACCESS(I2C1ERR,5)
// I2C1ERR<BCLIE>
extern volatile __bit                   BCLIE               __at(0xF61);	// @ (0x1EC * 8 + 1)
#define                                 BCLIE_bit           _BIT_ACCESS(I2C1ERR,1)
// I2C1ERR<BCLIF>
extern volatile __bit                   BCLIF               __at(0xF65);	// @ (0x1EC * 8 + 5)
#define                                 BCLIF_bit           _BIT_ACCESS(I2C1ERR,5)
// I3C1BCR<BCR0>
extern volatile __bit                   BCR0                __at(0x540);	// @ (0xA8 * 8 + 0)
#define                                 BCR0_bit            _BIT_ACCESS(I3C1BCR,0)
// I3C1BCR<BCR1>
extern volatile __bit                   BCR1                __at(0x541);	// @ (0xA8 * 8 + 1)
#define                                 BCR1_bit            _BIT_ACCESS(I3C1BCR,1)
// I3C1BCR<BCR2>
extern volatile __bit                   BCR2                __at(0x542);	// @ (0xA8 * 8 + 2)
#define                                 BCR2_bit            _BIT_ACCESS(I3C1BCR,2)
// I3C1BCR<BCR3>
extern volatile __bit                   BCR3                __at(0x543);	// @ (0xA8 * 8 + 3)
#define                                 BCR3_bit            _BIT_ACCESS(I3C1BCR,3)
// I3C1BCR<BCR4>
extern volatile __bit                   BCR4                __at(0x544);	// @ (0xA8 * 8 + 4)
#define                                 BCR4_bit            _BIT_ACCESS(I3C1BCR,4)
// I3C1BCR<BCR5>
extern volatile __bit                   BCR5                __at(0x545);	// @ (0xA8 * 8 + 5)
#define                                 BCR5_bit            _BIT_ACCESS(I3C1BCR,5)
// I3C1BCR<BCR6>
extern volatile __bit                   BCR6                __at(0x546);	// @ (0xA8 * 8 + 6)
#define                                 BCR6_bit            _BIT_ACCESS(I3C1BCR,6)
// I3C1BCR<BCR7>
extern volatile __bit                   BCR7                __at(0x547);	// @ (0xA8 * 8 + 7)
#define                                 BCR7_bit            _BIT_ACCESS(I3C1BCR,7)
// I3C1CON1<BERRDET>
extern volatile __bit                   BERRDET             __at(0x423);	// @ (0x84 * 8 + 3)
#define                                 BERRDET_bit         _BIT_ACCESS(I3C1CON1,3)
// I2C1STAT0<BFRE>
extern volatile __bit                   BFRE                __at(0xF27);	// @ (0x1E4 * 8 + 7)
#define                                 BFRE_bit            _BIT_ACCESS(I2C1STAT0,7)
// I2C1CON3<BFREDR>
extern volatile __bit                   BFREDR              __at(0xF4C);	// @ (0x1E9 * 8 + 4)
#define                                 BFREDR_bit          _BIT_ACCESS(I2C1CON3,4)
// I3C1STAT0<BFREE>
extern volatile __bit                   BFREE               __at(0x43F);	// @ (0x87 * 8 + 7)
#define                                 BFREE_bit           _BIT_ACCESS(I3C1STAT0,7)
// I2C1CON2<BFRET0>
extern volatile __bit                   BFRET0              __at(0xF40);	// @ (0x1E8 * 8 + 0)
#define                                 BFRET0_bit          _BIT_ACCESS(I2C1CON2,0)
// I2C1CON2<BFRET1>
extern volatile __bit                   BFRET1              __at(0xF41);	// @ (0x1E8 * 8 + 1)
#define                                 BFRET1_bit          _BIT_ACCESS(I2C1CON2,1)
// SPI1CON0<BMODE>
extern volatile __bit                   BMODE               __at(0xED8);	// @ (0x1DB * 8 + 0)
#define                                 BMODE_bit           _BIT_ACCESS(SPI1CON0,0)
// PCON0<BOR>
extern volatile __bit                   BOR                 __at(0x2780);	// @ (0x4F0 * 8 + 0)
#define                                 BOR_bit             _BIT_ACCESS(PCON0,0)
// BORCON<BORRDY>
extern volatile __bit                   BORRDY              __at(0x398);	// @ (0x73 * 8 + 0)
#define                                 BORRDY_bit          _BIT_ACCESS(BORCON,0)
// I3C1PIE0<BTFIE>
extern volatile __bit                   BTFIE               __at(0x471);	// @ (0x8E * 8 + 1)
#define                                 BTFIE_bit           _BIT_ACCESS(I3C1PIE0,1)
// I3C1PIR0<BTFIF>
extern volatile __bit                   BTFIF               __at(0x451);	// @ (0x8A * 8 + 1)
#define                                 BTFIF_bit           _BIT_ACCESS(I3C1PIR0,1)
// I2C1ERR<BTO1IE>
extern volatile __bit                   BTO1IE              __at(0xF62);	// @ (0x1EC * 8 + 2)
#define                                 BTO1IE_bit          _BIT_ACCESS(I2C1ERR,2)
// I2C1ERR<BTO1IF>
extern volatile __bit                   BTO1IF              __at(0xF66);	// @ (0x1EC * 8 + 6)
#define                                 BTO1IF_bit          _BIT_ACCESS(I2C1ERR,6)
// I2C1BTOC<BTOC0>
extern volatile __bit                   BTOC0               __at(0xFD0);	// @ (0x1FA * 8 + 0)
#define                                 BTOC0_bit           _BIT_ACCESS(I2C1BTOC,0)
// I2C1BTOC<BTOC1>
extern volatile __bit                   BTOC1               __at(0xFD1);	// @ (0x1FA * 8 + 1)
#define                                 BTOC1_bit           _BIT_ACCESS(I2C1BTOC,1)
// I2C1BTOC<BTOC2>
extern volatile __bit                   BTOC2               __at(0xFD2);	// @ (0x1FA * 8 + 2)
#define                                 BTOC2_bit           _BIT_ACCESS(I2C1BTOC,2)
// I3C1CON0<BTOEN>
extern volatile __bit                   BTOEN               __at(0x41E);	// @ (0x83 * 8 + 6)
#define                                 BTOEN_bit           _BIT_ACCESS(I3C1CON0,6)
// DMAnBUF<BUF0>
extern volatile __bit                   BUF0                __at(0x208);	// @ (0x41 * 8 + 0)
#define                                 BUF0_bit            _BIT_ACCESS(DMAnBUF,0)
// DMAnBUF<BUF1>
extern volatile __bit                   BUF1                __at(0x209);	// @ (0x41 * 8 + 1)
#define                                 BUF1_bit            _BIT_ACCESS(DMAnBUF,1)
// DMAnBUF<BUF2>
extern volatile __bit                   BUF2                __at(0x20A);	// @ (0x41 * 8 + 2)
#define                                 BUF2_bit            _BIT_ACCESS(DMAnBUF,2)
// DMAnBUF<BUF3>
extern volatile __bit                   BUF3                __at(0x20B);	// @ (0x41 * 8 + 3)
#define                                 BUF3_bit            _BIT_ACCESS(DMAnBUF,3)
// DMAnBUF<BUF4>
extern volatile __bit                   BUF4                __at(0x20C);	// @ (0x41 * 8 + 4)
#define                                 BUF4_bit            _BIT_ACCESS(DMAnBUF,4)
// DMAnBUF<BUF5>
extern volatile __bit                   BUF5                __at(0x20D);	// @ (0x41 * 8 + 5)
#define                                 BUF5_bit            _BIT_ACCESS(DMAnBUF,5)
// DMAnBUF<BUF6>
extern volatile __bit                   BUF6                __at(0x20E);	// @ (0x41 * 8 + 6)
#define                                 BUF6_bit            _BIT_ACCESS(DMAnBUF,6)
// DMAnBUF<BUF7>
extern volatile __bit                   BUF7                __at(0x20F);	// @ (0x41 * 8 + 7)
#define                                 BUF7_bit            _BIT_ACCESS(DMAnBUF,7)
// SCANCON0<BURSTMD>
extern volatile __bit                   BURSTMD             __at(0x389);	// @ (0x71 * 8 + 1)
#define                                 BURSTMD_bit         _BIT_ACCESS(SCANCON0,1)
// I3C1ERRIE0<BUSEIE>
extern volatile __bit                   BUSEIE              __at(0x482);	// @ (0x90 * 8 + 2)
#define                                 BUSEIE_bit          _BIT_ACCESS(I3C1ERRIE0,2)
// I3C1ERRIR0<BUSEIF>
extern volatile __bit                   BUSEIF              __at(0x462);	// @ (0x8C * 8 + 2)
#define                                 BUSEIF_bit          _BIT_ACCESS(I3C1ERRIR0,2)
// U1CON2<C0EN>
extern volatile __bit                   C0EN                __at(0xDDB);	// @ (0x1BB * 8 + 3)
#define                                 C0EN_bit            _BIT_ACCESS(U1CON2,3)
// CCPTMRS0<C1TSEL0>
extern volatile __bit                   C1TSEL0             __at(0xA40);	// @ (0x148 * 8 + 0)
#define                                 C1TSEL0_bit         _BIT_ACCESS(CCPTMRS0,0)
// CCPTMRS0<C1TSEL1>
extern volatile __bit                   C1TSEL1             __at(0xA41);	// @ (0x148 * 8 + 1)
#define                                 C1TSEL1_bit         _BIT_ACCESS(CCPTMRS0,1)
// CCPTMRS0<C2TSEL2>
extern volatile __bit                   C2TSEL2             __at(0xA42);	// @ (0x148 * 8 + 2)
#define                                 C2TSEL2_bit         _BIT_ACCESS(CCPTMRS0,2)
// CCPTMRS0<C2TSEL3>
extern volatile __bit                   C2TSEL3             __at(0xA43);	// @ (0x148 * 8 + 3)
#define                                 C2TSEL3_bit         _BIT_ACCESS(CCPTMRS0,3)
// ADCON3<CALC0>
extern volatile __bit                   CALC0               __at(0x1194);	// @ (0x232 * 8 + 4)
#define                                 CALC0_bit           _BIT_ACCESS(ADCON3,4)
// ADCON3<CALC1>
extern volatile __bit                   CALC1               __at(0x1195);	// @ (0x232 * 8 + 5)
#define                                 CALC1_bit           _BIT_ACCESS(ADCON3,5)
// ADCON3<CALC2>
extern volatile __bit                   CALC2               __at(0x1196);	// @ (0x232 * 8 + 6)
#define                                 CALC2_bit           _BIT_ACCESS(ADCON3,6)
// CCP1CAP<CCP1CTS0>
extern volatile __bit                   CCP1CTS0            __at(0xA60);	// @ (0x14C * 8 + 0)
#define                                 CCP1CTS0_bit        _BIT_ACCESS(CCP1CAP,0)
// CCP1CAP<CCP1CTS1>
extern volatile __bit                   CCP1CTS1            __at(0xA61);	// @ (0x14C * 8 + 1)
#define                                 CCP1CTS1_bit        _BIT_ACCESS(CCP1CAP,1)
// CCP1CAP<CCP1CTS2>
extern volatile __bit                   CCP1CTS2            __at(0xA62);	// @ (0x14C * 8 + 2)
#define                                 CCP1CTS2_bit        _BIT_ACCESS(CCP1CAP,2)
// CCP1CON<CCP1EN>
extern volatile __bit                   CCP1EN              __at(0xA5F);	// @ (0x14B * 8 + 7)
#define                                 CCP1EN_bit          _BIT_ACCESS(CCP1CON,7)
// CCP1CON<CCP1FMT>
extern volatile __bit                   CCP1FMT             __at(0xA5C);	// @ (0x14B * 8 + 4)
#define                                 CCP1FMT_bit         _BIT_ACCESS(CCP1CON,4)
// PIE4<CCP1IE>
extern volatile __bit                   CCP1IE              __at(0x23BC);	// @ (0x477 * 8 + 4)
#define                                 CCP1IE_bit          _BIT_ACCESS(PIE4,4)
// PIR4<CCP1IF>
extern volatile __bit                   CCP1IF              __at(0x236C);	// @ (0x46D * 8 + 4)
#define                                 CCP1IF_bit          _BIT_ACCESS(PIR4,4)
// IPR4<CCP1IP>
extern volatile __bit                   CCP1IP              __at(0x240C);	// @ (0x481 * 8 + 4)
#define                                 CCP1IP_bit          _BIT_ACCESS(IPR4,4)
// PMD2<CCP1MD>
extern volatile __bit                   CCP1MD              __at(0x1812);	// @ (0x302 * 8 + 2)
#define                                 CCP1MD_bit          _BIT_ACCESS(PMD2,2)
// CCP1CON<CCP1MODE0>
extern volatile __bit                   CCP1MODE0           __at(0xA58);	// @ (0x14B * 8 + 0)
#define                                 CCP1MODE0_bit       _BIT_ACCESS(CCP1CON,0)
// CCP1CON<CCP1MODE1>
extern volatile __bit                   CCP1MODE1           __at(0xA59);	// @ (0x14B * 8 + 1)
#define                                 CCP1MODE1_bit       _BIT_ACCESS(CCP1CON,1)
// CCP1CON<CCP1MODE2>
extern volatile __bit                   CCP1MODE2           __at(0xA5A);	// @ (0x14B * 8 + 2)
#define                                 CCP1MODE2_bit       _BIT_ACCESS(CCP1CON,2)
// CCP1CON<CCP1MODE3>
extern volatile __bit                   CCP1MODE3           __at(0xA5B);	// @ (0x14B * 8 + 3)
#define                                 CCP1MODE3_bit       _BIT_ACCESS(CCP1CON,3)
// CCP1CON<CCP1OUT>
extern volatile __bit                   CCP1OUT             __at(0xA5D);	// @ (0x14B * 8 + 5)
#define                                 CCP1OUT_bit         _BIT_ACCESS(CCP1CON,5)
// CCP1PPS<CCP1PPS0>
extern volatile __bit                   CCP1PPS0            __at(0x1B48);	// @ (0x369 * 8 + 0)
#define                                 CCP1PPS0_bit        _BIT_ACCESS(CCP1PPS,0)
// CCP1PPS<CCP1PPS1>
extern volatile __bit                   CCP1PPS1            __at(0x1B49);	// @ (0x369 * 8 + 1)
#define                                 CCP1PPS1_bit        _BIT_ACCESS(CCP1PPS,1)
// CCP1PPS<CCP1PPS2>
extern volatile __bit                   CCP1PPS2            __at(0x1B4A);	// @ (0x369 * 8 + 2)
#define                                 CCP1PPS2_bit        _BIT_ACCESS(CCP1PPS,2)
// CCP1PPS<CCP1PPS3>
extern volatile __bit                   CCP1PPS3            __at(0x1B4B);	// @ (0x369 * 8 + 3)
#define                                 CCP1PPS3_bit        _BIT_ACCESS(CCP1PPS,3)
// CCP1PPS<CCP1PPS4>
extern volatile __bit                   CCP1PPS4            __at(0x1B4C);	// @ (0x369 * 8 + 4)
#define                                 CCP1PPS4_bit        _BIT_ACCESS(CCP1PPS,4)
// CCP2CAP<CCP2CTS0>
extern volatile __bit                   CCP2CTS0            __at(0xA80);	// @ (0x150 * 8 + 0)
#define                                 CCP2CTS0_bit        _BIT_ACCESS(CCP2CAP,0)
// CCP2CAP<CCP2CTS1>
extern volatile __bit                   CCP2CTS1            __at(0xA81);	// @ (0x150 * 8 + 1)
#define                                 CCP2CTS1_bit        _BIT_ACCESS(CCP2CAP,1)
// CCP2CAP<CCP2CTS2>
extern volatile __bit                   CCP2CTS2            __at(0xA82);	// @ (0x150 * 8 + 2)
#define                                 CCP2CTS2_bit        _BIT_ACCESS(CCP2CAP,2)
// CCP2CON<CCP2EN>
extern volatile __bit                   CCP2EN              __at(0xA7F);	// @ (0x14F * 8 + 7)
#define                                 CCP2EN_bit          _BIT_ACCESS(CCP2CON,7)
// CCP2CON<CCP2FMT>
extern volatile __bit                   CCP2FMT             __at(0xA7C);	// @ (0x14F * 8 + 4)
#define                                 CCP2FMT_bit         _BIT_ACCESS(CCP2CON,4)
// PIE4<CCP2IE>
extern volatile __bit                   CCP2IE              __at(0x23BD);	// @ (0x477 * 8 + 5)
#define                                 CCP2IE_bit          _BIT_ACCESS(PIE4,5)
// PIR4<CCP2IF>
extern volatile __bit                   CCP2IF              __at(0x236D);	// @ (0x46D * 8 + 5)
#define                                 CCP2IF_bit          _BIT_ACCESS(PIR4,5)
// IPR4<CCP2IP>
extern volatile __bit                   CCP2IP              __at(0x240D);	// @ (0x481 * 8 + 5)
#define                                 CCP2IP_bit          _BIT_ACCESS(IPR4,5)
// PMD2<CCP2MD>
extern volatile __bit                   CCP2MD              __at(0x1813);	// @ (0x302 * 8 + 3)
#define                                 CCP2MD_bit          _BIT_ACCESS(PMD2,3)
// CCP2CON<CCP2MODE0>
extern volatile __bit                   CCP2MODE0           __at(0xA78);	// @ (0x14F * 8 + 0)
#define                                 CCP2MODE0_bit       _BIT_ACCESS(CCP2CON,0)
// CCP2CON<CCP2MODE1>
extern volatile __bit                   CCP2MODE1           __at(0xA79);	// @ (0x14F * 8 + 1)
#define                                 CCP2MODE1_bit       _BIT_ACCESS(CCP2CON,1)
// CCP2CON<CCP2MODE2>
extern volatile __bit                   CCP2MODE2           __at(0xA7A);	// @ (0x14F * 8 + 2)
#define                                 CCP2MODE2_bit       _BIT_ACCESS(CCP2CON,2)
// CCP2CON<CCP2MODE3>
extern volatile __bit                   CCP2MODE3           __at(0xA7B);	// @ (0x14F * 8 + 3)
#define                                 CCP2MODE3_bit       _BIT_ACCESS(CCP2CON,3)
// CCP2CON<CCP2OUT>
extern volatile __bit                   CCP2OUT             __at(0xA7D);	// @ (0x14F * 8 + 5)
#define                                 CCP2OUT_bit         _BIT_ACCESS(CCP2CON,5)
// CCP2PPS<CCP2PPS0>
extern volatile __bit                   CCP2PPS0            __at(0x1B50);	// @ (0x36A * 8 + 0)
#define                                 CCP2PPS0_bit        _BIT_ACCESS(CCP2PPS,0)
// CCP2PPS<CCP2PPS1>
extern volatile __bit                   CCP2PPS1            __at(0x1B51);	// @ (0x36A * 8 + 1)
#define                                 CCP2PPS1_bit        _BIT_ACCESS(CCP2PPS,1)
// CCP2PPS<CCP2PPS2>
extern volatile __bit                   CCP2PPS2            __at(0x1B52);	// @ (0x36A * 8 + 2)
#define                                 CCP2PPS2_bit        _BIT_ACCESS(CCP2PPS,2)
// CCP2PPS<CCP2PPS3>
extern volatile __bit                   CCP2PPS3            __at(0x1B53);	// @ (0x36A * 8 + 3)
#define                                 CCP2PPS3_bit        _BIT_ACCESS(CCP2PPS,3)
// CCP2PPS<CCP2PPS4>
extern volatile __bit                   CCP2PPS4            __at(0x1B54);	// @ (0x36A * 8 + 4)
#define                                 CCP2PPS4_bit        _BIT_ACCESS(CCP2PPS,4)
// OSCCON2<CDIV0>
extern volatile __bit                   CDIV0               __at(0x3D8);	// @ (0x7B * 8 + 0)
#define                                 CDIV0_bit           _BIT_ACCESS(OSCCON2,0)
// OSCCON2<CDIV1>
extern volatile __bit                   CDIV1               __at(0x3D9);	// @ (0x7B * 8 + 1)
#define                                 CDIV1_bit           _BIT_ACCESS(OSCCON2,1)
// OSCCON2<CDIV2>
extern volatile __bit                   CDIV2               __at(0x3DA);	// @ (0x7B * 8 + 2)
#define                                 CDIV2_bit           _BIT_ACCESS(OSCCON2,2)
// OSCCON2<CDIV3>
extern volatile __bit                   CDIV3               __at(0x3DB);	// @ (0x7B * 8 + 3)
#define                                 CDIV3_bit           _BIT_ACCESS(OSCCON2,3)
// U1ERRIE<CERIE>
extern volatile __bit                   CERIE               __at(0xE14);	// @ (0x1C2 * 8 + 4)
#define                                 CERIE_bit           _BIT_ACCESS(U1ERRIE,4)
// U1ERRIR<CERIF>
extern volatile __bit                   CERIF               __at(0xE0C);	// @ (0x1C1 * 8 + 4)
#define                                 CERIF_bit           _BIT_ACCESS(U1ERRIR,4)
// ADCG1A<CGA0>
extern volatile __bit                   CGA0                __at(0x11B8);	// @ (0x237 * 8 + 0)
#define                                 CGA0_bit            _BIT_ACCESS(ADCG1A,0)
// ADCG1A<CGA1>
extern volatile __bit                   CGA1                __at(0x11B9);	// @ (0x237 * 8 + 1)
#define                                 CGA1_bit            _BIT_ACCESS(ADCG1A,1)
// ADCG1A<CGA2>
extern volatile __bit                   CGA2                __at(0x11BA);	// @ (0x237 * 8 + 2)
#define                                 CGA2_bit            _BIT_ACCESS(ADCG1A,2)
// ADCG1A<CGA4>
extern volatile __bit                   CGA4                __at(0x11BC);	// @ (0x237 * 8 + 4)
#define                                 CGA4_bit            _BIT_ACCESS(ADCG1A,4)
// ADCG1A<CGA5>
extern volatile __bit                   CGA5                __at(0x11BD);	// @ (0x237 * 8 + 5)
#define                                 CGA5_bit            _BIT_ACCESS(ADCG1A,5)
// ADCG1C<CGC0>
extern volatile __bit                   CGC0                __at(0x11C8);	// @ (0x239 * 8 + 0)
#define                                 CGC0_bit            _BIT_ACCESS(ADCG1C,0)
// ADCG1C<CGC1>
extern volatile __bit                   CGC1                __at(0x11C9);	// @ (0x239 * 8 + 1)
#define                                 CGC1_bit            _BIT_ACCESS(ADCG1C,1)
// ADCG1C<CGC3>
extern volatile __bit                   CGC3                __at(0x11CB);	// @ (0x239 * 8 + 3)
#define                                 CGC3_bit            _BIT_ACCESS(ADCG1C,3)
// ADCG1C<CGC4>
extern volatile __bit                   CGC4                __at(0x11CC);	// @ (0x239 * 8 + 4)
#define                                 CGC4_bit            _BIT_ACCESS(ADCG1C,4)
// ADCG1C<CGC5>
extern volatile __bit                   CGC5                __at(0x11CD);	// @ (0x239 * 8 + 5)
#define                                 CGC5_bit            _BIT_ACCESS(ADCG1C,5)
// ADCG1C<CGC6>
extern volatile __bit                   CGC6                __at(0x11CE);	// @ (0x239 * 8 + 6)
#define                                 CGC6_bit            _BIT_ACCESS(ADCG1C,6)
// ADCG1C<CGC7>
extern volatile __bit                   CGC7                __at(0x11CF);	// @ (0x239 * 8 + 7)
#define                                 CGC7_bit            _BIT_ACCESS(ADCG1C,7)
// TUCHAIN<CH16AB>
extern volatile __bit                   CH16AB              __at(0x958);	// @ (0x12B * 8 + 0)
#define                                 CH16AB_bit          _BIT_ACCESS(TUCHAIN,0)
// SPI1CON1<CKE>
extern volatile __bit                   CKE                 __at(0xEE6);	// @ (0x1DC * 8 + 6)
#define                                 CKE_bit             _BIT_ACCESS(SPI1CON1,6)
// SPI1CON1<CKP>
extern volatile __bit                   CKP                 __at(0xEE5);	// @ (0x1DC * 8 + 5)
#define                                 CKP_bit             _BIT_ACCESS(SPI1CON1,5)
// T0CON1<CKPS3>
extern volatile __bit                   CKPS3               __at(0x833);	// @ (0x106 * 8 + 3)
#define                                 CKPS3_bit           _BIT_ACCESS(T0CON1,3)
// PIE5<CLC1IE>
extern volatile __bit                   CLC1IE              __at(0x23C3);	// @ (0x478 * 8 + 3)
#define                                 CLC1IE_bit          _BIT_ACCESS(PIE5,3)
// PIR5<CLC1IF>
extern volatile __bit                   CLC1IF              __at(0x2373);	// @ (0x46E * 8 + 3)
#define                                 CLC1IF_bit          _BIT_ACCESS(PIR5,3)
// IPR5<CLC1IP>
extern volatile __bit                   CLC1IP              __at(0x2413);	// @ (0x482 * 8 + 3)
#define                                 CLC1IP_bit          _BIT_ACCESS(IPR5,3)
// PMD2<CLC1MD>
extern volatile __bit                   CLC1MD              __at(0x1817);	// @ (0x302 * 8 + 7)
#define                                 CLC1MD_bit          _BIT_ACCESS(PMD2,7)
// CLCDATA<CLC1OUT>
extern volatile __bit                   CLC1OUT             __at(0xD18);	// @ (0x1A3 * 8 + 0)
#define                                 CLC1OUT_bit         _BIT_ACCESS(CLCDATA,0)
// PIE5<CLC2IE>
extern volatile __bit                   CLC2IE              __at(0x23C4);	// @ (0x478 * 8 + 4)
#define                                 CLC2IE_bit          _BIT_ACCESS(PIE5,4)
// PIR5<CLC2IF>
extern volatile __bit                   CLC2IF              __at(0x2374);	// @ (0x46E * 8 + 4)
#define                                 CLC2IF_bit          _BIT_ACCESS(PIR5,4)
// IPR5<CLC2IP>
extern volatile __bit                   CLC2IP              __at(0x2414);	// @ (0x482 * 8 + 4)
#define                                 CLC2IP_bit          _BIT_ACCESS(IPR5,4)
// PMD3<CLC2MD>
extern volatile __bit                   CLC2MD              __at(0x1818);	// @ (0x303 * 8 + 0)
#define                                 CLC2MD_bit          _BIT_ACCESS(PMD3,0)
// CLCDATA<CLC2OUT>
extern volatile __bit                   CLC2OUT             __at(0xD19);	// @ (0x1A3 * 8 + 1)
#define                                 CLC2OUT_bit         _BIT_ACCESS(CLCDATA,1)
// PIE5<CLC3IE>
extern volatile __bit                   CLC3IE              __at(0x23C5);	// @ (0x478 * 8 + 5)
#define                                 CLC3IE_bit          _BIT_ACCESS(PIE5,5)
// PIR5<CLC3IF>
extern volatile __bit                   CLC3IF              __at(0x2375);	// @ (0x46E * 8 + 5)
#define                                 CLC3IF_bit          _BIT_ACCESS(PIR5,5)
// IPR5<CLC3IP>
extern volatile __bit                   CLC3IP              __at(0x2415);	// @ (0x482 * 8 + 5)
#define                                 CLC3IP_bit          _BIT_ACCESS(IPR5,5)
// PMD3<CLC3MD>
extern volatile __bit                   CLC3MD              __at(0x1819);	// @ (0x303 * 8 + 1)
#define                                 CLC3MD_bit          _BIT_ACCESS(PMD3,1)
// CLCDATA<CLC3OUT>
extern volatile __bit                   CLC3OUT             __at(0xD1A);	// @ (0x1A3 * 8 + 2)
#define                                 CLC3OUT_bit         _BIT_ACCESS(CLCDATA,2)
// PIE5<CLC4IE>
extern volatile __bit                   CLC4IE              __at(0x23C6);	// @ (0x478 * 8 + 6)
#define                                 CLC4IE_bit          _BIT_ACCESS(PIE5,6)
// PIR5<CLC4IF>
extern volatile __bit                   CLC4IF              __at(0x2376);	// @ (0x46E * 8 + 6)
#define                                 CLC4IF_bit          _BIT_ACCESS(PIR5,6)
// IPR5<CLC4IP>
extern volatile __bit                   CLC4IP              __at(0x2416);	// @ (0x482 * 8 + 6)
#define                                 CLC4IP_bit          _BIT_ACCESS(IPR5,6)
// PMD3<CLC4MD>
extern volatile __bit                   CLC4MD              __at(0x181A);	// @ (0x303 * 8 + 2)
#define                                 CLC4MD_bit          _BIT_ACCESS(PMD3,2)
// CLCDATA<CLC4OUT>
extern volatile __bit                   CLC4OUT             __at(0xD1B);	// @ (0x1A3 * 8 + 3)
#define                                 CLC4OUT_bit         _BIT_ACCESS(CLCDATA,3)
// CLCIN0PPS<CLCIN0PPS0>
extern volatile __bit                   CLCIN0PPS0          __at(0x1CE8);	// @ (0x39D * 8 + 0)
#define                                 CLCIN0PPS0_bit      _BIT_ACCESS(CLCIN0PPS,0)
// CLCIN0PPS<CLCIN0PPS1>
extern volatile __bit                   CLCIN0PPS1          __at(0x1CE9);	// @ (0x39D * 8 + 1)
#define                                 CLCIN0PPS1_bit      _BIT_ACCESS(CLCIN0PPS,1)
// CLCIN0PPS<CLCIN0PPS2>
extern volatile __bit                   CLCIN0PPS2          __at(0x1CEA);	// @ (0x39D * 8 + 2)
#define                                 CLCIN0PPS2_bit      _BIT_ACCESS(CLCIN0PPS,2)
// CLCIN0PPS<CLCIN0PPS3>
extern volatile __bit                   CLCIN0PPS3          __at(0x1CEB);	// @ (0x39D * 8 + 3)
#define                                 CLCIN0PPS3_bit      _BIT_ACCESS(CLCIN0PPS,3)
// CLCIN0PPS<CLCIN0PPS4>
extern volatile __bit                   CLCIN0PPS4          __at(0x1CEC);	// @ (0x39D * 8 + 4)
#define                                 CLCIN0PPS4_bit      _BIT_ACCESS(CLCIN0PPS,4)
// CLCIN1PPS<CLCIN1PPS0>
extern volatile __bit                   CLCIN1PPS0          __at(0x1CF0);	// @ (0x39E * 8 + 0)
#define                                 CLCIN1PPS0_bit      _BIT_ACCESS(CLCIN1PPS,0)
// CLCIN1PPS<CLCIN1PPS1>
extern volatile __bit                   CLCIN1PPS1          __at(0x1CF1);	// @ (0x39E * 8 + 1)
#define                                 CLCIN1PPS1_bit      _BIT_ACCESS(CLCIN1PPS,1)
// CLCIN1PPS<CLCIN1PPS2>
extern volatile __bit                   CLCIN1PPS2          __at(0x1CF2);	// @ (0x39E * 8 + 2)
#define                                 CLCIN1PPS2_bit      _BIT_ACCESS(CLCIN1PPS,2)
// CLCIN1PPS<CLCIN1PPS3>
extern volatile __bit                   CLCIN1PPS3          __at(0x1CF3);	// @ (0x39E * 8 + 3)
#define                                 CLCIN1PPS3_bit      _BIT_ACCESS(CLCIN1PPS,3)
// CLCIN1PPS<CLCIN1PPS4>
extern volatile __bit                   CLCIN1PPS4          __at(0x1CF4);	// @ (0x39E * 8 + 4)
#define                                 CLCIN1PPS4_bit      _BIT_ACCESS(CLCIN1PPS,4)
// CLCIN2PPS<CLCIN2PPS0>
extern volatile __bit                   CLCIN2PPS0          __at(0x1CF8);	// @ (0x39F * 8 + 0)
#define                                 CLCIN2PPS0_bit      _BIT_ACCESS(CLCIN2PPS,0)
// CLCIN2PPS<CLCIN2PPS1>
extern volatile __bit                   CLCIN2PPS1          __at(0x1CF9);	// @ (0x39F * 8 + 1)
#define                                 CLCIN2PPS1_bit      _BIT_ACCESS(CLCIN2PPS,1)
// CLCIN2PPS<CLCIN2PPS2>
extern volatile __bit                   CLCIN2PPS2          __at(0x1CFA);	// @ (0x39F * 8 + 2)
#define                                 CLCIN2PPS2_bit      _BIT_ACCESS(CLCIN2PPS,2)
// CLCIN2PPS<CLCIN2PPS3>
extern volatile __bit                   CLCIN2PPS3          __at(0x1CFB);	// @ (0x39F * 8 + 3)
#define                                 CLCIN2PPS3_bit      _BIT_ACCESS(CLCIN2PPS,3)
// CLCIN2PPS<CLCIN2PPS4>
extern volatile __bit                   CLCIN2PPS4          __at(0x1CFC);	// @ (0x39F * 8 + 4)
#define                                 CLCIN2PPS4_bit      _BIT_ACCESS(CLCIN2PPS,4)
// CLCIN3PPS<CLCIN3PPS0>
extern volatile __bit                   CLCIN3PPS0          __at(0x1D00);	// @ (0x3A0 * 8 + 0)
#define                                 CLCIN3PPS0_bit      _BIT_ACCESS(CLCIN3PPS,0)
// CLCIN3PPS<CLCIN3PPS1>
extern volatile __bit                   CLCIN3PPS1          __at(0x1D01);	// @ (0x3A0 * 8 + 1)
#define                                 CLCIN3PPS1_bit      _BIT_ACCESS(CLCIN3PPS,1)
// CLCIN3PPS<CLCIN3PPS2>
extern volatile __bit                   CLCIN3PPS2          __at(0x1D02);	// @ (0x3A0 * 8 + 2)
#define                                 CLCIN3PPS2_bit      _BIT_ACCESS(CLCIN3PPS,2)
// CLCIN3PPS<CLCIN3PPS3>
extern volatile __bit                   CLCIN3PPS3          __at(0x1D03);	// @ (0x3A0 * 8 + 3)
#define                                 CLCIN3PPS3_bit      _BIT_ACCESS(CLCIN3PPS,3)
// CLCIN3PPS<CLCIN3PPS4>
extern volatile __bit                   CLCIN3PPS4          __at(0x1D04);	// @ (0x3A0 * 8 + 4)
#define                                 CLCIN3PPS4_bit      _BIT_ACCESS(CLCIN3PPS,4)
// PORTWCON<CLKEN>
extern volatile __bit                   CLKEN               __at(0x2528);	// @ (0x4A5 * 8 + 0)
#define                                 CLKEN_bit           _BIT_ACCESS(PORTWCON,0)
// CLKRCLK<CLKRCLK0>
extern volatile __bit                   CLKRCLK0            __at(0x808);	// @ (0x101 * 8 + 0)
#define                                 CLKRCLK0_bit        _BIT_ACCESS(CLKRCLK,0)
// CLKRCLK<CLKRCLK1>
extern volatile __bit                   CLKRCLK1            __at(0x809);	// @ (0x101 * 8 + 1)
#define                                 CLKRCLK1_bit        _BIT_ACCESS(CLKRCLK,1)
// CLKRCLK<CLKRCLK2>
extern volatile __bit                   CLKRCLK2            __at(0x80A);	// @ (0x101 * 8 + 2)
#define                                 CLKRCLK2_bit        _BIT_ACCESS(CLKRCLK,2)
// CLKRCLK<CLKRCLK3>
extern volatile __bit                   CLKRCLK3            __at(0x80B);	// @ (0x101 * 8 + 3)
#define                                 CLKRCLK3_bit        _BIT_ACCESS(CLKRCLK,3)
// CLKRCON<CLKRDC0>
extern volatile __bit                   CLKRDC0             __at(0x803);	// @ (0x100 * 8 + 3)
#define                                 CLKRDC0_bit         _BIT_ACCESS(CLKRCON,3)
// CLKRCON<CLKRDC1>
extern volatile __bit                   CLKRDC1             __at(0x804);	// @ (0x100 * 8 + 4)
#define                                 CLKRDC1_bit         _BIT_ACCESS(CLKRCON,4)
// CLKRCON<CLKRDIV0>
extern volatile __bit                   CLKRDIV0            __at(0x800);	// @ (0x100 * 8 + 0)
#define                                 CLKRDIV0_bit        _BIT_ACCESS(CLKRCON,0)
// CLKRCON<CLKRDIV1>
extern volatile __bit                   CLKRDIV1            __at(0x801);	// @ (0x100 * 8 + 1)
#define                                 CLKRDIV1_bit        _BIT_ACCESS(CLKRCON,1)
// CLKRCON<CLKRDIV2>
extern volatile __bit                   CLKRDIV2            __at(0x802);	// @ (0x100 * 8 + 2)
#define                                 CLKRDIV2_bit        _BIT_ACCESS(CLKRCON,2)
// CLKRCON<CLKREN>
extern volatile __bit                   CLKREN              __at(0x807);	// @ (0x100 * 8 + 7)
#define                                 CLKREN_bit          _BIT_ACCESS(CLKRCON,7)
// PMD1<CLKRMD>
extern volatile __bit                   CLKRMD              __at(0x180B);	// @ (0x301 * 8 + 3)
#define                                 CLKRMD_bit          _BIT_ACCESS(PMD1,3)
// SPI1CLK<CLKSEL0>
extern volatile __bit                   CLKSEL0             __at(0xF18);	// @ (0x1E3 * 8 + 0)
#define                                 CLKSEL0_bit         _BIT_ACCESS(SPI1CLK,0)
// SPI1CLK<CLKSEL1>
extern volatile __bit                   CLKSEL1             __at(0xF19);	// @ (0x1E3 * 8 + 1)
#define                                 CLKSEL1_bit         _BIT_ACCESS(SPI1CLK,1)
// SPI1CLK<CLKSEL2>
extern volatile __bit                   CLKSEL2             __at(0xF1A);	// @ (0x1E3 * 8 + 2)
#define                                 CLKSEL2_bit         _BIT_ACCESS(SPI1CLK,2)
// SPI1CLK<CLKSEL3>
extern volatile __bit                   CLKSEL3             __at(0xF1B);	// @ (0x1E3 * 8 + 3)
#define                                 CLKSEL3_bit         _BIT_ACCESS(SPI1CLK,3)
// I3C1CON0<CLRRXB>
extern volatile __bit                   CLRRXB              __at(0x41B);	// @ (0x83 * 8 + 3)
#define                                 CLRRXB_bit          _BIT_ACCESS(I3C1CON0,3)
// I3C1CON0<CLRTXB>
extern volatile __bit                   CLRTXB              __at(0x41C);	// @ (0x83 * 8 + 4)
#define                                 CLRTXB_bit          _BIT_ACCESS(I3C1CON0,4)
// I2C1CNTH<CNT10>
extern volatile __bit                   CNT10               __at(0xF72);	// @ (0x1EE * 8 + 2)
#define                                 CNT10_bit           _BIT_ACCESS(I2C1CNTH,2)
// I2C1CNTH<CNT11>
extern volatile __bit                   CNT11               __at(0xF73);	// @ (0x1EE * 8 + 3)
#define                                 CNT11_bit           _BIT_ACCESS(I2C1CNTH,3)
// I2C1CNTH<CNT12>
extern volatile __bit                   CNT12               __at(0xF74);	// @ (0x1EE * 8 + 4)
#define                                 CNT12_bit           _BIT_ACCESS(I2C1CNTH,4)
// I2C1CNTH<CNT13>
extern volatile __bit                   CNT13               __at(0xF75);	// @ (0x1EE * 8 + 5)
#define                                 CNT13_bit           _BIT_ACCESS(I2C1CNTH,5)
// I2C1CNTH<CNT14>
extern volatile __bit                   CNT14               __at(0xF76);	// @ (0x1EE * 8 + 6)
#define                                 CNT14_bit           _BIT_ACCESS(I2C1CNTH,6)
// I2C1CNTH<CNT15>
extern volatile __bit                   CNT15               __at(0xF77);	// @ (0x1EE * 8 + 7)
#define                                 CNT15_bit           _BIT_ACCESS(I2C1CNTH,7)
// I2C1PIE<CNT1IE>
extern volatile __bit                   CNT1IE              __at(0xF5F);	// @ (0x1EB * 8 + 7)
#define                                 CNT1IE_bit          _BIT_ACCESS(I2C1PIE,7)
// I2C1PIR<CNT1IF>
extern volatile __bit                   CNT1IF              __at(0xF57);	// @ (0x1EA * 8 + 7)
#define                                 CNT1IF_bit          _BIT_ACCESS(I2C1PIR,7)
// I2C1CNTH<CNT8>
extern volatile __bit                   CNT8                __at(0xF70);	// @ (0x1EE * 8 + 0)
#define                                 CNT8_bit            _BIT_ACCESS(I2C1CNTH,0)
// I2C1CNTH<CNT9>
extern volatile __bit                   CNT9                __at(0xF71);	// @ (0x1EE * 8 + 1)
#define                                 CNT9_bit            _BIT_ACCESS(I2C1CNTH,1)
// I2C1PIE<CNTIE>
extern volatile __bit                   CNTIE               __at(0xF5F);	// @ (0x1EB * 8 + 7)
#define                                 CNTIE_bit           _BIT_ACCESS(I2C1PIE,7)
// I2C1PIR<CNTIF>
extern volatile __bit                   CNTIF               __at(0xF57);	// @ (0x1EA * 8 + 7)
#define                                 CNTIF_bit           _BIT_ACCESS(I2C1PIR,7)
// ADCON0<CONT>
extern volatile __bit                   CONT                __at(0x117E);	// @ (0x22F * 8 + 6)
#define                                 CONT_bit            _BIT_ACCESS(ADCON0,6)
// OSCCON2<COSC0>
extern volatile __bit                   COSC0               __at(0x3DC);	// @ (0x7B * 8 + 4)
#define                                 COSC0_bit           _BIT_ACCESS(OSCCON2,4)
// OSCCON2<COSC1>
extern volatile __bit                   COSC1               __at(0x3DD);	// @ (0x7B * 8 + 5)
#define                                 COSC1_bit           _BIT_ACCESS(OSCCON2,5)
// OSCCON2<COSC2>
extern volatile __bit                   COSC2               __at(0x3DE);	// @ (0x7B * 8 + 6)
#define                                 COSC2_bit           _BIT_ACCESS(OSCCON2,6)
// CRCCON0<CRCBUSY>
extern volatile __bit                   CRCBUSY             __at(0x345);	// @ (0x68 * 8 + 5)
#define                                 CRCBUSY_bit         _BIT_ACCESS(CRCCON0,5)
// CRCCON0<CRCEN>
extern volatile __bit                   CRCEN               __at(0x347);	// @ (0x68 * 8 + 7)
#define                                 CRCEN_bit           _BIT_ACCESS(CRCCON0,7)
// CRCCON0<CRCGO>
extern volatile __bit                   CRCGO               __at(0x346);	// @ (0x68 * 8 + 6)
#define                                 CRCGO_bit           _BIT_ACCESS(CRCCON0,6)
// PIE2<CRCIE>
extern volatile __bit                   CRCIE               __at(0x23AD);	// @ (0x475 * 8 + 5)
#define                                 CRCIE_bit           _BIT_ACCESS(PIE2,5)
// PIR2<CRCIF>
extern volatile __bit                   CRCIF               __at(0x235D);	// @ (0x46B * 8 + 5)
#define                                 CRCIF_bit           _BIT_ACCESS(PIR2,5)
// IPR2<CRCIP>
extern volatile __bit                   CRCIP               __at(0x23FD);	// @ (0x47F * 8 + 5)
#define                                 CRCIP_bit           _BIT_ACCESS(IPR2,5)
// PMD0<CRCMD>
extern volatile __bit                   CRCMD               __at(0x1805);	// @ (0x300 * 8 + 5)
#define                                 CRCMD_bit           _BIT_ACCESS(PMD0,5)
// I3C1EC<CREN>
extern volatile __bit                   CREN                __at(0x4E1);	// @ (0x9C * 8 + 1)
#define                                 CREN_bit            _BIT_ACCESS(I3C1EC,1)
// ADCON2<CRS0>
extern volatile __bit                   CRS0                __at(0x118C);	// @ (0x231 * 8 + 4)
#define                                 CRS0_bit            _BIT_ACCESS(ADCON2,4)
// ADCON2<CRS1>
extern volatile __bit                   CRS1                __at(0x118D);	// @ (0x231 * 8 + 5)
#define                                 CRS1_bit            _BIT_ACCESS(ADCON2,5)
// ADCON2<CRS2>
extern volatile __bit                   CRS2                __at(0x118E);	// @ (0x231 * 8 + 6)
#define                                 CRS2_bit            _BIT_ACCESS(ADCON2,6)
// ADCLK<CS4>
extern volatile __bit                   CS4                 __at(0x11B4);	// @ (0x236 * 8 + 4)
#define                                 CS4_bit             _BIT_ACCESS(ADCLK,4)
// ADCLK<CS5>
extern volatile __bit                   CS5                 __at(0x11B5);	// @ (0x236 * 8 + 5)
#define                                 CS5_bit             _BIT_ACCESS(ADCLK,5)
// I2C1CON1<CSD>
extern volatile __bit                   CSD                 __at(0xF38);	// @ (0x1E7 * 8 + 0)
#define                                 CSD_bit             _BIT_ACCESS(I2C1CON1,0)
// I2C1CON0<CSTR>
extern volatile __bit                   CSTR                __at(0xF34);	// @ (0x1E6 * 8 + 4)
#define                                 CSTR_bit            _BIT_ACCESS(I2C1CON0,4)
// OSCCON3<CSWHOLD>
extern volatile __bit                   CSWHOLD             __at(0x3E7);	// @ (0x7C * 8 + 7)
#define                                 CSWHOLD_bit         _BIT_ACCESS(OSCCON3,7)
// PIE3<CSWIE>
extern volatile __bit                   CSWIE               __at(0x23B0);	// @ (0x476 * 8 + 0)
#define                                 CSWIE_bit           _BIT_ACCESS(PIE3,0)
// PIR3<CSWIF>
extern volatile __bit                   CSWIF               __at(0x2360);	// @ (0x46C * 8 + 0)
#define                                 CSWIF_bit           _BIT_ACCESS(PIR3,0)
// IPR3<CSWIP>
extern volatile __bit                   CSWIP               __at(0x2400);	// @ (0x480 * 8 + 0)
#define                                 CSWIP_bit           _BIT_ACCESS(IPR3,0)
// CWG1CLK<CWG1CS>
extern volatile __bit                   CWG1CS              __at(0xCC8);	// @ (0x199 * 8 + 0)
#define                                 CWG1CS_bit          _BIT_ACCESS(CWG1CLK,0)
// CWG1DBF<CWG1DBF0>
extern volatile __bit                   CWG1DBF0            __at(0xCE0);	// @ (0x19C * 8 + 0)
#define                                 CWG1DBF0_bit        _BIT_ACCESS(CWG1DBF,0)
// CWG1DBF<CWG1DBF1>
extern volatile __bit                   CWG1DBF1            __at(0xCE1);	// @ (0x19C * 8 + 1)
#define                                 CWG1DBF1_bit        _BIT_ACCESS(CWG1DBF,1)
// CWG1DBF<CWG1DBF2>
extern volatile __bit                   CWG1DBF2            __at(0xCE2);	// @ (0x19C * 8 + 2)
#define                                 CWG1DBF2_bit        _BIT_ACCESS(CWG1DBF,2)
// CWG1DBF<CWG1DBF3>
extern volatile __bit                   CWG1DBF3            __at(0xCE3);	// @ (0x19C * 8 + 3)
#define                                 CWG1DBF3_bit        _BIT_ACCESS(CWG1DBF,3)
// CWG1DBF<CWG1DBF4>
extern volatile __bit                   CWG1DBF4            __at(0xCE4);	// @ (0x19C * 8 + 4)
#define                                 CWG1DBF4_bit        _BIT_ACCESS(CWG1DBF,4)
// CWG1DBF<CWG1DBF5>
extern volatile __bit                   CWG1DBF5            __at(0xCE5);	// @ (0x19C * 8 + 5)
#define                                 CWG1DBF5_bit        _BIT_ACCESS(CWG1DBF,5)
// CWG1DBR<CWG1DBR0>
extern volatile __bit                   CWG1DBR0            __at(0xCD8);	// @ (0x19B * 8 + 0)
#define                                 CWG1DBR0_bit        _BIT_ACCESS(CWG1DBR,0)
// CWG1DBR<CWG1DBR1>
extern volatile __bit                   CWG1DBR1            __at(0xCD9);	// @ (0x19B * 8 + 1)
#define                                 CWG1DBR1_bit        _BIT_ACCESS(CWG1DBR,1)
// CWG1DBR<CWG1DBR2>
extern volatile __bit                   CWG1DBR2            __at(0xCDA);	// @ (0x19B * 8 + 2)
#define                                 CWG1DBR2_bit        _BIT_ACCESS(CWG1DBR,2)
// CWG1DBR<CWG1DBR3>
extern volatile __bit                   CWG1DBR3            __at(0xCDB);	// @ (0x19B * 8 + 3)
#define                                 CWG1DBR3_bit        _BIT_ACCESS(CWG1DBR,3)
// CWG1DBR<CWG1DBR4>
extern volatile __bit                   CWG1DBR4            __at(0xCDC);	// @ (0x19B * 8 + 4)
#define                                 CWG1DBR4_bit        _BIT_ACCESS(CWG1DBR,4)
// CWG1DBR<CWG1DBR5>
extern volatile __bit                   CWG1DBR5            __at(0xCDD);	// @ (0x19B * 8 + 5)
#define                                 CWG1DBR5_bit        _BIT_ACCESS(CWG1DBR,5)
// CWG1CON0<CWG1EN>
extern volatile __bit                   CWG1EN              __at(0xCEF);	// @ (0x19D * 8 + 7)
#define                                 CWG1EN_bit          _BIT_ACCESS(CWG1CON0,7)
// PIE5<CWG1IE>
extern volatile __bit                   CWG1IE              __at(0x23C2);	// @ (0x478 * 8 + 2)
#define                                 CWG1IE_bit          _BIT_ACCESS(PIE5,2)
// PIR5<CWG1IF>
extern volatile __bit                   CWG1IF              __at(0x2372);	// @ (0x46E * 8 + 2)
#define                                 CWG1IF_bit          _BIT_ACCESS(PIR5,2)
// CWG1CON1<CWG1IN>
extern volatile __bit                   CWG1IN              __at(0xCF5);	// @ (0x19E * 8 + 5)
#define                                 CWG1IN_bit          _BIT_ACCESS(CWG1CON1,5)
// CWG1PPS<CWG1INPPS0>
extern volatile __bit                   CWG1INPPS0          __at(0x1CC8);	// @ (0x399 * 8 + 0)
#define                                 CWG1INPPS0_bit      _BIT_ACCESS(CWG1PPS,0)
// CWG1PPS<CWG1INPPS1>
extern volatile __bit                   CWG1INPPS1          __at(0x1CC9);	// @ (0x399 * 8 + 1)
#define                                 CWG1INPPS1_bit      _BIT_ACCESS(CWG1PPS,1)
// CWG1PPS<CWG1INPPS2>
extern volatile __bit                   CWG1INPPS2          __at(0x1CCA);	// @ (0x399 * 8 + 2)
#define                                 CWG1INPPS2_bit      _BIT_ACCESS(CWG1PPS,2)
// CWG1PPS<CWG1INPPS3>
extern volatile __bit                   CWG1INPPS3          __at(0x1CCB);	// @ (0x399 * 8 + 3)
#define                                 CWG1INPPS3_bit      _BIT_ACCESS(CWG1PPS,3)
// CWG1PPS<CWG1INPPS4>
extern volatile __bit                   CWG1INPPS4          __at(0x1CCC);	// @ (0x399 * 8 + 4)
#define                                 CWG1INPPS4_bit      _BIT_ACCESS(CWG1PPS,4)
// IPR5<CWG1IP>
extern volatile __bit                   CWG1IP              __at(0x2412);	// @ (0x482 * 8 + 2)
#define                                 CWG1IP_bit          _BIT_ACCESS(IPR5,2)
// CWG1CON0<CWG1LD>
extern volatile __bit                   CWG1LD              __at(0xCEE);	// @ (0x19D * 8 + 6)
#define                                 CWG1LD_bit          _BIT_ACCESS(CWG1CON0,6)
// CWG1AS0<CWG1LSAC0>
extern volatile __bit                   CWG1LSAC0           __at(0xCFA);	// @ (0x19F * 8 + 2)
#define                                 CWG1LSAC0_bit       _BIT_ACCESS(CWG1AS0,2)
// CWG1AS0<CWG1LSAC1>
extern volatile __bit                   CWG1LSAC1           __at(0xCFB);	// @ (0x19F * 8 + 3)
#define                                 CWG1LSAC1_bit       _BIT_ACCESS(CWG1AS0,3)
// CWG1AS0<CWG1LSBD0>
extern volatile __bit                   CWG1LSBD0           __at(0xCFC);	// @ (0x19F * 8 + 4)
#define                                 CWG1LSBD0_bit       _BIT_ACCESS(CWG1AS0,4)
// CWG1AS0<CWG1LSBD1>
extern volatile __bit                   CWG1LSBD1           __at(0xCFD);	// @ (0x19F * 8 + 5)
#define                                 CWG1LSBD1_bit       _BIT_ACCESS(CWG1AS0,5)
// CWG1AS0<CWG1LSDB0>
extern volatile __bit                   CWG1LSDB0           __at(0xCFC);	// @ (0x19F * 8 + 4)
#define                                 CWG1LSDB0_bit       _BIT_ACCESS(CWG1AS0,4)
// CWG1AS0<CWG1LSDB1>
extern volatile __bit                   CWG1LSDB1           __at(0xCFD);	// @ (0x19F * 8 + 5)
#define                                 CWG1LSDB1_bit       _BIT_ACCESS(CWG1AS0,5)
// PMD2<CWG1MD>
extern volatile __bit                   CWG1MD              __at(0x1816);	// @ (0x302 * 8 + 6)
#define                                 CWG1MD_bit          _BIT_ACCESS(PMD2,6)
// CWG1CON0<CWG1MODE0>
extern volatile __bit                   CWG1MODE0           __at(0xCE8);	// @ (0x19D * 8 + 0)
#define                                 CWG1MODE0_bit       _BIT_ACCESS(CWG1CON0,0)
// CWG1CON0<CWG1MODE1>
extern volatile __bit                   CWG1MODE1           __at(0xCE9);	// @ (0x19D * 8 + 1)
#define                                 CWG1MODE1_bit       _BIT_ACCESS(CWG1CON0,1)
// CWG1CON0<CWG1MODE2>
extern volatile __bit                   CWG1MODE2           __at(0xCEA);	// @ (0x19D * 8 + 2)
#define                                 CWG1MODE2_bit       _BIT_ACCESS(CWG1CON0,2)
// CWG1STR<CWG1OVRA>
extern volatile __bit                   CWG1OVRA            __at(0xD0C);	// @ (0x1A1 * 8 + 4)
#define                                 CWG1OVRA_bit        _BIT_ACCESS(CWG1STR,4)
// CWG1STR<CWG1OVRB>
extern volatile __bit                   CWG1OVRB            __at(0xD0D);	// @ (0x1A1 * 8 + 5)
#define                                 CWG1OVRB_bit        _BIT_ACCESS(CWG1STR,5)
// CWG1STR<CWG1OVRC>
extern volatile __bit                   CWG1OVRC            __at(0xD0E);	// @ (0x1A1 * 8 + 6)
#define                                 CWG1OVRC_bit        _BIT_ACCESS(CWG1STR,6)
// CWG1STR<CWG1OVRD>
extern volatile __bit                   CWG1OVRD            __at(0xD0F);	// @ (0x1A1 * 8 + 7)
#define                                 CWG1OVRD_bit        _BIT_ACCESS(CWG1STR,7)
// CWG1CON1<CWG1POLA>
extern volatile __bit                   CWG1POLA            __at(0xCF0);	// @ (0x19E * 8 + 0)
#define                                 CWG1POLA_bit        _BIT_ACCESS(CWG1CON1,0)
// CWG1CON1<CWG1POLB>
extern volatile __bit                   CWG1POLB            __at(0xCF1);	// @ (0x19E * 8 + 1)
#define                                 CWG1POLB_bit        _BIT_ACCESS(CWG1CON1,1)
// CWG1CON1<CWG1POLC>
extern volatile __bit                   CWG1POLC            __at(0xCF2);	// @ (0x19E * 8 + 2)
#define                                 CWG1POLC_bit        _BIT_ACCESS(CWG1CON1,2)
// CWG1CON1<CWG1POLD>
extern volatile __bit                   CWG1POLD            __at(0xCF3);	// @ (0x19E * 8 + 3)
#define                                 CWG1POLD_bit        _BIT_ACCESS(CWG1CON1,3)
// CWG1STR<CWG1STRA>
extern volatile __bit                   CWG1STRA            __at(0xD08);	// @ (0x1A1 * 8 + 0)
#define                                 CWG1STRA_bit        _BIT_ACCESS(CWG1STR,0)
// CWG1STR<CWG1STRB>
extern volatile __bit                   CWG1STRB            __at(0xD09);	// @ (0x1A1 * 8 + 1)
#define                                 CWG1STRB_bit        _BIT_ACCESS(CWG1STR,1)
// CWG1STR<CWG1STRC>
extern volatile __bit                   CWG1STRC            __at(0xD0A);	// @ (0x1A1 * 8 + 2)
#define                                 CWG1STRC_bit        _BIT_ACCESS(CWG1STR,2)
// CWG1STR<CWG1STRD>
extern volatile __bit                   CWG1STRD            __at(0xD0B);	// @ (0x1A1 * 8 + 3)
#define                                 CWG1STRD_bit        _BIT_ACCESS(CWG1STR,3)
// CWG1PPS<CWGINPPS0>
extern volatile __bit                   CWGINPPS0           __at(0x1CC8);	// @ (0x399 * 8 + 0)
#define                                 CWGINPPS0_bit       _BIT_ACCESS(CWG1PPS,0)
// CWG1PPS<CWGINPPS1>
extern volatile __bit                   CWGINPPS1           __at(0x1CC9);	// @ (0x399 * 8 + 1)
#define                                 CWGINPPS1_bit       _BIT_ACCESS(CWG1PPS,1)
// CWG1PPS<CWGINPPS2>
extern volatile __bit                   CWGINPPS2           __at(0x1CCA);	// @ (0x399 * 8 + 2)
#define                                 CWGINPPS2_bit       _BIT_ACCESS(CWG1PPS,2)
// CWG1PPS<CWGINPPS3>
extern volatile __bit                   CWGINPPS3           __at(0x1CCB);	// @ (0x399 * 8 + 3)
#define                                 CWGINPPS3_bit       _BIT_ACCESS(CWG1PPS,3)
// CWG1PPS<CWGINPPS4>
extern volatile __bit                   CWGINPPS4           __at(0x1CCC);	// @ (0x399 * 8 + 4)
#define                                 CWGINPPS4_bit       _BIT_ACCESS(CWG1PPS,4)
// CLCnSEL0<D1S0>
extern volatile __bit                   D1S0                __at(0xD38);	// @ (0x1A7 * 8 + 0)
#define                                 D1S0_bit            _BIT_ACCESS(CLCnSEL0,0)
// CLCnSEL0<D1S1>
extern volatile __bit                   D1S1                __at(0xD39);	// @ (0x1A7 * 8 + 1)
#define                                 D1S1_bit            _BIT_ACCESS(CLCnSEL0,1)
// CLCnSEL0<D1S2>
extern volatile __bit                   D1S2                __at(0xD3A);	// @ (0x1A7 * 8 + 2)
#define                                 D1S2_bit            _BIT_ACCESS(CLCnSEL0,2)
// CLCnSEL0<D1S3>
extern volatile __bit                   D1S3                __at(0xD3B);	// @ (0x1A7 * 8 + 3)
#define                                 D1S3_bit            _BIT_ACCESS(CLCnSEL0,3)
// CLCnSEL0<D1S4>
extern volatile __bit                   D1S4                __at(0xD3C);	// @ (0x1A7 * 8 + 4)
#define                                 D1S4_bit            _BIT_ACCESS(CLCnSEL0,4)
// CLCnSEL0<D1S5>
extern volatile __bit                   D1S5                __at(0xD3D);	// @ (0x1A7 * 8 + 5)
#define                                 D1S5_bit            _BIT_ACCESS(CLCnSEL0,5)
// CLCnSEL1<D2S0>
extern volatile __bit                   D2S0                __at(0xD40);	// @ (0x1A8 * 8 + 0)
#define                                 D2S0_bit            _BIT_ACCESS(CLCnSEL1,0)
// CLCnSEL1<D2S1>
extern volatile __bit                   D2S1                __at(0xD41);	// @ (0x1A8 * 8 + 1)
#define                                 D2S1_bit            _BIT_ACCESS(CLCnSEL1,1)
// CLCnSEL1<D2S2>
extern volatile __bit                   D2S2                __at(0xD42);	// @ (0x1A8 * 8 + 2)
#define                                 D2S2_bit            _BIT_ACCESS(CLCnSEL1,2)
// CLCnSEL1<D2S3>
extern volatile __bit                   D2S3                __at(0xD43);	// @ (0x1A8 * 8 + 3)
#define                                 D2S3_bit            _BIT_ACCESS(CLCnSEL1,3)
// CLCnSEL1<D2S4>
extern volatile __bit                   D2S4                __at(0xD44);	// @ (0x1A8 * 8 + 4)
#define                                 D2S4_bit            _BIT_ACCESS(CLCnSEL1,4)
// CLCnSEL1<D2S5>
extern volatile __bit                   D2S5                __at(0xD45);	// @ (0x1A8 * 8 + 5)
#define                                 D2S5_bit            _BIT_ACCESS(CLCnSEL1,5)
// CLCnSEL2<D3S0>
extern volatile __bit                   D3S0                __at(0xD48);	// @ (0x1A9 * 8 + 0)
#define                                 D3S0_bit            _BIT_ACCESS(CLCnSEL2,0)
// CLCnSEL2<D3S1>
extern volatile __bit                   D3S1                __at(0xD49);	// @ (0x1A9 * 8 + 1)
#define                                 D3S1_bit            _BIT_ACCESS(CLCnSEL2,1)
// CLCnSEL2<D3S2>
extern volatile __bit                   D3S2                __at(0xD4A);	// @ (0x1A9 * 8 + 2)
#define                                 D3S2_bit            _BIT_ACCESS(CLCnSEL2,2)
// CLCnSEL2<D3S3>
extern volatile __bit                   D3S3                __at(0xD4B);	// @ (0x1A9 * 8 + 3)
#define                                 D3S3_bit            _BIT_ACCESS(CLCnSEL2,3)
// CLCnSEL2<D3S4>
extern volatile __bit                   D3S4                __at(0xD4C);	// @ (0x1A9 * 8 + 4)
#define                                 D3S4_bit            _BIT_ACCESS(CLCnSEL2,4)
// CLCnSEL2<D3S5>
extern volatile __bit                   D3S5                __at(0xD4D);	// @ (0x1A9 * 8 + 5)
#define                                 D3S5_bit            _BIT_ACCESS(CLCnSEL2,5)
// CLCnSEL3<D4S0>
extern volatile __bit                   D4S0                __at(0xD50);	// @ (0x1AA * 8 + 0)
#define                                 D4S0_bit            _BIT_ACCESS(CLCnSEL3,0)
// CLCnSEL3<D4S1>
extern volatile __bit                   D4S1                __at(0xD51);	// @ (0x1AA * 8 + 1)
#define                                 D4S1_bit            _BIT_ACCESS(CLCnSEL3,1)
// CLCnSEL3<D4S2>
extern volatile __bit                   D4S2                __at(0xD52);	// @ (0x1AA * 8 + 2)
#define                                 D4S2_bit            _BIT_ACCESS(CLCnSEL3,2)
// CLCnSEL3<D4S3>
extern volatile __bit                   D4S3                __at(0xD53);	// @ (0x1AA * 8 + 3)
#define                                 D4S3_bit            _BIT_ACCESS(CLCnSEL3,3)
// CLCnSEL3<D4S4>
extern volatile __bit                   D4S4                __at(0xD54);	// @ (0x1AA * 8 + 4)
#define                                 D4S4_bit            _BIT_ACCESS(CLCnSEL3,4)
// CLCnSEL3<D4S5>
extern volatile __bit                   D4S5                __at(0xD55);	// @ (0x1AA * 8 + 5)
#define                                 D4S5_bit            _BIT_ACCESS(CLCnSEL3,5)
// I3C1PIE1<DACHIE>
extern volatile __bit                   DACHIE              __at(0x47E);	// @ (0x8F * 8 + 6)
#define                                 DACHIE_bit          _BIT_ACCESS(I3C1PIE1,6)
// I3C1PIR1<DACHIF>
extern volatile __bit                   DACHIF              __at(0x45E);	// @ (0x8B * 8 + 6)
#define                                 DACHIF_bit          _BIT_ACCESS(I3C1PIR1,6)
// I3C1PIE0<DADRIE>
extern volatile __bit                   DADRIE              __at(0x472);	// @ (0x8E * 8 + 2)
#define                                 DADRIE_bit          _BIT_ACCESS(I3C1PIE0,2)
// I3C1PIR0<DADRIF>
extern volatile __bit                   DADRIF              __at(0x452);	// @ (0x8A * 8 + 2)
#define                                 DADRIF_bit          _BIT_ACCESS(I3C1PIR0,2)
// I2C1STAT0<DATA>
extern volatile __bit                   DATA                __at(0xF23);	// @ (0x1E4 * 8 + 3)
#define                                 DATA_bit            _BIT_ACCESS(I2C1STAT0,3)
// CRCDATAL<DATA0>
extern volatile __bit                   DATA0               __at(0x300);	// @ (0x60 * 8 + 0)
#define                                 DATA0_bit           _BIT_ACCESS(CRCDATAL,0)
// CRCDATAL<DATA1>
extern volatile __bit                   DATA1               __at(0x301);	// @ (0x60 * 8 + 1)
#define                                 DATA1_bit           _BIT_ACCESS(CRCDATAL,1)
// CRCDATAH<DATA10>
extern volatile __bit                   DATA10              __at(0x30A);	// @ (0x61 * 8 + 2)
#define                                 DATA10_bit          _BIT_ACCESS(CRCDATAH,2)
// CRCDATAH<DATA11>
extern volatile __bit                   DATA11              __at(0x30B);	// @ (0x61 * 8 + 3)
#define                                 DATA11_bit          _BIT_ACCESS(CRCDATAH,3)
// CRCDATAH<DATA12>
extern volatile __bit                   DATA12              __at(0x30C);	// @ (0x61 * 8 + 4)
#define                                 DATA12_bit          _BIT_ACCESS(CRCDATAH,4)
// CRCDATAH<DATA13>
extern volatile __bit                   DATA13              __at(0x30D);	// @ (0x61 * 8 + 5)
#define                                 DATA13_bit          _BIT_ACCESS(CRCDATAH,5)
// CRCDATAH<DATA14>
extern volatile __bit                   DATA14              __at(0x30E);	// @ (0x61 * 8 + 6)
#define                                 DATA14_bit          _BIT_ACCESS(CRCDATAH,6)
// CRCDATAH<DATA15>
extern volatile __bit                   DATA15              __at(0x30F);	// @ (0x61 * 8 + 7)
#define                                 DATA15_bit          _BIT_ACCESS(CRCDATAH,7)
// CRCDATAU<DATA16>
extern volatile __bit                   DATA16              __at(0x310);	// @ (0x62 * 8 + 0)
#define                                 DATA16_bit          _BIT_ACCESS(CRCDATAU,0)
// CRCDATAU<DATA17>
extern volatile __bit                   DATA17              __at(0x311);	// @ (0x62 * 8 + 1)
#define                                 DATA17_bit          _BIT_ACCESS(CRCDATAU,1)
// CRCDATAU<DATA18>
extern volatile __bit                   DATA18              __at(0x312);	// @ (0x62 * 8 + 2)
#define                                 DATA18_bit          _BIT_ACCESS(CRCDATAU,2)
// CRCDATAU<DATA19>
extern volatile __bit                   DATA19              __at(0x313);	// @ (0x62 * 8 + 3)
#define                                 DATA19_bit          _BIT_ACCESS(CRCDATAU,3)
// CRCDATAL<DATA2>
extern volatile __bit                   DATA2               __at(0x302);	// @ (0x60 * 8 + 2)
#define                                 DATA2_bit           _BIT_ACCESS(CRCDATAL,2)
// CRCDATAU<DATA20>
extern volatile __bit                   DATA20              __at(0x314);	// @ (0x62 * 8 + 4)
#define                                 DATA20_bit          _BIT_ACCESS(CRCDATAU,4)
// CRCDATAU<DATA21>
extern volatile __bit                   DATA21              __at(0x315);	// @ (0x62 * 8 + 5)
#define                                 DATA21_bit          _BIT_ACCESS(CRCDATAU,5)
// CRCDATAU<DATA22>
extern volatile __bit                   DATA22              __at(0x316);	// @ (0x62 * 8 + 6)
#define                                 DATA22_bit          _BIT_ACCESS(CRCDATAU,6)
// CRCDATAU<DATA23>
extern volatile __bit                   DATA23              __at(0x317);	// @ (0x62 * 8 + 7)
#define                                 DATA23_bit          _BIT_ACCESS(CRCDATAU,7)
// CRCDATAT<DATA24>
extern volatile __bit                   DATA24              __at(0x318);	// @ (0x63 * 8 + 0)
#define                                 DATA24_bit          _BIT_ACCESS(CRCDATAT,0)
// CRCDATAT<DATA25>
extern volatile __bit                   DATA25              __at(0x319);	// @ (0x63 * 8 + 1)
#define                                 DATA25_bit          _BIT_ACCESS(CRCDATAT,1)
// CRCDATAT<DATA26>
extern volatile __bit                   DATA26              __at(0x31A);	// @ (0x63 * 8 + 2)
#define                                 DATA26_bit          _BIT_ACCESS(CRCDATAT,2)
// CRCDATAT<DATA27>
extern volatile __bit                   DATA27              __at(0x31B);	// @ (0x63 * 8 + 3)
#define                                 DATA27_bit          _BIT_ACCESS(CRCDATAT,3)
// CRCDATAT<DATA28>
extern volatile __bit                   DATA28              __at(0x31C);	// @ (0x63 * 8 + 4)
#define                                 DATA28_bit          _BIT_ACCESS(CRCDATAT,4)
// CRCDATAT<DATA29>
extern volatile __bit                   DATA29              __at(0x31D);	// @ (0x63 * 8 + 5)
#define                                 DATA29_bit          _BIT_ACCESS(CRCDATAT,5)
// CRCDATAL<DATA3>
extern volatile __bit                   DATA3               __at(0x303);	// @ (0x60 * 8 + 3)
#define                                 DATA3_bit           _BIT_ACCESS(CRCDATAL,3)
// CRCDATAT<DATA30>
extern volatile __bit                   DATA30              __at(0x31E);	// @ (0x63 * 8 + 6)
#define                                 DATA30_bit          _BIT_ACCESS(CRCDATAT,6)
// CRCDATAT<DATA31>
extern volatile __bit                   DATA31              __at(0x31F);	// @ (0x63 * 8 + 7)
#define                                 DATA31_bit          _BIT_ACCESS(CRCDATAT,7)
// CRCDATAL<DATA4>
extern volatile __bit                   DATA4               __at(0x304);	// @ (0x60 * 8 + 4)
#define                                 DATA4_bit           _BIT_ACCESS(CRCDATAL,4)
// CRCDATAL<DATA5>
extern volatile __bit                   DATA5               __at(0x305);	// @ (0x60 * 8 + 5)
#define                                 DATA5_bit           _BIT_ACCESS(CRCDATAL,5)
// CRCDATAL<DATA6>
extern volatile __bit                   DATA6               __at(0x306);	// @ (0x60 * 8 + 6)
#define                                 DATA6_bit           _BIT_ACCESS(CRCDATAL,6)
// CRCDATAL<DATA7>
extern volatile __bit                   DATA7               __at(0x307);	// @ (0x60 * 8 + 7)
#define                                 DATA7_bit           _BIT_ACCESS(CRCDATAL,7)
// CRCDATAH<DATA8>
extern volatile __bit                   DATA8               __at(0x308);	// @ (0x61 * 8 + 0)
#define                                 DATA8_bit           _BIT_ACCESS(CRCDATAH,0)
// CRCDATAH<DATA9>
extern volatile __bit                   DATA9               __at(0x309);	// @ (0x61 * 8 + 1)
#define                                 DATA9_bit           _BIT_ACCESS(CRCDATAH,1)
// CWG1DBF<DBF0>
extern volatile __bit                   DBF0                __at(0xCE0);	// @ (0x19C * 8 + 0)
#define                                 DBF0_bit            _BIT_ACCESS(CWG1DBF,0)
// CWG1DBF<DBF1>
extern volatile __bit                   DBF1                __at(0xCE1);	// @ (0x19C * 8 + 1)
#define                                 DBF1_bit            _BIT_ACCESS(CWG1DBF,1)
// CWG1DBF<DBF2>
extern volatile __bit                   DBF2                __at(0xCE2);	// @ (0x19C * 8 + 2)
#define                                 DBF2_bit            _BIT_ACCESS(CWG1DBF,2)
// CWG1DBF<DBF3>
extern volatile __bit                   DBF3                __at(0xCE3);	// @ (0x19C * 8 + 3)
#define                                 DBF3_bit            _BIT_ACCESS(CWG1DBF,3)
// CWG1DBF<DBF4>
extern volatile __bit                   DBF4                __at(0xCE4);	// @ (0x19C * 8 + 4)
#define                                 DBF4_bit            _BIT_ACCESS(CWG1DBF,4)
// CWG1DBF<DBF5>
extern volatile __bit                   DBF5                __at(0xCE5);	// @ (0x19C * 8 + 5)
#define                                 DBF5_bit            _BIT_ACCESS(CWG1DBF,5)
// CWG1DBR<DBR0>
extern volatile __bit                   DBR0                __at(0xCD8);	// @ (0x19B * 8 + 0)
#define                                 DBR0_bit            _BIT_ACCESS(CWG1DBR,0)
// CWG1DBR<DBR1>
extern volatile __bit                   DBR1                __at(0xCD9);	// @ (0x19B * 8 + 1)
#define                                 DBR1_bit            _BIT_ACCESS(CWG1DBR,1)
// CWG1DBR<DBR2>
extern volatile __bit                   DBR2                __at(0xCDA);	// @ (0x19B * 8 + 2)
#define                                 DBR2_bit            _BIT_ACCESS(CWG1DBR,2)
// CWG1DBR<DBR3>
extern volatile __bit                   DBR3                __at(0xCDB);	// @ (0x19B * 8 + 3)
#define                                 DBR3_bit            _BIT_ACCESS(CWG1DBR,3)
// CWG1DBR<DBR4>
extern volatile __bit                   DBR4                __at(0xCDC);	// @ (0x19B * 8 + 4)
#define                                 DBR4_bit            _BIT_ACCESS(CWG1DBR,4)
// CWG1DBR<DBR5>
extern volatile __bit                   DBR5                __at(0xCDD);	// @ (0x19B * 8 + 5)
#define                                 DBR5_bit            _BIT_ACCESS(CWG1DBR,5)
// CLKRCON<DC0>
extern volatile __bit                   DC0                 __at(0x803);	// @ (0x100 * 8 + 3)
#define                                 DC0_bit             _BIT_ACCESS(CLKRCON,3)
// CLKRCON<DC1>
extern volatile __bit                   DC1                 __at(0x804);	// @ (0x100 * 8 + 4)
#define                                 DC1_bit             _BIT_ACCESS(CLKRCON,4)
// DMAnDCNTL<DCNT0>
extern volatile __bit                   DCNT0               __at(0x210);	// @ (0x42 * 8 + 0)
#define                                 DCNT0_bit           _BIT_ACCESS(DMAnDCNTL,0)
// DMAnDCNTL<DCNT1>
extern volatile __bit                   DCNT1               __at(0x211);	// @ (0x42 * 8 + 1)
#define                                 DCNT1_bit           _BIT_ACCESS(DMAnDCNTL,1)
// DMAnDCNTH<DCNT10>
extern volatile __bit                   DCNT10              __at(0x21A);	// @ (0x43 * 8 + 2)
#define                                 DCNT10_bit          _BIT_ACCESS(DMAnDCNTH,2)
// DMAnDCNTH<DCNT11>
extern volatile __bit                   DCNT11              __at(0x21B);	// @ (0x43 * 8 + 3)
#define                                 DCNT11_bit          _BIT_ACCESS(DMAnDCNTH,3)
// DMAnDCNTL<DCNT2>
extern volatile __bit                   DCNT2               __at(0x212);	// @ (0x42 * 8 + 2)
#define                                 DCNT2_bit           _BIT_ACCESS(DMAnDCNTL,2)
// DMAnDCNTL<DCNT3>
extern volatile __bit                   DCNT3               __at(0x213);	// @ (0x42 * 8 + 3)
#define                                 DCNT3_bit           _BIT_ACCESS(DMAnDCNTL,3)
// DMAnDCNTL<DCNT4>
extern volatile __bit                   DCNT4               __at(0x214);	// @ (0x42 * 8 + 4)
#define                                 DCNT4_bit           _BIT_ACCESS(DMAnDCNTL,4)
// DMAnDCNTL<DCNT5>
extern volatile __bit                   DCNT5               __at(0x215);	// @ (0x42 * 8 + 5)
#define                                 DCNT5_bit           _BIT_ACCESS(DMAnDCNTL,5)
// DMAnDCNTL<DCNT6>
extern volatile __bit                   DCNT6               __at(0x216);	// @ (0x42 * 8 + 6)
#define                                 DCNT6_bit           _BIT_ACCESS(DMAnDCNTL,6)
// DMAnDCNTL<DCNT7>
extern volatile __bit                   DCNT7               __at(0x217);	// @ (0x42 * 8 + 7)
#define                                 DCNT7_bit           _BIT_ACCESS(DMAnDCNTL,7)
// DMAnDCNTH<DCNT8>
extern volatile __bit                   DCNT8               __at(0x218);	// @ (0x43 * 8 + 0)
#define                                 DCNT8_bit           _BIT_ACCESS(DMAnDCNTH,0)
// DMAnDCNTH<DCNT9>
extern volatile __bit                   DCNT9               __at(0x219);	// @ (0x43 * 8 + 1)
#define                                 DCNT9_bit           _BIT_ACCESS(DMAnDCNTH,1)
// PORTWDF<DF0>
extern volatile __bit                   DF0                 __at(0x2520);	// @ (0x4A4 * 8 + 0)
#define                                 DF0_bit             _BIT_ACCESS(PORTWDF,0)
// PORTWDF<DF1>
extern volatile __bit                   DF1                 __at(0x2521);	// @ (0x4A4 * 8 + 1)
#define                                 DF1_bit             _BIT_ACCESS(PORTWDF,1)
// PORTWDF<DF2>
extern volatile __bit                   DF2                 __at(0x2522);	// @ (0x4A4 * 8 + 2)
#define                                 DF2_bit             _BIT_ACCESS(PORTWDF,2)
// PORTWDF<DF3>
extern volatile __bit                   DF3                 __at(0x2523);	// @ (0x4A4 * 8 + 3)
#define                                 DF3_bit             _BIT_ACCESS(PORTWDF,3)
// PORTWDF<DF4>
extern volatile __bit                   DF4                 __at(0x2524);	// @ (0x4A4 * 8 + 4)
#define                                 DF4_bit             _BIT_ACCESS(PORTWDF,4)
// PORTWDF<DF5>
extern volatile __bit                   DF5                 __at(0x2525);	// @ (0x4A4 * 8 + 5)
#define                                 DF5_bit             _BIT_ACCESS(PORTWDF,5)
// PORTWDF<DF6>
extern volatile __bit                   DF6                 __at(0x2526);	// @ (0x4A4 * 8 + 6)
#define                                 DF6_bit             _BIT_ACCESS(PORTWDF,6)
// PORTWDF<DF7>
extern volatile __bit                   DF7                 __at(0x2527);	// @ (0x4A4 * 8 + 7)
#define                                 DF7_bit             _BIT_ACCESS(PORTWDF,7)
// DMAnCON0<DGO>
extern volatile __bit                   DGO                 __at(0x2A5);	// @ (0x54 * 8 + 5)
#define                                 DGO_bit             _BIT_ACCESS(DMAnCON0,5)
// CLKRCON<DIV0>
extern volatile __bit                   DIV0                __at(0x800);	// @ (0x100 * 8 + 0)
#define                                 DIV0_bit            _BIT_ACCESS(CLKRCON,0)
// CLKRCON<DIV1>
extern volatile __bit                   DIV1                __at(0x801);	// @ (0x100 * 8 + 1)
#define                                 DIV1_bit            _BIT_ACCESS(CLKRCON,1)
// CLKRCON<DIV2>
extern volatile __bit                   DIV2                __at(0x802);	// @ (0x100 * 8 + 2)
#define                                 DIV2_bit            _BIT_ACCESS(CLKRCON,2)
// CRCCON2<DLEN0>
extern volatile __bit                   DLEN0               __at(0x350);	// @ (0x6A * 8 + 0)
#define                                 DLEN0_bit           _BIT_ACCESS(CRCCON2,0)
// CRCCON2<DLEN1>
extern volatile __bit                   DLEN1               __at(0x351);	// @ (0x6A * 8 + 1)
#define                                 DLEN1_bit           _BIT_ACCESS(CRCCON2,1)
// CRCCON2<DLEN2>
extern volatile __bit                   DLEN2               __at(0x352);	// @ (0x6A * 8 + 2)
#define                                 DLEN2_bit           _BIT_ACCESS(CRCCON2,2)
// CRCCON2<DLEN3>
extern volatile __bit                   DLEN3               __at(0x353);	// @ (0x6A * 8 + 3)
#define                                 DLEN3_bit           _BIT_ACCESS(CRCCON2,3)
// CRCCON2<DLEN4>
extern volatile __bit                   DLEN4               __at(0x354);	// @ (0x6A * 8 + 4)
#define                                 DLEN4_bit           _BIT_ACCESS(CRCCON2,4)
// PIE0<DMA1AIE>
extern volatile __bit                   DMA1AIE             __at(0x239F);	// @ (0x473 * 8 + 7)
#define                                 DMA1AIE_bit         _BIT_ACCESS(PIE0,7)
// PIR0<DMA1AIF>
extern volatile __bit                   DMA1AIF             __at(0x234F);	// @ (0x469 * 8 + 7)
#define                                 DMA1AIF_bit         _BIT_ACCESS(PIR0,7)
// IPR0<DMA1AIP>
extern volatile __bit                   DMA1AIP             __at(0x23EF);	// @ (0x47D * 8 + 7)
#define                                 DMA1AIP_bit         _BIT_ACCESS(IPR0,7)
// PIE0<DMA1DCNTIE>
extern volatile __bit                   DMA1DCNTIE          __at(0x239D);	// @ (0x473 * 8 + 5)
#define                                 DMA1DCNTIE_bit      _BIT_ACCESS(PIE0,5)
// PIR0<DMA1DCNTIF>
extern volatile __bit                   DMA1DCNTIF          __at(0x234D);	// @ (0x469 * 8 + 5)
#define                                 DMA1DCNTIF_bit      _BIT_ACCESS(PIR0,5)
// IPR0<DMA1DCNTIP>
extern volatile __bit                   DMA1DCNTIP          __at(0x23ED);	// @ (0x47D * 8 + 5)
#define                                 DMA1DCNTIP_bit      _BIT_ACCESS(IPR0,5)
// PMD0<DMA1MD>
extern volatile __bit                   DMA1MD              __at(0x1800);	// @ (0x300 * 8 + 0)
#define                                 DMA1MD_bit          _BIT_ACCESS(PMD0,0)
// PIE0<DMA1ORIE>
extern volatile __bit                   DMA1ORIE            __at(0x239E);	// @ (0x473 * 8 + 6)
#define                                 DMA1ORIE_bit        _BIT_ACCESS(PIE0,6)
// PIR0<DMA1ORIF>
extern volatile __bit                   DMA1ORIF            __at(0x234E);	// @ (0x469 * 8 + 6)
#define                                 DMA1ORIF_bit        _BIT_ACCESS(PIR0,6)
// IPR0<DMA1ORIP>
extern volatile __bit                   DMA1ORIP            __at(0x23EE);	// @ (0x47D * 8 + 6)
#define                                 DMA1ORIP_bit        _BIT_ACCESS(IPR0,6)
// DMA1PR<DMA1PR0>
extern volatile __bit                   DMA1PR0             __at(0x1D8);	// @ (0x3B * 8 + 0)
#define                                 DMA1PR0_bit         _BIT_ACCESS(DMA1PR,0)
// DMA1PR<DMA1PR1>
extern volatile __bit                   DMA1PR1             __at(0x1D9);	// @ (0x3B * 8 + 1)
#define                                 DMA1PR1_bit         _BIT_ACCESS(DMA1PR,1)
// DMA1PR<DMA1PR2>
extern volatile __bit                   DMA1PR2             __at(0x1DA);	// @ (0x3B * 8 + 2)
#define                                 DMA1PR2_bit         _BIT_ACCESS(DMA1PR,2)
// PIE0<DMA1SCNTIE>
extern volatile __bit                   DMA1SCNTIE          __at(0x239C);	// @ (0x473 * 8 + 4)
#define                                 DMA1SCNTIE_bit      _BIT_ACCESS(PIE0,4)
// PIR0<DMA1SCNTIF>
extern volatile __bit                   DMA1SCNTIF          __at(0x234C);	// @ (0x469 * 8 + 4)
#define                                 DMA1SCNTIF_bit      _BIT_ACCESS(PIR0,4)
// IPR0<DMA1SCNTIP>
extern volatile __bit                   DMA1SCNTIP          __at(0x23EC);	// @ (0x47D * 8 + 4)
#define                                 DMA1SCNTIP_bit      _BIT_ACCESS(IPR0,4)
// PIE1<DMA2AIE>
extern volatile __bit                   DMA2AIE             __at(0x23A3);	// @ (0x474 * 8 + 3)
#define                                 DMA2AIE_bit         _BIT_ACCESS(PIE1,3)
// PIR1<DMA2AIF>
extern volatile __bit                   DMA2AIF             __at(0x2353);	// @ (0x46A * 8 + 3)
#define                                 DMA2AIF_bit         _BIT_ACCESS(PIR1,3)
// IPR1<DMA2AIP>
extern volatile __bit                   DMA2AIP             __at(0x23F3);	// @ (0x47E * 8 + 3)
#define                                 DMA2AIP_bit         _BIT_ACCESS(IPR1,3)
// PIE1<DMA2DCNTIE>
extern volatile __bit                   DMA2DCNTIE          __at(0x23A1);	// @ (0x474 * 8 + 1)
#define                                 DMA2DCNTIE_bit      _BIT_ACCESS(PIE1,1)
// PIR1<DMA2DCNTIF>
extern volatile __bit                   DMA2DCNTIF          __at(0x2351);	// @ (0x46A * 8 + 1)
#define                                 DMA2DCNTIF_bit      _BIT_ACCESS(PIR1,1)
// IPR1<DMA2DCNTIP>
extern volatile __bit                   DMA2DCNTIP          __at(0x23F1);	// @ (0x47E * 8 + 1)
#define                                 DMA2DCNTIP_bit      _BIT_ACCESS(IPR1,1)
// PMD0<DMA2MD>
extern volatile __bit                   DMA2MD              __at(0x1801);	// @ (0x300 * 8 + 1)
#define                                 DMA2MD_bit          _BIT_ACCESS(PMD0,1)
// PIE1<DMA2ORIE>
extern volatile __bit                   DMA2ORIE            __at(0x23A2);	// @ (0x474 * 8 + 2)
#define                                 DMA2ORIE_bit        _BIT_ACCESS(PIE1,2)
// PIR1<DMA2ORIF>
extern volatile __bit                   DMA2ORIF            __at(0x2352);	// @ (0x46A * 8 + 2)
#define                                 DMA2ORIF_bit        _BIT_ACCESS(PIR1,2)
// IPR1<DMA2ORIP>
extern volatile __bit                   DMA2ORIP            __at(0x23F2);	// @ (0x47E * 8 + 2)
#define                                 DMA2ORIP_bit        _BIT_ACCESS(IPR1,2)
// DMA2PR<DMA2PR0>
extern volatile __bit                   DMA2PR0             __at(0x1E0);	// @ (0x3C * 8 + 0)
#define                                 DMA2PR0_bit         _BIT_ACCESS(DMA2PR,0)
// DMA2PR<DMA2PR1>
extern volatile __bit                   DMA2PR1             __at(0x1E1);	// @ (0x3C * 8 + 1)
#define                                 DMA2PR1_bit         _BIT_ACCESS(DMA2PR,1)
// DMA2PR<DMA2PR2>
extern volatile __bit                   DMA2PR2             __at(0x1E2);	// @ (0x3C * 8 + 2)
#define                                 DMA2PR2_bit         _BIT_ACCESS(DMA2PR,2)
// PIE1<DMA2SCNTIE>
extern volatile __bit                   DMA2SCNTIE          __at(0x23A0);	// @ (0x474 * 8 + 0)
#define                                 DMA2SCNTIE_bit      _BIT_ACCESS(PIE1,0)
// PIR1<DMA2SCNTIF>
extern volatile __bit                   DMA2SCNTIF          __at(0x2350);	// @ (0x46A * 8 + 0)
#define                                 DMA2SCNTIF_bit      _BIT_ACCESS(PIR1,0)
// IPR1<DMA2SCNTIP>
extern volatile __bit                   DMA2SCNTIP          __at(0x23F0);	// @ (0x47E * 8 + 0)
#define                                 DMA2SCNTIP_bit      _BIT_ACCESS(IPR1,0)
// PIE1<DMA3AIE>
extern volatile __bit                   DMA3AIE             __at(0x23A7);	// @ (0x474 * 8 + 7)
#define                                 DMA3AIE_bit         _BIT_ACCESS(PIE1,7)
// PIR1<DMA3AIF>
extern volatile __bit                   DMA3AIF             __at(0x2357);	// @ (0x46A * 8 + 7)
#define                                 DMA3AIF_bit         _BIT_ACCESS(PIR1,7)
// IPR1<DMA3AIP>
extern volatile __bit                   DMA3AIP             __at(0x23F7);	// @ (0x47E * 8 + 7)
#define                                 DMA3AIP_bit         _BIT_ACCESS(IPR1,7)
// PIE1<DMA3DCNTIE>
extern volatile __bit                   DMA3DCNTIE          __at(0x23A5);	// @ (0x474 * 8 + 5)
#define                                 DMA3DCNTIE_bit      _BIT_ACCESS(PIE1,5)
// PIR1<DMA3DCNTIF>
extern volatile __bit                   DMA3DCNTIF          __at(0x2355);	// @ (0x46A * 8 + 5)
#define                                 DMA3DCNTIF_bit      _BIT_ACCESS(PIR1,5)
// IPR1<DMA3DCNTIP>
extern volatile __bit                   DMA3DCNTIP          __at(0x23F5);	// @ (0x47E * 8 + 5)
#define                                 DMA3DCNTIP_bit      _BIT_ACCESS(IPR1,5)
// PMD0<DMA3MD>
extern volatile __bit                   DMA3MD              __at(0x1802);	// @ (0x300 * 8 + 2)
#define                                 DMA3MD_bit          _BIT_ACCESS(PMD0,2)
// PIE1<DMA3ORIE>
extern volatile __bit                   DMA3ORIE            __at(0x23A6);	// @ (0x474 * 8 + 6)
#define                                 DMA3ORIE_bit        _BIT_ACCESS(PIE1,6)
// PIR1<DMA3ORIF>
extern volatile __bit                   DMA3ORIF            __at(0x2356);	// @ (0x46A * 8 + 6)
#define                                 DMA3ORIF_bit        _BIT_ACCESS(PIR1,6)
// IPR1<DMA3ORIP>
extern volatile __bit                   DMA3ORIP            __at(0x23F6);	// @ (0x47E * 8 + 6)
#define                                 DMA3ORIP_bit        _BIT_ACCESS(IPR1,6)
// DMA3PR<DMA3PR0>
extern volatile __bit                   DMA3PR0             __at(0x1E8);	// @ (0x3D * 8 + 0)
#define                                 DMA3PR0_bit         _BIT_ACCESS(DMA3PR,0)
// DMA3PR<DMA3PR1>
extern volatile __bit                   DMA3PR1             __at(0x1E9);	// @ (0x3D * 8 + 1)
#define                                 DMA3PR1_bit         _BIT_ACCESS(DMA3PR,1)
// DMA3PR<DMA3PR2>
extern volatile __bit                   DMA3PR2             __at(0x1EA);	// @ (0x3D * 8 + 2)
#define                                 DMA3PR2_bit         _BIT_ACCESS(DMA3PR,2)
// PIE1<DMA3SCNTIE>
extern volatile __bit                   DMA3SCNTIE          __at(0x23A4);	// @ (0x474 * 8 + 4)
#define                                 DMA3SCNTIE_bit      _BIT_ACCESS(PIE1,4)
// PIR1<DMA3SCNTIF>
extern volatile __bit                   DMA3SCNTIF          __at(0x2354);	// @ (0x46A * 8 + 4)
#define                                 DMA3SCNTIF_bit      _BIT_ACCESS(PIR1,4)
// IPR1<DMA3SCNTIP>
extern volatile __bit                   DMA3SCNTIP          __at(0x23F4);	// @ (0x47E * 8 + 4)
#define                                 DMA3SCNTIP_bit      _BIT_ACCESS(IPR1,4)
// PIE2<DMA4AIE>
extern volatile __bit                   DMA4AIE             __at(0x23AB);	// @ (0x475 * 8 + 3)
#define                                 DMA4AIE_bit         _BIT_ACCESS(PIE2,3)
// PIR2<DMA4AIF>
extern volatile __bit                   DMA4AIF             __at(0x235B);	// @ (0x46B * 8 + 3)
#define                                 DMA4AIF_bit         _BIT_ACCESS(PIR2,3)
// IPR2<DMA4AIP>
extern volatile __bit                   DMA4AIP             __at(0x23FB);	// @ (0x47F * 8 + 3)
#define                                 DMA4AIP_bit         _BIT_ACCESS(IPR2,3)
// PIE2<DMA4DCNTIE>
extern volatile __bit                   DMA4DCNTIE          __at(0x23A9);	// @ (0x475 * 8 + 1)
#define                                 DMA4DCNTIE_bit      _BIT_ACCESS(PIE2,1)
// PIR2<DMA4DCNTIF>
extern volatile __bit                   DMA4DCNTIF          __at(0x2359);	// @ (0x46B * 8 + 1)
#define                                 DMA4DCNTIF_bit      _BIT_ACCESS(PIR2,1)
// IPR2<DMA4DCNTIP>
extern volatile __bit                   DMA4DCNTIP          __at(0x23F9);	// @ (0x47F * 8 + 1)
#define                                 DMA4DCNTIP_bit      _BIT_ACCESS(IPR2,1)
// PMD0<DMA4MD>
extern volatile __bit                   DMA4MD              __at(0x1803);	// @ (0x300 * 8 + 3)
#define                                 DMA4MD_bit          _BIT_ACCESS(PMD0,3)
// PIE2<DMA4ORIE>
extern volatile __bit                   DMA4ORIE            __at(0x23AA);	// @ (0x475 * 8 + 2)
#define                                 DMA4ORIE_bit        _BIT_ACCESS(PIE2,2)
// PIR2<DMA4ORIF>
extern volatile __bit                   DMA4ORIF            __at(0x235A);	// @ (0x46B * 8 + 2)
#define                                 DMA4ORIF_bit        _BIT_ACCESS(PIR2,2)
// IPR2<DMA4ORIP>
extern volatile __bit                   DMA4ORIP            __at(0x23FA);	// @ (0x47F * 8 + 2)
#define                                 DMA4ORIP_bit        _BIT_ACCESS(IPR2,2)
// DMA4PR<DMA4PR0>
extern volatile __bit                   DMA4PR0             __at(0x1F0);	// @ (0x3E * 8 + 0)
#define                                 DMA4PR0_bit         _BIT_ACCESS(DMA4PR,0)
// DMA4PR<DMA4PR1>
extern volatile __bit                   DMA4PR1             __at(0x1F1);	// @ (0x3E * 8 + 1)
#define                                 DMA4PR1_bit         _BIT_ACCESS(DMA4PR,1)
// DMA4PR<DMA4PR2>
extern volatile __bit                   DMA4PR2             __at(0x1F2);	// @ (0x3E * 8 + 2)
#define                                 DMA4PR2_bit         _BIT_ACCESS(DMA4PR,2)
// PIE2<DMA4SCNTIE>
extern volatile __bit                   DMA4SCNTIE          __at(0x23A8);	// @ (0x475 * 8 + 0)
#define                                 DMA4SCNTIE_bit      _BIT_ACCESS(PIE2,0)
// PIR2<DMA4SCNTIF>
extern volatile __bit                   DMA4SCNTIF          __at(0x2358);	// @ (0x46B * 8 + 0)
#define                                 DMA4SCNTIF_bit      _BIT_ACCESS(PIR2,0)
// IPR2<DMA4SCNTIP>
extern volatile __bit                   DMA4SCNTIP          __at(0x23F8);	// @ (0x47F * 8 + 0)
#define                                 DMA4SCNTIP_bit      _BIT_ACCESS(IPR2,0)
// CPUDOZE<DOE>
extern volatile __bit                   DOE                 __at(0x2794);	// @ (0x4F2 * 8 + 4)
#define                                 DOE_bit             _BIT_ACCESS(CPUDOZE,4)
// ADCON0<DONE>
extern volatile __bit                   DONE                __at(0x1178);	// @ (0x22F * 8 + 0)
#define                                 DONE_bit            _BIT_ACCESS(ADCON0,0)
// CPUDOZE<DOZE0>
extern volatile __bit                   DOZE0               __at(0x2790);	// @ (0x4F2 * 8 + 0)
#define                                 DOZE0_bit           _BIT_ACCESS(CPUDOZE,0)
// CPUDOZE<DOZE1>
extern volatile __bit                   DOZE1               __at(0x2791);	// @ (0x4F2 * 8 + 1)
#define                                 DOZE1_bit           _BIT_ACCESS(CPUDOZE,1)
// CPUDOZE<DOZE2>
extern volatile __bit                   DOZE2               __at(0x2792);	// @ (0x4F2 * 8 + 2)
#define                                 DOZE2_bit           _BIT_ACCESS(CPUDOZE,2)
// CPUDOZE<DOZEN>
extern volatile __bit                   DOZEN               __at(0x2796);	// @ (0x4F2 * 8 + 6)
#define                                 DOZEN_bit           _BIT_ACCESS(CPUDOZE,6)
// DMAnDPTRL<DPTR0>
extern volatile __bit                   DPTR0               __at(0x220);	// @ (0x44 * 8 + 0)
#define                                 DPTR0_bit           _BIT_ACCESS(DMAnDPTRL,0)
// DMAnDPTRL<DPTR1>
extern volatile __bit                   DPTR1               __at(0x221);	// @ (0x44 * 8 + 1)
#define                                 DPTR1_bit           _BIT_ACCESS(DMAnDPTRL,1)
// DMAnDPTRH<DPTR10>
extern volatile __bit                   DPTR10              __at(0x22A);	// @ (0x45 * 8 + 2)
#define                                 DPTR10_bit          _BIT_ACCESS(DMAnDPTRH,2)
// DMAnDPTRH<DPTR11>
extern volatile __bit                   DPTR11              __at(0x22B);	// @ (0x45 * 8 + 3)
#define                                 DPTR11_bit          _BIT_ACCESS(DMAnDPTRH,3)
// DMAnDPTRH<DPTR12>
extern volatile __bit                   DPTR12              __at(0x22C);	// @ (0x45 * 8 + 4)
#define                                 DPTR12_bit          _BIT_ACCESS(DMAnDPTRH,4)
// DMAnDPTRH<DPTR13>
extern volatile __bit                   DPTR13              __at(0x22D);	// @ (0x45 * 8 + 5)
#define                                 DPTR13_bit          _BIT_ACCESS(DMAnDPTRH,5)
// DMAnDPTRH<DPTR14>
extern volatile __bit                   DPTR14              __at(0x22E);	// @ (0x45 * 8 + 6)
#define                                 DPTR14_bit          _BIT_ACCESS(DMAnDPTRH,6)
// DMAnDPTRH<DPTR15>
extern volatile __bit                   DPTR15              __at(0x22F);	// @ (0x45 * 8 + 7)
#define                                 DPTR15_bit          _BIT_ACCESS(DMAnDPTRH,7)
// DMAnDPTRL<DPTR2>
extern volatile __bit                   DPTR2               __at(0x222);	// @ (0x44 * 8 + 2)
#define                                 DPTR2_bit           _BIT_ACCESS(DMAnDPTRL,2)
// DMAnDPTRL<DPTR3>
extern volatile __bit                   DPTR3               __at(0x223);	// @ (0x44 * 8 + 3)
#define                                 DPTR3_bit           _BIT_ACCESS(DMAnDPTRL,3)
// DMAnDPTRL<DPTR4>
extern volatile __bit                   DPTR4               __at(0x224);	// @ (0x44 * 8 + 4)
#define                                 DPTR4_bit           _BIT_ACCESS(DMAnDPTRL,4)
// DMAnDPTRL<DPTR5>
extern volatile __bit                   DPTR5               __at(0x225);	// @ (0x44 * 8 + 5)
#define                                 DPTR5_bit           _BIT_ACCESS(DMAnDPTRL,5)
// DMAnDPTRL<DPTR6>
extern volatile __bit                   DPTR6               __at(0x226);	// @ (0x44 * 8 + 6)
#define                                 DPTR6_bit           _BIT_ACCESS(DMAnDPTRL,6)
// DMAnDPTRL<DPTR7>
extern volatile __bit                   DPTR7               __at(0x227);	// @ (0x44 * 8 + 7)
#define                                 DPTR7_bit           _BIT_ACCESS(DMAnDPTRL,7)
// DMAnDPTRH<DPTR8>
extern volatile __bit                   DPTR8               __at(0x228);	// @ (0x45 * 8 + 0)
#define                                 DPTR8_bit           _BIT_ACCESS(DMAnDPTRH,0)
// DMAnDPTRH<DPTR9>
extern volatile __bit                   DPTR9               __at(0x229);	// @ (0x45 * 8 + 1)
#define                                 DPTR9_bit           _BIT_ACCESS(DMAnDPTRH,1)
// DMAnDSAL<DSA0>
extern volatile __bit                   DSA0                __at(0x240);	// @ (0x48 * 8 + 0)
#define                                 DSA0_bit            _BIT_ACCESS(DMAnDSAL,0)
// DMAnDSAL<DSA1>
extern volatile __bit                   DSA1                __at(0x241);	// @ (0x48 * 8 + 1)
#define                                 DSA1_bit            _BIT_ACCESS(DMAnDSAL,1)
// DMAnDSAH<DSA10>
extern volatile __bit                   DSA10               __at(0x24A);	// @ (0x49 * 8 + 2)
#define                                 DSA10_bit           _BIT_ACCESS(DMAnDSAH,2)
// DMAnDSAH<DSA11>
extern volatile __bit                   DSA11               __at(0x24B);	// @ (0x49 * 8 + 3)
#define                                 DSA11_bit           _BIT_ACCESS(DMAnDSAH,3)
// DMAnDSAH<DSA12>
extern volatile __bit                   DSA12               __at(0x24C);	// @ (0x49 * 8 + 4)
#define                                 DSA12_bit           _BIT_ACCESS(DMAnDSAH,4)
// DMAnDSAH<DSA13>
extern volatile __bit                   DSA13               __at(0x24D);	// @ (0x49 * 8 + 5)
#define                                 DSA13_bit           _BIT_ACCESS(DMAnDSAH,5)
// DMAnDSAH<DSA14>
extern volatile __bit                   DSA14               __at(0x24E);	// @ (0x49 * 8 + 6)
#define                                 DSA14_bit           _BIT_ACCESS(DMAnDSAH,6)
// DMAnDSAH<DSA15>
extern volatile __bit                   DSA15               __at(0x24F);	// @ (0x49 * 8 + 7)
#define                                 DSA15_bit           _BIT_ACCESS(DMAnDSAH,7)
// DMAnDSAL<DSA2>
extern volatile __bit                   DSA2                __at(0x242);	// @ (0x48 * 8 + 2)
#define                                 DSA2_bit            _BIT_ACCESS(DMAnDSAL,2)
// DMAnDSAL<DSA3>
extern volatile __bit                   DSA3                __at(0x243);	// @ (0x48 * 8 + 3)
#define                                 DSA3_bit            _BIT_ACCESS(DMAnDSAL,3)
// DMAnDSAL<DSA4>
extern volatile __bit                   DSA4                __at(0x244);	// @ (0x48 * 8 + 4)
#define                                 DSA4_bit            _BIT_ACCESS(DMAnDSAL,4)
// DMAnDSAL<DSA5>
extern volatile __bit                   DSA5                __at(0x245);	// @ (0x48 * 8 + 5)
#define                                 DSA5_bit            _BIT_ACCESS(DMAnDSAL,5)
// DMAnDSAL<DSA6>
extern volatile __bit                   DSA6                __at(0x246);	// @ (0x48 * 8 + 6)
#define                                 DSA6_bit            _BIT_ACCESS(DMAnDSAL,6)
// DMAnDSAL<DSA7>
extern volatile __bit                   DSA7                __at(0x247);	// @ (0x48 * 8 + 7)
#define                                 DSA7_bit            _BIT_ACCESS(DMAnDSAL,7)
// DMAnDSAH<DSA8>
extern volatile __bit                   DSA8                __at(0x248);	// @ (0x49 * 8 + 0)
#define                                 DSA8_bit            _BIT_ACCESS(DMAnDSAH,0)
// DMAnDSAH<DSA9>
extern volatile __bit                   DSA9                __at(0x249);	// @ (0x49 * 8 + 1)
#define                                 DSA9_bit            _BIT_ACCESS(DMAnDSAH,1)
// ADCON1<DSEN>
extern volatile __bit                   DSEN                __at(0x1180);	// @ (0x230 * 8 + 0)
#define                                 DSEN_bit            _BIT_ACCESS(ADCON1,0)
// DMAnCON1<DSTP>
extern volatile __bit                   DSTP                __at(0x2AD);	// @ (0x55 * 8 + 5)
#define                                 DSTP_bit            _BIT_ACCESS(DMAnCON1,5)
// DMAnDSZL<DSZ0>
extern volatile __bit                   DSZ0                __at(0x230);	// @ (0x46 * 8 + 0)
#define                                 DSZ0_bit            _BIT_ACCESS(DMAnDSZL,0)
// DMAnDSZL<DSZ1>
extern volatile __bit                   DSZ1                __at(0x231);	// @ (0x46 * 8 + 1)
#define                                 DSZ1_bit            _BIT_ACCESS(DMAnDSZL,1)
// DMAnDSZH<DSZ10>
extern volatile __bit                   DSZ10               __at(0x23A);	// @ (0x47 * 8 + 2)
#define                                 DSZ10_bit           _BIT_ACCESS(DMAnDSZH,2)
// DMAnDSZH<DSZ11>
extern volatile __bit                   DSZ11               __at(0x23B);	// @ (0x47 * 8 + 3)
#define                                 DSZ11_bit           _BIT_ACCESS(DMAnDSZH,3)
// DMAnDSZL<DSZ2>
extern volatile __bit                   DSZ2                __at(0x232);	// @ (0x46 * 8 + 2)
#define                                 DSZ2_bit            _BIT_ACCESS(DMAnDSZL,2)
// DMAnDSZL<DSZ3>
extern volatile __bit                   DSZ3                __at(0x233);	// @ (0x46 * 8 + 3)
#define                                 DSZ3_bit            _BIT_ACCESS(DMAnDSZL,3)
// DMAnDSZL<DSZ4>
extern volatile __bit                   DSZ4                __at(0x234);	// @ (0x46 * 8 + 4)
#define                                 DSZ4_bit            _BIT_ACCESS(DMAnDSZL,4)
// DMAnDSZL<DSZ5>
extern volatile __bit                   DSZ5                __at(0x235);	// @ (0x46 * 8 + 5)
#define                                 DSZ5_bit            _BIT_ACCESS(DMAnDSZL,5)
// DMAnDSZL<DSZ6>
extern volatile __bit                   DSZ6                __at(0x236);	// @ (0x46 * 8 + 6)
#define                                 DSZ6_bit            _BIT_ACCESS(DMAnDSZL,6)
// DMAnDSZL<DSZ7>
extern volatile __bit                   DSZ7                __at(0x237);	// @ (0x46 * 8 + 7)
#define                                 DSZ7_bit            _BIT_ACCESS(DMAnDSZL,7)
// DMAnDSZH<DSZ8>
extern volatile __bit                   DSZ8                __at(0x238);	// @ (0x47 * 8 + 0)
#define                                 DSZ8_bit            _BIT_ACCESS(DMAnDSZH,0)
// DMAnDSZH<DSZ9>
extern volatile __bit                   DSZ9                __at(0x239);	// @ (0x47 * 8 + 1)
#define                                 DSZ9_bit            _BIT_ACCESS(DMAnDSZH,1)
// I3C1EC<EC2>
extern volatile __bit                   EC2                 __at(0x4E2);	// @ (0x9C * 8 + 2)
#define                                 EC2_bit             _BIT_ACCESS(I3C1EC,2)
// SPI1INTE<EOSIE>
extern volatile __bit                   EOSIE               __at(0xF14);	// @ (0x1E2 * 8 + 4)
#define                                 EOSIE_bit           _BIT_ACCESS(SPI1INTE,4)
// SPI1INTF<EOSIF>
extern volatile __bit                   EOSIF               __at(0xF0C);	// @ (0x1E1 * 8 + 4)
#define                                 EOSIF_bit           _BIT_ACCESS(SPI1INTF,4)
// ADERRL<ERR0>
extern volatile __bit                   ERR0                __at(0x10C8);	// @ (0x219 * 8 + 0)
#define                                 ERR0_bit            _BIT_ACCESS(ADERRL,0)
// ADERRL<ERR1>
extern volatile __bit                   ERR1                __at(0x10C9);	// @ (0x219 * 8 + 1)
#define                                 ERR1_bit            _BIT_ACCESS(ADERRL,1)
// ADERRH<ERR10>
extern volatile __bit                   ERR10               __at(0x10D2);	// @ (0x21A * 8 + 2)
#define                                 ERR10_bit           _BIT_ACCESS(ADERRH,2)
// ADERRH<ERR11>
extern volatile __bit                   ERR11               __at(0x10D3);	// @ (0x21A * 8 + 3)
#define                                 ERR11_bit           _BIT_ACCESS(ADERRH,3)
// ADERRH<ERR12>
extern volatile __bit                   ERR12               __at(0x10D4);	// @ (0x21A * 8 + 4)
#define                                 ERR12_bit           _BIT_ACCESS(ADERRH,4)
// ADERRH<ERR13>
extern volatile __bit                   ERR13               __at(0x10D5);	// @ (0x21A * 8 + 5)
#define                                 ERR13_bit           _BIT_ACCESS(ADERRH,5)
// ADERRH<ERR14>
extern volatile __bit                   ERR14               __at(0x10D6);	// @ (0x21A * 8 + 6)
#define                                 ERR14_bit           _BIT_ACCESS(ADERRH,6)
// ADERRH<ERR15>
extern volatile __bit                   ERR15               __at(0x10D7);	// @ (0x21A * 8 + 7)
#define                                 ERR15_bit           _BIT_ACCESS(ADERRH,7)
// ADERRL<ERR2>
extern volatile __bit                   ERR2                __at(0x10CA);	// @ (0x219 * 8 + 2)
#define                                 ERR2_bit            _BIT_ACCESS(ADERRL,2)
// ADERRL<ERR3>
extern volatile __bit                   ERR3                __at(0x10CB);	// @ (0x219 * 8 + 3)
#define                                 ERR3_bit            _BIT_ACCESS(ADERRL,3)
// ADERRL<ERR4>
extern volatile __bit                   ERR4                __at(0x10CC);	// @ (0x219 * 8 + 4)
#define                                 ERR4_bit            _BIT_ACCESS(ADERRL,4)
// ADERRL<ERR5>
extern volatile __bit                   ERR5                __at(0x10CD);	// @ (0x219 * 8 + 5)
#define                                 ERR5_bit            _BIT_ACCESS(ADERRL,5)
// ADERRL<ERR6>
extern volatile __bit                   ERR6                __at(0x10CE);	// @ (0x219 * 8 + 6)
#define                                 ERR6_bit            _BIT_ACCESS(ADERRL,6)
// ADERRL<ERR7>
extern volatile __bit                   ERR7                __at(0x10CF);	// @ (0x219 * 8 + 7)
#define                                 ERR7_bit            _BIT_ACCESS(ADERRL,7)
// ADERRH<ERR8>
extern volatile __bit                   ERR8                __at(0x10D0);	// @ (0x21A * 8 + 0)
#define                                 ERR8_bit            _BIT_ACCESS(ADERRH,0)
// ADERRH<ERR9>
extern volatile __bit                   ERR9                __at(0x10D1);	// @ (0x21A * 8 + 1)
#define                                 ERR9_bit            _BIT_ACCESS(ADERRH,1)
// OSCEN<EXTOEN>
extern volatile __bit                   EXTOEN              __at(0x3F7);	// @ (0x7E * 8 + 7)
#define                                 EXTOEN_bit          _BIT_ACCESS(OSCEN,7)
// OSCSTAT<EXTOR>
extern volatile __bit                   EXTOR               __at(0x3EF);	// @ (0x7D * 8 + 7)
#define                                 EXTOR_bit           _BIT_ACCESS(OSCSTAT,7)
// I3C1CON1<FHDRE>
extern volatile __bit                   FHDRE               __at(0x422);	// @ (0x84 * 8 + 2)
#define                                 FHDRE_bit           _BIT_ACCESS(I3C1CON1,2)
// I3C1I2CCON<FLTEN>
extern volatile __bit                   FLTEN               __at(0x5A2);	// @ (0xB4 * 8 + 2)
#define                                 FLTEN_bit           _BIT_ACCESS(I3C1I2CCON,2)
// ADFLTRL<FLTR0>
extern volatile __bit                   FLTR0               __at(0x10E8);	// @ (0x21D * 8 + 0)
#define                                 FLTR0_bit           _BIT_ACCESS(ADFLTRL,0)
// ADFLTRL<FLTR1>
extern volatile __bit                   FLTR1               __at(0x10E9);	// @ (0x21D * 8 + 1)
#define                                 FLTR1_bit           _BIT_ACCESS(ADFLTRL,1)
// ADFLTRH<FLTR10>
extern volatile __bit                   FLTR10              __at(0x10F2);	// @ (0x21E * 8 + 2)
#define                                 FLTR10_bit          _BIT_ACCESS(ADFLTRH,2)
// ADFLTRH<FLTR11>
extern volatile __bit                   FLTR11              __at(0x10F3);	// @ (0x21E * 8 + 3)
#define                                 FLTR11_bit          _BIT_ACCESS(ADFLTRH,3)
// ADFLTRH<FLTR12>
extern volatile __bit                   FLTR12              __at(0x10F4);	// @ (0x21E * 8 + 4)
#define                                 FLTR12_bit          _BIT_ACCESS(ADFLTRH,4)
// ADFLTRH<FLTR13>
extern volatile __bit                   FLTR13              __at(0x10F5);	// @ (0x21E * 8 + 5)
#define                                 FLTR13_bit          _BIT_ACCESS(ADFLTRH,5)
// ADFLTRH<FLTR14>
extern volatile __bit                   FLTR14              __at(0x10F6);	// @ (0x21E * 8 + 6)
#define                                 FLTR14_bit          _BIT_ACCESS(ADFLTRH,6)
// ADFLTRH<FLTR15>
extern volatile __bit                   FLTR15              __at(0x10F7);	// @ (0x21E * 8 + 7)
#define                                 FLTR15_bit          _BIT_ACCESS(ADFLTRH,7)
// ADFLTRL<FLTR2>
extern volatile __bit                   FLTR2               __at(0x10EA);	// @ (0x21D * 8 + 2)
#define                                 FLTR2_bit           _BIT_ACCESS(ADFLTRL,2)
// ADFLTRL<FLTR3>
extern volatile __bit                   FLTR3               __at(0x10EB);	// @ (0x21D * 8 + 3)
#define                                 FLTR3_bit           _BIT_ACCESS(ADFLTRL,3)
// ADFLTRL<FLTR4>
extern volatile __bit                   FLTR4               __at(0x10EC);	// @ (0x21D * 8 + 4)
#define                                 FLTR4_bit           _BIT_ACCESS(ADFLTRL,4)
// ADFLTRL<FLTR5>
extern volatile __bit                   FLTR5               __at(0x10ED);	// @ (0x21D * 8 + 5)
#define                                 FLTR5_bit           _BIT_ACCESS(ADFLTRL,5)
// ADFLTRL<FLTR6>
extern volatile __bit                   FLTR6               __at(0x10EE);	// @ (0x21D * 8 + 6)
#define                                 FLTR6_bit           _BIT_ACCESS(ADFLTRL,6)
// ADFLTRL<FLTR7>
extern volatile __bit                   FLTR7               __at(0x10EF);	// @ (0x21D * 8 + 7)
#define                                 FLTR7_bit           _BIT_ACCESS(ADFLTRL,7)
// ADFLTRH<FLTR8>
extern volatile __bit                   FLTR8               __at(0x10F0);	// @ (0x21E * 8 + 0)
#define                                 FLTR8_bit           _BIT_ACCESS(ADFLTRH,0)
// ADFLTRH<FLTR9>
extern volatile __bit                   FLTR9               __at(0x10F1);	// @ (0x21E * 8 + 1)
#define                                 FLTR9_bit           _BIT_ACCESS(ADFLTRH,1)
// ADCON0<FM0>
extern volatile __bit                   FM0                 __at(0x117A);	// @ (0x22F * 8 + 2)
#define                                 FM0_bit             _BIT_ACCESS(ADCON0,2)
// I2C1CON3<FME0>
extern volatile __bit                   FME0                __at(0xF4A);	// @ (0x1E9 * 8 + 2)
#define                                 FME0_bit            _BIT_ACCESS(I2C1CON3,2)
// I2C1CON3<FME1>
extern volatile __bit                   FME1                __at(0xF4B);	// @ (0x1E9 * 8 + 3)
#define                                 FME1_bit            _BIT_ACCESS(I2C1CON3,3)
// OSCFRQ<FRQ0>
extern volatile __bit                   FRQ0                __at(0x400);	// @ (0x80 * 8 + 0)
#define                                 FRQ0_bit            _BIT_ACCESS(OSCFRQ,0)
// OSCFRQ<FRQ1>
extern volatile __bit                   FRQ1                __at(0x401);	// @ (0x80 * 8 + 1)
#define                                 FRQ1_bit            _BIT_ACCESS(OSCFRQ,1)
// OSCFRQ<FRQ2>
extern volatile __bit                   FRQ2                __at(0x402);	// @ (0x80 * 8 + 2)
#define                                 FRQ2_bit            _BIT_ACCESS(OSCFRQ,2)
// OSCFRQ<FRQ3>
extern volatile __bit                   FRQ3                __at(0x403);	// @ (0x80 * 8 + 3)
#define                                 FRQ3_bit            _BIT_ACCESS(OSCFRQ,3)
// FSCMCON<FSCMFEV>
extern volatile __bit                   FSCMFEV             __at(0x410);	// @ (0x82 * 8 + 0)
#define                                 FSCMFEV_bit         _BIT_ACCESS(FSCMCON,0)
// FSCMCON<FSCMFFI>
extern volatile __bit                   FSCMFFI             __at(0x411);	// @ (0x82 * 8 + 1)
#define                                 FSCMFFI_bit         _BIT_ACCESS(FSCMCON,1)
// FSCMCON<FSCMPEV>
extern volatile __bit                   FSCMPEV             __at(0x412);	// @ (0x82 * 8 + 2)
#define                                 FSCMPEV_bit         _BIT_ACCESS(FSCMCON,2)
// FSCMCON<FSCMPFI>
extern volatile __bit                   FSCMPFI             __at(0x413);	// @ (0x82 * 8 + 3)
#define                                 FSCMPFI_bit         _BIT_ACCESS(FSCMCON,3)
// FSCMCON<FSCMSEV>
extern volatile __bit                   FSCMSEV             __at(0x414);	// @ (0x82 * 8 + 4)
#define                                 FSCMSEV_bit         _BIT_ACCESS(FSCMCON,4)
// FSCMCON<FSCMSFI>
extern volatile __bit                   FSCMSFI             __at(0x415);	// @ (0x82 * 8 + 5)
#define                                 FSCMSFI_bit         _BIT_ACCESS(FSCMCON,5)
// SPI1CON1<FST>
extern volatile __bit                   FST                 __at(0xEE4);	// @ (0x1DC * 8 + 4)
#define                                 FST_bit             _BIT_ACCESS(SPI1CON1,4)
// CRCCON0<FULL>
extern volatile __bit                   FULL                __at(0x340);	// @ (0x68 * 8 + 0)
#define                                 FULL_bit            _BIT_ACCESS(CRCCON0,0)
// FVRCON<FVREN>
extern volatile __bit                   FVREN               __at(0x100F);	// @ (0x201 * 8 + 7)
#define                                 FVREN_bit           _BIT_ACCESS(FVRCON,7)
// PMD4<FVRMD>
extern volatile __bit                   FVRMD               __at(0x1821);	// @ (0x304 * 8 + 1)
#define                                 FVRMD_bit           _BIT_ACCESS(PMD4,1)
// FVRCON<FVRRDY>
extern volatile __bit                   FVRRDY              __at(0x100E);	// @ (0x201 * 8 + 6)
#define                                 FVRRDY_bit          _BIT_ACCESS(FVRCON,6)
// CLCnGLS0<G1D1N>
extern volatile __bit                   G1D1N               __at(0xD58);	// @ (0x1AB * 8 + 0)
#define                                 G1D1N_bit           _BIT_ACCESS(CLCnGLS0,0)
// CLCnGLS0<G1D1T>
extern volatile __bit                   G1D1T               __at(0xD59);	// @ (0x1AB * 8 + 1)
#define                                 G1D1T_bit           _BIT_ACCESS(CLCnGLS0,1)
// CLCnGLS0<G1D2N>
extern volatile __bit                   G1D2N               __at(0xD5A);	// @ (0x1AB * 8 + 2)
#define                                 G1D2N_bit           _BIT_ACCESS(CLCnGLS0,2)
// CLCnGLS0<G1D2T>
extern volatile __bit                   G1D2T               __at(0xD5B);	// @ (0x1AB * 8 + 3)
#define                                 G1D2T_bit           _BIT_ACCESS(CLCnGLS0,3)
// CLCnGLS0<G1D3N>
extern volatile __bit                   G1D3N               __at(0xD5C);	// @ (0x1AB * 8 + 4)
#define                                 G1D3N_bit           _BIT_ACCESS(CLCnGLS0,4)
// CLCnGLS0<G1D3T>
extern volatile __bit                   G1D3T               __at(0xD5D);	// @ (0x1AB * 8 + 5)
#define                                 G1D3T_bit           _BIT_ACCESS(CLCnGLS0,5)
// CLCnGLS0<G1D4N>
extern volatile __bit                   G1D4N               __at(0xD5E);	// @ (0x1AB * 8 + 6)
#define                                 G1D4N_bit           _BIT_ACCESS(CLCnGLS0,6)
// CLCnGLS0<G1D4T>
extern volatile __bit                   G1D4T               __at(0xD5F);	// @ (0x1AB * 8 + 7)
#define                                 G1D4T_bit           _BIT_ACCESS(CLCnGLS0,7)
// CWG1CON0<G1EN>
extern volatile __bit                   G1EN                __at(0xCEF);	// @ (0x19D * 8 + 7)
#define                                 G1EN_bit            _BIT_ACCESS(CWG1CON0,7)
// CLCnPOL<G1POL>
extern volatile __bit                   G1POL               __at(0xD30);	// @ (0x1A6 * 8 + 0)
#define                                 G1POL_bit           _BIT_ACCESS(CLCnPOL,0)
// CLCnGLS1<G2D1N>
extern volatile __bit                   G2D1N               __at(0xD60);	// @ (0x1AC * 8 + 0)
#define                                 G2D1N_bit           _BIT_ACCESS(CLCnGLS1,0)
// CLCnGLS1<G2D1T>
extern volatile __bit                   G2D1T               __at(0xD61);	// @ (0x1AC * 8 + 1)
#define                                 G2D1T_bit           _BIT_ACCESS(CLCnGLS1,1)
// CLCnGLS1<G2D2N>
extern volatile __bit                   G2D2N               __at(0xD62);	// @ (0x1AC * 8 + 2)
#define                                 G2D2N_bit           _BIT_ACCESS(CLCnGLS1,2)
// CLCnGLS1<G2D2T>
extern volatile __bit                   G2D2T               __at(0xD63);	// @ (0x1AC * 8 + 3)
#define                                 G2D2T_bit           _BIT_ACCESS(CLCnGLS1,3)
// CLCnGLS1<G2D3N>
extern volatile __bit                   G2D3N               __at(0xD64);	// @ (0x1AC * 8 + 4)
#define                                 G2D3N_bit           _BIT_ACCESS(CLCnGLS1,4)
// CLCnGLS1<G2D3T>
extern volatile __bit                   G2D3T               __at(0xD65);	// @ (0x1AC * 8 + 5)
#define                                 G2D3T_bit           _BIT_ACCESS(CLCnGLS1,5)
// CLCnGLS1<G2D4N>
extern volatile __bit                   G2D4N               __at(0xD66);	// @ (0x1AC * 8 + 6)
#define                                 G2D4N_bit           _BIT_ACCESS(CLCnGLS1,6)
// CLCnGLS1<G2D4T>
extern volatile __bit                   G2D4T               __at(0xD67);	// @ (0x1AC * 8 + 7)
#define                                 G2D4T_bit           _BIT_ACCESS(CLCnGLS1,7)
// CLCnPOL<G2POL>
extern volatile __bit                   G2POL               __at(0xD31);	// @ (0x1A6 * 8 + 1)
#define                                 G2POL_bit           _BIT_ACCESS(CLCnPOL,1)
// CLCnGLS2<G3D1N>
extern volatile __bit                   G3D1N               __at(0xD68);	// @ (0x1AD * 8 + 0)
#define                                 G3D1N_bit           _BIT_ACCESS(CLCnGLS2,0)
// CLCnGLS2<G3D1T>
extern volatile __bit                   G3D1T               __at(0xD69);	// @ (0x1AD * 8 + 1)
#define                                 G3D1T_bit           _BIT_ACCESS(CLCnGLS2,1)
// CLCnGLS2<G3D2N>
extern volatile __bit                   G3D2N               __at(0xD6A);	// @ (0x1AD * 8 + 2)
#define                                 G3D2N_bit           _BIT_ACCESS(CLCnGLS2,2)
// CLCnGLS2<G3D2T>
extern volatile __bit                   G3D2T               __at(0xD6B);	// @ (0x1AD * 8 + 3)
#define                                 G3D2T_bit           _BIT_ACCESS(CLCnGLS2,3)
// CLCnGLS2<G3D3N>
extern volatile __bit                   G3D3N               __at(0xD6C);	// @ (0x1AD * 8 + 4)
#define                                 G3D3N_bit           _BIT_ACCESS(CLCnGLS2,4)
// CLCnGLS2<G3D3T>
extern volatile __bit                   G3D3T               __at(0xD6D);	// @ (0x1AD * 8 + 5)
#define                                 G3D3T_bit           _BIT_ACCESS(CLCnGLS2,5)
// CLCnGLS2<G3D4N>
extern volatile __bit                   G3D4N               __at(0xD6E);	// @ (0x1AD * 8 + 6)
#define                                 G3D4N_bit           _BIT_ACCESS(CLCnGLS2,6)
// CLCnGLS2<G3D4T>
extern volatile __bit                   G3D4T               __at(0xD6F);	// @ (0x1AD * 8 + 7)
#define                                 G3D4T_bit           _BIT_ACCESS(CLCnGLS2,7)
// CLCnPOL<G3POL>
extern volatile __bit                   G3POL               __at(0xD32);	// @ (0x1A6 * 8 + 2)
#define                                 G3POL_bit           _BIT_ACCESS(CLCnPOL,2)
// CLCnGLS3<G4D1N>
extern volatile __bit                   G4D1N               __at(0xD70);	// @ (0x1AE * 8 + 0)
#define                                 G4D1N_bit           _BIT_ACCESS(CLCnGLS3,0)
// CLCnGLS3<G4D1T>
extern volatile __bit                   G4D1T               __at(0xD71);	// @ (0x1AE * 8 + 1)
#define                                 G4D1T_bit           _BIT_ACCESS(CLCnGLS3,1)
// CLCnGLS3<G4D2N>
extern volatile __bit                   G4D2N               __at(0xD72);	// @ (0x1AE * 8 + 2)
#define                                 G4D2N_bit           _BIT_ACCESS(CLCnGLS3,2)
// CLCnGLS3<G4D2T>
extern volatile __bit                   G4D2T               __at(0xD73);	// @ (0x1AE * 8 + 3)
#define                                 G4D2T_bit           _BIT_ACCESS(CLCnGLS3,3)
// CLCnGLS3<G4D3N>
extern volatile __bit                   G4D3N               __at(0xD74);	// @ (0x1AE * 8 + 4)
#define                                 G4D3N_bit           _BIT_ACCESS(CLCnGLS3,4)
// CLCnGLS3<G4D3T>
extern volatile __bit                   G4D3T               __at(0xD75);	// @ (0x1AE * 8 + 5)
#define                                 G4D3T_bit           _BIT_ACCESS(CLCnGLS3,5)
// CLCnGLS3<G4D4N>
extern volatile __bit                   G4D4N               __at(0xD76);	// @ (0x1AE * 8 + 6)
#define                                 G4D4N_bit           _BIT_ACCESS(CLCnGLS3,6)
// CLCnGLS3<G4D4T>
extern volatile __bit                   G4D4T               __at(0xD77);	// @ (0x1AE * 8 + 7)
#define                                 G4D4T_bit           _BIT_ACCESS(CLCnGLS3,7)
// CLCnPOL<G4POL>
extern volatile __bit                   G4POL               __at(0xD33);	// @ (0x1A6 * 8 + 3)
#define                                 G4POL_bit           _BIT_ACCESS(CLCnPOL,3)
// I2C1CON2<GCEN>
extern volatile __bit                   GCEN                __at(0xF46);	// @ (0x1E8 * 8 + 6)
#define                                 GCEN_bit            _BIT_ACCESS(I2C1CON2,6)
// T1GCON<GE>
extern volatile __bit                   GE                  __at(0x857);	// @ (0x10A * 8 + 7)
#define                                 GE_bit              _BIT_ACCESS(T1GCON,7)
// T1GCON<GGO>
extern volatile __bit                   GGO                 __at(0x853);	// @ (0x10A * 8 + 3)
#define                                 GGO_bit             _BIT_ACCESS(T1GCON,3)
// T1GCON<GGO_NOT_DONE>
extern volatile __bit                   GGO_NOT_DONE        __at(0x853);	// @ (0x10A * 8 + 3)
#define                                 GGO_NOT_DONE_bit    _BIT_ACCESS(T1GCON,3)
// T1GCON<GGO_nDONE>
extern volatile __bit                   GGO_nDONE           __at(0x853);	// @ (0x10A * 8 + 3)
#define                                 GGO_nDONE_bit       _BIT_ACCESS(T1GCON,3)
// INTCON0<GIE>
extern volatile __bit                   GIE                 __at(0x230F);	// @ (0x461 * 8 + 7)
#define                                 GIE_bit             _BIT_ACCESS(INTCON0,7)
// INTCON0<GIEH>
extern volatile __bit                   GIEH                __at(0x230F);	// @ (0x461 * 8 + 7)
#define                                 GIEH_bit            _BIT_ACCESS(INTCON0,7)
// INTCON0<GIEL>
extern volatile __bit                   GIEL                __at(0x230E);	// @ (0x461 * 8 + 6)
#define                                 GIEL_bit            _BIT_ACCESS(INTCON0,6)
// ADCON0<GO_NOT_DONE>
extern volatile __bit                   GO_NOT_DONE         __at(0x1178);	// @ (0x22F * 8 + 0)
#define                                 GO_NOT_DONE_bit     _BIT_ACCESS(ADCON0,0)
// ADCON0<GO_nDONE>
extern volatile __bit                   GO_nDONE            __at(0x1178);	// @ (0x22F * 8 + 0)
#define                                 GO_nDONE_bit        _BIT_ACCESS(ADCON0,0)
// T1GCON<GSPM>
extern volatile __bit                   GSPM                __at(0x854);	// @ (0x10A * 8 + 4)
#define                                 GSPM_bit            _BIT_ACCESS(T1GCON,4)
// T1GATE<GSS0>
extern volatile __bit                   GSS0                __at(0x858);	// @ (0x10B * 8 + 0)
#define                                 GSS0_bit            _BIT_ACCESS(T1GATE,0)
// T1GATE<GSS1>
extern volatile __bit                   GSS1                __at(0x859);	// @ (0x10B * 8 + 1)
#define                                 GSS1_bit            _BIT_ACCESS(T1GATE,1)
// T1GATE<GSS2>
extern volatile __bit                   GSS2                __at(0x85A);	// @ (0x10B * 8 + 2)
#define                                 GSS2_bit            _BIT_ACCESS(T1GATE,2)
// T1GATE<GSS3>
extern volatile __bit                   GSS3                __at(0x85B);	// @ (0x10B * 8 + 3)
#define                                 GSS3_bit            _BIT_ACCESS(T1GATE,3)
// T1GCON<GTM>
extern volatile __bit                   GTM                 __at(0x855);	// @ (0x10A * 8 + 5)
#define                                 GTM_bit             _BIT_ACCESS(T1GCON,5)
// T1GCON<GVAL>
extern volatile __bit                   GVAL                __at(0x852);	// @ (0x10A * 8 + 2)
#define                                 GVAL_bit            _BIT_ACCESS(T1GCON,2)
// SCANHADRL<HADR0>
extern volatile __bit                   HADR0               __at(0x370);	// @ (0x6E * 8 + 0)
#define                                 HADR0_bit           _BIT_ACCESS(SCANHADRL,0)
// SCANHADRL<HADR1>
extern volatile __bit                   HADR1               __at(0x371);	// @ (0x6E * 8 + 1)
#define                                 HADR1_bit           _BIT_ACCESS(SCANHADRL,1)
// SCANHADRH<HADR10>
extern volatile __bit                   HADR10              __at(0x37A);	// @ (0x6F * 8 + 2)
#define                                 HADR10_bit          _BIT_ACCESS(SCANHADRH,2)
// SCANHADRH<HADR11>
extern volatile __bit                   HADR11              __at(0x37B);	// @ (0x6F * 8 + 3)
#define                                 HADR11_bit          _BIT_ACCESS(SCANHADRH,3)
// SCANHADRH<HADR12>
extern volatile __bit                   HADR12              __at(0x37C);	// @ (0x6F * 8 + 4)
#define                                 HADR12_bit          _BIT_ACCESS(SCANHADRH,4)
// SCANHADRH<HADR13>
extern volatile __bit                   HADR13              __at(0x37D);	// @ (0x6F * 8 + 5)
#define                                 HADR13_bit          _BIT_ACCESS(SCANHADRH,5)
// SCANHADRH<HADR14>
extern volatile __bit                   HADR14              __at(0x37E);	// @ (0x6F * 8 + 6)
#define                                 HADR14_bit          _BIT_ACCESS(SCANHADRH,6)
// SCANHADRH<HADR15>
extern volatile __bit                   HADR15              __at(0x37F);	// @ (0x6F * 8 + 7)
#define                                 HADR15_bit          _BIT_ACCESS(SCANHADRH,7)
// SCANHADRU<HADR16>
extern volatile __bit                   HADR16              __at(0x380);	// @ (0x70 * 8 + 0)
#define                                 HADR16_bit          _BIT_ACCESS(SCANHADRU,0)
// SCANHADRU<HADR17>
extern volatile __bit                   HADR17              __at(0x381);	// @ (0x70 * 8 + 1)
#define                                 HADR17_bit          _BIT_ACCESS(SCANHADRU,1)
// SCANHADRU<HADR18>
extern volatile __bit                   HADR18              __at(0x382);	// @ (0x70 * 8 + 2)
#define                                 HADR18_bit          _BIT_ACCESS(SCANHADRU,2)
// SCANHADRU<HADR19>
extern volatile __bit                   HADR19              __at(0x383);	// @ (0x70 * 8 + 3)
#define                                 HADR19_bit          _BIT_ACCESS(SCANHADRU,3)
// SCANHADRL<HADR2>
extern volatile __bit                   HADR2               __at(0x372);	// @ (0x6E * 8 + 2)
#define                                 HADR2_bit           _BIT_ACCESS(SCANHADRL,2)
// SCANHADRU<HADR20>
extern volatile __bit                   HADR20              __at(0x384);	// @ (0x70 * 8 + 4)
#define                                 HADR20_bit          _BIT_ACCESS(SCANHADRU,4)
// SCANHADRU<HADR21>
extern volatile __bit                   HADR21              __at(0x385);	// @ (0x70 * 8 + 5)
#define                                 HADR21_bit          _BIT_ACCESS(SCANHADRU,5)
// SCANHADRL<HADR3>
extern volatile __bit                   HADR3               __at(0x373);	// @ (0x6E * 8 + 3)
#define                                 HADR3_bit           _BIT_ACCESS(SCANHADRL,3)
// SCANHADRL<HADR4>
extern volatile __bit                   HADR4               __at(0x374);	// @ (0x6E * 8 + 4)
#define                                 HADR4_bit           _BIT_ACCESS(SCANHADRL,4)
// SCANHADRL<HADR5>
extern volatile __bit                   HADR5               __at(0x375);	// @ (0x6E * 8 + 5)
#define                                 HADR5_bit           _BIT_ACCESS(SCANHADRL,5)
// SCANHADRL<HADR6>
extern volatile __bit                   HADR6               __at(0x376);	// @ (0x6E * 8 + 6)
#define                                 HADR6_bit           _BIT_ACCESS(SCANHADRL,6)
// SCANHADRL<HADR7>
extern volatile __bit                   HADR7               __at(0x377);	// @ (0x6E * 8 + 7)
#define                                 HADR7_bit           _BIT_ACCESS(SCANHADRL,7)
// SCANHADRH<HADR8>
extern volatile __bit                   HADR8               __at(0x378);	// @ (0x6F * 8 + 0)
#define                                 HADR8_bit           _BIT_ACCESS(SCANHADRH,0)
// SCANHADRH<HADR9>
extern volatile __bit                   HADR9               __at(0x379);	// @ (0x6F * 8 + 1)
#define                                 HADR9_bit           _BIT_ACCESS(SCANHADRH,1)
// I3C1FEAT<HDRCAP>
extern volatile __bit                   HDRCAP              __at(0x4C9);	// @ (0x99 * 8 + 1)
#define                                 HDRCAP_bit          _BIT_ACCESS(I3C1FEAT,1)
// OSCEN<HFOEN>
extern volatile __bit                   HFOEN               __at(0x3F6);	// @ (0x7E * 8 + 6)
#define                                 HFOEN_bit           _BIT_ACCESS(OSCEN,6)
// OSCSTAT<HFOR>
extern volatile __bit                   HFOR                __at(0x3EE);	// @ (0x7D * 8 + 6)
#define                                 HFOR_bit            _BIT_ACCESS(OSCSTAT,6)
// I3C1FEAT<HJCAP>
extern volatile __bit                   HJCAP               __at(0x4C8);	// @ (0x99 * 8 + 0)
#define                                 HJCAP_bit           _BIT_ACCESS(I3C1FEAT,0)
// I3C1ERRIE0<HJEIE>
extern volatile __bit                   HJEIE               __at(0x484);	// @ (0x90 * 8 + 4)
#define                                 HJEIE_bit           _BIT_ACCESS(I3C1ERRIE0,4)
// I3C1ERRIR0<HJEIF>
extern volatile __bit                   HJEIF               __at(0x464);	// @ (0x8C * 8 + 4)
#define                                 HJEIF_bit           _BIT_ACCESS(I3C1ERRIR0,4)
// I3C1EC<HJEN>
extern volatile __bit                   HJEN                __at(0x4E3);	// @ (0x9C * 8 + 3)
#define                                 HJEN_bit            _BIT_ACCESS(I3C1EC,3)
// I3C1CON0<HJREQ>
extern volatile __bit                   HJREQ               __at(0x419);	// @ (0x83 * 8 + 1)
#define                                 HJREQ_bit           _BIT_ACCESS(I3C1CON0,1)
// HLVDCON0<HLVDEN>
extern volatile __bit                   HLVDEN              __at(0x1017);	// @ (0x202 * 8 + 7)
#define                                 HLVDEN_bit          _BIT_ACCESS(HLVDCON0,7)
// PIE9<HLVDIE>
extern volatile __bit                   HLVDIE              __at(0x23E5);	// @ (0x47C * 8 + 5)
#define                                 HLVDIE_bit          _BIT_ACCESS(PIE9,5)
// PIR9<HLVDIF>
extern volatile __bit                   HLVDIF              __at(0x2395);	// @ (0x472 * 8 + 5)
#define                                 HLVDIF_bit          _BIT_ACCESS(PIR9,5)
// HLVDCON0<HLVDINTH>
extern volatile __bit                   HLVDINTH            __at(0x1011);	// @ (0x202 * 8 + 1)
#define                                 HLVDINTH_bit        _BIT_ACCESS(HLVDCON0,1)
// HLVDCON0<HLVDINTL>
extern volatile __bit                   HLVDINTL            __at(0x1010);	// @ (0x202 * 8 + 0)
#define                                 HLVDINTL_bit        _BIT_ACCESS(HLVDCON0,0)
// IPR9<HLVDIP>
extern volatile __bit                   HLVDIP              __at(0x2435);	// @ (0x486 * 8 + 5)
#define                                 HLVDIP_bit          _BIT_ACCESS(IPR9,5)
// PMD4<HLVDMD>
extern volatile __bit                   HLVDMD              __at(0x1822);	// @ (0x304 * 8 + 2)
#define                                 HLVDMD_bit          _BIT_ACCESS(PMD4,2)
// HLVDCON0<HLVDOUT>
extern volatile __bit                   HLVDOUT             __at(0x1015);	// @ (0x202 * 8 + 5)
#define                                 HLVDOUT_bit         _BIT_ACCESS(HLVDCON0,5)
// HLVDCON0<HLVDRDY>
extern volatile __bit                   HLVDRDY             __at(0x1014);	// @ (0x202 * 8 + 4)
#define                                 HLVDRDY_bit         _BIT_ACCESS(HLVDCON0,4)
// HLVDCON1<HLVDSEL0>
extern volatile __bit                   HLVDSEL0            __at(0x1018);	// @ (0x203 * 8 + 0)
#define                                 HLVDSEL0_bit        _BIT_ACCESS(HLVDCON1,0)
// HLVDCON1<HLVDSEL1>
extern volatile __bit                   HLVDSEL1            __at(0x1019);	// @ (0x203 * 8 + 1)
#define                                 HLVDSEL1_bit        _BIT_ACCESS(HLVDCON1,1)
// HLVDCON1<HLVDSEL2>
extern volatile __bit                   HLVDSEL2            __at(0x101A);	// @ (0x203 * 8 + 2)
#define                                 HLVDSEL2_bit        _BIT_ACCESS(HLVDCON1,2)
// HLVDCON1<HLVDSEL3>
extern volatile __bit                   HLVDSEL3            __at(0x101B);	// @ (0x203 * 8 + 3)
#define                                 HLVDSEL3_bit        _BIT_ACCESS(HLVDCON1,3)
// I2C1CNTL<I2C1CNT0>
extern volatile __bit                   I2C1CNT0            __at(0xF68);	// @ (0x1ED * 8 + 0)
#define                                 I2C1CNT0_bit        _BIT_ACCESS(I2C1CNTL,0)
// I2C1CNTL<I2C1CNT1>
extern volatile __bit                   I2C1CNT1            __at(0xF69);	// @ (0x1ED * 8 + 1)
#define                                 I2C1CNT1_bit        _BIT_ACCESS(I2C1CNTL,1)
// I2C1CNTH<I2C1CNT10>
extern volatile __bit                   I2C1CNT10           __at(0xF72);	// @ (0x1EE * 8 + 2)
#define                                 I2C1CNT10_bit       _BIT_ACCESS(I2C1CNTH,2)
// I2C1CNTH<I2C1CNT11>
extern volatile __bit                   I2C1CNT11           __at(0xF73);	// @ (0x1EE * 8 + 3)
#define                                 I2C1CNT11_bit       _BIT_ACCESS(I2C1CNTH,3)
// I2C1CNTH<I2C1CNT12>
extern volatile __bit                   I2C1CNT12           __at(0xF74);	// @ (0x1EE * 8 + 4)
#define                                 I2C1CNT12_bit       _BIT_ACCESS(I2C1CNTH,4)
// I2C1CNTH<I2C1CNT13>
extern volatile __bit                   I2C1CNT13           __at(0xF75);	// @ (0x1EE * 8 + 5)
#define                                 I2C1CNT13_bit       _BIT_ACCESS(I2C1CNTH,5)
// I2C1CNTH<I2C1CNT14>
extern volatile __bit                   I2C1CNT14           __at(0xF76);	// @ (0x1EE * 8 + 6)
#define                                 I2C1CNT14_bit       _BIT_ACCESS(I2C1CNTH,6)
// I2C1CNTH<I2C1CNT15>
extern volatile __bit                   I2C1CNT15           __at(0xF77);	// @ (0x1EE * 8 + 7)
#define                                 I2C1CNT15_bit       _BIT_ACCESS(I2C1CNTH,7)
// I2C1CNTL<I2C1CNT2>
extern volatile __bit                   I2C1CNT2            __at(0xF6A);	// @ (0x1ED * 8 + 2)
#define                                 I2C1CNT2_bit        _BIT_ACCESS(I2C1CNTL,2)
// I2C1CNTL<I2C1CNT3>
extern volatile __bit                   I2C1CNT3            __at(0xF6B);	// @ (0x1ED * 8 + 3)
#define                                 I2C1CNT3_bit        _BIT_ACCESS(I2C1CNTL,3)
// I2C1CNTL<I2C1CNT4>
extern volatile __bit                   I2C1CNT4            __at(0xF6C);	// @ (0x1ED * 8 + 4)
#define                                 I2C1CNT4_bit        _BIT_ACCESS(I2C1CNTL,4)
// I2C1CNTL<I2C1CNT5>
extern volatile __bit                   I2C1CNT5            __at(0xF6D);	// @ (0x1ED * 8 + 5)
#define                                 I2C1CNT5_bit        _BIT_ACCESS(I2C1CNTL,5)
// I2C1CNTL<I2C1CNT6>
extern volatile __bit                   I2C1CNT6            __at(0xF6E);	// @ (0x1ED * 8 + 6)
#define                                 I2C1CNT6_bit        _BIT_ACCESS(I2C1CNTL,6)
// I2C1CNTL<I2C1CNT7>
extern volatile __bit                   I2C1CNT7            __at(0xF6F);	// @ (0x1ED * 8 + 7)
#define                                 I2C1CNT7_bit        _BIT_ACCESS(I2C1CNTL,7)
// I2C1CNTH<I2C1CNT8>
extern volatile __bit                   I2C1CNT8            __at(0xF70);	// @ (0x1EE * 8 + 0)
#define                                 I2C1CNT8_bit        _BIT_ACCESS(I2C1CNTH,0)
// I2C1CNTH<I2C1CNT9>
extern volatile __bit                   I2C1CNT9            __at(0xF71);	// @ (0x1EE * 8 + 1)
#define                                 I2C1CNT9_bit        _BIT_ACCESS(I2C1CNTH,1)
// PIE7<I2C1EIE>
extern volatile __bit                   I2C1EIE             __at(0x23D6);	// @ (0x47A * 8 + 6)
#define                                 I2C1EIE_bit         _BIT_ACCESS(PIE7,6)
// PIR7<I2C1EIF>
extern volatile __bit                   I2C1EIF             __at(0x2386);	// @ (0x470 * 8 + 6)
#define                                 I2C1EIF_bit         _BIT_ACCESS(PIR7,6)
// IPR7<I2C1EIP>
extern volatile __bit                   I2C1EIP             __at(0x2426);	// @ (0x484 * 8 + 6)
#define                                 I2C1EIP_bit         _BIT_ACCESS(IPR7,6)
// PIE7<I2C1IE>
extern volatile __bit                   I2C1IE              __at(0x23D5);	// @ (0x47A * 8 + 5)
#define                                 I2C1IE_bit          _BIT_ACCESS(PIE7,5)
// PIR7<I2C1IF>
extern volatile __bit                   I2C1IF              __at(0x2385);	// @ (0x470 * 8 + 5)
#define                                 I2C1IF_bit          _BIT_ACCESS(PIR7,5)
// IPR7<I2C1IP>
extern volatile __bit                   I2C1IP              __at(0x2425);	// @ (0x484 * 8 + 5)
#define                                 I2C1IP_bit          _BIT_ACCESS(IPR7,5)
// PMD3<I2C1MD>
extern volatile __bit                   I2C1MD              __at(0x181E);	// @ (0x303 * 8 + 6)
#define                                 I2C1MD_bit          _BIT_ACCESS(PMD3,6)
// PIE7<I2C1RXIE>
extern volatile __bit                   I2C1RXIE            __at(0x23D3);	// @ (0x47A * 8 + 3)
#define                                 I2C1RXIE_bit        _BIT_ACCESS(PIE7,3)
// PIR7<I2C1RXIF>
extern volatile __bit                   I2C1RXIF            __at(0x2383);	// @ (0x470 * 8 + 3)
#define                                 I2C1RXIF_bit        _BIT_ACCESS(PIR7,3)
// IPR7<I2C1RXIP>
extern volatile __bit                   I2C1RXIP            __at(0x2423);	// @ (0x484 * 8 + 3)
#define                                 I2C1RXIP_bit        _BIT_ACCESS(IPR7,3)
// I2C1SCLPPS<I2C1SCLPPS0>
extern volatile __bit                   I2C1SCLPPS0         __at(0x1D68);	// @ (0x3AD * 8 + 0)
#define                                 I2C1SCLPPS0_bit     _BIT_ACCESS(I2C1SCLPPS,0)
// I2C1SCLPPS<I2C1SCLPPS1>
extern volatile __bit                   I2C1SCLPPS1         __at(0x1D69);	// @ (0x3AD * 8 + 1)
#define                                 I2C1SCLPPS1_bit     _BIT_ACCESS(I2C1SCLPPS,1)
// I2C1SCLPPS<I2C1SCLPPS2>
extern volatile __bit                   I2C1SCLPPS2         __at(0x1D6A);	// @ (0x3AD * 8 + 2)
#define                                 I2C1SCLPPS2_bit     _BIT_ACCESS(I2C1SCLPPS,2)
// I2C1SCLPPS<I2C1SCLPPS3>
extern volatile __bit                   I2C1SCLPPS3         __at(0x1D6B);	// @ (0x3AD * 8 + 3)
#define                                 I2C1SCLPPS3_bit     _BIT_ACCESS(I2C1SCLPPS,3)
// I2C1SCLPPS<I2C1SCLPPS4>
extern volatile __bit                   I2C1SCLPPS4         __at(0x1D6C);	// @ (0x3AD * 8 + 4)
#define                                 I2C1SCLPPS4_bit     _BIT_ACCESS(I2C1SCLPPS,4)
// I2C1SDAPPS<I2C1SDAPPS0>
extern volatile __bit                   I2C1SDAPPS0         __at(0x1D70);	// @ (0x3AE * 8 + 0)
#define                                 I2C1SDAPPS0_bit     _BIT_ACCESS(I2C1SDAPPS,0)
// I2C1SDAPPS<I2C1SDAPPS1>
extern volatile __bit                   I2C1SDAPPS1         __at(0x1D71);	// @ (0x3AE * 8 + 1)
#define                                 I2C1SDAPPS1_bit     _BIT_ACCESS(I2C1SDAPPS,1)
// I2C1SDAPPS<I2C1SDAPPS2>
extern volatile __bit                   I2C1SDAPPS2         __at(0x1D72);	// @ (0x3AE * 8 + 2)
#define                                 I2C1SDAPPS2_bit     _BIT_ACCESS(I2C1SDAPPS,2)
// I2C1SDAPPS<I2C1SDAPPS3>
extern volatile __bit                   I2C1SDAPPS3         __at(0x1D73);	// @ (0x3AE * 8 + 3)
#define                                 I2C1SDAPPS3_bit     _BIT_ACCESS(I2C1SDAPPS,3)
// I2C1SDAPPS<I2C1SDAPPS4>
extern volatile __bit                   I2C1SDAPPS4         __at(0x1D74);	// @ (0x3AE * 8 + 4)
#define                                 I2C1SDAPPS4_bit     _BIT_ACCESS(I2C1SDAPPS,4)
// PIE7<I2C1TXIE>
extern volatile __bit                   I2C1TXIE            __at(0x23D4);	// @ (0x47A * 8 + 4)
#define                                 I2C1TXIE_bit        _BIT_ACCESS(PIE7,4)
// PIR7<I2C1TXIF>
extern volatile __bit                   I2C1TXIF            __at(0x2384);	// @ (0x470 * 8 + 4)
#define                                 I2C1TXIF_bit        _BIT_ACCESS(PIR7,4)
// IPR7<I2C1TXIP>
extern volatile __bit                   I2C1TXIP            __at(0x2424);	// @ (0x484 * 8 + 4)
#define                                 I2C1TXIP_bit        _BIT_ACCESS(IPR7,4)
// I3C1PIE0<I2CACKIE>
extern volatile __bit                   I2CACKIE            __at(0x474);	// @ (0x8E * 8 + 4)
#define                                 I2CACKIE_bit        _BIT_ACCESS(I3C1PIE0,4)
// I3C1PIR0<I2CACKIF>
extern volatile __bit                   I2CACKIF            __at(0x454);	// @ (0x8A * 8 + 4)
#define                                 I2CACKIF_bit        _BIT_ACCESS(I3C1PIR0,4)
// I2C1BTOC<I2CBTOC0>
extern volatile __bit                   I2CBTOC0            __at(0xFD0);	// @ (0x1FA * 8 + 0)
#define                                 I2CBTOC0_bit        _BIT_ACCESS(I2C1BTOC,0)
// I2C1BTOC<I2CBTOC1>
extern volatile __bit                   I2CBTOC1            __at(0xFD1);	// @ (0x1FA * 8 + 1)
#define                                 I2CBTOC1_bit        _BIT_ACCESS(I2C1BTOC,1)
// I2C1BTOC<I2CBTOC2>
extern volatile __bit                   I2CBTOC2            __at(0xFD2);	// @ (0x1FA * 8 + 2)
#define                                 I2CBTOC2_bit        _BIT_ACCESS(I2C1BTOC,2)
// I2C1CLK<I2CCLK0>
extern volatile __bit                   I2CCLK0             __at(0xFC8);	// @ (0x1F9 * 8 + 0)
#define                                 I2CCLK0_bit         _BIT_ACCESS(I2C1CLK,0)
// I2C1CLK<I2CCLK1>
extern volatile __bit                   I2CCLK1             __at(0xFC9);	// @ (0x1F9 * 8 + 1)
#define                                 I2CCLK1_bit         _BIT_ACCESS(I2C1CLK,1)
// I2C1CLK<I2CCLK2>
extern volatile __bit                   I2CCLK2             __at(0xFCA);	// @ (0x1F9 * 8 + 2)
#define                                 I2CCLK2_bit         _BIT_ACCESS(I2C1CLK,2)
// I2C1CLK<I2CCLK3>
extern volatile __bit                   I2CCLK3             __at(0xFCB);	// @ (0x1F9 * 8 + 3)
#define                                 I2CCLK3_bit         _BIT_ACCESS(I2C1CLK,3)
// I2C1CON0<I2CEN>
extern volatile __bit                   I2CEN               __at(0xF37);	// @ (0x1E6 * 8 + 7)
#define                                 I2CEN_bit           _BIT_ACCESS(I2C1CON0,7)
// I3C1ERRIE0<I2CNACKIE>
extern volatile __bit                   I2CNACKIE           __at(0x487);	// @ (0x90 * 8 + 7)
#define                                 I2CNACKIE_bit       _BIT_ACCESS(I3C1ERRIE0,7)
// I3C1ERRIR0<I2CNACKIF>
extern volatile __bit                   I2CNACKIF           __at(0x467);	// @ (0x8C * 8 + 7)
#define                                 I2CNACKIF_bit       _BIT_ACCESS(I3C1ERRIR0,7)
// PIE8<I3C1EIE>
extern volatile __bit                   I3C1EIE             __at(0x23DB);	// @ (0x47B * 8 + 3)
#define                                 I3C1EIE_bit         _BIT_ACCESS(PIE8,3)
// PIR8<I3C1EIF>
extern volatile __bit                   I3C1EIF             __at(0x238B);	// @ (0x471 * 8 + 3)
#define                                 I3C1EIF_bit         _BIT_ACCESS(PIR8,3)
// IPR8<I3C1EIP>
extern volatile __bit                   I3C1EIP             __at(0x242B);	// @ (0x485 * 8 + 3)
#define                                 I3C1EIP_bit         _BIT_ACCESS(IPR8,3)
// PIE8<I3C1IE>
extern volatile __bit                   I3C1IE              __at(0x23DA);	// @ (0x47B * 8 + 2)
#define                                 I3C1IE_bit          _BIT_ACCESS(PIE8,2)
// PIR8<I3C1IF>
extern volatile __bit                   I3C1IF              __at(0x238A);	// @ (0x471 * 8 + 2)
#define                                 I3C1IF_bit          _BIT_ACCESS(PIR8,2)
// IPR8<I3C1IP>
extern volatile __bit                   I3C1IP              __at(0x242A);	// @ (0x485 * 8 + 2)
#define                                 I3C1IP_bit          _BIT_ACCESS(IPR8,2)
// PMD3<I3C1MD>
extern volatile __bit                   I3C1MD              __at(0x181F);	// @ (0x303 * 8 + 7)
#define                                 I3C1MD_bit          _BIT_ACCESS(PMD3,7)
// PIE8<I3C1RIE>
extern volatile __bit                   I3C1RIE             __at(0x23DC);	// @ (0x47B * 8 + 4)
#define                                 I3C1RIE_bit         _BIT_ACCESS(PIE8,4)
// PIR8<I3C1RIF>
extern volatile __bit                   I3C1RIF             __at(0x238C);	// @ (0x471 * 8 + 4)
#define                                 I3C1RIF_bit         _BIT_ACCESS(PIR8,4)
// IPR8<I3C1RIP>
extern volatile __bit                   I3C1RIP             __at(0x242C);	// @ (0x485 * 8 + 4)
#define                                 I3C1RIP_bit         _BIT_ACCESS(IPR8,4)
// PIE8<I3C1RXIE>
extern volatile __bit                   I3C1RXIE            __at(0x23D8);	// @ (0x47B * 8 + 0)
#define                                 I3C1RXIE_bit        _BIT_ACCESS(PIE8,0)
// PIR8<I3C1RXIF>
extern volatile __bit                   I3C1RXIF            __at(0x2388);	// @ (0x471 * 8 + 0)
#define                                 I3C1RXIF_bit        _BIT_ACCESS(PIR8,0)
// IPR8<I3C1RXIP>
extern volatile __bit                   I3C1RXIP            __at(0x2428);	// @ (0x485 * 8 + 0)
#define                                 I3C1RXIP_bit        _BIT_ACCESS(IPR8,0)
// PIE8<I3C1TXIE>
extern volatile __bit                   I3C1TXIE            __at(0x23D9);	// @ (0x47B * 8 + 1)
#define                                 I3C1TXIE_bit        _BIT_ACCESS(PIE8,1)
// PIR8<I3C1TXIF>
extern volatile __bit                   I3C1TXIF            __at(0x2389);	// @ (0x471 * 8 + 1)
#define                                 I3C1TXIF_bit        _BIT_ACCESS(PIR8,1)
// IPR8<I3C1TXIP>
extern volatile __bit                   I3C1TXIP            __at(0x2429);	// @ (0x485 * 8 + 1)
#define                                 I3C1TXIP_bit        _BIT_ACCESS(IPR8,1)
// I3C1PIE1<IBIDONEIE>
extern volatile __bit                   IBIDONEIE           __at(0x47D);	// @ (0x8F * 8 + 5)
#define                                 IBIDONEIE_bit       _BIT_ACCESS(I3C1PIE1,5)
// I3C1PIR1<IBIDONEIF>
extern volatile __bit                   IBIDONEIF           __at(0x45D);	// @ (0x8B * 8 + 5)
#define                                 IBIDONEIF_bit       _BIT_ACCESS(I3C1PIR1,5)
// I3C1ERRIE0<IBIEIE>
extern volatile __bit                   IBIEIE              __at(0x483);	// @ (0x90 * 8 + 3)
#define                                 IBIEIE_bit          _BIT_ACCESS(I3C1ERRIE0,3)
// I3C1ERRIR0<IBIEIF>
extern volatile __bit                   IBIEIF              __at(0x463);	// @ (0x8C * 8 + 3)
#define                                 IBIEIF_bit          _BIT_ACCESS(I3C1ERRIR0,3)
// I3C1EC<IBIEN>
extern volatile __bit                   IBIEN               __at(0x4E0);	// @ (0x9C * 8 + 0)
#define                                 IBIEN_bit           _BIT_ACCESS(I3C1EC,0)
// I3C1CON0<IBIREQ>
extern volatile __bit                   IBIREQ              __at(0x418);	// @ (0x83 * 8 + 0)
#define                                 IBIREQ_bit          _BIT_ACCESS(I3C1CON0,0)
// CPUDOZE<IDLEN>
extern volatile __bit                   IDLEN               __at(0x2797);	// @ (0x4F2 * 8 + 7)
#define                                 IDLEN_bit           _BIT_ACCESS(CPUDOZE,7)
// CWG1CON1<IN>
extern volatile __bit                   IN                  __at(0xCF5);	// @ (0x19E * 8 + 5)
#define                                 IN_bit              _BIT_ACCESS(CWG1CON1,5)
// INLVLA<INLVLA0>
extern volatile __bit                   INLVLA0             __at(0x20D0);	// @ (0x41A * 8 + 0)
#define                                 INLVLA0_bit         _BIT_ACCESS(INLVLA,0)
// INLVLA<INLVLA1>
extern volatile __bit                   INLVLA1             __at(0x20D1);	// @ (0x41A * 8 + 1)
#define                                 INLVLA1_bit         _BIT_ACCESS(INLVLA,1)
// INLVLA<INLVLA2>
extern volatile __bit                   INLVLA2             __at(0x20D2);	// @ (0x41A * 8 + 2)
#define                                 INLVLA2_bit         _BIT_ACCESS(INLVLA,2)
// INLVLA<INLVLA3>
extern volatile __bit                   INLVLA3             __at(0x20D3);	// @ (0x41A * 8 + 3)
#define                                 INLVLA3_bit         _BIT_ACCESS(INLVLA,3)
// INLVLA<INLVLA4>
extern volatile __bit                   INLVLA4             __at(0x20D4);	// @ (0x41A * 8 + 4)
#define                                 INLVLA4_bit         _BIT_ACCESS(INLVLA,4)
// INLVLA<INLVLA5>
extern volatile __bit                   INLVLA5             __at(0x20D5);	// @ (0x41A * 8 + 5)
#define                                 INLVLA5_bit         _BIT_ACCESS(INLVLA,5)
// INLVLC<INLVLC0>
extern volatile __bit                   INLVLC0             __at(0x2170);	// @ (0x42E * 8 + 0)
#define                                 INLVLC0_bit         _BIT_ACCESS(INLVLC,0)
// INLVLC<INLVLC1>
extern volatile __bit                   INLVLC1             __at(0x2171);	// @ (0x42E * 8 + 1)
#define                                 INLVLC1_bit         _BIT_ACCESS(INLVLC,1)
// INLVLC<INLVLC3>
extern volatile __bit                   INLVLC3             __at(0x2173);	// @ (0x42E * 8 + 3)
#define                                 INLVLC3_bit         _BIT_ACCESS(INLVLC,3)
// INLVLC<INLVLC4>
extern volatile __bit                   INLVLC4             __at(0x2174);	// @ (0x42E * 8 + 4)
#define                                 INLVLC4_bit         _BIT_ACCESS(INLVLC,4)
// INLVLC<INLVLC5>
extern volatile __bit                   INLVLC5             __at(0x2175);	// @ (0x42E * 8 + 5)
#define                                 INLVLC5_bit         _BIT_ACCESS(INLVLC,5)
// INLVLC<INLVLC6>
extern volatile __bit                   INLVLC6             __at(0x2176);	// @ (0x42E * 8 + 6)
#define                                 INLVLC6_bit         _BIT_ACCESS(INLVLC,6)
// INLVLC<INLVLC7>
extern volatile __bit                   INLVLC7             __at(0x2177);	// @ (0x42E * 8 + 7)
#define                                 INLVLC7_bit         _BIT_ACCESS(INLVLC,7)
// I3C1DSTAT0<INPEND0>
extern volatile __bit                   INPEND0             __at(0x550);	// @ (0xAA * 8 + 0)
#define                                 INPEND0_bit         _BIT_ACCESS(I3C1DSTAT0,0)
// INTCON0<INT0EDG>
extern volatile __bit                   INT0EDG             __at(0x2308);	// @ (0x461 * 8 + 0)
#define                                 INT0EDG_bit         _BIT_ACCESS(INTCON0,0)
// PIE0<INT0IE>
extern volatile __bit                   INT0IE              __at(0x2399);	// @ (0x473 * 8 + 1)
#define                                 INT0IE_bit          _BIT_ACCESS(PIE0,1)
// PIR0<INT0IF>
extern volatile __bit                   INT0IF              __at(0x2349);	// @ (0x469 * 8 + 1)
#define                                 INT0IF_bit          _BIT_ACCESS(PIR0,1)
// IPR0<INT0IP>
extern volatile __bit                   INT0IP              __at(0x23E9);	// @ (0x47D * 8 + 1)
#define                                 INT0IP_bit          _BIT_ACCESS(IPR0,1)
// INT0PPS<INT0PPS0>
extern volatile __bit                   INT0PPS0            __at(0x1A90);	// @ (0x352 * 8 + 0)
#define                                 INT0PPS0_bit        _BIT_ACCESS(INT0PPS,0)
// INT0PPS<INT0PPS1>
extern volatile __bit                   INT0PPS1            __at(0x1A91);	// @ (0x352 * 8 + 1)
#define                                 INT0PPS1_bit        _BIT_ACCESS(INT0PPS,1)
// INT0PPS<INT0PPS2>
extern volatile __bit                   INT0PPS2            __at(0x1A92);	// @ (0x352 * 8 + 2)
#define                                 INT0PPS2_bit        _BIT_ACCESS(INT0PPS,2)
// INT0PPS<INT0PPS3>
extern volatile __bit                   INT0PPS3            __at(0x1A93);	// @ (0x352 * 8 + 3)
#define                                 INT0PPS3_bit        _BIT_ACCESS(INT0PPS,3)
// INT0PPS<INT0PPS4>
extern volatile __bit                   INT0PPS4            __at(0x1A94);	// @ (0x352 * 8 + 4)
#define                                 INT0PPS4_bit        _BIT_ACCESS(INT0PPS,4)
// INTCON0<INT1EDG>
extern volatile __bit                   INT1EDG             __at(0x2309);	// @ (0x461 * 8 + 1)
#define                                 INT1EDG_bit         _BIT_ACCESS(INTCON0,1)
// PIE0<INT1IE>
extern volatile __bit                   INT1IE              __at(0x239A);	// @ (0x473 * 8 + 2)
#define                                 INT1IE_bit          _BIT_ACCESS(PIE0,2)
// PIR0<INT1IF>
extern volatile __bit                   INT1IF              __at(0x234A);	// @ (0x469 * 8 + 2)
#define                                 INT1IF_bit          _BIT_ACCESS(PIR0,2)
// IPR0<INT1IP>
extern volatile __bit                   INT1IP              __at(0x23EA);	// @ (0x47D * 8 + 2)
#define                                 INT1IP_bit          _BIT_ACCESS(IPR0,2)
// INT1PPS<INT1PPS0>
extern volatile __bit                   INT1PPS0            __at(0x1A98);	// @ (0x353 * 8 + 0)
#define                                 INT1PPS0_bit        _BIT_ACCESS(INT1PPS,0)
// INT1PPS<INT1PPS1>
extern volatile __bit                   INT1PPS1            __at(0x1A99);	// @ (0x353 * 8 + 1)
#define                                 INT1PPS1_bit        _BIT_ACCESS(INT1PPS,1)
// INT1PPS<INT1PPS2>
extern volatile __bit                   INT1PPS2            __at(0x1A9A);	// @ (0x353 * 8 + 2)
#define                                 INT1PPS2_bit        _BIT_ACCESS(INT1PPS,2)
// INT1PPS<INT1PPS3>
extern volatile __bit                   INT1PPS3            __at(0x1A9B);	// @ (0x353 * 8 + 3)
#define                                 INT1PPS3_bit        _BIT_ACCESS(INT1PPS,3)
// INT1PPS<INT1PPS4>
extern volatile __bit                   INT1PPS4            __at(0x1A9C);	// @ (0x353 * 8 + 4)
#define                                 INT1PPS4_bit        _BIT_ACCESS(INT1PPS,4)
// INTCON0<INT2EDG>
extern volatile __bit                   INT2EDG             __at(0x230A);	// @ (0x461 * 8 + 2)
#define                                 INT2EDG_bit         _BIT_ACCESS(INTCON0,2)
// PIE0<INT2IE>
extern volatile __bit                   INT2IE              __at(0x239B);	// @ (0x473 * 8 + 3)
#define                                 INT2IE_bit          _BIT_ACCESS(PIE0,3)
// PIR0<INT2IF>
extern volatile __bit                   INT2IF              __at(0x234B);	// @ (0x469 * 8 + 3)
#define                                 INT2IF_bit          _BIT_ACCESS(PIR0,3)
// IPR0<INT2IP>
extern volatile __bit                   INT2IP              __at(0x23EB);	// @ (0x47D * 8 + 3)
#define                                 INT2IP_bit          _BIT_ACCESS(IPR0,3)
// INT2PPS<INT2PPS0>
extern volatile __bit                   INT2PPS0            __at(0x1AA0);	// @ (0x354 * 8 + 0)
#define                                 INT2PPS0_bit        _BIT_ACCESS(INT2PPS,0)
// INT2PPS<INT2PPS1>
extern volatile __bit                   INT2PPS1            __at(0x1AA1);	// @ (0x354 * 8 + 1)
#define                                 INT2PPS1_bit        _BIT_ACCESS(INT2PPS,1)
// INT2PPS<INT2PPS2>
extern volatile __bit                   INT2PPS2            __at(0x1AA2);	// @ (0x354 * 8 + 2)
#define                                 INT2PPS2_bit        _BIT_ACCESS(INT2PPS,2)
// INT2PPS<INT2PPS3>
extern volatile __bit                   INT2PPS3            __at(0x1AA3);	// @ (0x354 * 8 + 3)
#define                                 INT2PPS3_bit        _BIT_ACCESS(INT2PPS,3)
// INT2PPS<INT2PPS4>
extern volatile __bit                   INT2PPS4            __at(0x1AA4);	// @ (0x354 * 8 + 4)
#define                                 INT2PPS4_bit        _BIT_ACCESS(INT2PPS,4)
// HLVDCON0<INTH>
extern volatile __bit                   INTH                __at(0x1011);	// @ (0x202 * 8 + 1)
#define                                 INTH_bit            _BIT_ACCESS(HLVDCON0,1)
// HLVDCON0<INTL>
extern volatile __bit                   INTL                __at(0x1010);	// @ (0x202 * 8 + 0)
#define                                 INTL_bit            _BIT_ACCESS(HLVDCON0,0)
// CLCnCON<INTN>
extern volatile __bit                   INTN                __at(0xD2B);	// @ (0x1A5 * 8 + 3)
#define                                 INTN_bit            _BIT_ACCESS(CLCnCON,3)
// CLCnCON<INTP>
extern volatile __bit                   INTP                __at(0xD2C);	// @ (0x1A5 * 8 + 4)
#define                                 INTP_bit            _BIT_ACCESS(CLCnCON,4)
// I3C1DSTAT0<INTPEND1>
extern volatile __bit                   INTPEND1            __at(0x551);	// @ (0xAA * 8 + 1)
#define                                 INTPEND1_bit        _BIT_ACCESS(I3C1DSTAT0,1)
// I3C1DSTAT0<INTPEND2>
extern volatile __bit                   INTPEND2            __at(0x552);	// @ (0xAA * 8 + 2)
#define                                 INTPEND2_bit        _BIT_ACCESS(I3C1DSTAT0,2)
// I3C1DSTAT0<INTPEND3>
extern volatile __bit                   INTPEND3            __at(0x553);	// @ (0xAA * 8 + 3)
#define                                 INTPEND3_bit        _BIT_ACCESS(I3C1DSTAT0,3)
// IOCAF<IOCAF0>
extern volatile __bit                   IOCAF0              __at(0x20E8);	// @ (0x41D * 8 + 0)
#define                                 IOCAF0_bit          _BIT_ACCESS(IOCAF,0)
// IOCAF<IOCAF1>
extern volatile __bit                   IOCAF1              __at(0x20E9);	// @ (0x41D * 8 + 1)
#define                                 IOCAF1_bit          _BIT_ACCESS(IOCAF,1)
// IOCAF<IOCAF2>
extern volatile __bit                   IOCAF2              __at(0x20EA);	// @ (0x41D * 8 + 2)
#define                                 IOCAF2_bit          _BIT_ACCESS(IOCAF,2)
// IOCAF<IOCAF3>
extern volatile __bit                   IOCAF3              __at(0x20EB);	// @ (0x41D * 8 + 3)
#define                                 IOCAF3_bit          _BIT_ACCESS(IOCAF,3)
// IOCAF<IOCAF4>
extern volatile __bit                   IOCAF4              __at(0x20EC);	// @ (0x41D * 8 + 4)
#define                                 IOCAF4_bit          _BIT_ACCESS(IOCAF,4)
// IOCAF<IOCAF5>
extern volatile __bit                   IOCAF5              __at(0x20ED);	// @ (0x41D * 8 + 5)
#define                                 IOCAF5_bit          _BIT_ACCESS(IOCAF,5)
// IOCAN<IOCAN0>
extern volatile __bit                   IOCAN0              __at(0x20E0);	// @ (0x41C * 8 + 0)
#define                                 IOCAN0_bit          _BIT_ACCESS(IOCAN,0)
// IOCAN<IOCAN1>
extern volatile __bit                   IOCAN1              __at(0x20E1);	// @ (0x41C * 8 + 1)
#define                                 IOCAN1_bit          _BIT_ACCESS(IOCAN,1)
// IOCAN<IOCAN2>
extern volatile __bit                   IOCAN2              __at(0x20E2);	// @ (0x41C * 8 + 2)
#define                                 IOCAN2_bit          _BIT_ACCESS(IOCAN,2)
// IOCAN<IOCAN3>
extern volatile __bit                   IOCAN3              __at(0x20E3);	// @ (0x41C * 8 + 3)
#define                                 IOCAN3_bit          _BIT_ACCESS(IOCAN,3)
// IOCAN<IOCAN4>
extern volatile __bit                   IOCAN4              __at(0x20E4);	// @ (0x41C * 8 + 4)
#define                                 IOCAN4_bit          _BIT_ACCESS(IOCAN,4)
// IOCAN<IOCAN5>
extern volatile __bit                   IOCAN5              __at(0x20E5);	// @ (0x41C * 8 + 5)
#define                                 IOCAN5_bit          _BIT_ACCESS(IOCAN,5)
// IOCAP<IOCAP0>
extern volatile __bit                   IOCAP0              __at(0x20D8);	// @ (0x41B * 8 + 0)
#define                                 IOCAP0_bit          _BIT_ACCESS(IOCAP,0)
// IOCAP<IOCAP1>
extern volatile __bit                   IOCAP1              __at(0x20D9);	// @ (0x41B * 8 + 1)
#define                                 IOCAP1_bit          _BIT_ACCESS(IOCAP,1)
// IOCAP<IOCAP2>
extern volatile __bit                   IOCAP2              __at(0x20DA);	// @ (0x41B * 8 + 2)
#define                                 IOCAP2_bit          _BIT_ACCESS(IOCAP,2)
// IOCAP<IOCAP3>
extern volatile __bit                   IOCAP3              __at(0x20DB);	// @ (0x41B * 8 + 3)
#define                                 IOCAP3_bit          _BIT_ACCESS(IOCAP,3)
// IOCAP<IOCAP4>
extern volatile __bit                   IOCAP4              __at(0x20DC);	// @ (0x41B * 8 + 4)
#define                                 IOCAP4_bit          _BIT_ACCESS(IOCAP,4)
// IOCAP<IOCAP5>
extern volatile __bit                   IOCAP5              __at(0x20DD);	// @ (0x41B * 8 + 5)
#define                                 IOCAP5_bit          _BIT_ACCESS(IOCAP,5)
// IOCCF<IOCCF0>
extern volatile __bit                   IOCCF0              __at(0x2188);	// @ (0x431 * 8 + 0)
#define                                 IOCCF0_bit          _BIT_ACCESS(IOCCF,0)
// IOCCF<IOCCF1>
extern volatile __bit                   IOCCF1              __at(0x2189);	// @ (0x431 * 8 + 1)
#define                                 IOCCF1_bit          _BIT_ACCESS(IOCCF,1)
// IOCCF<IOCCF3>
extern volatile __bit                   IOCCF3              __at(0x218B);	// @ (0x431 * 8 + 3)
#define                                 IOCCF3_bit          _BIT_ACCESS(IOCCF,3)
// IOCCF<IOCCF4>
extern volatile __bit                   IOCCF4              __at(0x218C);	// @ (0x431 * 8 + 4)
#define                                 IOCCF4_bit          _BIT_ACCESS(IOCCF,4)
// IOCCF<IOCCF5>
extern volatile __bit                   IOCCF5              __at(0x218D);	// @ (0x431 * 8 + 5)
#define                                 IOCCF5_bit          _BIT_ACCESS(IOCCF,5)
// IOCCF<IOCCF6>
extern volatile __bit                   IOCCF6              __at(0x218E);	// @ (0x431 * 8 + 6)
#define                                 IOCCF6_bit          _BIT_ACCESS(IOCCF,6)
// IOCCF<IOCCF7>
extern volatile __bit                   IOCCF7              __at(0x218F);	// @ (0x431 * 8 + 7)
#define                                 IOCCF7_bit          _BIT_ACCESS(IOCCF,7)
// IOCCN<IOCCN0>
extern volatile __bit                   IOCCN0              __at(0x2180);	// @ (0x430 * 8 + 0)
#define                                 IOCCN0_bit          _BIT_ACCESS(IOCCN,0)
// IOCCN<IOCCN1>
extern volatile __bit                   IOCCN1              __at(0x2181);	// @ (0x430 * 8 + 1)
#define                                 IOCCN1_bit          _BIT_ACCESS(IOCCN,1)
// IOCCN<IOCCN3>
extern volatile __bit                   IOCCN3              __at(0x2183);	// @ (0x430 * 8 + 3)
#define                                 IOCCN3_bit          _BIT_ACCESS(IOCCN,3)
// IOCCN<IOCCN4>
extern volatile __bit                   IOCCN4              __at(0x2184);	// @ (0x430 * 8 + 4)
#define                                 IOCCN4_bit          _BIT_ACCESS(IOCCN,4)
// IOCCN<IOCCN5>
extern volatile __bit                   IOCCN5              __at(0x2185);	// @ (0x430 * 8 + 5)
#define                                 IOCCN5_bit          _BIT_ACCESS(IOCCN,5)
// IOCCN<IOCCN6>
extern volatile __bit                   IOCCN6              __at(0x2186);	// @ (0x430 * 8 + 6)
#define                                 IOCCN6_bit          _BIT_ACCESS(IOCCN,6)
// IOCCN<IOCCN7>
extern volatile __bit                   IOCCN7              __at(0x2187);	// @ (0x430 * 8 + 7)
#define                                 IOCCN7_bit          _BIT_ACCESS(IOCCN,7)
// IOCCP<IOCCP0>
extern volatile __bit                   IOCCP0              __at(0x2178);	// @ (0x42F * 8 + 0)
#define                                 IOCCP0_bit          _BIT_ACCESS(IOCCP,0)
// IOCCP<IOCCP1>
extern volatile __bit                   IOCCP1              __at(0x2179);	// @ (0x42F * 8 + 1)
#define                                 IOCCP1_bit          _BIT_ACCESS(IOCCP,1)
// IOCCP<IOCCP3>
extern volatile __bit                   IOCCP3              __at(0x217B);	// @ (0x42F * 8 + 3)
#define                                 IOCCP3_bit          _BIT_ACCESS(IOCCP,3)
// IOCCP<IOCCP4>
extern volatile __bit                   IOCCP4              __at(0x217C);	// @ (0x42F * 8 + 4)
#define                                 IOCCP4_bit          _BIT_ACCESS(IOCCP,4)
// IOCCP<IOCCP5>
extern volatile __bit                   IOCCP5              __at(0x217D);	// @ (0x42F * 8 + 5)
#define                                 IOCCP5_bit          _BIT_ACCESS(IOCCP,5)
// IOCCP<IOCCP6>
extern volatile __bit                   IOCCP6              __at(0x217E);	// @ (0x42F * 8 + 6)
#define                                 IOCCP6_bit          _BIT_ACCESS(IOCCP,6)
// IOCCP<IOCCP7>
extern volatile __bit                   IOCCP7              __at(0x217F);	// @ (0x42F * 8 + 7)
#define                                 IOCCP7_bit          _BIT_ACCESS(IOCCP,7)
// PIE3<IOCIE>
extern volatile __bit                   IOCIE               __at(0x23B4);	// @ (0x476 * 8 + 4)
#define                                 IOCIE_bit           _BIT_ACCESS(PIE3,4)
// PIR3<IOCIF>
extern volatile __bit                   IOCIF               __at(0x2364);	// @ (0x46C * 8 + 4)
#define                                 IOCIF_bit           _BIT_ACCESS(PIR3,4)
// IPR3<IOCIP>
extern volatile __bit                   IOCIP               __at(0x2404);	// @ (0x480 * 8 + 4)
#define                                 IOCIP_bit           _BIT_ACCESS(IPR3,4)
// PMD1<IOCMD>
extern volatile __bit                   IOCMD               __at(0x180A);	// @ (0x301 * 8 + 2)
#define                                 IOCMD_bit           _BIT_ACCESS(PMD1,2)
// PIE5<IOCSRIE>
extern volatile __bit                   IOCSRIE             __at(0x23C7);	// @ (0x478 * 8 + 7)
#define                                 IOCSRIE_bit         _BIT_ACCESS(PIE5,7)
// PIR5<IOCSRIF>
extern volatile __bit                   IOCSRIF             __at(0x2377);	// @ (0x46E * 8 + 7)
#define                                 IOCSRIF_bit         _BIT_ACCESS(PIR5,7)
// IPR5<IOCSRIP>
extern volatile __bit                   IOCSRIP             __at(0x2417);	// @ (0x482 * 8 + 7)
#define                                 IOCSRIP_bit         _BIT_ACCESS(IPR5,7)
// IOCWF<IOCWF0>
extern volatile __bit                   IOCWF0              __at(0x22C8);	// @ (0x459 * 8 + 0)
#define                                 IOCWF0_bit          _BIT_ACCESS(IOCWF,0)
// IOCWF<IOCWF1>
extern volatile __bit                   IOCWF1              __at(0x22C9);	// @ (0x459 * 8 + 1)
#define                                 IOCWF1_bit          _BIT_ACCESS(IOCWF,1)
// IOCWF<IOCWF2>
extern volatile __bit                   IOCWF2              __at(0x22CA);	// @ (0x459 * 8 + 2)
#define                                 IOCWF2_bit          _BIT_ACCESS(IOCWF,2)
// IOCWF<IOCWF3>
extern volatile __bit                   IOCWF3              __at(0x22CB);	// @ (0x459 * 8 + 3)
#define                                 IOCWF3_bit          _BIT_ACCESS(IOCWF,3)
// IOCWF<IOCWF4>
extern volatile __bit                   IOCWF4              __at(0x22CC);	// @ (0x459 * 8 + 4)
#define                                 IOCWF4_bit          _BIT_ACCESS(IOCWF,4)
// IOCWF<IOCWF5>
extern volatile __bit                   IOCWF5              __at(0x22CD);	// @ (0x459 * 8 + 5)
#define                                 IOCWF5_bit          _BIT_ACCESS(IOCWF,5)
// IOCWF<IOCWF6>
extern volatile __bit                   IOCWF6              __at(0x22CE);	// @ (0x459 * 8 + 6)
#define                                 IOCWF6_bit          _BIT_ACCESS(IOCWF,6)
// IOCWF<IOCWF7>
extern volatile __bit                   IOCWF7              __at(0x22CF);	// @ (0x459 * 8 + 7)
#define                                 IOCWF7_bit          _BIT_ACCESS(IOCWF,7)
// IOCWN<IOCWN0>
extern volatile __bit                   IOCWN0              __at(0x22C0);	// @ (0x458 * 8 + 0)
#define                                 IOCWN0_bit          _BIT_ACCESS(IOCWN,0)
// IOCWN<IOCWN1>
extern volatile __bit                   IOCWN1              __at(0x22C1);	// @ (0x458 * 8 + 1)
#define                                 IOCWN1_bit          _BIT_ACCESS(IOCWN,1)
// IOCWN<IOCWN2>
extern volatile __bit                   IOCWN2              __at(0x22C2);	// @ (0x458 * 8 + 2)
#define                                 IOCWN2_bit          _BIT_ACCESS(IOCWN,2)
// IOCWN<IOCWN3>
extern volatile __bit                   IOCWN3              __at(0x22C3);	// @ (0x458 * 8 + 3)
#define                                 IOCWN3_bit          _BIT_ACCESS(IOCWN,3)
// IOCWN<IOCWN4>
extern volatile __bit                   IOCWN4              __at(0x22C4);	// @ (0x458 * 8 + 4)
#define                                 IOCWN4_bit          _BIT_ACCESS(IOCWN,4)
// IOCWN<IOCWN5>
extern volatile __bit                   IOCWN5              __at(0x22C5);	// @ (0x458 * 8 + 5)
#define                                 IOCWN5_bit          _BIT_ACCESS(IOCWN,5)
// IOCWN<IOCWN6>
extern volatile __bit                   IOCWN6              __at(0x22C6);	// @ (0x458 * 8 + 6)
#define                                 IOCWN6_bit          _BIT_ACCESS(IOCWN,6)
// IOCWN<IOCWN7>
extern volatile __bit                   IOCWN7              __at(0x22C7);	// @ (0x458 * 8 + 7)
#define                                 IOCWN7_bit          _BIT_ACCESS(IOCWN,7)
// IOCWP<IOCWP0>
extern volatile __bit                   IOCWP0              __at(0x22B8);	// @ (0x457 * 8 + 0)
#define                                 IOCWP0_bit          _BIT_ACCESS(IOCWP,0)
// IOCWP<IOCWP1>
extern volatile __bit                   IOCWP1              __at(0x22B9);	// @ (0x457 * 8 + 1)
#define                                 IOCWP1_bit          _BIT_ACCESS(IOCWP,1)
// IOCWP<IOCWP2>
extern volatile __bit                   IOCWP2              __at(0x22BA);	// @ (0x457 * 8 + 2)
#define                                 IOCWP2_bit          _BIT_ACCESS(IOCWP,2)
// IOCWP<IOCWP3>
extern volatile __bit                   IOCWP3              __at(0x22BB);	// @ (0x457 * 8 + 3)
#define                                 IOCWP3_bit          _BIT_ACCESS(IOCWP,3)
// IOCWP<IOCWP4>
extern volatile __bit                   IOCWP4              __at(0x22BC);	// @ (0x457 * 8 + 4)
#define                                 IOCWP4_bit          _BIT_ACCESS(IOCWP,4)
// IOCWP<IOCWP5>
extern volatile __bit                   IOCWP5              __at(0x22BD);	// @ (0x457 * 8 + 5)
#define                                 IOCWP5_bit          _BIT_ACCESS(IOCWP,5)
// IOCWP<IOCWP6>
extern volatile __bit                   IOCWP6              __at(0x22BE);	// @ (0x457 * 8 + 6)
#define                                 IOCWP6_bit          _BIT_ACCESS(IOCWP,6)
// IOCWP<IOCWP7>
extern volatile __bit                   IOCWP7              __at(0x22BF);	// @ (0x457 * 8 + 7)
#define                                 IOCWP7_bit          _BIT_ACCESS(IOCWP,7)
// CWG1ISM<ISM0>
extern volatile __bit                   ISM0                __at(0xCD0);	// @ (0x19A * 8 + 0)
#define                                 ISM0_bit            _BIT_ACCESS(CWG1ISM,0)
// CWG1ISM<ISM1>
extern volatile __bit                   ISM1                __at(0xCD1);	// @ (0x19A * 8 + 1)
#define                                 ISM1_bit            _BIT_ACCESS(CWG1ISM,1)
// CWG1ISM<ISM2>
extern volatile __bit                   ISM2                __at(0xCD2);	// @ (0x19A * 8 + 2)
#define                                 ISM2_bit            _BIT_ACCESS(CWG1ISM,2)
// CWG1ISM<ISM3>
extern volatile __bit                   ISM3                __at(0xCD3);	// @ (0x19A * 8 + 3)
#define                                 ISM3_bit            _BIT_ACCESS(CWG1ISM,3)
// CWG1ISM<ISM4>
extern volatile __bit                   ISM4                __at(0xCD4);	// @ (0x19A * 8 + 4)
#define                                 ISM4_bit            _BIT_ACCESS(CWG1ISM,4)
// ISRPR<ISRPR0>
extern volatile __bit                   ISRPR0              __at(0x1D0);	// @ (0x3A * 8 + 0)
#define                                 ISRPR0_bit          _BIT_ACCESS(ISRPR,0)
// ISRPR<ISRPR1>
extern volatile __bit                   ISRPR1              __at(0x1D1);	// @ (0x3A * 8 + 1)
#define                                 ISRPR1_bit          _BIT_ACCESS(ISRPR,1)
// ISRPR<ISRPR2>
extern volatile __bit                   ISRPR2              __at(0x1D2);	// @ (0x3A * 8 + 2)
#define                                 ISRPR2_bit          _BIT_ACCESS(ISRPR,2)
// IVTLOCK<IVTLOCKED>
extern volatile __bit                   IVTLOCKED           __at(0x2300);	// @ (0x460 * 8 + 0)
#define                                 IVTLOCKED_bit       _BIT_ACCESS(IVTLOCK,0)
// SCANLADRL<LADR0>
extern volatile __bit                   LADR0               __at(0x358);	// @ (0x6B * 8 + 0)
#define                                 LADR0_bit           _BIT_ACCESS(SCANLADRL,0)
// SCANLADRL<LADR1>
extern volatile __bit                   LADR1               __at(0x359);	// @ (0x6B * 8 + 1)
#define                                 LADR1_bit           _BIT_ACCESS(SCANLADRL,1)
// SCANLADRH<LADR10>
extern volatile __bit                   LADR10              __at(0x362);	// @ (0x6C * 8 + 2)
#define                                 LADR10_bit          _BIT_ACCESS(SCANLADRH,2)
// SCANLADRH<LADR11>
extern volatile __bit                   LADR11              __at(0x363);	// @ (0x6C * 8 + 3)
#define                                 LADR11_bit          _BIT_ACCESS(SCANLADRH,3)
// SCANLADRH<LADR12>
extern volatile __bit                   LADR12              __at(0x364);	// @ (0x6C * 8 + 4)
#define                                 LADR12_bit          _BIT_ACCESS(SCANLADRH,4)
// SCANLADRH<LADR13>
extern volatile __bit                   LADR13              __at(0x365);	// @ (0x6C * 8 + 5)
#define                                 LADR13_bit          _BIT_ACCESS(SCANLADRH,5)
// SCANLADRH<LADR14>
extern volatile __bit                   LADR14              __at(0x366);	// @ (0x6C * 8 + 6)
#define                                 LADR14_bit          _BIT_ACCESS(SCANLADRH,6)
// SCANLADRH<LADR15>
extern volatile __bit                   LADR15              __at(0x367);	// @ (0x6C * 8 + 7)
#define                                 LADR15_bit          _BIT_ACCESS(SCANLADRH,7)
// SCANLADRU<LADR16>
extern volatile __bit                   LADR16              __at(0x368);	// @ (0x6D * 8 + 0)
#define                                 LADR16_bit          _BIT_ACCESS(SCANLADRU,0)
// SCANLADRU<LADR17>
extern volatile __bit                   LADR17              __at(0x369);	// @ (0x6D * 8 + 1)
#define                                 LADR17_bit          _BIT_ACCESS(SCANLADRU,1)
// SCANLADRU<LADR18>
extern volatile __bit                   LADR18              __at(0x36A);	// @ (0x6D * 8 + 2)
#define                                 LADR18_bit          _BIT_ACCESS(SCANLADRU,2)
// SCANLADRU<LADR19>
extern volatile __bit                   LADR19              __at(0x36B);	// @ (0x6D * 8 + 3)
#define                                 LADR19_bit          _BIT_ACCESS(SCANLADRU,3)
// SCANLADRL<LADR2>
extern volatile __bit                   LADR2               __at(0x35A);	// @ (0x6B * 8 + 2)
#define                                 LADR2_bit           _BIT_ACCESS(SCANLADRL,2)
// SCANLADRU<LADR20>
extern volatile __bit                   LADR20              __at(0x36C);	// @ (0x6D * 8 + 4)
#define                                 LADR20_bit          _BIT_ACCESS(SCANLADRU,4)
// SCANLADRU<LADR21>
extern volatile __bit                   LADR21              __at(0x36D);	// @ (0x6D * 8 + 5)
#define                                 LADR21_bit          _BIT_ACCESS(SCANLADRU,5)
// SCANLADRL<LADR3>
extern volatile __bit                   LADR3               __at(0x35B);	// @ (0x6B * 8 + 3)
#define                                 LADR3_bit           _BIT_ACCESS(SCANLADRL,3)
// SCANLADRL<LADR4>
extern volatile __bit                   LADR4               __at(0x35C);	// @ (0x6B * 8 + 4)
#define                                 LADR4_bit           _BIT_ACCESS(SCANLADRL,4)
// SCANLADRL<LADR5>
extern volatile __bit                   LADR5               __at(0x35D);	// @ (0x6B * 8 + 5)
#define                                 LADR5_bit           _BIT_ACCESS(SCANLADRL,5)
// SCANLADRL<LADR6>
extern volatile __bit                   LADR6               __at(0x35E);	// @ (0x6B * 8 + 6)
#define                                 LADR6_bit           _BIT_ACCESS(SCANLADRL,6)
// SCANLADRL<LADR7>
extern volatile __bit                   LADR7               __at(0x35F);	// @ (0x6B * 8 + 7)
#define                                 LADR7_bit           _BIT_ACCESS(SCANLADRL,7)
// SCANLADRH<LADR8>
extern volatile __bit                   LADR8               __at(0x360);	// @ (0x6C * 8 + 0)
#define                                 LADR8_bit           _BIT_ACCESS(SCANLADRH,0)
// SCANLADRH<LADR9>
extern volatile __bit                   LADR9               __at(0x361);	// @ (0x6C * 8 + 1)
#define                                 LADR9_bit           _BIT_ACCESS(SCANLADRH,1)
// LATA<LATA0>
extern volatile __bit                   LATA0               __at(0x2498);	// @ (0x493 * 8 + 0)
#define                                 LATA0_bit           _BIT_ACCESS(LATA,0)
// LATA<LATA1>
extern volatile __bit                   LATA1               __at(0x2499);	// @ (0x493 * 8 + 1)
#define                                 LATA1_bit           _BIT_ACCESS(LATA,1)
// LATA<LATA2>
extern volatile __bit                   LATA2               __at(0x249A);	// @ (0x493 * 8 + 2)
#define                                 LATA2_bit           _BIT_ACCESS(LATA,2)
// LATA<LATA4>
extern volatile __bit                   LATA4               __at(0x249C);	// @ (0x493 * 8 + 4)
#define                                 LATA4_bit           _BIT_ACCESS(LATA,4)
// LATA<LATA5>
extern volatile __bit                   LATA5               __at(0x249D);	// @ (0x493 * 8 + 5)
#define                                 LATA5_bit           _BIT_ACCESS(LATA,5)
// LATC<LATC0>
extern volatile __bit                   LATC0               __at(0x24A8);	// @ (0x495 * 8 + 0)
#define                                 LATC0_bit           _BIT_ACCESS(LATC,0)
// LATC<LATC1>
extern volatile __bit                   LATC1               __at(0x24A9);	// @ (0x495 * 8 + 1)
#define                                 LATC1_bit           _BIT_ACCESS(LATC,1)
// LATC<LATC3>
extern volatile __bit                   LATC3               __at(0x24AB);	// @ (0x495 * 8 + 3)
#define                                 LATC3_bit           _BIT_ACCESS(LATC,3)
// LATC<LATC4>
extern volatile __bit                   LATC4               __at(0x24AC);	// @ (0x495 * 8 + 4)
#define                                 LATC4_bit           _BIT_ACCESS(LATC,4)
// LATC<LATC5>
extern volatile __bit                   LATC5               __at(0x24AD);	// @ (0x495 * 8 + 5)
#define                                 LATC5_bit           _BIT_ACCESS(LATC,5)
// LATC<LATC6>
extern volatile __bit                   LATC6               __at(0x24AE);	// @ (0x495 * 8 + 6)
#define                                 LATC6_bit           _BIT_ACCESS(LATC,6)
// LATC<LATC7>
extern volatile __bit                   LATC7               __at(0x24AF);	// @ (0x495 * 8 + 7)
#define                                 LATC7_bit           _BIT_ACCESS(LATC,7)
// LATW<LATW0>
extern volatile __bit                   LATW0               __at(0x24D0);	// @ (0x49A * 8 + 0)
#define                                 LATW0_bit           _BIT_ACCESS(LATW,0)
// LATW<LATW1>
extern volatile __bit                   LATW1               __at(0x24D1);	// @ (0x49A * 8 + 1)
#define                                 LATW1_bit           _BIT_ACCESS(LATW,1)
// LATW<LATW2>
extern volatile __bit                   LATW2               __at(0x24D2);	// @ (0x49A * 8 + 2)
#define                                 LATW2_bit           _BIT_ACCESS(LATW,2)
// LATW<LATW3>
extern volatile __bit                   LATW3               __at(0x24D3);	// @ (0x49A * 8 + 3)
#define                                 LATW3_bit           _BIT_ACCESS(LATW,3)
// LATW<LATW4>
extern volatile __bit                   LATW4               __at(0x24D4);	// @ (0x49A * 8 + 4)
#define                                 LATW4_bit           _BIT_ACCESS(LATW,4)
// LATW<LATW5>
extern volatile __bit                   LATW5               __at(0x24D5);	// @ (0x49A * 8 + 5)
#define                                 LATW5_bit           _BIT_ACCESS(LATW,5)
// LATW<LATW6>
extern volatile __bit                   LATW6               __at(0x24D6);	// @ (0x49A * 8 + 6)
#define                                 LATW6_bit           _BIT_ACCESS(LATW,6)
// LATW<LATW7>
extern volatile __bit                   LATW7               __at(0x24D7);	// @ (0x49A * 8 + 7)
#define                                 LATW7_bit           _BIT_ACCESS(LATW,7)
// CRCCON0<LENDIAN>
extern volatile __bit                   LENDIAN             __at(0x341);	// @ (0x68 * 8 + 1)
#define                                 LENDIAN_bit         _BIT_ACCESS(CRCCON0,1)
// OSCEN<LFOEN>
extern volatile __bit                   LFOEN               __at(0x3F4);	// @ (0x7E * 8 + 4)
#define                                 LFOEN_bit           _BIT_ACCESS(OSCEN,4)
// OSCSTAT<LFOR>
extern volatile __bit                   LFOR                __at(0x3EC);	// @ (0x7D * 8 + 4)
#define                                 LFOR_bit            _BIT_ACCESS(OSCSTAT,4)
// ACTCON<LOCK>
extern volatile __bit                   LOCK                __at(0x40B);	// @ (0x81 * 8 + 3)
#define                                 LOCK_bit            _BIT_ACCESS(ACTCON,3)
// CWG1AS0<LSAC0>
extern volatile __bit                   LSAC0               __at(0xCFA);	// @ (0x19F * 8 + 2)
#define                                 LSAC0_bit           _BIT_ACCESS(CWG1AS0,2)
// CWG1AS0<LSAC1>
extern volatile __bit                   LSAC1               __at(0xCFB);	// @ (0x19F * 8 + 3)
#define                                 LSAC1_bit           _BIT_ACCESS(CWG1AS0,3)
// CWG1AS0<LSBD0>
extern volatile __bit                   LSBD0               __at(0xCFC);	// @ (0x19F * 8 + 4)
#define                                 LSBD0_bit           _BIT_ACCESS(CWG1AS0,4)
// CWG1AS0<LSBD1>
extern volatile __bit                   LSBD1               __at(0xCFD);	// @ (0x19F * 8 + 5)
#define                                 LSBD1_bit           _BIT_ACCESS(CWG1AS0,5)
// SPI1CON0<LSBF>
extern volatile __bit                   LSBF                __at(0xEDA);	// @ (0x1DB * 8 + 2)
#define                                 LSBF_bit            _BIT_ACCESS(SPI1CON0,2)
// CWG1AS0<LSCA1>
extern volatile __bit                   LSCA1               __at(0xCFB);	// @ (0x19F * 8 + 3)
#define                                 LSCA1_bit           _BIT_ACCESS(CWG1AS0,3)
// CWG1AS0<LSDB0>
extern volatile __bit                   LSDB0               __at(0xCFC);	// @ (0x19F * 8 + 4)
#define                                 LSDB0_bit           _BIT_ACCESS(CWG1AS0,4)
// CWG1AS0<LSDB1>
extern volatile __bit                   LSDB1               __at(0xCFD);	// @ (0x19F * 8 + 5)
#define                                 LSDB1_bit           _BIT_ACCESS(CWG1AS0,5)
// ADLTHL<LTH0>
extern volatile __bit                   LTH0                __at(0x10A8);	// @ (0x215 * 8 + 0)
#define                                 LTH0_bit            _BIT_ACCESS(ADLTHL,0)
// ADLTHL<LTH1>
extern volatile __bit                   LTH1                __at(0x10A9);	// @ (0x215 * 8 + 1)
#define                                 LTH1_bit            _BIT_ACCESS(ADLTHL,1)
// ADLTHH<LTH10>
extern volatile __bit                   LTH10               __at(0x10B2);	// @ (0x216 * 8 + 2)
#define                                 LTH10_bit           _BIT_ACCESS(ADLTHH,2)
// ADLTHH<LTH11>
extern volatile __bit                   LTH11               __at(0x10B3);	// @ (0x216 * 8 + 3)
#define                                 LTH11_bit           _BIT_ACCESS(ADLTHH,3)
// ADLTHH<LTH12>
extern volatile __bit                   LTH12               __at(0x10B4);	// @ (0x216 * 8 + 4)
#define                                 LTH12_bit           _BIT_ACCESS(ADLTHH,4)
// ADLTHH<LTH13>
extern volatile __bit                   LTH13               __at(0x10B5);	// @ (0x216 * 8 + 5)
#define                                 LTH13_bit           _BIT_ACCESS(ADLTHH,5)
// ADLTHH<LTH14>
extern volatile __bit                   LTH14               __at(0x10B6);	// @ (0x216 * 8 + 6)
#define                                 LTH14_bit           _BIT_ACCESS(ADLTHH,6)
// ADLTHH<LTH15>
extern volatile __bit                   LTH15               __at(0x10B7);	// @ (0x216 * 8 + 7)
#define                                 LTH15_bit           _BIT_ACCESS(ADLTHH,7)
// ADLTHL<LTH2>
extern volatile __bit                   LTH2                __at(0x10AA);	// @ (0x215 * 8 + 2)
#define                                 LTH2_bit            _BIT_ACCESS(ADLTHL,2)
// ADLTHL<LTH3>
extern volatile __bit                   LTH3                __at(0x10AB);	// @ (0x215 * 8 + 3)
#define                                 LTH3_bit            _BIT_ACCESS(ADLTHL,3)
// ADLTHL<LTH4>
extern volatile __bit                   LTH4                __at(0x10AC);	// @ (0x215 * 8 + 4)
#define                                 LTH4_bit            _BIT_ACCESS(ADLTHL,4)
// ADLTHL<LTH5>
extern volatile __bit                   LTH5                __at(0x10AD);	// @ (0x215 * 8 + 5)
#define                                 LTH5_bit            _BIT_ACCESS(ADLTHL,5)
// ADLTHL<LTH6>
extern volatile __bit                   LTH6                __at(0x10AE);	// @ (0x215 * 8 + 6)
#define                                 LTH6_bit            _BIT_ACCESS(ADLTHL,6)
// ADLTHL<LTH7>
extern volatile __bit                   LTH7                __at(0x10AF);	// @ (0x215 * 8 + 7)
#define                                 LTH7_bit            _BIT_ACCESS(ADLTHL,7)
// ADLTHH<LTH8>
extern volatile __bit                   LTH8                __at(0x10B0);	// @ (0x216 * 8 + 0)
#define                                 LTH8_bit            _BIT_ACCESS(ADLTHH,0)
// ADLTHH<LTH9>
extern volatile __bit                   LTH9                __at(0x10B1);	// @ (0x216 * 8 + 1)
#define                                 LTH9_bit            _BIT_ACCESS(ADLTHH,1)
// ADSTAT<LTHR>
extern volatile __bit                   LTHR                __at(0x119D);	// @ (0x233 * 8 + 5)
#define                                 LTHR_bit            _BIT_ACCESS(ADSTAT,5)
// MAINPR<MAINPR0>
extern volatile __bit                   MAINPR0             __at(0x1C8);	// @ (0x39 * 8 + 0)
#define                                 MAINPR0_bit         _BIT_ACCESS(MAINPR,0)
// MAINPR<MAINPR1>
extern volatile __bit                   MAINPR1             __at(0x1C9);	// @ (0x39 * 8 + 1)
#define                                 MAINPR1_bit         _BIT_ACCESS(MAINPR,1)
// MAINPR<MAINPR2>
extern volatile __bit                   MAINPR2             __at(0x1CA);	// @ (0x39 * 8 + 2)
#define                                 MAINPR2_bit         _BIT_ACCESS(MAINPR,2)
// ADSTAT<MATH>
extern volatile __bit                   MATH                __at(0x119C);	// @ (0x233 * 8 + 4)
#define                                 MATH_bit            _BIT_ACCESS(ADSTAT,4)
// ADCON2<MD0>
extern volatile __bit                   MD0                 __at(0x1188);	// @ (0x231 * 8 + 0)
#define                                 MD0_bit             _BIT_ACCESS(ADCON2,0)
// ADCON2<MD1>
extern volatile __bit                   MD1                 __at(0x1189);	// @ (0x231 * 8 + 1)
#define                                 MD1_bit             _BIT_ACCESS(ADCON2,1)
// T0CON0<MD16>
extern volatile __bit                   MD16                __at(0x82C);	// @ (0x105 * 8 + 4)
#define                                 MD16_bit            _BIT_ACCESS(T0CON0,4)
// ADCON2<MD2>
extern volatile __bit                   MD2                 __at(0x118A);	// @ (0x231 * 8 + 2)
#define                                 MD2_bit             _BIT_ACCESS(ADCON2,2)
// I2C1CON0<MDR>
extern volatile __bit                   MDR                 __at(0xF33);	// @ (0x1E6 * 8 + 3)
#define                                 MDR_bit             _BIT_ACCESS(I2C1CON0,3)
// PCON1<MEMV>
extern volatile __bit                   MEMV                __at(0x2789);	// @ (0x4F1 * 8 + 1)
#define                                 MEMV_bit            _BIT_ACCESS(PCON1,1)
// OSCEN<MFOEN>
extern volatile __bit                   MFOEN               __at(0x3F5);	// @ (0x7E * 8 + 5)
#define                                 MFOEN_bit           _BIT_ACCESS(OSCEN,5)
// OSCSTAT<MFOR>
extern volatile __bit                   MFOR                __at(0x3ED);	// @ (0x7D * 8 + 5)
#define                                 MFOR_bit            _BIT_ACCESS(OSCSTAT,5)
// I2C1STAT0<MMA>
extern volatile __bit                   MMA                 __at(0xF25);	// @ (0x1E4 * 8 + 5)
#define                                 MMA_bit             _BIT_ACCESS(I2C1STAT0,5)
// PWMEN<MPWM1EN>
extern volatile __bit                   MPWM1EN             __at(0xA90);	// @ (0x152 * 8 + 0)
#define                                 MPWM1EN_bit         _BIT_ACCESS(PWMEN,0)
// PWMLOAD<MPWM1LD>
extern volatile __bit                   MPWM1LD             __at(0xA88);	// @ (0x151 * 8 + 0)
#define                                 MPWM1LD_bit         _BIT_ACCESS(PWMLOAD,0)
// PWMEN<MPWM2EN>
extern volatile __bit                   MPWM2EN             __at(0xA91);	// @ (0x152 * 8 + 1)
#define                                 MPWM2EN_bit         _BIT_ACCESS(PWMEN,1)
// PWMLOAD<MPWM2LD>
extern volatile __bit                   MPWM2LD             __at(0xA89);	// @ (0x151 * 8 + 1)
#define                                 MPWM2LD_bit         _BIT_ACCESS(PWMLOAD,1)
// SCANCON0<MREG>
extern volatile __bit                   MREG                __at(0x38A);	// @ (0x71 * 8 + 2)
#define                                 MREG_bit            _BIT_ACCESS(SCANCON0,2)
// I3C1MRS<MRS0>
extern volatile __bit                   MRS0                __at(0x568);	// @ (0xAD * 8 + 0)
#define                                 MRS0_bit            _BIT_ACCESS(I3C1MRS,0)
// I3C1MRS<MRS1>
extern volatile __bit                   MRS1                __at(0x569);	// @ (0xAD * 8 + 1)
#define                                 MRS1_bit            _BIT_ACCESS(I3C1MRS,1)
// I3C1MRS<MRS2>
extern volatile __bit                   MRS2                __at(0x56A);	// @ (0xAD * 8 + 2)
#define                                 MRS2_bit            _BIT_ACCESS(I3C1MRS,2)
// I3C1MRS<MRS3>
extern volatile __bit                   MRS3                __at(0x56B);	// @ (0xAD * 8 + 3)
#define                                 MRS3_bit            _BIT_ACCESS(I3C1MRS,3)
// I3C1MRS<MRS4>
extern volatile __bit                   MRS4                __at(0x56C);	// @ (0xAD * 8 + 4)
#define                                 MRS4_bit            _BIT_ACCESS(I3C1MRS,4)
// I3C1MRS<MRS5>
extern volatile __bit                   MRS5                __at(0x56D);	// @ (0xAD * 8 + 5)
#define                                 MRS5_bit            _BIT_ACCESS(I3C1MRS,5)
// I3C1MRS<MRS6>
extern volatile __bit                   MRS6                __at(0x56E);	// @ (0xAD * 8 + 6)
#define                                 MRS6_bit            _BIT_ACCESS(I3C1MRS,6)
// I3C1MRS<MRS7>
extern volatile __bit                   MRS7                __at(0x56F);	// @ (0xAD * 8 + 7)
#define                                 MRS7_bit            _BIT_ACCESS(I3C1MRS,7)
// SPI1CON0<MST>
extern volatile __bit                   MST                 __at(0xED9);	// @ (0x1DB * 8 + 1)
#define                                 MST_bit             _BIT_ACCESS(SPI1CON0,1)
// I3C1ERRIE1<MWLOEIE>
extern volatile __bit                   MWLOEIE             __at(0x48A);	// @ (0x91 * 8 + 2)
#define                                 MWLOEIE_bit         _BIT_ACCESS(I3C1ERRIE1,2)
// I3C1ERRIR1<MWLOEIF>
extern volatile __bit                   MWLOEIF             __at(0x46A);	// @ (0x8D * 8 + 2)
#define                                 MWLOEIF_bit         _BIT_ACCESS(I3C1ERRIR1,2)
// I3C1MWS<MWS0>
extern volatile __bit                   MWS0                __at(0x560);	// @ (0xAC * 8 + 0)
#define                                 MWS0_bit            _BIT_ACCESS(I3C1MWS,0)
// I3C1MWS<MWS1>
extern volatile __bit                   MWS1                __at(0x561);	// @ (0xAC * 8 + 1)
#define                                 MWS1_bit            _BIT_ACCESS(I3C1MWS,1)
// I3C1MWS<MWS2>
extern volatile __bit                   MWS2                __at(0x562);	// @ (0xAC * 8 + 2)
#define                                 MWS2_bit            _BIT_ACCESS(I3C1MWS,2)
// I3C1MWS<MWS3>
extern volatile __bit                   MWS3                __at(0x563);	// @ (0xAC * 8 + 3)
#define                                 MWS3_bit            _BIT_ACCESS(I3C1MWS,3)
// I3C1MWS<MWS4>
extern volatile __bit                   MWS4                __at(0x564);	// @ (0xAC * 8 + 4)
#define                                 MWS4_bit            _BIT_ACCESS(I3C1MWS,4)
// I3C1MWS<MWS5>
extern volatile __bit                   MWS5                __at(0x565);	// @ (0xAC * 8 + 5)
#define                                 MWS5_bit            _BIT_ACCESS(I3C1MWS,5)
// I3C1MWS<MWS6>
extern volatile __bit                   MWS6                __at(0x566);	// @ (0xAC * 8 + 6)
#define                                 MWS6_bit            _BIT_ACCESS(I3C1MWS,6)
// I3C1MWS<MWS7>
extern volatile __bit                   MWS7                __at(0x567);	// @ (0xAC * 8 + 7)
#define                                 MWS7_bit            _BIT_ACCESS(I3C1MWS,7)
// I2C1ERR<NACK1IE>
extern volatile __bit                   NACK1IE             __at(0xF60);	// @ (0x1EC * 8 + 0)
#define                                 NACK1IE_bit         _BIT_ACCESS(I2C1ERR,0)
// I2C1ERR<NACK1IF>
extern volatile __bit                   NACK1IF             __at(0xF64);	// @ (0x1EC * 8 + 4)
#define                                 NACK1IF_bit         _BIT_ACCESS(I2C1ERR,4)
// I2C1ERR<NACKIE>
extern volatile __bit                   NACKIE              __at(0xF60);	// @ (0x1EC * 8 + 0)
#define                                 NACKIE_bit          _BIT_ACCESS(I2C1ERR,0)
// I2C1ERR<NACKIF>
extern volatile __bit                   NACKIF              __at(0xF64);	// @ (0x1EC * 8 + 4)
#define                                 NACKIF_bit          _BIT_ACCESS(I2C1ERR,4)
// OSCCON1<NDIV0>
extern volatile __bit                   NDIV0               __at(0x3D0);	// @ (0x7A * 8 + 0)
#define                                 NDIV0_bit           _BIT_ACCESS(OSCCON1,0)
// OSCCON1<NDIV1>
extern volatile __bit                   NDIV1               __at(0x3D1);	// @ (0x7A * 8 + 1)
#define                                 NDIV1_bit           _BIT_ACCESS(OSCCON1,1)
// OSCCON1<NDIV2>
extern volatile __bit                   NDIV2               __at(0x3D2);	// @ (0x7A * 8 + 2)
#define                                 NDIV2_bit           _BIT_ACCESS(OSCCON1,2)
// OSCCON1<NDIV3>
extern volatile __bit                   NDIV3               __at(0x3D3);	// @ (0x7A * 8 + 3)
#define                                 NDIV3_bit           _BIT_ACCESS(OSCCON1,3)
// OSCCON1<NOSC0>
extern volatile __bit                   NOSC0               __at(0x3D4);	// @ (0x7A * 8 + 4)
#define                                 NOSC0_bit           _BIT_ACCESS(OSCCON1,4)
// OSCCON1<NOSC1>
extern volatile __bit                   NOSC1               __at(0x3D5);	// @ (0x7A * 8 + 5)
#define                                 NOSC1_bit           _BIT_ACCESS(OSCCON1,5)
// OSCCON1<NOSC2>
extern volatile __bit                   NOSC2               __at(0x3D6);	// @ (0x7A * 8 + 6)
#define                                 NOSC2_bit           _BIT_ACCESS(OSCCON1,6)
// OSCCON3<NOSCR>
extern volatile __bit                   NOSCR               __at(0x3E3);	// @ (0x7C * 8 + 3)
#define                                 NOSCR_bit           _BIT_ACCESS(OSCCON3,3)
// I2C1STAT0<NOT_A>
extern volatile __bit                   NOT_A               __at(0xF23);	// @ (0x1E4 * 8 + 3)
#define                                 NOT_A_bit           _BIT_ACCESS(I2C1STAT0,3)
// I2C1STAT0<NOT_ADDRESS>
extern volatile __bit                   NOT_ADDRESS         __at(0xF23);	// @ (0x1E4 * 8 + 3)
#define                                 NOT_ADDRESS_bit     _BIT_ACCESS(I2C1STAT0,3)
// PCON0<NOT_BOR>
extern volatile __bit                   NOT_BOR             __at(0x2780);	// @ (0x4F0 * 8 + 0)
#define                                 NOT_BOR_bit         _BIT_ACCESS(PCON0,0)
// PCON1<NOT_MEMV>
extern volatile __bit                   NOT_MEMV            __at(0x2789);	// @ (0x4F1 * 8 + 1)
#define                                 NOT_MEMV_bit        _BIT_ACCESS(PCON1,1)
// PCON0<NOT_POR>
extern volatile __bit                   NOT_POR             __at(0x2781);	// @ (0x4F0 * 8 + 1)
#define                                 NOT_POR_bit         _BIT_ACCESS(PCON0,1)
// PCON1<NOT_PORVDDIO2>
extern volatile __bit                   NOT_PORVDDIO2       __at(0x278B);	// @ (0x4F1 * 8 + 3)
#define                                 NOT_PORVDDIO2_bit   _BIT_ACCESS(PCON1,3)
// PCON1<NOT_RCM>
extern volatile __bit                   NOT_RCM             __at(0x2788);	// @ (0x4F1 * 8 + 0)
#define                                 NOT_RCM_bit         _BIT_ACCESS(PCON1,0)
// PCON0<NOT_RI>
extern volatile __bit                   NOT_RI              __at(0x2782);	// @ (0x4F0 * 8 + 2)
#define                                 NOT_RI_bit          _BIT_ACCESS(PCON0,2)
// PCON0<NOT_RMCLR>
extern volatile __bit                   NOT_RMCLR           __at(0x2783);	// @ (0x4F0 * 8 + 3)
#define                                 NOT_RMCLR_bit       _BIT_ACCESS(PCON0,3)
// PCON1<NOT_RVREG>
extern volatile __bit                   NOT_RVREG           __at(0x278A);	// @ (0x4F1 * 8 + 2)
#define                                 NOT_RVREG_bit       _BIT_ACCESS(PCON1,2)
// PCON0<NOT_RWDT>
extern volatile __bit                   NOT_RWDT            __at(0x2784);	// @ (0x4F0 * 8 + 4)
#define                                 NOT_RWDT_bit        _BIT_ACCESS(PCON0,4)
// T1CON<NOT_SYNC>
extern volatile __bit                   NOT_SYNC            __at(0x84A);	// @ (0x109 * 8 + 2)
#define                                 NOT_SYNC_bit        _BIT_ACCESS(T1CON,2)
// T1GCON<NOT_T1DONE>
extern volatile __bit                   NOT_T1DONE          __at(0x853);	// @ (0x10A * 8 + 3)
#define                                 NOT_T1DONE_bit      _BIT_ACCESS(T1GCON,3)
// T1CON<NOT_T1SYNC>
extern volatile __bit                   NOT_T1SYNC          __at(0x84A);	// @ (0x109 * 8 + 2)
#define                                 NOT_T1SYNC_bit      _BIT_ACCESS(T1CON,2)
// I2C1STAT0<NOT_W>
extern volatile __bit                   NOT_W               __at(0xF24);	// @ (0x1E4 * 8 + 4)
#define                                 NOT_W_bit           _BIT_ACCESS(I2C1STAT0,4)
// PCON0<NOT_WDTWV>
extern volatile __bit                   NOT_WDTWV           __at(0x2785);	// @ (0x4F0 * 8 + 5)
#define                                 NOT_WDTWV_bit       _BIT_ACCESS(PCON0,5)
// I2C1STAT0<NOT_WRITE>
extern volatile __bit                   NOT_WRITE           __at(0xF24);	// @ (0x1E4 * 8 + 4)
#define                                 NOT_WRITE_bit       _BIT_ACCESS(I2C1STAT0,4)
// ADREF<NREF0>
extern volatile __bit                   NREF0               __at(0x11A4);	// @ (0x234 * 8 + 4)
#define                                 NREF0_bit           _BIT_ACCESS(ADREF,4)
// NVMADRL<NVMADR0>
extern volatile __bit                   NVMADR0             __at(0x2D8);	// @ (0x5B * 8 + 0)
#define                                 NVMADR0_bit         _BIT_ACCESS(NVMADRL,0)
// NVMADRL<NVMADR1>
extern volatile __bit                   NVMADR1             __at(0x2D9);	// @ (0x5B * 8 + 1)
#define                                 NVMADR1_bit         _BIT_ACCESS(NVMADRL,1)
// NVMADRH<NVMADR10>
extern volatile __bit                   NVMADR10            __at(0x2E2);	// @ (0x5C * 8 + 2)
#define                                 NVMADR10_bit        _BIT_ACCESS(NVMADRH,2)
// NVMADRH<NVMADR11>
extern volatile __bit                   NVMADR11            __at(0x2E3);	// @ (0x5C * 8 + 3)
#define                                 NVMADR11_bit        _BIT_ACCESS(NVMADRH,3)
// NVMADRH<NVMADR12>
extern volatile __bit                   NVMADR12            __at(0x2E4);	// @ (0x5C * 8 + 4)
#define                                 NVMADR12_bit        _BIT_ACCESS(NVMADRH,4)
// NVMADRH<NVMADR13>
extern volatile __bit                   NVMADR13            __at(0x2E5);	// @ (0x5C * 8 + 5)
#define                                 NVMADR13_bit        _BIT_ACCESS(NVMADRH,5)
// NVMADRH<NVMADR14>
extern volatile __bit                   NVMADR14            __at(0x2E6);	// @ (0x5C * 8 + 6)
#define                                 NVMADR14_bit        _BIT_ACCESS(NVMADRH,6)
// NVMADRH<NVMADR15>
extern volatile __bit                   NVMADR15            __at(0x2E7);	// @ (0x5C * 8 + 7)
#define                                 NVMADR15_bit        _BIT_ACCESS(NVMADRH,7)
// NVMADRU<NVMADR16>
extern volatile __bit                   NVMADR16            __at(0x2E8);	// @ (0x5D * 8 + 0)
#define                                 NVMADR16_bit        _BIT_ACCESS(NVMADRU,0)
// NVMADRU<NVMADR17>
extern volatile __bit                   NVMADR17            __at(0x2E9);	// @ (0x5D * 8 + 1)
#define                                 NVMADR17_bit        _BIT_ACCESS(NVMADRU,1)
// NVMADRU<NVMADR18>
extern volatile __bit                   NVMADR18            __at(0x2EA);	// @ (0x5D * 8 + 2)
#define                                 NVMADR18_bit        _BIT_ACCESS(NVMADRU,2)
// NVMADRU<NVMADR19>
extern volatile __bit                   NVMADR19            __at(0x2EB);	// @ (0x5D * 8 + 3)
#define                                 NVMADR19_bit        _BIT_ACCESS(NVMADRU,3)
// NVMADRL<NVMADR2>
extern volatile __bit                   NVMADR2             __at(0x2DA);	// @ (0x5B * 8 + 2)
#define                                 NVMADR2_bit         _BIT_ACCESS(NVMADRL,2)
// NVMADRU<NVMADR20>
extern volatile __bit                   NVMADR20            __at(0x2EC);	// @ (0x5D * 8 + 4)
#define                                 NVMADR20_bit        _BIT_ACCESS(NVMADRU,4)
// NVMADRU<NVMADR21>
extern volatile __bit                   NVMADR21            __at(0x2ED);	// @ (0x5D * 8 + 5)
#define                                 NVMADR21_bit        _BIT_ACCESS(NVMADRU,5)
// NVMADRL<NVMADR3>
extern volatile __bit                   NVMADR3             __at(0x2DB);	// @ (0x5B * 8 + 3)
#define                                 NVMADR3_bit         _BIT_ACCESS(NVMADRL,3)
// NVMADRL<NVMADR4>
extern volatile __bit                   NVMADR4             __at(0x2DC);	// @ (0x5B * 8 + 4)
#define                                 NVMADR4_bit         _BIT_ACCESS(NVMADRL,4)
// NVMADRL<NVMADR5>
extern volatile __bit                   NVMADR5             __at(0x2DD);	// @ (0x5B * 8 + 5)
#define                                 NVMADR5_bit         _BIT_ACCESS(NVMADRL,5)
// NVMADRL<NVMADR6>
extern volatile __bit                   NVMADR6             __at(0x2DE);	// @ (0x5B * 8 + 6)
#define                                 NVMADR6_bit         _BIT_ACCESS(NVMADRL,6)
// NVMADRL<NVMADR7>
extern volatile __bit                   NVMADR7             __at(0x2DF);	// @ (0x5B * 8 + 7)
#define                                 NVMADR7_bit         _BIT_ACCESS(NVMADRL,7)
// NVMADRH<NVMADR8>
extern volatile __bit                   NVMADR8             __at(0x2E0);	// @ (0x5C * 8 + 0)
#define                                 NVMADR8_bit         _BIT_ACCESS(NVMADRH,0)
// NVMADRH<NVMADR9>
extern volatile __bit                   NVMADR9             __at(0x2E1);	// @ (0x5C * 8 + 1)
#define                                 NVMADR9_bit         _BIT_ACCESS(NVMADRH,1)
// NVMDATL<NVMDAT0>
extern volatile __bit                   NVMDAT0             __at(0x2F0);	// @ (0x5E * 8 + 0)
#define                                 NVMDAT0_bit         _BIT_ACCESS(NVMDATL,0)
// NVMDATL<NVMDAT1>
extern volatile __bit                   NVMDAT1             __at(0x2F1);	// @ (0x5E * 8 + 1)
#define                                 NVMDAT1_bit         _BIT_ACCESS(NVMDATL,1)
// NVMDATH<NVMDAT10>
extern volatile __bit                   NVMDAT10            __at(0x2FA);	// @ (0x5F * 8 + 2)
#define                                 NVMDAT10_bit        _BIT_ACCESS(NVMDATH,2)
// NVMDATH<NVMDAT11>
extern volatile __bit                   NVMDAT11            __at(0x2FB);	// @ (0x5F * 8 + 3)
#define                                 NVMDAT11_bit        _BIT_ACCESS(NVMDATH,3)
// NVMDATH<NVMDAT12>
extern volatile __bit                   NVMDAT12            __at(0x2FC);	// @ (0x5F * 8 + 4)
#define                                 NVMDAT12_bit        _BIT_ACCESS(NVMDATH,4)
// NVMDATH<NVMDAT13>
extern volatile __bit                   NVMDAT13            __at(0x2FD);	// @ (0x5F * 8 + 5)
#define                                 NVMDAT13_bit        _BIT_ACCESS(NVMDATH,5)
// NVMDATH<NVMDAT14>
extern volatile __bit                   NVMDAT14            __at(0x2FE);	// @ (0x5F * 8 + 6)
#define                                 NVMDAT14_bit        _BIT_ACCESS(NVMDATH,6)
// NVMDATH<NVMDAT15>
extern volatile __bit                   NVMDAT15            __at(0x2FF);	// @ (0x5F * 8 + 7)
#define                                 NVMDAT15_bit        _BIT_ACCESS(NVMDATH,7)
// NVMDATL<NVMDAT2>
extern volatile __bit                   NVMDAT2             __at(0x2F2);	// @ (0x5E * 8 + 2)
#define                                 NVMDAT2_bit         _BIT_ACCESS(NVMDATL,2)
// NVMDATL<NVMDAT3>
extern volatile __bit                   NVMDAT3             __at(0x2F3);	// @ (0x5E * 8 + 3)
#define                                 NVMDAT3_bit         _BIT_ACCESS(NVMDATL,3)
// NVMDATL<NVMDAT4>
extern volatile __bit                   NVMDAT4             __at(0x2F4);	// @ (0x5E * 8 + 4)
#define                                 NVMDAT4_bit         _BIT_ACCESS(NVMDATL,4)
// NVMDATL<NVMDAT5>
extern volatile __bit                   NVMDAT5             __at(0x2F5);	// @ (0x5E * 8 + 5)
#define                                 NVMDAT5_bit         _BIT_ACCESS(NVMDATL,5)
// NVMDATL<NVMDAT6>
extern volatile __bit                   NVMDAT6             __at(0x2F6);	// @ (0x5E * 8 + 6)
#define                                 NVMDAT6_bit         _BIT_ACCESS(NVMDATL,6)
// NVMDATL<NVMDAT7>
extern volatile __bit                   NVMDAT7             __at(0x2F7);	// @ (0x5E * 8 + 7)
#define                                 NVMDAT7_bit         _BIT_ACCESS(NVMDATL,7)
// NVMDATH<NVMDAT8>
extern volatile __bit                   NVMDAT8             __at(0x2F8);	// @ (0x5F * 8 + 0)
#define                                 NVMDAT8_bit         _BIT_ACCESS(NVMDATH,0)
// NVMDATH<NVMDAT9>
extern volatile __bit                   NVMDAT9             __at(0x2F9);	// @ (0x5F * 8 + 1)
#define                                 NVMDAT9_bit         _BIT_ACCESS(NVMDATH,1)
// NVMCON0<NVMGO>
extern volatile __bit                   NVMGO               __at(0x2C0);	// @ (0x58 * 8 + 0)
#define                                 NVMGO_bit           _BIT_ACCESS(NVMCON0,0)
// PIE2<NVMIE>
extern volatile __bit                   NVMIE               __at(0x23AC);	// @ (0x475 * 8 + 4)
#define                                 NVMIE_bit           _BIT_ACCESS(PIE2,4)
// PIR2<NVMIF>
extern volatile __bit                   NVMIF               __at(0x235C);	// @ (0x46B * 8 + 4)
#define                                 NVMIF_bit           _BIT_ACCESS(PIR2,4)
// IPR2<NVMIP>
extern volatile __bit                   NVMIP               __at(0x23FC);	// @ (0x47F * 8 + 4)
#define                                 NVMIP_bit           _BIT_ACCESS(IPR2,4)
// ODCONA<ODCA0>
extern volatile __bit                   ODCA0               __at(0x20C0);	// @ (0x418 * 8 + 0)
#define                                 ODCA0_bit           _BIT_ACCESS(ODCONA,0)
// ODCONA<ODCA1>
extern volatile __bit                   ODCA1               __at(0x20C1);	// @ (0x418 * 8 + 1)
#define                                 ODCA1_bit           _BIT_ACCESS(ODCONA,1)
// ODCONA<ODCA2>
extern volatile __bit                   ODCA2               __at(0x20C2);	// @ (0x418 * 8 + 2)
#define                                 ODCA2_bit           _BIT_ACCESS(ODCONA,2)
// ODCONA<ODCA4>
extern volatile __bit                   ODCA4               __at(0x20C4);	// @ (0x418 * 8 + 4)
#define                                 ODCA4_bit           _BIT_ACCESS(ODCONA,4)
// ODCONA<ODCA5>
extern volatile __bit                   ODCA5               __at(0x20C5);	// @ (0x418 * 8 + 5)
#define                                 ODCA5_bit           _BIT_ACCESS(ODCONA,5)
// ODCONC<ODCC0>
extern volatile __bit                   ODCC0               __at(0x2160);	// @ (0x42C * 8 + 0)
#define                                 ODCC0_bit           _BIT_ACCESS(ODCONC,0)
// ODCONC<ODCC1>
extern volatile __bit                   ODCC1               __at(0x2161);	// @ (0x42C * 8 + 1)
#define                                 ODCC1_bit           _BIT_ACCESS(ODCONC,1)
// ODCONC<ODCC3>
extern volatile __bit                   ODCC3               __at(0x2163);	// @ (0x42C * 8 + 3)
#define                                 ODCC3_bit           _BIT_ACCESS(ODCONC,3)
// ODCONC<ODCC4>
extern volatile __bit                   ODCC4               __at(0x2164);	// @ (0x42C * 8 + 4)
#define                                 ODCC4_bit           _BIT_ACCESS(ODCONC,4)
// ODCONC<ODCC5>
extern volatile __bit                   ODCC5               __at(0x2165);	// @ (0x42C * 8 + 5)
#define                                 ODCC5_bit           _BIT_ACCESS(ODCONC,5)
// ODCONC<ODCC6>
extern volatile __bit                   ODCC6               __at(0x2166);	// @ (0x42C * 8 + 6)
#define                                 ODCC6_bit           _BIT_ACCESS(ODCONC,6)
// ODCONC<ODCC7>
extern volatile __bit                   ODCC7               __at(0x2167);	// @ (0x42C * 8 + 7)
#define                                 ODCC7_bit           _BIT_ACCESS(ODCONC,7)
// OSCCON3<ORDY>
extern volatile __bit                   ORDY                __at(0x3E4);	// @ (0x7C * 8 + 4)
#define                                 ORDY_bit            _BIT_ACCESS(OSCCON3,4)
// ACTCON<ORS>
extern volatile __bit                   ORS                 __at(0x409);	// @ (0x81 * 8 + 1)
#define                                 ORS_bit             _BIT_ACCESS(ACTCON,1)
// PIE3<OSFIE>
extern volatile __bit                   OSFIE               __at(0x23B1);	// @ (0x476 * 8 + 1)
#define                                 OSFIE_bit           _BIT_ACCESS(PIE3,1)
// PIR3<OSFIF>
extern volatile __bit                   OSFIF               __at(0x2361);	// @ (0x46C * 8 + 1)
#define                                 OSFIF_bit           _BIT_ACCESS(PIR3,1)
// IPR3<OSFIP>
extern volatile __bit                   OSFIP               __at(0x2401);	// @ (0x480 * 8 + 1)
#define                                 OSFIP_bit           _BIT_ACCESS(IPR3,1)
// CRCOUTL<OUT0>
extern volatile __bit                   OUT0                __at(0x320);	// @ (0x64 * 8 + 0)
#define                                 OUT0_bit            _BIT_ACCESS(CRCOUTL,0)
// CRCOUTL<OUT1>
extern volatile __bit                   OUT1                __at(0x321);	// @ (0x64 * 8 + 1)
#define                                 OUT1_bit            _BIT_ACCESS(CRCOUTL,1)
// CRCOUTH<OUT10>
extern volatile __bit                   OUT10               __at(0x32A);	// @ (0x65 * 8 + 2)
#define                                 OUT10_bit           _BIT_ACCESS(CRCOUTH,2)
// CRCOUTH<OUT11>
extern volatile __bit                   OUT11               __at(0x32B);	// @ (0x65 * 8 + 3)
#define                                 OUT11_bit           _BIT_ACCESS(CRCOUTH,3)
// CRCOUTH<OUT12>
extern volatile __bit                   OUT12               __at(0x32C);	// @ (0x65 * 8 + 4)
#define                                 OUT12_bit           _BIT_ACCESS(CRCOUTH,4)
// CRCOUTH<OUT13>
extern volatile __bit                   OUT13               __at(0x32D);	// @ (0x65 * 8 + 5)
#define                                 OUT13_bit           _BIT_ACCESS(CRCOUTH,5)
// CRCOUTH<OUT14>
extern volatile __bit                   OUT14               __at(0x32E);	// @ (0x65 * 8 + 6)
#define                                 OUT14_bit           _BIT_ACCESS(CRCOUTH,6)
// CRCOUTH<OUT15>
extern volatile __bit                   OUT15               __at(0x32F);	// @ (0x65 * 8 + 7)
#define                                 OUT15_bit           _BIT_ACCESS(CRCOUTH,7)
// CRCOUTU<OUT16>
extern volatile __bit                   OUT16               __at(0x330);	// @ (0x66 * 8 + 0)
#define                                 OUT16_bit           _BIT_ACCESS(CRCOUTU,0)
// CRCOUTU<OUT17>
extern volatile __bit                   OUT17               __at(0x331);	// @ (0x66 * 8 + 1)
#define                                 OUT17_bit           _BIT_ACCESS(CRCOUTU,1)
// CRCOUTU<OUT18>
extern volatile __bit                   OUT18               __at(0x332);	// @ (0x66 * 8 + 2)
#define                                 OUT18_bit           _BIT_ACCESS(CRCOUTU,2)
// CRCOUTU<OUT19>
extern volatile __bit                   OUT19               __at(0x333);	// @ (0x66 * 8 + 3)
#define                                 OUT19_bit           _BIT_ACCESS(CRCOUTU,3)
// CRCOUTL<OUT2>
extern volatile __bit                   OUT2                __at(0x322);	// @ (0x64 * 8 + 2)
#define                                 OUT2_bit            _BIT_ACCESS(CRCOUTL,2)
// CRCOUTU<OUT20>
extern volatile __bit                   OUT20               __at(0x334);	// @ (0x66 * 8 + 4)
#define                                 OUT20_bit           _BIT_ACCESS(CRCOUTU,4)
// CRCOUTU<OUT21>
extern volatile __bit                   OUT21               __at(0x335);	// @ (0x66 * 8 + 5)
#define                                 OUT21_bit           _BIT_ACCESS(CRCOUTU,5)
// CRCOUTU<OUT22>
extern volatile __bit                   OUT22               __at(0x336);	// @ (0x66 * 8 + 6)
#define                                 OUT22_bit           _BIT_ACCESS(CRCOUTU,6)
// CRCOUTU<OUT23>
extern volatile __bit                   OUT23               __at(0x337);	// @ (0x66 * 8 + 7)
#define                                 OUT23_bit           _BIT_ACCESS(CRCOUTU,7)
// CRCOUTT<OUT24>
extern volatile __bit                   OUT24               __at(0x338);	// @ (0x67 * 8 + 0)
#define                                 OUT24_bit           _BIT_ACCESS(CRCOUTT,0)
// CRCOUTT<OUT25>
extern volatile __bit                   OUT25               __at(0x339);	// @ (0x67 * 8 + 1)
#define                                 OUT25_bit           _BIT_ACCESS(CRCOUTT,1)
// CRCOUTT<OUT26>
extern volatile __bit                   OUT26               __at(0x33A);	// @ (0x67 * 8 + 2)
#define                                 OUT26_bit           _BIT_ACCESS(CRCOUTT,2)
// CRCOUTT<OUT27>
extern volatile __bit                   OUT27               __at(0x33B);	// @ (0x67 * 8 + 3)
#define                                 OUT27_bit           _BIT_ACCESS(CRCOUTT,3)
// CRCOUTT<OUT28>
extern volatile __bit                   OUT28               __at(0x33C);	// @ (0x67 * 8 + 4)
#define                                 OUT28_bit           _BIT_ACCESS(CRCOUTT,4)
// CRCOUTT<OUT29>
extern volatile __bit                   OUT29               __at(0x33D);	// @ (0x67 * 8 + 5)
#define                                 OUT29_bit           _BIT_ACCESS(CRCOUTT,5)
// CRCOUTL<OUT3>
extern volatile __bit                   OUT3                __at(0x323);	// @ (0x64 * 8 + 3)
#define                                 OUT3_bit            _BIT_ACCESS(CRCOUTL,3)
// CRCOUTT<OUT30>
extern volatile __bit                   OUT30               __at(0x33E);	// @ (0x67 * 8 + 6)
#define                                 OUT30_bit           _BIT_ACCESS(CRCOUTT,6)
// CRCOUTT<OUT31>
extern volatile __bit                   OUT31               __at(0x33F);	// @ (0x67 * 8 + 7)
#define                                 OUT31_bit           _BIT_ACCESS(CRCOUTT,7)
// CRCOUTL<OUT4>
extern volatile __bit                   OUT4                __at(0x324);	// @ (0x64 * 8 + 4)
#define                                 OUT4_bit            _BIT_ACCESS(CRCOUTL,4)
// CRCOUTL<OUT5>
extern volatile __bit                   OUT5                __at(0x325);	// @ (0x64 * 8 + 5)
#define                                 OUT5_bit            _BIT_ACCESS(CRCOUTL,5)
// CRCOUTL<OUT6>
extern volatile __bit                   OUT6                __at(0x326);	// @ (0x64 * 8 + 6)
#define                                 OUT6_bit            _BIT_ACCESS(CRCOUTL,6)
// CRCOUTL<OUT7>
extern volatile __bit                   OUT7                __at(0x327);	// @ (0x64 * 8 + 7)
#define                                 OUT7_bit            _BIT_ACCESS(CRCOUTL,7)
// CRCOUTH<OUT8>
extern volatile __bit                   OUT8                __at(0x328);	// @ (0x65 * 8 + 0)
#define                                 OUT8_bit            _BIT_ACCESS(CRCOUTH,0)
// CRCOUTH<OUT9>
extern volatile __bit                   OUT9                __at(0x329);	// @ (0x65 * 8 + 1)
#define                                 OUT9_bit            _BIT_ACCESS(CRCOUTH,1)
// CWG1STR<OVRA>
extern volatile __bit                   OVRA                __at(0xD0C);	// @ (0x1A1 * 8 + 4)
#define                                 OVRA_bit            _BIT_ACCESS(CWG1STR,4)
// CWG1STR<OVRB>
extern volatile __bit                   OVRB                __at(0xD0D);	// @ (0x1A1 * 8 + 5)
#define                                 OVRB_bit            _BIT_ACCESS(CWG1STR,5)
// CWG1STR<OVRC>
extern volatile __bit                   OVRC                __at(0xD0E);	// @ (0x1A1 * 8 + 6)
#define                                 OVRC_bit            _BIT_ACCESS(CWG1STR,6)
// CWG1STR<OVRD>
extern volatile __bit                   OVRD                __at(0xD0F);	// @ (0x1A1 * 8 + 7)
#define                                 OVRD_bit            _BIT_ACCESS(CWG1STR,7)
// U1P1H<P1H>
extern volatile __bit                   P1H                 __at(0xDA0);	// @ (0x1B4 * 8 + 0)
#define                                 P1H_bit             _BIT_ACCESS(U1P1H,0)
// U1P2H<P2H>
extern volatile __bit                   P2H                 __at(0xDB0);	// @ (0x1B6 * 8 + 0)
#define                                 P2H_bit             _BIT_ACCESS(U1P2H,0)
// U1P3H<P3H>
extern volatile __bit                   P3H                 __at(0xDC0);	// @ (0x1B8 * 8 + 0)
#define                                 P3H_bit             _BIT_ACCESS(U1P3H,0)
// I2C1PIE<PC1IE>
extern volatile __bit                   PC1IE               __at(0xF5A);	// @ (0x1EB * 8 + 2)
#define                                 PC1IE_bit           _BIT_ACCESS(I2C1PIE,2)
// I2C1PIR<PC1IF>
extern volatile __bit                   PC1IF               __at(0xF52);	// @ (0x1EA * 8 + 2)
#define                                 PC1IF_bit           _BIT_ACCESS(I2C1PIR,2)
// ADCON1<PCSC>
extern volatile __bit                   PCSC                __at(0x1181);	// @ (0x230 * 8 + 1)
#define                                 PCSC_bit            _BIT_ACCESS(ADCON1,1)
// I3C1DSTAT0<PERR>
extern volatile __bit                   PERR                __at(0x555);	// @ (0xAA * 8 + 5)
#define                                 PERR_bit            _BIT_ACCESS(I3C1DSTAT0,5)
// I3C1PID0<PID0>
extern volatile __bit                   PID0                __at(0x510);	// @ (0xA2 * 8 + 0)
#define                                 PID0_bit            _BIT_ACCESS(I3C1PID0,0)
// I3C1PID0<PID1>
extern volatile __bit                   PID1                __at(0x511);	// @ (0xA2 * 8 + 1)
#define                                 PID1_bit            _BIT_ACCESS(I3C1PID0,1)
// I3C1PID1<PID10>
extern volatile __bit                   PID10               __at(0x51A);	// @ (0xA3 * 8 + 2)
#define                                 PID10_bit           _BIT_ACCESS(I3C1PID1,2)
// I3C1PID1<PID11>
extern volatile __bit                   PID11               __at(0x51B);	// @ (0xA3 * 8 + 3)
#define                                 PID11_bit           _BIT_ACCESS(I3C1PID1,3)
// I3C1PID1<PID12>
extern volatile __bit                   PID12               __at(0x51C);	// @ (0xA3 * 8 + 4)
#define                                 PID12_bit           _BIT_ACCESS(I3C1PID1,4)
// I3C1PID1<PID13>
extern volatile __bit                   PID13               __at(0x51D);	// @ (0xA3 * 8 + 5)
#define                                 PID13_bit           _BIT_ACCESS(I3C1PID1,5)
// I3C1PID1<PID14>
extern volatile __bit                   PID14               __at(0x51E);	// @ (0xA3 * 8 + 6)
#define                                 PID14_bit           _BIT_ACCESS(I3C1PID1,6)
// I3C1PID1<PID15>
extern volatile __bit                   PID15               __at(0x51F);	// @ (0xA3 * 8 + 7)
#define                                 PID15_bit           _BIT_ACCESS(I3C1PID1,7)
// I3C1PID2<PID16>
extern volatile __bit                   PID16               __at(0x520);	// @ (0xA4 * 8 + 0)
#define                                 PID16_bit           _BIT_ACCESS(I3C1PID2,0)
// I3C1PID2<PID17>
extern volatile __bit                   PID17               __at(0x521);	// @ (0xA4 * 8 + 1)
#define                                 PID17_bit           _BIT_ACCESS(I3C1PID2,1)
// I3C1PID2<PID18>
extern volatile __bit                   PID18               __at(0x522);	// @ (0xA4 * 8 + 2)
#define                                 PID18_bit           _BIT_ACCESS(I3C1PID2,2)
// I3C1PID2<PID19>
extern volatile __bit                   PID19               __at(0x523);	// @ (0xA4 * 8 + 3)
#define                                 PID19_bit           _BIT_ACCESS(I3C1PID2,3)
// I3C1PID0<PID2>
extern volatile __bit                   PID2                __at(0x512);	// @ (0xA2 * 8 + 2)
#define                                 PID2_bit            _BIT_ACCESS(I3C1PID0,2)
// I3C1PID2<PID20>
extern volatile __bit                   PID20               __at(0x524);	// @ (0xA4 * 8 + 4)
#define                                 PID20_bit           _BIT_ACCESS(I3C1PID2,4)
// I3C1PID2<PID21>
extern volatile __bit                   PID21               __at(0x525);	// @ (0xA4 * 8 + 5)
#define                                 PID21_bit           _BIT_ACCESS(I3C1PID2,5)
// I3C1PID2<PID22>
extern volatile __bit                   PID22               __at(0x526);	// @ (0xA4 * 8 + 6)
#define                                 PID22_bit           _BIT_ACCESS(I3C1PID2,6)
// I3C1PID2<PID23>
extern volatile __bit                   PID23               __at(0x527);	// @ (0xA4 * 8 + 7)
#define                                 PID23_bit           _BIT_ACCESS(I3C1PID2,7)
// I3C1PID3<PID24>
extern volatile __bit                   PID24               __at(0x528);	// @ (0xA5 * 8 + 0)
#define                                 PID24_bit           _BIT_ACCESS(I3C1PID3,0)
// I3C1PID3<PID25>
extern volatile __bit                   PID25               __at(0x529);	// @ (0xA5 * 8 + 1)
#define                                 PID25_bit           _BIT_ACCESS(I3C1PID3,1)
// I3C1PID3<PID26>
extern volatile __bit                   PID26               __at(0x52A);	// @ (0xA5 * 8 + 2)
#define                                 PID26_bit           _BIT_ACCESS(I3C1PID3,2)
// I3C1PID3<PID27>
extern volatile __bit                   PID27               __at(0x52B);	// @ (0xA5 * 8 + 3)
#define                                 PID27_bit           _BIT_ACCESS(I3C1PID3,3)
// I3C1PID3<PID28>
extern volatile __bit                   PID28               __at(0x52C);	// @ (0xA5 * 8 + 4)
#define                                 PID28_bit           _BIT_ACCESS(I3C1PID3,4)
// I3C1PID3<PID29>
extern volatile __bit                   PID29               __at(0x52D);	// @ (0xA5 * 8 + 5)
#define                                 PID29_bit           _BIT_ACCESS(I3C1PID3,5)
// I3C1PID0<PID3>
extern volatile __bit                   PID3                __at(0x513);	// @ (0xA2 * 8 + 3)
#define                                 PID3_bit            _BIT_ACCESS(I3C1PID0,3)
// I3C1PID3<PID30>
extern volatile __bit                   PID30               __at(0x52E);	// @ (0xA5 * 8 + 6)
#define                                 PID30_bit           _BIT_ACCESS(I3C1PID3,6)
// I3C1PID3<PID31>
extern volatile __bit                   PID31               __at(0x52F);	// @ (0xA5 * 8 + 7)
#define                                 PID31_bit           _BIT_ACCESS(I3C1PID3,7)
// I3C1PID4<PID32>
extern volatile __bit                   PID32               __at(0x530);	// @ (0xA6 * 8 + 0)
#define                                 PID32_bit           _BIT_ACCESS(I3C1PID4,0)
// I3C1PID4<PID33>
extern volatile __bit                   PID33               __at(0x531);	// @ (0xA6 * 8 + 1)
#define                                 PID33_bit           _BIT_ACCESS(I3C1PID4,1)
// I3C1PID4<PID34>
extern volatile __bit                   PID34               __at(0x532);	// @ (0xA6 * 8 + 2)
#define                                 PID34_bit           _BIT_ACCESS(I3C1PID4,2)
// I3C1PID4<PID35>
extern volatile __bit                   PID35               __at(0x533);	// @ (0xA6 * 8 + 3)
#define                                 PID35_bit           _BIT_ACCESS(I3C1PID4,3)
// I3C1PID4<PID36>
extern volatile __bit                   PID36               __at(0x534);	// @ (0xA6 * 8 + 4)
#define                                 PID36_bit           _BIT_ACCESS(I3C1PID4,4)
// I3C1PID4<PID37>
extern volatile __bit                   PID37               __at(0x535);	// @ (0xA6 * 8 + 5)
#define                                 PID37_bit           _BIT_ACCESS(I3C1PID4,5)
// I3C1PID4<PID38>
extern volatile __bit                   PID38               __at(0x536);	// @ (0xA6 * 8 + 6)
#define                                 PID38_bit           _BIT_ACCESS(I3C1PID4,6)
// I3C1PID4<PID39>
extern volatile __bit                   PID39               __at(0x537);	// @ (0xA6 * 8 + 7)
#define                                 PID39_bit           _BIT_ACCESS(I3C1PID4,7)
// I3C1PID0<PID4>
extern volatile __bit                   PID4                __at(0x514);	// @ (0xA2 * 8 + 4)
#define                                 PID4_bit            _BIT_ACCESS(I3C1PID0,4)
// I3C1PID5<PID40>
extern volatile __bit                   PID40               __at(0x538);	// @ (0xA7 * 8 + 0)
#define                                 PID40_bit           _BIT_ACCESS(I3C1PID5,0)
// I3C1PID5<PID41>
extern volatile __bit                   PID41               __at(0x539);	// @ (0xA7 * 8 + 1)
#define                                 PID41_bit           _BIT_ACCESS(I3C1PID5,1)
// I3C1PID5<PID42>
extern volatile __bit                   PID42               __at(0x53A);	// @ (0xA7 * 8 + 2)
#define                                 PID42_bit           _BIT_ACCESS(I3C1PID5,2)
// I3C1PID5<PID43>
extern volatile __bit                   PID43               __at(0x53B);	// @ (0xA7 * 8 + 3)
#define                                 PID43_bit           _BIT_ACCESS(I3C1PID5,3)
// I3C1PID5<PID44>
extern volatile __bit                   PID44               __at(0x53C);	// @ (0xA7 * 8 + 4)
#define                                 PID44_bit           _BIT_ACCESS(I3C1PID5,4)
// I3C1PID5<PID45>
extern volatile __bit                   PID45               __at(0x53D);	// @ (0xA7 * 8 + 5)
#define                                 PID45_bit           _BIT_ACCESS(I3C1PID5,5)
// I3C1PID5<PID46>
extern volatile __bit                   PID46               __at(0x53E);	// @ (0xA7 * 8 + 6)
#define                                 PID46_bit           _BIT_ACCESS(I3C1PID5,6)
// I3C1PID5<PID47>
extern volatile __bit                   PID47               __at(0x53F);	// @ (0xA7 * 8 + 7)
#define                                 PID47_bit           _BIT_ACCESS(I3C1PID5,7)
// I3C1PID0<PID5>
extern volatile __bit                   PID5                __at(0x515);	// @ (0xA2 * 8 + 5)
#define                                 PID5_bit            _BIT_ACCESS(I3C1PID0,5)
// I3C1PID0<PID6>
extern volatile __bit                   PID6                __at(0x516);	// @ (0xA2 * 8 + 6)
#define                                 PID6_bit            _BIT_ACCESS(I3C1PID0,6)
// I3C1PID0<PID7>
extern volatile __bit                   PID7                __at(0x517);	// @ (0xA2 * 8 + 7)
#define                                 PID7_bit            _BIT_ACCESS(I3C1PID0,7)
// I3C1PID1<PID8>
extern volatile __bit                   PID8                __at(0x518);	// @ (0xA3 * 8 + 0)
#define                                 PID8_bit            _BIT_ACCESS(I3C1PID1,0)
// I3C1PID1<PID9>
extern volatile __bit                   PID9                __at(0x519);	// @ (0xA3 * 8 + 1)
#define                                 PID9_bit            _BIT_ACCESS(I3C1PID1,1)
// CRCCON1<PLEN0>
extern volatile __bit                   PLEN0               __at(0x348);	// @ (0x69 * 8 + 0)
#define                                 PLEN0_bit           _BIT_ACCESS(CRCCON1,0)
// CRCCON1<PLEN1>
extern volatile __bit                   PLEN1               __at(0x349);	// @ (0x69 * 8 + 1)
#define                                 PLEN1_bit           _BIT_ACCESS(CRCCON1,1)
// CRCCON1<PLEN2>
extern volatile __bit                   PLEN2               __at(0x34A);	// @ (0x69 * 8 + 2)
#define                                 PLEN2_bit           _BIT_ACCESS(CRCCON1,2)
// CRCCON1<PLEN3>
extern volatile __bit                   PLEN3               __at(0x34B);	// @ (0x69 * 8 + 3)
#define                                 PLEN3_bit           _BIT_ACCESS(CRCCON1,3)
// CRCCON1<PLEN4>
extern volatile __bit                   PLEN4               __at(0x34C);	// @ (0x69 * 8 + 4)
#define                                 PLEN4_bit           _BIT_ACCESS(CRCCON1,4)
// OSCEN<PLLEN>
extern volatile __bit                   PLLEN               __at(0x3F0);	// @ (0x7E * 8 + 0)
#define                                 PLLEN_bit           _BIT_ACCESS(OSCEN,0)
// OSCSTAT<PLLR>
extern volatile __bit                   PLLR                __at(0x3E8);	// @ (0x7D * 8 + 0)
#define                                 PLLR_bit            _BIT_ACCESS(OSCSTAT,0)
// VREGCON<PMSYS0>
extern volatile __bit                   PMSYS0              __at(0x3CC);	// @ (0x79 * 8 + 4)
#define                                 PMSYS0_bit          _BIT_ACCESS(VREGCON,4)
// VREGCON<PMSYS1>
extern volatile __bit                   PMSYS1              __at(0x3CD);	// @ (0x79 * 8 + 5)
#define                                 PMSYS1_bit          _BIT_ACCESS(VREGCON,5)
// CLCnPOL<POL>
extern volatile __bit                   POL                 __at(0xD37);	// @ (0x1A6 * 8 + 7)
#define                                 POL_bit             _BIT_ACCESS(CLCnPOL,7)
// CWG1CON1<POLA>
extern volatile __bit                   POLA                __at(0xCF0);	// @ (0x19E * 8 + 0)
#define                                 POLA_bit            _BIT_ACCESS(CWG1CON1,0)
// CWG1CON1<POLB>
extern volatile __bit                   POLB                __at(0xCF1);	// @ (0x19E * 8 + 1)
#define                                 POLB_bit            _BIT_ACCESS(CWG1CON1,1)
// CWG1CON1<POLC>
extern volatile __bit                   POLC                __at(0xCF2);	// @ (0x19E * 8 + 2)
#define                                 POLC_bit            _BIT_ACCESS(CWG1CON1,2)
// CWG1CON1<POLD>
extern volatile __bit                   POLD                __at(0xCF3);	// @ (0x19E * 8 + 3)
#define                                 POLD_bit            _BIT_ACCESS(CWG1CON1,3)
// PCON0<POR>
extern volatile __bit                   POR                 __at(0x2781);	// @ (0x4F0 * 8 + 1)
#define                                 POR_bit             _BIT_ACCESS(PCON0,1)
// PMD1<PORTWMD>
extern volatile __bit                   PORTWMD             __at(0x1809);	// @ (0x301 * 8 + 1)
#define                                 PORTWMD_bit         _BIT_ACCESS(PMD1,1)
// PCON1<PORVDDIO2>
extern volatile __bit                   PORVDDIO2           __at(0x278B);	// @ (0x4F1 * 8 + 3)
#define                                 PORVDDIO2_bit       _BIT_ACCESS(PCON1,3)
// ADCON1<PPOL>
extern volatile __bit                   PPOL                __at(0x1187);	// @ (0x230 * 8 + 7)
#define                                 PPOL_bit            _BIT_ACCESS(ADCON1,7)
// PPSLOCK<PPSLOCKED>
extern volatile __bit                   PPSLOCKED           __at(0x1A88);	// @ (0x351 * 8 + 0)
#define                                 PPSLOCKED_bit       _BIT_ACCESS(PPSLOCK,0)
// ADPREL<PRE0>
extern volatile __bit                   PRE0                __at(0x1168);	// @ (0x22D * 8 + 0)
#define                                 PRE0_bit            _BIT_ACCESS(ADPREL,0)
// ADPREL<PRE1>
extern volatile __bit                   PRE1                __at(0x1169);	// @ (0x22D * 8 + 1)
#define                                 PRE1_bit            _BIT_ACCESS(ADPREL,1)
// ADPREH<PRE10>
extern volatile __bit                   PRE10               __at(0x1172);	// @ (0x22E * 8 + 2)
#define                                 PRE10_bit           _BIT_ACCESS(ADPREH,2)
// ADPREH<PRE11>
extern volatile __bit                   PRE11               __at(0x1173);	// @ (0x22E * 8 + 3)
#define                                 PRE11_bit           _BIT_ACCESS(ADPREH,3)
// ADPREH<PRE12>
extern volatile __bit                   PRE12               __at(0x1174);	// @ (0x22E * 8 + 4)
#define                                 PRE12_bit           _BIT_ACCESS(ADPREH,4)
// ADPREL<PRE2>
extern volatile __bit                   PRE2                __at(0x116A);	// @ (0x22D * 8 + 2)
#define                                 PRE2_bit            _BIT_ACCESS(ADPREL,2)
// ADPREL<PRE3>
extern volatile __bit                   PRE3                __at(0x116B);	// @ (0x22D * 8 + 3)
#define                                 PRE3_bit            _BIT_ACCESS(ADPREL,3)
// ADPREL<PRE4>
extern volatile __bit                   PRE4                __at(0x116C);	// @ (0x22D * 8 + 4)
#define                                 PRE4_bit            _BIT_ACCESS(ADPREL,4)
// ADPREL<PRE5>
extern volatile __bit                   PRE5                __at(0x116D);	// @ (0x22D * 8 + 5)
#define                                 PRE5_bit            _BIT_ACCESS(ADPREL,5)
// ADPREL<PRE6>
extern volatile __bit                   PRE6                __at(0x116E);	// @ (0x22D * 8 + 6)
#define                                 PRE6_bit            _BIT_ACCESS(ADPREL,6)
// ADPREL<PRE7>
extern volatile __bit                   PRE7                __at(0x116F);	// @ (0x22D * 8 + 7)
#define                                 PRE7_bit            _BIT_ACCESS(ADPREL,7)
// ADPREH<PRE8>
extern volatile __bit                   PRE8                __at(0x1170);	// @ (0x22E * 8 + 0)
#define                                 PRE8_bit            _BIT_ACCESS(ADPREH,0)
// ADPREH<PRE9>
extern volatile __bit                   PRE9                __at(0x1171);	// @ (0x22E * 8 + 1)
#define                                 PRE9_bit            _BIT_ACCESS(ADPREH,1)
// ADREF<PREF0>
extern volatile __bit                   PREF0               __at(0x11A0);	// @ (0x234 * 8 + 0)
#define                                 PREF0_bit           _BIT_ACCESS(ADREF,0)
// ADREF<PREF1>
extern volatile __bit                   PREF1               __at(0x11A1);	// @ (0x234 * 8 + 1)
#define                                 PREF1_bit           _BIT_ACCESS(ADREF,1)
// ADPREVL<PREV0>
extern volatile __bit                   PREV0               __at(0x1120);	// @ (0x224 * 8 + 0)
#define                                 PREV0_bit           _BIT_ACCESS(ADPREVL,0)
// ADPREVL<PREV1>
extern volatile __bit                   PREV1               __at(0x1121);	// @ (0x224 * 8 + 1)
#define                                 PREV1_bit           _BIT_ACCESS(ADPREVL,1)
// ADPREVH<PREV10>
extern volatile __bit                   PREV10              __at(0x112A);	// @ (0x225 * 8 + 2)
#define                                 PREV10_bit          _BIT_ACCESS(ADPREVH,2)
// ADPREVH<PREV11>
extern volatile __bit                   PREV11              __at(0x112B);	// @ (0x225 * 8 + 3)
#define                                 PREV11_bit          _BIT_ACCESS(ADPREVH,3)
// ADPREVH<PREV12>
extern volatile __bit                   PREV12              __at(0x112C);	// @ (0x225 * 8 + 4)
#define                                 PREV12_bit          _BIT_ACCESS(ADPREVH,4)
// ADPREVH<PREV13>
extern volatile __bit                   PREV13              __at(0x112D);	// @ (0x225 * 8 + 5)
#define                                 PREV13_bit          _BIT_ACCESS(ADPREVH,5)
// ADPREVH<PREV14>
extern volatile __bit                   PREV14              __at(0x112E);	// @ (0x225 * 8 + 6)
#define                                 PREV14_bit          _BIT_ACCESS(ADPREVH,6)
// ADPREVH<PREV15>
extern volatile __bit                   PREV15              __at(0x112F);	// @ (0x225 * 8 + 7)
#define                                 PREV15_bit          _BIT_ACCESS(ADPREVH,7)
// ADPREVL<PREV2>
extern volatile __bit                   PREV2               __at(0x1122);	// @ (0x224 * 8 + 2)
#define                                 PREV2_bit           _BIT_ACCESS(ADPREVL,2)
// ADPREVL<PREV3>
extern volatile __bit                   PREV3               __at(0x1123);	// @ (0x224 * 8 + 3)
#define                                 PREV3_bit           _BIT_ACCESS(ADPREVL,3)
// ADPREVL<PREV4>
extern volatile __bit                   PREV4               __at(0x1124);	// @ (0x224 * 8 + 4)
#define                                 PREV4_bit           _BIT_ACCESS(ADPREVL,4)
// ADPREVL<PREV5>
extern volatile __bit                   PREV5               __at(0x1125);	// @ (0x224 * 8 + 5)
#define                                 PREV5_bit           _BIT_ACCESS(ADPREVL,5)
// ADPREVL<PREV6>
extern volatile __bit                   PREV6               __at(0x1126);	// @ (0x224 * 8 + 6)
#define                                 PREV6_bit           _BIT_ACCESS(ADPREVL,6)
// ADPREVL<PREV7>
extern volatile __bit                   PREV7               __at(0x1127);	// @ (0x224 * 8 + 7)
#define                                 PREV7_bit           _BIT_ACCESS(ADPREVL,7)
// ADPREVH<PREV8>
extern volatile __bit                   PREV8               __at(0x1128);	// @ (0x225 * 8 + 0)
#define                                 PREV8_bit           _BIT_ACCESS(ADPREVH,0)
// ADPREVH<PREV9>
extern volatile __bit                   PREV9               __at(0x1129);	// @ (0x225 * 8 + 1)
#define                                 PREV9_bit           _BIT_ACCESS(ADPREVH,1)
// PRLOCK<PRLOCKED>
extern volatile __bit                   PRLOCKED            __at(0x1C0);	// @ (0x38 * 8 + 0)
#define                                 PRLOCKED_bit        _BIT_ACCESS(PRLOCK,0)
// WDTPSL<PSCNT0>
extern volatile __bit                   PSCNT0              __at(0x3B0);	// @ (0x76 * 8 + 0)
#define                                 PSCNT0_bit          _BIT_ACCESS(WDTPSL,0)
// WDTPSL<PSCNT1>
extern volatile __bit                   PSCNT1              __at(0x3B1);	// @ (0x76 * 8 + 1)
#define                                 PSCNT1_bit          _BIT_ACCESS(WDTPSL,1)
// WDTPSH<PSCNT10>
extern volatile __bit                   PSCNT10             __at(0x3BA);	// @ (0x77 * 8 + 2)
#define                                 PSCNT10_bit         _BIT_ACCESS(WDTPSH,2)
// WDTPSH<PSCNT11>
extern volatile __bit                   PSCNT11             __at(0x3BB);	// @ (0x77 * 8 + 3)
#define                                 PSCNT11_bit         _BIT_ACCESS(WDTPSH,3)
// WDTPSH<PSCNT12>
extern volatile __bit                   PSCNT12             __at(0x3BC);	// @ (0x77 * 8 + 4)
#define                                 PSCNT12_bit         _BIT_ACCESS(WDTPSH,4)
// WDTPSH<PSCNT13>
extern volatile __bit                   PSCNT13             __at(0x3BD);	// @ (0x77 * 8 + 5)
#define                                 PSCNT13_bit         _BIT_ACCESS(WDTPSH,5)
// WDTPSH<PSCNT14>
extern volatile __bit                   PSCNT14             __at(0x3BE);	// @ (0x77 * 8 + 6)
#define                                 PSCNT14_bit         _BIT_ACCESS(WDTPSH,6)
// WDTPSH<PSCNT15>
extern volatile __bit                   PSCNT15             __at(0x3BF);	// @ (0x77 * 8 + 7)
#define                                 PSCNT15_bit         _BIT_ACCESS(WDTPSH,7)
// WDTTMR<PSCNT16>
extern volatile __bit                   PSCNT16             __at(0x3C0);	// @ (0x78 * 8 + 0)
#define                                 PSCNT16_bit         _BIT_ACCESS(WDTTMR,0)
// WDTTMR<PSCNT17>
extern volatile __bit                   PSCNT17             __at(0x3C1);	// @ (0x78 * 8 + 1)
#define                                 PSCNT17_bit         _BIT_ACCESS(WDTTMR,1)
// WDTPSL<PSCNT2>
extern volatile __bit                   PSCNT2              __at(0x3B2);	// @ (0x76 * 8 + 2)
#define                                 PSCNT2_bit          _BIT_ACCESS(WDTPSL,2)
// WDTPSL<PSCNT3>
extern volatile __bit                   PSCNT3              __at(0x3B3);	// @ (0x76 * 8 + 3)
#define                                 PSCNT3_bit          _BIT_ACCESS(WDTPSL,3)
// WDTPSL<PSCNT4>
extern volatile __bit                   PSCNT4              __at(0x3B4);	// @ (0x76 * 8 + 4)
#define                                 PSCNT4_bit          _BIT_ACCESS(WDTPSL,4)
// WDTPSL<PSCNT5>
extern volatile __bit                   PSCNT5              __at(0x3B5);	// @ (0x76 * 8 + 5)
#define                                 PSCNT5_bit          _BIT_ACCESS(WDTPSL,5)
// WDTPSL<PSCNT6>
extern volatile __bit                   PSCNT6              __at(0x3B6);	// @ (0x76 * 8 + 6)
#define                                 PSCNT6_bit          _BIT_ACCESS(WDTPSL,6)
// WDTPSL<PSCNT7>
extern volatile __bit                   PSCNT7              __at(0x3B7);	// @ (0x76 * 8 + 7)
#define                                 PSCNT7_bit          _BIT_ACCESS(WDTPSL,7)
// WDTPSH<PSCNT8>
extern volatile __bit                   PSCNT8              __at(0x3B8);	// @ (0x77 * 8 + 0)
#define                                 PSCNT8_bit          _BIT_ACCESS(WDTPSH,0)
// WDTPSH<PSCNT9>
extern volatile __bit                   PSCNT9              __at(0x3B9);	// @ (0x77 * 8 + 1)
#define                                 PSCNT9_bit          _BIT_ACCESS(WDTPSH,1)
// ADCON2<PSIS>
extern volatile __bit                   PSIS                __at(0x118F);	// @ (0x231 * 8 + 7)
#define                                 PSIS_bit            _BIT_ACCESS(ADCON2,7)
// PORTWDF<PWDF0>
extern volatile __bit                   PWDF0               __at(0x2520);	// @ (0x4A4 * 8 + 0)
#define                                 PWDF0_bit           _BIT_ACCESS(PORTWDF,0)
// PORTWDF<PWDF1>
extern volatile __bit                   PWDF1               __at(0x2521);	// @ (0x4A4 * 8 + 1)
#define                                 PWDF1_bit           _BIT_ACCESS(PORTWDF,1)
// PORTWDF<PWDF2>
extern volatile __bit                   PWDF2               __at(0x2522);	// @ (0x4A4 * 8 + 2)
#define                                 PWDF2_bit           _BIT_ACCESS(PORTWDF,2)
// PORTWDF<PWDF3>
extern volatile __bit                   PWDF3               __at(0x2523);	// @ (0x4A4 * 8 + 3)
#define                                 PWDF3_bit           _BIT_ACCESS(PORTWDF,3)
// PORTWDF<PWDF4>
extern volatile __bit                   PWDF4               __at(0x2524);	// @ (0x4A4 * 8 + 4)
#define                                 PWDF4_bit           _BIT_ACCESS(PORTWDF,4)
// PORTWDF<PWDF5>
extern volatile __bit                   PWDF5               __at(0x2525);	// @ (0x4A4 * 8 + 5)
#define                                 PWDF5_bit           _BIT_ACCESS(PORTWDF,5)
// PORTWDF<PWDF6>
extern volatile __bit                   PWDF6               __at(0x2526);	// @ (0x4A4 * 8 + 6)
#define                                 PWDF6_bit           _BIT_ACCESS(PORTWDF,6)
// PORTWDF<PWDF7>
extern volatile __bit                   PWDF7               __at(0x2527);	// @ (0x4A4 * 8 + 7)
#define                                 PWDF7_bit           _BIT_ACCESS(PORTWDF,7)
// PWM1ERSPPS<PWM1ERSPPS0>
extern volatile __bit                   PWM1ERSPPS0         __at(0x1C30);	// @ (0x386 * 8 + 0)
#define                                 PWM1ERSPPS0_bit     _BIT_ACCESS(PWM1ERSPPS,0)
// PWM1ERSPPS<PWM1ERSPPS1>
extern volatile __bit                   PWM1ERSPPS1         __at(0x1C31);	// @ (0x386 * 8 + 1)
#define                                 PWM1ERSPPS1_bit     _BIT_ACCESS(PWM1ERSPPS,1)
// PWM1ERSPPS<PWM1ERSPPS2>
extern volatile __bit                   PWM1ERSPPS2         __at(0x1C32);	// @ (0x386 * 8 + 2)
#define                                 PWM1ERSPPS2_bit     _BIT_ACCESS(PWM1ERSPPS,2)
// PWM1ERSPPS<PWM1ERSPPS3>
extern volatile __bit                   PWM1ERSPPS3         __at(0x1C33);	// @ (0x386 * 8 + 3)
#define                                 PWM1ERSPPS3_bit     _BIT_ACCESS(PWM1ERSPPS,3)
// PWM1ERSPPS<PWM1ERSPPS4>
extern volatile __bit                   PWM1ERSPPS4         __at(0x1C34);	// @ (0x386 * 8 + 4)
#define                                 PWM1ERSPPS4_bit     _BIT_ACCESS(PWM1ERSPPS,4)
// PIE4<PWM1IE>
extern volatile __bit                   PWM1IE              __at(0x23BF);	// @ (0x477 * 8 + 7)
#define                                 PWM1IE_bit          _BIT_ACCESS(PIE4,7)
// PIR4<PWM1IF>
extern volatile __bit                   PWM1IF              __at(0x236F);	// @ (0x46D * 8 + 7)
#define                                 PWM1IF_bit          _BIT_ACCESS(PIR4,7)
// IPR4<PWM1IP>
extern volatile __bit                   PWM1IP              __at(0x240F);	// @ (0x481 * 8 + 7)
#define                                 PWM1IP_bit          _BIT_ACCESS(IPR4,7)
// PMD2<PWM1MD>
extern volatile __bit                   PWM1MD              __at(0x1814);	// @ (0x302 * 8 + 4)
#define                                 PWM1MD_bit          _BIT_ACCESS(PMD2,4)
// PIE4<PWM1PIE>
extern volatile __bit                   PWM1PIE             __at(0x23BE);	// @ (0x477 * 8 + 6)
#define                                 PWM1PIE_bit         _BIT_ACCESS(PIE4,6)
// PIR4<PWM1PIF>
extern volatile __bit                   PWM1PIF             __at(0x236E);	// @ (0x46D * 8 + 6)
#define                                 PWM1PIF_bit         _BIT_ACCESS(PIR4,6)
// IPR4<PWM1PIP>
extern volatile __bit                   PWM1PIP             __at(0x240E);	// @ (0x481 * 8 + 6)
#define                                 PWM1PIP_bit         _BIT_ACCESS(IPR4,6)
// PWM2ERSPPS<PWM2ERSPPS0>
extern volatile __bit                   PWM2ERSPPS0         __at(0x1C38);	// @ (0x387 * 8 + 0)
#define                                 PWM2ERSPPS0_bit     _BIT_ACCESS(PWM2ERSPPS,0)
// PWM2ERSPPS<PWM2ERSPPS1>
extern volatile __bit                   PWM2ERSPPS1         __at(0x1C39);	// @ (0x387 * 8 + 1)
#define                                 PWM2ERSPPS1_bit     _BIT_ACCESS(PWM2ERSPPS,1)
// PWM2ERSPPS<PWM2ERSPPS2>
extern volatile __bit                   PWM2ERSPPS2         __at(0x1C3A);	// @ (0x387 * 8 + 2)
#define                                 PWM2ERSPPS2_bit     _BIT_ACCESS(PWM2ERSPPS,2)
// PWM2ERSPPS<PWM2ERSPPS3>
extern volatile __bit                   PWM2ERSPPS3         __at(0x1C3B);	// @ (0x387 * 8 + 3)
#define                                 PWM2ERSPPS3_bit     _BIT_ACCESS(PWM2ERSPPS,3)
// PWM2ERSPPS<PWM2ERSPPS4>
extern volatile __bit                   PWM2ERSPPS4         __at(0x1C3C);	// @ (0x387 * 8 + 4)
#define                                 PWM2ERSPPS4_bit     _BIT_ACCESS(PWM2ERSPPS,4)
// PIE5<PWM2IE>
extern volatile __bit                   PWM2IE              __at(0x23C1);	// @ (0x478 * 8 + 1)
#define                                 PWM2IE_bit          _BIT_ACCESS(PIE5,1)
// PIR5<PWM2IF>
extern volatile __bit                   PWM2IF              __at(0x2371);	// @ (0x46E * 8 + 1)
#define                                 PWM2IF_bit          _BIT_ACCESS(PIR5,1)
// IPR5<PWM2IP>
extern volatile __bit                   PWM2IP              __at(0x2411);	// @ (0x482 * 8 + 1)
#define                                 PWM2IP_bit          _BIT_ACCESS(IPR5,1)
// PMD2<PWM2MD>
extern volatile __bit                   PWM2MD              __at(0x1815);	// @ (0x302 * 8 + 5)
#define                                 PWM2MD_bit          _BIT_ACCESS(PMD2,5)
// PIE5<PWM2PIE>
extern volatile __bit                   PWM2PIE             __at(0x23C0);	// @ (0x478 * 8 + 0)
#define                                 PWM2PIE_bit         _BIT_ACCESS(PIE5,0)
// PIR5<PWM2PIF>
extern volatile __bit                   PWM2PIF             __at(0x2370);	// @ (0x46E * 8 + 0)
#define                                 PWM2PIF_bit         _BIT_ACCESS(PIR5,0)
// IPR5<PWM2PIP>
extern volatile __bit                   PWM2PIP             __at(0x2410);	// @ (0x482 * 8 + 0)
#define                                 PWM2PIP_bit         _BIT_ACCESS(IPR5,0)
// PWMIN0PPS<PWMIN0PPS0>
extern volatile __bit                   PWMIN0PPS0          __at(0x1C20);	// @ (0x384 * 8 + 0)
#define                                 PWMIN0PPS0_bit      _BIT_ACCESS(PWMIN0PPS,0)
// PWMIN0PPS<PWMIN0PPS1>
extern volatile __bit                   PWMIN0PPS1          __at(0x1C21);	// @ (0x384 * 8 + 1)
#define                                 PWMIN0PPS1_bit      _BIT_ACCESS(PWMIN0PPS,1)
// PWMIN0PPS<PWMIN0PPS2>
extern volatile __bit                   PWMIN0PPS2          __at(0x1C22);	// @ (0x384 * 8 + 2)
#define                                 PWMIN0PPS2_bit      _BIT_ACCESS(PWMIN0PPS,2)
// PWMIN0PPS<PWMIN0PPS3>
extern volatile __bit                   PWMIN0PPS3          __at(0x1C23);	// @ (0x384 * 8 + 3)
#define                                 PWMIN0PPS3_bit      _BIT_ACCESS(PWMIN0PPS,3)
// PWMIN0PPS<PWMIN0PPS4>
extern volatile __bit                   PWMIN0PPS4          __at(0x1C24);	// @ (0x384 * 8 + 4)
#define                                 PWMIN0PPS4_bit      _BIT_ACCESS(PWMIN0PPS,4)
// PWMIN1PPS<PWMIN1PPS0>
extern volatile __bit                   PWMIN1PPS0          __at(0x1C28);	// @ (0x385 * 8 + 0)
#define                                 PWMIN1PPS0_bit      _BIT_ACCESS(PWMIN1PPS,0)
// PWMIN1PPS<PWMIN1PPS1>
extern volatile __bit                   PWMIN1PPS1          __at(0x1C29);	// @ (0x385 * 8 + 1)
#define                                 PWMIN1PPS1_bit      _BIT_ACCESS(PWMIN1PPS,1)
// PWMIN1PPS<PWMIN1PPS2>
extern volatile __bit                   PWMIN1PPS2          __at(0x1C2A);	// @ (0x385 * 8 + 2)
#define                                 PWMIN1PPS2_bit      _BIT_ACCESS(PWMIN1PPS,2)
// PWMIN1PPS<PWMIN1PPS3>
extern volatile __bit                   PWMIN1PPS3          __at(0x1C2B);	// @ (0x385 * 8 + 3)
#define                                 PWMIN1PPS3_bit      _BIT_ACCESS(PWMIN1PPS,3)
// PWMIN1PPS<PWMIN1PPS4>
extern volatile __bit                   PWMIN1PPS4          __at(0x1C2C);	// @ (0x385 * 8 + 4)
#define                                 PWMIN1PPS4_bit      _BIT_ACCESS(PWMIN1PPS,4)
// PORTA<RA0>
extern volatile __bit                   RA0                 __at(0x2438);	// @ (0x487 * 8 + 0)
#define                                 RA0_bit             _BIT_ACCESS(PORTA,0)
// RA0PPS<RA0PPS0>
extern volatile __bit                   RA0PPS0             __at(0x18C8);	// @ (0x319 * 8 + 0)
#define                                 RA0PPS0_bit         _BIT_ACCESS(RA0PPS,0)
// RA0PPS<RA0PPS1>
extern volatile __bit                   RA0PPS1             __at(0x18C9);	// @ (0x319 * 8 + 1)
#define                                 RA0PPS1_bit         _BIT_ACCESS(RA0PPS,1)
// RA0PPS<RA0PPS2>
extern volatile __bit                   RA0PPS2             __at(0x18CA);	// @ (0x319 * 8 + 2)
#define                                 RA0PPS2_bit         _BIT_ACCESS(RA0PPS,2)
// RA0PPS<RA0PPS3>
extern volatile __bit                   RA0PPS3             __at(0x18CB);	// @ (0x319 * 8 + 3)
#define                                 RA0PPS3_bit         _BIT_ACCESS(RA0PPS,3)
// RA0PPS<RA0PPS4>
extern volatile __bit                   RA0PPS4             __at(0x18CC);	// @ (0x319 * 8 + 4)
#define                                 RA0PPS4_bit         _BIT_ACCESS(RA0PPS,4)
// PORTA<RA1>
extern volatile __bit                   RA1                 __at(0x2439);	// @ (0x487 * 8 + 1)
#define                                 RA1_bit             _BIT_ACCESS(PORTA,1)
// RA1PPS<RA1PPS0>
extern volatile __bit                   RA1PPS0             __at(0x18D0);	// @ (0x31A * 8 + 0)
#define                                 RA1PPS0_bit         _BIT_ACCESS(RA1PPS,0)
// RA1PPS<RA1PPS1>
extern volatile __bit                   RA1PPS1             __at(0x18D1);	// @ (0x31A * 8 + 1)
#define                                 RA1PPS1_bit         _BIT_ACCESS(RA1PPS,1)
// RA1PPS<RA1PPS2>
extern volatile __bit                   RA1PPS2             __at(0x18D2);	// @ (0x31A * 8 + 2)
#define                                 RA1PPS2_bit         _BIT_ACCESS(RA1PPS,2)
// RA1PPS<RA1PPS3>
extern volatile __bit                   RA1PPS3             __at(0x18D3);	// @ (0x31A * 8 + 3)
#define                                 RA1PPS3_bit         _BIT_ACCESS(RA1PPS,3)
// RA1PPS<RA1PPS4>
extern volatile __bit                   RA1PPS4             __at(0x18D4);	// @ (0x31A * 8 + 4)
#define                                 RA1PPS4_bit         _BIT_ACCESS(RA1PPS,4)
// PORTA<RA2>
extern volatile __bit                   RA2                 __at(0x243A);	// @ (0x487 * 8 + 2)
#define                                 RA2_bit             _BIT_ACCESS(PORTA,2)
// RA2PPS<RA2PPS0>
extern volatile __bit                   RA2PPS0             __at(0x18D8);	// @ (0x31B * 8 + 0)
#define                                 RA2PPS0_bit         _BIT_ACCESS(RA2PPS,0)
// RA2PPS<RA2PPS1>
extern volatile __bit                   RA2PPS1             __at(0x18D9);	// @ (0x31B * 8 + 1)
#define                                 RA2PPS1_bit         _BIT_ACCESS(RA2PPS,1)
// RA2PPS<RA2PPS2>
extern volatile __bit                   RA2PPS2             __at(0x18DA);	// @ (0x31B * 8 + 2)
#define                                 RA2PPS2_bit         _BIT_ACCESS(RA2PPS,2)
// RA2PPS<RA2PPS3>
extern volatile __bit                   RA2PPS3             __at(0x18DB);	// @ (0x31B * 8 + 3)
#define                                 RA2PPS3_bit         _BIT_ACCESS(RA2PPS,3)
// RA2PPS<RA2PPS4>
extern volatile __bit                   RA2PPS4             __at(0x18DC);	// @ (0x31B * 8 + 4)
#define                                 RA2PPS4_bit         _BIT_ACCESS(RA2PPS,4)
// PORTA<RA3>
extern volatile __bit                   RA3                 __at(0x243B);	// @ (0x487 * 8 + 3)
#define                                 RA3_bit             _BIT_ACCESS(PORTA,3)
// PORTA<RA4>
extern volatile __bit                   RA4                 __at(0x243C);	// @ (0x487 * 8 + 4)
#define                                 RA4_bit             _BIT_ACCESS(PORTA,4)
// RA4PPS<RA4PPS0>
extern volatile __bit                   RA4PPS0             __at(0x18E8);	// @ (0x31D * 8 + 0)
#define                                 RA4PPS0_bit         _BIT_ACCESS(RA4PPS,0)
// RA4PPS<RA4PPS1>
extern volatile __bit                   RA4PPS1             __at(0x18E9);	// @ (0x31D * 8 + 1)
#define                                 RA4PPS1_bit         _BIT_ACCESS(RA4PPS,1)
// RA4PPS<RA4PPS2>
extern volatile __bit                   RA4PPS2             __at(0x18EA);	// @ (0x31D * 8 + 2)
#define                                 RA4PPS2_bit         _BIT_ACCESS(RA4PPS,2)
// RA4PPS<RA4PPS3>
extern volatile __bit                   RA4PPS3             __at(0x18EB);	// @ (0x31D * 8 + 3)
#define                                 RA4PPS3_bit         _BIT_ACCESS(RA4PPS,3)
// RA4PPS<RA4PPS4>
extern volatile __bit                   RA4PPS4             __at(0x18EC);	// @ (0x31D * 8 + 4)
#define                                 RA4PPS4_bit         _BIT_ACCESS(RA4PPS,4)
// PORTA<RA5>
extern volatile __bit                   RA5                 __at(0x243D);	// @ (0x487 * 8 + 5)
#define                                 RA5_bit             _BIT_ACCESS(PORTA,5)
// RA5PPS<RA5PPS0>
extern volatile __bit                   RA5PPS0             __at(0x18F0);	// @ (0x31E * 8 + 0)
#define                                 RA5PPS0_bit         _BIT_ACCESS(RA5PPS,0)
// RA5PPS<RA5PPS1>
extern volatile __bit                   RA5PPS1             __at(0x18F1);	// @ (0x31E * 8 + 1)
#define                                 RA5PPS1_bit         _BIT_ACCESS(RA5PPS,1)
// RA5PPS<RA5PPS2>
extern volatile __bit                   RA5PPS2             __at(0x18F2);	// @ (0x31E * 8 + 2)
#define                                 RA5PPS2_bit         _BIT_ACCESS(RA5PPS,2)
// RA5PPS<RA5PPS3>
extern volatile __bit                   RA5PPS3             __at(0x18F3);	// @ (0x31E * 8 + 3)
#define                                 RA5PPS3_bit         _BIT_ACCESS(RA5PPS,3)
// RA5PPS<RA5PPS4>
extern volatile __bit                   RA5PPS4             __at(0x18F4);	// @ (0x31E * 8 + 4)
#define                                 RA5PPS4_bit         _BIT_ACCESS(RA5PPS,4)
// PORTC<RC0>
extern volatile __bit                   RC0                 __at(0x2448);	// @ (0x489 * 8 + 0)
#define                                 RC0_bit             _BIT_ACCESS(PORTC,0)
// RC0PPS<RC0PPS0>
extern volatile __bit                   RC0PPS0             __at(0x1948);	// @ (0x329 * 8 + 0)
#define                                 RC0PPS0_bit         _BIT_ACCESS(RC0PPS,0)
// RC0PPS<RC0PPS1>
extern volatile __bit                   RC0PPS1             __at(0x1949);	// @ (0x329 * 8 + 1)
#define                                 RC0PPS1_bit         _BIT_ACCESS(RC0PPS,1)
// RC0PPS<RC0PPS2>
extern volatile __bit                   RC0PPS2             __at(0x194A);	// @ (0x329 * 8 + 2)
#define                                 RC0PPS2_bit         _BIT_ACCESS(RC0PPS,2)
// RC0PPS<RC0PPS3>
extern volatile __bit                   RC0PPS3             __at(0x194B);	// @ (0x329 * 8 + 3)
#define                                 RC0PPS3_bit         _BIT_ACCESS(RC0PPS,3)
// RC0PPS<RC0PPS4>
extern volatile __bit                   RC0PPS4             __at(0x194C);	// @ (0x329 * 8 + 4)
#define                                 RC0PPS4_bit         _BIT_ACCESS(RC0PPS,4)
// PORTC<RC1>
extern volatile __bit                   RC1                 __at(0x2449);	// @ (0x489 * 8 + 1)
#define                                 RC1_bit             _BIT_ACCESS(PORTC,1)
// RC1PPS<RC1PPS0>
extern volatile __bit                   RC1PPS0             __at(0x1950);	// @ (0x32A * 8 + 0)
#define                                 RC1PPS0_bit         _BIT_ACCESS(RC1PPS,0)
// RC1PPS<RC1PPS1>
extern volatile __bit                   RC1PPS1             __at(0x1951);	// @ (0x32A * 8 + 1)
#define                                 RC1PPS1_bit         _BIT_ACCESS(RC1PPS,1)
// RC1PPS<RC1PPS2>
extern volatile __bit                   RC1PPS2             __at(0x1952);	// @ (0x32A * 8 + 2)
#define                                 RC1PPS2_bit         _BIT_ACCESS(RC1PPS,2)
// RC1PPS<RC1PPS3>
extern volatile __bit                   RC1PPS3             __at(0x1953);	// @ (0x32A * 8 + 3)
#define                                 RC1PPS3_bit         _BIT_ACCESS(RC1PPS,3)
// RC1PPS<RC1PPS4>
extern volatile __bit                   RC1PPS4             __at(0x1954);	// @ (0x32A * 8 + 4)
#define                                 RC1PPS4_bit         _BIT_ACCESS(RC1PPS,4)
// PORTC<RC3>
extern volatile __bit                   RC3                 __at(0x244B);	// @ (0x489 * 8 + 3)
#define                                 RC3_bit             _BIT_ACCESS(PORTC,3)
// RC3PPS<RC3PPS0>
extern volatile __bit                   RC3PPS0             __at(0x1960);	// @ (0x32C * 8 + 0)
#define                                 RC3PPS0_bit         _BIT_ACCESS(RC3PPS,0)
// RC3PPS<RC3PPS1>
extern volatile __bit                   RC3PPS1             __at(0x1961);	// @ (0x32C * 8 + 1)
#define                                 RC3PPS1_bit         _BIT_ACCESS(RC3PPS,1)
// RC3PPS<RC3PPS2>
extern volatile __bit                   RC3PPS2             __at(0x1962);	// @ (0x32C * 8 + 2)
#define                                 RC3PPS2_bit         _BIT_ACCESS(RC3PPS,2)
// RC3PPS<RC3PPS3>
extern volatile __bit                   RC3PPS3             __at(0x1963);	// @ (0x32C * 8 + 3)
#define                                 RC3PPS3_bit         _BIT_ACCESS(RC3PPS,3)
// RC3PPS<RC3PPS4>
extern volatile __bit                   RC3PPS4             __at(0x1964);	// @ (0x32C * 8 + 4)
#define                                 RC3PPS4_bit         _BIT_ACCESS(RC3PPS,4)
// PORTC<RC4>
extern volatile __bit                   RC4                 __at(0x244C);	// @ (0x489 * 8 + 4)
#define                                 RC4_bit             _BIT_ACCESS(PORTC,4)
// RC4PPS<RC4PPS0>
extern volatile __bit                   RC4PPS0             __at(0x1968);	// @ (0x32D * 8 + 0)
#define                                 RC4PPS0_bit         _BIT_ACCESS(RC4PPS,0)
// RC4PPS<RC4PPS1>
extern volatile __bit                   RC4PPS1             __at(0x1969);	// @ (0x32D * 8 + 1)
#define                                 RC4PPS1_bit         _BIT_ACCESS(RC4PPS,1)
// RC4PPS<RC4PPS2>
extern volatile __bit                   RC4PPS2             __at(0x196A);	// @ (0x32D * 8 + 2)
#define                                 RC4PPS2_bit         _BIT_ACCESS(RC4PPS,2)
// RC4PPS<RC4PPS3>
extern volatile __bit                   RC4PPS3             __at(0x196B);	// @ (0x32D * 8 + 3)
#define                                 RC4PPS3_bit         _BIT_ACCESS(RC4PPS,3)
// RC4PPS<RC4PPS4>
extern volatile __bit                   RC4PPS4             __at(0x196C);	// @ (0x32D * 8 + 4)
#define                                 RC4PPS4_bit         _BIT_ACCESS(RC4PPS,4)
// PORTC<RC5>
extern volatile __bit                   RC5                 __at(0x244D);	// @ (0x489 * 8 + 5)
#define                                 RC5_bit             _BIT_ACCESS(PORTC,5)
// RC5PPS<RC5PPS0>
extern volatile __bit                   RC5PPS0             __at(0x1970);	// @ (0x32E * 8 + 0)
#define                                 RC5PPS0_bit         _BIT_ACCESS(RC5PPS,0)
// RC5PPS<RC5PPS1>
extern volatile __bit                   RC5PPS1             __at(0x1971);	// @ (0x32E * 8 + 1)
#define                                 RC5PPS1_bit         _BIT_ACCESS(RC5PPS,1)
// RC5PPS<RC5PPS2>
extern volatile __bit                   RC5PPS2             __at(0x1972);	// @ (0x32E * 8 + 2)
#define                                 RC5PPS2_bit         _BIT_ACCESS(RC5PPS,2)
// RC5PPS<RC5PPS3>
extern volatile __bit                   RC5PPS3             __at(0x1973);	// @ (0x32E * 8 + 3)
#define                                 RC5PPS3_bit         _BIT_ACCESS(RC5PPS,3)
// RC5PPS<RC5PPS4>
extern volatile __bit                   RC5PPS4             __at(0x1974);	// @ (0x32E * 8 + 4)
#define                                 RC5PPS4_bit         _BIT_ACCESS(RC5PPS,4)
// PORTC<RC6>
extern volatile __bit                   RC6                 __at(0x244E);	// @ (0x489 * 8 + 6)
#define                                 RC6_bit             _BIT_ACCESS(PORTC,6)
// PORTC<RC7>
extern volatile __bit                   RC7                 __at(0x244F);	// @ (0x489 * 8 + 7)
#define                                 RC7_bit             _BIT_ACCESS(PORTC,7)
// PCON1<RCM>
extern volatile __bit                   RCM                 __at(0x2788);	// @ (0x4F1 * 8 + 0)
#define                                 RCM_bit             _BIT_ACCESS(PCON1,0)
// T1CON<RD16>
extern volatile __bit                   RD16                __at(0x849);	// @ (0x109 * 8 + 1)
#define                                 RD16_bit            _BIT_ACCESS(T1CON,1)
// T1CON<RD161>
extern volatile __bit                   RD161               __at(0x849);	// @ (0x109 * 8 + 1)
#define                                 RD161_bit           _BIT_ACCESS(T1CON,1)
// I2C1STAT0<READ>
extern volatile __bit                   READ                __at(0xF24);	// @ (0x1E4 * 8 + 4)
#define                                 READ_bit            _BIT_ACCESS(I2C1STAT0,4)
// CWG1AS0<REN>
extern volatile __bit                   REN                 __at(0xCFE);	// @ (0x19F * 8 + 6)
#define                                 REN_bit             _BIT_ACCESS(CWG1AS0,6)
// ADRESL<RES0>
extern volatile __bit                   RES0                __at(0x1130);	// @ (0x226 * 8 + 0)
#define                                 RES0_bit            _BIT_ACCESS(ADRESL,0)
// ADRESL<RES1>
extern volatile __bit                   RES1                __at(0x1131);	// @ (0x226 * 8 + 1)
#define                                 RES1_bit            _BIT_ACCESS(ADRESL,1)
// ADRESH<RES10>
extern volatile __bit                   RES10               __at(0x113A);	// @ (0x227 * 8 + 2)
#define                                 RES10_bit           _BIT_ACCESS(ADRESH,2)
// ADRESH<RES11>
extern volatile __bit                   RES11               __at(0x113B);	// @ (0x227 * 8 + 3)
#define                                 RES11_bit           _BIT_ACCESS(ADRESH,3)
// ADRESH<RES12>
extern volatile __bit                   RES12               __at(0x113C);	// @ (0x227 * 8 + 4)
#define                                 RES12_bit           _BIT_ACCESS(ADRESH,4)
// ADRESH<RES13>
extern volatile __bit                   RES13               __at(0x113D);	// @ (0x227 * 8 + 5)
#define                                 RES13_bit           _BIT_ACCESS(ADRESH,5)
// ADRESH<RES14>
extern volatile __bit                   RES14               __at(0x113E);	// @ (0x227 * 8 + 6)
#define                                 RES14_bit           _BIT_ACCESS(ADRESH,6)
// ADRESH<RES15>
extern volatile __bit                   RES15               __at(0x113F);	// @ (0x227 * 8 + 7)
#define                                 RES15_bit           _BIT_ACCESS(ADRESH,7)
// ADRESL<RES2>
extern volatile __bit                   RES2                __at(0x1132);	// @ (0x226 * 8 + 2)
#define                                 RES2_bit            _BIT_ACCESS(ADRESL,2)
// ADRESL<RES3>
extern volatile __bit                   RES3                __at(0x1133);	// @ (0x226 * 8 + 3)
#define                                 RES3_bit            _BIT_ACCESS(ADRESL,3)
// ADRESL<RES4>
extern volatile __bit                   RES4                __at(0x1134);	// @ (0x226 * 8 + 4)
#define                                 RES4_bit            _BIT_ACCESS(ADRESL,4)
// ADRESL<RES5>
extern volatile __bit                   RES5                __at(0x1135);	// @ (0x226 * 8 + 5)
#define                                 RES5_bit            _BIT_ACCESS(ADRESL,5)
// ADRESL<RES6>
extern volatile __bit                   RES6                __at(0x1136);	// @ (0x226 * 8 + 6)
#define                                 RES6_bit            _BIT_ACCESS(ADRESL,6)
// ADRESL<RES7>
extern volatile __bit                   RES7                __at(0x1137);	// @ (0x226 * 8 + 7)
#define                                 RES7_bit            _BIT_ACCESS(ADRESL,7)
// ADRESH<RES8>
extern volatile __bit                   RES8                __at(0x1138);	// @ (0x227 * 8 + 0)
#define                                 RES8_bit            _BIT_ACCESS(ADRESH,0)
// ADRESH<RES9>
extern volatile __bit                   RES9                __at(0x1139);	// @ (0x227 * 8 + 1)
#define                                 RES9_bit            _BIT_ACCESS(ADRESH,1)
// PCON0<RI>
extern volatile __bit                   RI                  __at(0x2782);	// @ (0x4F0 * 8 + 2)
#define                                 RI_bit              _BIT_ACCESS(PCON0,2)
// PCON0<RMCLR>
extern volatile __bit                   RMCLR               __at(0x2783);	// @ (0x4F0 * 8 + 3)
#define                                 RMCLR_bit           _BIT_ACCESS(PCON0,3)
// CPUDOZE<ROI>
extern volatile __bit                   ROI                 __at(0x2795);	// @ (0x4F2 * 8 + 5)
#define                                 ROI_bit             _BIT_ACCESS(CPUDOZE,5)
// ADRPT<RPT0>
extern volatile __bit                   RPT0                __at(0x1118);	// @ (0x223 * 8 + 0)
#define                                 RPT0_bit            _BIT_ACCESS(ADRPT,0)
// ADRPT<RPT1>
extern volatile __bit                   RPT1                __at(0x1119);	// @ (0x223 * 8 + 1)
#define                                 RPT1_bit            _BIT_ACCESS(ADRPT,1)
// ADRPT<RPT2>
extern volatile __bit                   RPT2                __at(0x111A);	// @ (0x223 * 8 + 2)
#define                                 RPT2_bit            _BIT_ACCESS(ADRPT,2)
// ADRPT<RPT3>
extern volatile __bit                   RPT3                __at(0x111B);	// @ (0x223 * 8 + 3)
#define                                 RPT3_bit            _BIT_ACCESS(ADRPT,3)
// ADRPT<RPT4>
extern volatile __bit                   RPT4                __at(0x111C);	// @ (0x223 * 8 + 4)
#define                                 RPT4_bit            _BIT_ACCESS(ADRPT,4)
// ADRPT<RPT5>
extern volatile __bit                   RPT5                __at(0x111D);	// @ (0x223 * 8 + 5)
#define                                 RPT5_bit            _BIT_ACCESS(ADRPT,5)
// ADRPT<RPT6>
extern volatile __bit                   RPT6                __at(0x111E);	// @ (0x223 * 8 + 6)
#define                                 RPT6_bit            _BIT_ACCESS(ADRPT,6)
// ADRPT<RPT7>
extern volatile __bit                   RPT7                __at(0x111F);	// @ (0x223 * 8 + 7)
#define                                 RPT7_bit            _BIT_ACCESS(ADRPT,7)
// I2C1PIE<RSC1IE>
extern volatile __bit                   RSC1IE              __at(0xF59);	// @ (0x1EB * 8 + 1)
#define                                 RSC1IE_bit          _BIT_ACCESS(I2C1PIE,1)
// I2C1PIR<RSC1IF>
extern volatile __bit                   RSC1IF              __at(0xF51);	// @ (0x1EA * 8 + 1)
#define                                 RSC1IF_bit          _BIT_ACCESS(I2C1PIR,1)
// I2C1CON0<RSEN>
extern volatile __bit                   RSEN                __at(0xF36);	// @ (0x1E6 * 8 + 6)
#define                                 RSEN_bit            _BIT_ACCESS(I2C1CON0,6)
// I3C1CON0<RST>
extern volatile __bit                   RST                 __at(0x41D);	// @ (0x83 * 8 + 5)
#define                                 RST_bit             _BIT_ACCESS(I3C1CON0,5)
// I3C1STAT0<RSTDET>
extern volatile __bit                   RSTDET              __at(0x43C);	// @ (0x87 * 8 + 4)
#define                                 RSTDET_bit          _BIT_ACCESS(I3C1STAT0,4)
// PCON1<RVREG>
extern volatile __bit                   RVREG               __at(0x278A);	// @ (0x4F1 * 8 + 2)
#define                                 RVREG_bit           _BIT_ACCESS(PCON1,2)
// PORTW<RW0>
extern volatile __bit                   RW0                 __at(0x24C8);	// @ (0x499 * 8 + 0)
#define                                 RW0_bit             _BIT_ACCESS(PORTW,0)
// PORTW<RW1>
extern volatile __bit                   RW1                 __at(0x24C9);	// @ (0x499 * 8 + 1)
#define                                 RW1_bit             _BIT_ACCESS(PORTW,1)
// PORTW<RW2>
extern volatile __bit                   RW2                 __at(0x24CA);	// @ (0x499 * 8 + 2)
#define                                 RW2_bit             _BIT_ACCESS(PORTW,2)
// PORTW<RW3>
extern volatile __bit                   RW3                 __at(0x24CB);	// @ (0x499 * 8 + 3)
#define                                 RW3_bit             _BIT_ACCESS(PORTW,3)
// PORTW<RW4>
extern volatile __bit                   RW4                 __at(0x24CC);	// @ (0x499 * 8 + 4)
#define                                 RW4_bit             _BIT_ACCESS(PORTW,4)
// PORTW<RW5>
extern volatile __bit                   RW5                 __at(0x24CD);	// @ (0x499 * 8 + 5)
#define                                 RW5_bit             _BIT_ACCESS(PORTW,5)
// PORTW<RW6>
extern volatile __bit                   RW6                 __at(0x24CE);	// @ (0x499 * 8 + 6)
#define                                 RW6_bit             _BIT_ACCESS(PORTW,6)
// PORTW<RW7>
extern volatile __bit                   RW7                 __at(0x24CF);	// @ (0x499 * 8 + 7)
#define                                 RW7_bit             _BIT_ACCESS(PORTW,7)
// PCON0<RWDT>
extern volatile __bit                   RWDT                __at(0x2784);	// @ (0x4F0 * 8 + 4)
#define                                 RWDT_bit            _BIT_ACCESS(PCON0,4)
// SPI1RXB<RXB0>
extern volatile __bit                   RXB0                __at(0xEB8);	// @ (0x1D7 * 8 + 0)
#define                                 RXB0_bit            _BIT_ACCESS(SPI1RXB,0)
// SPI1RXB<RXB1>
extern volatile __bit                   RXB1                __at(0xEB9);	// @ (0x1D7 * 8 + 1)
#define                                 RXB1_bit            _BIT_ACCESS(SPI1RXB,1)
// SPI1RXB<RXB2>
extern volatile __bit                   RXB2                __at(0xEBA);	// @ (0x1D7 * 8 + 2)
#define                                 RXB2_bit            _BIT_ACCESS(SPI1RXB,2)
// SPI1RXB<RXB3>
extern volatile __bit                   RXB3                __at(0xEBB);	// @ (0x1D7 * 8 + 3)
#define                                 RXB3_bit            _BIT_ACCESS(SPI1RXB,3)
// SPI1RXB<RXB4>
extern volatile __bit                   RXB4                __at(0xEBC);	// @ (0x1D7 * 8 + 4)
#define                                 RXB4_bit            _BIT_ACCESS(SPI1RXB,4)
// SPI1RXB<RXB5>
extern volatile __bit                   RXB5                __at(0xEBD);	// @ (0x1D7 * 8 + 5)
#define                                 RXB5_bit            _BIT_ACCESS(SPI1RXB,5)
// SPI1RXB<RXB6>
extern volatile __bit                   RXB6                __at(0xEBE);	// @ (0x1D7 * 8 + 6)
#define                                 RXB6_bit            _BIT_ACCESS(SPI1RXB,6)
// SPI1RXB<RXB7>
extern volatile __bit                   RXB7                __at(0xEBF);	// @ (0x1D7 * 8 + 7)
#define                                 RXB7_bit            _BIT_ACCESS(SPI1RXB,7)
// I2C1CON1<RXO>
extern volatile __bit                   RXO                 __at(0xF3A);	// @ (0x1E7 * 8 + 2)
#define                                 RXO_bit             _BIT_ACCESS(I2C1CON1,2)
// SPI1CON2<RXR>
extern volatile __bit                   RXR                 __at(0xEE8);	// @ (0x1DD * 8 + 0)
#define                                 RXR_bit             _BIT_ACCESS(SPI1CON2,0)
// I3C1ERRIE1<RXREIE>
extern volatile __bit                   RXREIE              __at(0x488);	// @ (0x91 * 8 + 0)
#define                                 RXREIE_bit          _BIT_ACCESS(I3C1ERRIE1,0)
// I3C1ERRIR1<RXREIF>
extern volatile __bit                   RXREIF              __at(0x468);	// @ (0x8D * 8 + 0)
#define                                 RXREIF_bit          _BIT_ACCESS(I3C1ERRIR1,0)
// I3C1PIE0<SADRIE>
extern volatile __bit                   SADRIE              __at(0x473);	// @ (0x8E * 8 + 3)
#define                                 SADRIE_bit          _BIT_ACCESS(I3C1PIE0,3)
// I3C1PIR0<SADRIF>
extern volatile __bit                   SADRIF              __at(0x453);	// @ (0x8A * 8 + 3)
#define                                 SADRIF_bit          _BIT_ACCESS(I3C1PIR0,3)
// I3C1CON1<SASDRMD>
extern volatile __bit                   SASDRMD             __at(0x421);	// @ (0x84 * 8 + 1)
#define                                 SASDRMD_bit         _BIT_ACCESS(I3C1CON1,1)
// BORCON<SBOREN>
extern volatile __bit                   SBOREN              __at(0x39F);	// @ (0x73 * 8 + 7)
#define                                 SBOREN_bit          _BIT_ACCESS(BORCON,7)
// I2C1PIE<SC1IE>
extern volatile __bit                   SC1IE               __at(0xF58);	// @ (0x1EB * 8 + 0)
#define                                 SC1IE_bit           _BIT_ACCESS(I2C1PIE,0)
// I2C1PIR<SC1IF>
extern volatile __bit                   SC1IF               __at(0xF50);	// @ (0x1EA * 8 + 0)
#define                                 SC1IF_bit           _BIT_ACCESS(I2C1PIR,0)
// SCANCON0<SCANEN>
extern volatile __bit                   SCANEN              __at(0x38F);	// @ (0x71 * 8 + 7)
#define                                 SCANEN_bit          _BIT_ACCESS(SCANCON0,7)
// SCANHADRL<SCANHADR0>
extern volatile __bit                   SCANHADR0           __at(0x370);	// @ (0x6E * 8 + 0)
#define                                 SCANHADR0_bit       _BIT_ACCESS(SCANHADRL,0)
// SCANHADRL<SCANHADR1>
extern volatile __bit                   SCANHADR1           __at(0x371);	// @ (0x6E * 8 + 1)
#define                                 SCANHADR1_bit       _BIT_ACCESS(SCANHADRL,1)
// SCANHADRH<SCANHADR10>
extern volatile __bit                   SCANHADR10          __at(0x37A);	// @ (0x6F * 8 + 2)
#define                                 SCANHADR10_bit      _BIT_ACCESS(SCANHADRH,2)
// SCANHADRH<SCANHADR11>
extern volatile __bit                   SCANHADR11          __at(0x37B);	// @ (0x6F * 8 + 3)
#define                                 SCANHADR11_bit      _BIT_ACCESS(SCANHADRH,3)
// SCANHADRH<SCANHADR12>
extern volatile __bit                   SCANHADR12          __at(0x37C);	// @ (0x6F * 8 + 4)
#define                                 SCANHADR12_bit      _BIT_ACCESS(SCANHADRH,4)
// SCANHADRH<SCANHADR13>
extern volatile __bit                   SCANHADR13          __at(0x37D);	// @ (0x6F * 8 + 5)
#define                                 SCANHADR13_bit      _BIT_ACCESS(SCANHADRH,5)
// SCANHADRH<SCANHADR14>
extern volatile __bit                   SCANHADR14          __at(0x37E);	// @ (0x6F * 8 + 6)
#define                                 SCANHADR14_bit      _BIT_ACCESS(SCANHADRH,6)
// SCANHADRH<SCANHADR15>
extern volatile __bit                   SCANHADR15          __at(0x37F);	// @ (0x6F * 8 + 7)
#define                                 SCANHADR15_bit      _BIT_ACCESS(SCANHADRH,7)
// SCANHADRU<SCANHADR16>
extern volatile __bit                   SCANHADR16          __at(0x380);	// @ (0x70 * 8 + 0)
#define                                 SCANHADR16_bit      _BIT_ACCESS(SCANHADRU,0)
// SCANHADRU<SCANHADR17>
extern volatile __bit                   SCANHADR17          __at(0x381);	// @ (0x70 * 8 + 1)
#define                                 SCANHADR17_bit      _BIT_ACCESS(SCANHADRU,1)
// SCANHADRU<SCANHADR18>
extern volatile __bit                   SCANHADR18          __at(0x382);	// @ (0x70 * 8 + 2)
#define                                 SCANHADR18_bit      _BIT_ACCESS(SCANHADRU,2)
// SCANHADRU<SCANHADR19>
extern volatile __bit                   SCANHADR19          __at(0x383);	// @ (0x70 * 8 + 3)
#define                                 SCANHADR19_bit      _BIT_ACCESS(SCANHADRU,3)
// SCANHADRL<SCANHADR2>
extern volatile __bit                   SCANHADR2           __at(0x372);	// @ (0x6E * 8 + 2)
#define                                 SCANHADR2_bit       _BIT_ACCESS(SCANHADRL,2)
// SCANHADRU<SCANHADR20>
extern volatile __bit                   SCANHADR20          __at(0x384);	// @ (0x70 * 8 + 4)
#define                                 SCANHADR20_bit      _BIT_ACCESS(SCANHADRU,4)
// SCANHADRU<SCANHADR21>
extern volatile __bit                   SCANHADR21          __at(0x385);	// @ (0x70 * 8 + 5)
#define                                 SCANHADR21_bit      _BIT_ACCESS(SCANHADRU,5)
// SCANHADRL<SCANHADR3>
extern volatile __bit                   SCANHADR3           __at(0x373);	// @ (0x6E * 8 + 3)
#define                                 SCANHADR3_bit       _BIT_ACCESS(SCANHADRL,3)
// SCANHADRL<SCANHADR4>
extern volatile __bit                   SCANHADR4           __at(0x374);	// @ (0x6E * 8 + 4)
#define                                 SCANHADR4_bit       _BIT_ACCESS(SCANHADRL,4)
// SCANHADRL<SCANHADR5>
extern volatile __bit                   SCANHADR5           __at(0x375);	// @ (0x6E * 8 + 5)
#define                                 SCANHADR5_bit       _BIT_ACCESS(SCANHADRL,5)
// SCANHADRL<SCANHADR6>
extern volatile __bit                   SCANHADR6           __at(0x376);	// @ (0x6E * 8 + 6)
#define                                 SCANHADR6_bit       _BIT_ACCESS(SCANHADRL,6)
// SCANHADRL<SCANHADR7>
extern volatile __bit                   SCANHADR7           __at(0x377);	// @ (0x6E * 8 + 7)
#define                                 SCANHADR7_bit       _BIT_ACCESS(SCANHADRL,7)
// SCANHADRH<SCANHADR8>
extern volatile __bit                   SCANHADR8           __at(0x378);	// @ (0x6F * 8 + 0)
#define                                 SCANHADR8_bit       _BIT_ACCESS(SCANHADRH,0)
// SCANHADRH<SCANHADR9>
extern volatile __bit                   SCANHADR9           __at(0x379);	// @ (0x6F * 8 + 1)
#define                                 SCANHADR9_bit       _BIT_ACCESS(SCANHADRH,1)
// PIE2<SCANIE>
extern volatile __bit                   SCANIE              __at(0x23AE);	// @ (0x475 * 8 + 6)
#define                                 SCANIE_bit          _BIT_ACCESS(PIE2,6)
// PIR2<SCANIF>
extern volatile __bit                   SCANIF              __at(0x235E);	// @ (0x46B * 8 + 6)
#define                                 SCANIF_bit          _BIT_ACCESS(PIR2,6)
// IPR2<SCANIP>
extern volatile __bit                   SCANIP              __at(0x23FE);	// @ (0x47F * 8 + 6)
#define                                 SCANIP_bit          _BIT_ACCESS(IPR2,6)
// SCANLADRL<SCANLADR0>
extern volatile __bit                   SCANLADR0           __at(0x358);	// @ (0x6B * 8 + 0)
#define                                 SCANLADR0_bit       _BIT_ACCESS(SCANLADRL,0)
// SCANLADRL<SCANLADR1>
extern volatile __bit                   SCANLADR1           __at(0x359);	// @ (0x6B * 8 + 1)
#define                                 SCANLADR1_bit       _BIT_ACCESS(SCANLADRL,1)
// SCANLADRH<SCANLADR10>
extern volatile __bit                   SCANLADR10          __at(0x362);	// @ (0x6C * 8 + 2)
#define                                 SCANLADR10_bit      _BIT_ACCESS(SCANLADRH,2)
// SCANLADRH<SCANLADR11>
extern volatile __bit                   SCANLADR11          __at(0x363);	// @ (0x6C * 8 + 3)
#define                                 SCANLADR11_bit      _BIT_ACCESS(SCANLADRH,3)
// SCANLADRH<SCANLADR12>
extern volatile __bit                   SCANLADR12          __at(0x364);	// @ (0x6C * 8 + 4)
#define                                 SCANLADR12_bit      _BIT_ACCESS(SCANLADRH,4)
// SCANLADRH<SCANLADR13>
extern volatile __bit                   SCANLADR13          __at(0x365);	// @ (0x6C * 8 + 5)
#define                                 SCANLADR13_bit      _BIT_ACCESS(SCANLADRH,5)
// SCANLADRH<SCANLADR14>
extern volatile __bit                   SCANLADR14          __at(0x366);	// @ (0x6C * 8 + 6)
#define                                 SCANLADR14_bit      _BIT_ACCESS(SCANLADRH,6)
// SCANLADRH<SCANLADR15>
extern volatile __bit                   SCANLADR15          __at(0x367);	// @ (0x6C * 8 + 7)
#define                                 SCANLADR15_bit      _BIT_ACCESS(SCANLADRH,7)
// SCANLADRU<SCANLADR16>
extern volatile __bit                   SCANLADR16          __at(0x368);	// @ (0x6D * 8 + 0)
#define                                 SCANLADR16_bit      _BIT_ACCESS(SCANLADRU,0)
// SCANLADRU<SCANLADR17>
extern volatile __bit                   SCANLADR17          __at(0x369);	// @ (0x6D * 8 + 1)
#define                                 SCANLADR17_bit      _BIT_ACCESS(SCANLADRU,1)
// SCANLADRU<SCANLADR18>
extern volatile __bit                   SCANLADR18          __at(0x36A);	// @ (0x6D * 8 + 2)
#define                                 SCANLADR18_bit      _BIT_ACCESS(SCANLADRU,2)
// SCANLADRU<SCANLADR19>
extern volatile __bit                   SCANLADR19          __at(0x36B);	// @ (0x6D * 8 + 3)
#define                                 SCANLADR19_bit      _BIT_ACCESS(SCANLADRU,3)
// SCANLADRL<SCANLADR2>
extern volatile __bit                   SCANLADR2           __at(0x35A);	// @ (0x6B * 8 + 2)
#define                                 SCANLADR2_bit       _BIT_ACCESS(SCANLADRL,2)
// SCANLADRU<SCANLADR20>
extern volatile __bit                   SCANLADR20          __at(0x36C);	// @ (0x6D * 8 + 4)
#define                                 SCANLADR20_bit      _BIT_ACCESS(SCANLADRU,4)
// SCANLADRU<SCANLADR21>
extern volatile __bit                   SCANLADR21          __at(0x36D);	// @ (0x6D * 8 + 5)
#define                                 SCANLADR21_bit      _BIT_ACCESS(SCANLADRU,5)
// SCANLADRL<SCANLADR3>
extern volatile __bit                   SCANLADR3           __at(0x35B);	// @ (0x6B * 8 + 3)
#define                                 SCANLADR3_bit       _BIT_ACCESS(SCANLADRL,3)
// SCANLADRL<SCANLADR4>
extern volatile __bit                   SCANLADR4           __at(0x35C);	// @ (0x6B * 8 + 4)
#define                                 SCANLADR4_bit       _BIT_ACCESS(SCANLADRL,4)
// SCANLADRL<SCANLADR5>
extern volatile __bit                   SCANLADR5           __at(0x35D);	// @ (0x6B * 8 + 5)
#define                                 SCANLADR5_bit       _BIT_ACCESS(SCANLADRL,5)
// SCANLADRL<SCANLADR6>
extern volatile __bit                   SCANLADR6           __at(0x35E);	// @ (0x6B * 8 + 6)
#define                                 SCANLADR6_bit       _BIT_ACCESS(SCANLADRL,6)
// SCANLADRL<SCANLADR7>
extern volatile __bit                   SCANLADR7           __at(0x35F);	// @ (0x6B * 8 + 7)
#define                                 SCANLADR7_bit       _BIT_ACCESS(SCANLADRL,7)
// SCANLADRH<SCANLADR8>
extern volatile __bit                   SCANLADR8           __at(0x360);	// @ (0x6C * 8 + 0)
#define                                 SCANLADR8_bit       _BIT_ACCESS(SCANLADRH,0)
// SCANLADRH<SCANLADR9>
extern volatile __bit                   SCANLADR9           __at(0x361);	// @ (0x6C * 8 + 1)
#define                                 SCANLADR9_bit       _BIT_ACCESS(SCANLADRH,1)
// PMD0<SCANMD>
extern volatile __bit                   SCANMD              __at(0x1806);	// @ (0x300 * 8 + 6)
#define                                 SCANMD_bit          _BIT_ACCESS(PMD0,6)
// SCANPR<SCANPR0>
extern volatile __bit                   SCANPR0             __at(0x1F8);	// @ (0x3F * 8 + 0)
#define                                 SCANPR0_bit         _BIT_ACCESS(SCANPR,0)
// SCANPR<SCANPR1>
extern volatile __bit                   SCANPR1             __at(0x1F9);	// @ (0x3F * 8 + 1)
#define                                 SCANPR1_bit         _BIT_ACCESS(SCANPR,1)
// SCANPR<SCANPR2>
extern volatile __bit                   SCANPR2             __at(0x1FA);	// @ (0x3F * 8 + 2)
#define                                 SCANPR2_bit         _BIT_ACCESS(SCANPR,2)
// I3C1PIE0<SCCCIE>
extern volatile __bit                   SCCCIE              __at(0x470);	// @ (0x8E * 8 + 0)
#define                                 SCCCIE_bit          _BIT_ACCESS(I3C1PIE0,0)
// I3C1PIR0<SCCCIF>
extern volatile __bit                   SCCCIF              __at(0x450);	// @ (0x8A * 8 + 0)
#define                                 SCCCIF_bit          _BIT_ACCESS(I3C1PIR0,0)
// DMAnSCNTL<SCNT0>
extern volatile __bit                   SCNT0               __at(0x250);	// @ (0x4A * 8 + 0)
#define                                 SCNT0_bit           _BIT_ACCESS(DMAnSCNTL,0)
// DMAnSCNTL<SCNT1>
extern volatile __bit                   SCNT1               __at(0x251);	// @ (0x4A * 8 + 1)
#define                                 SCNT1_bit           _BIT_ACCESS(DMAnSCNTL,1)
// DMAnSCNTH<SCNT10>
extern volatile __bit                   SCNT10              __at(0x25A);	// @ (0x4B * 8 + 2)
#define                                 SCNT10_bit          _BIT_ACCESS(DMAnSCNTH,2)
// DMAnSCNTH<SCNT11>
extern volatile __bit                   SCNT11              __at(0x25B);	// @ (0x4B * 8 + 3)
#define                                 SCNT11_bit          _BIT_ACCESS(DMAnSCNTH,3)
// DMAnSCNTL<SCNT2>
extern volatile __bit                   SCNT2               __at(0x252);	// @ (0x4A * 8 + 2)
#define                                 SCNT2_bit           _BIT_ACCESS(DMAnSCNTL,2)
// DMAnSCNTL<SCNT3>
extern volatile __bit                   SCNT3               __at(0x253);	// @ (0x4A * 8 + 3)
#define                                 SCNT3_bit           _BIT_ACCESS(DMAnSCNTL,3)
// DMAnSCNTL<SCNT4>
extern volatile __bit                   SCNT4               __at(0x254);	// @ (0x4A * 8 + 4)
#define                                 SCNT4_bit           _BIT_ACCESS(DMAnSCNTL,4)
// DMAnSCNTL<SCNT5>
extern volatile __bit                   SCNT5               __at(0x255);	// @ (0x4A * 8 + 5)
#define                                 SCNT5_bit           _BIT_ACCESS(DMAnSCNTL,5)
// DMAnSCNTL<SCNT6>
extern volatile __bit                   SCNT6               __at(0x256);	// @ (0x4A * 8 + 6)
#define                                 SCNT6_bit           _BIT_ACCESS(DMAnSCNTL,6)
// DMAnSCNTL<SCNT7>
extern volatile __bit                   SCNT7               __at(0x257);	// @ (0x4A * 8 + 7)
#define                                 SCNT7_bit           _BIT_ACCESS(DMAnSCNTL,7)
// DMAnSCNTH<SCNT8>
extern volatile __bit                   SCNT8               __at(0x258);	// @ (0x4B * 8 + 0)
#define                                 SCNT8_bit           _BIT_ACCESS(DMAnSCNTH,0)
// DMAnSCNTH<SCNT9>
extern volatile __bit                   SCNT9               __at(0x259);	// @ (0x4B * 8 + 1)
#define                                 SCNT9_bit           _BIT_ACCESS(DMAnSCNTH,1)
// I2C1CON2<SDAHT0>
extern volatile __bit                   SDAHT0              __at(0xF42);	// @ (0x1E8 * 8 + 2)
#define                                 SDAHT0_bit          _BIT_ACCESS(I2C1CON2,2)
// I2C1CON2<SDAHT1>
extern volatile __bit                   SDAHT1              __at(0xF43);	// @ (0x1E8 * 8 + 3)
#define                                 SDAHT1_bit          _BIT_ACCESS(I2C1CON2,3)
// SPI1CON1<SDIP>
extern volatile __bit                   SDIP                __at(0xEE1);	// @ (0x1DC * 8 + 1)
#define                                 SDIP_bit            _BIT_ACCESS(SPI1CON1,1)
// SPI1CON1<SDOP>
extern volatile __bit                   SDOP                __at(0xEE0);	// @ (0x1DC * 8 + 0)
#define                                 SDOP_bit            _BIT_ACCESS(SPI1CON1,0)
// HLVDCON1<SEL0>
extern volatile __bit                   SEL0                __at(0x1018);	// @ (0x203 * 8 + 0)
#define                                 SEL0_bit            _BIT_ACCESS(HLVDCON1,0)
// HLVDCON1<SEL1>
extern volatile __bit                   SEL1                __at(0x1019);	// @ (0x203 * 8 + 1)
#define                                 SEL1_bit            _BIT_ACCESS(HLVDCON1,1)
// HLVDCON1<SEL2>
extern volatile __bit                   SEL2                __at(0x101A);	// @ (0x203 * 8 + 2)
#define                                 SEL2_bit            _BIT_ACCESS(HLVDCON1,2)
// HLVDCON1<SEL3>
extern volatile __bit                   SEL3                __at(0x101B);	// @ (0x203 * 8 + 3)
#define                                 SEL3_bit            _BIT_ACCESS(HLVDCON1,3)
// WDTCON0<SEN>
extern volatile __bit                   SEN                 __at(0x3A0);	// @ (0x74 * 8 + 0)
#define                                 SEN_bit             _BIT_ACCESS(WDTCON0,0)
// CRCCON0<SETUP0>
extern volatile __bit                   SETUP0              __at(0x342);	// @ (0x68 * 8 + 2)
#define                                 SETUP0_bit          _BIT_ACCESS(CRCCON0,2)
// CRCCON0<SETUP1>
extern volatile __bit                   SETUP1              __at(0x343);	// @ (0x68 * 8 + 3)
#define                                 SETUP1_bit          _BIT_ACCESS(CRCCON0,3)
// OSCSTAT<SFOR>
extern volatile __bit                   SFOR                __at(0x3E9);	// @ (0x7D * 8 + 1)
#define                                 SFOR_bit            _BIT_ACCESS(OSCSTAT,1)
// SCANCON0<SGO>
extern volatile __bit                   SGO                 __at(0x38D);	// @ (0x71 * 8 + 5)
#define                                 SGO_bit             _BIT_ACCESS(SCANCON0,5)
// SHADCON<SHADLO>
extern volatile __bit                   SHADLO              __at(0x1BB0);	// @ (0x376 * 8 + 0)
#define                                 SHADLO_bit          _BIT_ACCESS(SHADCON,0)
// CRCSHFTL<SHIFT0>
extern volatile __bit                   SHIFT0              __at(0x320);	// @ (0x64 * 8 + 0)
#define                                 SHIFT0_bit          _BIT_ACCESS(CRCSHFTL,0)
// CRCSHFTL<SHIFT1>
extern volatile __bit                   SHIFT1              __at(0x321);	// @ (0x64 * 8 + 1)
#define                                 SHIFT1_bit          _BIT_ACCESS(CRCSHFTL,1)
// CRCSHFTH<SHIFT10>
extern volatile __bit                   SHIFT10             __at(0x32A);	// @ (0x65 * 8 + 2)
#define                                 SHIFT10_bit         _BIT_ACCESS(CRCSHFTH,2)
// CRCSHFTH<SHIFT11>
extern volatile __bit                   SHIFT11             __at(0x32B);	// @ (0x65 * 8 + 3)
#define                                 SHIFT11_bit         _BIT_ACCESS(CRCSHFTH,3)
// CRCSHFTH<SHIFT12>
extern volatile __bit                   SHIFT12             __at(0x32C);	// @ (0x65 * 8 + 4)
#define                                 SHIFT12_bit         _BIT_ACCESS(CRCSHFTH,4)
// CRCSHFTH<SHIFT13>
extern volatile __bit                   SHIFT13             __at(0x32D);	// @ (0x65 * 8 + 5)
#define                                 SHIFT13_bit         _BIT_ACCESS(CRCSHFTH,5)
// CRCSHFTH<SHIFT14>
extern volatile __bit                   SHIFT14             __at(0x32E);	// @ (0x65 * 8 + 6)
#define                                 SHIFT14_bit         _BIT_ACCESS(CRCSHFTH,6)
// CRCSHFTH<SHIFT15>
extern volatile __bit                   SHIFT15             __at(0x32F);	// @ (0x65 * 8 + 7)
#define                                 SHIFT15_bit         _BIT_ACCESS(CRCSHFTH,7)
// CRCSHFTU<SHIFT16>
extern volatile __bit                   SHIFT16             __at(0x330);	// @ (0x66 * 8 + 0)
#define                                 SHIFT16_bit         _BIT_ACCESS(CRCSHFTU,0)
// CRCSHFTU<SHIFT17>
extern volatile __bit                   SHIFT17             __at(0x331);	// @ (0x66 * 8 + 1)
#define                                 SHIFT17_bit         _BIT_ACCESS(CRCSHFTU,1)
// CRCSHFTU<SHIFT18>
extern volatile __bit                   SHIFT18             __at(0x332);	// @ (0x66 * 8 + 2)
#define                                 SHIFT18_bit         _BIT_ACCESS(CRCSHFTU,2)
// CRCSHFTU<SHIFT19>
extern volatile __bit                   SHIFT19             __at(0x333);	// @ (0x66 * 8 + 3)
#define                                 SHIFT19_bit         _BIT_ACCESS(CRCSHFTU,3)
// CRCSHFTL<SHIFT2>
extern volatile __bit                   SHIFT2              __at(0x322);	// @ (0x64 * 8 + 2)
#define                                 SHIFT2_bit          _BIT_ACCESS(CRCSHFTL,2)
// CRCSHFTU<SHIFT20>
extern volatile __bit                   SHIFT20             __at(0x334);	// @ (0x66 * 8 + 4)
#define                                 SHIFT20_bit         _BIT_ACCESS(CRCSHFTU,4)
// CRCSHFTU<SHIFT21>
extern volatile __bit                   SHIFT21             __at(0x335);	// @ (0x66 * 8 + 5)
#define                                 SHIFT21_bit         _BIT_ACCESS(CRCSHFTU,5)
// CRCSHFTU<SHIFT22>
extern volatile __bit                   SHIFT22             __at(0x336);	// @ (0x66 * 8 + 6)
#define                                 SHIFT22_bit         _BIT_ACCESS(CRCSHFTU,6)
// CRCSHFTU<SHIFT23>
extern volatile __bit                   SHIFT23             __at(0x337);	// @ (0x66 * 8 + 7)
#define                                 SHIFT23_bit         _BIT_ACCESS(CRCSHFTU,7)
// CRCSHFTT<SHIFT24>
extern volatile __bit                   SHIFT24             __at(0x338);	// @ (0x67 * 8 + 0)
#define                                 SHIFT24_bit         _BIT_ACCESS(CRCSHFTT,0)
// CRCSHFTT<SHIFT25>
extern volatile __bit                   SHIFT25             __at(0x339);	// @ (0x67 * 8 + 1)
#define                                 SHIFT25_bit         _BIT_ACCESS(CRCSHFTT,1)
// CRCSHFTT<SHIFT26>
extern volatile __bit                   SHIFT26             __at(0x33A);	// @ (0x67 * 8 + 2)
#define                                 SHIFT26_bit         _BIT_ACCESS(CRCSHFTT,2)
// CRCSHFTT<SHIFT27>
extern volatile __bit                   SHIFT27             __at(0x33B);	// @ (0x67 * 8 + 3)
#define                                 SHIFT27_bit         _BIT_ACCESS(CRCSHFTT,3)
// CRCSHFTT<SHIFT28>
extern volatile __bit                   SHIFT28             __at(0x33C);	// @ (0x67 * 8 + 4)
#define                                 SHIFT28_bit         _BIT_ACCESS(CRCSHFTT,4)
// CRCSHFTT<SHIFT29>
extern volatile __bit                   SHIFT29             __at(0x33D);	// @ (0x67 * 8 + 5)
#define                                 SHIFT29_bit         _BIT_ACCESS(CRCSHFTT,5)
// CRCSHFTL<SHIFT3>
extern volatile __bit                   SHIFT3              __at(0x323);	// @ (0x64 * 8 + 3)
#define                                 SHIFT3_bit          _BIT_ACCESS(CRCSHFTL,3)
// CRCSHFTT<SHIFT30>
extern volatile __bit                   SHIFT30             __at(0x33E);	// @ (0x67 * 8 + 6)
#define                                 SHIFT30_bit         _BIT_ACCESS(CRCSHFTT,6)
// CRCSHFTT<SHIFT31>
extern volatile __bit                   SHIFT31             __at(0x33F);	// @ (0x67 * 8 + 7)
#define                                 SHIFT31_bit         _BIT_ACCESS(CRCSHFTT,7)
// CRCSHFTL<SHIFT4>
extern volatile __bit                   SHIFT4              __at(0x324);	// @ (0x64 * 8 + 4)
#define                                 SHIFT4_bit          _BIT_ACCESS(CRCSHFTL,4)
// CRCSHFTL<SHIFT5>
extern volatile __bit                   SHIFT5              __at(0x325);	// @ (0x64 * 8 + 5)
#define                                 SHIFT5_bit          _BIT_ACCESS(CRCSHFTL,5)
// CRCSHFTL<SHIFT6>
extern volatile __bit                   SHIFT6              __at(0x326);	// @ (0x64 * 8 + 6)
#define                                 SHIFT6_bit          _BIT_ACCESS(CRCSHFTL,6)
// CRCSHFTL<SHIFT7>
extern volatile __bit                   SHIFT7              __at(0x327);	// @ (0x64 * 8 + 7)
#define                                 SHIFT7_bit          _BIT_ACCESS(CRCSHFTL,7)
// CRCSHFTH<SHIFT8>
extern volatile __bit                   SHIFT8              __at(0x328);	// @ (0x65 * 8 + 0)
#define                                 SHIFT8_bit          _BIT_ACCESS(CRCSHFTH,0)
// CRCSHFTH<SHIFT9>
extern volatile __bit                   SHIFT9              __at(0x329);	// @ (0x65 * 8 + 1)
#define                                 SHIFT9_bit          _BIT_ACCESS(CRCSHFTH,1)
// CRCCON0<SHIFTM>
extern volatile __bit                   SHIFTM              __at(0x341);	// @ (0x68 * 8 + 1)
#define                                 SHIFTM_bit          _BIT_ACCESS(CRCCON0,1)
// CWG1AS0<SHUTDOWN>
extern volatile __bit                   SHUTDOWN            __at(0xCFF);	// @ (0x19F * 8 + 7)
#define                                 SHUTDOWN_bit        _BIT_ACCESS(CWG1AS0,7)
// DMAnSIRQ<SIRQ0>
extern volatile __bit                   SIRQ0               __at(0x2B8);	// @ (0x57 * 8 + 0)
#define                                 SIRQ0_bit           _BIT_ACCESS(DMAnSIRQ,0)
// DMAnSIRQ<SIRQ1>
extern volatile __bit                   SIRQ1               __at(0x2B9);	// @ (0x57 * 8 + 1)
#define                                 SIRQ1_bit           _BIT_ACCESS(DMAnSIRQ,1)
// DMAnSIRQ<SIRQ2>
extern volatile __bit                   SIRQ2               __at(0x2BA);	// @ (0x57 * 8 + 2)
#define                                 SIRQ2_bit           _BIT_ACCESS(DMAnSIRQ,2)
// DMAnSIRQ<SIRQ3>
extern volatile __bit                   SIRQ3               __at(0x2BB);	// @ (0x57 * 8 + 3)
#define                                 SIRQ3_bit           _BIT_ACCESS(DMAnSIRQ,3)
// DMAnSIRQ<SIRQ4>
extern volatile __bit                   SIRQ4               __at(0x2BC);	// @ (0x57 * 8 + 4)
#define                                 SIRQ4_bit           _BIT_ACCESS(DMAnSIRQ,4)
// DMAnSIRQ<SIRQ5>
extern volatile __bit                   SIRQ5               __at(0x2BD);	// @ (0x57 * 8 + 5)
#define                                 SIRQ5_bit           _BIT_ACCESS(DMAnSIRQ,5)
// DMAnSIRQ<SIRQ6>
extern volatile __bit                   SIRQ6               __at(0x2BE);	// @ (0x57 * 8 + 6)
#define                                 SIRQ6_bit           _BIT_ACCESS(DMAnSIRQ,6)
// DMAnSIRQ<SIRQ7>
extern volatile __bit                   SIRQ7               __at(0x2BF);	// @ (0x57 * 8 + 7)
#define                                 SIRQ7_bit           _BIT_ACCESS(DMAnSIRQ,7)
// DMAnCON0<SIRQEN>
extern volatile __bit                   SIRQEN              __at(0x2A6);	// @ (0x54 * 8 + 6)
#define                                 SIRQEN_bit          _BIT_ACCESS(DMAnCON0,6)
// DMASELECT<SLCT2>
extern volatile __bit                   SLCT2               __at(0x202);	// @ (0x40 * 8 + 2)
#define                                 SLCT2_bit           _BIT_ACCESS(DMASELECT,2)
// SLRCONA<SLRA0>
extern volatile __bit                   SLRA0               __at(0x20C8);	// @ (0x419 * 8 + 0)
#define                                 SLRA0_bit           _BIT_ACCESS(SLRCONA,0)
// SLRCONA<SLRA1>
extern volatile __bit                   SLRA1               __at(0x20C9);	// @ (0x419 * 8 + 1)
#define                                 SLRA1_bit           _BIT_ACCESS(SLRCONA,1)
// SLRCONA<SLRA2>
extern volatile __bit                   SLRA2               __at(0x20CA);	// @ (0x419 * 8 + 2)
#define                                 SLRA2_bit           _BIT_ACCESS(SLRCONA,2)
// SLRCONA<SLRA4>
extern volatile __bit                   SLRA4               __at(0x20CC);	// @ (0x419 * 8 + 4)
#define                                 SLRA4_bit           _BIT_ACCESS(SLRCONA,4)
// SLRCONA<SLRA5>
extern volatile __bit                   SLRA5               __at(0x20CD);	// @ (0x419 * 8 + 5)
#define                                 SLRA5_bit           _BIT_ACCESS(SLRCONA,5)
// SLRCONC<SLRC0>
extern volatile __bit                   SLRC0               __at(0x2168);	// @ (0x42D * 8 + 0)
#define                                 SLRC0_bit           _BIT_ACCESS(SLRCONC,0)
// SLRCONC<SLRC1>
extern volatile __bit                   SLRC1               __at(0x2169);	// @ (0x42D * 8 + 1)
#define                                 SLRC1_bit           _BIT_ACCESS(SLRCONC,1)
// SLRCONC<SLRC3>
extern volatile __bit                   SLRC3               __at(0x216B);	// @ (0x42D * 8 + 3)
#define                                 SLRC3_bit           _BIT_ACCESS(SLRCONC,3)
// SLRCONC<SLRC4>
extern volatile __bit                   SLRC4               __at(0x216C);	// @ (0x42D * 8 + 4)
#define                                 SLRC4_bit           _BIT_ACCESS(SLRCONC,4)
// SLRCONC<SLRC5>
extern volatile __bit                   SLRC5               __at(0x216D);	// @ (0x42D * 8 + 5)
#define                                 SLRC5_bit           _BIT_ACCESS(SLRCONC,5)
// SLRCONC<SLRC6>
extern volatile __bit                   SLRC6               __at(0x216E);	// @ (0x42D * 8 + 6)
#define                                 SLRC6_bit           _BIT_ACCESS(SLRCONC,6)
// SLRCONC<SLRC7>
extern volatile __bit                   SLRC7               __at(0x216F);	// @ (0x42D * 8 + 7)
#define                                 SLRC7_bit           _BIT_ACCESS(SLRCONC,7)
// I2C1STAT0<SMA>
extern volatile __bit                   SMA                 __at(0xF26);	// @ (0x1E4 * 8 + 6)
#define                                 SMA_bit             _BIT_ACCESS(I2C1STAT0,6)
// SPI1CON1<SMP>
extern volatile __bit                   SMP                 __at(0xEE7);	// @ (0x1DC * 8 + 7)
#define                                 SMP_bit             _BIT_ACCESS(SPI1CON1,7)
// ADCON3<SOI>
extern volatile __bit                   SOI                 __at(0x1193);	// @ (0x232 * 8 + 3)
#define                                 SOI_bit             _BIT_ACCESS(ADCON3,3)
// OSCSTAT<SOR>
extern volatile __bit                   SOR                 __at(0x3EB);	// @ (0x7D * 8 + 3)
#define                                 SOR_bit             _BIT_ACCESS(OSCSTAT,3)
// OSCEN<SOSCEN>
extern volatile __bit                   SOSCEN              __at(0x3F3);	// @ (0x7E * 8 + 3)
#define                                 SOSCEN_bit          _BIT_ACCESS(OSCEN,3)
// OSCCON3<SOSCPWR>
extern volatile __bit                   SOSCPWR             __at(0x3E6);	// @ (0x7C * 8 + 6)
#define                                 SOSCPWR_bit         _BIT_ACCESS(OSCCON3,6)
// SPI1INTE<SOSIE>
extern volatile __bit                   SOSIE               __at(0xF15);	// @ (0x1E2 * 8 + 5)
#define                                 SOSIE_bit           _BIT_ACCESS(SPI1INTE,5)
// SPI1INTF<SOSIF>
extern volatile __bit                   SOSIF               __at(0xF0D);	// @ (0x1E1 * 8 + 5)
#define                                 SOSIF_bit           _BIT_ACCESS(SPI1INTF,5)
// SPI1CON0<SPI1BMODE>
extern volatile __bit                   SPI1BMODE           __at(0xED8);	// @ (0x1DB * 8 + 0)
#define                                 SPI1BMODE_bit       _BIT_ACCESS(SPI1CON0,0)
// SPI1CON2<SPI1BUSY>
extern volatile __bit                   SPI1BUSY            __at(0xEEF);	// @ (0x1DD * 8 + 7)
#define                                 SPI1BUSY_bit        _BIT_ACCESS(SPI1CON2,7)
// SPI1CON1<SPI1CKE>
extern volatile __bit                   SPI1CKE             __at(0xEE6);	// @ (0x1DC * 8 + 6)
#define                                 SPI1CKE_bit         _BIT_ACCESS(SPI1CON1,6)
// SPI1CON1<SPI1CKP>
extern volatile __bit                   SPI1CKP             __at(0xEE5);	// @ (0x1DC * 8 + 5)
#define                                 SPI1CKP_bit         _BIT_ACCESS(SPI1CON1,5)
// SPI1CLK<SPI1CLKSEL0>
extern volatile __bit                   SPI1CLKSEL0         __at(0xF18);	// @ (0x1E3 * 8 + 0)
#define                                 SPI1CLKSEL0_bit     _BIT_ACCESS(SPI1CLK,0)
// SPI1CLK<SPI1CLKSEL1>
extern volatile __bit                   SPI1CLKSEL1         __at(0xF19);	// @ (0x1E3 * 8 + 1)
#define                                 SPI1CLKSEL1_bit     _BIT_ACCESS(SPI1CLK,1)
// SPI1CLK<SPI1CLKSEL2>
extern volatile __bit                   SPI1CLKSEL2         __at(0xF1A);	// @ (0x1E3 * 8 + 2)
#define                                 SPI1CLKSEL2_bit     _BIT_ACCESS(SPI1CLK,2)
// SPI1CLK<SPI1CLKSEL3>
extern volatile __bit                   SPI1CLKSEL3         __at(0xF1B);	// @ (0x1E3 * 8 + 3)
#define                                 SPI1CLKSEL3_bit     _BIT_ACCESS(SPI1CLK,3)
// SPI1STATUS<SPI1CLRBF>
extern volatile __bit                   SPI1CLRBF           __at(0xEF2);	// @ (0x1DE * 8 + 2)
#define                                 SPI1CLRBF_bit       _BIT_ACCESS(SPI1STATUS,2)
// SPI1INTE<SPI1EOSIE>
extern volatile __bit                   SPI1EOSIE           __at(0xF14);	// @ (0x1E2 * 8 + 4)
#define                                 SPI1EOSIE_bit       _BIT_ACCESS(SPI1INTE,4)
// SPI1INTF<SPI1EOSIF>
extern volatile __bit                   SPI1EOSIF           __at(0xF0C);	// @ (0x1E1 * 8 + 4)
#define                                 SPI1EOSIF_bit       _BIT_ACCESS(SPI1INTF,4)
// SPI1CON1<SPI1FST>
extern volatile __bit                   SPI1FST             __at(0xEE4);	// @ (0x1DC * 8 + 4)
#define                                 SPI1FST_bit         _BIT_ACCESS(SPI1CON1,4)
// PIE7<SPI1IE>
extern volatile __bit                   SPI1IE              __at(0x23D2);	// @ (0x47A * 8 + 2)
#define                                 SPI1IE_bit          _BIT_ACCESS(PIE7,2)
// PIR7<SPI1IF>
extern volatile __bit                   SPI1IF              __at(0x2382);	// @ (0x470 * 8 + 2)
#define                                 SPI1IF_bit          _BIT_ACCESS(PIR7,2)
// IPR7<SPI1IP>
extern volatile __bit                   SPI1IP              __at(0x2422);	// @ (0x484 * 8 + 2)
#define                                 SPI1IP_bit          _BIT_ACCESS(IPR7,2)
// SPI1CON0<SPI1LSBF>
extern volatile __bit                   SPI1LSBF            __at(0xEDA);	// @ (0x1DB * 8 + 2)
#define                                 SPI1LSBF_bit        _BIT_ACCESS(SPI1CON0,2)
// PMD3<SPI1MD>
extern volatile __bit                   SPI1MD              __at(0x181D);	// @ (0x303 * 8 + 5)
#define                                 SPI1MD_bit          _BIT_ACCESS(PMD3,5)
// SPI1CON0<SPI1MST>
extern volatile __bit                   SPI1MST             __at(0xED9);	// @ (0x1DB * 8 + 1)
#define                                 SPI1MST_bit         _BIT_ACCESS(SPI1CON0,1)
// SPI1STATUS<SPI1RXBF>
extern volatile __bit                   SPI1RXBF            __at(0xEF0);	// @ (0x1DE * 8 + 0)
#define                                 SPI1RXBF_bit        _BIT_ACCESS(SPI1STATUS,0)
// PIE7<SPI1RXIE>
extern volatile __bit                   SPI1RXIE            __at(0x23D0);	// @ (0x47A * 8 + 0)
#define                                 SPI1RXIE_bit        _BIT_ACCESS(PIE7,0)
// PIR7<SPI1RXIF>
extern volatile __bit                   SPI1RXIF            __at(0x2380);	// @ (0x470 * 8 + 0)
#define                                 SPI1RXIF_bit        _BIT_ACCESS(PIR7,0)
// IPR7<SPI1RXIP>
extern volatile __bit                   SPI1RXIP            __at(0x2420);	// @ (0x484 * 8 + 0)
#define                                 SPI1RXIP_bit        _BIT_ACCESS(IPR7,0)
// SPI1INTE<SPI1RXOIE>
extern volatile __bit                   SPI1RXOIE           __at(0xF12);	// @ (0x1E2 * 8 + 2)
#define                                 SPI1RXOIE_bit       _BIT_ACCESS(SPI1INTE,2)
// SPI1INTF<SPI1RXOIF>
extern volatile __bit                   SPI1RXOIF           __at(0xF0A);	// @ (0x1E1 * 8 + 2)
#define                                 SPI1RXOIF_bit       _BIT_ACCESS(SPI1INTF,2)
// SPI1CON2<SPI1RXR>
extern volatile __bit                   SPI1RXR             __at(0xEE8);	// @ (0x1DD * 8 + 0)
#define                                 SPI1RXR_bit         _BIT_ACCESS(SPI1CON2,0)
// SPI1STATUS<SPI1RXRE>
extern volatile __bit                   SPI1RXRE            __at(0xEF3);	// @ (0x1DE * 8 + 3)
#define                                 SPI1RXRE_bit        _BIT_ACCESS(SPI1STATUS,3)
// SPI1SCKPPS<SPI1SCKPPS0>
extern volatile __bit                   SPI1SCKPPS0         __at(0x1D38);	// @ (0x3A7 * 8 + 0)
#define                                 SPI1SCKPPS0_bit     _BIT_ACCESS(SPI1SCKPPS,0)
// SPI1SCKPPS<SPI1SCKPPS1>
extern volatile __bit                   SPI1SCKPPS1         __at(0x1D39);	// @ (0x3A7 * 8 + 1)
#define                                 SPI1SCKPPS1_bit     _BIT_ACCESS(SPI1SCKPPS,1)
// SPI1SCKPPS<SPI1SCKPPS2>
extern volatile __bit                   SPI1SCKPPS2         __at(0x1D3A);	// @ (0x3A7 * 8 + 2)
#define                                 SPI1SCKPPS2_bit     _BIT_ACCESS(SPI1SCKPPS,2)
// SPI1SCKPPS<SPI1SCKPPS3>
extern volatile __bit                   SPI1SCKPPS3         __at(0x1D3B);	// @ (0x3A7 * 8 + 3)
#define                                 SPI1SCKPPS3_bit     _BIT_ACCESS(SPI1SCKPPS,3)
// SPI1SCKPPS<SPI1SCKPPS4>
extern volatile __bit                   SPI1SCKPPS4         __at(0x1D3C);	// @ (0x3A7 * 8 + 4)
#define                                 SPI1SCKPPS4_bit     _BIT_ACCESS(SPI1SCKPPS,4)
// SPI1CON1<SPI1SDIP>
extern volatile __bit                   SPI1SDIP            __at(0xEE1);	// @ (0x1DC * 8 + 1)
#define                                 SPI1SDIP_bit        _BIT_ACCESS(SPI1CON1,1)
// SPI1SDIPPS<SPI1SDIPPS0>
extern volatile __bit                   SPI1SDIPPS0         __at(0x1D40);	// @ (0x3A8 * 8 + 0)
#define                                 SPI1SDIPPS0_bit     _BIT_ACCESS(SPI1SDIPPS,0)
// SPI1SDIPPS<SPI1SDIPPS1>
extern volatile __bit                   SPI1SDIPPS1         __at(0x1D41);	// @ (0x3A8 * 8 + 1)
#define                                 SPI1SDIPPS1_bit     _BIT_ACCESS(SPI1SDIPPS,1)
// SPI1SDIPPS<SPI1SDIPPS2>
extern volatile __bit                   SPI1SDIPPS2         __at(0x1D42);	// @ (0x3A8 * 8 + 2)
#define                                 SPI1SDIPPS2_bit     _BIT_ACCESS(SPI1SDIPPS,2)
// SPI1SDIPPS<SPI1SDIPPS3>
extern volatile __bit                   SPI1SDIPPS3         __at(0x1D43);	// @ (0x3A8 * 8 + 3)
#define                                 SPI1SDIPPS3_bit     _BIT_ACCESS(SPI1SDIPPS,3)
// SPI1SDIPPS<SPI1SDIPPS4>
extern volatile __bit                   SPI1SDIPPS4         __at(0x1D44);	// @ (0x3A8 * 8 + 4)
#define                                 SPI1SDIPPS4_bit     _BIT_ACCESS(SPI1SDIPPS,4)
// SPI1CON1<SPI1SDOP>
extern volatile __bit                   SPI1SDOP            __at(0xEE0);	// @ (0x1DC * 8 + 0)
#define                                 SPI1SDOP_bit        _BIT_ACCESS(SPI1CON1,0)
// SPI1CON1<SPI1SMP>
extern volatile __bit                   SPI1SMP             __at(0xEE7);	// @ (0x1DC * 8 + 7)
#define                                 SPI1SMP_bit         _BIT_ACCESS(SPI1CON1,7)
// SPI1INTE<SPI1SOSIE>
extern volatile __bit                   SPI1SOSIE           __at(0xF15);	// @ (0x1E2 * 8 + 5)
#define                                 SPI1SOSIE_bit       _BIT_ACCESS(SPI1INTE,5)
// SPI1INTF<SPI1SOSIF>
extern volatile __bit                   SPI1SOSIF           __at(0xF0D);	// @ (0x1E1 * 8 + 5)
#define                                 SPI1SOSIF_bit       _BIT_ACCESS(SPI1INTF,5)
// SPI1CON0<SPI1SPIEN>
extern volatile __bit                   SPI1SPIEN           __at(0xEDF);	// @ (0x1DB * 8 + 7)
#define                                 SPI1SPIEN_bit       _BIT_ACCESS(SPI1CON0,7)
// SPI1INTE<SPI1SRMTIE>
extern volatile __bit                   SPI1SRMTIE          __at(0xF17);	// @ (0x1E2 * 8 + 7)
#define                                 SPI1SRMTIE_bit      _BIT_ACCESS(SPI1INTE,7)
// SPI1INTF<SPI1SRMTIF>
extern volatile __bit                   SPI1SRMTIF          __at(0xF0F);	// @ (0x1E1 * 8 + 7)
#define                                 SPI1SRMTIF_bit      _BIT_ACCESS(SPI1INTF,7)
// SPI1CON2<SPI1SSET>
extern volatile __bit                   SPI1SSET            __at(0xEEA);	// @ (0x1DD * 8 + 2)
#define                                 SPI1SSET_bit        _BIT_ACCESS(SPI1CON2,2)
// SPI1CON2<SPI1SSFLT>
extern volatile __bit                   SPI1SSFLT           __at(0xEEE);	// @ (0x1DD * 8 + 6)
#define                                 SPI1SSFLT_bit       _BIT_ACCESS(SPI1CON2,6)
// SPI1CON1<SPI1SSP>
extern volatile __bit                   SPI1SSP             __at(0xEE2);	// @ (0x1DC * 8 + 2)
#define                                 SPI1SSP_bit         _BIT_ACCESS(SPI1CON1,2)
// SPI1SSPPS<SPI1SSPPS0>
extern volatile __bit                   SPI1SSPPS0          __at(0x1D48);	// @ (0x3A9 * 8 + 0)
#define                                 SPI1SSPPS0_bit      _BIT_ACCESS(SPI1SSPPS,0)
// SPI1SSPPS<SPI1SSPPS1>
extern volatile __bit                   SPI1SSPPS1          __at(0x1D49);	// @ (0x3A9 * 8 + 1)
#define                                 SPI1SSPPS1_bit      _BIT_ACCESS(SPI1SSPPS,1)
// SPI1SSPPS<SPI1SSPPS2>
extern volatile __bit                   SPI1SSPPS2          __at(0x1D4A);	// @ (0x3A9 * 8 + 2)
#define                                 SPI1SSPPS2_bit      _BIT_ACCESS(SPI1SSPPS,2)
// SPI1SSPPS<SPI1SSPPS3>
extern volatile __bit                   SPI1SSPPS3          __at(0x1D4B);	// @ (0x3A9 * 8 + 3)
#define                                 SPI1SSPPS3_bit      _BIT_ACCESS(SPI1SSPPS,3)
// SPI1SSPPS<SPI1SSPPS4>
extern volatile __bit                   SPI1SSPPS4          __at(0x1D4C);	// @ (0x3A9 * 8 + 4)
#define                                 SPI1SSPPS4_bit      _BIT_ACCESS(SPI1SSPPS,4)
// SPI1INTE<SPI1TCZIE>
extern volatile __bit                   SPI1TCZIE           __at(0xF16);	// @ (0x1E2 * 8 + 6)
#define                                 SPI1TCZIE_bit       _BIT_ACCESS(SPI1INTE,6)
// SPI1INTF<SPI1TCZIF>
extern volatile __bit                   SPI1TCZIF           __at(0xF0E);	// @ (0x1E1 * 8 + 6)
#define                                 SPI1TCZIF_bit       _BIT_ACCESS(SPI1INTF,6)
// SPI1STATUS<SPI1TXBE>
extern volatile __bit                   SPI1TXBE            __at(0xEF5);	// @ (0x1DE * 8 + 5)
#define                                 SPI1TXBE_bit        _BIT_ACCESS(SPI1STATUS,5)
// PIE7<SPI1TXIE>
extern volatile __bit                   SPI1TXIE            __at(0x23D1);	// @ (0x47A * 8 + 1)
#define                                 SPI1TXIE_bit        _BIT_ACCESS(PIE7,1)
// PIR7<SPI1TXIF>
extern volatile __bit                   SPI1TXIF            __at(0x2381);	// @ (0x470 * 8 + 1)
#define                                 SPI1TXIF_bit        _BIT_ACCESS(PIR7,1)
// IPR7<SPI1TXIP>
extern volatile __bit                   SPI1TXIP            __at(0x2421);	// @ (0x484 * 8 + 1)
#define                                 SPI1TXIP_bit        _BIT_ACCESS(IPR7,1)
// SPI1CON2<SPI1TXR>
extern volatile __bit                   SPI1TXR             __at(0xEE9);	// @ (0x1DD * 8 + 1)
#define                                 SPI1TXR_bit         _BIT_ACCESS(SPI1CON2,1)
// SPI1INTE<SPI1TXUIE>
extern volatile __bit                   SPI1TXUIE           __at(0xF11);	// @ (0x1E2 * 8 + 1)
#define                                 SPI1TXUIE_bit       _BIT_ACCESS(SPI1INTE,1)
// SPI1INTF<SPI1TXUIF>
extern volatile __bit                   SPI1TXUIF           __at(0xF09);	// @ (0x1E1 * 8 + 1)
#define                                 SPI1TXUIF_bit       _BIT_ACCESS(SPI1INTF,1)
// SPI1STATUS<SPI1TXWE>
extern volatile __bit                   SPI1TXWE            __at(0xEF7);	// @ (0x1DE * 8 + 7)
#define                                 SPI1TXWE_bit        _BIT_ACCESS(SPI1STATUS,7)
// DMAnSPTRL<SPTR0>
extern volatile __bit                   SPTR0               __at(0x260);	// @ (0x4C * 8 + 0)
#define                                 SPTR0_bit           _BIT_ACCESS(DMAnSPTRL,0)
// DMAnSPTRL<SPTR1>
extern volatile __bit                   SPTR1               __at(0x261);	// @ (0x4C * 8 + 1)
#define                                 SPTR1_bit           _BIT_ACCESS(DMAnSPTRL,1)
// DMAnSPTRH<SPTR10>
extern volatile __bit                   SPTR10              __at(0x26A);	// @ (0x4D * 8 + 2)
#define                                 SPTR10_bit          _BIT_ACCESS(DMAnSPTRH,2)
// DMAnSPTRH<SPTR11>
extern volatile __bit                   SPTR11              __at(0x26B);	// @ (0x4D * 8 + 3)
#define                                 SPTR11_bit          _BIT_ACCESS(DMAnSPTRH,3)
// DMAnSPTRH<SPTR12>
extern volatile __bit                   SPTR12              __at(0x26C);	// @ (0x4D * 8 + 4)
#define                                 SPTR12_bit          _BIT_ACCESS(DMAnSPTRH,4)
// DMAnSPTRH<SPTR13>
extern volatile __bit                   SPTR13              __at(0x26D);	// @ (0x4D * 8 + 5)
#define                                 SPTR13_bit          _BIT_ACCESS(DMAnSPTRH,5)
// DMAnSPTRH<SPTR14>
extern volatile __bit                   SPTR14              __at(0x26E);	// @ (0x4D * 8 + 6)
#define                                 SPTR14_bit          _BIT_ACCESS(DMAnSPTRH,6)
// DMAnSPTRH<SPTR15>
extern volatile __bit                   SPTR15              __at(0x26F);	// @ (0x4D * 8 + 7)
#define                                 SPTR15_bit          _BIT_ACCESS(DMAnSPTRH,7)
// DMAnSPTRU<SPTR16>
extern volatile __bit                   SPTR16              __at(0x270);	// @ (0x4E * 8 + 0)
#define                                 SPTR16_bit          _BIT_ACCESS(DMAnSPTRU,0)
// DMAnSPTRU<SPTR17>
extern volatile __bit                   SPTR17              __at(0x271);	// @ (0x4E * 8 + 1)
#define                                 SPTR17_bit          _BIT_ACCESS(DMAnSPTRU,1)
// DMAnSPTRU<SPTR18>
extern volatile __bit                   SPTR18              __at(0x272);	// @ (0x4E * 8 + 2)
#define                                 SPTR18_bit          _BIT_ACCESS(DMAnSPTRU,2)
// DMAnSPTRU<SPTR19>
extern volatile __bit                   SPTR19              __at(0x273);	// @ (0x4E * 8 + 3)
#define                                 SPTR19_bit          _BIT_ACCESS(DMAnSPTRU,3)
// DMAnSPTRL<SPTR2>
extern volatile __bit                   SPTR2               __at(0x262);	// @ (0x4C * 8 + 2)
#define                                 SPTR2_bit           _BIT_ACCESS(DMAnSPTRL,2)
// DMAnSPTRU<SPTR20>
extern volatile __bit                   SPTR20              __at(0x274);	// @ (0x4E * 8 + 4)
#define                                 SPTR20_bit          _BIT_ACCESS(DMAnSPTRU,4)
// DMAnSPTRU<SPTR21>
extern volatile __bit                   SPTR21              __at(0x275);	// @ (0x4E * 8 + 5)
#define                                 SPTR21_bit          _BIT_ACCESS(DMAnSPTRU,5)
// DMAnSPTRL<SPTR3>
extern volatile __bit                   SPTR3               __at(0x263);	// @ (0x4C * 8 + 3)
#define                                 SPTR3_bit           _BIT_ACCESS(DMAnSPTRL,3)
// DMAnSPTRL<SPTR4>
extern volatile __bit                   SPTR4               __at(0x264);	// @ (0x4C * 8 + 4)
#define                                 SPTR4_bit           _BIT_ACCESS(DMAnSPTRL,4)
// DMAnSPTRL<SPTR5>
extern volatile __bit                   SPTR5               __at(0x265);	// @ (0x4C * 8 + 5)
#define                                 SPTR5_bit           _BIT_ACCESS(DMAnSPTRL,5)
// DMAnSPTRL<SPTR6>
extern volatile __bit                   SPTR6               __at(0x266);	// @ (0x4C * 8 + 6)
#define                                 SPTR6_bit           _BIT_ACCESS(DMAnSPTRL,6)
// DMAnSPTRL<SPTR7>
extern volatile __bit                   SPTR7               __at(0x267);	// @ (0x4C * 8 + 7)
#define                                 SPTR7_bit           _BIT_ACCESS(DMAnSPTRL,7)
// DMAnSPTRH<SPTR8>
extern volatile __bit                   SPTR8               __at(0x268);	// @ (0x4D * 8 + 0)
#define                                 SPTR8_bit           _BIT_ACCESS(DMAnSPTRH,0)
// DMAnSPTRH<SPTR9>
extern volatile __bit                   SPTR9               __at(0x269);	// @ (0x4D * 8 + 1)
#define                                 SPTR9_bit           _BIT_ACCESS(DMAnSPTRH,1)
// SPI1INTE<SRMTIE>
extern volatile __bit                   SRMTIE              __at(0xF17);	// @ (0x1E2 * 8 + 7)
#define                                 SRMTIE_bit          _BIT_ACCESS(SPI1INTE,7)
// SPI1INTF<SRMTIF>
extern volatile __bit                   SRMTIF              __at(0xF0F);	// @ (0x1E1 * 8 + 7)
#define                                 SRMTIF_bit          _BIT_ACCESS(SPI1INTF,7)
// DMAnSSAL<SSA0>
extern volatile __bit                   SSA0                __at(0x288);	// @ (0x51 * 8 + 0)
#define                                 SSA0_bit            _BIT_ACCESS(DMAnSSAL,0)
// DMAnSSAL<SSA1>
extern volatile __bit                   SSA1                __at(0x289);	// @ (0x51 * 8 + 1)
#define                                 SSA1_bit            _BIT_ACCESS(DMAnSSAL,1)
// DMAnSSAH<SSA10>
extern volatile __bit                   SSA10               __at(0x292);	// @ (0x52 * 8 + 2)
#define                                 SSA10_bit           _BIT_ACCESS(DMAnSSAH,2)
// DMAnSSAH<SSA11>
extern volatile __bit                   SSA11               __at(0x293);	// @ (0x52 * 8 + 3)
#define                                 SSA11_bit           _BIT_ACCESS(DMAnSSAH,3)
// DMAnSSAH<SSA12>
extern volatile __bit                   SSA12               __at(0x294);	// @ (0x52 * 8 + 4)
#define                                 SSA12_bit           _BIT_ACCESS(DMAnSSAH,4)
// DMAnSSAH<SSA13>
extern volatile __bit                   SSA13               __at(0x295);	// @ (0x52 * 8 + 5)
#define                                 SSA13_bit           _BIT_ACCESS(DMAnSSAH,5)
// DMAnSSAH<SSA14>
extern volatile __bit                   SSA14               __at(0x296);	// @ (0x52 * 8 + 6)
#define                                 SSA14_bit           _BIT_ACCESS(DMAnSSAH,6)
// DMAnSSAH<SSA15>
extern volatile __bit                   SSA15               __at(0x297);	// @ (0x52 * 8 + 7)
#define                                 SSA15_bit           _BIT_ACCESS(DMAnSSAH,7)
// DMAnSSAU<SSA16>
extern volatile __bit                   SSA16               __at(0x298);	// @ (0x53 * 8 + 0)
#define                                 SSA16_bit           _BIT_ACCESS(DMAnSSAU,0)
// DMAnSSAU<SSA17>
extern volatile __bit                   SSA17               __at(0x299);	// @ (0x53 * 8 + 1)
#define                                 SSA17_bit           _BIT_ACCESS(DMAnSSAU,1)
// DMAnSSAU<SSA18>
extern volatile __bit                   SSA18               __at(0x29A);	// @ (0x53 * 8 + 2)
#define                                 SSA18_bit           _BIT_ACCESS(DMAnSSAU,2)
// DMAnSSAU<SSA19>
extern volatile __bit                   SSA19               __at(0x29B);	// @ (0x53 * 8 + 3)
#define                                 SSA19_bit           _BIT_ACCESS(DMAnSSAU,3)
// DMAnSSAL<SSA2>
extern volatile __bit                   SSA2                __at(0x28A);	// @ (0x51 * 8 + 2)
#define                                 SSA2_bit            _BIT_ACCESS(DMAnSSAL,2)
// DMAnSSAU<SSA20>
extern volatile __bit                   SSA20               __at(0x29C);	// @ (0x53 * 8 + 4)
#define                                 SSA20_bit           _BIT_ACCESS(DMAnSSAU,4)
// DMAnSSAU<SSA21>
extern volatile __bit                   SSA21               __at(0x29D);	// @ (0x53 * 8 + 5)
#define                                 SSA21_bit           _BIT_ACCESS(DMAnSSAU,5)
// DMAnSSAL<SSA3>
extern volatile __bit                   SSA3                __at(0x28B);	// @ (0x51 * 8 + 3)
#define                                 SSA3_bit            _BIT_ACCESS(DMAnSSAL,3)
// DMAnSSAL<SSA4>
extern volatile __bit                   SSA4                __at(0x28C);	// @ (0x51 * 8 + 4)
#define                                 SSA4_bit            _BIT_ACCESS(DMAnSSAL,4)
// DMAnSSAL<SSA5>
extern volatile __bit                   SSA5                __at(0x28D);	// @ (0x51 * 8 + 5)
#define                                 SSA5_bit            _BIT_ACCESS(DMAnSSAL,5)
// DMAnSSAL<SSA6>
extern volatile __bit                   SSA6                __at(0x28E);	// @ (0x51 * 8 + 6)
#define                                 SSA6_bit            _BIT_ACCESS(DMAnSSAL,6)
// DMAnSSAL<SSA7>
extern volatile __bit                   SSA7                __at(0x28F);	// @ (0x51 * 8 + 7)
#define                                 SSA7_bit            _BIT_ACCESS(DMAnSSAL,7)
// DMAnSSAH<SSA8>
extern volatile __bit                   SSA8                __at(0x290);	// @ (0x52 * 8 + 0)
#define                                 SSA8_bit            _BIT_ACCESS(DMAnSSAH,0)
// DMAnSSAH<SSA9>
extern volatile __bit                   SSA9                __at(0x291);	// @ (0x52 * 8 + 1)
#define                                 SSA9_bit            _BIT_ACCESS(DMAnSSAH,1)
// SPI1CON2<SSET>
extern volatile __bit                   SSET                __at(0xEEA);	// @ (0x1DD * 8 + 2)
#define                                 SSET_bit            _BIT_ACCESS(SPI1CON2,2)
// SPI1CON2<SSFLT>
extern volatile __bit                   SSFLT               __at(0xEEE);	// @ (0x1DD * 8 + 6)
#define                                 SSFLT_bit           _BIT_ACCESS(SPI1CON2,6)
// SPI1CON1<SSP>
extern volatile __bit                   SSP                 __at(0xEE2);	// @ (0x1DC * 8 + 2)
#define                                 SSP_bit             _BIT_ACCESS(SPI1CON1,2)
// DMAnCON1<SSTP>
extern volatile __bit                   SSTP                __at(0x2A8);	// @ (0x55 * 8 + 0)
#define                                 SSTP_bit            _BIT_ACCESS(DMAnCON1,0)
// DMAnSSZL<SSZ0>
extern volatile __bit                   SSZ0                __at(0x278);	// @ (0x4F * 8 + 0)
#define                                 SSZ0_bit            _BIT_ACCESS(DMAnSSZL,0)
// DMAnSSZL<SSZ1>
extern volatile __bit                   SSZ1                __at(0x279);	// @ (0x4F * 8 + 1)
#define                                 SSZ1_bit            _BIT_ACCESS(DMAnSSZL,1)
// DMAnSSZH<SSZ10>
extern volatile __bit                   SSZ10               __at(0x282);	// @ (0x50 * 8 + 2)
#define                                 SSZ10_bit           _BIT_ACCESS(DMAnSSZH,2)
// DMAnSSZH<SSZ11>
extern volatile __bit                   SSZ11               __at(0x283);	// @ (0x50 * 8 + 3)
#define                                 SSZ11_bit           _BIT_ACCESS(DMAnSSZH,3)
// DMAnSSZL<SSZ2>
extern volatile __bit                   SSZ2                __at(0x27A);	// @ (0x4F * 8 + 2)
#define                                 SSZ2_bit            _BIT_ACCESS(DMAnSSZL,2)
// DMAnSSZL<SSZ3>
extern volatile __bit                   SSZ3                __at(0x27B);	// @ (0x4F * 8 + 3)
#define                                 SSZ3_bit            _BIT_ACCESS(DMAnSSZL,3)
// DMAnSSZL<SSZ4>
extern volatile __bit                   SSZ4                __at(0x27C);	// @ (0x4F * 8 + 4)
#define                                 SSZ4_bit            _BIT_ACCESS(DMAnSSZL,4)
// DMAnSSZL<SSZ5>
extern volatile __bit                   SSZ5                __at(0x27D);	// @ (0x4F * 8 + 5)
#define                                 SSZ5_bit            _BIT_ACCESS(DMAnSSZL,5)
// DMAnSSZL<SSZ6>
extern volatile __bit                   SSZ6                __at(0x27E);	// @ (0x4F * 8 + 6)
#define                                 SSZ6_bit            _BIT_ACCESS(DMAnSSZL,6)
// DMAnSSZL<SSZ7>
extern volatile __bit                   SSZ7                __at(0x27F);	// @ (0x4F * 8 + 7)
#define                                 SSZ7_bit            _BIT_ACCESS(DMAnSSZL,7)
// DMAnSSZH<SSZ8>
extern volatile __bit                   SSZ8                __at(0x280);	// @ (0x50 * 8 + 0)
#define                                 SSZ8_bit            _BIT_ACCESS(DMAnSSZH,0)
// DMAnSSZH<SSZ9>
extern volatile __bit                   SSZ9                __at(0x281);	// @ (0x50 * 8 + 1)
#define                                 SSZ9_bit            _BIT_ACCESS(DMAnSSZH,1)
// ADSTAT<STAT2>
extern volatile __bit                   STAT2               __at(0x119A);	// @ (0x233 * 8 + 2)
#define                                 STAT2_bit           _BIT_ACCESS(ADSTAT,2)
// WDTTMR<STATE>
extern volatile __bit                   STATE               __at(0x3C2);	// @ (0x78 * 8 + 2)
#define                                 STATE_bit           _BIT_ACCESS(WDTTMR,2)
// PCON0<STKOVF>
extern volatile __bit                   STKOVF              __at(0x2787);	// @ (0x4F0 * 8 + 7)
#define                                 STKOVF_bit          _BIT_ACCESS(PCON0,7)
// PCON0<STKUNF>
extern volatile __bit                   STKUNF              __at(0x2786);	// @ (0x4F0 * 8 + 6)
#define                                 STKUNF_bit          _BIT_ACCESS(PCON0,6)
// ADSTPTL<STPT0>
extern volatile __bit                   STPT0               __at(0x10D8);	// @ (0x21B * 8 + 0)
#define                                 STPT0_bit           _BIT_ACCESS(ADSTPTL,0)
// ADSTPTL<STPT1>
extern volatile __bit                   STPT1               __at(0x10D9);	// @ (0x21B * 8 + 1)
#define                                 STPT1_bit           _BIT_ACCESS(ADSTPTL,1)
// ADSTPTH<STPT10>
extern volatile __bit                   STPT10              __at(0x10E2);	// @ (0x21C * 8 + 2)
#define                                 STPT10_bit          _BIT_ACCESS(ADSTPTH,2)
// ADSTPTH<STPT11>
extern volatile __bit                   STPT11              __at(0x10E3);	// @ (0x21C * 8 + 3)
#define                                 STPT11_bit          _BIT_ACCESS(ADSTPTH,3)
// ADSTPTH<STPT12>
extern volatile __bit                   STPT12              __at(0x10E4);	// @ (0x21C * 8 + 4)
#define                                 STPT12_bit          _BIT_ACCESS(ADSTPTH,4)
// ADSTPTH<STPT13>
extern volatile __bit                   STPT13              __at(0x10E5);	// @ (0x21C * 8 + 5)
#define                                 STPT13_bit          _BIT_ACCESS(ADSTPTH,5)
// ADSTPTH<STPT15>
extern volatile __bit                   STPT15              __at(0x10E6);	// @ (0x21C * 8 + 6)
#define                                 STPT15_bit          _BIT_ACCESS(ADSTPTH,6)
// ADSTPTH<STPT16>
extern volatile __bit                   STPT16              __at(0x10E7);	// @ (0x21C * 8 + 7)
#define                                 STPT16_bit          _BIT_ACCESS(ADSTPTH,7)
// ADSTPTL<STPT2>
extern volatile __bit                   STPT2               __at(0x10DA);	// @ (0x21B * 8 + 2)
#define                                 STPT2_bit           _BIT_ACCESS(ADSTPTL,2)
// ADSTPTL<STPT3>
extern volatile __bit                   STPT3               __at(0x10DB);	// @ (0x21B * 8 + 3)
#define                                 STPT3_bit           _BIT_ACCESS(ADSTPTL,3)
// ADSTPTL<STPT4>
extern volatile __bit                   STPT4               __at(0x10DC);	// @ (0x21B * 8 + 4)
#define                                 STPT4_bit           _BIT_ACCESS(ADSTPTL,4)
// ADSTPTL<STPT5>
extern volatile __bit                   STPT5               __at(0x10DD);	// @ (0x21B * 8 + 5)
#define                                 STPT5_bit           _BIT_ACCESS(ADSTPTL,5)
// ADSTPTL<STPT6>
extern volatile __bit                   STPT6               __at(0x10DE);	// @ (0x21B * 8 + 6)
#define                                 STPT6_bit           _BIT_ACCESS(ADSTPTL,6)
// ADSTPTL<STPT7>
extern volatile __bit                   STPT7               __at(0x10DF);	// @ (0x21B * 8 + 7)
#define                                 STPT7_bit           _BIT_ACCESS(ADSTPTL,7)
// ADSTPTH<STPT8>
extern volatile __bit                   STPT8               __at(0x10E0);	// @ (0x21C * 8 + 0)
#define                                 STPT8_bit           _BIT_ACCESS(ADSTPTH,0)
// ADSTPTH<STPT9>
extern volatile __bit                   STPT9               __at(0x10E1);	// @ (0x21C * 8 + 1)
#define                                 STPT9_bit           _BIT_ACCESS(ADSTPTH,1)
// CWG1STR<STRA>
extern volatile __bit                   STRA                __at(0xD08);	// @ (0x1A1 * 8 + 0)
#define                                 STRA_bit            _BIT_ACCESS(CWG1STR,0)
// CWG1STR<STRB>
extern volatile __bit                   STRB                __at(0xD09);	// @ (0x1A1 * 8 + 1)
#define                                 STRB_bit            _BIT_ACCESS(CWG1STR,1)
// CWG1STR<STRC>
extern volatile __bit                   STRC                __at(0xD0A);	// @ (0x1A1 * 8 + 2)
#define                                 STRC_bit            _BIT_ACCESS(CWG1STR,2)
// CWG1STR<STRD>
extern volatile __bit                   STRD                __at(0xD0B);	// @ (0x1A1 * 8 + 3)
#define                                 STRD_bit            _BIT_ACCESS(CWG1STR,3)
// WDTCON0<SWDTEN>
extern volatile __bit                   SWDTEN              __at(0x3A0);	// @ (0x74 * 8 + 0)
#define                                 SWDTEN_bit          _BIT_ACCESS(WDTCON0,0)
// PIE0<SWIE>
extern volatile __bit                   SWIE                __at(0x2398);	// @ (0x473 * 8 + 0)
#define                                 SWIE_bit            _BIT_ACCESS(PIE0,0)
// PIR0<SWIF>
extern volatile __bit                   SWIF                __at(0x2348);	// @ (0x469 * 8 + 0)
#define                                 SWIF_bit            _BIT_ACCESS(PIR0,0)
// IPR0<SWIP>
extern volatile __bit                   SWIP                __at(0x23E8);	// @ (0x47D * 8 + 0)
#define                                 SWIP_bit            _BIT_ACCESS(IPR0,0)
// PMD0<SYSCMD>
extern volatile __bit                   SYSCMD              __at(0x1807);	// @ (0x300 * 8 + 7)
#define                                 SYSCMD_bit          _BIT_ACCESS(PMD0,7)
// T0CON0<T016BIT>
extern volatile __bit                   T016BIT             __at(0x82C);	// @ (0x105 * 8 + 4)
#define                                 T016BIT_bit         _BIT_ACCESS(T0CON0,4)
// T0CON1<T0ASYNC>
extern volatile __bit                   T0ASYNC             __at(0x834);	// @ (0x106 * 8 + 4)
#define                                 T0ASYNC_bit         _BIT_ACCESS(T0CON1,4)
// T0CKIPPS<T0CKIPPS0>
extern volatile __bit                   T0CKIPPS0           __at(0x1AA8);	// @ (0x355 * 8 + 0)
#define                                 T0CKIPPS0_bit       _BIT_ACCESS(T0CKIPPS,0)
// T0CKIPPS<T0CKIPPS1>
extern volatile __bit                   T0CKIPPS1           __at(0x1AA9);	// @ (0x355 * 8 + 1)
#define                                 T0CKIPPS1_bit       _BIT_ACCESS(T0CKIPPS,1)
// T0CKIPPS<T0CKIPPS2>
extern volatile __bit                   T0CKIPPS2           __at(0x1AAA);	// @ (0x355 * 8 + 2)
#define                                 T0CKIPPS2_bit       _BIT_ACCESS(T0CKIPPS,2)
// T0CKIPPS<T0CKIPPS3>
extern volatile __bit                   T0CKIPPS3           __at(0x1AAB);	// @ (0x355 * 8 + 3)
#define                                 T0CKIPPS3_bit       _BIT_ACCESS(T0CKIPPS,3)
// T0CKIPPS<T0CKIPPS4>
extern volatile __bit                   T0CKIPPS4           __at(0x1AAC);	// @ (0x355 * 8 + 4)
#define                                 T0CKIPPS4_bit       _BIT_ACCESS(T0CKIPPS,4)
// T0CON1<T0CKPS0>
extern volatile __bit                   T0CKPS0             __at(0x830);	// @ (0x106 * 8 + 0)
#define                                 T0CKPS0_bit         _BIT_ACCESS(T0CON1,0)
// T0CON1<T0CKPS1>
extern volatile __bit                   T0CKPS1             __at(0x831);	// @ (0x106 * 8 + 1)
#define                                 T0CKPS1_bit         _BIT_ACCESS(T0CON1,1)
// T0CON1<T0CKPS2>
extern volatile __bit                   T0CKPS2             __at(0x832);	// @ (0x106 * 8 + 2)
#define                                 T0CKPS2_bit         _BIT_ACCESS(T0CON1,2)
// T0CON1<T0CKPS3>
extern volatile __bit                   T0CKPS3             __at(0x833);	// @ (0x106 * 8 + 3)
#define                                 T0CKPS3_bit         _BIT_ACCESS(T0CON1,3)
// T0CON1<T0CS0>
extern volatile __bit                   T0CS0               __at(0x835);	// @ (0x106 * 8 + 5)
#define                                 T0CS0_bit           _BIT_ACCESS(T0CON1,5)
// T0CON1<T0CS1>
extern volatile __bit                   T0CS1               __at(0x836);	// @ (0x106 * 8 + 6)
#define                                 T0CS1_bit           _BIT_ACCESS(T0CON1,6)
// T0CON1<T0CS2>
extern volatile __bit                   T0CS2               __at(0x837);	// @ (0x106 * 8 + 7)
#define                                 T0CS2_bit           _BIT_ACCESS(T0CON1,7)
// T0CON0<T0EN>
extern volatile __bit                   T0EN                __at(0x82F);	// @ (0x105 * 8 + 7)
#define                                 T0EN_bit            _BIT_ACCESS(T0CON0,7)
// T0CON0<T0MD16>
extern volatile __bit                   T0MD16              __at(0x82C);	// @ (0x105 * 8 + 4)
#define                                 T0MD16_bit          _BIT_ACCESS(T0CON0,4)
// T0CON0<T0OUT>
extern volatile __bit                   T0OUT               __at(0x82D);	// @ (0x105 * 8 + 5)
#define                                 T0OUT_bit           _BIT_ACCESS(T0CON0,5)
// T0CON0<T0OUTPS0>
extern volatile __bit                   T0OUTPS0            __at(0x828);	// @ (0x105 * 8 + 0)
#define                                 T0OUTPS0_bit        _BIT_ACCESS(T0CON0,0)
// T0CON0<T0OUTPS1>
extern volatile __bit                   T0OUTPS1            __at(0x829);	// @ (0x105 * 8 + 1)
#define                                 T0OUTPS1_bit        _BIT_ACCESS(T0CON0,1)
// T0CON0<T0OUTPS2>
extern volatile __bit                   T0OUTPS2            __at(0x82A);	// @ (0x105 * 8 + 2)
#define                                 T0OUTPS2_bit        _BIT_ACCESS(T0CON0,2)
// T0CON0<T0OUTPS3>
extern volatile __bit                   T0OUTPS3            __at(0x82B);	// @ (0x105 * 8 + 3)
#define                                 T0OUTPS3_bit        _BIT_ACCESS(T0CON0,3)
// TMR0H<T0PR0>
extern volatile __bit                   T0PR0               __at(0x820);	// @ (0x104 * 8 + 0)
#define                                 T0PR0_bit           _BIT_ACCESS(TMR0H,0)
// TMR0H<T0PR1>
extern volatile __bit                   T0PR1               __at(0x821);	// @ (0x104 * 8 + 1)
#define                                 T0PR1_bit           _BIT_ACCESS(TMR0H,1)
// TMR0H<T0PR2>
extern volatile __bit                   T0PR2               __at(0x822);	// @ (0x104 * 8 + 2)
#define                                 T0PR2_bit           _BIT_ACCESS(TMR0H,2)
// TMR0H<T0PR3>
extern volatile __bit                   T0PR3               __at(0x823);	// @ (0x104 * 8 + 3)
#define                                 T0PR3_bit           _BIT_ACCESS(TMR0H,3)
// TMR0H<T0PR4>
extern volatile __bit                   T0PR4               __at(0x824);	// @ (0x104 * 8 + 4)
#define                                 T0PR4_bit           _BIT_ACCESS(TMR0H,4)
// TMR0H<T0PR5>
extern volatile __bit                   T0PR5               __at(0x825);	// @ (0x104 * 8 + 5)
#define                                 T0PR5_bit           _BIT_ACCESS(TMR0H,5)
// TMR0H<T0PR6>
extern volatile __bit                   T0PR6               __at(0x826);	// @ (0x104 * 8 + 6)
#define                                 T0PR6_bit           _BIT_ACCESS(TMR0H,6)
// TMR0H<T0PR7>
extern volatile __bit                   T0PR7               __at(0x827);	// @ (0x104 * 8 + 7)
#define                                 T0PR7_bit           _BIT_ACCESS(TMR0H,7)
// T1CKIPPS<T1CKIPPS0>
extern volatile __bit                   T1CKIPPS0           __at(0x1AB0);	// @ (0x356 * 8 + 0)
#define                                 T1CKIPPS0_bit       _BIT_ACCESS(T1CKIPPS,0)
// T1CKIPPS<T1CKIPPS1>
extern volatile __bit                   T1CKIPPS1           __at(0x1AB1);	// @ (0x356 * 8 + 1)
#define                                 T1CKIPPS1_bit       _BIT_ACCESS(T1CKIPPS,1)
// T1CKIPPS<T1CKIPPS2>
extern volatile __bit                   T1CKIPPS2           __at(0x1AB2);	// @ (0x356 * 8 + 2)
#define                                 T1CKIPPS2_bit       _BIT_ACCESS(T1CKIPPS,2)
// T1CKIPPS<T1CKIPPS3>
extern volatile __bit                   T1CKIPPS3           __at(0x1AB3);	// @ (0x356 * 8 + 3)
#define                                 T1CKIPPS3_bit       _BIT_ACCESS(T1CKIPPS,3)
// T1CKIPPS<T1CKIPPS4>
extern volatile __bit                   T1CKIPPS4           __at(0x1AB4);	// @ (0x356 * 8 + 4)
#define                                 T1CKIPPS4_bit       _BIT_ACCESS(T1CKIPPS,4)
// T1CON<T1CKPS0>
extern volatile __bit                   T1CKPS0             __at(0x84C);	// @ (0x109 * 8 + 4)
#define                                 T1CKPS0_bit         _BIT_ACCESS(T1CON,4)
// T1CON<T1CKPS1>
extern volatile __bit                   T1CKPS1             __at(0x84D);	// @ (0x109 * 8 + 5)
#define                                 T1CKPS1_bit         _BIT_ACCESS(T1CON,5)
// T1CLK<T1CS0>
extern volatile __bit                   T1CS0               __at(0x860);	// @ (0x10C * 8 + 0)
#define                                 T1CS0_bit           _BIT_ACCESS(T1CLK,0)
// T1CLK<T1CS1>
extern volatile __bit                   T1CS1               __at(0x861);	// @ (0x10C * 8 + 1)
#define                                 T1CS1_bit           _BIT_ACCESS(T1CLK,1)
// T1CLK<T1CS2>
extern volatile __bit                   T1CS2               __at(0x862);	// @ (0x10C * 8 + 2)
#define                                 T1CS2_bit           _BIT_ACCESS(T1CLK,2)
// T1CLK<T1CS3>
extern volatile __bit                   T1CS3               __at(0x863);	// @ (0x10C * 8 + 3)
#define                                 T1CS3_bit           _BIT_ACCESS(T1CLK,3)
// T1GCON<T1GE>
extern volatile __bit                   T1GE                __at(0x857);	// @ (0x10A * 8 + 7)
#define                                 T1GE_bit            _BIT_ACCESS(T1GCON,7)
// T1GCON<T1GGO>
extern volatile __bit                   T1GGO               __at(0x853);	// @ (0x10A * 8 + 3)
#define                                 T1GGO_bit           _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GGO_NOT_DONE>
extern volatile __bit                   T1GGO_NOT_DONE      __at(0x853);	// @ (0x10A * 8 + 3)
#define                                 T1GGO_NOT_DONE_bit  _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GGO_nDONE>
extern volatile __bit                   T1GGO_nDONE         __at(0x853);	// @ (0x10A * 8 + 3)
#define                                 T1GGO_nDONE_bit     _BIT_ACCESS(T1GCON,3)
// T1GCON<T1GPOL>
extern volatile __bit                   T1GPOL              __at(0x856);	// @ (0x10A * 8 + 6)
#define                                 T1GPOL_bit          _BIT_ACCESS(T1GCON,6)
// T1GPPS<T1GPPS0>
extern volatile __bit                   T1GPPS0             __at(0x1AB8);	// @ (0x357 * 8 + 0)
#define                                 T1GPPS0_bit         _BIT_ACCESS(T1GPPS,0)
// T1GPPS<T1GPPS1>
extern volatile __bit                   T1GPPS1             __at(0x1AB9);	// @ (0x357 * 8 + 1)
#define                                 T1GPPS1_bit         _BIT_ACCESS(T1GPPS,1)
// T1GPPS<T1GPPS2>
extern volatile __bit                   T1GPPS2             __at(0x1ABA);	// @ (0x357 * 8 + 2)
#define                                 T1GPPS2_bit         _BIT_ACCESS(T1GPPS,2)
// T1GPPS<T1GPPS3>
extern volatile __bit                   T1GPPS3             __at(0x1ABB);	// @ (0x357 * 8 + 3)
#define                                 T1GPPS3_bit         _BIT_ACCESS(T1GPPS,3)
// T1GPPS<T1GPPS4>
extern volatile __bit                   T1GPPS4             __at(0x1ABC);	// @ (0x357 * 8 + 4)
#define                                 T1GPPS4_bit         _BIT_ACCESS(T1GPPS,4)
// T1GCON<T1GSPM>
extern volatile __bit                   T1GSPM              __at(0x854);	// @ (0x10A * 8 + 4)
#define                                 T1GSPM_bit          _BIT_ACCESS(T1GCON,4)
// T1GATE<T1GSS0>
extern volatile __bit                   T1GSS0              __at(0x858);	// @ (0x10B * 8 + 0)
#define                                 T1GSS0_bit          _BIT_ACCESS(T1GATE,0)
// T1GATE<T1GSS1>
extern volatile __bit                   T1GSS1              __at(0x859);	// @ (0x10B * 8 + 1)
#define                                 T1GSS1_bit          _BIT_ACCESS(T1GATE,1)
// T1GATE<T1GSS2>
extern volatile __bit                   T1GSS2              __at(0x85A);	// @ (0x10B * 8 + 2)
#define                                 T1GSS2_bit          _BIT_ACCESS(T1GATE,2)
// T1GATE<T1GSS3>
extern volatile __bit                   T1GSS3              __at(0x85B);	// @ (0x10B * 8 + 3)
#define                                 T1GSS3_bit          _BIT_ACCESS(T1GATE,3)
// T1GCON<T1GTM>
extern volatile __bit                   T1GTM               __at(0x855);	// @ (0x10A * 8 + 5)
#define                                 T1GTM_bit           _BIT_ACCESS(T1GCON,5)
// T1GCON<T1GVAL>
extern volatile __bit                   T1GVAL              __at(0x852);	// @ (0x10A * 8 + 2)
#define                                 T1GVAL_bit          _BIT_ACCESS(T1GCON,2)
// T1CON<T1RD16>
extern volatile __bit                   T1RD16              __at(0x849);	// @ (0x109 * 8 + 1)
#define                                 T1RD16_bit          _BIT_ACCESS(T1CON,1)
// T2HLT<T2CKPOL>
extern volatile __bit                   T2CKPOL             __at(0x8E6);	// @ (0x11C * 8 + 6)
#define                                 T2CKPOL_bit         _BIT_ACCESS(T2HLT,6)
// T2CON<T2CKPS0>
extern volatile __bit                   T2CKPS0             __at(0x8DC);	// @ (0x11B * 8 + 4)
#define                                 T2CKPS0_bit         _BIT_ACCESS(T2CON,4)
// T2CON<T2CKPS1>
extern volatile __bit                   T2CKPS1             __at(0x8DD);	// @ (0x11B * 8 + 5)
#define                                 T2CKPS1_bit         _BIT_ACCESS(T2CON,5)
// T2CON<T2CKPS2>
extern volatile __bit                   T2CKPS2             __at(0x8DE);	// @ (0x11B * 8 + 6)
#define                                 T2CKPS2_bit         _BIT_ACCESS(T2CON,6)
// T2HLT<T2CKSYNC>
extern volatile __bit                   T2CKSYNC            __at(0x8E5);	// @ (0x11C * 8 + 5)
#define                                 T2CKSYNC_bit        _BIT_ACCESS(T2HLT,5)
// T2CLKCON<T2CS0>
extern volatile __bit                   T2CS0               __at(0x8E8);	// @ (0x11D * 8 + 0)
#define                                 T2CS0_bit           _BIT_ACCESS(T2CLKCON,0)
// T2CLKCON<T2CS1>
extern volatile __bit                   T2CS1               __at(0x8E9);	// @ (0x11D * 8 + 1)
#define                                 T2CS1_bit           _BIT_ACCESS(T2CLKCON,1)
// T2CLKCON<T2CS2>
extern volatile __bit                   T2CS2               __at(0x8EA);	// @ (0x11D * 8 + 2)
#define                                 T2CS2_bit           _BIT_ACCESS(T2CLKCON,2)
// T2CLKCON<T2CS3>
extern volatile __bit                   T2CS3               __at(0x8EB);	// @ (0x11D * 8 + 3)
#define                                 T2CS3_bit           _BIT_ACCESS(T2CLKCON,3)
// T2INPPS<T2INPPS0>
extern volatile __bit                   T2INPPS0            __at(0x1B00);	// @ (0x360 * 8 + 0)
#define                                 T2INPPS0_bit        _BIT_ACCESS(T2INPPS,0)
// T2INPPS<T2INPPS1>
extern volatile __bit                   T2INPPS1            __at(0x1B01);	// @ (0x360 * 8 + 1)
#define                                 T2INPPS1_bit        _BIT_ACCESS(T2INPPS,1)
// T2INPPS<T2INPPS2>
extern volatile __bit                   T2INPPS2            __at(0x1B02);	// @ (0x360 * 8 + 2)
#define                                 T2INPPS2_bit        _BIT_ACCESS(T2INPPS,2)
// T2INPPS<T2INPPS3>
extern volatile __bit                   T2INPPS3            __at(0x1B03);	// @ (0x360 * 8 + 3)
#define                                 T2INPPS3_bit        _BIT_ACCESS(T2INPPS,3)
// T2INPPS<T2INPPS4>
extern volatile __bit                   T2INPPS4            __at(0x1B04);	// @ (0x360 * 8 + 4)
#define                                 T2INPPS4_bit        _BIT_ACCESS(T2INPPS,4)
// T2HLT<T2MODE0>
extern volatile __bit                   T2MODE0             __at(0x8E0);	// @ (0x11C * 8 + 0)
#define                                 T2MODE0_bit         _BIT_ACCESS(T2HLT,0)
// T2HLT<T2MODE1>
extern volatile __bit                   T2MODE1             __at(0x8E1);	// @ (0x11C * 8 + 1)
#define                                 T2MODE1_bit         _BIT_ACCESS(T2HLT,1)
// T2HLT<T2MODE2>
extern volatile __bit                   T2MODE2             __at(0x8E2);	// @ (0x11C * 8 + 2)
#define                                 T2MODE2_bit         _BIT_ACCESS(T2HLT,2)
// T2HLT<T2MODE3>
extern volatile __bit                   T2MODE3             __at(0x8E3);	// @ (0x11C * 8 + 3)
#define                                 T2MODE3_bit         _BIT_ACCESS(T2HLT,3)
// T2HLT<T2MODE4>
extern volatile __bit                   T2MODE4             __at(0x8E4);	// @ (0x11C * 8 + 4)
#define                                 T2MODE4_bit         _BIT_ACCESS(T2HLT,4)
// T2CON<T2ON>
extern volatile __bit                   T2ON                __at(0x8DF);	// @ (0x11B * 8 + 7)
#define                                 T2ON_bit            _BIT_ACCESS(T2CON,7)
// T2CON<T2OUTPS0>
extern volatile __bit                   T2OUTPS0            __at(0x8D8);	// @ (0x11B * 8 + 0)
#define                                 T2OUTPS0_bit        _BIT_ACCESS(T2CON,0)
// T2CON<T2OUTPS1>
extern volatile __bit                   T2OUTPS1            __at(0x8D9);	// @ (0x11B * 8 + 1)
#define                                 T2OUTPS1_bit        _BIT_ACCESS(T2CON,1)
// T2CON<T2OUTPS2>
extern volatile __bit                   T2OUTPS2            __at(0x8DA);	// @ (0x11B * 8 + 2)
#define                                 T2OUTPS2_bit        _BIT_ACCESS(T2CON,2)
// T2CON<T2OUTPS3>
extern volatile __bit                   T2OUTPS3            __at(0x8DB);	// @ (0x11B * 8 + 3)
#define                                 T2OUTPS3_bit        _BIT_ACCESS(T2CON,3)
// T2HLT<T2PSYNC>
extern volatile __bit                   T2PSYNC             __at(0x8E7);	// @ (0x11C * 8 + 7)
#define                                 T2PSYNC_bit         _BIT_ACCESS(T2HLT,7)
// T2RST<T2RSEL0>
extern volatile __bit                   T2RSEL0             __at(0x8F0);	// @ (0x11E * 8 + 0)
#define                                 T2RSEL0_bit         _BIT_ACCESS(T2RST,0)
// T2RST<T2RSEL1>
extern volatile __bit                   T2RSEL1             __at(0x8F1);	// @ (0x11E * 8 + 1)
#define                                 T2RSEL1_bit         _BIT_ACCESS(T2RST,1)
// T2RST<T2RSEL2>
extern volatile __bit                   T2RSEL2             __at(0x8F2);	// @ (0x11E * 8 + 2)
#define                                 T2RSEL2_bit         _BIT_ACCESS(T2RST,2)
// T2RST<T2RSEL3>
extern volatile __bit                   T2RSEL3             __at(0x8F3);	// @ (0x11E * 8 + 3)
#define                                 T2RSEL3_bit         _BIT_ACCESS(T2RST,3)
// T2RST<T2RSEL4>
extern volatile __bit                   T2RSEL4             __at(0x8F4);	// @ (0x11E * 8 + 4)
#define                                 T2RSEL4_bit         _BIT_ACCESS(T2RST,4)
// T4HLT<T4CKPOL>
extern volatile __bit                   T4CKPOL             __at(0x916);	// @ (0x122 * 8 + 6)
#define                                 T4CKPOL_bit         _BIT_ACCESS(T4HLT,6)
// T4CON<T4CKPS0>
extern volatile __bit                   T4CKPS0             __at(0x90C);	// @ (0x121 * 8 + 4)
#define                                 T4CKPS0_bit         _BIT_ACCESS(T4CON,4)
// T4CON<T4CKPS1>
extern volatile __bit                   T4CKPS1             __at(0x90D);	// @ (0x121 * 8 + 5)
#define                                 T4CKPS1_bit         _BIT_ACCESS(T4CON,5)
// T4CON<T4CKPS2>
extern volatile __bit                   T4CKPS2             __at(0x90E);	// @ (0x121 * 8 + 6)
#define                                 T4CKPS2_bit         _BIT_ACCESS(T4CON,6)
// T4HLT<T4CKSYNC>
extern volatile __bit                   T4CKSYNC            __at(0x915);	// @ (0x122 * 8 + 5)
#define                                 T4CKSYNC_bit        _BIT_ACCESS(T4HLT,5)
// T4CLKCON<T4CS0>
extern volatile __bit                   T4CS0               __at(0x918);	// @ (0x123 * 8 + 0)
#define                                 T4CS0_bit           _BIT_ACCESS(T4CLKCON,0)
// T4CLKCON<T4CS1>
extern volatile __bit                   T4CS1               __at(0x919);	// @ (0x123 * 8 + 1)
#define                                 T4CS1_bit           _BIT_ACCESS(T4CLKCON,1)
// T4CLKCON<T4CS2>
extern volatile __bit                   T4CS2               __at(0x91A);	// @ (0x123 * 8 + 2)
#define                                 T4CS2_bit           _BIT_ACCESS(T4CLKCON,2)
// T4CLKCON<T4CS3>
extern volatile __bit                   T4CS3               __at(0x91B);	// @ (0x123 * 8 + 3)
#define                                 T4CS3_bit           _BIT_ACCESS(T4CLKCON,3)
// T4INPPS<T4INPPS0>
extern volatile __bit                   T4INPPS0            __at(0x1B08);	// @ (0x361 * 8 + 0)
#define                                 T4INPPS0_bit        _BIT_ACCESS(T4INPPS,0)
// T4INPPS<T4INPPS1>
extern volatile __bit                   T4INPPS1            __at(0x1B09);	// @ (0x361 * 8 + 1)
#define                                 T4INPPS1_bit        _BIT_ACCESS(T4INPPS,1)
// T4INPPS<T4INPPS2>
extern volatile __bit                   T4INPPS2            __at(0x1B0A);	// @ (0x361 * 8 + 2)
#define                                 T4INPPS2_bit        _BIT_ACCESS(T4INPPS,2)
// T4INPPS<T4INPPS3>
extern volatile __bit                   T4INPPS3            __at(0x1B0B);	// @ (0x361 * 8 + 3)
#define                                 T4INPPS3_bit        _BIT_ACCESS(T4INPPS,3)
// T4INPPS<T4INPPS4>
extern volatile __bit                   T4INPPS4            __at(0x1B0C);	// @ (0x361 * 8 + 4)
#define                                 T4INPPS4_bit        _BIT_ACCESS(T4INPPS,4)
// T4HLT<T4MODE0>
extern volatile __bit                   T4MODE0             __at(0x910);	// @ (0x122 * 8 + 0)
#define                                 T4MODE0_bit         _BIT_ACCESS(T4HLT,0)
// T4HLT<T4MODE1>
extern volatile __bit                   T4MODE1             __at(0x911);	// @ (0x122 * 8 + 1)
#define                                 T4MODE1_bit         _BIT_ACCESS(T4HLT,1)
// T4HLT<T4MODE2>
extern volatile __bit                   T4MODE2             __at(0x912);	// @ (0x122 * 8 + 2)
#define                                 T4MODE2_bit         _BIT_ACCESS(T4HLT,2)
// T4HLT<T4MODE3>
extern volatile __bit                   T4MODE3             __at(0x913);	// @ (0x122 * 8 + 3)
#define                                 T4MODE3_bit         _BIT_ACCESS(T4HLT,3)
// T4HLT<T4MODE4>
extern volatile __bit                   T4MODE4             __at(0x914);	// @ (0x122 * 8 + 4)
#define                                 T4MODE4_bit         _BIT_ACCESS(T4HLT,4)
// T4CON<T4ON>
extern volatile __bit                   T4ON                __at(0x90F);	// @ (0x121 * 8 + 7)
#define                                 T4ON_bit            _BIT_ACCESS(T4CON,7)
// T4CON<T4OUTPS0>
extern volatile __bit                   T4OUTPS0            __at(0x908);	// @ (0x121 * 8 + 0)
#define                                 T4OUTPS0_bit        _BIT_ACCESS(T4CON,0)
// T4CON<T4OUTPS1>
extern volatile __bit                   T4OUTPS1            __at(0x909);	// @ (0x121 * 8 + 1)
#define                                 T4OUTPS1_bit        _BIT_ACCESS(T4CON,1)
// T4CON<T4OUTPS2>
extern volatile __bit                   T4OUTPS2            __at(0x90A);	// @ (0x121 * 8 + 2)
#define                                 T4OUTPS2_bit        _BIT_ACCESS(T4CON,2)
// T4CON<T4OUTPS3>
extern volatile __bit                   T4OUTPS3            __at(0x90B);	// @ (0x121 * 8 + 3)
#define                                 T4OUTPS3_bit        _BIT_ACCESS(T4CON,3)
// T4HLT<T4PSYNC>
extern volatile __bit                   T4PSYNC             __at(0x917);	// @ (0x122 * 8 + 7)
#define                                 T4PSYNC_bit         _BIT_ACCESS(T4HLT,7)
// T4RST<T4RSEL0>
extern volatile __bit                   T4RSEL0             __at(0x920);	// @ (0x124 * 8 + 0)
#define                                 T4RSEL0_bit         _BIT_ACCESS(T4RST,0)
// T4RST<T4RSEL1>
extern volatile __bit                   T4RSEL1             __at(0x921);	// @ (0x124 * 8 + 1)
#define                                 T4RSEL1_bit         _BIT_ACCESS(T4RST,1)
// T4RST<T4RSEL2>
extern volatile __bit                   T4RSEL2             __at(0x922);	// @ (0x124 * 8 + 2)
#define                                 T4RSEL2_bit         _BIT_ACCESS(T4RST,2)
// T4RST<T4RSEL3>
extern volatile __bit                   T4RSEL3             __at(0x923);	// @ (0x124 * 8 + 3)
#define                                 T4RSEL3_bit         _BIT_ACCESS(T4RST,3)
// T4RST<T4RSEL4>
extern volatile __bit                   T4RSEL4             __at(0x924);	// @ (0x124 * 8 + 4)
#define                                 T4RSEL4_bit         _BIT_ACCESS(T4RST,4)
// I3C1PIE1<TCOMPIE>
extern volatile __bit                   TCOMPIE             __at(0x47F);	// @ (0x8F * 8 + 7)
#define                                 TCOMPIE_bit         _BIT_ACCESS(I3C1PIE1,7)
// I3C1PIR1<TCOMPIF>
extern volatile __bit                   TCOMPIF             __at(0x45F);	// @ (0x8B * 8 + 7)
#define                                 TCOMPIF_bit         _BIT_ACCESS(I3C1PIR1,7)
// SPI1INTE<TCZIE>
extern volatile __bit                   TCZIE               __at(0xF16);	// @ (0x1E2 * 8 + 6)
#define                                 TCZIE_bit           _BIT_ACCESS(SPI1INTE,6)
// SPI1INTF<TCZIF>
extern volatile __bit                   TCZIF               __at(0xF0E);	// @ (0x1E1 * 8 + 6)
#define                                 TCZIF_bit           _BIT_ACCESS(SPI1INTF,6)
// I3C1BSTAT<TE0ERR>
extern volatile __bit                   TE0ERR              __at(0x448);	// @ (0x89 * 8 + 0)
#define                                 TE0ERR_bit          _BIT_ACCESS(I3C1BSTAT,0)
// I3C1BSTAT<TE1ERR>
extern volatile __bit                   TE1ERR              __at(0x449);	// @ (0x89 * 8 + 1)
#define                                 TE1ERR_bit          _BIT_ACCESS(I3C1BSTAT,1)
// I3C1BSTAT<TE2ERR>
extern volatile __bit                   TE2ERR              __at(0x44A);	// @ (0x89 * 8 + 2)
#define                                 TE2ERR_bit          _BIT_ACCESS(I3C1BSTAT,2)
// I3C1BSTAT<TE3ERR>
extern volatile __bit                   TE3ERR              __at(0x44B);	// @ (0x89 * 8 + 3)
#define                                 TE3ERR_bit          _BIT_ACCESS(I3C1BSTAT,3)
// I3C1BSTAT<TE4ERR>
extern volatile __bit                   TE4ERR              __at(0x44C);	// @ (0x89 * 8 + 4)
#define                                 TE4ERR_bit          _BIT_ACCESS(I3C1BSTAT,4)
// I3C1BSTAT<TE5ERR>
extern volatile __bit                   TE5ERR              __at(0x44D);	// @ (0x89 * 8 + 5)
#define                                 TE5ERR_bit          _BIT_ACCESS(I3C1BSTAT,5)
// I3C1BSTAT<TE6ERR>
extern volatile __bit                   TE6ERR              __at(0x44E);	// @ (0x89 * 8 + 6)
#define                                 TE6ERR_bit          _BIT_ACCESS(I3C1BSTAT,6)
// ADCON3<TMD0>
extern volatile __bit                   TMD0                __at(0x1190);	// @ (0x232 * 8 + 0)
#define                                 TMD0_bit            _BIT_ACCESS(ADCON3,0)
// ADCON3<TMD1>
extern volatile __bit                   TMD1                __at(0x1191);	// @ (0x232 * 8 + 1)
#define                                 TMD1_bit            _BIT_ACCESS(ADCON3,1)
// ADCON3<TMD2>
extern volatile __bit                   TMD2                __at(0x1192);	// @ (0x232 * 8 + 2)
#define                                 TMD2_bit            _BIT_ACCESS(ADCON3,2)
// TMR0H<TMR0H0>
extern volatile __bit                   TMR0H0              __at(0x820);	// @ (0x104 * 8 + 0)
#define                                 TMR0H0_bit          _BIT_ACCESS(TMR0H,0)
// TMR0H<TMR0H1>
extern volatile __bit                   TMR0H1              __at(0x821);	// @ (0x104 * 8 + 1)
#define                                 TMR0H1_bit          _BIT_ACCESS(TMR0H,1)
// TMR0H<TMR0H2>
extern volatile __bit                   TMR0H2              __at(0x822);	// @ (0x104 * 8 + 2)
#define                                 TMR0H2_bit          _BIT_ACCESS(TMR0H,2)
// TMR0H<TMR0H3>
extern volatile __bit                   TMR0H3              __at(0x823);	// @ (0x104 * 8 + 3)
#define                                 TMR0H3_bit          _BIT_ACCESS(TMR0H,3)
// TMR0H<TMR0H4>
extern volatile __bit                   TMR0H4              __at(0x824);	// @ (0x104 * 8 + 4)
#define                                 TMR0H4_bit          _BIT_ACCESS(TMR0H,4)
// TMR0H<TMR0H5>
extern volatile __bit                   TMR0H5              __at(0x825);	// @ (0x104 * 8 + 5)
#define                                 TMR0H5_bit          _BIT_ACCESS(TMR0H,5)
// TMR0H<TMR0H6>
extern volatile __bit                   TMR0H6              __at(0x826);	// @ (0x104 * 8 + 6)
#define                                 TMR0H6_bit          _BIT_ACCESS(TMR0H,6)
// TMR0H<TMR0H7>
extern volatile __bit                   TMR0H7              __at(0x827);	// @ (0x104 * 8 + 7)
#define                                 TMR0H7_bit          _BIT_ACCESS(TMR0H,7)
// PIE3<TMR0IE>
extern volatile __bit                   TMR0IE              __at(0x23B5);	// @ (0x476 * 8 + 5)
#define                                 TMR0IE_bit          _BIT_ACCESS(PIE3,5)
// PIR3<TMR0IF>
extern volatile __bit                   TMR0IF              __at(0x2365);	// @ (0x46C * 8 + 5)
#define                                 TMR0IF_bit          _BIT_ACCESS(PIR3,5)
// IPR3<TMR0IP>
extern volatile __bit                   TMR0IP              __at(0x2405);	// @ (0x480 * 8 + 5)
#define                                 TMR0IP_bit          _BIT_ACCESS(IPR3,5)
// TMR0L<TMR0L0>
extern volatile __bit                   TMR0L0              __at(0x818);	// @ (0x103 * 8 + 0)
#define                                 TMR0L0_bit          _BIT_ACCESS(TMR0L,0)
// TMR0L<TMR0L1>
extern volatile __bit                   TMR0L1              __at(0x819);	// @ (0x103 * 8 + 1)
#define                                 TMR0L1_bit          _BIT_ACCESS(TMR0L,1)
// TMR0L<TMR0L2>
extern volatile __bit                   TMR0L2              __at(0x81A);	// @ (0x103 * 8 + 2)
#define                                 TMR0L2_bit          _BIT_ACCESS(TMR0L,2)
// TMR0L<TMR0L3>
extern volatile __bit                   TMR0L3              __at(0x81B);	// @ (0x103 * 8 + 3)
#define                                 TMR0L3_bit          _BIT_ACCESS(TMR0L,3)
// TMR0L<TMR0L4>
extern volatile __bit                   TMR0L4              __at(0x81C);	// @ (0x103 * 8 + 4)
#define                                 TMR0L4_bit          _BIT_ACCESS(TMR0L,4)
// TMR0L<TMR0L5>
extern volatile __bit                   TMR0L5              __at(0x81D);	// @ (0x103 * 8 + 5)
#define                                 TMR0L5_bit          _BIT_ACCESS(TMR0L,5)
// TMR0L<TMR0L6>
extern volatile __bit                   TMR0L6              __at(0x81E);	// @ (0x103 * 8 + 6)
#define                                 TMR0L6_bit          _BIT_ACCESS(TMR0L,6)
// TMR0L<TMR0L7>
extern volatile __bit                   TMR0L7              __at(0x81F);	// @ (0x103 * 8 + 7)
#define                                 TMR0L7_bit          _BIT_ACCESS(TMR0L,7)
// PMD1<TMR0MD>
extern volatile __bit                   TMR0MD              __at(0x180C);	// @ (0x301 * 8 + 4)
#define                                 TMR0MD_bit          _BIT_ACCESS(PMD1,4)
// TMR1L<TMR10>
extern volatile __bit                   TMR10               __at(0x838);	// @ (0x107 * 8 + 0)
#define                                 TMR10_bit           _BIT_ACCESS(TMR1L,0)
// TMR1L<TMR11>
extern volatile __bit                   TMR11               __at(0x839);	// @ (0x107 * 8 + 1)
#define                                 TMR11_bit           _BIT_ACCESS(TMR1L,1)
// TMR1H<TMR110>
extern volatile __bit                   TMR110              __at(0x842);	// @ (0x108 * 8 + 2)
#define                                 TMR110_bit          _BIT_ACCESS(TMR1H,2)
// TMR1H<TMR111>
extern volatile __bit                   TMR111              __at(0x843);	// @ (0x108 * 8 + 3)
#define                                 TMR111_bit          _BIT_ACCESS(TMR1H,3)
// TMR1H<TMR112>
extern volatile __bit                   TMR112              __at(0x844);	// @ (0x108 * 8 + 4)
#define                                 TMR112_bit          _BIT_ACCESS(TMR1H,4)
// TMR1H<TMR113>
extern volatile __bit                   TMR113              __at(0x845);	// @ (0x108 * 8 + 5)
#define                                 TMR113_bit          _BIT_ACCESS(TMR1H,5)
// TMR1H<TMR114>
extern volatile __bit                   TMR114              __at(0x846);	// @ (0x108 * 8 + 6)
#define                                 TMR114_bit          _BIT_ACCESS(TMR1H,6)
// TMR1H<TMR115>
extern volatile __bit                   TMR115              __at(0x847);	// @ (0x108 * 8 + 7)
#define                                 TMR115_bit          _BIT_ACCESS(TMR1H,7)
// TMR1L<TMR12>
extern volatile __bit                   TMR12               __at(0x83A);	// @ (0x107 * 8 + 2)
#define                                 TMR12_bit           _BIT_ACCESS(TMR1L,2)
// TMR1L<TMR13>
extern volatile __bit                   TMR13               __at(0x83B);	// @ (0x107 * 8 + 3)
#define                                 TMR13_bit           _BIT_ACCESS(TMR1L,3)
// TMR1L<TMR14>
extern volatile __bit                   TMR14               __at(0x83C);	// @ (0x107 * 8 + 4)
#define                                 TMR14_bit           _BIT_ACCESS(TMR1L,4)
// TMR1L<TMR15>
extern volatile __bit                   TMR15               __at(0x83D);	// @ (0x107 * 8 + 5)
#define                                 TMR15_bit           _BIT_ACCESS(TMR1L,5)
// TMR1L<TMR16>
extern volatile __bit                   TMR16               __at(0x83E);	// @ (0x107 * 8 + 6)
#define                                 TMR16_bit           _BIT_ACCESS(TMR1L,6)
// TMR1L<TMR17>
extern volatile __bit                   TMR17               __at(0x83F);	// @ (0x107 * 8 + 7)
#define                                 TMR17_bit           _BIT_ACCESS(TMR1L,7)
// TMR1H<TMR18>
extern volatile __bit                   TMR18               __at(0x840);	// @ (0x108 * 8 + 0)
#define                                 TMR18_bit           _BIT_ACCESS(TMR1H,0)
// TMR1H<TMR19>
extern volatile __bit                   TMR19               __at(0x841);	// @ (0x108 * 8 + 1)
#define                                 TMR19_bit           _BIT_ACCESS(TMR1H,1)
// PIE3<TMR1GIE>
extern volatile __bit                   TMR1GIE             __at(0x23B7);	// @ (0x476 * 8 + 7)
#define                                 TMR1GIE_bit         _BIT_ACCESS(PIE3,7)
// PIR3<TMR1GIF>
extern volatile __bit                   TMR1GIF             __at(0x2367);	// @ (0x46C * 8 + 7)
#define                                 TMR1GIF_bit         _BIT_ACCESS(PIR3,7)
// IPR3<TMR1GIP>
extern volatile __bit                   TMR1GIP             __at(0x2407);	// @ (0x480 * 8 + 7)
#define                                 TMR1GIP_bit         _BIT_ACCESS(IPR3,7)
// TMR1H<TMR1H0>
extern volatile __bit                   TMR1H0              __at(0x840);	// @ (0x108 * 8 + 0)
#define                                 TMR1H0_bit          _BIT_ACCESS(TMR1H,0)
// TMR1H<TMR1H1>
extern volatile __bit                   TMR1H1              __at(0x841);	// @ (0x108 * 8 + 1)
#define                                 TMR1H1_bit          _BIT_ACCESS(TMR1H,1)
// TMR1H<TMR1H2>
extern volatile __bit                   TMR1H2              __at(0x842);	// @ (0x108 * 8 + 2)
#define                                 TMR1H2_bit          _BIT_ACCESS(TMR1H,2)
// TMR1H<TMR1H3>
extern volatile __bit                   TMR1H3              __at(0x843);	// @ (0x108 * 8 + 3)
#define                                 TMR1H3_bit          _BIT_ACCESS(TMR1H,3)
// TMR1H<TMR1H4>
extern volatile __bit                   TMR1H4              __at(0x844);	// @ (0x108 * 8 + 4)
#define                                 TMR1H4_bit          _BIT_ACCESS(TMR1H,4)
// TMR1H<TMR1H5>
extern volatile __bit                   TMR1H5              __at(0x845);	// @ (0x108 * 8 + 5)
#define                                 TMR1H5_bit          _BIT_ACCESS(TMR1H,5)
// TMR1H<TMR1H6>
extern volatile __bit                   TMR1H6              __at(0x846);	// @ (0x108 * 8 + 6)
#define                                 TMR1H6_bit          _BIT_ACCESS(TMR1H,6)
// TMR1H<TMR1H7>
extern volatile __bit                   TMR1H7              __at(0x847);	// @ (0x108 * 8 + 7)
#define                                 TMR1H7_bit          _BIT_ACCESS(TMR1H,7)
// PIE3<TMR1IE>
extern volatile __bit                   TMR1IE              __at(0x23B6);	// @ (0x476 * 8 + 6)
#define                                 TMR1IE_bit          _BIT_ACCESS(PIE3,6)
// PIR3<TMR1IF>
extern volatile __bit                   TMR1IF              __at(0x2366);	// @ (0x46C * 8 + 6)
#define                                 TMR1IF_bit          _BIT_ACCESS(PIR3,6)
// IPR3<TMR1IP>
extern volatile __bit                   TMR1IP              __at(0x2406);	// @ (0x480 * 8 + 6)
#define                                 TMR1IP_bit          _BIT_ACCESS(IPR3,6)
// TMR1L<TMR1L0>
extern volatile __bit                   TMR1L0              __at(0x838);	// @ (0x107 * 8 + 0)
#define                                 TMR1L0_bit          _BIT_ACCESS(TMR1L,0)
// TMR1L<TMR1L1>
extern volatile __bit                   TMR1L1              __at(0x839);	// @ (0x107 * 8 + 1)
#define                                 TMR1L1_bit          _BIT_ACCESS(TMR1L,1)
// TMR1L<TMR1L2>
extern volatile __bit                   TMR1L2              __at(0x83A);	// @ (0x107 * 8 + 2)
#define                                 TMR1L2_bit          _BIT_ACCESS(TMR1L,2)
// TMR1L<TMR1L3>
extern volatile __bit                   TMR1L3              __at(0x83B);	// @ (0x107 * 8 + 3)
#define                                 TMR1L3_bit          _BIT_ACCESS(TMR1L,3)
// TMR1L<TMR1L4>
extern volatile __bit                   TMR1L4              __at(0x83C);	// @ (0x107 * 8 + 4)
#define                                 TMR1L4_bit          _BIT_ACCESS(TMR1L,4)
// TMR1L<TMR1L5>
extern volatile __bit                   TMR1L5              __at(0x83D);	// @ (0x107 * 8 + 5)
#define                                 TMR1L5_bit          _BIT_ACCESS(TMR1L,5)
// TMR1L<TMR1L6>
extern volatile __bit                   TMR1L6              __at(0x83E);	// @ (0x107 * 8 + 6)
#define                                 TMR1L6_bit          _BIT_ACCESS(TMR1L,6)
// TMR1L<TMR1L7>
extern volatile __bit                   TMR1L7              __at(0x83F);	// @ (0x107 * 8 + 7)
#define                                 TMR1L7_bit          _BIT_ACCESS(TMR1L,7)
// PMD1<TMR1MD>
extern volatile __bit                   TMR1MD              __at(0x180D);	// @ (0x301 * 8 + 5)
#define                                 TMR1MD_bit          _BIT_ACCESS(PMD1,5)
// T1CON<TMR1ON>
extern volatile __bit                   TMR1ON              __at(0x848);	// @ (0x109 * 8 + 0)
#define                                 TMR1ON_bit          _BIT_ACCESS(T1CON,0)
// PIE4<TMR2IE>
extern volatile __bit                   TMR2IE              __at(0x23B8);	// @ (0x477 * 8 + 0)
#define                                 TMR2IE_bit          _BIT_ACCESS(PIE4,0)
// PIR4<TMR2IF>
extern volatile __bit                   TMR2IF              __at(0x2368);	// @ (0x46D * 8 + 0)
#define                                 TMR2IF_bit          _BIT_ACCESS(PIR4,0)
// IPR4<TMR2IP>
extern volatile __bit                   TMR2IP              __at(0x2408);	// @ (0x481 * 8 + 0)
#define                                 TMR2IP_bit          _BIT_ACCESS(IPR4,0)
// PMD1<TMR2MD>
extern volatile __bit                   TMR2MD              __at(0x180E);	// @ (0x301 * 8 + 6)
#define                                 TMR2MD_bit          _BIT_ACCESS(PMD1,6)
// T2CON<TMR2ON>
extern volatile __bit                   TMR2ON              __at(0x8DF);	// @ (0x11B * 8 + 7)
#define                                 TMR2ON_bit          _BIT_ACCESS(T2CON,7)
// PIE4<TMR4IE>
extern volatile __bit                   TMR4IE              __at(0x23B9);	// @ (0x477 * 8 + 1)
#define                                 TMR4IE_bit          _BIT_ACCESS(PIE4,1)
// PIR4<TMR4IF>
extern volatile __bit                   TMR4IF              __at(0x2369);	// @ (0x46D * 8 + 1)
#define                                 TMR4IF_bit          _BIT_ACCESS(PIR4,1)
// IPR4<TMR4IP>
extern volatile __bit                   TMR4IP              __at(0x2409);	// @ (0x481 * 8 + 1)
#define                                 TMR4IP_bit          _BIT_ACCESS(IPR4,1)
// PMD1<TMR4MD>
extern volatile __bit                   TMR4MD              __at(0x180F);	// @ (0x301 * 8 + 7)
#define                                 TMR4MD_bit          _BIT_ACCESS(PMD1,7)
// T4CON<TMR4ON>
extern volatile __bit                   TMR4ON              __at(0x90F);	// @ (0x121 * 8 + 7)
#define                                 TMR4ON_bit          _BIT_ACCESS(T4CON,7)
// TU16ACON1<TMRAOSEN>
extern volatile __bit                   TMRAOSEN            __at(0x96E);	// @ (0x12D * 8 + 6)
#define                                 TMRAOSEN_bit        _BIT_ACCESS(TU16ACON1,6)
// TU16BCON1<TMRBOSEN>
extern volatile __bit                   TMRBOSEN            __at(0x9DE);	// @ (0x13B * 8 + 6)
#define                                 TMRBOSEN_bit        _BIT_ACCESS(TU16BCON1,6)
// I2C1BTO<TOBY32>
extern volatile __bit                   TOBY32              __at(0xFBE);	// @ (0x1F7 * 8 + 6)
#define                                 TOBY32_bit          _BIT_ACCESS(I2C1BTO,6)
// I2C1BTO<TOREC>
extern volatile __bit                   TOREC               __at(0xFBF);	// @ (0x1F7 * 8 + 7)
#define                                 TOREC_bit           _BIT_ACCESS(I2C1BTO,7)
// I2C1BTO<TOTIME0>
extern volatile __bit                   TOTIME0             __at(0xFB8);	// @ (0x1F7 * 8 + 0)
#define                                 TOTIME0_bit         _BIT_ACCESS(I2C1BTO,0)
// I2C1BTO<TOTIME1>
extern volatile __bit                   TOTIME1             __at(0xFB9);	// @ (0x1F7 * 8 + 1)
#define                                 TOTIME1_bit         _BIT_ACCESS(I2C1BTO,1)
// I2C1BTO<TOTIME2>
extern volatile __bit                   TOTIME2             __at(0xFBA);	// @ (0x1F7 * 8 + 2)
#define                                 TOTIME2_bit         _BIT_ACCESS(I2C1BTO,2)
// I2C1BTO<TOTIME3>
extern volatile __bit                   TOTIME3             __at(0xFBB);	// @ (0x1F7 * 8 + 3)
#define                                 TOTIME3_bit         _BIT_ACCESS(I2C1BTO,3)
// I2C1BTO<TOTIME4>
extern volatile __bit                   TOTIME4             __at(0xFBC);	// @ (0x1F7 * 8 + 4)
#define                                 TOTIME4_bit         _BIT_ACCESS(I2C1BTO,4)
// I2C1BTO<TOTIME5>
extern volatile __bit                   TOTIME5             __at(0xFBD);	// @ (0x1F7 * 8 + 5)
#define                                 TOTIME5_bit         _BIT_ACCESS(I2C1BTO,5)
// SCANCON0<TRIGEN>
extern volatile __bit                   TRIGEN              __at(0x38E);	// @ (0x71 * 8 + 6)
#define                                 TRIGEN_bit          _BIT_ACCESS(SCANCON0,6)
// TRISA<TRISA0>
extern volatile __bit                   TRISA0              __at(0x2468);	// @ (0x48D * 8 + 0)
#define                                 TRISA0_bit          _BIT_ACCESS(TRISA,0)
// TRISA<TRISA1>
extern volatile __bit                   TRISA1              __at(0x2469);	// @ (0x48D * 8 + 1)
#define                                 TRISA1_bit          _BIT_ACCESS(TRISA,1)
// TRISA<TRISA2>
extern volatile __bit                   TRISA2              __at(0x246A);	// @ (0x48D * 8 + 2)
#define                                 TRISA2_bit          _BIT_ACCESS(TRISA,2)
// TRISA<TRISA4>
extern volatile __bit                   TRISA4              __at(0x246C);	// @ (0x48D * 8 + 4)
#define                                 TRISA4_bit          _BIT_ACCESS(TRISA,4)
// TRISA<TRISA5>
extern volatile __bit                   TRISA5              __at(0x246D);	// @ (0x48D * 8 + 5)
#define                                 TRISA5_bit          _BIT_ACCESS(TRISA,5)
// TRISC<TRISC0>
extern volatile __bit                   TRISC0              __at(0x2478);	// @ (0x48F * 8 + 0)
#define                                 TRISC0_bit          _BIT_ACCESS(TRISC,0)
// TRISC<TRISC1>
extern volatile __bit                   TRISC1              __at(0x2479);	// @ (0x48F * 8 + 1)
#define                                 TRISC1_bit          _BIT_ACCESS(TRISC,1)
// TRISC<TRISC3>
extern volatile __bit                   TRISC3              __at(0x247B);	// @ (0x48F * 8 + 3)
#define                                 TRISC3_bit          _BIT_ACCESS(TRISC,3)
// TRISC<TRISC4>
extern volatile __bit                   TRISC4              __at(0x247C);	// @ (0x48F * 8 + 4)
#define                                 TRISC4_bit          _BIT_ACCESS(TRISC,4)
// TRISC<TRISC5>
extern volatile __bit                   TRISC5              __at(0x247D);	// @ (0x48F * 8 + 5)
#define                                 TRISC5_bit          _BIT_ACCESS(TRISC,5)
// TRISC<TRISC6>
extern volatile __bit                   TRISC6              __at(0x247E);	// @ (0x48F * 8 + 6)
#define                                 TRISC6_bit          _BIT_ACCESS(TRISC,6)
// TRISC<TRISC7>
extern volatile __bit                   TRISC7              __at(0x247F);	// @ (0x48F * 8 + 7)
#define                                 TRISC7_bit          _BIT_ACCESS(TRISC,7)
// SCANTRIG<TSEL0>
extern volatile __bit                   TSEL0               __at(0x390);	// @ (0x72 * 8 + 0)
#define                                 TSEL0_bit           _BIT_ACCESS(SCANTRIG,0)
// SCANTRIG<TSEL1>
extern volatile __bit                   TSEL1               __at(0x391);	// @ (0x72 * 8 + 1)
#define                                 TSEL1_bit           _BIT_ACCESS(SCANTRIG,1)
// SCANTRIG<TSEL2>
extern volatile __bit                   TSEL2               __at(0x392);	// @ (0x72 * 8 + 2)
#define                                 TSEL2_bit           _BIT_ACCESS(SCANTRIG,2)
// SCANTRIG<TSEL3>
extern volatile __bit                   TSEL3               __at(0x393);	// @ (0x72 * 8 + 3)
#define                                 TSEL3_bit           _BIT_ACCESS(SCANTRIG,3)
// FVRCON<TSEN>
extern volatile __bit                   TSEN                __at(0x100D);	// @ (0x201 * 8 + 5)
#define                                 TSEN_bit            _BIT_ACCESS(FVRCON,5)
// FVRCON<TSRNG>
extern volatile __bit                   TSRNG               __at(0x100C);	// @ (0x201 * 8 + 4)
#define                                 TSRNG_bit           _BIT_ACCESS(FVRCON,4)
// TU16ACON1<TU16ACAPT>
extern volatile __bit                   TU16ACAPT           __at(0x96B);	// @ (0x12D * 8 + 3)
#define                                 TU16ACAPT_bit       _BIT_ACCESS(TU16ACON1,3)
// TU16ACON0<TU16ACIE>
extern volatile __bit                   TU16ACIE            __at(0x960);	// @ (0x12C * 8 + 0)
#define                                 TU16ACIE_bit        _BIT_ACCESS(TU16ACON0,0)
// TU16ACON1<TU16ACIF>
extern volatile __bit                   TU16ACIF            __at(0x968);	// @ (0x12D * 8 + 0)
#define                                 TU16ACIF_bit        _BIT_ACCESS(TU16ACON1,0)
// TU16ACLK<TU16ACLK0>
extern volatile __bit                   TU16ACLK0           __at(0x9C0);	// @ (0x138 * 8 + 0)
#define                                 TU16ACLK0_bit       _BIT_ACCESS(TU16ACLK,0)
// TU16ACLK<TU16ACLK1>
extern volatile __bit                   TU16ACLK1           __at(0x9C1);	// @ (0x138 * 8 + 1)
#define                                 TU16ACLK1_bit       _BIT_ACCESS(TU16ACLK,1)
// TU16ACLK<TU16ACLK2>
extern volatile __bit                   TU16ACLK2           __at(0x9C2);	// @ (0x138 * 8 + 2)
#define                                 TU16ACLK2_bit       _BIT_ACCESS(TU16ACLK,2)
// TU16ACLK<TU16ACLK3>
extern volatile __bit                   TU16ACLK3           __at(0x9C3);	// @ (0x138 * 8 + 3)
#define                                 TU16ACLK3_bit       _BIT_ACCESS(TU16ACLK,3)
// TU16ACLK<TU16ACLK4>
extern volatile __bit                   TU16ACLK4           __at(0x9C4);	// @ (0x138 * 8 + 4)
#define                                 TU16ACLK4_bit       _BIT_ACCESS(TU16ACLK,4)
// TU16ACON1<TU16ACLR>
extern volatile __bit                   TU16ACLR            __at(0x96D);	// @ (0x12D * 8 + 5)
#define                                 TU16ACLR_bit        _BIT_ACCESS(TU16ACON1,5)
// TU16ACON0<TU16ACPOL>
extern volatile __bit                   TU16ACPOL           __at(0x966);	// @ (0x12C * 8 + 6)
#define                                 TU16ACPOL_bit       _BIT_ACCESS(TU16ACON0,6)
// TU16ACRL<TU16ACR0>
extern volatile __bit                   TU16ACR0            __at(0x980);	// @ (0x130 * 8 + 0)
#define                                 TU16ACR0_bit        _BIT_ACCESS(TU16ACRL,0)
// TU16ACRL<TU16ACR1>
extern volatile __bit                   TU16ACR1            __at(0x981);	// @ (0x130 * 8 + 1)
#define                                 TU16ACR1_bit        _BIT_ACCESS(TU16ACRL,1)
// TU16ACRH<TU16ACR10>
extern volatile __bit                   TU16ACR10           __at(0x98A);	// @ (0x131 * 8 + 2)
#define                                 TU16ACR10_bit       _BIT_ACCESS(TU16ACRH,2)
// TU16ACRH<TU16ACR11>
extern volatile __bit                   TU16ACR11           __at(0x98B);	// @ (0x131 * 8 + 3)
#define                                 TU16ACR11_bit       _BIT_ACCESS(TU16ACRH,3)
// TU16ACRH<TU16ACR12>
extern volatile __bit                   TU16ACR12           __at(0x98C);	// @ (0x131 * 8 + 4)
#define                                 TU16ACR12_bit       _BIT_ACCESS(TU16ACRH,4)
// TU16ACRH<TU16ACR13>
extern volatile __bit                   TU16ACR13           __at(0x98D);	// @ (0x131 * 8 + 5)
#define                                 TU16ACR13_bit       _BIT_ACCESS(TU16ACRH,5)
// TU16ACRH<TU16ACR14>
extern volatile __bit                   TU16ACR14           __at(0x98E);	// @ (0x131 * 8 + 6)
#define                                 TU16ACR14_bit       _BIT_ACCESS(TU16ACRH,6)
// TU16ACRH<TU16ACR15>
extern volatile __bit                   TU16ACR15           __at(0x98F);	// @ (0x131 * 8 + 7)
#define                                 TU16ACR15_bit       _BIT_ACCESS(TU16ACRH,7)
// TU16ACRL<TU16ACR2>
extern volatile __bit                   TU16ACR2            __at(0x982);	// @ (0x130 * 8 + 2)
#define                                 TU16ACR2_bit        _BIT_ACCESS(TU16ACRL,2)
// TU16ACRT<TU16ACR24>
extern volatile __bit                   TU16ACR24           __at(0x998);	// @ (0x133 * 8 + 0)
#define                                 TU16ACR24_bit       _BIT_ACCESS(TU16ACRT,0)
// TU16ACRT<TU16ACR25>
extern volatile __bit                   TU16ACR25           __at(0x999);	// @ (0x133 * 8 + 1)
#define                                 TU16ACR25_bit       _BIT_ACCESS(TU16ACRT,1)
// TU16ACRT<TU16ACR26>
extern volatile __bit                   TU16ACR26           __at(0x99A);	// @ (0x133 * 8 + 2)
#define                                 TU16ACR26_bit       _BIT_ACCESS(TU16ACRT,2)
// TU16ACRT<TU16ACR27>
extern volatile __bit                   TU16ACR27           __at(0x99B);	// @ (0x133 * 8 + 3)
#define                                 TU16ACR27_bit       _BIT_ACCESS(TU16ACRT,3)
// TU16ACRT<TU16ACR28>
extern volatile __bit                   TU16ACR28           __at(0x99C);	// @ (0x133 * 8 + 4)
#define                                 TU16ACR28_bit       _BIT_ACCESS(TU16ACRT,4)
// TU16ACRT<TU16ACR29>
extern volatile __bit                   TU16ACR29           __at(0x99D);	// @ (0x133 * 8 + 5)
#define                                 TU16ACR29_bit       _BIT_ACCESS(TU16ACRT,5)
// TU16ACRL<TU16ACR3>
extern volatile __bit                   TU16ACR3            __at(0x983);	// @ (0x130 * 8 + 3)
#define                                 TU16ACR3_bit        _BIT_ACCESS(TU16ACRL,3)
// TU16ACRT<TU16ACR30>
extern volatile __bit                   TU16ACR30           __at(0x99E);	// @ (0x133 * 8 + 6)
#define                                 TU16ACR30_bit       _BIT_ACCESS(TU16ACRT,6)
// TU16ACRT<TU16ACR31>
extern volatile __bit                   TU16ACR31           __at(0x99F);	// @ (0x133 * 8 + 7)
#define                                 TU16ACR31_bit       _BIT_ACCESS(TU16ACRT,7)
// TU16ACRL<TU16ACR4>
extern volatile __bit                   TU16ACR4            __at(0x984);	// @ (0x130 * 8 + 4)
#define                                 TU16ACR4_bit        _BIT_ACCESS(TU16ACRL,4)
// TU16ACRL<TU16ACR5>
extern volatile __bit                   TU16ACR5            __at(0x985);	// @ (0x130 * 8 + 5)
#define                                 TU16ACR5_bit        _BIT_ACCESS(TU16ACRL,5)
// TU16ACRL<TU16ACR6>
extern volatile __bit                   TU16ACR6            __at(0x986);	// @ (0x130 * 8 + 6)
#define                                 TU16ACR6_bit        _BIT_ACCESS(TU16ACRL,6)
// TU16ACRL<TU16ACR7>
extern volatile __bit                   TU16ACR7            __at(0x987);	// @ (0x130 * 8 + 7)
#define                                 TU16ACR7_bit        _BIT_ACCESS(TU16ACRL,7)
// TU16ACRH<TU16ACR8>
extern volatile __bit                   TU16ACR8            __at(0x988);	// @ (0x131 * 8 + 0)
#define                                 TU16ACR8_bit        _BIT_ACCESS(TU16ACRH,0)
// TU16ACRH<TU16ACR9>
extern volatile __bit                   TU16ACR9            __at(0x989);	// @ (0x131 * 8 + 1)
#define                                 TU16ACR9_bit        _BIT_ACCESS(TU16ACRH,1)
// TU16ACRH<TU16ACRH0>
extern volatile __bit                   TU16ACRH0           __at(0x988);	// @ (0x131 * 8 + 0)
#define                                 TU16ACRH0_bit       _BIT_ACCESS(TU16ACRH,0)
// TU16ACRH<TU16ACRH1>
extern volatile __bit                   TU16ACRH1           __at(0x989);	// @ (0x131 * 8 + 1)
#define                                 TU16ACRH1_bit       _BIT_ACCESS(TU16ACRH,1)
// TU16ACRH<TU16ACRH2>
extern volatile __bit                   TU16ACRH2           __at(0x98A);	// @ (0x131 * 8 + 2)
#define                                 TU16ACRH2_bit       _BIT_ACCESS(TU16ACRH,2)
// TU16ACRH<TU16ACRH3>
extern volatile __bit                   TU16ACRH3           __at(0x98B);	// @ (0x131 * 8 + 3)
#define                                 TU16ACRH3_bit       _BIT_ACCESS(TU16ACRH,3)
// TU16ACRH<TU16ACRH4>
extern volatile __bit                   TU16ACRH4           __at(0x98C);	// @ (0x131 * 8 + 4)
#define                                 TU16ACRH4_bit       _BIT_ACCESS(TU16ACRH,4)
// TU16ACRH<TU16ACRH5>
extern volatile __bit                   TU16ACRH5           __at(0x98D);	// @ (0x131 * 8 + 5)
#define                                 TU16ACRH5_bit       _BIT_ACCESS(TU16ACRH,5)
// TU16ACRH<TU16ACRH6>
extern volatile __bit                   TU16ACRH6           __at(0x98E);	// @ (0x131 * 8 + 6)
#define                                 TU16ACRH6_bit       _BIT_ACCESS(TU16ACRH,6)
// TU16ACRH<TU16ACRH7>
extern volatile __bit                   TU16ACRH7           __at(0x98F);	// @ (0x131 * 8 + 7)
#define                                 TU16ACRH7_bit       _BIT_ACCESS(TU16ACRH,7)
// TU16ACRL<TU16ACRL0>
extern volatile __bit                   TU16ACRL0           __at(0x980);	// @ (0x130 * 8 + 0)
#define                                 TU16ACRL0_bit       _BIT_ACCESS(TU16ACRL,0)
// TU16ACRL<TU16ACRL1>
extern volatile __bit                   TU16ACRL1           __at(0x981);	// @ (0x130 * 8 + 1)
#define                                 TU16ACRL1_bit       _BIT_ACCESS(TU16ACRL,1)
// TU16ACRL<TU16ACRL2>
extern volatile __bit                   TU16ACRL2           __at(0x982);	// @ (0x130 * 8 + 2)
#define                                 TU16ACRL2_bit       _BIT_ACCESS(TU16ACRL,2)
// TU16ACRL<TU16ACRL3>
extern volatile __bit                   TU16ACRL3           __at(0x983);	// @ (0x130 * 8 + 3)
#define                                 TU16ACRL3_bit       _BIT_ACCESS(TU16ACRL,3)
// TU16ACRL<TU16ACRL4>
extern volatile __bit                   TU16ACRL4           __at(0x984);	// @ (0x130 * 8 + 4)
#define                                 TU16ACRL4_bit       _BIT_ACCESS(TU16ACRL,4)
// TU16ACRL<TU16ACRL5>
extern volatile __bit                   TU16ACRL5           __at(0x985);	// @ (0x130 * 8 + 5)
#define                                 TU16ACRL5_bit       _BIT_ACCESS(TU16ACRL,5)
// TU16ACRL<TU16ACRL6>
extern volatile __bit                   TU16ACRL6           __at(0x986);	// @ (0x130 * 8 + 6)
#define                                 TU16ACRL6_bit       _BIT_ACCESS(TU16ACRL,6)
// TU16ACRL<TU16ACRL7>
extern volatile __bit                   TU16ACRL7           __at(0x987);	// @ (0x130 * 8 + 7)
#define                                 TU16ACRL7_bit       _BIT_ACCESS(TU16ACRL,7)
// TU16ACRT<TU16ACRT0>
extern volatile __bit                   TU16ACRT0           __at(0x998);	// @ (0x133 * 8 + 0)
#define                                 TU16ACRT0_bit       _BIT_ACCESS(TU16ACRT,0)
// TU16ACRT<TU16ACRT1>
extern volatile __bit                   TU16ACRT1           __at(0x999);	// @ (0x133 * 8 + 1)
#define                                 TU16ACRT1_bit       _BIT_ACCESS(TU16ACRT,1)
// TU16ACRT<TU16ACRT2>
extern volatile __bit                   TU16ACRT2           __at(0x99A);	// @ (0x133 * 8 + 2)
#define                                 TU16ACRT2_bit       _BIT_ACCESS(TU16ACRT,2)
// TU16ACRT<TU16ACRT3>
extern volatile __bit                   TU16ACRT3           __at(0x99B);	// @ (0x133 * 8 + 3)
#define                                 TU16ACRT3_bit       _BIT_ACCESS(TU16ACRT,3)
// TU16ACRT<TU16ACRT4>
extern volatile __bit                   TU16ACRT4           __at(0x99C);	// @ (0x133 * 8 + 4)
#define                                 TU16ACRT4_bit       _BIT_ACCESS(TU16ACRT,4)
// TU16ACRT<TU16ACRT5>
extern volatile __bit                   TU16ACRT5           __at(0x99D);	// @ (0x133 * 8 + 5)
#define                                 TU16ACRT5_bit       _BIT_ACCESS(TU16ACRT,5)
// TU16ACRT<TU16ACRT6>
extern volatile __bit                   TU16ACRT6           __at(0x99E);	// @ (0x133 * 8 + 6)
#define                                 TU16ACRT6_bit       _BIT_ACCESS(TU16ACRT,6)
// TU16ACRT<TU16ACRT7>
extern volatile __bit                   TU16ACRT7           __at(0x99F);	// @ (0x133 * 8 + 7)
#define                                 TU16ACRT7_bit       _BIT_ACCESS(TU16ACRT,7)
// TU16AHLT<TU16ACSYNC>
extern volatile __bit                   TU16ACSYNC          __at(0x976);	// @ (0x12E * 8 + 6)
#define                                 TU16ACSYNC_bit      _BIT_ACCESS(TU16AHLT,6)
// TU16AHLT<TU16AEPOL>
extern volatile __bit                   TU16AEPOL           __at(0x977);	// @ (0x12E * 8 + 7)
#define                                 TU16AEPOL_bit       _BIT_ACCESS(TU16AHLT,7)
// TU16AERS<TU16AERS0>
extern volatile __bit                   TU16AERS0           __at(0x9C8);	// @ (0x139 * 8 + 0)
#define                                 TU16AERS0_bit       _BIT_ACCESS(TU16AERS,0)
// TU16AERS<TU16AERS1>
extern volatile __bit                   TU16AERS1           __at(0x9C9);	// @ (0x139 * 8 + 1)
#define                                 TU16AERS1_bit       _BIT_ACCESS(TU16AERS,1)
// TU16AERS<TU16AERS2>
extern volatile __bit                   TU16AERS2           __at(0x9CA);	// @ (0x139 * 8 + 2)
#define                                 TU16AERS2_bit       _BIT_ACCESS(TU16AERS,2)
// TU16AERS<TU16AERS3>
extern volatile __bit                   TU16AERS3           __at(0x9CB);	// @ (0x139 * 8 + 3)
#define                                 TU16AERS3_bit       _BIT_ACCESS(TU16AERS,3)
// TU16AERS<TU16AERS4>
extern volatile __bit                   TU16AERS4           __at(0x9CC);	// @ (0x139 * 8 + 4)
#define                                 TU16AERS4_bit       _BIT_ACCESS(TU16AERS,4)
// TU16AERS<TU16AERS5>
extern volatile __bit                   TU16AERS5           __at(0x9CD);	// @ (0x139 * 8 + 5)
#define                                 TU16AERS5_bit       _BIT_ACCESS(TU16AERS,5)
// PIE4<TU16AIE>
extern volatile __bit                   TU16AIE             __at(0x23BA);	// @ (0x477 * 8 + 2)
#define                                 TU16AIE_bit         _BIT_ACCESS(PIE4,2)
// PIR4<TU16AIF>
extern volatile __bit                   TU16AIF             __at(0x236A);	// @ (0x46D * 8 + 2)
#define                                 TU16AIF_bit         _BIT_ACCESS(PIR4,2)
// IPR4<TU16AIP>
extern volatile __bit                   TU16AIP             __at(0x240A);	// @ (0x481 * 8 + 2)
#define                                 TU16AIP_bit         _BIT_ACCESS(IPR4,2)
// TU16ACON1<TU16ALIMIT>
extern volatile __bit                   TU16ALIMIT          __at(0x96C);	// @ (0x12D * 8 + 4)
#define                                 TU16ALIMIT_bit      _BIT_ACCESS(TU16ACON1,4)
// PMD2<TU16AMD>
extern volatile __bit                   TU16AMD             __at(0x1810);	// @ (0x302 * 8 + 0)
#define                                 TU16AMD_bit         _BIT_ACCESS(PMD2,0)
// TU16ACON0<TU16AOM>
extern volatile __bit                   TU16AOM             __at(0x965);	// @ (0x12C * 8 + 5)
#define                                 TU16AOM_bit         _BIT_ACCESS(TU16ACON0,5)
// TU16ACON0<TU16AON>
extern volatile __bit                   TU16AON             __at(0x967);	// @ (0x12C * 8 + 7)
#define                                 TU16AON_bit         _BIT_ACCESS(TU16ACON0,7)
// TU16ACON0<TU16AOPOL>
extern volatile __bit                   TU16AOPOL           __at(0x964);	// @ (0x12C * 8 + 4)
#define                                 TU16AOPOL_bit       _BIT_ACCESS(TU16ACON0,4)
// TU16APRL<TU16APR0>
extern volatile __bit                   TU16APR0            __at(0x9A0);	// @ (0x134 * 8 + 0)
#define                                 TU16APR0_bit        _BIT_ACCESS(TU16APRL,0)
// TU16APRL<TU16APR1>
extern volatile __bit                   TU16APR1            __at(0x9A1);	// @ (0x134 * 8 + 1)
#define                                 TU16APR1_bit        _BIT_ACCESS(TU16APRL,1)
// TU16APRH<TU16APR10>
extern volatile __bit                   TU16APR10           __at(0x9AA);	// @ (0x135 * 8 + 2)
#define                                 TU16APR10_bit       _BIT_ACCESS(TU16APRH,2)
// TU16APRH<TU16APR11>
extern volatile __bit                   TU16APR11           __at(0x9AB);	// @ (0x135 * 8 + 3)
#define                                 TU16APR11_bit       _BIT_ACCESS(TU16APRH,3)
// TU16APRH<TU16APR12>
extern volatile __bit                   TU16APR12           __at(0x9AC);	// @ (0x135 * 8 + 4)
#define                                 TU16APR12_bit       _BIT_ACCESS(TU16APRH,4)
// TU16APRH<TU16APR13>
extern volatile __bit                   TU16APR13           __at(0x9AD);	// @ (0x135 * 8 + 5)
#define                                 TU16APR13_bit       _BIT_ACCESS(TU16APRH,5)
// TU16APRH<TU16APR14>
extern volatile __bit                   TU16APR14           __at(0x9AE);	// @ (0x135 * 8 + 6)
#define                                 TU16APR14_bit       _BIT_ACCESS(TU16APRH,6)
// TU16APRH<TU16APR15>
extern volatile __bit                   TU16APR15           __at(0x9AF);	// @ (0x135 * 8 + 7)
#define                                 TU16APR15_bit       _BIT_ACCESS(TU16APRH,7)
// TU16APRL<TU16APR2>
extern volatile __bit                   TU16APR2            __at(0x9A2);	// @ (0x134 * 8 + 2)
#define                                 TU16APR2_bit        _BIT_ACCESS(TU16APRL,2)
// TU16APRT<TU16APR24>
extern volatile __bit                   TU16APR24           __at(0x9B8);	// @ (0x137 * 8 + 0)
#define                                 TU16APR24_bit       _BIT_ACCESS(TU16APRT,0)
// TU16APRT<TU16APR25>
extern volatile __bit                   TU16APR25           __at(0x9B9);	// @ (0x137 * 8 + 1)
#define                                 TU16APR25_bit       _BIT_ACCESS(TU16APRT,1)
// TU16APRT<TU16APR26>
extern volatile __bit                   TU16APR26           __at(0x9BA);	// @ (0x137 * 8 + 2)
#define                                 TU16APR26_bit       _BIT_ACCESS(TU16APRT,2)
// TU16APRT<TU16APR27>
extern volatile __bit                   TU16APR27           __at(0x9BB);	// @ (0x137 * 8 + 3)
#define                                 TU16APR27_bit       _BIT_ACCESS(TU16APRT,3)
// TU16APRT<TU16APR28>
extern volatile __bit                   TU16APR28           __at(0x9BC);	// @ (0x137 * 8 + 4)
#define                                 TU16APR28_bit       _BIT_ACCESS(TU16APRT,4)
// TU16APRT<TU16APR29>
extern volatile __bit                   TU16APR29           __at(0x9BD);	// @ (0x137 * 8 + 5)
#define                                 TU16APR29_bit       _BIT_ACCESS(TU16APRT,5)
// TU16APRL<TU16APR3>
extern volatile __bit                   TU16APR3            __at(0x9A3);	// @ (0x134 * 8 + 3)
#define                                 TU16APR3_bit        _BIT_ACCESS(TU16APRL,3)
// TU16APRT<TU16APR30>
extern volatile __bit                   TU16APR30           __at(0x9BE);	// @ (0x137 * 8 + 6)
#define                                 TU16APR30_bit       _BIT_ACCESS(TU16APRT,6)
// TU16APRT<TU16APR31>
extern volatile __bit                   TU16APR31           __at(0x9BF);	// @ (0x137 * 8 + 7)
#define                                 TU16APR31_bit       _BIT_ACCESS(TU16APRT,7)
// TU16APRL<TU16APR4>
extern volatile __bit                   TU16APR4            __at(0x9A4);	// @ (0x134 * 8 + 4)
#define                                 TU16APR4_bit        _BIT_ACCESS(TU16APRL,4)
// TU16APRL<TU16APR5>
extern volatile __bit                   TU16APR5            __at(0x9A5);	// @ (0x134 * 8 + 5)
#define                                 TU16APR5_bit        _BIT_ACCESS(TU16APRL,5)
// TU16APRL<TU16APR6>
extern volatile __bit                   TU16APR6            __at(0x9A6);	// @ (0x134 * 8 + 6)
#define                                 TU16APR6_bit        _BIT_ACCESS(TU16APRL,6)
// TU16APRL<TU16APR7>
extern volatile __bit                   TU16APR7            __at(0x9A7);	// @ (0x134 * 8 + 7)
#define                                 TU16APR7_bit        _BIT_ACCESS(TU16APRL,7)
// TU16APRH<TU16APR8>
extern volatile __bit                   TU16APR8            __at(0x9A8);	// @ (0x135 * 8 + 0)
#define                                 TU16APR8_bit        _BIT_ACCESS(TU16APRH,0)
// TU16APRH<TU16APR9>
extern volatile __bit                   TU16APR9            __at(0x9A9);	// @ (0x135 * 8 + 1)
#define                                 TU16APR9_bit        _BIT_ACCESS(TU16APRH,1)
// TU16APRH<TU16APRH0>
extern volatile __bit                   TU16APRH0           __at(0x9A8);	// @ (0x135 * 8 + 0)
#define                                 TU16APRH0_bit       _BIT_ACCESS(TU16APRH,0)
// TU16APRH<TU16APRH1>
extern volatile __bit                   TU16APRH1           __at(0x9A9);	// @ (0x135 * 8 + 1)
#define                                 TU16APRH1_bit       _BIT_ACCESS(TU16APRH,1)
// TU16APRH<TU16APRH2>
extern volatile __bit                   TU16APRH2           __at(0x9AA);	// @ (0x135 * 8 + 2)
#define                                 TU16APRH2_bit       _BIT_ACCESS(TU16APRH,2)
// TU16APRH<TU16APRH3>
extern volatile __bit                   TU16APRH3           __at(0x9AB);	// @ (0x135 * 8 + 3)
#define                                 TU16APRH3_bit       _BIT_ACCESS(TU16APRH,3)
// TU16APRH<TU16APRH4>
extern volatile __bit                   TU16APRH4           __at(0x9AC);	// @ (0x135 * 8 + 4)
#define                                 TU16APRH4_bit       _BIT_ACCESS(TU16APRH,4)
// TU16APRH<TU16APRH5>
extern volatile __bit                   TU16APRH5           __at(0x9AD);	// @ (0x135 * 8 + 5)
#define                                 TU16APRH5_bit       _BIT_ACCESS(TU16APRH,5)
// TU16APRH<TU16APRH6>
extern volatile __bit                   TU16APRH6           __at(0x9AE);	// @ (0x135 * 8 + 6)
#define                                 TU16APRH6_bit       _BIT_ACCESS(TU16APRH,6)
// TU16APRH<TU16APRH7>
extern volatile __bit                   TU16APRH7           __at(0x9AF);	// @ (0x135 * 8 + 7)
#define                                 TU16APRH7_bit       _BIT_ACCESS(TU16APRH,7)
// TU16ACON0<TU16APRIE>
extern volatile __bit                   TU16APRIE           __at(0x962);	// @ (0x12C * 8 + 2)
#define                                 TU16APRIE_bit       _BIT_ACCESS(TU16ACON0,2)
// TU16ACON1<TU16APRIF>
extern volatile __bit                   TU16APRIF           __at(0x96A);	// @ (0x12D * 8 + 2)
#define                                 TU16APRIF_bit       _BIT_ACCESS(TU16ACON1,2)
// TU16APRL<TU16APRL0>
extern volatile __bit                   TU16APRL0           __at(0x9A0);	// @ (0x134 * 8 + 0)
#define                                 TU16APRL0_bit       _BIT_ACCESS(TU16APRL,0)
// TU16APRL<TU16APRL1>
extern volatile __bit                   TU16APRL1           __at(0x9A1);	// @ (0x134 * 8 + 1)
#define                                 TU16APRL1_bit       _BIT_ACCESS(TU16APRL,1)
// TU16APRL<TU16APRL2>
extern volatile __bit                   TU16APRL2           __at(0x9A2);	// @ (0x134 * 8 + 2)
#define                                 TU16APRL2_bit       _BIT_ACCESS(TU16APRL,2)
// TU16APRL<TU16APRL3>
extern volatile __bit                   TU16APRL3           __at(0x9A3);	// @ (0x134 * 8 + 3)
#define                                 TU16APRL3_bit       _BIT_ACCESS(TU16APRL,3)
// TU16APRL<TU16APRL4>
extern volatile __bit                   TU16APRL4           __at(0x9A4);	// @ (0x134 * 8 + 4)
#define                                 TU16APRL4_bit       _BIT_ACCESS(TU16APRL,4)
// TU16APRL<TU16APRL5>
extern volatile __bit                   TU16APRL5           __at(0x9A5);	// @ (0x134 * 8 + 5)
#define                                 TU16APRL5_bit       _BIT_ACCESS(TU16APRL,5)
// TU16APRL<TU16APRL6>
extern volatile __bit                   TU16APRL6           __at(0x9A6);	// @ (0x134 * 8 + 6)
#define                                 TU16APRL6_bit       _BIT_ACCESS(TU16APRL,6)
// TU16APRL<TU16APRL7>
extern volatile __bit                   TU16APRL7           __at(0x9A7);	// @ (0x134 * 8 + 7)
#define                                 TU16APRL7_bit       _BIT_ACCESS(TU16APRL,7)
// TU16APRT<TU16APRT0>
extern volatile __bit                   TU16APRT0           __at(0x9B8);	// @ (0x137 * 8 + 0)
#define                                 TU16APRT0_bit       _BIT_ACCESS(TU16APRT,0)
// TU16APRT<TU16APRT1>
extern volatile __bit                   TU16APRT1           __at(0x9B9);	// @ (0x137 * 8 + 1)
#define                                 TU16APRT1_bit       _BIT_ACCESS(TU16APRT,1)
// TU16APRT<TU16APRT2>
extern volatile __bit                   TU16APRT2           __at(0x9BA);	// @ (0x137 * 8 + 2)
#define                                 TU16APRT2_bit       _BIT_ACCESS(TU16APRT,2)
// TU16APRT<TU16APRT3>
extern volatile __bit                   TU16APRT3           __at(0x9BB);	// @ (0x137 * 8 + 3)
#define                                 TU16APRT3_bit       _BIT_ACCESS(TU16APRT,3)
// TU16APRT<TU16APRT4>
extern volatile __bit                   TU16APRT4           __at(0x9BC);	// @ (0x137 * 8 + 4)
#define                                 TU16APRT4_bit       _BIT_ACCESS(TU16APRT,4)
// TU16APRT<TU16APRT5>
extern volatile __bit                   TU16APRT5           __at(0x9BD);	// @ (0x137 * 8 + 5)
#define                                 TU16APRT5_bit       _BIT_ACCESS(TU16APRT,5)
// TU16APRT<TU16APRT6>
extern volatile __bit                   TU16APRT6           __at(0x9BE);	// @ (0x137 * 8 + 6)
#define                                 TU16APRT6_bit       _BIT_ACCESS(TU16APRT,6)
// TU16APRT<TU16APRT7>
extern volatile __bit                   TU16APRT7           __at(0x9BF);	// @ (0x137 * 8 + 7)
#define                                 TU16APRT7_bit       _BIT_ACCESS(TU16APRT,7)
// TU16APS<TU16APS0>
extern volatile __bit                   TU16APS0            __at(0x978);	// @ (0x12F * 8 + 0)
#define                                 TU16APS0_bit        _BIT_ACCESS(TU16APS,0)
// TU16APS<TU16APS1>
extern volatile __bit                   TU16APS1            __at(0x979);	// @ (0x12F * 8 + 1)
#define                                 TU16APS1_bit        _BIT_ACCESS(TU16APS,1)
// TU16APS<TU16APS2>
extern volatile __bit                   TU16APS2            __at(0x97A);	// @ (0x12F * 8 + 2)
#define                                 TU16APS2_bit        _BIT_ACCESS(TU16APS,2)
// TU16APS<TU16APS3>
extern volatile __bit                   TU16APS3            __at(0x97B);	// @ (0x12F * 8 + 3)
#define                                 TU16APS3_bit        _BIT_ACCESS(TU16APS,3)
// TU16APS<TU16APS4>
extern volatile __bit                   TU16APS4            __at(0x97C);	// @ (0x12F * 8 + 4)
#define                                 TU16APS4_bit        _BIT_ACCESS(TU16APS,4)
// TU16APS<TU16APS5>
extern volatile __bit                   TU16APS5            __at(0x97D);	// @ (0x12F * 8 + 5)
#define                                 TU16APS5_bit        _BIT_ACCESS(TU16APS,5)
// TU16APS<TU16APS6>
extern volatile __bit                   TU16APS6            __at(0x97E);	// @ (0x12F * 8 + 6)
#define                                 TU16APS6_bit        _BIT_ACCESS(TU16APS,6)
// TU16APS<TU16APS7>
extern volatile __bit                   TU16APS7            __at(0x97F);	// @ (0x12F * 8 + 7)
#define                                 TU16APS7_bit        _BIT_ACCESS(TU16APS,7)
// TU16ACON0<TU16ARDSEL>
extern volatile __bit                   TU16ARDSEL          __at(0x963);	// @ (0x12C * 8 + 3)
#define                                 TU16ARDSEL_bit      _BIT_ACCESS(TU16ACON0,3)
// TU16AHLT<TU16ARESET0>
extern volatile __bit                   TU16ARESET0         __at(0x972);	// @ (0x12E * 8 + 2)
#define                                 TU16ARESET0_bit     _BIT_ACCESS(TU16AHLT,2)
// TU16AHLT<TU16ARESET1>
extern volatile __bit                   TU16ARESET1         __at(0x973);	// @ (0x12E * 8 + 3)
#define                                 TU16ARESET1_bit     _BIT_ACCESS(TU16AHLT,3)
// TU16ACON1<TU16ARUN>
extern volatile __bit                   TU16ARUN            __at(0x96F);	// @ (0x12D * 8 + 7)
#define                                 TU16ARUN_bit        _BIT_ACCESS(TU16ACON1,7)
// TU16AHLT<TU16ASTART0>
extern volatile __bit                   TU16ASTART0         __at(0x974);	// @ (0x12E * 8 + 4)
#define                                 TU16ASTART0_bit     _BIT_ACCESS(TU16AHLT,4)
// TU16AHLT<TU16ASTART1>
extern volatile __bit                   TU16ASTART1         __at(0x975);	// @ (0x12E * 8 + 5)
#define                                 TU16ASTART1_bit     _BIT_ACCESS(TU16AHLT,5)
// TU16AHLT<TU16ASTOP0>
extern volatile __bit                   TU16ASTOP0          __at(0x970);	// @ (0x12E * 8 + 0)
#define                                 TU16ASTOP0_bit      _BIT_ACCESS(TU16AHLT,0)
// TU16AHLT<TU16ASTOP1>
extern volatile __bit                   TU16ASTOP1          __at(0x971);	// @ (0x12E * 8 + 1)
#define                                 TU16ASTOP1_bit      _BIT_ACCESS(TU16AHLT,1)
// TU16ATMRL<TU16ATMR0>
extern volatile __bit                   TU16ATMR0           __at(0x980);	// @ (0x130 * 8 + 0)
#define                                 TU16ATMR0_bit       _BIT_ACCESS(TU16ATMRL,0)
// TU16ATMRL<TU16ATMR1>
extern volatile __bit                   TU16ATMR1           __at(0x981);	// @ (0x130 * 8 + 1)
#define                                 TU16ATMR1_bit       _BIT_ACCESS(TU16ATMRL,1)
// TU16ATMRH<TU16ATMR10>
extern volatile __bit                   TU16ATMR10          __at(0x98A);	// @ (0x131 * 8 + 2)
#define                                 TU16ATMR10_bit      _BIT_ACCESS(TU16ATMRH,2)
// TU16ATMRH<TU16ATMR11>
extern volatile __bit                   TU16ATMR11          __at(0x98B);	// @ (0x131 * 8 + 3)
#define                                 TU16ATMR11_bit      _BIT_ACCESS(TU16ATMRH,3)
// TU16ATMRH<TU16ATMR12>
extern volatile __bit                   TU16ATMR12          __at(0x98C);	// @ (0x131 * 8 + 4)
#define                                 TU16ATMR12_bit      _BIT_ACCESS(TU16ATMRH,4)
// TU16ATMRH<TU16ATMR13>
extern volatile __bit                   TU16ATMR13          __at(0x98D);	// @ (0x131 * 8 + 5)
#define                                 TU16ATMR13_bit      _BIT_ACCESS(TU16ATMRH,5)
// TU16ATMRH<TU16ATMR14>
extern volatile __bit                   TU16ATMR14          __at(0x98E);	// @ (0x131 * 8 + 6)
#define                                 TU16ATMR14_bit      _BIT_ACCESS(TU16ATMRH,6)
// TU16ATMRH<TU16ATMR15>
extern volatile __bit                   TU16ATMR15          __at(0x98F);	// @ (0x131 * 8 + 7)
#define                                 TU16ATMR15_bit      _BIT_ACCESS(TU16ATMRH,7)
// TU16ATMRL<TU16ATMR2>
extern volatile __bit                   TU16ATMR2           __at(0x982);	// @ (0x130 * 8 + 2)
#define                                 TU16ATMR2_bit       _BIT_ACCESS(TU16ATMRL,2)
// TU16ATMRT<TU16ATMR24>
extern volatile __bit                   TU16ATMR24          __at(0x998);	// @ (0x133 * 8 + 0)
#define                                 TU16ATMR24_bit      _BIT_ACCESS(TU16ATMRT,0)
// TU16ATMRT<TU16ATMR25>
extern volatile __bit                   TU16ATMR25          __at(0x999);	// @ (0x133 * 8 + 1)
#define                                 TU16ATMR25_bit      _BIT_ACCESS(TU16ATMRT,1)
// TU16ATMRT<TU16ATMR26>
extern volatile __bit                   TU16ATMR26          __at(0x99A);	// @ (0x133 * 8 + 2)
#define                                 TU16ATMR26_bit      _BIT_ACCESS(TU16ATMRT,2)
// TU16ATMRT<TU16ATMR27>
extern volatile __bit                   TU16ATMR27          __at(0x99B);	// @ (0x133 * 8 + 3)
#define                                 TU16ATMR27_bit      _BIT_ACCESS(TU16ATMRT,3)
// TU16ATMRT<TU16ATMR28>
extern volatile __bit                   TU16ATMR28          __at(0x99C);	// @ (0x133 * 8 + 4)
#define                                 TU16ATMR28_bit      _BIT_ACCESS(TU16ATMRT,4)
// TU16ATMRT<TU16ATMR29>
extern volatile __bit                   TU16ATMR29          __at(0x99D);	// @ (0x133 * 8 + 5)
#define                                 TU16ATMR29_bit      _BIT_ACCESS(TU16ATMRT,5)
// TU16ATMRL<TU16ATMR3>
extern volatile __bit                   TU16ATMR3           __at(0x983);	// @ (0x130 * 8 + 3)
#define                                 TU16ATMR3_bit       _BIT_ACCESS(TU16ATMRL,3)
// TU16ATMRT<TU16ATMR30>
extern volatile __bit                   TU16ATMR30          __at(0x99E);	// @ (0x133 * 8 + 6)
#define                                 TU16ATMR30_bit      _BIT_ACCESS(TU16ATMRT,6)
// TU16ATMRT<TU16ATMR31>
extern volatile __bit                   TU16ATMR31          __at(0x99F);	// @ (0x133 * 8 + 7)
#define                                 TU16ATMR31_bit      _BIT_ACCESS(TU16ATMRT,7)
// TU16ATMRL<TU16ATMR4>
extern volatile __bit                   TU16ATMR4           __at(0x984);	// @ (0x130 * 8 + 4)
#define                                 TU16ATMR4_bit       _BIT_ACCESS(TU16ATMRL,4)
// TU16ATMRL<TU16ATMR5>
extern volatile __bit                   TU16ATMR5           __at(0x985);	// @ (0x130 * 8 + 5)
#define                                 TU16ATMR5_bit       _BIT_ACCESS(TU16ATMRL,5)
// TU16ATMRL<TU16ATMR6>
extern volatile __bit                   TU16ATMR6           __at(0x986);	// @ (0x130 * 8 + 6)
#define                                 TU16ATMR6_bit       _BIT_ACCESS(TU16ATMRL,6)
// TU16ATMRL<TU16ATMR7>
extern volatile __bit                   TU16ATMR7           __at(0x987);	// @ (0x130 * 8 + 7)
#define                                 TU16ATMR7_bit       _BIT_ACCESS(TU16ATMRL,7)
// TU16ATMRH<TU16ATMR8>
extern volatile __bit                   TU16ATMR8           __at(0x988);	// @ (0x131 * 8 + 0)
#define                                 TU16ATMR8_bit       _BIT_ACCESS(TU16ATMRH,0)
// TU16ATMRH<TU16ATMR9>
extern volatile __bit                   TU16ATMR9           __at(0x989);	// @ (0x131 * 8 + 1)
#define                                 TU16ATMR9_bit       _BIT_ACCESS(TU16ATMRH,1)
// TU16ATMRH<TU16ATMRH0>
extern volatile __bit                   TU16ATMRH0          __at(0x988);	// @ (0x131 * 8 + 0)
#define                                 TU16ATMRH0_bit      _BIT_ACCESS(TU16ATMRH,0)
// TU16ATMRH<TU16ATMRH1>
extern volatile __bit                   TU16ATMRH1          __at(0x989);	// @ (0x131 * 8 + 1)
#define                                 TU16ATMRH1_bit      _BIT_ACCESS(TU16ATMRH,1)
// TU16ATMRH<TU16ATMRH2>
extern volatile __bit                   TU16ATMRH2          __at(0x98A);	// @ (0x131 * 8 + 2)
#define                                 TU16ATMRH2_bit      _BIT_ACCESS(TU16ATMRH,2)
// TU16ATMRH<TU16ATMRH3>
extern volatile __bit                   TU16ATMRH3          __at(0x98B);	// @ (0x131 * 8 + 3)
#define                                 TU16ATMRH3_bit      _BIT_ACCESS(TU16ATMRH,3)
// TU16ATMRH<TU16ATMRH4>
extern volatile __bit                   TU16ATMRH4          __at(0x98C);	// @ (0x131 * 8 + 4)
#define                                 TU16ATMRH4_bit      _BIT_ACCESS(TU16ATMRH,4)
// TU16ATMRH<TU16ATMRH5>
extern volatile __bit                   TU16ATMRH5          __at(0x98D);	// @ (0x131 * 8 + 5)
#define                                 TU16ATMRH5_bit      _BIT_ACCESS(TU16ATMRH,5)
// TU16ATMRH<TU16ATMRH6>
extern volatile __bit                   TU16ATMRH6          __at(0x98E);	// @ (0x131 * 8 + 6)
#define                                 TU16ATMRH6_bit      _BIT_ACCESS(TU16ATMRH,6)
// TU16ATMRH<TU16ATMRH7>
extern volatile __bit                   TU16ATMRH7          __at(0x98F);	// @ (0x131 * 8 + 7)
#define                                 TU16ATMRH7_bit      _BIT_ACCESS(TU16ATMRH,7)
// TU16ATMRL<TU16ATMRL0>
extern volatile __bit                   TU16ATMRL0          __at(0x980);	// @ (0x130 * 8 + 0)
#define                                 TU16ATMRL0_bit      _BIT_ACCESS(TU16ATMRL,0)
// TU16ATMRL<TU16ATMRL1>
extern volatile __bit                   TU16ATMRL1          __at(0x981);	// @ (0x130 * 8 + 1)
#define                                 TU16ATMRL1_bit      _BIT_ACCESS(TU16ATMRL,1)
// TU16ATMRL<TU16ATMRL2>
extern volatile __bit                   TU16ATMRL2          __at(0x982);	// @ (0x130 * 8 + 2)
#define                                 TU16ATMRL2_bit      _BIT_ACCESS(TU16ATMRL,2)
// TU16ATMRL<TU16ATMRL3>
extern volatile __bit                   TU16ATMRL3          __at(0x983);	// @ (0x130 * 8 + 3)
#define                                 TU16ATMRL3_bit      _BIT_ACCESS(TU16ATMRL,3)
// TU16ATMRL<TU16ATMRL4>
extern volatile __bit                   TU16ATMRL4          __at(0x984);	// @ (0x130 * 8 + 4)
#define                                 TU16ATMRL4_bit      _BIT_ACCESS(TU16ATMRL,4)
// TU16ATMRL<TU16ATMRL5>
extern volatile __bit                   TU16ATMRL5          __at(0x985);	// @ (0x130 * 8 + 5)
#define                                 TU16ATMRL5_bit      _BIT_ACCESS(TU16ATMRL,5)
// TU16ATMRL<TU16ATMRL6>
extern volatile __bit                   TU16ATMRL6          __at(0x986);	// @ (0x130 * 8 + 6)
#define                                 TU16ATMRL6_bit      _BIT_ACCESS(TU16ATMRL,6)
// TU16ATMRL<TU16ATMRL7>
extern volatile __bit                   TU16ATMRL7          __at(0x987);	// @ (0x130 * 8 + 7)
#define                                 TU16ATMRL7_bit      _BIT_ACCESS(TU16ATMRL,7)
// TU16ATMRT<TU16ATMRT0>
extern volatile __bit                   TU16ATMRT0          __at(0x998);	// @ (0x133 * 8 + 0)
#define                                 TU16ATMRT0_bit      _BIT_ACCESS(TU16ATMRT,0)
// TU16ATMRT<TU16ATMRT1>
extern volatile __bit                   TU16ATMRT1          __at(0x999);	// @ (0x133 * 8 + 1)
#define                                 TU16ATMRT1_bit      _BIT_ACCESS(TU16ATMRT,1)
// TU16ATMRT<TU16ATMRT2>
extern volatile __bit                   TU16ATMRT2          __at(0x99A);	// @ (0x133 * 8 + 2)
#define                                 TU16ATMRT2_bit      _BIT_ACCESS(TU16ATMRT,2)
// TU16ATMRT<TU16ATMRT3>
extern volatile __bit                   TU16ATMRT3          __at(0x99B);	// @ (0x133 * 8 + 3)
#define                                 TU16ATMRT3_bit      _BIT_ACCESS(TU16ATMRT,3)
// TU16ATMRT<TU16ATMRT4>
extern volatile __bit                   TU16ATMRT4          __at(0x99C);	// @ (0x133 * 8 + 4)
#define                                 TU16ATMRT4_bit      _BIT_ACCESS(TU16ATMRT,4)
// TU16ATMRT<TU16ATMRT5>
extern volatile __bit                   TU16ATMRT5          __at(0x99D);	// @ (0x133 * 8 + 5)
#define                                 TU16ATMRT5_bit      _BIT_ACCESS(TU16ATMRT,5)
// TU16ATMRT<TU16ATMRT6>
extern volatile __bit                   TU16ATMRT6          __at(0x99E);	// @ (0x133 * 8 + 6)
#define                                 TU16ATMRT6_bit      _BIT_ACCESS(TU16ATMRT,6)
// TU16ATMRT<TU16ATMRT7>
extern volatile __bit                   TU16ATMRT7          __at(0x99F);	// @ (0x133 * 8 + 7)
#define                                 TU16ATMRT7_bit      _BIT_ACCESS(TU16ATMRT,7)
// TU16ACON0<TU16AZIE>
extern volatile __bit                   TU16AZIE            __at(0x961);	// @ (0x12C * 8 + 1)
#define                                 TU16AZIE_bit        _BIT_ACCESS(TU16ACON0,1)
// TU16ACON1<TU16AZIF>
extern volatile __bit                   TU16AZIF            __at(0x969);	// @ (0x12D * 8 + 1)
#define                                 TU16AZIF_bit        _BIT_ACCESS(TU16ACON1,1)
// TU16BCON1<TU16BCAPT>
extern volatile __bit                   TU16BCAPT           __at(0x9DB);	// @ (0x13B * 8 + 3)
#define                                 TU16BCAPT_bit       _BIT_ACCESS(TU16BCON1,3)
// TU16BCON0<TU16BCIE>
extern volatile __bit                   TU16BCIE            __at(0x9D0);	// @ (0x13A * 8 + 0)
#define                                 TU16BCIE_bit        _BIT_ACCESS(TU16BCON0,0)
// TU16BCON1<TU16BCIF>
extern volatile __bit                   TU16BCIF            __at(0x9D8);	// @ (0x13B * 8 + 0)
#define                                 TU16BCIF_bit        _BIT_ACCESS(TU16BCON1,0)
// TU16BCLK<TU16BCLK0>
extern volatile __bit                   TU16BCLK0           __at(0xA30);	// @ (0x146 * 8 + 0)
#define                                 TU16BCLK0_bit       _BIT_ACCESS(TU16BCLK,0)
// TU16BCLK<TU16BCLK1>
extern volatile __bit                   TU16BCLK1           __at(0xA31);	// @ (0x146 * 8 + 1)
#define                                 TU16BCLK1_bit       _BIT_ACCESS(TU16BCLK,1)
// TU16BCLK<TU16BCLK2>
extern volatile __bit                   TU16BCLK2           __at(0xA32);	// @ (0x146 * 8 + 2)
#define                                 TU16BCLK2_bit       _BIT_ACCESS(TU16BCLK,2)
// TU16BCLK<TU16BCLK3>
extern volatile __bit                   TU16BCLK3           __at(0xA33);	// @ (0x146 * 8 + 3)
#define                                 TU16BCLK3_bit       _BIT_ACCESS(TU16BCLK,3)
// TU16BCLK<TU16BCLK4>
extern volatile __bit                   TU16BCLK4           __at(0xA34);	// @ (0x146 * 8 + 4)
#define                                 TU16BCLK4_bit       _BIT_ACCESS(TU16BCLK,4)
// TU16BCON1<TU16BCLR>
extern volatile __bit                   TU16BCLR            __at(0x9DD);	// @ (0x13B * 8 + 5)
#define                                 TU16BCLR_bit        _BIT_ACCESS(TU16BCON1,5)
// TU16BCON0<TU16BCPOL>
extern volatile __bit                   TU16BCPOL           __at(0x9D6);	// @ (0x13A * 8 + 6)
#define                                 TU16BCPOL_bit       _BIT_ACCESS(TU16BCON0,6)
// TU16BCRL<TU16BCR0>
extern volatile __bit                   TU16BCR0            __at(0x9F0);	// @ (0x13E * 8 + 0)
#define                                 TU16BCR0_bit        _BIT_ACCESS(TU16BCRL,0)
// TU16BCRL<TU16BCR1>
extern volatile __bit                   TU16BCR1            __at(0x9F1);	// @ (0x13E * 8 + 1)
#define                                 TU16BCR1_bit        _BIT_ACCESS(TU16BCRL,1)
// TU16BCRH<TU16BCR10>
extern volatile __bit                   TU16BCR10           __at(0x9FA);	// @ (0x13F * 8 + 2)
#define                                 TU16BCR10_bit       _BIT_ACCESS(TU16BCRH,2)
// TU16BCRH<TU16BCR11>
extern volatile __bit                   TU16BCR11           __at(0x9FB);	// @ (0x13F * 8 + 3)
#define                                 TU16BCR11_bit       _BIT_ACCESS(TU16BCRH,3)
// TU16BCRH<TU16BCR12>
extern volatile __bit                   TU16BCR12           __at(0x9FC);	// @ (0x13F * 8 + 4)
#define                                 TU16BCR12_bit       _BIT_ACCESS(TU16BCRH,4)
// TU16BCRH<TU16BCR13>
extern volatile __bit                   TU16BCR13           __at(0x9FD);	// @ (0x13F * 8 + 5)
#define                                 TU16BCR13_bit       _BIT_ACCESS(TU16BCRH,5)
// TU16BCRH<TU16BCR14>
extern volatile __bit                   TU16BCR14           __at(0x9FE);	// @ (0x13F * 8 + 6)
#define                                 TU16BCR14_bit       _BIT_ACCESS(TU16BCRH,6)
// TU16BCRH<TU16BCR15>
extern volatile __bit                   TU16BCR15           __at(0x9FF);	// @ (0x13F * 8 + 7)
#define                                 TU16BCR15_bit       _BIT_ACCESS(TU16BCRH,7)
// TU16BCRL<TU16BCR2>
extern volatile __bit                   TU16BCR2            __at(0x9F2);	// @ (0x13E * 8 + 2)
#define                                 TU16BCR2_bit        _BIT_ACCESS(TU16BCRL,2)
// TU16BCRT<TU16BCR24>
extern volatile __bit                   TU16BCR24           __at(0xA08);	// @ (0x141 * 8 + 0)
#define                                 TU16BCR24_bit       _BIT_ACCESS(TU16BCRT,0)
// TU16BCRT<TU16BCR25>
extern volatile __bit                   TU16BCR25           __at(0xA09);	// @ (0x141 * 8 + 1)
#define                                 TU16BCR25_bit       _BIT_ACCESS(TU16BCRT,1)
// TU16BCRT<TU16BCR26>
extern volatile __bit                   TU16BCR26           __at(0xA0A);	// @ (0x141 * 8 + 2)
#define                                 TU16BCR26_bit       _BIT_ACCESS(TU16BCRT,2)
// TU16BCRT<TU16BCR27>
extern volatile __bit                   TU16BCR27           __at(0xA0B);	// @ (0x141 * 8 + 3)
#define                                 TU16BCR27_bit       _BIT_ACCESS(TU16BCRT,3)
// TU16BCRT<TU16BCR28>
extern volatile __bit                   TU16BCR28           __at(0xA0C);	// @ (0x141 * 8 + 4)
#define                                 TU16BCR28_bit       _BIT_ACCESS(TU16BCRT,4)
// TU16BCRT<TU16BCR29>
extern volatile __bit                   TU16BCR29           __at(0xA0D);	// @ (0x141 * 8 + 5)
#define                                 TU16BCR29_bit       _BIT_ACCESS(TU16BCRT,5)
// TU16BCRL<TU16BCR3>
extern volatile __bit                   TU16BCR3            __at(0x9F3);	// @ (0x13E * 8 + 3)
#define                                 TU16BCR3_bit        _BIT_ACCESS(TU16BCRL,3)
// TU16BCRT<TU16BCR30>
extern volatile __bit                   TU16BCR30           __at(0xA0E);	// @ (0x141 * 8 + 6)
#define                                 TU16BCR30_bit       _BIT_ACCESS(TU16BCRT,6)
// TU16BCRT<TU16BCR31>
extern volatile __bit                   TU16BCR31           __at(0xA0F);	// @ (0x141 * 8 + 7)
#define                                 TU16BCR31_bit       _BIT_ACCESS(TU16BCRT,7)
// TU16BCRL<TU16BCR4>
extern volatile __bit                   TU16BCR4            __at(0x9F4);	// @ (0x13E * 8 + 4)
#define                                 TU16BCR4_bit        _BIT_ACCESS(TU16BCRL,4)
// TU16BCRL<TU16BCR5>
extern volatile __bit                   TU16BCR5            __at(0x9F5);	// @ (0x13E * 8 + 5)
#define                                 TU16BCR5_bit        _BIT_ACCESS(TU16BCRL,5)
// TU16BCRL<TU16BCR6>
extern volatile __bit                   TU16BCR6            __at(0x9F6);	// @ (0x13E * 8 + 6)
#define                                 TU16BCR6_bit        _BIT_ACCESS(TU16BCRL,6)
// TU16BCRL<TU16BCR7>
extern volatile __bit                   TU16BCR7            __at(0x9F7);	// @ (0x13E * 8 + 7)
#define                                 TU16BCR7_bit        _BIT_ACCESS(TU16BCRL,7)
// TU16BCRH<TU16BCR8>
extern volatile __bit                   TU16BCR8            __at(0x9F8);	// @ (0x13F * 8 + 0)
#define                                 TU16BCR8_bit        _BIT_ACCESS(TU16BCRH,0)
// TU16BCRH<TU16BCR9>
extern volatile __bit                   TU16BCR9            __at(0x9F9);	// @ (0x13F * 8 + 1)
#define                                 TU16BCR9_bit        _BIT_ACCESS(TU16BCRH,1)
// TU16BCRH<TU16BCRH0>
extern volatile __bit                   TU16BCRH0           __at(0x9F8);	// @ (0x13F * 8 + 0)
#define                                 TU16BCRH0_bit       _BIT_ACCESS(TU16BCRH,0)
// TU16BCRH<TU16BCRH1>
extern volatile __bit                   TU16BCRH1           __at(0x9F9);	// @ (0x13F * 8 + 1)
#define                                 TU16BCRH1_bit       _BIT_ACCESS(TU16BCRH,1)
// TU16BCRH<TU16BCRH2>
extern volatile __bit                   TU16BCRH2           __at(0x9FA);	// @ (0x13F * 8 + 2)
#define                                 TU16BCRH2_bit       _BIT_ACCESS(TU16BCRH,2)
// TU16BCRH<TU16BCRH3>
extern volatile __bit                   TU16BCRH3           __at(0x9FB);	// @ (0x13F * 8 + 3)
#define                                 TU16BCRH3_bit       _BIT_ACCESS(TU16BCRH,3)
// TU16BCRH<TU16BCRH4>
extern volatile __bit                   TU16BCRH4           __at(0x9FC);	// @ (0x13F * 8 + 4)
#define                                 TU16BCRH4_bit       _BIT_ACCESS(TU16BCRH,4)
// TU16BCRH<TU16BCRH5>
extern volatile __bit                   TU16BCRH5           __at(0x9FD);	// @ (0x13F * 8 + 5)
#define                                 TU16BCRH5_bit       _BIT_ACCESS(TU16BCRH,5)
// TU16BCRH<TU16BCRH6>
extern volatile __bit                   TU16BCRH6           __at(0x9FE);	// @ (0x13F * 8 + 6)
#define                                 TU16BCRH6_bit       _BIT_ACCESS(TU16BCRH,6)
// TU16BCRH<TU16BCRH7>
extern volatile __bit                   TU16BCRH7           __at(0x9FF);	// @ (0x13F * 8 + 7)
#define                                 TU16BCRH7_bit       _BIT_ACCESS(TU16BCRH,7)
// TU16BCRL<TU16BCRL0>
extern volatile __bit                   TU16BCRL0           __at(0x9F0);	// @ (0x13E * 8 + 0)
#define                                 TU16BCRL0_bit       _BIT_ACCESS(TU16BCRL,0)
// TU16BCRL<TU16BCRL1>
extern volatile __bit                   TU16BCRL1           __at(0x9F1);	// @ (0x13E * 8 + 1)
#define                                 TU16BCRL1_bit       _BIT_ACCESS(TU16BCRL,1)
// TU16BCRL<TU16BCRL2>
extern volatile __bit                   TU16BCRL2           __at(0x9F2);	// @ (0x13E * 8 + 2)
#define                                 TU16BCRL2_bit       _BIT_ACCESS(TU16BCRL,2)
// TU16BCRL<TU16BCRL3>
extern volatile __bit                   TU16BCRL3           __at(0x9F3);	// @ (0x13E * 8 + 3)
#define                                 TU16BCRL3_bit       _BIT_ACCESS(TU16BCRL,3)
// TU16BCRL<TU16BCRL4>
extern volatile __bit                   TU16BCRL4           __at(0x9F4);	// @ (0x13E * 8 + 4)
#define                                 TU16BCRL4_bit       _BIT_ACCESS(TU16BCRL,4)
// TU16BCRL<TU16BCRL5>
extern volatile __bit                   TU16BCRL5           __at(0x9F5);	// @ (0x13E * 8 + 5)
#define                                 TU16BCRL5_bit       _BIT_ACCESS(TU16BCRL,5)
// TU16BCRL<TU16BCRL6>
extern volatile __bit                   TU16BCRL6           __at(0x9F6);	// @ (0x13E * 8 + 6)
#define                                 TU16BCRL6_bit       _BIT_ACCESS(TU16BCRL,6)
// TU16BCRL<TU16BCRL7>
extern volatile __bit                   TU16BCRL7           __at(0x9F7);	// @ (0x13E * 8 + 7)
#define                                 TU16BCRL7_bit       _BIT_ACCESS(TU16BCRL,7)
// TU16BCRT<TU16BCRT0>
extern volatile __bit                   TU16BCRT0           __at(0xA08);	// @ (0x141 * 8 + 0)
#define                                 TU16BCRT0_bit       _BIT_ACCESS(TU16BCRT,0)
// TU16BCRT<TU16BCRT1>
extern volatile __bit                   TU16BCRT1           __at(0xA09);	// @ (0x141 * 8 + 1)
#define                                 TU16BCRT1_bit       _BIT_ACCESS(TU16BCRT,1)
// TU16BCRT<TU16BCRT2>
extern volatile __bit                   TU16BCRT2           __at(0xA0A);	// @ (0x141 * 8 + 2)
#define                                 TU16BCRT2_bit       _BIT_ACCESS(TU16BCRT,2)
// TU16BCRT<TU16BCRT3>
extern volatile __bit                   TU16BCRT3           __at(0xA0B);	// @ (0x141 * 8 + 3)
#define                                 TU16BCRT3_bit       _BIT_ACCESS(TU16BCRT,3)
// TU16BCRT<TU16BCRT4>
extern volatile __bit                   TU16BCRT4           __at(0xA0C);	// @ (0x141 * 8 + 4)
#define                                 TU16BCRT4_bit       _BIT_ACCESS(TU16BCRT,4)
// TU16BCRT<TU16BCRT5>
extern volatile __bit                   TU16BCRT5           __at(0xA0D);	// @ (0x141 * 8 + 5)
#define                                 TU16BCRT5_bit       _BIT_ACCESS(TU16BCRT,5)
// TU16BCRT<TU16BCRT6>
extern volatile __bit                   TU16BCRT6           __at(0xA0E);	// @ (0x141 * 8 + 6)
#define                                 TU16BCRT6_bit       _BIT_ACCESS(TU16BCRT,6)
// TU16BCRT<TU16BCRT7>
extern volatile __bit                   TU16BCRT7           __at(0xA0F);	// @ (0x141 * 8 + 7)
#define                                 TU16BCRT7_bit       _BIT_ACCESS(TU16BCRT,7)
// TU16BHLT<TU16BCSYNC>
extern volatile __bit                   TU16BCSYNC          __at(0x9E6);	// @ (0x13C * 8 + 6)
#define                                 TU16BCSYNC_bit      _BIT_ACCESS(TU16BHLT,6)
// TU16BHLT<TU16BEPOL>
extern volatile __bit                   TU16BEPOL           __at(0x9E7);	// @ (0x13C * 8 + 7)
#define                                 TU16BEPOL_bit       _BIT_ACCESS(TU16BHLT,7)
// TU16BERS<TU16BERS0>
extern volatile __bit                   TU16BERS0           __at(0xA38);	// @ (0x147 * 8 + 0)
#define                                 TU16BERS0_bit       _BIT_ACCESS(TU16BERS,0)
// TU16BERS<TU16BERS1>
extern volatile __bit                   TU16BERS1           __at(0xA39);	// @ (0x147 * 8 + 1)
#define                                 TU16BERS1_bit       _BIT_ACCESS(TU16BERS,1)
// TU16BERS<TU16BERS2>
extern volatile __bit                   TU16BERS2           __at(0xA3A);	// @ (0x147 * 8 + 2)
#define                                 TU16BERS2_bit       _BIT_ACCESS(TU16BERS,2)
// TU16BERS<TU16BERS3>
extern volatile __bit                   TU16BERS3           __at(0xA3B);	// @ (0x147 * 8 + 3)
#define                                 TU16BERS3_bit       _BIT_ACCESS(TU16BERS,3)
// TU16BERS<TU16BERS4>
extern volatile __bit                   TU16BERS4           __at(0xA3C);	// @ (0x147 * 8 + 4)
#define                                 TU16BERS4_bit       _BIT_ACCESS(TU16BERS,4)
// TU16BERS<TU16BERS5>
extern volatile __bit                   TU16BERS5           __at(0xA3D);	// @ (0x147 * 8 + 5)
#define                                 TU16BERS5_bit       _BIT_ACCESS(TU16BERS,5)
// PIE4<TU16BIE>
extern volatile __bit                   TU16BIE             __at(0x23BB);	// @ (0x477 * 8 + 3)
#define                                 TU16BIE_bit         _BIT_ACCESS(PIE4,3)
// PIR4<TU16BIF>
extern volatile __bit                   TU16BIF             __at(0x236B);	// @ (0x46D * 8 + 3)
#define                                 TU16BIF_bit         _BIT_ACCESS(PIR4,3)
// IPR4<TU16BIP>
extern volatile __bit                   TU16BIP             __at(0x240B);	// @ (0x481 * 8 + 3)
#define                                 TU16BIP_bit         _BIT_ACCESS(IPR4,3)
// TU16BCON1<TU16BLIMIT>
extern volatile __bit                   TU16BLIMIT          __at(0x9DC);	// @ (0x13B * 8 + 4)
#define                                 TU16BLIMIT_bit      _BIT_ACCESS(TU16BCON1,4)
// PMD2<TU16BMD>
extern volatile __bit                   TU16BMD             __at(0x1811);	// @ (0x302 * 8 + 1)
#define                                 TU16BMD_bit         _BIT_ACCESS(PMD2,1)
// TU16BCON0<TU16BOM>
extern volatile __bit                   TU16BOM             __at(0x9D5);	// @ (0x13A * 8 + 5)
#define                                 TU16BOM_bit         _BIT_ACCESS(TU16BCON0,5)
// TU16BCON0<TU16BON>
extern volatile __bit                   TU16BON             __at(0x9D7);	// @ (0x13A * 8 + 7)
#define                                 TU16BON_bit         _BIT_ACCESS(TU16BCON0,7)
// TU16BCON0<TU16BOPOL>
extern volatile __bit                   TU16BOPOL           __at(0x9D4);	// @ (0x13A * 8 + 4)
#define                                 TU16BOPOL_bit       _BIT_ACCESS(TU16BCON0,4)
// TU16BPRL<TU16BPR0>
extern volatile __bit                   TU16BPR0            __at(0xA10);	// @ (0x142 * 8 + 0)
#define                                 TU16BPR0_bit        _BIT_ACCESS(TU16BPRL,0)
// TU16BPRL<TU16BPR1>
extern volatile __bit                   TU16BPR1            __at(0xA11);	// @ (0x142 * 8 + 1)
#define                                 TU16BPR1_bit        _BIT_ACCESS(TU16BPRL,1)
// TU16BPRH<TU16BPR10>
extern volatile __bit                   TU16BPR10           __at(0xA1A);	// @ (0x143 * 8 + 2)
#define                                 TU16BPR10_bit       _BIT_ACCESS(TU16BPRH,2)
// TU16BPRH<TU16BPR11>
extern volatile __bit                   TU16BPR11           __at(0xA1B);	// @ (0x143 * 8 + 3)
#define                                 TU16BPR11_bit       _BIT_ACCESS(TU16BPRH,3)
// TU16BPRH<TU16BPR12>
extern volatile __bit                   TU16BPR12           __at(0xA1C);	// @ (0x143 * 8 + 4)
#define                                 TU16BPR12_bit       _BIT_ACCESS(TU16BPRH,4)
// TU16BPRH<TU16BPR13>
extern volatile __bit                   TU16BPR13           __at(0xA1D);	// @ (0x143 * 8 + 5)
#define                                 TU16BPR13_bit       _BIT_ACCESS(TU16BPRH,5)
// TU16BPRH<TU16BPR14>
extern volatile __bit                   TU16BPR14           __at(0xA1E);	// @ (0x143 * 8 + 6)
#define                                 TU16BPR14_bit       _BIT_ACCESS(TU16BPRH,6)
// TU16BPRH<TU16BPR15>
extern volatile __bit                   TU16BPR15           __at(0xA1F);	// @ (0x143 * 8 + 7)
#define                                 TU16BPR15_bit       _BIT_ACCESS(TU16BPRH,7)
// TU16BPRL<TU16BPR2>
extern volatile __bit                   TU16BPR2            __at(0xA12);	// @ (0x142 * 8 + 2)
#define                                 TU16BPR2_bit        _BIT_ACCESS(TU16BPRL,2)
// TU16BPRT<TU16BPR24>
extern volatile __bit                   TU16BPR24           __at(0xA28);	// @ (0x145 * 8 + 0)
#define                                 TU16BPR24_bit       _BIT_ACCESS(TU16BPRT,0)
// TU16BPRT<TU16BPR25>
extern volatile __bit                   TU16BPR25           __at(0xA29);	// @ (0x145 * 8 + 1)
#define                                 TU16BPR25_bit       _BIT_ACCESS(TU16BPRT,1)
// TU16BPRT<TU16BPR26>
extern volatile __bit                   TU16BPR26           __at(0xA2A);	// @ (0x145 * 8 + 2)
#define                                 TU16BPR26_bit       _BIT_ACCESS(TU16BPRT,2)
// TU16BPRT<TU16BPR27>
extern volatile __bit                   TU16BPR27           __at(0xA2B);	// @ (0x145 * 8 + 3)
#define                                 TU16BPR27_bit       _BIT_ACCESS(TU16BPRT,3)
// TU16BPRT<TU16BPR28>
extern volatile __bit                   TU16BPR28           __at(0xA2C);	// @ (0x145 * 8 + 4)
#define                                 TU16BPR28_bit       _BIT_ACCESS(TU16BPRT,4)
// TU16BPRT<TU16BPR29>
extern volatile __bit                   TU16BPR29           __at(0xA2D);	// @ (0x145 * 8 + 5)
#define                                 TU16BPR29_bit       _BIT_ACCESS(TU16BPRT,5)
// TU16BPRL<TU16BPR3>
extern volatile __bit                   TU16BPR3            __at(0xA13);	// @ (0x142 * 8 + 3)
#define                                 TU16BPR3_bit        _BIT_ACCESS(TU16BPRL,3)
// TU16BPRT<TU16BPR30>
extern volatile __bit                   TU16BPR30           __at(0xA2E);	// @ (0x145 * 8 + 6)
#define                                 TU16BPR30_bit       _BIT_ACCESS(TU16BPRT,6)
// TU16BPRT<TU16BPR31>
extern volatile __bit                   TU16BPR31           __at(0xA2F);	// @ (0x145 * 8 + 7)
#define                                 TU16BPR31_bit       _BIT_ACCESS(TU16BPRT,7)
// TU16BPRL<TU16BPR4>
extern volatile __bit                   TU16BPR4            __at(0xA14);	// @ (0x142 * 8 + 4)
#define                                 TU16BPR4_bit        _BIT_ACCESS(TU16BPRL,4)
// TU16BPRL<TU16BPR5>
extern volatile __bit                   TU16BPR5            __at(0xA15);	// @ (0x142 * 8 + 5)
#define                                 TU16BPR5_bit        _BIT_ACCESS(TU16BPRL,5)
// TU16BPRL<TU16BPR6>
extern volatile __bit                   TU16BPR6            __at(0xA16);	// @ (0x142 * 8 + 6)
#define                                 TU16BPR6_bit        _BIT_ACCESS(TU16BPRL,6)
// TU16BPRL<TU16BPR7>
extern volatile __bit                   TU16BPR7            __at(0xA17);	// @ (0x142 * 8 + 7)
#define                                 TU16BPR7_bit        _BIT_ACCESS(TU16BPRL,7)
// TU16BPRH<TU16BPR8>
extern volatile __bit                   TU16BPR8            __at(0xA18);	// @ (0x143 * 8 + 0)
#define                                 TU16BPR8_bit        _BIT_ACCESS(TU16BPRH,0)
// TU16BPRH<TU16BPR9>
extern volatile __bit                   TU16BPR9            __at(0xA19);	// @ (0x143 * 8 + 1)
#define                                 TU16BPR9_bit        _BIT_ACCESS(TU16BPRH,1)
// TU16BPRH<TU16BPRH0>
extern volatile __bit                   TU16BPRH0           __at(0xA18);	// @ (0x143 * 8 + 0)
#define                                 TU16BPRH0_bit       _BIT_ACCESS(TU16BPRH,0)
// TU16BPRH<TU16BPRH1>
extern volatile __bit                   TU16BPRH1           __at(0xA19);	// @ (0x143 * 8 + 1)
#define                                 TU16BPRH1_bit       _BIT_ACCESS(TU16BPRH,1)
// TU16BPRH<TU16BPRH2>
extern volatile __bit                   TU16BPRH2           __at(0xA1A);	// @ (0x143 * 8 + 2)
#define                                 TU16BPRH2_bit       _BIT_ACCESS(TU16BPRH,2)
// TU16BPRH<TU16BPRH3>
extern volatile __bit                   TU16BPRH3           __at(0xA1B);	// @ (0x143 * 8 + 3)
#define                                 TU16BPRH3_bit       _BIT_ACCESS(TU16BPRH,3)
// TU16BPRH<TU16BPRH4>
extern volatile __bit                   TU16BPRH4           __at(0xA1C);	// @ (0x143 * 8 + 4)
#define                                 TU16BPRH4_bit       _BIT_ACCESS(TU16BPRH,4)
// TU16BPRH<TU16BPRH5>
extern volatile __bit                   TU16BPRH5           __at(0xA1D);	// @ (0x143 * 8 + 5)
#define                                 TU16BPRH5_bit       _BIT_ACCESS(TU16BPRH,5)
// TU16BPRH<TU16BPRH6>
extern volatile __bit                   TU16BPRH6           __at(0xA1E);	// @ (0x143 * 8 + 6)
#define                                 TU16BPRH6_bit       _BIT_ACCESS(TU16BPRH,6)
// TU16BPRH<TU16BPRH7>
extern volatile __bit                   TU16BPRH7           __at(0xA1F);	// @ (0x143 * 8 + 7)
#define                                 TU16BPRH7_bit       _BIT_ACCESS(TU16BPRH,7)
// TU16BCON0<TU16BPRIE>
extern volatile __bit                   TU16BPRIE           __at(0x9D2);	// @ (0x13A * 8 + 2)
#define                                 TU16BPRIE_bit       _BIT_ACCESS(TU16BCON0,2)
// TU16BCON1<TU16BPRIF>
extern volatile __bit                   TU16BPRIF           __at(0x9DA);	// @ (0x13B * 8 + 2)
#define                                 TU16BPRIF_bit       _BIT_ACCESS(TU16BCON1,2)
// TU16BPRL<TU16BPRL0>
extern volatile __bit                   TU16BPRL0           __at(0xA10);	// @ (0x142 * 8 + 0)
#define                                 TU16BPRL0_bit       _BIT_ACCESS(TU16BPRL,0)
// TU16BPRL<TU16BPRL1>
extern volatile __bit                   TU16BPRL1           __at(0xA11);	// @ (0x142 * 8 + 1)
#define                                 TU16BPRL1_bit       _BIT_ACCESS(TU16BPRL,1)
// TU16BPRL<TU16BPRL2>
extern volatile __bit                   TU16BPRL2           __at(0xA12);	// @ (0x142 * 8 + 2)
#define                                 TU16BPRL2_bit       _BIT_ACCESS(TU16BPRL,2)
// TU16BPRL<TU16BPRL3>
extern volatile __bit                   TU16BPRL3           __at(0xA13);	// @ (0x142 * 8 + 3)
#define                                 TU16BPRL3_bit       _BIT_ACCESS(TU16BPRL,3)
// TU16BPRL<TU16BPRL4>
extern volatile __bit                   TU16BPRL4           __at(0xA14);	// @ (0x142 * 8 + 4)
#define                                 TU16BPRL4_bit       _BIT_ACCESS(TU16BPRL,4)
// TU16BPRL<TU16BPRL5>
extern volatile __bit                   TU16BPRL5           __at(0xA15);	// @ (0x142 * 8 + 5)
#define                                 TU16BPRL5_bit       _BIT_ACCESS(TU16BPRL,5)
// TU16BPRL<TU16BPRL6>
extern volatile __bit                   TU16BPRL6           __at(0xA16);	// @ (0x142 * 8 + 6)
#define                                 TU16BPRL6_bit       _BIT_ACCESS(TU16BPRL,6)
// TU16BPRL<TU16BPRL7>
extern volatile __bit                   TU16BPRL7           __at(0xA17);	// @ (0x142 * 8 + 7)
#define                                 TU16BPRL7_bit       _BIT_ACCESS(TU16BPRL,7)
// TU16BPRT<TU16BPRT0>
extern volatile __bit                   TU16BPRT0           __at(0xA28);	// @ (0x145 * 8 + 0)
#define                                 TU16BPRT0_bit       _BIT_ACCESS(TU16BPRT,0)
// TU16BPRT<TU16BPRT1>
extern volatile __bit                   TU16BPRT1           __at(0xA29);	// @ (0x145 * 8 + 1)
#define                                 TU16BPRT1_bit       _BIT_ACCESS(TU16BPRT,1)
// TU16BPRT<TU16BPRT2>
extern volatile __bit                   TU16BPRT2           __at(0xA2A);	// @ (0x145 * 8 + 2)
#define                                 TU16BPRT2_bit       _BIT_ACCESS(TU16BPRT,2)
// TU16BPRT<TU16BPRT3>
extern volatile __bit                   TU16BPRT3           __at(0xA2B);	// @ (0x145 * 8 + 3)
#define                                 TU16BPRT3_bit       _BIT_ACCESS(TU16BPRT,3)
// TU16BPRT<TU16BPRT4>
extern volatile __bit                   TU16BPRT4           __at(0xA2C);	// @ (0x145 * 8 + 4)
#define                                 TU16BPRT4_bit       _BIT_ACCESS(TU16BPRT,4)
// TU16BPRT<TU16BPRT5>
extern volatile __bit                   TU16BPRT5           __at(0xA2D);	// @ (0x145 * 8 + 5)
#define                                 TU16BPRT5_bit       _BIT_ACCESS(TU16BPRT,5)
// TU16BPRT<TU16BPRT6>
extern volatile __bit                   TU16BPRT6           __at(0xA2E);	// @ (0x145 * 8 + 6)
#define                                 TU16BPRT6_bit       _BIT_ACCESS(TU16BPRT,6)
// TU16BPRT<TU16BPRT7>
extern volatile __bit                   TU16BPRT7           __at(0xA2F);	// @ (0x145 * 8 + 7)
#define                                 TU16BPRT7_bit       _BIT_ACCESS(TU16BPRT,7)
// TU16BPS<TU16BPS0>
extern volatile __bit                   TU16BPS0            __at(0x9E8);	// @ (0x13D * 8 + 0)
#define                                 TU16BPS0_bit        _BIT_ACCESS(TU16BPS,0)
// TU16BPS<TU16BPS1>
extern volatile __bit                   TU16BPS1            __at(0x9E9);	// @ (0x13D * 8 + 1)
#define                                 TU16BPS1_bit        _BIT_ACCESS(TU16BPS,1)
// TU16BPS<TU16BPS2>
extern volatile __bit                   TU16BPS2            __at(0x9EA);	// @ (0x13D * 8 + 2)
#define                                 TU16BPS2_bit        _BIT_ACCESS(TU16BPS,2)
// TU16BPS<TU16BPS3>
extern volatile __bit                   TU16BPS3            __at(0x9EB);	// @ (0x13D * 8 + 3)
#define                                 TU16BPS3_bit        _BIT_ACCESS(TU16BPS,3)
// TU16BPS<TU16BPS4>
extern volatile __bit                   TU16BPS4            __at(0x9EC);	// @ (0x13D * 8 + 4)
#define                                 TU16BPS4_bit        _BIT_ACCESS(TU16BPS,4)
// TU16BPS<TU16BPS5>
extern volatile __bit                   TU16BPS5            __at(0x9ED);	// @ (0x13D * 8 + 5)
#define                                 TU16BPS5_bit        _BIT_ACCESS(TU16BPS,5)
// TU16BPS<TU16BPS6>
extern volatile __bit                   TU16BPS6            __at(0x9EE);	// @ (0x13D * 8 + 6)
#define                                 TU16BPS6_bit        _BIT_ACCESS(TU16BPS,6)
// TU16BPS<TU16BPS7>
extern volatile __bit                   TU16BPS7            __at(0x9EF);	// @ (0x13D * 8 + 7)
#define                                 TU16BPS7_bit        _BIT_ACCESS(TU16BPS,7)
// TU16BCON0<TU16BRDSEL>
extern volatile __bit                   TU16BRDSEL          __at(0x9D3);	// @ (0x13A * 8 + 3)
#define                                 TU16BRDSEL_bit      _BIT_ACCESS(TU16BCON0,3)
// TU16BHLT<TU16BRESET0>
extern volatile __bit                   TU16BRESET0         __at(0x9E2);	// @ (0x13C * 8 + 2)
#define                                 TU16BRESET0_bit     _BIT_ACCESS(TU16BHLT,2)
// TU16BHLT<TU16BRESET1>
extern volatile __bit                   TU16BRESET1         __at(0x9E3);	// @ (0x13C * 8 + 3)
#define                                 TU16BRESET1_bit     _BIT_ACCESS(TU16BHLT,3)
// TU16BCON1<TU16BRUN>
extern volatile __bit                   TU16BRUN            __at(0x9DF);	// @ (0x13B * 8 + 7)
#define                                 TU16BRUN_bit        _BIT_ACCESS(TU16BCON1,7)
// TU16BHLT<TU16BSTART0>
extern volatile __bit                   TU16BSTART0         __at(0x9E4);	// @ (0x13C * 8 + 4)
#define                                 TU16BSTART0_bit     _BIT_ACCESS(TU16BHLT,4)
// TU16BHLT<TU16BSTART1>
extern volatile __bit                   TU16BSTART1         __at(0x9E5);	// @ (0x13C * 8 + 5)
#define                                 TU16BSTART1_bit     _BIT_ACCESS(TU16BHLT,5)
// TU16BHLT<TU16BSTOP0>
extern volatile __bit                   TU16BSTOP0          __at(0x9E0);	// @ (0x13C * 8 + 0)
#define                                 TU16BSTOP0_bit      _BIT_ACCESS(TU16BHLT,0)
// TU16BHLT<TU16BSTOP1>
extern volatile __bit                   TU16BSTOP1          __at(0x9E1);	// @ (0x13C * 8 + 1)
#define                                 TU16BSTOP1_bit      _BIT_ACCESS(TU16BHLT,1)
// TU16BTMRL<TU16BTMR0>
extern volatile __bit                   TU16BTMR0           __at(0x9F0);	// @ (0x13E * 8 + 0)
#define                                 TU16BTMR0_bit       _BIT_ACCESS(TU16BTMRL,0)
// TU16BTMRL<TU16BTMR1>
extern volatile __bit                   TU16BTMR1           __at(0x9F1);	// @ (0x13E * 8 + 1)
#define                                 TU16BTMR1_bit       _BIT_ACCESS(TU16BTMRL,1)
// TU16BTMRH<TU16BTMR10>
extern volatile __bit                   TU16BTMR10          __at(0x9FA);	// @ (0x13F * 8 + 2)
#define                                 TU16BTMR10_bit      _BIT_ACCESS(TU16BTMRH,2)
// TU16BTMRH<TU16BTMR11>
extern volatile __bit                   TU16BTMR11          __at(0x9FB);	// @ (0x13F * 8 + 3)
#define                                 TU16BTMR11_bit      _BIT_ACCESS(TU16BTMRH,3)
// TU16BTMRH<TU16BTMR12>
extern volatile __bit                   TU16BTMR12          __at(0x9FC);	// @ (0x13F * 8 + 4)
#define                                 TU16BTMR12_bit      _BIT_ACCESS(TU16BTMRH,4)
// TU16BTMRH<TU16BTMR13>
extern volatile __bit                   TU16BTMR13          __at(0x9FD);	// @ (0x13F * 8 + 5)
#define                                 TU16BTMR13_bit      _BIT_ACCESS(TU16BTMRH,5)
// TU16BTMRH<TU16BTMR14>
extern volatile __bit                   TU16BTMR14          __at(0x9FE);	// @ (0x13F * 8 + 6)
#define                                 TU16BTMR14_bit      _BIT_ACCESS(TU16BTMRH,6)
// TU16BTMRH<TU16BTMR15>
extern volatile __bit                   TU16BTMR15          __at(0x9FF);	// @ (0x13F * 8 + 7)
#define                                 TU16BTMR15_bit      _BIT_ACCESS(TU16BTMRH,7)
// TU16BTMRL<TU16BTMR2>
extern volatile __bit                   TU16BTMR2           __at(0x9F2);	// @ (0x13E * 8 + 2)
#define                                 TU16BTMR2_bit       _BIT_ACCESS(TU16BTMRL,2)
// TU16BTMRT<TU16BTMR24>
extern volatile __bit                   TU16BTMR24          __at(0xA08);	// @ (0x141 * 8 + 0)
#define                                 TU16BTMR24_bit      _BIT_ACCESS(TU16BTMRT,0)
// TU16BTMRT<TU16BTMR25>
extern volatile __bit                   TU16BTMR25          __at(0xA09);	// @ (0x141 * 8 + 1)
#define                                 TU16BTMR25_bit      _BIT_ACCESS(TU16BTMRT,1)
// TU16BTMRT<TU16BTMR26>
extern volatile __bit                   TU16BTMR26          __at(0xA0A);	// @ (0x141 * 8 + 2)
#define                                 TU16BTMR26_bit      _BIT_ACCESS(TU16BTMRT,2)
// TU16BTMRT<TU16BTMR27>
extern volatile __bit                   TU16BTMR27          __at(0xA0B);	// @ (0x141 * 8 + 3)
#define                                 TU16BTMR27_bit      _BIT_ACCESS(TU16BTMRT,3)
// TU16BTMRT<TU16BTMR28>
extern volatile __bit                   TU16BTMR28          __at(0xA0C);	// @ (0x141 * 8 + 4)
#define                                 TU16BTMR28_bit      _BIT_ACCESS(TU16BTMRT,4)
// TU16BTMRT<TU16BTMR29>
extern volatile __bit                   TU16BTMR29          __at(0xA0D);	// @ (0x141 * 8 + 5)
#define                                 TU16BTMR29_bit      _BIT_ACCESS(TU16BTMRT,5)
// TU16BTMRL<TU16BTMR3>
extern volatile __bit                   TU16BTMR3           __at(0x9F3);	// @ (0x13E * 8 + 3)
#define                                 TU16BTMR3_bit       _BIT_ACCESS(TU16BTMRL,3)
// TU16BTMRT<TU16BTMR30>
extern volatile __bit                   TU16BTMR30          __at(0xA0E);	// @ (0x141 * 8 + 6)
#define                                 TU16BTMR30_bit      _BIT_ACCESS(TU16BTMRT,6)
// TU16BTMRT<TU16BTMR31>
extern volatile __bit                   TU16BTMR31          __at(0xA0F);	// @ (0x141 * 8 + 7)
#define                                 TU16BTMR31_bit      _BIT_ACCESS(TU16BTMRT,7)
// TU16BTMRL<TU16BTMR4>
extern volatile __bit                   TU16BTMR4           __at(0x9F4);	// @ (0x13E * 8 + 4)
#define                                 TU16BTMR4_bit       _BIT_ACCESS(TU16BTMRL,4)
// TU16BTMRL<TU16BTMR5>
extern volatile __bit                   TU16BTMR5           __at(0x9F5);	// @ (0x13E * 8 + 5)
#define                                 TU16BTMR5_bit       _BIT_ACCESS(TU16BTMRL,5)
// TU16BTMRL<TU16BTMR6>
extern volatile __bit                   TU16BTMR6           __at(0x9F6);	// @ (0x13E * 8 + 6)
#define                                 TU16BTMR6_bit       _BIT_ACCESS(TU16BTMRL,6)
// TU16BTMRL<TU16BTMR7>
extern volatile __bit                   TU16BTMR7           __at(0x9F7);	// @ (0x13E * 8 + 7)
#define                                 TU16BTMR7_bit       _BIT_ACCESS(TU16BTMRL,7)
// TU16BTMRH<TU16BTMR8>
extern volatile __bit                   TU16BTMR8           __at(0x9F8);	// @ (0x13F * 8 + 0)
#define                                 TU16BTMR8_bit       _BIT_ACCESS(TU16BTMRH,0)
// TU16BTMRH<TU16BTMR9>
extern volatile __bit                   TU16BTMR9           __at(0x9F9);	// @ (0x13F * 8 + 1)
#define                                 TU16BTMR9_bit       _BIT_ACCESS(TU16BTMRH,1)
// TU16BTMRH<TU16BTMRH0>
extern volatile __bit                   TU16BTMRH0          __at(0x9F8);	// @ (0x13F * 8 + 0)
#define                                 TU16BTMRH0_bit      _BIT_ACCESS(TU16BTMRH,0)
// TU16BTMRH<TU16BTMRH1>
extern volatile __bit                   TU16BTMRH1          __at(0x9F9);	// @ (0x13F * 8 + 1)
#define                                 TU16BTMRH1_bit      _BIT_ACCESS(TU16BTMRH,1)
// TU16BTMRH<TU16BTMRH2>
extern volatile __bit                   TU16BTMRH2          __at(0x9FA);	// @ (0x13F * 8 + 2)
#define                                 TU16BTMRH2_bit      _BIT_ACCESS(TU16BTMRH,2)
// TU16BTMRH<TU16BTMRH3>
extern volatile __bit                   TU16BTMRH3          __at(0x9FB);	// @ (0x13F * 8 + 3)
#define                                 TU16BTMRH3_bit      _BIT_ACCESS(TU16BTMRH,3)
// TU16BTMRH<TU16BTMRH4>
extern volatile __bit                   TU16BTMRH4          __at(0x9FC);	// @ (0x13F * 8 + 4)
#define                                 TU16BTMRH4_bit      _BIT_ACCESS(TU16BTMRH,4)
// TU16BTMRH<TU16BTMRH5>
extern volatile __bit                   TU16BTMRH5          __at(0x9FD);	// @ (0x13F * 8 + 5)
#define                                 TU16BTMRH5_bit      _BIT_ACCESS(TU16BTMRH,5)
// TU16BTMRH<TU16BTMRH6>
extern volatile __bit                   TU16BTMRH6          __at(0x9FE);	// @ (0x13F * 8 + 6)
#define                                 TU16BTMRH6_bit      _BIT_ACCESS(TU16BTMRH,6)
// TU16BTMRH<TU16BTMRH7>
extern volatile __bit                   TU16BTMRH7          __at(0x9FF);	// @ (0x13F * 8 + 7)
#define                                 TU16BTMRH7_bit      _BIT_ACCESS(TU16BTMRH,7)
// TU16BTMRL<TU16BTMRL0>
extern volatile __bit                   TU16BTMRL0          __at(0x9F0);	// @ (0x13E * 8 + 0)
#define                                 TU16BTMRL0_bit      _BIT_ACCESS(TU16BTMRL,0)
// TU16BTMRL<TU16BTMRL1>
extern volatile __bit                   TU16BTMRL1          __at(0x9F1);	// @ (0x13E * 8 + 1)
#define                                 TU16BTMRL1_bit      _BIT_ACCESS(TU16BTMRL,1)
// TU16BTMRL<TU16BTMRL2>
extern volatile __bit                   TU16BTMRL2          __at(0x9F2);	// @ (0x13E * 8 + 2)
#define                                 TU16BTMRL2_bit      _BIT_ACCESS(TU16BTMRL,2)
// TU16BTMRL<TU16BTMRL3>
extern volatile __bit                   TU16BTMRL3          __at(0x9F3);	// @ (0x13E * 8 + 3)
#define                                 TU16BTMRL3_bit      _BIT_ACCESS(TU16BTMRL,3)
// TU16BTMRL<TU16BTMRL4>
extern volatile __bit                   TU16BTMRL4          __at(0x9F4);	// @ (0x13E * 8 + 4)
#define                                 TU16BTMRL4_bit      _BIT_ACCESS(TU16BTMRL,4)
// TU16BTMRL<TU16BTMRL5>
extern volatile __bit                   TU16BTMRL5          __at(0x9F5);	// @ (0x13E * 8 + 5)
#define                                 TU16BTMRL5_bit      _BIT_ACCESS(TU16BTMRL,5)
// TU16BTMRL<TU16BTMRL6>
extern volatile __bit                   TU16BTMRL6          __at(0x9F6);	// @ (0x13E * 8 + 6)
#define                                 TU16BTMRL6_bit      _BIT_ACCESS(TU16BTMRL,6)
// TU16BTMRL<TU16BTMRL7>
extern volatile __bit                   TU16BTMRL7          __at(0x9F7);	// @ (0x13E * 8 + 7)
#define                                 TU16BTMRL7_bit      _BIT_ACCESS(TU16BTMRL,7)
// TU16BTMRT<TU16BTMRT0>
extern volatile __bit                   TU16BTMRT0          __at(0xA08);	// @ (0x141 * 8 + 0)
#define                                 TU16BTMRT0_bit      _BIT_ACCESS(TU16BTMRT,0)
// TU16BTMRT<TU16BTMRT1>
extern volatile __bit                   TU16BTMRT1          __at(0xA09);	// @ (0x141 * 8 + 1)
#define                                 TU16BTMRT1_bit      _BIT_ACCESS(TU16BTMRT,1)
// TU16BTMRT<TU16BTMRT2>
extern volatile __bit                   TU16BTMRT2          __at(0xA0A);	// @ (0x141 * 8 + 2)
#define                                 TU16BTMRT2_bit      _BIT_ACCESS(TU16BTMRT,2)
// TU16BTMRT<TU16BTMRT3>
extern volatile __bit                   TU16BTMRT3          __at(0xA0B);	// @ (0x141 * 8 + 3)
#define                                 TU16BTMRT3_bit      _BIT_ACCESS(TU16BTMRT,3)
// TU16BTMRT<TU16BTMRT4>
extern volatile __bit                   TU16BTMRT4          __at(0xA0C);	// @ (0x141 * 8 + 4)
#define                                 TU16BTMRT4_bit      _BIT_ACCESS(TU16BTMRT,4)
// TU16BTMRT<TU16BTMRT5>
extern volatile __bit                   TU16BTMRT5          __at(0xA0D);	// @ (0x141 * 8 + 5)
#define                                 TU16BTMRT5_bit      _BIT_ACCESS(TU16BTMRT,5)
// TU16BTMRT<TU16BTMRT6>
extern volatile __bit                   TU16BTMRT6          __at(0xA0E);	// @ (0x141 * 8 + 6)
#define                                 TU16BTMRT6_bit      _BIT_ACCESS(TU16BTMRT,6)
// TU16BTMRT<TU16BTMRT7>
extern volatile __bit                   TU16BTMRT7          __at(0xA0F);	// @ (0x141 * 8 + 7)
#define                                 TU16BTMRT7_bit      _BIT_ACCESS(TU16BTMRT,7)
// TU16BCON0<TU16BZIE>
extern volatile __bit                   TU16BZIE            __at(0x9D1);	// @ (0x13A * 8 + 1)
#define                                 TU16BZIE_bit        _BIT_ACCESS(TU16BCON0,1)
// TU16BCON1<TU16BZIF>
extern volatile __bit                   TU16BZIF            __at(0x9D9);	// @ (0x13B * 8 + 1)
#define                                 TU16BZIF_bit        _BIT_ACCESS(TU16BCON1,1)
// TUIN0PPS<TUIN0PPS0>
extern volatile __bit                   TUIN0PPS0           __at(0x1B28);	// @ (0x365 * 8 + 0)
#define                                 TUIN0PPS0_bit       _BIT_ACCESS(TUIN0PPS,0)
// TUIN0PPS<TUIN0PPS1>
extern volatile __bit                   TUIN0PPS1           __at(0x1B29);	// @ (0x365 * 8 + 1)
#define                                 TUIN0PPS1_bit       _BIT_ACCESS(TUIN0PPS,1)
// TUIN0PPS<TUIN0PPS2>
extern volatile __bit                   TUIN0PPS2           __at(0x1B2A);	// @ (0x365 * 8 + 2)
#define                                 TUIN0PPS2_bit       _BIT_ACCESS(TUIN0PPS,2)
// TUIN0PPS<TUIN0PPS3>
extern volatile __bit                   TUIN0PPS3           __at(0x1B2B);	// @ (0x365 * 8 + 3)
#define                                 TUIN0PPS3_bit       _BIT_ACCESS(TUIN0PPS,3)
// TUIN0PPS<TUIN0PPS4>
extern volatile __bit                   TUIN0PPS4           __at(0x1B2C);	// @ (0x365 * 8 + 4)
#define                                 TUIN0PPS4_bit       _BIT_ACCESS(TUIN0PPS,4)
// TUIN1PPS<TUIN1PPS0>
extern volatile __bit                   TUIN1PPS0           __at(0x1B30);	// @ (0x366 * 8 + 0)
#define                                 TUIN1PPS0_bit       _BIT_ACCESS(TUIN1PPS,0)
// TUIN1PPS<TUIN1PPS1>
extern volatile __bit                   TUIN1PPS1           __at(0x1B31);	// @ (0x366 * 8 + 1)
#define                                 TUIN1PPS1_bit       _BIT_ACCESS(TUIN1PPS,1)
// TUIN1PPS<TUIN1PPS2>
extern volatile __bit                   TUIN1PPS2           __at(0x1B32);	// @ (0x366 * 8 + 2)
#define                                 TUIN1PPS2_bit       _BIT_ACCESS(TUIN1PPS,2)
// TUIN1PPS<TUIN1PPS3>
extern volatile __bit                   TUIN1PPS3           __at(0x1B33);	// @ (0x366 * 8 + 3)
#define                                 TUIN1PPS3_bit       _BIT_ACCESS(TUIN1PPS,3)
// TUIN1PPS<TUIN1PPS4>
extern volatile __bit                   TUIN1PPS4           __at(0x1B34);	// @ (0x366 * 8 + 4)
#define                                 TUIN1PPS4_bit       _BIT_ACCESS(TUIN1PPS,4)
// OSCTUNE<TUN0>
extern volatile __bit                   TUN0                __at(0x3F8);	// @ (0x7F * 8 + 0)
#define                                 TUN0_bit            _BIT_ACCESS(OSCTUNE,0)
// OSCTUNE<TUN1>
extern volatile __bit                   TUN1                __at(0x3F9);	// @ (0x7F * 8 + 1)
#define                                 TUN1_bit            _BIT_ACCESS(OSCTUNE,1)
// OSCTUNE<TUN2>
extern volatile __bit                   TUN2                __at(0x3FA);	// @ (0x7F * 8 + 2)
#define                                 TUN2_bit            _BIT_ACCESS(OSCTUNE,2)
// OSCTUNE<TUN3>
extern volatile __bit                   TUN3                __at(0x3FB);	// @ (0x7F * 8 + 3)
#define                                 TUN3_bit            _BIT_ACCESS(OSCTUNE,3)
// OSCTUNE<TUN4>
extern volatile __bit                   TUN4                __at(0x3FC);	// @ (0x7F * 8 + 4)
#define                                 TUN4_bit            _BIT_ACCESS(OSCTUNE,4)
// OSCTUNE<TUN5>
extern volatile __bit                   TUN5                __at(0x3FD);	// @ (0x7F * 8 + 5)
#define                                 TUN5_bit            _BIT_ACCESS(OSCTUNE,5)
// SPI1TWIDTH<TWIDTH0>
extern volatile __bit                   TWIDTH0             __at(0xEF8);	// @ (0x1DF * 8 + 0)
#define                                 TWIDTH0_bit         _BIT_ACCESS(SPI1TWIDTH,0)
// SPI1TWIDTH<TWIDTH1>
extern volatile __bit                   TWIDTH1             __at(0xEF9);	// @ (0x1DF * 8 + 1)
#define                                 TWIDTH1_bit         _BIT_ACCESS(SPI1TWIDTH,1)
// SPI1TWIDTH<TWIDTH2>
extern volatile __bit                   TWIDTH2             __at(0xEFA);	// @ (0x1DF * 8 + 2)
#define                                 TWIDTH2_bit         _BIT_ACCESS(SPI1TWIDTH,2)
// SPI1TXB<TXB0>
extern volatile __bit                   TXB0                __at(0xEC0);	// @ (0x1D8 * 8 + 0)
#define                                 TXB0_bit            _BIT_ACCESS(SPI1TXB,0)
// SPI1TXB<TXB1>
extern volatile __bit                   TXB1                __at(0xEC1);	// @ (0x1D8 * 8 + 1)
#define                                 TXB1_bit            _BIT_ACCESS(SPI1TXB,1)
// SPI1TXB<TXB2>
extern volatile __bit                   TXB2                __at(0xEC2);	// @ (0x1D8 * 8 + 2)
#define                                 TXB2_bit            _BIT_ACCESS(SPI1TXB,2)
// SPI1TXB<TXB3>
extern volatile __bit                   TXB3                __at(0xEC3);	// @ (0x1D8 * 8 + 3)
#define                                 TXB3_bit            _BIT_ACCESS(SPI1TXB,3)
// SPI1TXB<TXB4>
extern volatile __bit                   TXB4                __at(0xEC4);	// @ (0x1D8 * 8 + 4)
#define                                 TXB4_bit            _BIT_ACCESS(SPI1TXB,4)
// SPI1TXB<TXB5>
extern volatile __bit                   TXB5                __at(0xEC5);	// @ (0x1D8 * 8 + 5)
#define                                 TXB5_bit            _BIT_ACCESS(SPI1TXB,5)
// SPI1TXB<TXB6>
extern volatile __bit                   TXB6                __at(0xEC6);	// @ (0x1D8 * 8 + 6)
#define                                 TXB6_bit            _BIT_ACCESS(SPI1TXB,6)
// SPI1TXB<TXB7>
extern volatile __bit                   TXB7                __at(0xEC7);	// @ (0x1D8 * 8 + 7)
#define                                 TXB7_bit            _BIT_ACCESS(SPI1TXB,7)
// U1ERRIE<TXCIE>
extern volatile __bit                   TXCIE               __at(0xE10);	// @ (0x1C2 * 8 + 0)
#define                                 TXCIE_bit           _BIT_ACCESS(U1ERRIE,0)
// U1ERRIR<TXCIF>
extern volatile __bit                   TXCIF               __at(0xE08);	// @ (0x1C1 * 8 + 0)
#define                                 TXCIF_bit           _BIT_ACCESS(U1ERRIR,0)
// I3C1STAT1<TXFNE>
extern volatile __bit                   TXFNE               __at(0x440);	// @ (0x88 * 8 + 0)
#define                                 TXFNE_bit           _BIT_ACCESS(I3C1STAT1,0)
// SPI1CON2<TXR>
extern volatile __bit                   TXR                 __at(0xEE9);	// @ (0x1DD * 8 + 1)
#define                                 TXR_bit             _BIT_ACCESS(SPI1CON2,1)
// I2C1CON1<TXU>
extern volatile __bit                   TXU                 __at(0xF39);	// @ (0x1E7 * 8 + 1)
#define                                 TXU_bit             _BIT_ACCESS(I2C1CON1,1)
// I3C1ERRIE1<TXWEIE>
extern volatile __bit                   TXWEIE              __at(0x489);	// @ (0x91 * 8 + 1)
#define                                 TXWEIE_bit          _BIT_ACCESS(I3C1ERRIE1,1)
// I3C1ERRIR1<TXWEIF>
extern volatile __bit                   TXWEIF              __at(0x469);	// @ (0x8D * 8 + 1)
#define                                 TXWEIF_bit          _BIT_ACCESS(I3C1ERRIR1,1)
// U1CON0<U1ABDEN>
extern volatile __bit                   U1ABDEN             __at(0xDCE);	// @ (0x1B9 * 8 + 6)
#define                                 U1ABDEN_bit         _BIT_ACCESS(U1CON0,6)
// U1UIR<U1ABDIE>
extern volatile __bit                   U1ABDIE             __at(0xE02);	// @ (0x1C0 * 8 + 2)
#define                                 U1ABDIE_bit         _BIT_ACCESS(U1UIR,2)
// U1UIR<U1ABDIF>
extern volatile __bit                   U1ABDIF             __at(0xE06);	// @ (0x1C0 * 8 + 6)
#define                                 U1ABDIF_bit         _BIT_ACCESS(U1UIR,6)
// U1ERRIE<U1ABDOVE>
extern volatile __bit                   U1ABDOVE            __at(0xE15);	// @ (0x1C2 * 8 + 5)
#define                                 U1ABDOVE_bit        _BIT_ACCESS(U1ERRIE,5)
// U1ERRIR<U1ABDOVF>
extern volatile __bit                   U1ABDOVF            __at(0xE0D);	// @ (0x1C1 * 8 + 5)
#define                                 U1ABDOVF_bit        _BIT_ACCESS(U1ERRIR,5)
// U1CON0<U1BRGS>
extern volatile __bit                   U1BRGS              __at(0xDCF);	// @ (0x1B9 * 8 + 7)
#define                                 U1BRGS_bit          _BIT_ACCESS(U1CON0,7)
// U1CON1<U1BRKOVR>
extern volatile __bit                   U1BRKOVR            __at(0xDD1);	// @ (0x1BA * 8 + 1)
#define                                 U1BRKOVR_bit        _BIT_ACCESS(U1CON1,1)
// U1CON2<U1C0EN>
extern volatile __bit                   U1C0EN              __at(0xDDB);	// @ (0x1BB * 8 + 3)
#define                                 U1C0EN_bit          _BIT_ACCESS(U1CON2,3)
// U1ERRIE<U1CERIE>
extern volatile __bit                   U1CERIE             __at(0xE14);	// @ (0x1C2 * 8 + 4)
#define                                 U1CERIE_bit         _BIT_ACCESS(U1ERRIE,4)
// U1ERRIR<U1CERIF>
extern volatile __bit                   U1CERIF             __at(0xE0C);	// @ (0x1C1 * 8 + 4)
#define                                 U1CERIF_bit         _BIT_ACCESS(U1ERRIR,4)
// U1CTSPPS<U1CTSPPS0>
extern volatile __bit                   U1CTSPPS0           __at(0x1D08);	// @ (0x3A1 * 8 + 0)
#define                                 U1CTSPPS0_bit       _BIT_ACCESS(U1CTSPPS,0)
// U1CTSPPS<U1CTSPPS1>
extern volatile __bit                   U1CTSPPS1           __at(0x1D09);	// @ (0x3A1 * 8 + 1)
#define                                 U1CTSPPS1_bit       _BIT_ACCESS(U1CTSPPS,1)
// U1CTSPPS<U1CTSPPS2>
extern volatile __bit                   U1CTSPPS2           __at(0x1D0A);	// @ (0x3A1 * 8 + 2)
#define                                 U1CTSPPS2_bit       _BIT_ACCESS(U1CTSPPS,2)
// U1CTSPPS<U1CTSPPS3>
extern volatile __bit                   U1CTSPPS3           __at(0x1D0B);	// @ (0x3A1 * 8 + 3)
#define                                 U1CTSPPS3_bit       _BIT_ACCESS(U1CTSPPS,3)
// U1CTSPPS<U1CTSPPS4>
extern volatile __bit                   U1CTSPPS4           __at(0x1D0C);	// @ (0x3A1 * 8 + 4)
#define                                 U1CTSPPS4_bit       _BIT_ACCESS(U1CTSPPS,4)
// PIE6<U1EIE>
extern volatile __bit                   U1EIE               __at(0x23CB);	// @ (0x479 * 8 + 3)
#define                                 U1EIE_bit           _BIT_ACCESS(PIE6,3)
// PIR6<U1EIF>
extern volatile __bit                   U1EIF               __at(0x237B);	// @ (0x46F * 8 + 3)
#define                                 U1EIF_bit           _BIT_ACCESS(PIR6,3)
// IPR6<U1EIP>
extern volatile __bit                   U1EIP               __at(0x241B);	// @ (0x483 * 8 + 3)
#define                                 U1EIP_bit           _BIT_ACCESS(IPR6,3)
// U1ERRIE<U1FERIE>
extern volatile __bit                   U1FERIE             __at(0xE13);	// @ (0x1C2 * 8 + 3)
#define                                 U1FERIE_bit         _BIT_ACCESS(U1ERRIE,3)
// U1ERRIR<U1FERIF>
extern volatile __bit                   U1FERIF             __at(0xE0B);	// @ (0x1C1 * 8 + 3)
#define                                 U1FERIF_bit         _BIT_ACCESS(U1ERRIR,3)
// U1CON2<U1FLO0>
extern volatile __bit                   U1FLO0              __at(0xDD8);	// @ (0x1BB * 8 + 0)
#define                                 U1FLO0_bit          _BIT_ACCESS(U1CON2,0)
// U1CON2<U1FLO1>
extern volatile __bit                   U1FLO1              __at(0xDD9);	// @ (0x1BB * 8 + 1)
#define                                 U1FLO1_bit          _BIT_ACCESS(U1CON2,1)
// PIE6<U1IE>
extern volatile __bit                   U1IE                __at(0x23CA);	// @ (0x479 * 8 + 2)
#define                                 U1IE_bit            _BIT_ACCESS(PIE6,2)
// PIR6<U1IF>
extern volatile __bit                   U1IF                __at(0x237A);	// @ (0x46F * 8 + 2)
#define                                 U1IF_bit            _BIT_ACCESS(PIR6,2)
// IPR6<U1IP>
extern volatile __bit                   U1IP                __at(0x241A);	// @ (0x483 * 8 + 2)
#define                                 U1IP_bit            _BIT_ACCESS(IPR6,2)
// PMD3<U1MD>
extern volatile __bit                   U1MD                __at(0x181B);	// @ (0x303 * 8 + 3)
#define                                 U1MD_bit            _BIT_ACCESS(PMD3,3)
// U1CON0<U1MODE0>
extern volatile __bit                   U1MODE0             __at(0xDC8);	// @ (0x1B9 * 8 + 0)
#define                                 U1MODE0_bit         _BIT_ACCESS(U1CON0,0)
// U1CON0<U1MODE1>
extern volatile __bit                   U1MODE1             __at(0xDC9);	// @ (0x1B9 * 8 + 1)
#define                                 U1MODE1_bit         _BIT_ACCESS(U1CON0,1)
// U1CON0<U1MODE2>
extern volatile __bit                   U1MODE2             __at(0xDCA);	// @ (0x1B9 * 8 + 2)
#define                                 U1MODE2_bit         _BIT_ACCESS(U1CON0,2)
// U1CON0<U1MODE3>
extern volatile __bit                   U1MODE3             __at(0xDCB);	// @ (0x1B9 * 8 + 3)
#define                                 U1MODE3_bit         _BIT_ACCESS(U1CON0,3)
// U1CON1<U1ON>
extern volatile __bit                   U1ON                __at(0xDD7);	// @ (0x1BA * 8 + 7)
#define                                 U1ON_bit            _BIT_ACCESS(U1CON1,7)
// U1ERRIE<U1PERIE>
extern volatile __bit                   U1PERIE             __at(0xE16);	// @ (0x1C2 * 8 + 6)
#define                                 U1PERIE_bit         _BIT_ACCESS(U1ERRIE,6)
// U1ERRIR<U1PERIF>
extern volatile __bit                   U1PERIF             __at(0xE0E);	// @ (0x1C1 * 8 + 6)
#define                                 U1PERIF_bit         _BIT_ACCESS(U1ERRIR,6)
// U1FIFO<U1RCIDL>
extern volatile __bit                   U1RCIDL             __at(0xDF3);	// @ (0x1BE * 8 + 3)
#define                                 U1RCIDL_bit         _BIT_ACCESS(U1FIFO,3)
// U1CON2<U1RUNOVF>
extern volatile __bit                   U1RUNOVF            __at(0xDDF);	// @ (0x1BB * 8 + 7)
#define                                 U1RUNOVF_bit        _BIT_ACCESS(U1CON2,7)
// U1FIFO<U1RXBE>
extern volatile __bit                   U1RXBE              __at(0xDF1);	// @ (0x1BE * 8 + 1)
#define                                 U1RXBE_bit          _BIT_ACCESS(U1FIFO,1)
// U1FIFO<U1RXBF>
extern volatile __bit                   U1RXBF              __at(0xDF0);	// @ (0x1BE * 8 + 0)
#define                                 U1RXBF_bit          _BIT_ACCESS(U1FIFO,0)
// U1CON1<U1RXBIMD>
extern volatile __bit                   U1RXBIMD            __at(0xDD3);	// @ (0x1BA * 8 + 3)
#define                                 U1RXBIMD_bit        _BIT_ACCESS(U1CON1,3)
// U1ERRIE<U1RXBKIE>
extern volatile __bit                   U1RXBKIE            __at(0xE12);	// @ (0x1C2 * 8 + 2)
#define                                 U1RXBKIE_bit        _BIT_ACCESS(U1ERRIE,2)
// U1ERRIR<U1RXBKIF>
extern volatile __bit                   U1RXBKIF            __at(0xE0A);	// @ (0x1C1 * 8 + 2)
#define                                 U1RXBKIF_bit        _BIT_ACCESS(U1ERRIR,2)
// U1CON0<U1RXEN>
extern volatile __bit                   U1RXEN              __at(0xDCC);	// @ (0x1B9 * 8 + 4)
#define                                 U1RXEN_bit          _BIT_ACCESS(U1CON0,4)
// U1ERRIE<U1RXFOIE>
extern volatile __bit                   U1RXFOIE            __at(0xE11);	// @ (0x1C2 * 8 + 1)
#define                                 U1RXFOIE_bit        _BIT_ACCESS(U1ERRIE,1)
// U1ERRIR<U1RXFOIF>
extern volatile __bit                   U1RXFOIF            __at(0xE09);	// @ (0x1C1 * 8 + 1)
#define                                 U1RXFOIF_bit        _BIT_ACCESS(U1ERRIR,1)
// U1FIFO<U1RXIDL>
extern volatile __bit                   U1RXIDL             __at(0xDF3);	// @ (0x1BE * 8 + 3)
#define                                 U1RXIDL_bit         _BIT_ACCESS(U1FIFO,3)
// PIE6<U1RXIE>
extern volatile __bit                   U1RXIE              __at(0x23C8);	// @ (0x479 * 8 + 0)
#define                                 U1RXIE_bit          _BIT_ACCESS(PIE6,0)
// PIR6<U1RXIF>
extern volatile __bit                   U1RXIF              __at(0x2378);	// @ (0x46F * 8 + 0)
#define                                 U1RXIF_bit          _BIT_ACCESS(PIR6,0)
// IPR6<U1RXIP>
extern volatile __bit                   U1RXIP              __at(0x2418);	// @ (0x483 * 8 + 0)
#define                                 U1RXIP_bit          _BIT_ACCESS(IPR6,0)
// U1CON2<U1RXPOL>
extern volatile __bit                   U1RXPOL             __at(0xDDE);	// @ (0x1BB * 8 + 6)
#define                                 U1RXPOL_bit         _BIT_ACCESS(U1CON2,6)
// U1RXPPS<U1RXPPS0>
extern volatile __bit                   U1RXPPS0            __at(0x1D10);	// @ (0x3A2 * 8 + 0)
#define                                 U1RXPPS0_bit        _BIT_ACCESS(U1RXPPS,0)
// U1RXPPS<U1RXPPS1>
extern volatile __bit                   U1RXPPS1            __at(0x1D11);	// @ (0x3A2 * 8 + 1)
#define                                 U1RXPPS1_bit        _BIT_ACCESS(U1RXPPS,1)
// U1RXPPS<U1RXPPS2>
extern volatile __bit                   U1RXPPS2            __at(0x1D12);	// @ (0x3A2 * 8 + 2)
#define                                 U1RXPPS2_bit        _BIT_ACCESS(U1RXPPS,2)
// U1RXPPS<U1RXPPS3>
extern volatile __bit                   U1RXPPS3            __at(0x1D13);	// @ (0x3A2 * 8 + 3)
#define                                 U1RXPPS3_bit        _BIT_ACCESS(U1RXPPS,3)
// U1RXPPS<U1RXPPS4>
extern volatile __bit                   U1RXPPS4            __at(0x1D14);	// @ (0x3A2 * 8 + 4)
#define                                 U1RXPPS4_bit        _BIT_ACCESS(U1RXPPS,4)
// U1CON1<U1SENDB>
extern volatile __bit                   U1SENDB             __at(0xDD0);	// @ (0x1BA * 8 + 0)
#define                                 U1SENDB_bit         _BIT_ACCESS(U1CON1,0)
// U1CON2<U1STP0>
extern volatile __bit                   U1STP0              __at(0xDDC);	// @ (0x1BB * 8 + 4)
#define                                 U1STP0_bit          _BIT_ACCESS(U1CON2,4)
// U1CON2<U1STP1>
extern volatile __bit                   U1STP1              __at(0xDDD);	// @ (0x1BB * 8 + 5)
#define                                 U1STP1_bit          _BIT_ACCESS(U1CON2,5)
// U1FIFO<U1STPMD>
extern volatile __bit                   U1STPMD             __at(0xDF6);	// @ (0x1BE * 8 + 6)
#define                                 U1STPMD_bit         _BIT_ACCESS(U1FIFO,6)
// U1FIFO<U1TXBE>
extern volatile __bit                   U1TXBE              __at(0xDF5);	// @ (0x1BE * 8 + 5)
#define                                 U1TXBE_bit          _BIT_ACCESS(U1FIFO,5)
// U1FIFO<U1TXBF>
extern volatile __bit                   U1TXBF              __at(0xDF4);	// @ (0x1BE * 8 + 4)
#define                                 U1TXBF_bit          _BIT_ACCESS(U1FIFO,4)
// U1ERRIE<U1TXCIE>
extern volatile __bit                   U1TXCIE             __at(0xE10);	// @ (0x1C2 * 8 + 0)
#define                                 U1TXCIE_bit         _BIT_ACCESS(U1ERRIE,0)
// U1ERRIR<U1TXCIF>
extern volatile __bit                   U1TXCIF             __at(0xE08);	// @ (0x1C1 * 8 + 0)
#define                                 U1TXCIF_bit         _BIT_ACCESS(U1ERRIR,0)
// U1CON0<U1TXEN>
extern volatile __bit                   U1TXEN              __at(0xDCD);	// @ (0x1B9 * 8 + 5)
#define                                 U1TXEN_bit          _BIT_ACCESS(U1CON0,5)
// PIE6<U1TXIE>
extern volatile __bit                   U1TXIE              __at(0x23C9);	// @ (0x479 * 8 + 1)
#define                                 U1TXIE_bit          _BIT_ACCESS(PIE6,1)
// PIR6<U1TXIF>
extern volatile __bit                   U1TXIF              __at(0x2379);	// @ (0x46F * 8 + 1)
#define                                 U1TXIF_bit          _BIT_ACCESS(PIR6,1)
// IPR6<U1TXIP>
extern volatile __bit                   U1TXIP              __at(0x2419);	// @ (0x483 * 8 + 1)
#define                                 U1TXIP_bit          _BIT_ACCESS(IPR6,1)
// U1ERRIE<U1TXMTIE>
extern volatile __bit                   U1TXMTIE            __at(0xE17);	// @ (0x1C2 * 8 + 7)
#define                                 U1TXMTIE_bit        _BIT_ACCESS(U1ERRIE,7)
// U1ERRIR<U1TXMTIF>
extern volatile __bit                   U1TXMTIF            __at(0xE0F);	// @ (0x1C1 * 8 + 7)
#define                                 U1TXMTIF_bit        _BIT_ACCESS(U1ERRIR,7)
// U1CON2<U1TXPOL>
extern volatile __bit                   U1TXPOL             __at(0xDDA);	// @ (0x1BB * 8 + 2)
#define                                 U1TXPOL_bit         _BIT_ACCESS(U1CON2,2)
// U1FIFO<U1TXWRE>
extern volatile __bit                   U1TXWRE             __at(0xDF7);	// @ (0x1BE * 8 + 7)
#define                                 U1TXWRE_bit         _BIT_ACCESS(U1FIFO,7)
// U1CON1<U1WUE>
extern volatile __bit                   U1WUE               __at(0xDD4);	// @ (0x1BA * 8 + 4)
#define                                 U1WUE_bit           _BIT_ACCESS(U1CON1,4)
// U1UIR<U1WUIF>
extern volatile __bit                   U1WUIF              __at(0xE07);	// @ (0x1C0 * 8 + 7)
#define                                 U1WUIF_bit          _BIT_ACCESS(U1UIR,7)
// U1FIFO<U1XON>
extern volatile __bit                   U1XON               __at(0xDF2);	// @ (0x1BE * 8 + 2)
#define                                 U1XON_bit           _BIT_ACCESS(U1FIFO,2)
// U2CON0<U2ABDEN>
extern volatile __bit                   U2ABDEN             __at(0xE6E);	// @ (0x1CD * 8 + 6)
#define                                 U2ABDEN_bit         _BIT_ACCESS(U2CON0,6)
// U2UIR<U2ABDIE>
extern volatile __bit                   U2ABDIE             __at(0xEA2);	// @ (0x1D4 * 8 + 2)
#define                                 U2ABDIE_bit         _BIT_ACCESS(U2UIR,2)
// U2UIR<U2ABDIF>
extern volatile __bit                   U2ABDIF             __at(0xEA6);	// @ (0x1D4 * 8 + 6)
#define                                 U2ABDIF_bit         _BIT_ACCESS(U2UIR,6)
// U2ERRIE<U2ABDOVE>
extern volatile __bit                   U2ABDOVE            __at(0xEB5);	// @ (0x1D6 * 8 + 5)
#define                                 U2ABDOVE_bit        _BIT_ACCESS(U2ERRIE,5)
// U2ERRIR<U2ABDOVF>
extern volatile __bit                   U2ABDOVF            __at(0xEAD);	// @ (0x1D5 * 8 + 5)
#define                                 U2ABDOVF_bit        _BIT_ACCESS(U2ERRIR,5)
// U2CON0<U2BRGS>
extern volatile __bit                   U2BRGS              __at(0xE6F);	// @ (0x1CD * 8 + 7)
#define                                 U2BRGS_bit          _BIT_ACCESS(U2CON0,7)
// U2CON1<U2BRKOVR>
extern volatile __bit                   U2BRKOVR            __at(0xE71);	// @ (0x1CE * 8 + 1)
#define                                 U2BRKOVR_bit        _BIT_ACCESS(U2CON1,1)
// U2CTSPPS<U2CTSPPS0>
extern volatile __bit                   U2CTSPPS0           __at(0x1D18);	// @ (0x3A3 * 8 + 0)
#define                                 U2CTSPPS0_bit       _BIT_ACCESS(U2CTSPPS,0)
// U2CTSPPS<U2CTSPPS1>
extern volatile __bit                   U2CTSPPS1           __at(0x1D19);	// @ (0x3A3 * 8 + 1)
#define                                 U2CTSPPS1_bit       _BIT_ACCESS(U2CTSPPS,1)
// U2CTSPPS<U2CTSPPS2>
extern volatile __bit                   U2CTSPPS2           __at(0x1D1A);	// @ (0x3A3 * 8 + 2)
#define                                 U2CTSPPS2_bit       _BIT_ACCESS(U2CTSPPS,2)
// U2CTSPPS<U2CTSPPS3>
extern volatile __bit                   U2CTSPPS3           __at(0x1D1B);	// @ (0x3A3 * 8 + 3)
#define                                 U2CTSPPS3_bit       _BIT_ACCESS(U2CTSPPS,3)
// U2CTSPPS<U2CTSPPS4>
extern volatile __bit                   U2CTSPPS4           __at(0x1D1C);	// @ (0x3A3 * 8 + 4)
#define                                 U2CTSPPS4_bit       _BIT_ACCESS(U2CTSPPS,4)
// PIE6<U2EIE>
extern volatile __bit                   U2EIE               __at(0x23CF);	// @ (0x479 * 8 + 7)
#define                                 U2EIE_bit           _BIT_ACCESS(PIE6,7)
// PIR6<U2EIF>
extern volatile __bit                   U2EIF               __at(0x237F);	// @ (0x46F * 8 + 7)
#define                                 U2EIF_bit           _BIT_ACCESS(PIR6,7)
// IPR6<U2EIP>
extern volatile __bit                   U2EIP               __at(0x241F);	// @ (0x483 * 8 + 7)
#define                                 U2EIP_bit           _BIT_ACCESS(IPR6,7)
// U2ERRIE<U2FERIE>
extern volatile __bit                   U2FERIE             __at(0xEB3);	// @ (0x1D6 * 8 + 3)
#define                                 U2FERIE_bit         _BIT_ACCESS(U2ERRIE,3)
// U2ERRIR<U2FERIF>
extern volatile __bit                   U2FERIF             __at(0xEAB);	// @ (0x1D5 * 8 + 3)
#define                                 U2FERIF_bit         _BIT_ACCESS(U2ERRIR,3)
// U2CON2<U2FLO0>
extern volatile __bit                   U2FLO0              __at(0xE78);	// @ (0x1CF * 8 + 0)
#define                                 U2FLO0_bit          _BIT_ACCESS(U2CON2,0)
// U2CON2<U2FLO1>
extern volatile __bit                   U2FLO1              __at(0xE79);	// @ (0x1CF * 8 + 1)
#define                                 U2FLO1_bit          _BIT_ACCESS(U2CON2,1)
// PIE6<U2IE>
extern volatile __bit                   U2IE                __at(0x23CE);	// @ (0x479 * 8 + 6)
#define                                 U2IE_bit            _BIT_ACCESS(PIE6,6)
// PIR6<U2IF>
extern volatile __bit                   U2IF                __at(0x237E);	// @ (0x46F * 8 + 6)
#define                                 U2IF_bit            _BIT_ACCESS(PIR6,6)
// IPR6<U2IP>
extern volatile __bit                   U2IP                __at(0x241E);	// @ (0x483 * 8 + 6)
#define                                 U2IP_bit            _BIT_ACCESS(IPR6,6)
// PMD3<U2MD>
extern volatile __bit                   U2MD                __at(0x181C);	// @ (0x303 * 8 + 4)
#define                                 U2MD_bit            _BIT_ACCESS(PMD3,4)
// U2CON0<U2MODE0>
extern volatile __bit                   U2MODE0             __at(0xE68);	// @ (0x1CD * 8 + 0)
#define                                 U2MODE0_bit         _BIT_ACCESS(U2CON0,0)
// U2CON0<U2MODE1>
extern volatile __bit                   U2MODE1             __at(0xE69);	// @ (0x1CD * 8 + 1)
#define                                 U2MODE1_bit         _BIT_ACCESS(U2CON0,1)
// U2CON0<U2MODE2>
extern volatile __bit                   U2MODE2             __at(0xE6A);	// @ (0x1CD * 8 + 2)
#define                                 U2MODE2_bit         _BIT_ACCESS(U2CON0,2)
// U2CON1<U2ON>
extern volatile __bit                   U2ON                __at(0xE77);	// @ (0x1CE * 8 + 7)
#define                                 U2ON_bit            _BIT_ACCESS(U2CON1,7)
// U2ERRIE<U2PERIE>
extern volatile __bit                   U2PERIE             __at(0xEB6);	// @ (0x1D6 * 8 + 6)
#define                                 U2PERIE_bit         _BIT_ACCESS(U2ERRIE,6)
// U2ERRIR<U2PERIF>
extern volatile __bit                   U2PERIF             __at(0xEAE);	// @ (0x1D5 * 8 + 6)
#define                                 U2PERIF_bit         _BIT_ACCESS(U2ERRIR,6)
// U2FIFO<U2RCIDL>
extern volatile __bit                   U2RCIDL             __at(0xE93);	// @ (0x1D2 * 8 + 3)
#define                                 U2RCIDL_bit         _BIT_ACCESS(U2FIFO,3)
// U2CON2<U2RUNOVF>
extern volatile __bit                   U2RUNOVF            __at(0xE7F);	// @ (0x1CF * 8 + 7)
#define                                 U2RUNOVF_bit        _BIT_ACCESS(U2CON2,7)
// U2FIFO<U2RXBE>
extern volatile __bit                   U2RXBE              __at(0xE91);	// @ (0x1D2 * 8 + 1)
#define                                 U2RXBE_bit          _BIT_ACCESS(U2FIFO,1)
// U2FIFO<U2RXBF>
extern volatile __bit                   U2RXBF              __at(0xE90);	// @ (0x1D2 * 8 + 0)
#define                                 U2RXBF_bit          _BIT_ACCESS(U2FIFO,0)
// U2CON1<U2RXBIMD>
extern volatile __bit                   U2RXBIMD            __at(0xE73);	// @ (0x1CE * 8 + 3)
#define                                 U2RXBIMD_bit        _BIT_ACCESS(U2CON1,3)
// U2ERRIE<U2RXBKIE>
extern volatile __bit                   U2RXBKIE            __at(0xEB2);	// @ (0x1D6 * 8 + 2)
#define                                 U2RXBKIE_bit        _BIT_ACCESS(U2ERRIE,2)
// U2ERRIR<U2RXBKIF>
extern volatile __bit                   U2RXBKIF            __at(0xEAA);	// @ (0x1D5 * 8 + 2)
#define                                 U2RXBKIF_bit        _BIT_ACCESS(U2ERRIR,2)
// U2CON0<U2RXEN>
extern volatile __bit                   U2RXEN              __at(0xE6C);	// @ (0x1CD * 8 + 4)
#define                                 U2RXEN_bit          _BIT_ACCESS(U2CON0,4)
// U2ERRIE<U2RXFOIE>
extern volatile __bit                   U2RXFOIE            __at(0xEB1);	// @ (0x1D6 * 8 + 1)
#define                                 U2RXFOIE_bit        _BIT_ACCESS(U2ERRIE,1)
// U2ERRIR<U2RXFOIF>
extern volatile __bit                   U2RXFOIF            __at(0xEA9);	// @ (0x1D5 * 8 + 1)
#define                                 U2RXFOIF_bit        _BIT_ACCESS(U2ERRIR,1)
// U2FIFO<U2RXIDL>
extern volatile __bit                   U2RXIDL             __at(0xE93);	// @ (0x1D2 * 8 + 3)
#define                                 U2RXIDL_bit         _BIT_ACCESS(U2FIFO,3)
// PIE6<U2RXIE>
extern volatile __bit                   U2RXIE              __at(0x23CC);	// @ (0x479 * 8 + 4)
#define                                 U2RXIE_bit          _BIT_ACCESS(PIE6,4)
// PIR6<U2RXIF>
extern volatile __bit                   U2RXIF              __at(0x237C);	// @ (0x46F * 8 + 4)
#define                                 U2RXIF_bit          _BIT_ACCESS(PIR6,4)
// IPR6<U2RXIP>
extern volatile __bit                   U2RXIP              __at(0x241C);	// @ (0x483 * 8 + 4)
#define                                 U2RXIP_bit          _BIT_ACCESS(IPR6,4)
// U2CON2<U2RXPOL>
extern volatile __bit                   U2RXPOL             __at(0xE7E);	// @ (0x1CF * 8 + 6)
#define                                 U2RXPOL_bit         _BIT_ACCESS(U2CON2,6)
// U2RXPPS<U2RXPPS0>
extern volatile __bit                   U2RXPPS0            __at(0x1D20);	// @ (0x3A4 * 8 + 0)
#define                                 U2RXPPS0_bit        _BIT_ACCESS(U2RXPPS,0)
// U2RXPPS<U2RXPPS1>
extern volatile __bit                   U2RXPPS1            __at(0x1D21);	// @ (0x3A4 * 8 + 1)
#define                                 U2RXPPS1_bit        _BIT_ACCESS(U2RXPPS,1)
// U2RXPPS<U2RXPPS2>
extern volatile __bit                   U2RXPPS2            __at(0x1D22);	// @ (0x3A4 * 8 + 2)
#define                                 U2RXPPS2_bit        _BIT_ACCESS(U2RXPPS,2)
// U2RXPPS<U2RXPPS3>
extern volatile __bit                   U2RXPPS3            __at(0x1D23);	// @ (0x3A4 * 8 + 3)
#define                                 U2RXPPS3_bit        _BIT_ACCESS(U2RXPPS,3)
// U2RXPPS<U2RXPPS4>
extern volatile __bit                   U2RXPPS4            __at(0x1D24);	// @ (0x3A4 * 8 + 4)
#define                                 U2RXPPS4_bit        _BIT_ACCESS(U2RXPPS,4)
// U2CON1<U2SENDB>
extern volatile __bit                   U2SENDB             __at(0xE70);	// @ (0x1CE * 8 + 0)
#define                                 U2SENDB_bit         _BIT_ACCESS(U2CON1,0)
// U2CON2<U2STP0>
extern volatile __bit                   U2STP0              __at(0xE7C);	// @ (0x1CF * 8 + 4)
#define                                 U2STP0_bit          _BIT_ACCESS(U2CON2,4)
// U2CON2<U2STP1>
extern volatile __bit                   U2STP1              __at(0xE7D);	// @ (0x1CF * 8 + 5)
#define                                 U2STP1_bit          _BIT_ACCESS(U2CON2,5)
// U2FIFO<U2STPMD>
extern volatile __bit                   U2STPMD             __at(0xE96);	// @ (0x1D2 * 8 + 6)
#define                                 U2STPMD_bit         _BIT_ACCESS(U2FIFO,6)
// U2FIFO<U2TXBE>
extern volatile __bit                   U2TXBE              __at(0xE95);	// @ (0x1D2 * 8 + 5)
#define                                 U2TXBE_bit          _BIT_ACCESS(U2FIFO,5)
// U2FIFO<U2TXBF>
extern volatile __bit                   U2TXBF              __at(0xE94);	// @ (0x1D2 * 8 + 4)
#define                                 U2TXBF_bit          _BIT_ACCESS(U2FIFO,4)
// U2CON0<U2TXEN>
extern volatile __bit                   U2TXEN              __at(0xE6D);	// @ (0x1CD * 8 + 5)
#define                                 U2TXEN_bit          _BIT_ACCESS(U2CON0,5)
// PIE6<U2TXIE>
extern volatile __bit                   U2TXIE              __at(0x23CD);	// @ (0x479 * 8 + 5)
#define                                 U2TXIE_bit          _BIT_ACCESS(PIE6,5)
// PIR6<U2TXIF>
extern volatile __bit                   U2TXIF              __at(0x237D);	// @ (0x46F * 8 + 5)
#define                                 U2TXIF_bit          _BIT_ACCESS(PIR6,5)
// IPR6<U2TXIP>
extern volatile __bit                   U2TXIP              __at(0x241D);	// @ (0x483 * 8 + 5)
#define                                 U2TXIP_bit          _BIT_ACCESS(IPR6,5)
// U2ERRIE<U2TXMTIE>
extern volatile __bit                   U2TXMTIE            __at(0xEB7);	// @ (0x1D6 * 8 + 7)
#define                                 U2TXMTIE_bit        _BIT_ACCESS(U2ERRIE,7)
// U2ERRIR<U2TXMTIF>
extern volatile __bit                   U2TXMTIF            __at(0xEAF);	// @ (0x1D5 * 8 + 7)
#define                                 U2TXMTIF_bit        _BIT_ACCESS(U2ERRIR,7)
// U2CON2<U2TXPOL>
extern volatile __bit                   U2TXPOL             __at(0xE7A);	// @ (0x1CF * 8 + 2)
#define                                 U2TXPOL_bit         _BIT_ACCESS(U2CON2,2)
// U2FIFO<U2TXWRE>
extern volatile __bit                   U2TXWRE             __at(0xE97);	// @ (0x1D2 * 8 + 7)
#define                                 U2TXWRE_bit         _BIT_ACCESS(U2FIFO,7)
// U2CON1<U2WUE>
extern volatile __bit                   U2WUE               __at(0xE74);	// @ (0x1CE * 8 + 4)
#define                                 U2WUE_bit           _BIT_ACCESS(U2CON1,4)
// U2UIR<U2WUIF>
extern volatile __bit                   U2WUIF              __at(0xEA7);	// @ (0x1D4 * 8 + 7)
#define                                 U2WUIF_bit          _BIT_ACCESS(U2UIR,7)
// U2FIFO<U2XON>
extern volatile __bit                   U2XON               __at(0xE92);	// @ (0x1D2 * 8 + 2)
#define                                 U2XON_bit           _BIT_ACCESS(U2FIFO,2)
// I3C1ERRIE0<UCCCIE>
extern volatile __bit                   UCCCIE              __at(0x480);	// @ (0x90 * 8 + 0)
#define                                 UCCCIE_bit          _BIT_ACCESS(I3C1ERRIE0,0)
// I3C1ERRIR0<UCCCIF>
extern volatile __bit                   UCCCIF              __at(0x460);	// @ (0x8C * 8 + 0)
#define                                 UCCCIF_bit          _BIT_ACCESS(I3C1ERRIR0,0)
// ACTCON<UD>
extern volatile __bit                   UD                  __at(0x40E);	// @ (0x81 * 8 + 6)
#define                                 UD_bit              _BIT_ACCESS(ACTCON,6)
// ADUTHL<UTH0>
extern volatile __bit                   UTH0                __at(0x10B8);	// @ (0x217 * 8 + 0)
#define                                 UTH0_bit            _BIT_ACCESS(ADUTHL,0)
// ADUTHL<UTH1>
extern volatile __bit                   UTH1                __at(0x10B9);	// @ (0x217 * 8 + 1)
#define                                 UTH1_bit            _BIT_ACCESS(ADUTHL,1)
// ADUTHH<UTH10>
extern volatile __bit                   UTH10               __at(0x10C2);	// @ (0x218 * 8 + 2)
#define                                 UTH10_bit           _BIT_ACCESS(ADUTHH,2)
// ADUTHH<UTH11>
extern volatile __bit                   UTH11               __at(0x10C3);	// @ (0x218 * 8 + 3)
#define                                 UTH11_bit           _BIT_ACCESS(ADUTHH,3)
// ADUTHH<UTH12>
extern volatile __bit                   UTH12               __at(0x10C4);	// @ (0x218 * 8 + 4)
#define                                 UTH12_bit           _BIT_ACCESS(ADUTHH,4)
// ADUTHH<UTH13>
extern volatile __bit                   UTH13               __at(0x10C5);	// @ (0x218 * 8 + 5)
#define                                 UTH13_bit           _BIT_ACCESS(ADUTHH,5)
// ADUTHH<UTH14>
extern volatile __bit                   UTH14               __at(0x10C6);	// @ (0x218 * 8 + 6)
#define                                 UTH14_bit           _BIT_ACCESS(ADUTHH,6)
// ADUTHH<UTH15>
extern volatile __bit                   UTH15               __at(0x10C7);	// @ (0x218 * 8 + 7)
#define                                 UTH15_bit           _BIT_ACCESS(ADUTHH,7)
// ADUTHL<UTH2>
extern volatile __bit                   UTH2                __at(0x10BA);	// @ (0x217 * 8 + 2)
#define                                 UTH2_bit            _BIT_ACCESS(ADUTHL,2)
// ADUTHL<UTH3>
extern volatile __bit                   UTH3                __at(0x10BB);	// @ (0x217 * 8 + 3)
#define                                 UTH3_bit            _BIT_ACCESS(ADUTHL,3)
// ADUTHL<UTH4>
extern volatile __bit                   UTH4                __at(0x10BC);	// @ (0x217 * 8 + 4)
#define                                 UTH4_bit            _BIT_ACCESS(ADUTHL,4)
// ADUTHL<UTH5>
extern volatile __bit                   UTH5                __at(0x10BD);	// @ (0x217 * 8 + 5)
#define                                 UTH5_bit            _BIT_ACCESS(ADUTHL,5)
// ADUTHL<UTH6>
extern volatile __bit                   UTH6                __at(0x10BE);	// @ (0x217 * 8 + 6)
#define                                 UTH6_bit            _BIT_ACCESS(ADUTHL,6)
// ADUTHL<UTH7>
extern volatile __bit                   UTH7                __at(0x10BF);	// @ (0x217 * 8 + 7)
#define                                 UTH7_bit            _BIT_ACCESS(ADUTHL,7)
// ADUTHH<UTH8>
extern volatile __bit                   UTH8                __at(0x10C0);	// @ (0x218 * 8 + 0)
#define                                 UTH8_bit            _BIT_ACCESS(ADUTHH,0)
// ADUTHH<UTH9>
extern volatile __bit                   UTH9                __at(0x10C1);	// @ (0x218 * 8 + 1)
#define                                 UTH9_bit            _BIT_ACCESS(ADUTHH,1)
// ADSTAT<UTHR>
extern volatile __bit                   UTHR                __at(0x119E);	// @ (0x233 * 8 + 6)
#define                                 UTHR_bit            _BIT_ACCESS(ADSTAT,6)
// PIE3<VDDIO2IE>
extern volatile __bit                   VDDIO2IE            __at(0x23B2);	// @ (0x476 * 8 + 2)
#define                                 VDDIO2IE_bit        _BIT_ACCESS(PIE3,2)
// PIR3<VDDIO2IF>
extern volatile __bit                   VDDIO2IF            __at(0x2362);	// @ (0x46C * 8 + 2)
#define                                 VDDIO2IF_bit        _BIT_ACCESS(PIR3,2)
// IPR3<VDDIO2IP>
extern volatile __bit                   VDDIO2IP            __at(0x2402);	// @ (0x480 * 8 + 2)
#define                                 VDDIO2IP_bit        _BIT_ACCESS(IPR3,2)
// MVIOSTAT<VDDIO2RDY>
extern volatile __bit                   VDDIO2RDY           __at(0x2530);	// @ (0x4A6 * 8 + 0)
#define                                 VDDIO2RDY_bit       _BIT_ACCESS(MVIOSTAT,0)
// VREGCON<VREGPM0>
extern volatile __bit                   VREGPM0             __at(0x3C8);	// @ (0x79 * 8 + 0)
#define                                 VREGPM0_bit         _BIT_ACCESS(VREGCON,0)
// VREGCON<VREGPM1>
extern volatile __bit                   VREGPM1             __at(0x3C9);	// @ (0x79 * 8 + 1)
#define                                 VREGPM1_bit         _BIT_ACCESS(VREGCON,1)
// I3C1DSTAT1<VRSV0>
extern volatile __bit                   VRSV0               __at(0x558);	// @ (0xAB * 8 + 0)
#define                                 VRSV0_bit           _BIT_ACCESS(I3C1DSTAT1,0)
// I3C1DSTAT1<VRSV1>
extern volatile __bit                   VRSV1               __at(0x559);	// @ (0xAB * 8 + 1)
#define                                 VRSV1_bit           _BIT_ACCESS(I3C1DSTAT1,1)
// I3C1DSTAT1<VRSV2>
extern volatile __bit                   VRSV2               __at(0x55A);	// @ (0xAB * 8 + 2)
#define                                 VRSV2_bit           _BIT_ACCESS(I3C1DSTAT1,2)
// I3C1DSTAT1<VRSV3>
extern volatile __bit                   VRSV3               __at(0x55B);	// @ (0xAB * 8 + 3)
#define                                 VRSV3_bit           _BIT_ACCESS(I3C1DSTAT1,3)
// I3C1DSTAT1<VRSV4>
extern volatile __bit                   VRSV4               __at(0x55C);	// @ (0xAB * 8 + 4)
#define                                 VRSV4_bit           _BIT_ACCESS(I3C1DSTAT1,4)
// I3C1DSTAT1<VRSV5>
extern volatile __bit                   VRSV5               __at(0x55D);	// @ (0xAB * 8 + 5)
#define                                 VRSV5_bit           _BIT_ACCESS(I3C1DSTAT1,5)
// I3C1DSTAT1<VRSV6>
extern volatile __bit                   VRSV6               __at(0x55E);	// @ (0xAB * 8 + 6)
#define                                 VRSV6_bit           _BIT_ACCESS(I3C1DSTAT1,6)
// I3C1DSTAT1<VRSV7>
extern volatile __bit                   VRSV7               __at(0x55F);	// @ (0xAB * 8 + 7)
#define                                 VRSV7_bit           _BIT_ACCESS(I3C1DSTAT1,7)
// WDTCON1<WDTCS0>
extern volatile __bit                   WDTCS0              __at(0x3AC);	// @ (0x75 * 8 + 4)
#define                                 WDTCS0_bit          _BIT_ACCESS(WDTCON1,4)
// WDTCON1<WDTCS1>
extern volatile __bit                   WDTCS1              __at(0x3AD);	// @ (0x75 * 8 + 5)
#define                                 WDTCS1_bit          _BIT_ACCESS(WDTCON1,5)
// WDTCON1<WDTCS2>
extern volatile __bit                   WDTCS2              __at(0x3AE);	// @ (0x75 * 8 + 6)
#define                                 WDTCS2_bit          _BIT_ACCESS(WDTCON1,6)
// WDTCON0<WDTPS0>
extern volatile __bit                   WDTPS0              __at(0x3A1);	// @ (0x74 * 8 + 1)
#define                                 WDTPS0_bit          _BIT_ACCESS(WDTCON0,1)
// WDTCON0<WDTPS1>
extern volatile __bit                   WDTPS1              __at(0x3A2);	// @ (0x74 * 8 + 2)
#define                                 WDTPS1_bit          _BIT_ACCESS(WDTCON0,2)
// WDTCON0<WDTPS2>
extern volatile __bit                   WDTPS2              __at(0x3A3);	// @ (0x74 * 8 + 3)
#define                                 WDTPS2_bit          _BIT_ACCESS(WDTCON0,3)
// WDTCON0<WDTPS3>
extern volatile __bit                   WDTPS3              __at(0x3A4);	// @ (0x74 * 8 + 4)
#define                                 WDTPS3_bit          _BIT_ACCESS(WDTCON0,4)
// WDTCON0<WDTPS4>
extern volatile __bit                   WDTPS4              __at(0x3A5);	// @ (0x74 * 8 + 5)
#define                                 WDTPS4_bit          _BIT_ACCESS(WDTCON0,5)
// WDTTMR<WDTPSCNT16>
extern volatile __bit                   WDTPSCNT16          __at(0x3C0);	// @ (0x78 * 8 + 0)
#define                                 WDTPSCNT16_bit      _BIT_ACCESS(WDTTMR,0)
// WDTTMR<WDTPSCNT17>
extern volatile __bit                   WDTPSCNT17          __at(0x3C1);	// @ (0x78 * 8 + 1)
#define                                 WDTPSCNT17_bit      _BIT_ACCESS(WDTTMR,1)
// WDTCON0<WDTSEN>
extern volatile __bit                   WDTSEN              __at(0x3A0);	// @ (0x74 * 8 + 0)
#define                                 WDTSEN_bit          _BIT_ACCESS(WDTCON0,0)
// WDTTMR<WDTSTATE>
extern volatile __bit                   WDTSTATE            __at(0x3C2);	// @ (0x78 * 8 + 2)
#define                                 WDTSTATE_bit        _BIT_ACCESS(WDTTMR,2)
// WDTTMR<WDTTMR0>
extern volatile __bit                   WDTTMR0             __at(0x3C3);	// @ (0x78 * 8 + 3)
#define                                 WDTTMR0_bit         _BIT_ACCESS(WDTTMR,3)
// WDTTMR<WDTTMR1>
extern volatile __bit                   WDTTMR1             __at(0x3C4);	// @ (0x78 * 8 + 4)
#define                                 WDTTMR1_bit         _BIT_ACCESS(WDTTMR,4)
// WDTTMR<WDTTMR2>
extern volatile __bit                   WDTTMR2             __at(0x3C5);	// @ (0x78 * 8 + 5)
#define                                 WDTTMR2_bit         _BIT_ACCESS(WDTTMR,5)
// WDTTMR<WDTTMR3>
extern volatile __bit                   WDTTMR3             __at(0x3C6);	// @ (0x78 * 8 + 6)
#define                                 WDTTMR3_bit         _BIT_ACCESS(WDTTMR,6)
// WDTTMR<WDTTMR4>
extern volatile __bit                   WDTTMR4             __at(0x3C7);	// @ (0x78 * 8 + 7)
#define                                 WDTTMR4_bit         _BIT_ACCESS(WDTTMR,7)
// WDTCON1<WDTWINDOW0>
extern volatile __bit                   WDTWINDOW0          __at(0x3A8);	// @ (0x75 * 8 + 0)
#define                                 WDTWINDOW0_bit      _BIT_ACCESS(WDTCON1,0)
// WDTCON1<WDTWINDOW1>
extern volatile __bit                   WDTWINDOW1          __at(0x3A9);	// @ (0x75 * 8 + 1)
#define                                 WDTWINDOW1_bit      _BIT_ACCESS(WDTCON1,1)
// WDTCON1<WDTWINDOW2>
extern volatile __bit                   WDTWINDOW2          __at(0x3AA);	// @ (0x75 * 8 + 2)
#define                                 WDTWINDOW2_bit      _BIT_ACCESS(WDTCON1,2)
// PCON0<WDTWV>
extern volatile __bit                   WDTWV               __at(0x2785);	// @ (0x4F0 * 8 + 5)
#define                                 WDTWV_bit           _BIT_ACCESS(PCON0,5)
// WDTCON1<WINDOW0>
extern volatile __bit                   WINDOW0             __at(0x3A8);	// @ (0x75 * 8 + 0)
#define                                 WINDOW0_bit         _BIT_ACCESS(WDTCON1,0)
// WDTCON1<WINDOW1>
extern volatile __bit                   WINDOW1             __at(0x3A9);	// @ (0x75 * 8 + 1)
#define                                 WINDOW1_bit         _BIT_ACCESS(WDTCON1,1)
// WDTCON1<WINDOW2>
extern volatile __bit                   WINDOW2             __at(0x3AA);	// @ (0x75 * 8 + 2)
#define                                 WINDOW2_bit         _BIT_ACCESS(WDTCON1,2)
// WPUA<WPUA0>
extern volatile __bit                   WPUA0               __at(0x20B8);	// @ (0x417 * 8 + 0)
#define                                 WPUA0_bit           _BIT_ACCESS(WPUA,0)
// WPUA<WPUA1>
extern volatile __bit                   WPUA1               __at(0x20B9);	// @ (0x417 * 8 + 1)
#define                                 WPUA1_bit           _BIT_ACCESS(WPUA,1)
// WPUA<WPUA2>
extern volatile __bit                   WPUA2               __at(0x20BA);	// @ (0x417 * 8 + 2)
#define                                 WPUA2_bit           _BIT_ACCESS(WPUA,2)
// WPUA<WPUA3>
extern volatile __bit                   WPUA3               __at(0x20BB);	// @ (0x417 * 8 + 3)
#define                                 WPUA3_bit           _BIT_ACCESS(WPUA,3)
// WPUA<WPUA4>
extern volatile __bit                   WPUA4               __at(0x20BC);	// @ (0x417 * 8 + 4)
#define                                 WPUA4_bit           _BIT_ACCESS(WPUA,4)
// WPUA<WPUA5>
extern volatile __bit                   WPUA5               __at(0x20BD);	// @ (0x417 * 8 + 5)
#define                                 WPUA5_bit           _BIT_ACCESS(WPUA,5)
// WPUC<WPUC0>
extern volatile __bit                   WPUC0               __at(0x2158);	// @ (0x42B * 8 + 0)
#define                                 WPUC0_bit           _BIT_ACCESS(WPUC,0)
// WPUC<WPUC1>
extern volatile __bit                   WPUC1               __at(0x2159);	// @ (0x42B * 8 + 1)
#define                                 WPUC1_bit           _BIT_ACCESS(WPUC,1)
// WPUC<WPUC3>
extern volatile __bit                   WPUC3               __at(0x215B);	// @ (0x42B * 8 + 3)
#define                                 WPUC3_bit           _BIT_ACCESS(WPUC,3)
// WPUC<WPUC4>
extern volatile __bit                   WPUC4               __at(0x215C);	// @ (0x42B * 8 + 4)
#define                                 WPUC4_bit           _BIT_ACCESS(WPUC,4)
// WPUC<WPUC5>
extern volatile __bit                   WPUC5               __at(0x215D);	// @ (0x42B * 8 + 5)
#define                                 WPUC5_bit           _BIT_ACCESS(WPUC,5)
// WPUC<WPUC6>
extern volatile __bit                   WPUC6               __at(0x215E);	// @ (0x42B * 8 + 6)
#define                                 WPUC6_bit           _BIT_ACCESS(WPUC,6)
// WPUC<WPUC7>
extern volatile __bit                   WPUC7               __at(0x215F);	// @ (0x42B * 8 + 7)
#define                                 WPUC7_bit           _BIT_ACCESS(WPUC,7)
// I2C1PIE<WR1IE>
extern volatile __bit                   WR1IE               __at(0xF5C);	// @ (0x1EB * 8 + 4)
#define                                 WR1IE_bit           _BIT_ACCESS(I2C1PIE,4)
// I2C1PIR<WR1IF>
extern volatile __bit                   WR1IF               __at(0xF54);	// @ (0x1EA * 8 + 4)
#define                                 WR1IF_bit           _BIT_ACCESS(I2C1PIR,4)
// NVMCON1<WRERR>
extern volatile __bit                   WRERR               __at(0x2CF);	// @ (0x59 * 8 + 7)
#define                                 WRERR_bit           _BIT_ACCESS(NVMCON1,7)
// I2C1PIE<WRIE>
extern volatile __bit                   WRIE                __at(0xF5C);	// @ (0x1EB * 8 + 4)
#define                                 WRIE_bit            _BIT_ACCESS(I2C1PIE,4)
// I2C1PIR<WRIF>
extern volatile __bit                   WRIF                __at(0xF54);	// @ (0x1EA * 8 + 4)
#define                                 WRIF_bit            _BIT_ACCESS(I2C1PIR,4)
// DMAnCON0<XIP>
extern volatile __bit                   XIP                 __at(0x2A0);	// @ (0x54 * 8 + 0)
#define                                 XIP_bit             _BIT_ACCESS(DMAnCON0,0)
// CRCXORL<XOR0>
extern volatile __bit                   XOR0                __at(0x320);	// @ (0x64 * 8 + 0)
#define                                 XOR0_bit            _BIT_ACCESS(CRCXORL,0)
// CRCXORL<XOR1>
extern volatile __bit                   XOR1                __at(0x321);	// @ (0x64 * 8 + 1)
#define                                 XOR1_bit            _BIT_ACCESS(CRCXORL,1)
// CRCXORH<XOR10>
extern volatile __bit                   XOR10               __at(0x32A);	// @ (0x65 * 8 + 2)
#define                                 XOR10_bit           _BIT_ACCESS(CRCXORH,2)
// CRCXORH<XOR11>
extern volatile __bit                   XOR11               __at(0x32B);	// @ (0x65 * 8 + 3)
#define                                 XOR11_bit           _BIT_ACCESS(CRCXORH,3)
// CRCXORH<XOR12>
extern volatile __bit                   XOR12               __at(0x32C);	// @ (0x65 * 8 + 4)
#define                                 XOR12_bit           _BIT_ACCESS(CRCXORH,4)
// CRCXORH<XOR13>
extern volatile __bit                   XOR13               __at(0x32D);	// @ (0x65 * 8 + 5)
#define                                 XOR13_bit           _BIT_ACCESS(CRCXORH,5)
// CRCXORH<XOR14>
extern volatile __bit                   XOR14               __at(0x32E);	// @ (0x65 * 8 + 6)
#define                                 XOR14_bit           _BIT_ACCESS(CRCXORH,6)
// CRCXORH<XOR15>
extern volatile __bit                   XOR15               __at(0x32F);	// @ (0x65 * 8 + 7)
#define                                 XOR15_bit           _BIT_ACCESS(CRCXORH,7)
// CRCXORU<XOR16>
extern volatile __bit                   XOR16               __at(0x330);	// @ (0x66 * 8 + 0)
#define                                 XOR16_bit           _BIT_ACCESS(CRCXORU,0)
// CRCXORU<XOR17>
extern volatile __bit                   XOR17               __at(0x331);	// @ (0x66 * 8 + 1)
#define                                 XOR17_bit           _BIT_ACCESS(CRCXORU,1)
// CRCXORU<XOR18>
extern volatile __bit                   XOR18               __at(0x332);	// @ (0x66 * 8 + 2)
#define                                 XOR18_bit           _BIT_ACCESS(CRCXORU,2)
// CRCXORU<XOR19>
extern volatile __bit                   XOR19               __at(0x333);	// @ (0x66 * 8 + 3)
#define                                 XOR19_bit           _BIT_ACCESS(CRCXORU,3)
// CRCXORL<XOR2>
extern volatile __bit                   XOR2                __at(0x322);	// @ (0x64 * 8 + 2)
#define                                 XOR2_bit            _BIT_ACCESS(CRCXORL,2)
// CRCXORU<XOR20>
extern volatile __bit                   XOR20               __at(0x334);	// @ (0x66 * 8 + 4)
#define                                 XOR20_bit           _BIT_ACCESS(CRCXORU,4)
// CRCXORU<XOR21>
extern volatile __bit                   XOR21               __at(0x335);	// @ (0x66 * 8 + 5)
#define                                 XOR21_bit           _BIT_ACCESS(CRCXORU,5)
// CRCXORU<XOR22>
extern volatile __bit                   XOR22               __at(0x336);	// @ (0x66 * 8 + 6)
#define                                 XOR22_bit           _BIT_ACCESS(CRCXORU,6)
// CRCXORU<XOR23>
extern volatile __bit                   XOR23               __at(0x337);	// @ (0x66 * 8 + 7)
#define                                 XOR23_bit           _BIT_ACCESS(CRCXORU,7)
// CRCXORT<XOR24>
extern volatile __bit                   XOR24               __at(0x338);	// @ (0x67 * 8 + 0)
#define                                 XOR24_bit           _BIT_ACCESS(CRCXORT,0)
// CRCXORT<XOR25>
extern volatile __bit                   XOR25               __at(0x339);	// @ (0x67 * 8 + 1)
#define                                 XOR25_bit           _BIT_ACCESS(CRCXORT,1)
// CRCXORT<XOR26>
extern volatile __bit                   XOR26               __at(0x33A);	// @ (0x67 * 8 + 2)
#define                                 XOR26_bit           _BIT_ACCESS(CRCXORT,2)
// CRCXORT<XOR27>
extern volatile __bit                   XOR27               __at(0x33B);	// @ (0x67 * 8 + 3)
#define                                 XOR27_bit           _BIT_ACCESS(CRCXORT,3)
// CRCXORT<XOR28>
extern volatile __bit                   XOR28               __at(0x33C);	// @ (0x67 * 8 + 4)
#define                                 XOR28_bit           _BIT_ACCESS(CRCXORT,4)
// CRCXORT<XOR29>
extern volatile __bit                   XOR29               __at(0x33D);	// @ (0x67 * 8 + 5)
#define                                 XOR29_bit           _BIT_ACCESS(CRCXORT,5)
// CRCXORL<XOR3>
extern volatile __bit                   XOR3                __at(0x323);	// @ (0x64 * 8 + 3)
#define                                 XOR3_bit            _BIT_ACCESS(CRCXORL,3)
// CRCXORT<XOR30>
extern volatile __bit                   XOR30               __at(0x33E);	// @ (0x67 * 8 + 6)
#define                                 XOR30_bit           _BIT_ACCESS(CRCXORT,6)
// CRCXORT<XOR31>
extern volatile __bit                   XOR31               __at(0x33F);	// @ (0x67 * 8 + 7)
#define                                 XOR31_bit           _BIT_ACCESS(CRCXORT,7)
// CRCXORL<XOR4>
extern volatile __bit                   XOR4                __at(0x324);	// @ (0x64 * 8 + 4)
#define                                 XOR4_bit            _BIT_ACCESS(CRCXORL,4)
// CRCXORL<XOR5>
extern volatile __bit                   XOR5                __at(0x325);	// @ (0x64 * 8 + 5)
#define                                 XOR5_bit            _BIT_ACCESS(CRCXORL,5)
// CRCXORL<XOR6>
extern volatile __bit                   XOR6                __at(0x326);	// @ (0x64 * 8 + 6)
#define                                 XOR6_bit            _BIT_ACCESS(CRCXORL,6)
// CRCXORL<XOR7>
extern volatile __bit                   XOR7                __at(0x327);	// @ (0x64 * 8 + 7)
#define                                 XOR7_bit            _BIT_ACCESS(CRCXORL,7)
// CRCXORH<XOR8>
extern volatile __bit                   XOR8                __at(0x328);	// @ (0x65 * 8 + 0)
#define                                 XOR8_bit            _BIT_ACCESS(CRCXORH,0)
// CRCXORH<XOR9>
extern volatile __bit                   XOR9                __at(0x329);	// @ (0x65 * 8 + 1)
#define                                 XOR9_bit            _BIT_ACCESS(CRCXORH,1)
// PCON0<nBOR>
extern volatile __bit                   nBOR                __at(0x2780);	// @ (0x4F0 * 8 + 0)
#define                                 nBOR_bit            _BIT_ACCESS(PCON0,0)
// NVMCON0<nDONE>
extern volatile __bit                   nDONE               __at(0x2C0);	// @ (0x58 * 8 + 0)
#define                                 nDONE_bit           _BIT_ACCESS(NVMCON0,0)
// PCON1<nMEMV>
extern volatile __bit                   nMEMV               __at(0x2789);	// @ (0x4F1 * 8 + 1)
#define                                 nMEMV_bit           _BIT_ACCESS(PCON1,1)
// PCON0<nPOR>
extern volatile __bit                   nPOR                __at(0x2781);	// @ (0x4F0 * 8 + 1)
#define                                 nPOR_bit            _BIT_ACCESS(PCON0,1)
// PCON1<nPORVDDIO2>
extern volatile __bit                   nPORVDDIO2          __at(0x278B);	// @ (0x4F1 * 8 + 3)
#define                                 nPORVDDIO2_bit      _BIT_ACCESS(PCON1,3)
// PCON1<nRCM>
extern volatile __bit                   nRCM                __at(0x2788);	// @ (0x4F1 * 8 + 0)
#define                                 nRCM_bit            _BIT_ACCESS(PCON1,0)
// PCON0<nRI>
extern volatile __bit                   nRI                 __at(0x2782);	// @ (0x4F0 * 8 + 2)
#define                                 nRI_bit             _BIT_ACCESS(PCON0,2)
// PCON0<nRMCLR>
extern volatile __bit                   nRMCLR              __at(0x2783);	// @ (0x4F0 * 8 + 3)
#define                                 nRMCLR_bit          _BIT_ACCESS(PCON0,3)
// PCON1<nRVREG>
extern volatile __bit                   nRVREG              __at(0x278A);	// @ (0x4F1 * 8 + 2)
#define                                 nRVREG_bit          _BIT_ACCESS(PCON1,2)
// PCON0<nRWDT>
extern volatile __bit                   nRWDT               __at(0x2784);	// @ (0x4F0 * 8 + 4)
#define                                 nRWDT_bit           _BIT_ACCESS(PCON0,4)
// T1CON<nSYNC>
extern volatile __bit                   nSYNC               __at(0x84A);	// @ (0x109 * 8 + 2)
#define                                 nSYNC_bit           _BIT_ACCESS(T1CON,2)
// T1CON<nT1SYNC>
extern volatile __bit                   nT1SYNC             __at(0x84A);	// @ (0x109 * 8 + 2)
#define                                 nT1SYNC_bit         _BIT_ACCESS(T1CON,2)
// PCON0<nWDTWV>
extern volatile __bit                   nWDTWV              __at(0x2785);	// @ (0x4F0 * 8 + 5)
#define                                 nWDTWV_bit          _BIT_ACCESS(PCON0,5)

#endif // _PIC18F05Q20_H_
