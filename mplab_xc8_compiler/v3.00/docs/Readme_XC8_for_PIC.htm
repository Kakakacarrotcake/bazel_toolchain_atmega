<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"  
  "http://www.w3.org/TR/html4/loose.dtd">  
<html > 
<head><title>MPLABÂ&#x0151; XC8 C Compiler
Version 3.00Â&#x0103;Release Notes
for PICÂ&#x0151; MCU</title> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
<meta name="generator" content="TeX4ht (https://tug.org/tex4ht/)"> 
<meta name="originator" content="TeX4ht (https://tug.org/tex4ht/)"> 
<!-- html --> 
<meta name="src" content="Readme_XC8_for_PIC.tex"> 
<link rel="stylesheet" type="text/css" href="Readme_XC8_for_PIC.html.dat/Readme_XC8_for_PIC.css"> 
</head><body 
>
<div class="maketitle">
                                                                               
                                                                               
                                                                               
                                                                               

<h2 class="titleHead">MPLAB<sup class="textsuperscript">®</sup>  XC8 C Compiler<br />
Version 3.00&#x00A0;Release Notes<br />
for PIC<sup class="textsuperscript">®</sup>  MCU</h2>
 <div class="author" ><span 
class="ec-lmcsc-10x-x-120">Includes the MPLAB XC8 PIC Assembler </span></div>
<br />
<div class="date" ></div>
</div>
<div class="center" 
>
<!--l. 120--><p class="noindent" >
<!--l. 121--><p class="noindent" ><span 
class="ec-lmcsc-10">This document contains important information</span><br />
 <span 
class="ec-lmcsc-10">relating to the MPLAB XC8 C compiler when targeting microchip PIC devices.</span><br />
 <span 
class="ec-lmcsc-10">Please read it before running this software.</span>
</div>
<div class="center" 
>
<!--l. 128--><p class="noindent" >
<!--l. 129--><p class="noindent" ><span 
class="ec-lmcsc-10">See the</span><br />
 <span 
class="ec-lmcsc-10">MPLAB XC8 C compiler release notes for AVR document</span><br />
 <span 
class="ec-lmcsc-10">if you are using the compiler for 8-bit AVR devices.</span>
</div>
<h3 class="likesectionHead"><a 
 id="x1-1000"></a>Contents</h3>
<div class="tableofcontents">
<span class="sectionToc" >1 <a 
href="#x1-20001" id="QQ2-1-2">Overview</a></span>
                                                                               
                                                                               
<br /><span class="sectionToc" >2 <a 
href="#x1-150002" id="QQ2-1-16">Documentation Updates</a></span>
<br /><span class="sectionToc" >3 <a 
href="#x1-190003" id="QQ2-1-20">What&#8217;s New</a></span>
<br /><span class="sectionToc" >4 <a 
href="#x1-400004" id="QQ2-1-41">Migration Issues</a></span>
<br /><span class="sectionToc" >5 <a 
href="#x1-610005" id="QQ2-1-62">Fixed Issues</a></span>
<br /><span class="sectionToc" >6 <a 
href="#x1-820006" id="QQ2-1-83">Known Issues</a></span>
<br /><span class="sectionToc" >7 <a 
href="#x1-850007" id="QQ2-1-86">Device Errata</a></span>
</div>
                                                                               
                                                                               
<!--l. 137--><p class="noindent" >
<h3 class="sectionHead"><span class="titlemark">1   </span> <a 
 id="x1-20001"></a>Overview</h3>
<!--l. 139--><p class="noindent" >
<h4 class="subsectionHead"><span class="titlemark">1.1   </span> <a 
 id="x1-30001.1"></a>Introduction</h4>
<!--l. 141--><p class="noindent" >This release of the Microchip MPLAB<sup class="textsuperscript"><span 
class="ec-lmr-9">®</span></sup> XC8 C compiler is a major update that includes significant
new features, as well as bug fixes and expanded device support.
<!--l. 145--><p class="noindent" >
<h4 class="subsectionHead"><span class="titlemark">1.2   </span> <a 
 id="x1-40001.2"></a>Build Date</h4>
<!--l. 147--><p class="noindent" >The official build date of this compiler version is December 4, 2024.
<!--l. 149--><p class="noindent" >
<h4 class="subsectionHead"><span class="titlemark">1.3   </span> <a 
 id="x1-50001.3"></a>Previous Version</h4>
<!--l. 151--><p class="noindent" >The previous MPLAB XC8 C compiler version was 2.50, built on July 26, 2024.
<!--l. 154--><p class="noindent" >
<h4 class="subsectionHead"><span class="titlemark">1.4   </span> <a 
 id="x1-60001.4"></a>Functional Safety Manual</h4>
<!--l. 156--><p class="noindent" >A Functional Safety Manual for the MPLAB XC compilers is available in the documentation package
when you purchase a functional safety license.
<!--l. 160--><p class="noindent" >
<h4 class="subsectionHead"><span class="titlemark">1.5   </span> <a 
 id="x1-70001.5"></a>Component Licenses and Versions</h4>
<!--l. 162--><p class="noindent" >Components of the MPLAB XC8 C Compiler for PIC MCUs tools are written and distributed under
the LLVM Release License, detailed in the file named <span 
class="ec-lmtt-10">LLVM_LICENSE.txt</span>, located the <span 
class="ec-lmtt-10">docs</span>
subdirectory of your install directory.
<!--l. 167--><p class="noindent" >This compiler uses an implementation of Clang version 18.1.8 based upon LLVM 18.1.8.
<!--l. 170--><p class="noindent" >
<h4 class="subsectionHead"><span class="titlemark">1.6   </span> <a 
 id="x1-80001.6"></a>System Requirements</h4>
                                                                               
                                                                               
<!--l. 172--><p class="noindent" >The MPLAB XC8 C compiler and the licensing software it utilizes are available for a variety of
operating systems, including 64-bit versions of the following: Professional editions of Microsoft<sup class="textsuperscript"><span 
class="ec-lmr-9">®</span></sup>
Windows<sup class="textsuperscript"><span 
class="ec-lmr-9">®</span></sup> 10 and 11, Ubuntu<sup class="textsuperscript"><span 
class="ec-lmr-9">®</span></sup> 20.04, macOS<sup class="textsuperscript"><span 
class="ec-lmr-9">®</span></sup> 13.2 (Ventura) and 12.5 (Monterey), and Fedora 34.
Binaries for Windows have been code-signed. Binaries for macOS have been code-signed and
notarized.
<!--l. 180--><p class="noindent" >The MPLAB XC Network License Server is available for a variety of 64-bit operating systems,
including Microsoft Windows 10 and above; Ubuntu 20.04 and above; or macOS<sup class="textsuperscript"><span 
class="ec-lmr-9">®</span></sup> 13.2 (Ventura) and
above. The server may also run on various other operating systems including Windows Server, Linux
distributions, such as Oracle<sup class="textsuperscript"><span 
class="ec-lmr-9">®</span></sup> Enterprise Linux<sup class="textsuperscript"><span 
class="ec-lmr-9">®</span></sup> and Red Hat<sup class="textsuperscript"><span 
class="ec-lmr-9">®</span></sup> Enterprise Linux as well as older
versions of supported operating systems. However, the MPLAB XC Network License Server is not
tested on these operating systems. The MPLAB XC Network License Server can be run on Virtual
Machines of the supported OS using a virtual machine license for network licenses (SW006021-VM).
All 32-bit versions of the MPLAB XC Network Server are discontinued starting from version
3.00.
<!--l. 194--><p class="noindent" >
<h4 class="subsectionHead"><span class="titlemark">1.7   </span> <a 
 id="x1-90001.7"></a>Devices Supported</h4>
<!--l. 196--><p class="noindent" >This compiler supports all available 8-bit PIC<sup class="textsuperscript"><span 
class="ec-lmr-9">®</span></sup> MCU devices at the time of release. See
<span 
class="ec-lmtt-10">pic_chipinfo.html </span>(in the compiler<span 
class="ts1-lmr10-">'</span>s <span 
class="ec-lmtt-10">doc </span>directory) for a list of all supported baseline and mid-range
devices and <span 
class="ec-lmtt-10">pic18_chipinfo.html </span>for a list of all supported PIC18 devices. These files also list
configuration bit settings for each device.
<!--l. 203--><p class="noindent" >
<h4 class="subsectionHead"><span class="titlemark">1.8   </span> <a 
 id="x1-100001.8"></a>Editions and License Upgrades</h4>
<!--l. 205--><p class="noindent" >The MPLAB XC8 compiler can be activated as a licensed (PRO) or unlicensed (Free) product. You
need to purchase an activation key to license your compiler. A license allows for a higher level of
optimization compared to the Free product. An unlicensed compiler can be operated indefinitely
without a license.
<!--l. 211--><p class="noindent" >An MPLAB XC8 Functional Safety compiler must be activated with a functional safety license
purchased from Microchip. The compiler will not operate without this license. Once activated, you can
select any optimization level and use all the compiler features. This release of the MPLAB XC
Functional Safety Compiler supports the Network Server License.
<!--l. 217--><p class="noindent" >See the <span 
class="ec-lmri-10">Installing and Licensing MPLAB XC C Compilers </span>(DS50002059) document for information on
license types and installation of the compiler with a license.
<!--l. 221--><p class="noindent" >
<h4 class="subsectionHead"><span class="titlemark">1.9   </span> <a 
 id="x1-110001.9"></a>Installation and Activation</h4>
<!--l. 224--><p class="noindent" ><span 
class="ec-lmri-10">See also the Migration Issues and Limitations sections for important information about the latest</span>
<span 
class="ec-lmri-10">license manager included with this compiler.</span>
<!--l. 226--><p class="noindent" >If using MPLAB IDE, be sure to install the latest MPLAB X IDE before installing this tool. Quit the
IDE before installing the compiler. Run the <span 
class="ec-lmtt-10">.exe </span>(Windows), <span 
class="ec-lmtt-10">.run </span>(Linux) or <span 
class="ec-lmtt-10">.app </span>(macOS) compiler
installer application, e.g. <span 
class="ec-lmtt-10">XC8-1.00.11403-windows.exe </span>and follow the directions on the screen. The
default installation directory is recommended. If you are using Linux, you must install the compiler
using a terminal and from a root account. Install using a macOS account with administrator
                                                                               
                                                                               
privileges.
<!--l. 235--><p class="noindent" >Activation is now carried out separately to installation. See the document <span 
class="ec-lmri-10">License Manager for</span>
<span 
class="ec-lmri-10">MPLAB</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">XC C Compilers </span>(DS52059) for more information.
<!--l. 239--><p class="noindent" >If you choose to run the compiler under the evaluation license, you will now get a warning during
compilation when you are within 14 days of the end of your evaluation period. The same warning is
issued if you are within 14 days of the end of your HPA subscription.
<!--l. 244--><p class="noindent" >Note that as of MPLAB XC8 version 1.34, the XC Network License Server is a separate installer and is
not included in the single-user compiler installer.
<!--l. 248--><p class="noindent" >Note also that the use of MPLAB XC8 version 1.34 with MPLAB IDE v8 is now deprecated. DLL files
needed by this IDE are no longer installed with the compiler.
<!--l. 252--><p class="noindent" >The XC License Manager now supports roaming of floating network licenses. Aimed at mobile users,
this feature allows a floating license to go off network for a short period of time. Using this feature, you
can disconnect from the network and still use your MPLAB XC compiler. See the doc folder of the
XCLM install for more on this feature.<br 
class="newline" />MPLAB X IDE v1.40 includes a Licenses window (Tools &#x003E; Licenses) to visually manage
roaming.
<!--l. 260--><p class="noindent" >
<h5 class="likesubsubsectionHead"><a 
 id="x1-12000"></a>Resolving Installation Issues</h5>
<!--l. 262--><p class="noindent" >If you experience difficulties installing the compiler under any of the Windows operating systems, try
the following suggestions.
     <ul class="itemize1">
     <li class="itemize">
     <!--l. 265--><p class="noindent" >Run the install as an administrator.
     </li>
     <li class="itemize">
     <!--l. 266--><p class="noindent" >Set the permissions of the installer application to Full control. (Right-click the file, select
     Properties, Security tab, select user, edit.)
     </li>
     <li class="itemize">
     <!--l. 269--><p class="noindent" >Set permissions of the temp folder to Full Control.</li></ul>
<!--l. 271--><p class="noindent" >To determine the location of the temp folder, type <span 
class="ec-lmtt-10">%temp% </span>into the Run command (Windows logo key
+ R). This will open a file explorer dialog showing that directory and will allow you to determine the
path of that folder.
<!--l. 276--><p class="noindent" >
<h4 class="subsectionHead"><span class="titlemark">1.10   </span> <a 
 id="x1-130001.10"></a>Compiler Documentation</h4>
<!--l. 280--><p class="noindent" >There are several user&#8217;s guides shipped with the compiler. These can be opened from links in the
HTML page that opens in your browser when clicking the blue help button in the MPLAB X IDE
dashboard, as indicated in the screenshot.
                                                                               
                                                                               
<div class="center" 
>
<!--l. 284--><p class="noindent" >
<!--l. 285--><p class="noindent" ><hr class="figure"><div class="figure" 
><a 
 id="x1-130011"></a> <img 
src="Readme_XC8_for_PIC.html.dat/0_opt_developer_svcjenkins_agent_workspace_C_XC____manual_xc8_readme_diagrams_ide_help_button.png" alt="PIC"  
width="111" height="103" >
<br /> <div class="caption" 
><span class="id">Figure&#x00A0;1: </span><span  
class="content">Where to access documentation from within the MPLAB X IDE</span></div><!--tex4ht:label?: x1-130011 -->
<!--l. 290--><p class="noindent" ></div><hr class="endfigure">
</div>
<!--l. 293--><p class="noindent" >If you are building for 8-bit PIC targets, the MPLAB<sup class="textsuperscript"><span 
class="ec-lmr-9">®</span></sup> XC8 C Compiler User&#8217;s Guide for PIC<sup class="textsuperscript"><span 
class="ec-lmr-9">®</span></sup> MCU
contains information on those compiler options and features that are applicable to this
architecture.
<!--l. 298--><p class="noindent" >
<h4 class="subsectionHead"><span class="titlemark">1.11   </span> <a 
 id="x1-140001.11"></a>Customer Support</h4>
<!--l. 300--><p class="noindent" >You can ask questions of other users of this product in the  <a 
href="https://forum.microchip.com/s/sub-forums?forumId=a553l000000J2pvAAC&forumName=Development%5C%20Tools&subForumId=a553l000000J2rAAAS&subForumName=MPLAB%5C%20XC8" ><span class="textul">XC8 Forum</span></a>.
<!--l. 302--><p class="noindent" >Microchip welcomes bug reports, suggestions or comments regarding this compiler version. Please
direct any bug reports or feature requests via the  <a 
href="https://www.microchip.com/en-us/support" ><span class="textul">Support System</span></a>.
<!--l. 306--><p class="noindent" >At times, advisory message 1395 may be issued by the compiler. This message is part of a new testing
process. The compiler will display this message if it encounters a specific code sequence that results in
internal compiler templates being used in a unique way. This message does not imply a bug in the
generated code; however, the code sequence encountered could be used to further improve the
compiler<span 
class="ts1-lmr10-">'</span>s performance. If you wish to participate by contributing the code that generated this
message, you are welcome to send the project to  <a 
href="https://www.microchip.com/en-us/support" ><span class="textul">Support</span></a>; otherwise, you may ignore this
message.
<!--l. 316--><p class="noindent" >
<h3 class="sectionHead"><span class="titlemark">2   </span> <a 
 id="x1-150002"></a>Documentation Updates</h3>
<!--l. 318--><p class="noindent" >For on-line and up-to-date versions of MPLAB XC8 documentation, please visit Microchip<span 
class="ts1-lmr10-">'</span>s  <a 
href="https://onlinedocs.microchip.com" ><span class="textul">Online
Technical Documentation</span></a> website.
<!--l. 322--><p class="noindent" >This release includes the following new or updated PIC documentation:
     <ul class="itemize1">
     <li class="itemize">
     <!--l. 324--><p class="noindent" ><span 
class="ec-lmri-10">Microchip Unified Standard Library Reference Guide </span>(revision D)
     </li>
     <li class="itemize">
     <!--l. 326--><p class="noindent" ><span 
class="ec-lmri-10">MPLAB</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">XC8 C Compiler User&#8217;s Guide for PIC</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">MCU </span>(revision J)
     </li>
     <li class="itemize">
     <!--l. 328--><p class="noindent" ><span 
class="ec-lmri-10">MPLAB</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">XC8 PIC</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">Assembler User&#8217;s Guide </span>(revision E)
     </li>
     <li class="itemize">
                                                                               
                                                                               
     <!--l. 330--><p class="noindent" ><span 
class="ec-lmri-10">Hexmate User&#8217;s Guide </span>(XC8-3601 - revision D)</li></ul>
<!--l. 332--><p class="noindent" >As part of (XC8-3475), the release notes shipped with v3.00 and later versions of this compiler have
been prepared using new tools. The content should remain unchanged but might be presented
differently. Information regarding changes to version 1.x compilers has been removed but can be
obtained from the release notes for any v2.x or v1.x compiler.
<!--l. 338--><p class="noindent" >The <span 
class="ec-lmri-10">MPLAB</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">XC8 C Compiler User&#8217;s Guide for PIC</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">MCU </span>describes the operation and options
associated with the new <span 
class="ec-lmtt-10">xc8-cc </span>driver.
<!--l. 342--><p class="noindent" >The <span 
class="ec-lmri-10">Microchip Unified Standard Library Reference Guide </span>describes the behavior of and interface to the
functions defined by the Microchip Unified Standard Library, as well as the intended use of the library
types and macros. Some of this information was formerly contained in the <span 
class="ec-lmri-10">MPLAB</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">XC8 C Compiler</span>
<span 
class="ec-lmri-10">User&#8217;s Guide for PIC</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">MCU. </span>Device-specific library information is still contained in this compiler
guide.
<!--l. 350--><p class="noindent" >If you are just starting out with 8-bit devices and the MPLAB XC8 C Compiler, the <span 
class="ec-lmri-10">MPLAB</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">XC8</span>
<span 
class="ec-lmri-10">User&#8217;s Guide for Embedded Engineers - PIC</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">MCUs </span>(DS50002400) has information on setting up
projects in the MPLAB X IDE and writing code for your first MPLAB XC8 C project. This guide is
now distributed with the compiler.
<!--l. 357--><p class="noindent" >The <span 
class="ec-lmri-10">MPLAB</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">XC8 PIC</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">Assembler User&#8217;s Guide </span>is intended for those written assembly-only projects.
If you are using assembly with C code, instead refer to the Assembler section in the <span 
class="ec-lmri-10">MPLAB</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">XC8 C</span>
<span 
class="ec-lmri-10">Compiler User&#8217;s Guide for PIC</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">MCU.</span>
<!--l. 363--><p class="noindent" >The <span 
class="ec-lmri-10">Hexmate User&#8217;s Guide </span>is intended for those running Hexmate as a stand-alone application. If you
are using Hexmate as part of the MPLAB XC8 C compiler, instead refer to the Hexmate section in the
<span 
class="ec-lmri-10">MPLAB</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">XC8 C Compiler User&#8217;s Guide for PIC</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">MCU.</span>
<!--l. 369--><p class="noindent" >The following sections provide corrections and additional information to that found in the user&#8217;s guides
shipped with the compiler.
<!--l. 372--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-16000"></a>PIC18 Program Memory Symbols</h4>
<!--l. 374--><p class="noindent" >Microchip PIC18 devices have various regions in their program memory address space in addition to
the program flash memory (PFM). These regions contain device and configuration information of
utility to user projects, and can be read using table reads, the same mechanism employed by the
compiler to read constant data stored in PFM. The compiler defines special <span 
class="ec-lmtt-10">extern const </span>symbols
mapped to these regions in the device-specific headers. These symbols can be used by C programs to
easily read the contents of these regions and are available once you include &#x003C;xc.h&#x003E; in your source
files.
<!--l. 384--><p class="noindent" >The regions represented and examples symbols defined for these regions are described below:
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">User</span><span 
class="ec-lmbx-10">&#x00A0;IDs</span> </dt><dd 
class="description">
     <!--l. 387--><p class="noindent" >Words in the program memory space designated as ID locations where the user can store
     checksum or other code identification numbers. These words can be programed using the
     <span 
class="ec-lmtt-10">#pragma config </span>directive. Example symbol definitions provided:</dd></dl>
<!--l. 392--><p class="noindent" >
     <dl class="list1"><dt class="list">
     </dt><dd 
class="list">
     <!--l. 392--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_IDLOCs[8]</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x200000);</span>
                                                                               
                                                                               
     <!--l. 395--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_IDLOC0</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x200000);</span>
     <!--l. 397--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_IDLOC1</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x200002);</span>
     <!--l. 399--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_IDLOC2</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x200004);</span></dd></dl>
<!--l. 401--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Configuration</span><span 
class="ec-lmbx-10">&#x00A0;Words</span> </dt><dd 
class="description">
     <!--l. 402--><p class="noindent" >Words and bits that allow the user to setup a device with choices of oscillators, resets,
     memory protection options, etc. These words can be programed using <span 
class="ec-lmtt-10">#pragma config</span>
     directive. Example symbol definitions provided:</dd></dl>
<!--l. 407--><p class="noindent" >
     <dl class="list1"><dt class="list">
     </dt><dd 
class="list">
     <!--l. 407--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;char</span><span 
class="ec-lmtt-10">&#x00A0;_CONFIGs[10]</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x300000);</span>
     <!--l. 410--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;char</span><span 
class="ec-lmtt-10">&#x00A0;_CONFIG1L</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x300000);</span>
     <!--l. 412--><p class="noindent" ><span 
class="ec-lmtt-10">typedef</span><span 
class="ec-lmtt-10">&#x00A0;union</span><span 
class="ec-lmtt-10">&#x00A0;{</span>
     <!--l. 413--><p class="noindent" >
         <dl class="list2"><dt class="list">
         </dt><dd 
class="list">
         <!--l. 413--><p class="noindent" ><span 
class="ec-lmtt-10">struct</span><span 
class="ec-lmtt-10">&#x00A0;{</span>
         <!--l. 415--><p class="noindent" >
             <dl class="list3"><dt class="list">
             </dt><dd 
class="list">
             <!--l. 415--><p class="noindent" ><span 
class="ec-lmtt-10">unsigned</span><span 
class="ec-lmtt-10">&#x00A0;FEXTOSC</span><span 
class="ec-lmtt-10">&#x00A0;:3;</span>
             <!--l. 418--><p class="noindent" ><span 
class="ec-lmtt-10">unsigned</span><span 
class="ec-lmtt-10">&#x00A0;:1;</span>
             <!--l. 420--><p class="noindent" ><span 
class="ec-lmtt-10">unsigned</span><span 
class="ec-lmtt-10">&#x00A0;RSTOSC</span><span 
class="ec-lmtt-10">&#x00A0;:3;</span></dd></dl>
         <!--l. 422--><p class="noindent" ><span 
class="ec-lmtt-10">};</span></dd></dl>
     <!--l. 424--><p class="noindent" ><span 
class="ec-lmtt-10">}</span><span 
class="ec-lmtt-10">&#x00A0;_CONFIG1Lbits_t;</span>
     <!--l. 426--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;_CONFIG1Lbits_t</span><span 
class="ec-lmtt-10">&#x00A0;_CONFIG1Lbits</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x30000);</span>
     <!--l. 428--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;char</span><span 
class="ec-lmtt-10">&#x00A0;_CONFIG1H</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x300001);</span>
     <!--l. 430--><p class="noindent" ><span 
class="ec-lmtt-10">typedef</span><span 
class="ec-lmtt-10">&#x00A0;union</span><span 
class="ec-lmtt-10">&#x00A0;{</span>
     <!--l. 431--><p class="noindent" >
         <dl class="list2"><dt class="list">
         </dt><dd 
class="list">
         <!--l. 431--><p class="noindent" ><span 
class="ec-lmtt-10">struct</span><span 
class="ec-lmtt-10">&#x00A0;{</span>
         <!--l. 433--><p class="noindent" >
             <dl class="list3"><dt class="list">
             </dt><dd 
class="list">
             <!--l. 433--><p class="noindent" ><span 
class="ec-lmtt-10">unsigned</span><span 
class="ec-lmtt-10">&#x00A0;CLKOUTEN</span><span 
class="ec-lmtt-10">&#x00A0;:1;</span>
             <!--l. 436--><p class="noindent" ><span 
class="ec-lmtt-10">unsigned</span><span 
class="ec-lmtt-10">&#x00A0;PR1WAY</span><span 
class="ec-lmtt-10">&#x00A0;:1;</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;CSWEN</span><span 
class="ec-lmtt-10">&#x00A0;:1;</span>
             <!--l. 438--><p class="noindent" ><span 
class="ec-lmtt-10">unsigned</span><span 
class="ec-lmtt-10">&#x00A0;FCMEN</span><span 
class="ec-lmtt-10">&#x00A0;:1;</span></dd></dl>
         <!--l. 440--><p class="noindent" ><span 
class="ec-lmtt-10">};</span></dd></dl>
     <!--l. 442--><p class="noindent" ><span 
class="ec-lmtt-10">}</span><span 
class="ec-lmtt-10">&#x00A0;_CONFIG1Hbits_t;</span>
     <!--l. 444--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;_CONFIG1Hbits_t</span><span 
class="ec-lmtt-10">&#x00A0;_CONFIG1Hbits</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x30001);</span></dd></dl>
<!--l. 446--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Device</span><span 
class="ec-lmbx-10">&#x00A0;Information</span><span 
class="ec-lmbx-10">&#x00A0;Area</span><span 
class="ec-lmbx-10">&#x00A0;(DIA)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 447--><p class="noindent" >The  DIA  contains  contains  information  such  as  calibration  data  for  the  internal
     temperature indicator modules, stores the Microchip Unique Identifier words and the fixed
     voltage reference voltage, etc. Example symbol definitions provided:</dd></dl>
<!--l. 452--><p class="noindent" >
     <dl class="list1"><dt class="list">
     </dt><dd 
class="list">
     <!--l. 452--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_DIA[32]</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x3F0000);</span>
     <!--l. 455--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_DIA_MUI[8]</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x3F0000);</span>
     <!--l. 457--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_DIA_MUI0</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x3F0000);</span>
     <!--l. 459--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_DIA_MUI1</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x3F0002);</span>
     <!--l. 461--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_DIA_MUI2</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x3F0004);</span>
     <!--l. 463--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_DIA_EUI[10]</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x3F0010);</span>
     <!--l. 465--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_DIA_EUI0</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x3F0010);</span>
     <!--l. 467--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_DIA_EUI1</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x3F0012);</span>
     <!--l. 469--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_DIA_EUI2</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x3F0014);</span></dd></dl>
<!--l. 471--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Device</span><span 
class="ec-lmbx-10">&#x00A0;Configuration</span><span 
class="ec-lmbx-10">&#x00A0;Information</span><span 
class="ec-lmbx-10">&#x00A0;(DCI)</span> </dt><dd 
class="description">
     <!--l. 472--><p class="noindent" >The  DCI  holds  information  about  the  device  which  is  useful  for  programming  and
     bootloader applications. Example symbol definitions provided:</dd></dl>
<!--l. 476--><p class="noindent" >
     <dl class="list1"><dt class="list">
     </dt><dd 
class="list">
     <!--l. 476--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_DCI[5]</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x3FFF00);</span>
     <!--l. 479--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_DCI_ERSIZ</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x3FFF00);</span>
     <!--l. 481--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_DCI_WLSIZ</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x3FFF02);</span>
     <!--l. 483--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_DCI_URSIZ</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x3FFF04);</span>
     <!--l. 485--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_DCI_EESIZ</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x3FFF06);</span>
     <!--l. 487--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_DCI_PCNT</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x3FFF08);</span></dd></dl>
<!--l. 489--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Revision</span><span 
class="ec-lmbx-10">&#x00A0;ID</span><span 
class="ec-lmbx-10">&#x00A0;and</span><span 
class="ec-lmbx-10">&#x00A0;Device</span><span 
class="ec-lmbx-10">&#x00A0;ID</span> </dt><dd 
class="description">
     <!--l. 490--><p class="noindent" >Unique identifiers for the device and its revision. Example symbol definitions provided:</dd></dl>
<!--l. 493--><p class="noindent" >
     <dl class="list1"><dt class="list">
     </dt><dd 
class="list">
     <!--l. 493--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_DEVID</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x3FFFFE);</span>
     <!--l. 496--><p class="noindent" ><span 
class="ec-lmtt-10">extern</span><span 
class="ec-lmtt-10">&#x00A0;const</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;_REVID</span><span 
class="ec-lmtt-10">&#x00A0;__at(0x3FFFFC);</span></dd></dl>
<!--l. 499--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-17000"></a>Register Usage</h4>
<!--l. 501--><p class="noindent" >The following complements the information already contained in <span 
class="ec-lmri-10">Section 5.6 Register Usage </span>in the
                                                                               
                                                                               
User&#8217;s Guide.
<!--l. 504--><p class="noindent" >Note that the compiler determines the size of all <span 
class="ec-lmtt-10">const </span>data defined by a program. For total sizes less
than 64k and when the <span 
class="ec-lmtt-10">mediumconst </span>psect is used to hold this data, the TBLPRTU register only
needs to be initialized at runtime startup and does not need to be modified during program execution.
For total sizes less than 256 bytes, the psect holding this data (<span 
class="ec-lmtt-10">smallconst</span>) is positioned so that both
the upper and high table pointer registers (TBLPTRU and TBLPTRH) can be assumed to hold the
value assigned at runtime startup. As a consequence, any code that directly or indirectly modifies the
table pointer registers that the compiler assumes will hold their value during program execution could
lead to code failure. Such modification could occur if the program assigns an address to a
pointer that is not of an object in the normally accessible program memory space. If you do
need to assign such an address, or you must manually modify the table pointer registers in
any way, save the content of the TBLPTRH and TBLPTRU registers as required before
the assignment, and restore the registers with their saved values afterward. If in doubt
as to which table pointer registers need saving, you can save all of them using code such
as:
<!--l. 523--><p class="noindent" >
     <dl class="list1"><dt class="list">
     </dt><dd 
class="list">
     <!--l. 523--><p class="noindent" ><span 
class="ec-lmtt-10">#include</span><span 
class="ec-lmtt-10">&#x00A0;&#x003C;xc.h&#x003E;</span>
     <!--l. 526--><p class="noindent" ><span 
class="ec-lmtt-10">uint24_t</span><span 
class="ec-lmtt-10">&#x00A0;saved_tblptr</span><span 
class="ec-lmtt-10">&#x00A0;=</span><span 
class="ec-lmtt-10">&#x00A0;TBLPTR;</span>
     <!--l. 528--><p class="noindent" ><span 
class="ec-lmtt-10">//</span><span 
class="ec-lmtt-10">&#x00A0;place</span><span 
class="ec-lmtt-10">&#x00A0;code</span><span 
class="ec-lmtt-10">&#x00A0;that</span><span 
class="ec-lmtt-10">&#x00A0;modifies</span><span 
class="ec-lmtt-10">&#x00A0;TBLPTR</span><span 
class="ec-lmtt-10">&#x00A0;here</span>
     <!--l. 530--><p class="noindent" ><span 
class="ec-lmtt-10">TBLPTR</span><span 
class="ec-lmtt-10">&#x00A0;=</span><span 
class="ec-lmtt-10">&#x00A0;saved_tblptr;</span></dd></dl>
<!--l. 533--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-18000"></a>Address-mask Macro</h4>
<!--l. 535--><p class="noindent" >The macro <span 
class="ec-lmtt-10">_PTR3_ADDR_MASK </span>can be used to obtain the address bits encoded within certain pointers
when building for PIC18 devices. The macro is defined as a mask that when ANDed with a 24-bit
mixed-space address will strip away any bits used to identify the memory space of the pointer target,
leaving just the address in that memory space.
<!--l. 541--><p class="noindent" >
<h3 class="sectionHead"><span class="titlemark">3   </span> <a 
 id="x1-190003"></a>What&#8217;s New</h3>
<!--l. 543--><p class="noindent" >The following are new PIC-target features the compiler now supports. The version number in the
subheadings indicates the first compiler version to support the features that follow.
<!--l. 547--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-20000"></a>Version 3.00</h4>
<!--l. 548--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;device</span><span 
class="ec-lmbx-10">&#x00A0;support</span> </dt><dd 
class="description">
     <!--l. 549--><p class="noindent" >No new PIC devices are supported by this release.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Shipped</span><span 
class="ec-lmbx-10">&#x00A0;DFPs</span> </dt><dd 
class="description">
     <!--l. 551--><p class="noindent" >The  following  are  the  PIC-specific  DFP  versions  that  ship  with  the  compiler:
     MCPxxxx_DFP  v1.7.176,  MCVxxxx_DFP  v1.5.154,  PIC10-12Fxxx_DFP  v1.7.178,
     PIC12-16Cxxx_DFP   v1.6.168,   PIC12-16F1xxx_DFP   v1.7.242,   PIC16F1xxxx_DFP
     v1.25.389,  PIC16Fxxx_DFP  v1.6.156,  PIC18Cxxx_DFP  v1.5.163,  PIC18F-J_DFP
     v1.8.164, PIC18F-K_DFP v1.13.292, PIC18F-Q_DFP v1.25.433, and PIC18Fxxxx_DFP
     v1.6.159.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">XCLM</span><span 
class="ec-lmbx-10">&#x00A0;update</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3479)</span> </dt><dd 
class="description">
     <!--l. 557--><p class="noindent" >The XCLM license manager has been updated to version 3.22.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">LSP</span><span 
class="ec-lmbx-10">&#x00A0;at</span><span 
class="ec-lmbx-10">&#x00A0;your</span><span 
class="ec-lmbx-10">&#x00A0;service</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3466)</span> </dt><dd 
class="description">
     <!--l. 559--><p class="noindent" >The compiler now provides an implementation of a server conforming to the Language
     Server Protocol (LSP) using clangd. This server can be used by IDEs to obtain some
     intelligence regarding XC8 source code.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">PIC18</span><span 
class="ec-lmbx-10">&#x00A0;program</span><span 
class="ec-lmbx-10">&#x00A0;memory</span><span 
class="ec-lmbx-10">&#x00A0;region</span><span 
class="ec-lmbx-10">&#x00A0;symbols</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3451)</span> </dt><dd 
class="description">
     <!--l. 563--><p class="noindent" >Symbols  have  been  added  to  the  device-specific  C  header  files  that  can  be  used  for
     read-only, direct access to special program memory regions on PIC18 devices. These regions
     are the configuration registers, user-ID locations, DCI and DIA tables, and device and
     revision IDs. See <a 
href="#x1-150002">Documentation Updates<!--tex4ht:ref: sec:Documentation-Updates --></a> in these notes for more information.
     </dd><dt class="description">
<a 
 id="x1-20000doc"></a><span 
class="ec-lmbx-10">Clang</span><span 
class="ec-lmbx-10">&#x00A0;updated</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3016)</span> </dt><dd 
class="description">
     <!--l. 569--><p class="noindent" >The Clang compiler front end has been updated from version v4.0.1 to v18.1.8. This update
     includes numerous bug fixes and improvements to diagnostics and warnings, along with
     updated support for C language standards. These changes include:</dd></dl>
     <ul class="itemize1">
     <li class="itemize">
     <!--l. 576--><p class="noindent" >The  warning  controlled  by  <span 
class="ec-lmtt-10">-Wstrict-prototypes </span>is  new  and  diagnoses  deprecated
     declarations and definitions of functions without a prototype where the behavior in C2x
     will remain correct.
     </li>
     <li class="itemize">
     <!--l. 579--><p class="noindent" >The warning controlled by <span 
class="ec-lmtt-10">-Wtautological-compare </span>will now look through member and
     array access to determine if two operand expressions are the same.
     </li>
     <li class="itemize">
     <!--l. 582--><p class="noindent" >The   new   warning   controlled   by   <span 
class="ec-lmtt-10">-Wsizeof-array-div  </span>catches   cases   like   <span 
class="ec-lmtt-10">int</span>
     <span 
class="ec-lmtt-10">arr[10]; ...sizeof(arr) / sizeof(short)</span>,  and  the  existing  warning  controlled  by
     <span 
class="ec-lmtt-10">-Wsizeof-pointer-div </span>catches more cases.
     </li>
     <li class="itemize">
     <!--l. 586--><p class="noindent" >The new warning controlled by <span 
class="ec-lmtt-10">-Wxor-used-as-pow </span>warns where it looks like the xor
     operator, <span 
class="ec-lmtt-10">^</span>, was used to mean exponentiation
                                                                               
                                                                               
     </li>
     <li class="itemize">
     <!--l. 589--><p class="noindent" >The  new  warning  controlled  by  <span 
class="ec-lmtt-10">-Wimplicit-const-int-float-conversion </span>(enabled
     by  default  and  controlled  by  <span 
class="ec-lmtt-10">-Wimplicit-int-float-conversion</span>)  warns  on  implicit
     conversion from an integer constant to a float type.
     </li>
     <li class="itemize">
     <!--l. 592--><p class="noindent" >The new warning controlled by <span 
class="ec-lmtt-10">-Wpointer-to-int-cast </span>warns about C-style casts of
     pointers to an integer type too small to hold all possible values.
     </li>
     <li class="itemize">
     <!--l. 595--><p class="noindent" >The warning controlled by <span 
class="ec-lmtt-10">-Wdeprecated-non-prototype </span>will diagnose cases where the
     deprecated  declarations  or  definitions  of  a  function  without  a  prototype  will  change
     behavior  in  C2x;  and  additionally  diagnose  calls  which  pass  arguments  to  a  function
     without a prototype.
     </li>
     <li class="itemize">
     <!--l. 599--><p class="noindent" >(XC8-3596)
     The compiler will no longer issue a warning (controlled by <span 
class="ec-lmtt-10">-Wmissing-prototype</span>) about
     <span 
class="ec-lmtt-10">main() </span>having a missing prototype.
     </li>
     <li class="itemize">
     <!--l. 602--><p class="noindent" >Clang now appropriately issues an error when a definition of a C function without a
     prototype and with no arguments is an invalid redeclaration of a function with a prototype.
     For example, <span 
class="ec-lmtt-10">void f(int); void f() {} </span>is now properly diagnosed.
     </li>
     <li class="itemize">
     <!--l. 606--><p class="noindent" >The diagnostic controlled by <span 
class="ec-lmtt-10">-Wimplicit-function-declaration </span>now defaults to an error
     in C99 and later standards.
     </li>
     <li class="itemize">
     <!--l. 608--><p class="noindent" >The diagnostic controlled by <span 
class="ec-lmtt-10">-Wimplicit-int </span>now defaults to an error in C99 and later
     standards.
     </li>
     <li class="itemize">
     <!--l. 610--><p class="noindent" >Using <span 
class="ec-lmtt-10">#warning</span>, <span 
class="ec-lmtt-10">#elifdef, </span>and <span 
class="ec-lmtt-10">#elifndef </span>that are incompatible with C standards before
     C2x/C++2b are now warned via CCI or <span 
class="ec-lmtt-10">the -Wpedantic </span>option.
     </li>
     <li class="itemize">
     <!--l. 613--><p class="noindent" >The diagnostic controlled by <span 
class="ec-lmtt-10">-Wint-conversion </span>for implicit int &#x003C;-&#x003E; pointer conversions
     now defaults to an error in all C language modes but may be downgraded to a warning
     with <span 
class="ec-lmtt-10">-Wno-error=int-conversion</span>, or disabled entirely with <span 
class="ec-lmtt-10">-Wno-int-conversion.</span>
     </li>
     <li class="itemize">
                                                                               
                                                                               
     <!--l. 617--><p class="noindent" >The diagnostics controlled by <span 
class="ec-lmtt-10">-Wimplicit-function-declaration </span>and -<span 
class="ec-lmtt-10">Wimplicit-int</span>
     now default to an error in C99.
     </li>
     <li class="itemize">
     <!--l. 619--><p class="noindent" >The diagnostic controlled by <span 
class="ec-lmtt-10">-Wincompatible-function-pointer-types </span>now defaults
     to  an  error  in  all  C  language  modes  but  may  be  downgraded  to  a  warning
     with  <span 
class="ec-lmtt-10">-Wno-error=incompatible-function-pointer-types</span>,  or  disabled  entirely  with
     <span 
class="ec-lmtt-10">-Wno-incompatible-function-pointer-types.</span>
     </li>
     <li class="itemize">
     <!--l. 623--><p class="noindent" >The <span 
class="ec-lmtt-10">--language=assembler-with-cpp </span>option is enabled for all hand-written assembly
     source files; the <span 
class="ec-lmtt-10">--language=c </span>option is enabled for all C source files.
     </li>
     <li class="itemize">
     <!--l. 626--><p class="noindent" >The following table shows which Clang options are enabled by default for the different C
     standards.</li></ul>
<div class="center" 
>
<!--l. 629--><p class="noindent" >
<div class="tabular"> <table id="TBL-2" class="tabular" 
 
><colgroup id="TBL-2-1g"><col 
id="TBL-2-1"></colgroup><colgroup id="TBL-2-2g"><col 
id="TBL-2-2"></colgroup><colgroup id="TBL-2-3g"><col 
id="TBL-2-3"></colgroup><colgroup id="TBL-2-4g"><col 
id="TBL-2-4"></colgroup><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-2-1-"><td  style="white-space:nowrap; text-align:left;" id="TBL-2-1-1"  
class="td11"> Option                          </td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-1-2"  
class="td11"> C90  </td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-1-3"  
class="td11"> C99  </td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-1-4"  
class="td11"> CCI  </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td><td><hr></td></tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-2-2-"><td  style="white-space:nowrap; text-align:left;" id="TBL-2-2-1"  
class="td11"> <span 
class="ec-lmtt-10">-Wno-gcc-compat        </span></td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-2-2"  
class="td11">  X   </td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-2-3"  
class="td11">  X   </td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-2-4"  
class="td11">  X   </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-2-3-"><td  style="white-space:nowrap; text-align:left;" id="TBL-2-3-1"  
class="td11"> <span 
class="ec-lmtt-10">-std=c90               </span></td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-3-2"  
class="td11">  X   </td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-3-3"  
class="td11">      </td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-3-4"  
class="td11">      </td></tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-2-4-"><td  style="white-space:nowrap; text-align:left;" id="TBL-2-4-1"  
class="td11"> <span 
class="ec-lmtt-10">-std=c99 </span></td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-4-2"  
class="td11"> </td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-4-3"  
class="td11"> X </td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-4-4"  
class="td11"> </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-2-5-"><td  style="white-space:nowrap; text-align:left;" id="TBL-2-5-1"  
class="td11"> <span 
class="ec-lmtt-10">-Wconversion           </span></td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-5-2"  
class="td11">  X   </td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-5-3"  
class="td11">  X   </td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-5-4"  
class="td11">  X   </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-2-6-"><td  style="white-space:nowrap; text-align:left;" id="TBL-2-6-1"  
class="td11"> <span 
class="ec-lmtt-10">-pedantic              </span></td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-6-2"  
class="td11">      </td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-6-3"  
class="td11">      </td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-6-4"  
class="td11">  X   </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-2-7-"><td  style="white-space:nowrap; text-align:left;" id="TBL-2-7-1"  
class="td11"> <span 
class="ec-lmtt-10">-Werror=gnu-case-range </span></td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-7-2"  
class="td11">      </td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-7-3"  
class="td11">      </td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-7-4"  
class="td11">  X   </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-2-8-"><td  style="white-space:nowrap; text-align:left;" id="TBL-2-8-1"  
class="td11"> <span 
class="ec-lmtt-10">-Wgnu-case-range       </span></td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-8-2"  
class="td11">  X   </td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-8-3"  
class="td11">  X   </td><td  style="white-space:nowrap; text-align:center;" id="TBL-2-8-4"  
class="td11">      </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-2-9-"><td  style="white-space:nowrap; text-align:left;" id="TBL-2-9-1"  
class="td11">                        </td>
</tr></table>                                                                               </div>
</div>
<!--l. 675--><p class="noindent" >
     <blockquote class="quote">
     <div class="flushleft" 
>
<!--l. 676--><p class="noindent" >
 Further information can be found in the Clang release notes, at
<span 
class="ec-lmtt-10">https://releases.llvm.org/</span><span 
class="ec-lmtti-10">X</span><span 
class="ec-lmtt-10">.0.0/tools/clang/docs/ReleaseNotes.html</span>, where <span 
class="ec-lmtti-10">X</span>
spans versions 5 through 18.
</div>
     </blockquote>
<!--l. 681--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Software</span><span 
class="ec-lmbx-10">&#x00A0;interrupt</span><span 
class="ec-lmbx-10">&#x00A0;vector</span><span 
class="ec-lmbx-10">&#x00A0;tables</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2991)</span> </dt><dd 
class="description">
     <!--l. 682--><p class="noindent" >The  compiler  can  now  provide  an  interrupt  vector  table  and  dispatch  mechanism  in
     software for any device that supports interrupts but does not implement a hardware VIC
     module. This allows such devices to be programmed as if they had one vector for each
     interrupt source and so benefit from reduced interrupt latency. A software interrupt vector
                                                                               
                                                                               
     table is created when a <span 
class="ec-lmtt-10">__flags() </span>argument is used with any <span 
class="ec-lmtt-10">__interrupt() </span>specifier.</dd></dl>
<!--l. 692--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-21000"></a>Version 2.50</h4>
<!--l. 693--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;Device</span><span 
class="ec-lmbx-10">&#x00A0;Support</span> </dt><dd 
class="description">
     <!--l. 694--><p class="noindent" >Support is now available for the following PIC devices: 16F18013, 16F18014, 16F18023,
     16F18024, 18F04Q20, 18F05Q20, 18F14Q20, and 18F15Q20.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Shipped</span><span 
class="ec-lmbx-10">&#x00A0;DFPs</span> </dt><dd 
class="description">
     <!--l. 697--><p class="noindent" >The  following  are  the  PIC-specific  DFP  versions  that  ship  with  the  compiler:
     MCPxxxx_DFP  v1.7.176,  MCVxxxx_DFP  v1.5.154,  PIC10-12Fxxx_DFP  v1.7.178,
     PIC12-16Cxxx_DFP   v1.6.168,   PIC12-16F1xxx_DFP   v1.7.242,   PIC16F1xxxx_DFP
     v1.25.389,  PIC16Fxxx_DFP  v1.6.156,  PIC18Cxxx_DFP  v1.5.163,  PIC18F-J_DFP
     v1.8.164, PIC18F-K_DFP v1.13.292, PIC18F-Q_DFP v1.25.433, and PIC18Fxxxx_DFP
     v1.6.159.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Disable</span><span 
class="ec-lmbx-10">&#x00A0;assembly</span><span 
class="ec-lmbx-10">&#x00A0;warnings</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3309)</span> </dt><dd 
class="description">
     <!--l. 703--><p class="noindent" >A new PIC Assembler directive has been introduced to control warning and advisory
     messages from assembly code. The <span 
class="ec-lmtt-10">ERRORLEVEL </span>directive takes a comma-separated list
     of  arguments.  The  arguments  0,  1,  and  2  enable  all  warning  and  advisory  messages,
     disables advisory messages, and disables both advisory and warning messages, respectively.
     Individually  numbered  messages  can  be  disabled  by  prefixing  the  message  number
     argument with a negative sign. Prefixing with a positive sign will enable the message. See
     the Documentation Updates section for more information.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Disable</span><span 
class="ec-lmbx-10">&#x00A0;warnings</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3308)</span> </dt><dd 
class="description">
     <!--l. 712--><p class="noindent" >A new <span 
class="ec-lmtt-10">xc8-cc </span>driver and <span 
class="ec-lmtt-10">pic-as </span>assembler driver option can be used to enable and
     disable warning and advisory messages. The <span 
class="ec-lmtt-10">-Wno-</span><span 
class="ec-lmri-10">msg </span>form of the option disables the
     message.  The  <span 
class="ec-lmtt-10">-W</span><span 
class="ec-lmri-10">msg  </span>form  of  the  option  enables  the  indicated  message.  The  special
     message argument <span 
class="ec-lmtt-10">all </span>indicates that all messages should be enabled or disabled. See the
     Documentation Updates section for more information.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Optimization</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;subtraction</span><span 
class="ec-lmbx-10">&#x00A0;assignments</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3297)</span> </dt><dd 
class="description">
     <!--l. 719--><p class="noindent" >Projects targeting enhanced mid-range devices using optimization level <span 
class="ec-lmtt-10">-O2 </span>or less might
     see an improvement in code size and execution speed for expressions using subtraction
     assignments.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Expanded</span><span 
class="ec-lmbx-10">&#x00A0;undefined</span><span 
class="ec-lmbx-10">&#x00A0;interrupt</span><span 
class="ec-lmbx-10">&#x00A0;feature</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3170)</span> </dt><dd 
class="description">
     <!--l. 723--><p class="noindent" >Programs that target devices without a Vectored Interrupt Controller (VIC) module can
     now use the <span 
class="ec-lmtt-10">-mundefints </span>option to assign an instruction to any unassigned vectors. The
     compiler will issue a warning when this automatic assignment occurs.</dd></dl>
                                                                               
                                                                               
<!--l. 730--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-22000"></a>Version 2.49 (Functional Safety Release)</h4>
<!--l. 731--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Disabled</span><span 
class="ec-lmbx-10">&#x00A0;dongle</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3312)</span> </dt><dd 
class="description">
     <!--l. 732--><p class="noindent" >To improve compile times, the functional safety compiler installer instructs the installed
     license manager to omit the check for a dongle license. Dongle licenses are not available
     with functional safety compilers, so this does not impact on the compiler<span 
class="ts1-lmr10-">'</span>s usability.</dd></dl>
<!--l. 739--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-23000"></a>Version 2.46</h4>
<!--l. 740--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;Device</span><span 
class="ec-lmbx-10">&#x00A0;Support</span> </dt><dd 
class="description">
     <!--l. 741--><p class="noindent" >Support is now available for the following PIC devices: 16F13113, 16F13114, 16F13115,
     16F13123, 16F13124, 16F13125, 16F13143, 16F13144, 16F13145, 18F24Q24, 18F25Q24,
     18F26Q24, 18F45Q24, 18F46Q24, 18F55Q24, and 18F56Q24.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Shipped</span><span 
class="ec-lmbx-10">&#x00A0;DFPs</span> </dt><dd 
class="description">
     <!--l. 745--><p class="noindent" >The  following  are  the  PIC-specific  DFP  versions  that  ship  with  the  compiler:
     MCPxxxx_DFP  v1.7.176,  MCVxxxx_DFP  v1.5.154,  PIC10-12Fxxx_DFP  v1.7.178,
     PIC12-16Cxxx_DFP   v1.6.168,   PIC12-16F1xxx_DFP   v1.7.242,   PIC16F1xxxx_DFP
     v1.23.382,  PIC16Fxxx_DFP  v1.6.156,  PIC18Cxxx_DFP  v1.5.163,  PIC18F-J_DFP
     v1.7.159, PIC18F-K_DFP v1.13.292, PIC18F-Q_DFP v1.23.425, and PIC18Fxxxx_DFP
     v1.6.159.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Dongle</span><span 
class="ec-lmbx-10">&#x00A0;license</span><span 
class="ec-lmbx-10">&#x00A0;option</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3281)</span> </dt><dd 
class="description">
     <!--l. 751--><p class="noindent" >The compiler installer now provides an option to control whether checks are made for
     a USB dongle when the compiler operates. When not using a dongle license, ensure the
     dongle  license  option  is  disabled  when  installing  the  compiler,  as  this  might  improve
     compile times.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Hash</span><span 
class="ec-lmbx-10">&#x00A0;XOR</span><span 
class="ec-lmbx-10">&#x00A0;option</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3262)</span> </dt><dd 
class="description">
     <!--l. 756--><p class="noindent" >A new <span 
class="ec-lmtt-10">xor </span>sub-option to the <span 
class="ec-lmtt-10">-mchecksum </span>driver option has been added. This sub-option
     takes a hexadecimal argument, which may have an optional <span 
class="ec-lmtt-10">0x </span>prefix, and is XORed with
     the hash result before it is stored. It is only applied to CRC algorithm results and is
     ignored for other algorithms.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">XCLM</span><span 
class="ec-lmbx-10">&#x00A0;Upgrade</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3259)</span> </dt><dd 
class="description">
     <!--l. 762--><p class="noindent" >The XCLM license manager has been upgraded to version 3.20.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Warning</span><span 
class="ec-lmbx-10">&#x00A0;promotion</span><span 
class="ec-lmbx-10">&#x00A0;option</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3238)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 764--><p class="noindent" >A new command-line option, <span 
class="ec-lmtt-10">-W[no-]error</span>, has been added to the both the Compiler
     and PIC Assembler driver applications. This optionpromotes warning messages into errors.
     Alternate forms of the option can suppress any conversion for particular warnings. This
     option can control numbered warnings, which are produced by most compiler applications,
     as well as string-identified warnings produce by the Clang front end.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Improved</span><span 
class="ec-lmbx-10">&#x00A0;switch</span><span 
class="ec-lmbx-10">&#x00A0;processing</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3156)</span> </dt><dd 
class="description">
     <!--l. 771--><p class="noindent" >When processing <span 
class="ec-lmtt-10">switch() </span>statements with <span 
class="ec-lmtt-10">char </span>arguments and using the C99 standard,
     the Clang front end was producing output that the compiler could not properly optimize.
     This has been improved so that <span 
class="ec-lmtt-10">switch() </span>statements operating on small-typed arguments
     will produce less code.</dd></dl>
<!--l. 778--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-24000"></a>Version 2.45</h4>
<!--l. 779--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;device</span><span 
class="ec-lmbx-10">&#x00A0;support</span> </dt><dd 
class="description">
     <!--l. 780--><p class="noindent" >Support is now available for the following PIC parts: 16F17154, 16F17155, 16F17156,
     16F17174,  16F17175,  16F17176,  16F18154,  16F18155,  16F18156,  16F18174,  16F18175,
     16F18176, 18F06Q20, 18F16Q20, 18F24Q71, 18F25Q71, 18F44Q71, 18F45Q71, 18F54Q71,
     and 18F55Q71.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Universal</span><span 
class="ec-lmbx-10">&#x00A0;license</span><span 
class="ec-lmbx-10">&#x00A0;manager</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3176,</span><span 
class="ec-lmbx-10">&#x00A0;XCLM-224)</span> </dt><dd 
class="description">
     <!--l. 784--><p class="noindent" >The macOS version of the license manager used with the compiler is now universal, offering
     native support for both Intel- and M1-based machines. The Linux version of the license
     manager now requires at least version 2.25 of glibc.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Mac</span><span 
class="ec-lmbx-10">&#x00A0;universal</span><span 
class="ec-lmbx-10">&#x00A0;binaries</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3168,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-3116,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-2951,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-2693)</span> </dt><dd 
class="description">
     <!--l. 789--><p class="noindent" >The compiler binary files for macOS are now universal, offering native support for both
     Intel- and M1-based machines.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;errata</span><span 
class="ec-lmbx-10">&#x00A0;workarounds</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3148)</span> </dt><dd 
class="description">
     <!--l. 792--><p class="noindent" >By default, the compiler will now enable the <span 
class="ec-lmtt-10">BSR63 </span>errata workaround when building for
     the following devices: 18F25K83, 18F26K83, 18LF25K83, and 18LF26K83.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Stack</span><span 
class="ec-lmbx-10">&#x00A0;bound</span><span 
class="ec-lmbx-10">&#x00A0;symbols</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3145)</span> </dt><dd 
class="description">
     <!--l. 795--><p class="noindent" >New  symbols  have  been  added  whose  values  represent  the  upper  and  lower  bounds
     of  the  memory  reserved  for  the  software  data  stacks  when  either  the  hybrid  or
     reentrant  stack  models  have  been  requested.  For  the  main  stack,  these  symbols  are:
     <span 
class="ec-lmtt-10">__stack_lo </span>and <span 
class="ec-lmtt-10">__stack_hi</span>. For the interrupt stack on enhanced mid-range devices,
     they  are:  <span 
class="ec-lmtt-10">__int_stack_lo </span>and  <span 
class="ec-lmtt-10">__int_stack_hi</span>.  For  PIC18  devices,  the  symbols  for
     high-  and  low-priority  interrupt  priorities  are  respectively:  <span 
class="ec-lmtt-10">__inthi_stack_lo </span>and
     <span 
class="ec-lmtt-10">__inthi_stack_hi</span>, and <span 
class="ec-lmtt-10">__intlo_stack_lo </span>and <span 
class="ec-lmtt-10">__intlo_stack_hi</span>. These symbols are
     C accessible and can be used at runtime to ensure that the address of the stack pointer has
     not moved outside the reserved stack memory. The symbols will be automatically declared
                                                                               
                                                                               
     when you include <span 
class="ec-lmtt-10">&#x003C;xc.h&#x003E; </span>into your source. They could be used in code similar to:</dd></dl>
<!--l. 810--><p class="noindent" >
     <dl class="list1"><dt class="list">
     </dt><dd 
class="list">
     <!--l. 810--><p class="noindent" ><span 
class="ec-lmtt-10">#include</span>
     <span 
class="ec-lmtt-10">&#x003C;xc.h&#x003E;</span>
     <!--l. 813--><p class="noindent" ><span 
class="ec-lmtt-10">if(FSR1</span>
     <span 
class="ec-lmtt-10">&#x003C;</span>
     <span 
class="ec-lmtt-10">(unsigned</span>
     <span 
class="ec-lmtt-10">short)&amp;__stack_lo)</span>
     <!--l. 815--><p class="noindent" ><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmtt-10">&#x00A0;stackError();</span>
     <!--l. 817--><p class="noindent" ><span 
class="ec-lmtt-10">if(FSR1</span>
     <span 
class="ec-lmtt-10">&#x003E;=</span>
     <span 
class="ec-lmtt-10">(unsigned</span>
     <span 
class="ec-lmtt-10">short)&amp;__stack_hi)</span>
     <!--l. 819--><p class="noindent" ><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmtt-10">&#x00A0;stackError();</span><span 
class="ec-lmtt-10">&#x00A0;</span></dd></dl>
<!--l. 821--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Hexmate</span><span 
class="ec-lmbx-10">&#x00A0;comment</span><span 
class="ec-lmbx-10">&#x00A0;support</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3144)</span> </dt><dd 
class="description">
     <!--l. 822--><p class="noindent" >Hexmate now supports the presence of comments in HEX files. A comment is considered
     to be any line containing a sequence of characters that does not include a colon character,
     any sequence of characters before a colon character that starts a valid record, or any
     sequence of characters that includes a colon character that is not followed by a valid record.
     Although comments are permitted in input files, they are not generated in any output.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;NOPs</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3114)</span> </dt><dd 
class="description">
     <!--l. 830--><p class="noindent" >To accommodate those devices which require a hand-written  <span 
class="ec-lmtt-10">NOP </span>instruction encoded
     as 0x0000 in errata workarounds, the C built-in function  <span 
class="ec-lmtt-10">__nop() </span>and the assembler
     instruction <span 
class="ec-lmtt-10">NOP </span>will now use encoding 0x0000. Previously, these used the opcode 0xF000.
     The encoding for any NOP instructions added by a compiler-applied errata workarounds
     remains unchanged; however, new macros have been provided to allow the desired encoding
     of the <span 
class="ec-lmtt-10">NOP </span>instruction to be conveyed to the compiler. These are:
     <!--l. 840--><p class="noindent" ><span 
class="ec-lmtt-10">__nopf000() </span>and <span 
class="ec-lmtt-10">nopf000 </span>to ensure an encoding of 0xF000<br 
class="newline" /><span 
class="ec-lmtt-10">__nop0000() </span>and <span 
class="ec-lmtt-10">nop0000 </span>to ensure an encoding of 0x0000; and<br 
class="newline" /><span 
class="ec-lmtt-10">__nopffff() </span>and <span 
class="ec-lmtt-10">nopffff </span>to ensure an encoding of 0xFFFF
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Library</span><span 
class="ec-lmbx-10">&#x00A0;improvements</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3046)</span> </dt><dd 
class="description">
     <!--l. 846--><p class="noindent" >Code and data improvements have been made to many C99 library functions supplied
     by  the  Microchip  Unified  Standard  Library.  Improvements  were  made  to  functions
     in the <span 
class="ec-lmtt-10">&#x003C;stdio.h</span>&#x003E;, <span 
class="ec-lmtt-10">&#x003C;ctype.h</span>&#x003E;, <span 
class="ec-lmtt-10">&#x003C;time.h</span>&#x003E;, <span 
class="ec-lmtt-10">&#x003C;string.h</span>&#x003E;, <span 
class="ec-lmtt-10">&#x003C;stdlib.h</span>&#x003E;, <span 
class="ec-lmtt-10">&#x003C;math.h</span>&#x003E;, and
     <span 
class="ec-lmtt-10">&#x003C;stdint.h&#x003E; </span>libraries.</dd></dl>
<!--l. 853--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-25000"></a>Version 2.41</h4>
                                                                               
                                                                               
<!--l. 855--><p class="noindent" ><span 
class="ec-lmbx-10">New device support (XC8-2954, XC8-2734) </span>Support is now available for the following PIC
parts: 18F26Q71, 18F46Q71, and 18F56Q71.
<!--l. 858--><p class="noindent" ><span 
class="ec-lmbx-10">Smarter smart IO (XC8-2986) </span>Improvements have been made to the Smart IO functionality.
These factor common code in field width and precision handling, resulting in code and data savings in
the generated IO functions, as well as increases in their execution speed.
<!--l. 863--><p class="noindent" ><span 
class="ec-lmbx-10">Time type change (XC8-2982) </span>The C99 standard library type, <span 
class="ec-lmtt-10">time_t</span><span 
class="ec-lmtt-10">&#x00A0;</span>has been changed from a
<span 
class="ec-lmtt-10">long</span><span 
class="ec-lmtt-10">&#x00A0;long </span>to an <span 
class="ec-lmtt-10">unsigned</span><span 
class="ec-lmtt-10">&#x00A0;long </span>type, which gives code-size improvements in some time-related
functions, such as <span 
class="ec-lmtt-10">mktime()</span>.
<!--l. 868--><p class="noindent" ><span 
class="ec-lmbx-10">Update to XCLM (XC8-2944) </span>The license manager used with the compiler has been updated and
is now more responsive when checking the compiler<span 
class="ts1-lmr10-">'</span>s license details.
<!--l. 872--><p class="noindent" ><span 
class="ec-lmbx-10">C99 support for pedants (XC8-2917) </span>The <span 
class="ec-lmtt-10">-Wpedantic </span>option has been extended to support
projects conforming to the C99 language standard. It will warn when forbidden language extensions
have been used in a project.
<!--l. 877--><p class="noindent" ><span 
class="ec-lmbx-10">Smaller printing functions (XC8-2960) </span>The size of auto variables used in integral
conversions for the C99 standard library formatted printing functions has been optimised to suit
the values these function are expected to print. This will reduce the memory footprint of
these functions and improve their performance when programs print only smaller integral
types.
<!--l. 884--><p class="noindent" ><span 
class="ec-lmbx-10">OTP register indication (XC8-2825) </span>Any configuration or user-id registers that are one-time
programmable (OTP) will be indicated as such in the device-specific HTML documentation for
relevant devices. Check the <span 
class="ec-lmtt-10">pic_chipinfo.html </span>and <span 
class="ec-lmtt-10">pic18_chipinfo.html </span>files, both located in the
<span 
class="ec-lmtt-10">docs </span>directory under your compiler&#8217; installation directory.
<!--l. 891--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-26000"></a>Version 2.40</h4>
<!--l. 892--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;device</span><span 
class="ec-lmbx-10">&#x00A0;support</span> </dt><dd 
class="description">
     <!--l. 893--><p class="noindent" >Support is now available for the following PIC parts: 16F17114, 16F17115, 16F17124,
     16F17125,  16F17126,  16F17144,  16F17145,  16F17146,  16F18015,  16F18025,  16F18026,
     16F18044,  16F18045,  16F18046,  16F18054,  16F18055,  16F18056,  16F18074,  16F18075,
     16F18076, 16F18114, 16F18115, 16F18124, 16F18125, 16F18126, 16F18144, 16F18145, and
     16F18146.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Formated</span><span 
class="ec-lmbx-10">&#x00A0;IO</span><span 
class="ec-lmbx-10">&#x00A0;optimization</span> </dt><dd 
class="description">
     <!--l. 899--><p class="noindent" >Many improvements have been made to the vfprintf-related code, which forms the basis
     to most of the formatted output functions. These changes allow for finer granularity of
     customization, reducing the inclusion of redundant code.&#x00A0; The usage of the <span 
class="ec-lmtt-10">strcmp()</span>
     function in the runtime detection of format conversion specifiers has also been simplified
     and in some cases eliminated, further improving code efficiency.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Faster</span><span 
class="ec-lmbx-10">&#x00A0;compilation</span><span 
class="ec-lmbx-10">&#x00A0;speed</span> </dt><dd 
class="description">
     <!--l. 906--><p class="noindent" >Compilation speed improvements have been made that will be particularly noticeable
     when  projects  use  a  large  number  of  string  literals.  This  change  might  also  prevent
     out-of-memory errors from occurring on the machine hosting the compiler.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Simplified</span><span 
class="ec-lmbx-10">&#x00A0;atexit</span><span 
class="ec-lmbx-10">&#x00A0;function</span> </dt><dd 
class="description">
     <!--l. 910--><p class="noindent" >The C99 standard library function <span 
class="ec-lmtt-10">_atexit() </span>has been greatly simplified to reduce code
     size.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Optimal</span><span 
class="ec-lmbx-10">&#x00A0;selection</span> </dt><dd 
class="description">
     <!--l. 912--><p class="noindent" >of move instruction When building projects that target PIC18 devices that have the <span 
class="ec-lmtt-10">movffl</span>
     instruction, the compiler may have used this larger instruction in places where the smaller
     <span 
class="ec-lmtt-10">movff </span>instruction could have been used.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">MPASM-compatible</span><span 
class="ec-lmbx-10">&#x00A0;operand</span><span 
class="ec-lmbx-10">&#x00A0;masking</span> </dt><dd 
class="description">
     <!--l. 916--><p class="noindent" >The PIC Assembler can now be put into a mode where it will automatically truncate all
     instructions operands, similar to how they are masked when using MPASM. The mode is
     controlled by a new linker option, which can be specified from the compiler driver, using
     <span 
class="ec-lmtt-10">-Wl,--fixupoverflow=error|warn|lstwarn|ignore</span>. The <span 
class="ec-lmtt-10">ignore </span>setting will have the
     PIC Assembler closely mimic the behaviour of MPASM, truncating all operands to suite
     the instruction silently. The <span 
class="ec-lmtt-10">warn</span>, <span 
class="ec-lmtt-10">lstwarn </span>or both these settings, colon separated, will
     have the linker truncate operand values to suite the instruction, but also issue a warning on
     the console, in the assembler list file, or in both, respectively, whenever truncation occurs,
     so that situations where truncation was not expected can be investigated. Truncation will
     occur for all operands of all instructions to a size suitable for the instruction.</dd></dl>
<!--l. 932--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-27000"></a>Version 2.39 (Functional Safety Release)</h4>
<!--l. 933--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Network</span><span 
class="ec-lmbx-10">&#x00A0;Server</span><span 
class="ec-lmbx-10">&#x00A0;License</span> </dt><dd 
class="description">
     <!--l. 934--><p class="noindent" >This release of the MPLAB XC8 Functional Safety Compiler supports the Network Server
     License.</dd></dl>
<!--l. 938--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-28000"></a>Version 2.36</h4>
<!--l. 940--><p class="noindent" >None.
<!--l. 942--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-29000"></a>Version 2.35</h4>
<!--l. 943--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;device</span><span 
class="ec-lmbx-10">&#x00A0;support</span> </dt><dd 
class="description">
     <!--l. 944--><p class="noindent" >Support is available for the following PIC parts: 16F15254, 16F15255, 16F15256, 16F15274,
     16F15275, and 16F15276.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Warning</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;Block</span><span 
class="ec-lmbx-10">&#x00A0;Table</span><span 
class="ec-lmbx-10">&#x00A0;Read</span><span 
class="ec-lmbx-10">&#x00A0;Protection</span> </dt><dd 
class="description">
     <!--l. 946--><p class="noindent" >The compiler will now issue a warning when it detects that any of the Block Table Read
     Protection configuration bits have been enabled. Enabling these bits might adversely affect
     variable initialization and reading constants from program memory.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Warning</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;enabling</span><span 
class="ec-lmbx-10">&#x00A0;Storage</span><span 
class="ec-lmbx-10">&#x00A0;Area</span><span 
class="ec-lmbx-10">&#x00A0;Flash</span> </dt><dd 
class="description">
     <!--l. 951--><p class="noindent" >The compiler will now issue a warning when it detects that the Storage Area Flash has
     been enabled via the relevant configuration bits. With this area enabled, the user must
     ensure this memory is not used for program code, typically done by reserving program
     memory when building the project.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Constant</span><span 
class="ec-lmbx-10">&#x00A0;caching</span> </dt><dd 
class="description">
     <!--l. 956--><p class="noindent" >The <span 
class="ec-lmtt-10">-fcacheconst=[on|off|auto] </span>PRO-mode option enables new optimizations that can
     automatically cache objects qualified <span 
class="ec-lmtt-10">const </span>in any unused data memory, accessing them
     from this location rather than from program memory.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Smarter</span><span 
class="ec-lmbx-10">&#x00A0;IO</span> </dt><dd 
class="description">
     <!--l. 960--><p class="noindent" >The compiler will now analyze program code for calls to the scanf family of functions in
     the same way it has done for the printf family of functions, customising the available scan
     functions<span 
class="ts1-lmr10-">' </span>features so that it is optimal for how it will be used in the program. This feature
     is fully automatic.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Smart</span><span 
class="ec-lmbx-10">&#x00A0;IO</span><span 
class="ec-lmbx-10">&#x00A0;assistance</span><span 
class="ec-lmbx-10">&#x00A0;option</span> </dt><dd 
class="description">
     <!--l. 965--><p class="noindent" >When analyzing calls to smart IO functions (such as <span 
class="ec-lmtt-10">printf() </span>or <span 
class="ec-lmtt-10">scanf()</span>), the compiler
     cannot  always  determine  from  the  format  string  or  infer  from  the  arguments  those
     conversion specifiers required by the call. Previously, the compiler would always make
     no assumptions and ensure that fully functional IO functions were linked into the final
     program  image.  A  new  <span 
class="ec-lmtt-10">-msmart-io-format=</span><span 
class="ec-lmri-10">fmt  </span>option  has  been  added  so  that  the
     compiler can instead be informed by the user of the conversion specifiers used by smart IO
     functions whose usage is ambiguous, preventing excessively long IO routines from being
     linked.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Dynamic</span><span 
class="ec-lmbx-10">&#x00A0;memory</span><span 
class="ec-lmbx-10">&#x00A0;allocation</span> </dt><dd 
class="description">
     <!--l. 975--><p class="noindent" >The  compiler  now  supports  dynamic  memory  allocation  onto  a  heap  via  the  usual
     <span 
class="ec-lmtt-10">&#x003C;stdlib.h&#x003E; </span>functions,  such  as  <span 
class="ec-lmtt-10">malloc()</span>.  Memory  can  be  released,  using  the  <span 
class="ec-lmtt-10">free()</span>
     function, but the management of unused memory is rudimentary. A new <span 
class="ec-lmtt-10">-mheap </span>option
     can be used to reserve memory for the heap. Only use dynamic memory allocation when
     required, and then avoid unnecessary allocation and freeing of memory blocks.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bank</span><span 
class="ec-lmbx-10">&#x00A0;selection</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;indirect</span><span 
class="ec-lmbx-10">&#x00A0;access</span> </dt><dd 
class="description">
     <!--l. 982--><p class="noindent" >The <span 
class="ec-lmtt-10">BANKISEL </span>assembler directive is now available for mid-range and Baseline devices.
     This directive will set the IRP bit (mid-range) or STATUS bits (Baseline) appropriately
     for a given symbol argument so that indirect access of that object can be made. For all
     other devices, this directive will be ignored.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Generation</span><span 
class="ec-lmbx-10">&#x00A0;4</span><span 
class="ec-lmbx-10">&#x00A0;tool</span><span 
class="ec-lmbx-10">&#x00A0;support</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 988--><p class="noindent" >The compiler now supports the selection of all the generation 4 debug tools (e.g. MPLAB
     ICD4, PICkit 4, and SNAP) through the <span 
class="ec-lmtt-10">-mdebugger </span>option. The corresponding predefined
     macros are indicated in the User&#8217;s Guide.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">String</span><span 
class="ec-lmbx-10">&#x00A0;support</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;initialization</span><span 
class="ec-lmbx-10">&#x00A0;directives</span> </dt><dd 
class="description">
     <!--l. 992--><p class="noindent" >The assembler will now accept a string argument to the <span 
class="ec-lmtt-10">DB</span>, <span 
class="ec-lmtt-10">DW</span>, and <span 
class="ec-lmtt-10">DDW </span>directives. The
     string can be specified with either single or double quote characters with the backslash
     used to escape special characters, for example:</dd></dl>
<!--l. 998--><p class="noindent" >
     <dl class="list1"><dt class="list">
     </dt><dd 
class="list">
     <!--l. 998--><p class="noindent" ><span 
class="ec-lmtt-10">DB</span>
     <span 
class="ts1-lmtt10-">'</span><span 
class="ec-lmtt-10">directive\</span><span 
class="ts1-lmtt10-">'</span><span 
class="ec-lmtt-10">s</span>
     <span 
class="ec-lmtt-10">usage</span><span 
class="ts1-lmtt10-">'</span>
     <!--l. 1001--><p class="noindent" ><span 
class="ec-lmtt-10">DW</span>
     <span 
class="ec-lmtt-10">"a</span>
     <span 
class="ec-lmtt-10">terminated</span>
     <span 
class="ec-lmtt-10">string",0</span></dd></dl>
<!--l. 1003--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">setjmp/longjmp</span><span 
class="ec-lmbx-10">&#x00A0;support</span> </dt><dd 
class="description">
     <!--l. 1004--><p class="noindent" >The  C90  and  C99  library  functions  <span 
class="ec-lmtt-10">setjmp() </span>and  <span 
class="ec-lmtt-10">longjmp() </span>are  now  available  for
     enhanced mid-range devices. PIC18 devices have had support for these functions in the
     past, but due to device constraints, the functions are still not implemented for Baseline
     and other mid-range devices.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">CONFIG</span><span 
class="ec-lmbx-10">&#x00A0;assembler</span><span 
class="ec-lmbx-10">&#x00A0;examples</span> </dt><dd 
class="description">
     <!--l. 1009--><p class="noindent" >The  chipinfo  HTML  files  have  been  updated  to  show  example  usage  of  the  <span 
class="ec-lmtt-10">CONFIG</span>
     assembler directives used with the PIC Assembler to set the device configuration bits.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Wider</span><span 
class="ec-lmbx-10">&#x00A0;use</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;reverse-word</span><span 
class="ec-lmbx-10">&#x00A0;hashes</span> </dt><dd 
class="description">
     <!--l. 1012--><p class="noindent" >The Hexmate reverse-word processing hash calculation feature can now be applied to
     Fletcher  algorithms.  This  feature  was  previously  applicable  to  only  CRC  and  SHA
     algorithms. It has no affect on the additive or subtractive algorithms.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Final</span><span 
class="ec-lmbx-10">&#x00A0;XOR</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;Hexmate</span><span 
class="ec-lmbx-10">&#x00A0;hashes</span> </dt><dd 
class="description">
     <!--l. 1016--><p class="noindent" >Hexmate can now be asked to perform an XOR of a hash result with a specified value.
     Use <span 
class="ec-lmtt-10">o </span>or <span 
class="ec-lmtt-10">O </span>followed by the value as an additional argument to Hexmate<span 
class="ts1-lmr10-">'</span>s <span 
class="ec-lmtt-10">-CK </span>option.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">I16HEX</span><span 
class="ec-lmbx-10">&#x00A0;file</span><span 
class="ec-lmbx-10">&#x00A0;support</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;Hexmate</span> </dt><dd 
class="description">
     <!--l. 1020--><p class="noindent" >Hexmate has been extended to read type 2 records, as well as a new <span 
class="ec-lmtt-10">--ssa </span>option to
     specify the Start Segment Address used by type 3 records. INHX16 files can be written by
     using the new <span 
class="ec-lmtt-10">inhx16 </span>argument to the <span 
class="ec-lmtt-10">--format </span>option.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Hexmate</span><span 
class="ec-lmbx-10">&#x00A0;II</span> </dt><dd 
class="description">
     <!--l. 1025--><p class="noindent" >The Hexmate application shipped with the compiler is now built from a new code base.
     Although the application<span 
class="ts1-lmr10-">'</span>s features and the options that drive it are mostly identical to
     those in the previous incarnation, the parsing of its options is much improved. See also
     <a 
href="#x1-400004">Migration Issues<!--tex4ht:ref: sec:Migration-Issues --></a>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Microchip</span><span 
class="ec-lmbx-10">&#x00A0;Unified</span><span 
class="ec-lmbx-10">&#x00A0;Standard</span><span 
class="ec-lmbx-10">&#x00A0;Libraries</span> </dt><dd 
class="description">
     <!--l. 1030--><p class="noindent" >All MPLAB XC compilers will share a Microchip Unified Standard Library. The MPLAB
     XC8 compiler has shipped with this library for several versions, but with this release,
     the available functions have been expanded and the operation of some functions has been
     standardized. The <span 
class="ec-lmri-10">MPLAB</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">XC8 C Compiler User&#8217;s Guide for PIC</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">MCU  </span>no longer
     includes the documentation for these standard functions. This information can now be
     found  in  the  <span 
class="ec-lmri-10">Microchip Unified Standard Library Reference Guide</span>,  included  with  this
     release.</dd></dl>
<!--l. 1041--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-30000"></a>Version 2.32</h4>
<!--l. 1042--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Stack</span><span 
class="ec-lmbx-10">&#x00A0;Guidance</span> </dt><dd 
class="description">
     <!--l. 1043--><p class="noindent" >Available with a PRO compiler license, the compiler<span 
class="ts1-lmr10-">'</span>s new stack guidance feature can
     be used to estimate the maximum depth of the stacks used by a program. It constructs
     and analyzes the program<span 
class="ts1-lmr10-">'</span>s call graph, determines the stack usage of each function, and
     produces a report, from which the depth of the program<span 
class="ts1-lmr10-">'</span>s stacks can be inferred.<br 
class="newline" />This feature is enabled through the <span 
class="ec-lmtt-10">-mchp-stack-usage </span>command-line option. A summary
     of stack usage is printed after execution. A detailed stack report is available in the map
     file, which can be requested in the usual way.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;device</span><span 
class="ec-lmbx-10">&#x00A0;support</span> </dt><dd 
class="description">
     <!--l. 1053--><p class="noindent" >Support  is  available  for  the  following  PIC  parts:  16F15245,  16F15225,  18F04Q41,
     18F04Q40, 18F15Q41, 18F15Q40, 18F05Q40, 18F05Q41, 18F14Q40, and 18F14Q41.</dd></dl>
<!--l. 1058--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-31000"></a>Version 2.31</h4>
<!--l. 1059--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;device</span><span 
class="ec-lmbx-10">&#x00A0;support</span> </dt><dd 
class="description">
     <!--l. 1060--><p class="noindent" >Support is available for the following PIC parts: 18F16Q40, 18F06Q40, 18F16Q41, and
     18F06Q41.</dd></dl>
                                                                               
                                                                               
<!--l. 1064--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-32000"></a>Version 2.30</h4>
<!--l. 1065--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Hexmate</span><span 
class="ec-lmbx-10">&#x00A0;hash</span><span 
class="ec-lmbx-10">&#x00A0;calculations</span> </dt><dd 
class="description">
     <!--l. 1066--><p class="noindent" >Hexmate has two new hash-calculation features. Bytes in the HEX file can be skipped
     for the purposes of calculating a hash value by using a new <span 
class="ts1-lmr10-">'</span><span 
class="ec-lmtt-10">s</span><span 
class="ts1-lmr10-">' </span>argument to Hexmate<span 
class="ts1-lmr10-">'</span>s
     <span 
class="ec-lmtt-10">-CK </span>option. This would be useful when there is data in the Hex file that is not present
     on the device, such as padding bytes added by the compiler. Another extension to the
     <span 
class="ec-lmtt-10">-CK </span>option<span 
class="ts1-lmr10-">'</span>s <span 
class="ts1-lmr10-">'</span><span 
class="ec-lmtt-10">t</span><span 
class="ts1-lmr10-">' </span>argument allows the trailing code sequence to be appended to a specified
     number of bytes in the hash, not just to each byte. This would be useful where the target
     device cannot read every byte of program memory and the hash value has to be padded.</dd></dl>
<!--l. 1079--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-33000"></a>Version 2.29 (Functional Safety Release)</h4>
<!--l. 1080--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Header</span><span 
class="ec-lmbx-10">&#x00A0;file</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;compiler</span><span 
class="ec-lmbx-10">&#x00A0;built-ins</span> </dt><dd 
class="description">
     <!--l. 1081--><p class="noindent" >To ensure that the compiler can conform to language specifications such as MISRA, a
     new  <span 
class="ec-lmtt-10">&#x003C;builtins.h&#x003E; </span>header file, which is automatically included by  <span 
class="ec-lmtt-10">&#x003C;xc.h</span>&#x003E;, has been
     added. This header contains the prototypes for all in-built functions, such as <span 
class="ec-lmtt-10">__nop()</span>
     and <span 
class="ec-lmtt-10">_delay()</span>. Some built-ins may not be MISRA compliant; these can be omitted by
     adding the define <span 
class="ec-lmtt-10">__XC_STRICT_MISRA </span>to the compiler command line. The built-ins and
     their declarations have been updated to use fixed-width types.</dd></dl>
<!--l. 1091--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-34000"></a>Version 2.20</h4>
<!--l. 1092--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;device</span><span 
class="ec-lmbx-10">&#x00A0;support</span> </dt><dd 
class="description">
     <!--l. 1093--><p class="noindent" >Support  is  available  for  the  following  PIC  parts:  16F15213,  16F15214,  16F15223,
     16F15224, 16F15243,16F15244, 18F25Q43, 18F45Q43, 18F55Q43, 18F26Q43, 18F46Q43,
     and  18F56Q43.  The  following  device  names  may  now  be  additionally  used  for
     existing devices: RFPIC12C509AF, RFPIC12C509AG, RFPIC12F675F, RFPIC12F675H,
     RFPIC12F675K.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Complete</span><span 
class="ec-lmbx-10">&#x00A0;64-bit</span><span 
class="ec-lmbx-10">&#x00A0;application</span><span 
class="ec-lmbx-10">&#x00A0;set</span> </dt><dd 
class="description">
     <!--l. 1098--><p class="noindent" >All applications for all platforms are now 64-bit applications. This covers all compiler and
     utility applications and on the Windows and Linux platforms.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Updated</span><span 
class="ec-lmbx-10">&#x00A0;XCLM</span> </dt><dd 
class="description">
     <!--l. 1101--><p class="noindent" >The license manage utilities have been updated to version 2.28. This version fixes bugs
     and is a 64-bit build.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">In-built</span><span 
class="ec-lmbx-10">&#x00A0;messages</span> </dt><dd 
class="description">
     <!--l. 1103--><p class="noindent" >The compiler warnings and error messages, which are contained in a separate file, have
     now also been built into most compiler applications and will be used when the message
     description  file  cannot  be  found.  This  will  mostly  benefit  the  use  of  applications  like
     Hexmate, which are often run independently to the compiler driver.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;byte</span><span 
class="ec-lmbx-10">&#x00A0;ordering</span><span 
class="ec-lmbx-10">&#x00A0;option</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;Hexmate</span><span 
class="ec-lmbx-10">&#x00A0;hash</span><span 
class="ec-lmbx-10">&#x00A0;calculations</span> </dt><dd 
class="description">
     <!--l. 1108--><p class="noindent" >A new <span 
class="ec-lmtt-10">revword=</span><span 
class="ec-lmri-10">n </span>suboption to the compiler driver<span 
class="ts1-lmr10-">'</span>s <span 
class="ec-lmtt-10">-mchecksum </span>option requests Hexmate
     to read bytes in reverse order within <span 
class="ec-lmri-10">n</span>-byte words in the hex file for the purposes of
     calculating a hash, such as a checksum or CRC. This allows Hexmate to produce a result
     that will match that produced by devices that use the Scanner module to stream data
     to the CRC module in order to produce a CRC at runtime. Currently only word widths
     of 2 are supported.  (Using the suboption but specifying <span 
class="ec-lmri-10">n  </span>as 0 will also disable this
     reverse feature). If you are using Hexmate directly, use the corresponding <span 
class="ec-lmtt-10">r</span><span 
class="ec-lmri-10">n </span>suboption in
     Hexmate<span 
class="ts1-lmr10-">'</span>s <span 
class="ec-lmtt-10">-CK </span>option.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">SHA-ZAM</span> </dt><dd 
class="description">
     <!--l. 1120--><p class="noindent" >The  SHA256  algorithm  has  been  added  to  Hexmate<span 
class="ts1-lmr10-">'</span>s  suite  of  hash  algorithms.  It  is
     accessible as algorithm #10 from Hexmate<span 
class="ts1-lmr10-">'</span>s <span 
class="ec-lmtt-10">-CK </span>option, or from the compiler<span 
class="ts1-lmr10-">'</span>s <span 
class="ec-lmtt-10">-mchecksum</span>
     option.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Type</span><span 
class="ec-lmbx-10">&#x00A0;3</span><span 
class="ec-lmbx-10">&#x00A0;HEX</span><span 
class="ec-lmbx-10">&#x00A0;records</span> </dt><dd 
class="description">
     <!--l. 1124--><p class="noindent" >Hexmate now processes type 3 records in HEX files, which might be produced when writing
     bootloaders for 8-bit AVR devices. These records are output verbatim in the final HEX
     file. A warning will be produced if more than one type 3 record is encountered and the
     record data is not consistent.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Replacing</span><span 
class="ec-lmbx-10">&#x00A0;compiler-generated</span><span 
class="ec-lmbx-10">&#x00A0;printf</span><span 
class="ec-lmbx-10">&#x00A0;routines</span> </dt><dd 
class="description">
     <!--l. 1129--><p class="noindent" >Code for the printf family of functions is generated with each build by the compiler, based
     on how those functions were used in your source code. Previously, it has not been possible
     to use your own versions of these functions, but the compiler now places the generated
     printf code into a temporary library, so that the usual library override features of the
     linker can be used. Any function defined by your code and whose name matches that of a
     printf-family function will be used in preference to the compiler-generated library routine.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">SHA</span><span 
class="ec-lmbx-10">&#x00A0;summary</span> </dt><dd 
class="description">
     <!--l. 1138--><p class="noindent" >The memory summary option <span 
class="ec-lmtt-10">sha256 </span>is now available. It works in the same way as the
     existing <span 
class="ec-lmtt-10">sha1 </span>option, except it uses the SHA256 algorithm when creating a hash of the
     HEX file.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Movff</span><span 
class="ec-lmbx-10">&#x00A0;errata</span><span 
class="ec-lmbx-10">&#x00A0;workaround</span> </dt><dd 
class="description">
     <!--l. 1142--><p class="noindent" >The PIC18(L)F27/47/57K42 family of devices in silicon revisions A1, A3 suffer from a
     fault triggered when the <span 
class="ec-lmtt-10">movff </span>instruction is used while BSR is set to 63. The compiler can
     now employ work-arounds (via the <span 
class="ec-lmtt-10">-merrata </span>option) to avoid this issue when compiling
     C code. It will also attempt to detect potential issues in hand-written assembly and issue
     a warning.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Multi-content</span><span 
class="ec-lmbx-10">&#x00A0;library</span><span 
class="ec-lmbx-10">&#x00A0;archives</span> </dt><dd 
class="description">
     <!--l. 1148--><p class="noindent" >Library archive files (<span 
class="ec-lmtt-10">.a </span>extension) may now contain any mix of p-code (<span 
class="ec-lmtt-10">.p1</span>) or assembler
     object (<span 
class="ec-lmtt-10">.o</span>) modules. Previously, an archive could contain modules of only one type.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Exclusion</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;AVR</span><span 
class="ec-lmbx-10">&#x00A0;ASM</span> </dt><dd 
class="description">
     <!--l. 1152--><p class="noindent" >The AVR ASM assembler for 8-bit AVR devices is no longer shipped as part of this
     compiler distribution.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;stand-alone</span><span 
class="ec-lmbx-10">&#x00A0;assembler</span> </dt><dd 
class="description">
     <!--l. 1154--><p class="noindent" >The MPASM assembler for 8-bit PIC devices is no longer supported and is not shipped as part of
     this compiler distribution. In its place is the new MPLAB XC8 PIC Assembler (PIC Assembler),
     which is based on the assembler application used by the XC8 compiler package and which allows
     assembly-only projects to be built. The PIC Assembler is not code compatible with MPASM,
     although some MPASM features have been added to it to ease migration of MPASM source code,
     should that be necessary. It is recommended that you continue to use MPASM for legacy
     assembly projects, but that new projects be written for the PIC Assembler. A new user&#8217;s guide
     and example guide for embedded engineers are now available and are shipped with
     this distribution. A migration guide is available to assist with migration to the PIC
     Assembler for projects that are still being actively developed and might need to use
     future devices or assembler features. The following changes are related to this new
     assembler.
         <dl class="description"><dt class="description">
     <span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;assembler</span><span 
class="ec-lmbx-10">&#x00A0;command-line</span><span 
class="ec-lmbx-10">&#x00A0;driver</span> </dt><dd 
class="description">
         <!--l. 1170--><p class="noindent" >A new assembler driver, <span 
class="ec-lmtt-10">pic-as</span>, is bundled with this distribution in the <span 
class="ec-lmtt-10">pic-as/bin</span>
         directory  and  can  be  invoked  to  perform  all  aspects  of  the  build,  including
         preprocessing, assembly, and link steps. Its use is the recommended way to invoke
         the assembler, as it hides the complexity of all the internal applications and provides
         an interface consistent with the <span 
class="ec-lmtt-10">xc8-cc</span>, the XC8 C compiler command-line driver.
         Assembly-only projects can be created in the MPLAB X IDE, which will then us the
         <span 
class="ec-lmtt-10">pic-as </span>driver when building.
         </dd><dt class="description">
     <span 
class="ec-lmbx-10">PIC18</span><span 
class="ec-lmbx-10">&#x00A0;extended</span><span 
class="ec-lmbx-10">&#x00A0;instruction</span><span 
class="ec-lmbx-10">&#x00A0;set</span><span 
class="ec-lmbx-10">&#x00A0;support</span> </dt><dd 
class="description">
         <!--l. 1179--><p class="noindent" >The assembler supports the extended PIC18 instruction set. Assembly-only projects
         can  enable  the  extended  instruction  set  (using  the  <span 
class="ec-lmtt-10">XINST </span>configuration  bit)  and
         be  written  for  this  mode.  Note  that  although  the  assembler  application  invoked
         by  PIC-AS  is  the  same  as  that  invoked  by  the  MPLAB  XC8  C  compiler,  the
         code generators in the compiler still do not support the extended instruction set
         and produce code that will only execute correctly on devices running the standard
         instruction set.
         </dd><dt class="description">
     <span 
class="ec-lmbx-10">Specifying</span><span 
class="ec-lmbx-10">&#x00A0;configuration</span><span 
class="ec-lmbx-10">&#x00A0;bits</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;assembler</span><span 
class="ec-lmbx-10">&#x00A0;code</span> </dt><dd 
class="description">
         <!--l. 1187--><p class="noindent" >It is now possible to specify a device<span 
class="ts1-lmr10-">'</span>s configuration bit settings in assembly code
         using a new <span 
class="ec-lmtt-10">CONFIG </span>assembler directive. The arguments to this directive are the same
         as those to the <span 
class="ec-lmtt-10">#pragma</span><span 
class="ec-lmtt-10">&#x00A0;config </span>directive, which is still usable in C source code, and
         consist of setting/value pairs. The MPLAB X IDE can assist with the generation of
         code that can be copied into your assembly source.
         </dd><dt class="description">
                                                                               
                                                                               
     <span 
class="ec-lmbx-10">Expanded</span><span 
class="ec-lmbx-10">&#x00A0;instruction</span><span 
class="ec-lmbx-10">&#x00A0;syntax</span> </dt><dd 
class="description">
         <!--l. 1194--><p class="noindent" >The use of the <span 
class="ec-lmtt-10">,0 </span>and <span 
class="ec-lmtt-10">,1 </span>operands with many PIC instructions is now permitted.
         These can be used to indicate the destination with file register instructions, the use
         of the access bank with PIC18 file register instructions, and the call/return mode
         with <span 
class="ec-lmtt-10">call</span>, <span 
class="ec-lmtt-10">return</span>, and <span 
class="ec-lmtt-10">retfie </span>PIC18 instructions. The previously-used and more
         readable operands are still available, but you should not mix the style of operand in
         a single instruction.
         </dd><dt class="description">
     <span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;assembler</span><span 
class="ec-lmbx-10">&#x00A0;directives</span> </dt><dd 
class="description">
         <!--l. 1202--><p class="noindent" >The <span 
class="ec-lmtt-10">MESSG</span>, <span 
class="ec-lmtt-10">ERROR</span>, and <span 
class="ec-lmtt-10">RADIX </span>directives have been added to the assembler. Their use
         and function are equivalent to their namesakes in the MPASM assembler.
         </dd><dt class="description">
     <span 
class="ec-lmbx-10">Provided</span><span 
class="ec-lmbx-10">&#x00A0;psect</span><span 
class="ec-lmbx-10">&#x00A0;and</span><span 
class="ec-lmbx-10">&#x00A0;class</span><span 
class="ec-lmbx-10">&#x00A0;definitions</span> </dt><dd 
class="description">
         <!--l. 1205--><p class="noindent" >As well as SFR and other device-specific information, the assembler will provide psect
         (section) definitions as well as linker classes when <span 
class="ec-lmtt-10">&#x003C;xc.inc&#x003E; </span>has been included. The
         names of the psect are related to the directives used by MPASM that place content
         into similar sections. For example the <span 
class="ec-lmtt-10">PSECT</span><span 
class="ec-lmtt-10">&#x00A0;code </span>directive would act in a similar
         way to the <span 
class="ec-lmtt-10">CODE </span>directive used with MPASM.
         </dd><dt class="description">
     <span 
class="ec-lmbx-10">Call</span><span 
class="ec-lmbx-10">&#x00A0;graph</span><span 
class="ec-lmbx-10">&#x00A0;options</span> </dt><dd 
class="description">
         <!--l. 1212--><p class="noindent" >The  pic-as  driver  option  <span 
class="ec-lmtt-10">-mcallgraph=</span><span 
class="ec-lmri-10">style  </span>has  been  implemented  to  allow  the
         selection of the style of call graph printed in the map file, which might be useful if
         you use a compiled stack in assembly projects. The allowable styles are: <span 
class="ec-lmtt-10">none</span>, <span 
class="ec-lmtt-10">crit</span>
         (critical paths only), <span 
class="ec-lmtt-10">std</span>, or <span 
class="ec-lmtt-10">full</span>.</dd></dl>
     </dd></dl>
<!--l. 1220--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-35000"></a>Version 2.19 (Functional Safety Release)</h4>
<!--l. 1222--><p class="noindent" >None.
<!--l. 1224--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-36000"></a>Version 2.10</h4>
<!--l. 1225--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Code</span><span 
class="ec-lmbx-10">&#x00A0;Coverage</span> </dt><dd 
class="description">
     <!--l. 1226--><p class="noindent" >This release includes a code coverage feature that facilitates analyzis of the extent to
     which a project&#8217;s source code has been executed. Use the option <span 
class="ec-lmtt-10">-mcodecov=ram </span>to enable
     it. After execution of the program on your hardware, code coverage information will be
     collated in the device, and this can be transferred to and displayed by the MPLAB X IDE
     via a code coverage plugin. See the IDE documentation for information on this plugin can
     be obtained.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Expanded</span><span 
class="ec-lmbx-10">&#x00A0;interrupt</span><span 
class="ec-lmbx-10">&#x00A0;arguments</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 1233--><p class="noindent" >The following keywords may now be used as arguments to the <span 
class="ec-lmtt-10">__interrupt() </span>specifier:
     <span 
class="ec-lmtt-10">__irq</span>, <span 
class="ec-lmtt-10">__base</span>, <span 
class="ec-lmtt-10">__default</span>, <span 
class="ec-lmtt-10">__low_priority </span>and <span 
class="ec-lmtt-10">__high_priority</span>. The non-underscored
     versions of these keywords are still valid.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;device</span><span 
class="ec-lmbx-10">&#x00A0;support</span> </dt><dd 
class="description">
     <!--l. 1238--><p class="noindent" >Support  is  available  for  the  following  PIC  parts:  18F57Q43,  18F47Q43,  18F27Q43,
     18F57Q83,   18F56Q83,   18F47Q83,   18F46Q83,   18F27Q83,   18F26Q83,   18F57Q84,
     18F56Q84, 18F47Q84, 18F46Q84, 18F27Q84, and 18F26Q84.</dd></dl>
<!--l. 1244--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-37000"></a>Version 2.05</h4>
<!--l. 1245--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">More</span><span 
class="ec-lmbx-10">&#x00A0;bits</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;your</span><span 
class="ec-lmbx-10">&#x00A0;buck</span> </dt><dd 
class="description">
     <!--l. 1246--><p class="noindent" >The macOS version of this compiler and license manager is now a 64-bit application. This
     will ensure that the compiler will install and run without warnings on recent versions of
     macOS.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Less</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;no</span><span 
class="ec-lmbx-10">&#x00A0;bucks</span> </dt><dd 
class="description">
     <!--l. 1250--><p class="noindent" >Unlicensed (Free) versions of this compiler now allow optimizations up to and including
     level 2. This will permit a similar, although not identical, output to what was previously
     possible using a Standard license. Virtually all code generation optimizations are now
     enabled regardless of the license type, but most assembler optimizations still require a
     PRO license for them to be enabled. The <span 
class="ec-lmtt-10">--mode </span>option to the legacy driver, <span 
class="ec-lmtt-10">xc8</span>, no
     longer has any effect.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Expanded</span><span 
class="ec-lmbx-10">&#x00A0;long</span><span 
class="ec-lmbx-10">&#x00A0;long</span><span 
class="ec-lmbx-10">&#x00A0;support</span> </dt><dd 
class="description">
     <!--l. 1258--><p class="noindent" >Support for 64-bit <span 
class="ec-lmtt-10">long</span><span 
class="ec-lmtt-10">&#x00A0;long </span>types has been expanded to include enhanced mid-range
     devices. These devices, as well as PIC18 devices, can use these types in expressions, but
     note that their use will greatly increase the amount of code and data memory required by
     the project.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Wider</span><span 
class="ec-lmbx-10">&#x00A0;C99</span><span 
class="ec-lmbx-10">&#x00A0;support</span> </dt><dd 
class="description">
     <!--l. 1263--><p class="noindent" >You can now use the C99 library with enhanced mid-range devices that use the reentrant
     stack  model.  Previously  with  these  devices,  you  were  limited  to  using  C99  with  the
     compiled (non-reentrant) stack model.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Larger</span><span 
class="ec-lmbx-10">&#x00A0;stack</span><span 
class="ec-lmbx-10">&#x00A0;allocation</span> </dt><dd 
class="description">
     <!--l. 1267--><p class="noindent" >Functions that use the reentrant stack model in enhanced mid-range projects were limited
     to a total of 31 bytes of stack for local objects. This limitation has been lifted and there
     is now no theoretical limit to how much data a function can define on the stack. Note,
     however, that exceeding 31 bytes of stack usage will increase the size of generated code
     for each access of these stack objects by few instructions.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">int24_t</span><span 
class="ec-lmbx-10">&#x00A0;types</span><span 
class="ec-lmbx-10">&#x00A0;added</span><span 
class="ec-lmbx-10">&#x00A0;to</span><span 
class="ec-lmbx-10">&#x00A0;C99</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 1274--><p class="noindent" >The <span 
class="ec-lmtt-10">int24_t </span>and <span 
class="ec-lmtt-10">uint24_t </span>types (along with the existing <span 
class="ec-lmtt-10">__int24 </span>and <span 
class="ec-lmtt-10">__uint24 </span>types)
     are now available when using the C99 library and when CCI is not active.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Welcome</span><span 
class="ec-lmbx-10">&#x00A0;MPASM</span> </dt><dd 
class="description">
     <!--l. 1278--><p class="noindent" >The MPASM assembler for 8-bit devices is now included in the XC8 compiler installer,
     rather than being distributed with the MPLAB X IDE. This assembler is not used by the
     XC8 compiler, but is available for projects based on hand-written assembly source.</dd></dl>
<!--l. 1284--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-38000"></a>Version 2.00</h4>
<!--l. 1285--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Top-level</span><span 
class="ec-lmbx-10">&#x00A0;driver</span> </dt><dd 
class="description">
     <!--l. 1286--><p class="noindent" >A new driver, called <span 
class="ec-lmtt-10">xc8-cc</span>, is positioned above the previous <span 
class="ec-lmtt-10">xc8 </span>driver, and it can
     call the appropriate applications based on the selection of the target device. This driver
     accepts GCC-style options, although the PIC implementation uses the same back end as
     the previous compiler version. The new driver allows a similar set of options with similar
     semantics to be used with any PIC target and is thus the recommended way to invoke the
     compiler. Note that the options used by the new <span 
class="ec-lmtt-10">xc8-cc </span>driver, unlike those used by the
     previous <span 
class="ec-lmtt-10">xc8 </span>driver, are case sensitive. If required for legacy projects, the previous driver
     can be called directly using the old-style options it accepted in earlier compiler versions.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;file</span><span 
class="ec-lmbx-10">&#x00A0;extensions</span> </dt><dd 
class="description">
     <!--l. 1298--><p class="noindent" >When you are using the new driver, the extensions of input and output files are different
     to those used with the previous driver. The table below shows the new extensions that are
     used.</dd></dl>
<div class="center" 
>
<!--l. 1303--><p class="noindent" >
<div class="tabular"> <table id="TBL-3" class="tabular" 
 
><colgroup id="TBL-3-1g"><col 
id="TBL-3-1"></colgroup><colgroup id="TBL-3-2g"><col 
id="TBL-3-2"></colgroup><colgroup id="TBL-3-3g"><col 
id="TBL-3-3"></colgroup><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-3-1-"><td  style="white-space:nowrap; text-align:center;" id="TBL-3-1-1"  
class="td11">      File type          </td><td  style="white-space:nowrap; text-align:center;" id="TBL-3-1-2"  
class="td11"> Previous extension  </td><td  style="white-space:nowrap; text-align:center;" id="TBL-3-1-3"  
class="td11"> New extension  </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-3-2-"><td  style="white-space:nowrap; text-align:center;" id="TBL-3-2-1"  
class="td11"> Preprocessed C source  </td><td  style="white-space:nowrap; text-align:center;" id="TBL-3-2-2"  
class="td11">       <span 
class="ec-lmtt-10">.pre       </span></td><td  style="white-space:nowrap; text-align:center;" id="TBL-3-2-3"  
class="td11">      <span 
class="ec-lmtt-10">.i      </span></td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-3-3-"><td  style="white-space:nowrap; text-align:center;" id="TBL-3-3-1"  
class="td11">     P-code library       </td><td  style="white-space:nowrap; text-align:center;" id="TBL-3-3-2"  
class="td11">       <span 
class="ec-lmtt-10">.lpp       </span></td><td  style="white-space:nowrap; text-align:center;" id="TBL-3-3-3"  
class="td11">      <span 
class="ec-lmtt-10">.a      </span></td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-3-4-"><td  style="white-space:nowrap; text-align:center;" id="TBL-3-4-1"  
class="td11">  Object-code library    </td><td  style="white-space:nowrap; text-align:center;" id="TBL-3-4-2"  
class="td11">       <span 
class="ec-lmtt-10">.lib       </span></td><td  style="white-space:nowrap; text-align:center;" id="TBL-3-4-3"  
class="td11">      <span 
class="ec-lmtt-10">.a      </span></td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-3-5-"><td  style="white-space:nowrap; text-align:center;" id="TBL-3-5-1"  
class="td11">        Object            </td><td  style="white-space:nowrap; text-align:center;" id="TBL-3-5-2"  
class="td11">       <span 
class="ec-lmtt-10">.obj       </span></td><td  style="white-space:nowrap; text-align:center;" id="TBL-3-5-3"  
class="td11">      <span 
class="ec-lmtt-10">.o      </span></td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-3-6-"><td  style="white-space:nowrap; text-align:center;" id="TBL-3-6-1"  
class="td11">    Assembly source      </td><td  style="white-space:nowrap; text-align:center;" id="TBL-3-6-2"  
class="td11">       <span 
class="ec-lmtt-10">.as       </span></td><td  style="white-space:nowrap; text-align:center;" id="TBL-3-6-3"  
class="td11">  <span 
class="ec-lmss-10">.s </span>(<span 
class="ec-lmtt-10">.S</span>, <span 
class="ec-lmtt-10">.sx</span>)    </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-3-7-"><td  style="white-space:nowrap; text-align:center;" id="TBL-3-7-1"  
class="td11">                     </td>
</tr></table>                                                                               </div>
</div>
<!--l. 1333--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;librarian</span><span 
class="ec-lmbx-10">&#x00A0;driver</span> </dt><dd 
class="description">
     <!--l. 1334--><p class="noindent" >A new librarian driver is positioned above the previous PIC <span 
class="ec-lmtt-10">libr </span>librarian. This driver
     accepts GCC-archiver-style options, which are either translated for or passed through
     to  the  librarian  being  executed.  The  new  driver  allows  a  similar  set  of  options  with
     similar semantics to be used to create or manipulate any PIC library file and is thus the
     recommended way to invoke the librarian. If required for legacy projects, the previous
     librarian can be called directly using the old-style options it accepted in earlier compiler
     versions.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Clang</span><span 
class="ec-lmbx-10">&#x00A0;front</span><span 
class="ec-lmbx-10">&#x00A0;end</span> </dt><dd 
class="description">
     <!--l. 1343--><p class="noindent" >The compiler<span 
class="ts1-lmr10-">'</span>s front end, responsible for preprocessing and parsing the C source code, is
     now implemented using Clang. This frontend is used when compiling for the C99 standard,
     regardless of whether you are using the new (<span 
class="ec-lmtt-10">xc8-cc</span>) or previous (<span 
class="ec-lmtt-10">xc8</span>) drivers. When
     using Clang, there might be differences in how source code is preprocessed, and different
     warning or error messages might be produced during the parsing stage.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">C99</span><span 
class="ec-lmbx-10">&#x00A0;support</span> </dt><dd 
class="description">
     <!--l. 1350--><p class="noindent" >By default, the <span 
class="ec-lmtt-10">xc8-cc</span><span 
class="ec-lmtt-10">&#x00A0;</span>driver will compile for C99 conformance. You can use the <span 
class="ec-lmtt-10">-std</span>
     option with this driver to explicitly specify the standard, choosing either <span 
class="ec-lmtt-10">c90 </span>or <span 
class="ec-lmtt-10">c99</span>. The
     previous <span 
class="ec-lmtt-10">xc8 </span>driver builds for the C90 standard by default, although you can request the
     C99 language standard using the <span 
class="ec-lmtt-10">--std </span>option (note the double dash), in which case the
     compiler will swap to using Clang as the front end. New types available with the C99
     standard include a 64-bit <span 
class="ec-lmtt-10">long</span><span 
class="ec-lmtt-10">&#x00A0;long </span>integer types (currently implemented only for PIC18
     devices) and boolean type, but not all other C99 features are yet implemented. Note also
     that 24-bit floating-point types are not permitted when building for C99.<br 
class="newline" />If you would like to move towards the C99 standard for existing projects but want to
     minimize any changes to your source code, use the <span 
class="ec-lmtt-10">xc8-cc </span>driver, set the language standard
     using <span 
class="ec-lmtt-10">-std=c99</span>, and use the <span 
class="ec-lmtt-10">-mc90lib </span>option (if you prefer to use the previous <span 
class="ec-lmtt-10">xc8 </span>driver,
     use the equivalents: <span 
class="ec-lmtt-10">--std=c99 </span>and <span 
class="ec-lmtt-10">--runtime=+c90lib</span>). This will select the Clang front
     end, but use C90-compliant libraries and keep many of the code features (such as 24-bit
     floating-point types) as they were for the previous compiler. It is recommended that you
     use the new <span 
class="ec-lmtt-10">xc8-cc </span>driver for new projects.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">C99</span><span 
class="ec-lmbx-10">&#x00A0;library</span><span 
class="ec-lmbx-10">&#x00A0;support</span> </dt><dd 
class="description">
     <!--l. 1371--><p class="noindent" >This initial release has limited C99-compliant libraries; furthermore, these libraries are
     only available for PIC18 devices and also for enhanced mid-range devices that are using
     the compiled (non-reentrant) stack model. More complete versions of these libraries will
     be made available in a future release. Note also that some routines in the C99 library
     will be much larger than their C90 counterparts, and that you might see an increase
     in data memory, program memory, or stack usage. These routines will be optimized in
     future releases. See the user&#8217;s guide for the available functions, but note that the following
     functions are only available for PIC18 devices:</dd></dl>
<div class="center" 
>
<!--l. 1382--><p class="noindent" >
<div class="tabular"> <table id="TBL-4" class="tabular" 
 
><colgroup id="TBL-4-1g"><col 
id="TBL-4-1"></colgroup><colgroup id="TBL-4-2g"><col 
id="TBL-4-2"></colgroup><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-4-1-"><td  style="white-space:nowrap; text-align:left;" id="TBL-4-1-1"  
class="td11"> Functions    </td><td  style="white-space:nowrap; text-align:left;" id="TBL-4-1-2"  
class="td11">          </td></tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-4-2-"><td  style="white-space:nowrap; text-align:left;" id="TBL-4-2-1"  
class="td11">
 <span 
class="ec-lmtt-10">lldiv_t    </span></td><td  style="white-space:nowrap; text-align:left;" id="TBL-4-2-2"  
class="td11"> <span 
class="ec-lmtt-10">exp2     </span></td></tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-4-3-"><td  style="white-space:nowrap; text-align:left;" id="TBL-4-3-1"  
class="td11">
 <span 
class="ec-lmtt-10">atoll      </span></td><td  style="white-space:nowrap; text-align:left;" id="TBL-4-3-2"  
class="td11"> <span 
class="ec-lmtt-10">exp2f    </span></td></tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-4-4-"><td  style="white-space:nowrap; text-align:left;" id="TBL-4-4-1"  
class="td11">
 <span 
class="ec-lmtt-10">strtoll    </span></td><td  style="white-space:nowrap; text-align:left;" id="TBL-4-4-2"  
class="td11"> <span 
class="ec-lmtt-10">exp2l    </span></td></tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-4-5-"><td  style="white-space:nowrap; text-align:left;" id="TBL-4-5-1"  
class="td11"> <span 
class="ec-lmtt-10">strtoull </span></td><td  style="white-space:nowrap; text-align:left;" id="TBL-4-5-2"  
class="td11"> <span 
class="ec-lmtt-10">fma </span></td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-4-6-"><td  style="white-space:nowrap; text-align:left;" id="TBL-4-6-1"  
class="td11"> <span 
class="ec-lmtt-10">llabs      </span></td><td  style="white-space:nowrap; text-align:left;" id="TBL-4-6-2"  
class="td11"> <span 
class="ec-lmtt-10">fmaf     </span></td></tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-4-7-"><td  style="white-space:nowrap; text-align:left;" id="TBL-4-7-1"  
class="td11"> <span 
class="ec-lmtt-10">lldiv </span></td><td  style="white-space:nowrap; text-align:left;" id="TBL-4-7-2"  
class="td11"> <span 
class="ec-lmtt-10">fmal </span></td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-4-8-"><td  style="white-space:nowrap; text-align:left;" id="TBL-4-8-1"  
class="td11"> <span 
class="ec-lmtt-10">time_t     </span></td><td  style="white-space:nowrap; text-align:left;" id="TBL-4-8-2"  
class="td11"> <span 
class="ec-lmtt-10">llrint   </span></td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-4-9-"><td  style="white-space:nowrap; text-align:left;" id="TBL-4-9-1"  
class="td11"> <span 
class="ec-lmtt-10">difftime   </span></td><td  style="white-space:nowrap; text-align:left;" id="TBL-4-9-2"  
class="td11"> <span 
class="ec-lmtt-10">llrintf  </span></td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-4-10-"><td  style="white-space:nowrap; text-align:left;" id="TBL-4-10-1"  
class="td11"> <span 
class="ec-lmtt-10">mktime     </span></td><td  style="white-space:nowrap; text-align:left;" id="TBL-4-10-2"  
class="td11"> <span 
class="ec-lmtt-10">llrintl  </span></td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-4-11-"><td  style="white-space:nowrap; text-align:left;" id="TBL-4-11-1"  
class="td11"> <span 
class="ec-lmtt-10">time       </span></td><td  style="white-space:nowrap; text-align:left;" id="TBL-4-11-2"  
class="td11"> <span 
class="ec-lmtt-10">llround  </span></td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-4-12-"><td  style="white-space:nowrap; text-align:left;" id="TBL-4-12-1"  
class="td11"> <span 
class="ec-lmtt-10">ctime      </span></td><td  style="white-space:nowrap; text-align:left;" id="TBL-4-12-2"  
class="td11"> <span 
class="ec-lmtt-10">llroundf </span></td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-4-13-"><td  style="white-space:nowrap; text-align:left;" id="TBL-4-13-1"  
class="td11"> <span 
class="ec-lmtt-10">gmtime     </span></td><td  style="white-space:nowrap; text-align:left;" id="TBL-4-13-2"  
class="td11"> <span 
class="ec-lmtt-10">llroundl </span></td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-4-14-"><td  style="white-space:nowrap; text-align:left;" id="TBL-4-14-1"  
class="td11"> <span 
class="ec-lmtt-10">localtime  </span></td><td  style="white-space:nowrap; text-align:left;" id="TBL-4-14-2"  
class="td11">          </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-4-15-"><td  style="white-space:nowrap; text-align:left;" id="TBL-4-15-1"  
class="td11">            </td>
</tr></table>                                                                               </div>
</div>
<!--l. 1431--><p class="noindent" >The following functions are not included for any device:
<div class="center" 
>
                                                                               
                                                                               
<!--l. 1432--><p class="noindent" >
<div class="tabular"> <table id="TBL-5" class="tabular" 
 
><colgroup id="TBL-5-1g"><col 
id="TBL-5-1"></colgroup><colgroup id="TBL-5-2g"><col 
id="TBL-5-2"></colgroup><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-5-1-"><td  style="white-space:nowrap; text-align:left;" id="TBL-5-1-1"  
class="td11"> Functions  </td><td  style="white-space:nowrap; text-align:left;" id="TBL-5-1-2"  
class="td11">          </td></tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-5-2-"><td  style="white-space:nowrap; text-align:left;" id="TBL-5-2-1"  
class="td11">
 <span 
class="ec-lmtt-10">tgamma    </span></td><td  style="white-space:nowrap; text-align:left;" id="TBL-5-2-2"  
class="td11"> <span 
class="ec-lmtt-10">strftime </span></td></tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-5-3-"><td  style="white-space:nowrap; text-align:left;" id="TBL-5-3-1"  
class="td11">
 <span 
class="ec-lmtt-10">tgammaf   </span></td><td  style="white-space:nowrap; text-align:left;" id="TBL-5-3-2"  
class="td11">          </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-5-4-"><td  style="white-space:nowrap; text-align:left;" id="TBL-5-4-1"  
class="td11"> <span 
class="ec-lmtt-10">tgammal   </span></td><td  style="white-space:nowrap; text-align:left;" id="TBL-5-4-2"  
class="td11">          </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-5-5-"><td  style="white-space:nowrap; text-align:left;" id="TBL-5-5-1"  
class="td11">           </td>
</tr></table>                                                                               </div>
</div>
<!--l. 1450--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Better</span><span 
class="ec-lmbx-10">&#x00A0;interrupt</span><span 
class="ec-lmbx-10">&#x00A0;response</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;Free</span><span 
class="ec-lmbx-10">&#x00A0;mode</span> </dt><dd 
class="description">
     <!--l. 1451--><p class="noindent" >The list of registers saved when using the lower optimization levels now more closely
     matches that with level s/3 (formerly PRO mode).
     </dd><dt class="description">
<span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;device</span><span 
class="ec-lmbx-10">&#x00A0;support</span> </dt><dd 
class="description">
     <!--l. 1454--><p class="noindent" >Support is available for the following PIC parts (and their corresponding LF variants):
     16F18455 and 16F18456.</dd></dl>
<!--l. 1458--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-39000"></a>Versions 1.XX</h4>
<!--l. 1460--><p class="noindent" >For information regarding changes made to version 1.xx compilers, see the release notes of any
compiler version prior to v3.00.
<!--l. 1463--><p class="noindent" >
<h3 class="sectionHead"><span class="titlemark">4   </span> <a 
 id="x1-400004"></a>Migration Issues</h3>
<!--l. 1465--><p class="noindent" >The following are features that are now handled differently by the compiler. These changes may
require modification to your source code if porting code to this compiler version. The version
number in the subheadings indicates the first compiler version to support the changes that
follow.
<!--l. 1471--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-41000"></a>Version 3.00</h4>
<!--l. 1472--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Improved</span><span 
class="ec-lmbx-10">&#x00A0;messaging</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3131)</span> </dt><dd 
class="description">
     <!--l. 1473--><p class="noindent" >The Clang front end was reporting fatal errors as <span 
class="ec-lmtt-10">std::logic_error</span>. It now reports more
     descriptive fatal errors.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Clang</span><span 
class="ec-lmbx-10">&#x00A0;updated</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3016)</span> </dt><dd 
class="description">
     <!--l. 1476--><p class="noindent" >The Clang compiler front end has been updated from version v4.0.1 to v18.1.8. This update
     includes changes to diagnostics and warnings. See <a 
href="#x1-20000doc">Version 3.00<!--tex4ht:ref: Clangupdated(XC8-3016)-The-Clang --></a> in the <span 
class="ec-lmri-10">What&#8217;s New </span>section
     for information on what has changed.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">PIC18</span><span 
class="ec-lmbx-10">&#x00A0;pointer</span><span 
class="ec-lmbx-10">&#x00A0;format</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2990)</span> </dt><dd 
class="description">
     <!--l. 1480--><p class="noindent" >The format of the address stored in 24-bit wide mixed-target pointers has changed for
     PIC18 projects. Previously, bit #21 was used to determine the target address space; now
     bit #23 indicates if the target is in data or program memory. Any code that makes an
     assumption as to the numerical value of an address in such a pointer will need to be
     reviewed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">HI-TECH</span><span 
class="ec-lmbx-10">&#x00A0;C</span><span 
class="ec-lmbx-10">&#x00A0;discontinued</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2989,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-3437,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-3438,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-3422)</span> </dt><dd 
class="description">
     <!--l. 1486--><p class="noindent" >Support  for  the  HI-TECH  C  language,  libraries,  and  compiler  drivers  has  been
     discontinued.  Compiling  for  C90  or  ANSI  C  is  no  longer  conflated  with  HI-TECH  C
     eccentricities and will be based on a more conventional C standard. Typically, C90 will now
     impose fewer restrictions compared to the old HI-TECH C language. Note the following
     changes.</dd></dl>
     <ul class="itemize1">
     <li class="itemize">
     <!--l. 1494--><p class="noindent" >The  architecture-specific  drivers,  <span 
class="ec-lmtt-10">picc </span>and  <span 
class="ec-lmtt-10">picc18</span>,  have  been  renamed  to  <span 
class="ec-lmtt-10">driver</span>
     and  <span 
class="ec-lmtt-10">driver18</span>,  respectively,  and  the  middle  driver,  <span 
class="ec-lmtt-10">xc8</span>,  has  been  folded  into  the
     architecture-specific drivers. In this manner, these old HI-TECH legacy drivers will cease
     to be available.
     </li>
     <li class="itemize">
     <!--l. 1499--><p class="noindent" >The  preprocessing  and  parsing  (into  p-code)  of  C90  source  code  by  the  <span 
class="ec-lmtt-10">p1 </span>and  <span 
class="ec-lmtt-10">cpp</span>
     applications is now performed by Clang. There might be differences in how C90 programs
     are preprocessed; for example, C++ style comments (<span 
class="ec-lmtt-10">//</span>), which are not part of the C90
     standard, are not interpreted in every circumstance when using Clang.
     </li>
     <li class="itemize">
     <!--l. 1505--><p class="noindent" >All <span 
class="ec-lmtt-10">float</span>, <span 
class="ec-lmtt-10">double</span>, and <span 
class="ec-lmtt-10">long double </span>floating-point types use the IEEE753 32-bit format.
     The 24-bit floating point type is no longer supported.
     </li>
     <li class="itemize">
     <!--l. 1508--><p class="noindent" >An empty function prototype used in a declaration is now interpreted to mean that no
     function parameter information has been provided, rather than meaning the function has
     no parameters, as was inconsistently assumed by the old p1 application.
     </li>
     <li class="itemize">
     <!--l. 1512--><p class="noindent" >The <span 
class="ec-lmtt-10">_Bool </span>type can now be used with C90 programs.
     </li>
     <li class="itemize">
     <!--l. 1513--><p class="noindent" >The  <span 
class="ec-lmtt-10">long long </span>types  are  now  64-bit  C99  standard  integer  types  when  building  for
     PIC18 and Enhanced Mid-range devices and the C89/C90 standard. All other devices will
     continue to have <span 
class="ec-lmtt-10">long long </span>types restricted to 32 bits wide.
     </li>
     <li class="itemize">
                                                                               
                                                                               
     <!--l. 1517--><p class="noindent" >The  <span 
class="ec-lmtt-10">__at() </span>construct  can  now  be  placed  before  or  after  the  variable  identifier  in  a
     definition regardless of the C standard selected.
     </li>
     <li class="itemize">
     <!--l. 1520--><p class="noindent" >Projects  that  need  to  conform  to  the  C89/C90  standard  may  use  dynamic  memory
     allocation via the standard library memory management functions. Any restrictions that
     were imposed by the target device will, however, still remain.
     </li>
     <li class="itemize">
     <!--l. 1524--><p class="noindent" >Case ranges (<span 
class="ec-lmtti-10">lo_value </span><span 
class="ec-lmtt-10">... </span><span 
class="ec-lmtto-10">hi_value</span><span 
class="ec-lmtt-10">:</span>) are not a feature of the C90 or C99 standards
     and are no longer supported.
     </li>
     <li class="itemize">
     <!--l. 1526--><p class="noindent" >Objects defined with anonymous structures or unions can now be initialized regardless of
     which C standard has been selected.
     </li>
     <li class="itemize">
     <!--l. 1528--><p class="noindent" >Floating-point  constants  can  now  be  expressed  as  hexadecimal  digits  and  a  binary
     exponent, initiated with either p or P, regardless of which C standard has been selected.
     </li>
     <li class="itemize">
     <!--l. 1531--><p class="noindent" >The integer size used by all preprocessor arithmetic is now 64-bits, regardless of device or
     which C standard has been selected.
     </li>
     <li class="itemize">
     <!--l. 1533--><p class="noindent" >The   <span 
class="ec-lmtt-10">HI_TECH_C  </span>has   been   removed;   the   <span 
class="ec-lmtt-10">__CLANG__  </span>macro   is   always   set;   the
     <span 
class="ec-lmtt-10">__STDC_VERSION__ </span>is new and is defined for both C90 and C99.
     </li>
     <li class="itemize">
     <!--l. 1536--><p class="noindent" >The use of unnamed function parameters, which was a C23 language extension supported
     by the old <span 
class="ec-lmtt-10">p1 </span>application, is not supported by Clang. Empty initializers and binary literal
     integers, both C23 language extensions, continue to be supported.
     </li>
     <li class="itemize">
     <!--l. 1540--><p class="noindent" >The <span 
class="ec-lmtt-10">-fshort-double</span>, <span 
class="ec-lmtt-10">-fshort-float</span>, and <span 
class="ec-lmtt-10">-mc90lib </span>options have no effect other than
     to issue a warning.
     </li>
     <li class="itemize">
     <!--l. 1542--><p class="noindent" >The  <span 
class="ec-lmtt-10">-msmart-io-format </span>and  <span 
class="ec-lmtt-10">-MF </span>options  are  now  available  to  projects  built  to  the
     C89/C90 language standard.
     </li>
     <li class="itemize">
     <!--l. 1544--><p class="noindent" >Use  of  the  <span 
class="ec-lmtt-10">__CONFIG</span>,  <span 
class="ec-lmtt-10">__IDLOC</span>,  <span 
class="ec-lmtt-10">__IDLOC7</span>,  and  <span 
class="ec-lmtt-10">__PROG_CONFIG </span>macros  will  trigger  a
     warning.
                                                                               
                                                                               
     </li>
     <li class="itemize">
     <!--l. 1546--><p class="noindent" >The  following  legacy  headers  and  include  files  will  no  longer  be  supplied  with
     the compiler or DFPs:  <span 
class="ec-lmtt-10">pic/include/p18cxxx.h</span>, <span 
class="ec-lmtt-10">pic/include/pic_cas_chip_select.h</span>
     and <span 
class="ec-lmtt-10">pic/include/proc/as&#x003C;device_name&#x003E;.h</span>. The <span 
class="ec-lmtt-10">pic/include/legacy/ </span>directory has
     also been removed. The following headers are still shipped with the compiler, but including
     them  will  trigger  a  warning  stating  that  they  are  deprecated:  <span 
class="ec-lmtt-10">pic/include/aspic.h</span>,
     <span 
class="ec-lmtt-10">pic/include/caspic.h</span>,<span 
class="ec-lmtt-10">pic/include/htc.h</span>, and <span 
class="ec-lmtt-10">pic/include/__at.h</span>.</li></ul>
<!--l. 1554--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Wider</span><span 
class="ec-lmbx-10">&#x00A0;pointer</span><span 
class="ec-lmbx-10">&#x00A0;scope</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2870)</span> </dt><dd 
class="description">
     <!--l. 1555--><p class="noindent" >The compiler now supports the ability for pointers to point to and access all regions of
     the PIC18&#8217;s program memory address space. This includes the Device Information Area
     (DIA).</dd></dl>
<!--l. 1561--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-42000"></a>Version 2.50</h4>
<!--l. 1562--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Pointer</span><span 
class="ec-lmbx-10">&#x00A0;refactoring</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3202)</span> </dt><dd 
class="description">
     <!--l. 1563--><p class="noindent" >Much of the compiler source code responsible for pointer analysis and memory allocation
     has been refactored so that the PIC18 and baseline/mid-range code generators now share a
     common, revised pointer-processing code base. This change should not impact how projects
     are built.</dd></dl>
<!--l. 1570--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-43000"></a>Version 2.49 (Functional Safety Release)</h4>
<!--l. 1571--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">New</span><span 
class="ec-lmbx-10">&#x00A0;message</span><span 
class="ec-lmbx-10">&#x00A0;emitted</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3420)</span> </dt><dd 
class="description">
     <!--l. 1572--><p class="noindent" >In situations where the compiler has detected a pointer to an <span 
class="ec-lmtt-10">__eeprom </span>type that has
     been assigned the address of an object that is not qualified <span 
class="ec-lmtt-10">__eeprom</span>, the error previously
     emitted by the compiler has been changed to a different advisory message.</dd></dl>
<!--l. 1579--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-44000"></a>Version 2.46</h4>
<!--l. 1580--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Message</span><span 
class="ec-lmbx-10">&#x00A0;type</span><span 
class="ec-lmbx-10">&#x00A0;changed</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3257,</span><span 
class="ec-lmbx-10">&#x00A0;3252)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 1581--><p class="noindent" >The warning messages issued when <span 
class="ec-lmtt-10">#pragma</span><span 
class="ec-lmtt-10">&#x00A0;config </span>configuration bits settings enabled
     storage area flash (1604) or enabled block table read protection (1605) have be converted
     to advisory messages. If the configuration bit settings associated with these warnings
     were intentional, there was no way to suppress these warnings, and in functional safety
     applications, where warnings might be converted to errors, this would have prevented the
     project from being built. Continue to monitor build output for these advisories.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Calling</span><span 
class="ec-lmbx-10">&#x00A0;a</span><span 
class="ec-lmbx-10">&#x00A0;different</span><span 
class="ec-lmbx-10">&#x00A0;Hexmate</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3237)</span> </dt><dd 
class="description">
     <!--l. 1590--><p class="noindent" >The compiler will now call the shipped Hexmate utility when required, rather than rely
     on internal Hexmate functionality. This change will be largely transparent, other than a
     Hexmate command line appearing in verbose build outputs.</dd></dl>
<!--l. 1596--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-45000"></a>Version 2.45</h4>
<!--l. 1597--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Removal</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;devices</span><span 
class="ec-lmbx-10">&#x00A0;(DTD-59)</span> </dt><dd 
class="description">
     <!--l. 1598--><p class="noindent" >The following parts are no longer supported by the compiler, and data for them will not
     appear in any subsequent DFPs: 16C54A, 16CR57B, and 16CR58A.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Removal</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;devices</span><span 
class="ec-lmbx-10">&#x00A0;(DEVXML-4227)</span> </dt><dd 
class="description">
     <!--l. 1601--><p class="noindent" >The following parts were never released and preliminary compiler support for them has now
     been retracted: MCP19120, MCP19121, MCP19126, MCP19128, MCP19132, MCP19133,
     and MCP19625.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Changed</span><span 
class="ec-lmbx-10">&#x00A0;NOPs</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3114)</span> </dt><dd 
class="description">
     <!--l. 1605--><p class="noindent" >To accommodate those devices which require a hand-written  <span 
class="ec-lmtt-10">NOP </span>instruction encoded
     as 0x0000 in errata workarounds, the C built-in function  <span 
class="ec-lmtt-10">__nop() </span>and the assembler
     instruction <span 
class="ec-lmtt-10">NOP </span>will now use encoding 0x0000. Previously, these used the opcode 0xF000.
     The encoding for any <span 
class="ec-lmtt-10">nop </span>instructions added by a compiler-applied errata workarounds
     remains unchanged; however, new macros have been provided to allow the desired encoding
     of the <span 
class="ec-lmtt-10">nop </span>instruction to be conveyed to the compiler. These are:
     <!--l. 1615--><p class="noindent" ><span 
class="ec-lmtt-10">__nopf000() </span>and <span 
class="ec-lmtt-10">nopf000 </span>to ensure an encoding of 0xF000<br 
class="newline" /><span 
class="ec-lmtt-10">__nop0000() </span>and <span 
class="ec-lmtt-10">nop0000 </span>to ensure an encoding of 0x0000; and<br 
class="newline" /><span 
class="ec-lmtt-10">__nopffff() </span>and <span 
class="ec-lmtt-10">nopffff </span>to ensure an encoding of 0xFFFF
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Deprecation</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;HI-TECH</span><span 
class="ec-lmbx-10">&#x00A0;support</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2958)</span> </dt><dd 
class="description">
     <!--l. 1621--><p class="noindent" >A future version of MPLAB XC8 will discontinue support for legacy HI-TECH C90 source code
     and libraries. Beginning with version 2.45 of the compiler, advisory messages indicating
     that HI-TECH C syntax, libraries, and drivers are deprecated will be issued when
     appropriate, so that programmers can consider code migration to the C99-compliant
     syntax and the Microchip Unified Standard Libraries. This message will be issued
     whenever the <span 
class="ec-lmtt-10">xc8</span>, <span 
class="ec-lmtt-10">picc</span>, or <span 
class="ec-lmtt-10">picc18 </span>legacy drivers are directly executed. Note that this
     future change will not affect standard C90-compliant code; only legacy HI-TECH code
     syntax and libraries will no longer be supported. To prepare for this future change,
     effective immediately, projects targeting Baseline and Mid-range devices shall by
                                                                               
                                                                               
     default use the C99-compliant Microchip Unified Standard Library when compiling for
     C99.&#x00A0; Users may revert to the legacy HI-TECH C90 library by using the <span 
class="ec-lmtt-10">-mc90lib</span>
     option; however, this will trigger the advisory message mentioned above. If code is
     ported from the legacy C90 HI-TECH language to C99, the following changes are
     relevant.
         <ul class="itemize1">
         <li class="itemize">
         <!--l. 1640--><p class="noindent" >Any components of the HI-TECH library (e.g. functions, types, etc.) that are not
         defined by the C99 standard will not be available, including the following functions:
         <span 
class="ec-lmtt-10">cgets()</span>, <span 
class="ec-lmtt-10">eval_poly()</span>, <span 
class="ec-lmtt-10">cputs()</span>, <span 
class="ec-lmtt-10">ftoa()</span>, <span 
class="ec-lmtt-10">getche()</span>, <span 
class="ec-lmtt-10">isascii()</span>, <span 
class="ec-lmtt-10">isdig()</span>, <span 
class="ec-lmtt-10">itoa()</span>,
         <span 
class="ec-lmtt-10">ltoa()</span>, <span 
class="ec-lmtt-10">strichr()</span>, <span 
class="ec-lmtt-10">stricmp()</span>, <span 
class="ec-lmtt-10">strnicmp()</span>, <span 
class="ec-lmtt-10">strrichr()</span>, <span 
class="ec-lmtt-10">stristr()</span>, <span 
class="ec-lmtt-10">toascii()</span>,
         <span 
class="ec-lmtt-10">udiv()</span>, <span 
class="ec-lmtt-10">uldiv()</span>, <span 
class="ec-lmtt-10">utoa()</span>, and <span 
class="ec-lmtt-10">xtoi()</span>.
         </li>
         <li class="itemize">
         <!--l. 1648--><p class="noindent" >The equivalent Microchip Unified Standard Library versions of HI-TECH C90 library
         functions are typically more feature rich and more accurate, hence they often use
         more data and code memory. This might mean, particularly for Baseline devices, that
         use of the functions will exceed the device memory.
         </li>
         <li class="itemize">
         <!--l. 1653--><p class="noindent" >The <span 
class="ec-lmtt-10">getch() </span>and <span 
class="ec-lmtt-10">getchar() </span>functions are both supported by the Microchip Unified
         Standard Library; however, the return type for these are an <span 
class="ec-lmtt-10">int</span>, compared to the
         <span 
class="ec-lmtt-10">char </span>return type used with the HI-TECH C90 library.
         </li>
         <li class="itemize">
         <!--l. 1657--><p class="noindent" >As the Microchip Unified Standard Library supports dynamic memory allocation,
         Baseline and Mid-range devices using this library can define a heap and use functions
         like <span 
class="ec-lmtt-10">malloc() </span>and <span 
class="ec-lmtt-10">free()</span>. When used, the maximum heap size for these targets
         will be restricted to the largest available space in one bank. Use of dynamic memory
         allocation is not recommended, particularly for small-memory devices.
         </li>
         <li class="itemize">
         <!--l. 1663--><p class="noindent" >The internal buffer that temporarily holds the result of each format conversion before
         printing has been reduced from 80 to 16 characters for formatted output functions,
         like <span 
class="ec-lmtt-10">printf()</span>, when they are used with Baseline targets.
         </li>
         <li class="itemize">
         <!--l. 1667--><p class="noindent" >The internal buffer that temporarily holds an individual sequence of characters related
         to a single conversion&#x00A0;has been reduced from 80 to 16 characters for formatted input
         functions, like <span 
class="ec-lmtt-10">scanf()</span>, when they are used with Baseline targets.
         </li>
         <li class="itemize">
         <!--l. 1671--><p class="noindent" >Baseline devices will not be able to make use of the <span 
class="ec-lmtt-10">struct</span><span 
class="ec-lmtt-10">&#x00A0;tm </span>type, defined in
         <span 
class="ec-lmtt-10">&#x003C;time.h</span>&#x003E;.
         </li>
         <li class="itemize">
                                                                               
                                                                               
         <!--l. 1673--><p class="noindent" >The size of <span 
class="ec-lmtt-10">intptr_t</span><span 
class="ec-lmtt-10">&#x00A0;</span>and <span 
class="ec-lmtt-10">uintrptr_t </span>will scale, according to the target device.
         </li>
         <li class="itemize">
         <!--l. 1675--><p class="noindent" >The <span 
class="ec-lmtt-10">atexit() </span>function will support the registration of only 3 functions, not the 32
         functions specified by the C99 standard.
         </li>
         <li class="itemize">
         <!--l. 1677--><p class="noindent" >Baseline and Mid-range devices do not support 64-bit integral types. The <span 
class="ec-lmtt-10">intmax_t</span>
         and <span 
class="ec-lmtt-10">uintmax_t </span>types, therefore, are 32-bit integral types and any 64-bit type (for
         example <span 
class="ec-lmtt-10">uint64_t</span>) or macro (for example <span 
class="ec-lmtt-10">INT_FAST64_MAX</span>) or function (for example
         <span 
class="ec-lmtt-10">lldiv()</span>) will not be available.</li></ul>
     </dd></dl>
<!--l. 1685--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-46000"></a>Version 2.41</h4>
<!--l. 1686--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Less</span><span 
class="ec-lmbx-10">&#x00A0;cryptic</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;messages</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3056)</span> </dt><dd 
class="description">
     <!--l. 1687--><p class="noindent" >The        compiler        will        now        issue        different        error        messages
     when encountering some situations that were previously described with messages, such as
     <span 
class="ec-lmtt-10">Looping</span><span 
class="ec-lmtt-10">&#x00A0;around</span><span 
class="ec-lmtt-10">&#x00A0;allocGlobals</span>, which have no meaning to the user. The new messages
     indicates that <span 
class="ec-lmtt-10">XC8</span><span 
class="ec-lmtt-10">&#x00A0;has</span><span 
class="ec-lmtt-10">&#x00A0;encountered</span><span 
class="ec-lmtt-10">&#x00A0;an</span><span 
class="ec-lmtt-10">&#x00A0;internal</span><span 
class="ec-lmtt-10">&#x00A0;error</span><span 
class="ec-lmtt-10">&#x00A0;and</span><span 
class="ec-lmtt-10">&#x00A0;must</span><span 
class="ec-lmtt-10">&#x00A0;quit </span>and indicates
     what needs to be done.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Misleading</span><span 
class="ec-lmbx-10">&#x00A0;diagnostic</span><span 
class="ec-lmbx-10">&#x00A0;messages</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2950)</span> </dt><dd 
class="description">
     <!--l. 1693--><p class="noindent" >In compiler output diagnostic messages that were not associated with any particular file,
     a misleading line number might have been shown. Line number information is no longer
     shown in these situations.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Inaccurate</span><span 
class="ec-lmbx-10">&#x00A0;fma</span><span 
class="ec-lmbx-10">&#x00A0;functions</span><span 
class="ec-lmbx-10">&#x00A0;removed</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2913)</span> </dt><dd 
class="description">
     <!--l. 1697--><p class="noindent" >The  C99  standard  library  <span 
class="ec-lmtt-10">fma()</span>-family  functions  (<span 
class="ec-lmtt-10">&#x003C;math.h</span>&#x003E;)  did  not  compute  a
     multiply-add with infinite precision to a single rounding, but instead accumulated rounding
     errors with each operation. These functions have been removed from the supplied library.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Generation</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;Hex</span><span 
class="ec-lmbx-10">&#x00A0;files</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2885)</span> </dt><dd 
class="description">
     <!--l. 1702--><p class="noindent" >The generation of Hex files from linked object files is now performed by functionality that
     is part of Hexmate. This duty was previously performed by the Objtohex utility, which is
     no longer shipped with the compiler. This change should not impact any projects, as the
     Objtohex utility was only ever indirectly called by the compiler driver.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">More</span><span 
class="ec-lmbx-10">&#x00A0;function</span><span 
class="ec-lmbx-10">&#x00A0;splitting</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2884)</span> </dt><dd 
class="description">
     <!--l. 1708--><p class="noindent" >If the code generated for a function is larger than the size of a program memory page, the
     compiler could use a feature to allow it to span multiple pages. Previously, this feature
     was tied to the optimization level, even though it is more accurately a work-around for
                                                                               
                                                                               
     limitations in the hardware. The compiler now uses the function-splitting feature whenever
     possible,  even  when  optimizations  are  not  enabled.  This  will  reduce  the  incidence  of
     <span 
class="ec-lmtt-10">can</span><span 
class="ts1-lmtt10-">'</span><span 
class="ec-lmtt-10">t</span><span 
class="ec-lmtt-10">&#x00A0;find</span><span 
class="ec-lmtt-10">&#x00A0;space </span>errors relating to program memory in some circumstances.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Different</span><span 
class="ec-lmbx-10">&#x00A0;undefined</span><span 
class="ec-lmbx-10">&#x00A0;symbol</span><span 
class="ec-lmbx-10">&#x00A0;messages</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2206)</span> </dt><dd 
class="description">
     <!--l. 1717--><p class="noindent" >When there were many undefined symbols reported by the linker, they were displayed in
     a message on one line in a way that was difficult to read. This has been updated so that
     each undefined symbol is reported in a separate error message.</dd></dl>
<!--l. 1724--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-47000"></a>Version 2.40</h4>
<!--l. 1725--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Better</span><span 
class="ec-lmbx-10">&#x00A0;warnings</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;DFP</span><span 
class="ec-lmbx-10">&#x00A0;incompatibles</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2854)</span> </dt><dd 
class="description">
     <!--l. 1726--><p class="noindent" >The compiler issued warning (1020) regarding unknown attributes when using a device
     family pack (DFP) that was incompatible with (typically, more recent than) the currently
     selected compiler. A new message, stating, <span 
class="ec-lmtt-10">The</span><span 
class="ec-lmtt-10">&#x00A0;selected</span><span 
class="ec-lmtt-10">&#x00A0;Device</span><span 
class="ec-lmtt-10">&#x00A0;Family</span><span 
class="ec-lmtt-10">&#x00A0;Pack</span><span 
class="ec-lmtt-10">&#x00A0;(DFP)</span><span 
class="ec-lmtt-10">&#x00A0;contains</span><span 
class="ec-lmtt-10">&#x00A0;features</span><span 
class="ec-lmtt-10">&#x00A0;not</span><span 
class="ec-lmtt-10">&#x00A0;implemented</span><span 
class="ec-lmtt-10">&#x00A0;in</span><span 
class="ec-lmtt-10">&#x00A0;this</span><span 
class="ec-lmtt-10">&#x00A0;compiler</span><span 
class="ec-lmtt-10">&#x00A0;version;</span><span 
class="ec-lmtt-10">&#x00A0;consider</span><span 
class="ec-lmtt-10">&#x00A0;using</span><span 
class="ec-lmtt-10">&#x00A0;an</span><span 
class="ec-lmtt-10">&#x00A0;alternate</span><span 
class="ec-lmtt-10">&#x00A0;DFP</span><span 
class="ec-lmtt-10">&#x00A0;or</span><span 
class="ec-lmtt-10">&#x00A0;a</span><span 
class="ec-lmtt-10">&#x00A0;more</span><span 
class="ec-lmtt-10">&#x00A0;recent</span><span 
class="ec-lmtt-10">&#x00A0;compiler</span><span 
class="ec-lmtt-10">&#x00A0;release</span>,
     will now be issued.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Code</span><span 
class="ec-lmbx-10">&#x00A0;coverage</span><span 
class="ec-lmbx-10">&#x00A0;macro</span><span 
class="ec-lmbx-10">&#x00A0;availability</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2804)</span> </dt><dd 
class="description">
     <!--l. 1731--><p class="noindent" >The compiler previously set the <span 
class="ec-lmtt-10">__CODECOV </span>macro to <span 
class="ec-lmtt-10">__CC_NONE </span>when the code coverage
     feature was disabled. Now, this macro is not defined at all when code coverage is disabled.
     Other states of this macro remain the same.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Removal</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;math</span><span 
class="ec-lmbx-10">&#x00A0;functions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2757)</span> </dt><dd 
class="description">
     <!--l. 1736--><p class="noindent" >The <span 
class="ec-lmtt-10">exp2()</span>, <span 
class="ec-lmtt-10">exp2f()</span>, and <span 
class="ec-lmtt-10">exp2l() </span>family of library functions have been removed from
     the standard C library shipped with the compiler. These functions did not always give
     correct results.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Warnings</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;direct</span><span 
class="ec-lmbx-10">&#x00A0;header</span><span 
class="ec-lmbx-10">&#x00A0;inclusion</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2135)</span> </dt><dd 
class="description">
     <!--l. 1740--><p class="noindent" >The  compiler  was  not  correctly  warning  if  a  device-specific  header  file,  for  example
     <span 
class="ec-lmtt-10">&#x003C;pic18f8722.h</span>&#x003E;, was being directly included into source code. A warning is now issued
     in such circumstances. If the compiler reports this warning in your projects, ensure you
     include the top-level header file <span 
class="ec-lmtt-10">&#x003C;xc.h&#x003E; </span>instead.</dd></dl>
<!--l. 1748--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-48000"></a>Version 2.39 (Functional Safety Release)</h4>
<!--l. 1750--><p class="noindent" >None.
                                                                               
                                                                               
<!--l. 1752--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-49000"></a>Version 2.36</h4>
<!--l. 1754--><p class="noindent" >None.
<!--l. 1756--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-50000"></a>Version 2.35</h4>
<!--l. 1757--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Data</span><span 
class="ec-lmbx-10">&#x00A0;memory</span><span 
class="ec-lmbx-10">&#x00A0;reservation</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2711)</span> </dt><dd 
class="description">
     <!--l. 1758--><p class="noindent" >Some PIC18F<span 
class="ts1-lmr10-">'</span>Q devices have data banks that can be dedicated to a particular function
     (e.g. page reads and writes of program memory, sending and receiving CAN messages).
     Previously,  such  banks  might  have  been  included  with  general-purpose  data  memory
     and  been  available  to  the  compiler  for  allocation  of  ordinary  objects.  These  banks
     are now reserved and no longer available to the compiler. If desired, you may create
     absolute-addressed variables (using the <span 
class="ec-lmtt-10">__at() </span>specifier) in these reserved memory regions.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">errno</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;being</span><span 
class="ec-lmbx-10">&#x00A0;set</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2682)</span> </dt><dd 
class="description">
     <!--l. 1767--><p class="noindent" >Several <span 
class="ec-lmtt-10">&#x003C;math.h&#x003E; </span>functions (for example <span 
class="ec-lmtt-10">acos()</span>) were not setting the <span 
class="ec-lmtt-10">errno </span>object when
     required, such as on a domain error. Code in your project that made checks on this object
     might now behave differently. The functions now act in accordance with the C99 language
     standard.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Removal</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;non-standard</span><span 
class="ec-lmbx-10">&#x00A0;functions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2591)</span> </dt><dd 
class="description">
     <!--l. 1772--><p class="noindent" >The <span 
class="ec-lmtt-10">finite</span>, <span 
class="ec-lmtt-10">finitef</span>, <span 
class="ec-lmtt-10">toascii</span>, and <span 
class="ec-lmtt-10">isascii </span>functions are extraneous to the C99 language
     standard and have been removed from the compiler distribution. These functions were
     never documented. In addition, the non-standard <span 
class="ec-lmtt-10">&#x003C;conio.h&#x003E; </span>header has been removed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Handling</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;string-to</span><span 
class="ec-lmbx-10">&#x00A0;bases</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2420)</span> </dt><dd 
class="description">
     <!--l. 1777--><p class="noindent" >To ensure consistency with other XC compilers, the XC8 string-to functions, like <span 
class="ec-lmtt-10">strtol()</span>
     etc., will no longer attempt to convert an input string if the base specified is larger than
     36 and will instead set <span 
class="ec-lmtt-10">errno </span>to <span 
class="ec-lmtt-10">EINVAL</span>. The C standard does not specify the behaviour
     of the functions when this base value is exceeded.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Hexmate</span><span 
class="ec-lmbx-10">&#x00A0;II</span> </dt><dd 
class="description">
     <!--l. 1783--><p class="noindent" >The Hexmate application shipped with the compiler is now built from a new code base.
     In addition, parts of the Hexmate code have been incorporated into the compiler drivers
     directly, meaning that the compiler no longer needs to execute the Hexmate application
     when building projects. If you run the compiler in verbose mode, a Hexmate application
     command line, like that shown here:</dd></dl>
<!--l. 1790--><p class="noindent" >
     <dl class="list1"><dt class="list">
     </dt><dd 
class="list">
                                                                               
                                                                               
     <!--l. 1790--><p class="noindent" ><span 
class="ec-lmtt-10">/Applications/microchip/xc8/v2.32/pic/bin/hexmate</span>
     <span 
class="ec-lmtt-10">@/tmp/hexmate_xcNZD0QKH.cmd</span>
     <span 
class="ec-lmtt-10">[</span>
     <span 
class="ec-lmtt-10">-W-3</span>
     <span 
class="ec-lmtt-10">--edf=/Applications/microchip/xc8/v2.32/pic/dat/en_msgs.txt</span>
     <span 
class="ec-lmtt-10">main.hex</span>
     <span 
class="ec-lmtt-10">-E1</span>
     <span 
class="ec-lmtt-10">-Omain.hex</span>
     <span 
class="ec-lmtt-10">-logfile=main.hxl</span>
     <span 
class="ec-lmtt-10">-addressing=1</span>
     <span 
class="ec-lmtt-10">-fill=0xFFFF@0x800:0xFFF</span>
     <span 
class="ec-lmtt-10">-ck=800-FFF@20+0w1g2p0r0s0.1</span>
     <span 
class="ec-lmtt-10">-break=300000</span>
     <span 
class="ec-lmtt-10">]</span>
     <!--l. 1797--><p class="noindent" >will
     no
     longer
     be
     seen.
     The
     stand-alone
     Hexmate
     application
     is
     still
     shipped
     with
     the
     compiler
     and
     if
     required
     can
     be
     run
     explicitly
     as
     it
     had
     in
     the
     past,
     allowing
     full
     access
     to
     its
     options
     or
     its
     use
     without
     a
     compiler.
                                                                               
                                                                               
     The
     log
     file
     output,
     when
     requested,
     shows
     more
     complete
     information
     relating
     to
     the
     tasks
     Hexmate
     performed.</dd></dl>
<!--l. 1799--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Microchip</span><span 
class="ec-lmbx-10">&#x00A0;Unified</span><span 
class="ec-lmbx-10">&#x00A0;Standard</span><span 
class="ec-lmbx-10">&#x00A0;Libraries</span> </dt><dd 
class="description">
     <!--l. 1800--><p class="noindent" >All MPLAB XC compilers will share a Microchip Unified Standard Library. The MPLAB
     XC8 compiler has shipped with this library for several versions, but with this release,
     the  available  functions  have  been  expanded  and  the  operation  of  some  functions  has
     been standardized. The <span 
class="ec-lmri-10">MPLAB</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">XC8 C Compiler User&#8217;s Guide for PIC</span><sup class="textsuperscript"><span 
class="ec-lmri-9">®</span></sup> <span 
class="ec-lmri-10">MCU </span>no long
     includes the documentation for these standard functions. This information can now be
     found in the <span 
class="ec-lmri-10">Microchip Unified Standard Library Reference Guide</span>.</dd></dl>
<!--l. 1811--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-51000"></a>Version 2.32</h4>
<!--l. 1813--><p class="noindent" >None.
<!--l. 1815--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-52000"></a>Version 2.31</h4>
<!--l. 1817--><p class="noindent" >None.
<!--l. 1819--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-53000"></a>Version 2.30</h4>
<!--l. 1820--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Math</span><span 
class="ec-lmbx-10">&#x00A0;changes</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2017)</span> </dt><dd 
class="description">
     <!--l. 1821--><p class="noindent" >There are several things changed in <span 
class="ec-lmtt-10">&#x003C;math.h&#x003E; </span>relevant for C99 builds.</dd></dl>
     <ul class="itemize1">
     <li class="itemize">
                                                                               
                                                                               
     <!--l. 1825--><p class="noindent" >The math_errhandling macro value has changed from 2 to 1 (<span 
class="ec-lmtt-10">MATH_ERRNO</span>) meaning that
     all errors are expressed through <span 
class="ec-lmtt-10">errno</span>.
     </li>
     <li class="itemize">
     <!--l. 1827--><p class="noindent" >The <span 
class="ec-lmtt-10">clock_t</span><span 
class="ec-lmtt-10">&#x00A0;</span>typedef has changed from <span 
class="ec-lmtt-10">long </span>to <span 
class="ec-lmtt-10">unsigned</span><span 
class="ec-lmtt-10">&#x00A0;long</span>, to be consistent with
     the other XC compilers.</li></ul>
<!--l. 1831--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-54000"></a>Version 2.29 (Functional Safety Release)</h4>
<!--l. 1833--><p class="noindent" >None.
<!--l. 1835--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-55000"></a>Version 2.20</h4>
<!--l. 1836--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Hexmate</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">s</span><span 
class="ec-lmbx-10">&#x00A0;search</span><span 
class="ec-lmbx-10">&#x00A0;specification</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1883)</span> </dt><dd 
class="description">
     <!--l. 1837--><p class="noindent" >The order of the bytes in the search value used by the <span 
class="ec-lmtt-10">-FIND </span>command have been reversed
     so as to match the ordering used by the replace value and to make it easier to search for
     an opcode, for example.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Warning</span><span 
class="ec-lmbx-10">&#x00A0;on</span><span 
class="ec-lmbx-10">&#x00A0;missing</span><span 
class="ec-lmbx-10">&#x00A0;operand</span><span 
class="ec-lmbx-10">&#x00A0;(XC8E-607)</span> </dt><dd 
class="description">
     <!--l. 1841--><p class="noindent" >A warning is now issued if a PIC18 file register instruction does not specify the RAM access
     bit operand, which indicates a banked or Access bank location, e.g. <span 
class="ec-lmtt-10">,c</span>. The assembler will
     attempt to determine the destination if possible, but it is recommended that this operand
     always be specified with these assembly instructions.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Conversion</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;assembler</span><span 
class="ec-lmbx-10">&#x00A0;controls</span><span 
class="ec-lmbx-10">&#x00A0;to</span><span 
class="ec-lmbx-10">&#x00A0;directives</span><span 
class="ec-lmbx-10">&#x00A0;(XC8E-580)</span> </dt><dd 
class="description">
     <!--l. 1847--><p class="noindent" >Most of the assembler controls (<span 
class="ec-lmtt-10">OPT</span><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmri-10">control</span>) have been changed to assembler directives,
     to be more compatible with their counterparts in MPASM. The following directives are
     now supported.</dd></dl>
     <ul class="itemize1">
     <li class="itemize">
     <!--l. 1853--><p class="noindent" ><span 
class="ec-lmtt-10">[no]list</span>
     </li>
     <li class="itemize">
     <!--l. 1854--><p class="noindent" ><span 
class="ec-lmtt-10">[no]cond</span>
     </li>
     <li class="itemize">
     <!--l. 1855--><p class="noindent" ><span 
class="ec-lmtt-10">title</span>
                                                                               
                                                                               
     </li>
     <li class="itemize">
     <!--l. 1856--><p class="noindent" ><span 
class="ec-lmtt-10">subtitle</span>
     </li>
     <li class="itemize">
     <!--l. 1857--><p class="noindent" ><span 
class="ec-lmtt-10">[no]expand</span>
     </li>
     <li class="itemize">
     <!--l. 1858--><p class="noindent" ><span 
class="ec-lmtt-10">callstack</span><span 
class="ec-lmtt-10">&#x00A0;</span>(previously the <span 
class="ec-lmtt-10">OPT</span><span 
class="ec-lmtt-10">&#x00A0;stack </span>control)
     </li>
     <li class="itemize">
     <!--l. 1859--><p class="noindent" ><span 
class="ec-lmtt-10">pagelen</span>
     </li>
     <li class="itemize">
     <!--l. 1860--><p class="noindent" ><span 
class="ec-lmtt-10">pagewidth</span>
     </li>
     <li class="itemize">
     <!--l. 1861--><p class="noindent" ><span 
class="ec-lmtt-10">include</span>
     </li>
     <li class="itemize">
     <!--l. 1862--><p class="noindent" ><span 
class="ec-lmtt-10">asmopt</span>
     <!--l. 1864--><p class="noindent" >These will work as they did before, but will no longer require the use of the <span 
class="ec-lmtt-10">OPT </span>keyword.
     So, where previously you might have used <span 
class="ec-lmtt-10">OPT</span><span 
class="ec-lmtt-10">&#x00A0;TITLE</span><span 
class="ec-lmtt-10">&#x00A0;"my</span><span 
class="ec-lmtt-10">&#x00A0;Title" </span>for example, you should
     now use <span 
class="ec-lmtt-10">TITLE</span><span 
class="ec-lmtt-10">&#x00A0;"My</span><span 
class="ec-lmtt-10">&#x00A0;Title</span>". The four seperate <span 
class="ec-lmtt-10">ASMOPT_* </span>controls are now a single <span 
class="ec-lmtt-10">ASMOPT</span>
     directive that takes a parameter: <span 
class="ec-lmtt-10">ON</span>, <span 
class="ec-lmtt-10">OFF</span>, <span 
class="ec-lmtt-10">PUSH</span>, or <span 
class="ec-lmtt-10">POP</span>, so replace <span 
class="ec-lmtt-10">OPT</span><span 
class="ec-lmtt-10">&#x00A0;ASMOPT_PUSH</span>, for
     example, with <span 
class="ec-lmtt-10">ASMOPT</span><span 
class="ec-lmtt-10">&#x00A0;PUSH</span>.
     <!--l. 1873--><p class="noindent" >The previous <span 
class="ec-lmtt-10">OPT </span>controls will continue to work as they did before, but will trigger a
     warning message.</li></ul>
<!--l. 1876--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Conversion</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;branch</span><span 
class="ec-lmbx-10">&#x00A0;instructions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8E-144)</span> </dt><dd 
class="description">
     <!--l. 1877--><p class="noindent" >The  PIC18  assembler  will  no  longer  convert  a  conditional  branch  instruction  to  the
     opposite conditional branch over a branch or a skip instruction over a jump where these
     occur in hand-written assembly modules.</dd></dl>
<!--l. 1883--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-56000"></a>Version 2.19 (Functional Safety Release)</h4>
<!--l. 1885--><p class="noindent" >None.
                                                                               
                                                                               
<!--l. 1887--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-57000"></a>Version 2.10</h4>
<!--l. 1888--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Individual</span><span 
class="ec-lmbx-10">&#x00A0;device</span><span 
class="ec-lmbx-10">&#x00A0;INI</span><span 
class="ec-lmbx-10">&#x00A0;files</span> </dt><dd 
class="description">
     <!--l. 1889--><p class="noindent" >Previously, the compiler had two device INI files (one for PIC18; one for the other devices)
     that defined the architecture for all supported devices. These INI files have been split up
     so that there is one INI file for each device. This change should not require projects to be
     modified.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Legacy</span><span 
class="ec-lmbx-10">&#x00A0;config/idloc</span><span 
class="ec-lmbx-10">&#x00A0;macros</span> </dt><dd 
class="description">
     <!--l. 1894--><p class="noindent" >The configuration bit macro, <span 
class="ec-lmtt-10">__CONFIG()</span>, and ID location macro, <span 
class="ec-lmtt-10">__IDLOC()</span>, are no
     longer supported when building for C99. A warning is issued if you attempt to use them
     in this way. They are still accepted when building for C90; however, it is recommended
     that you move to the newer-stye <span 
class="ec-lmtt-10">#pragma</span><span 
class="ec-lmtt-10">&#x00A0;config</span>, if possible.</dd></dl>
<!--l. 1902--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-58000"></a>Version 2.05</h4>
<!--l. 1903--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Removal</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;macros</span> </dt><dd 
class="description">
     <!--l. 1904--><p class="noindent" >The <span 
class="ec-lmtt-10">_HTC_EDITION_ </span>and <span 
class="ec-lmtt-10">_XC8_MODE_ </span>macros are no longer defined. These macros were
     defined based on the operating mode of the compiler; however, these modes are no longer
     recognized. As an alternative, use the macros that define the optimization level, such as
     <span 
class="ec-lmtt-10">__OPTIM_LEVEL</span>.</dd></dl>
<!--l. 1911--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-59000"></a>Version 2.00</h4>
<!--l. 1912--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">PIC18</span><span 
class="ec-lmbx-10">&#x00A0;peripheral</span><span 
class="ec-lmbx-10">&#x00A0;library</span><span 
class="ec-lmbx-10">&#x00A0;support</span> </dt><dd 
class="description">
     <!--l. 1913--><p class="noindent" >The PIC18 peripheral library was removed from the compiler distribution in a previous
     release, and it had to be downloaded separately if you needed to use it for legacy projects.
     The library is now truely defunct if you are using C99 and the Clang front end, and the
     compiler will reject the option to use this library in that case. To continue to use the library
     with the C90 compiler front end, the library file must be downloaded separately. If any of
     the device SFR definitions have changed since the library was built and a redefinition error
     is produced, the library source files should be added to and compiled with your project.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">EEPROM</span><span 
class="ec-lmbx-10">&#x00A0;routines</span> </dt><dd 
class="description">
     <!--l. 1923--><p class="noindent" >Previously, declarations were provided for the <span 
class="ec-lmtt-10">memcpyee() </span>and <span 
class="ec-lmtt-10">eecpymem() </span>functions when
     building for some Baseline and mid-range devices. These routines were only intended for
                                                                               
                                                                               
     internal compiler use, however, it was possible to call these routines from your source code.
     These routines should no longer be used from your source code and declarations for them
     are no longer provided. These routines are automatically called when you access objects
     qualified with <span 
class="ec-lmtt-10">__eeprom </span>and the routines to read and write EEPROM are still provided.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Mode</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;messaging</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1745)</span> </dt><dd 
class="description">
     <!--l. 1932--><p class="noindent" >When the compiler built in Free mode, an advisory was always printed, indicating that
     compilation took place in this mode. This is no longer printed; however, a new message
     (2051) is issued whenever the compiler has been asked to run with a higher optimization
     level than that permitted by the compiler licence.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Non-standard</span><span 
class="ec-lmbx-10">&#x00A0;types</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1588)</span> </dt><dd 
class="description">
     <!--l. 1938--><p class="noindent" >The 24-bit, non-standard integer <span 
class="ec-lmtt-10">short</span><span 
class="ec-lmtt-10">&#x00A0;long</span><span 
class="ec-lmtt-10">&#x00A0;int </span>types must now be defined using the
     types <span 
class="ec-lmtt-10">__int24 </span>and <span 
class="ec-lmtt-10">__uint24 </span>when building for C99. The <span 
class="ec-lmtt-10">bit </span>type must now be specified
     as <span 
class="ec-lmtt-10">__bit</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Change</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;keywords</span> </dt><dd 
class="description">
     <!--l. 1942--><p class="noindent" >Many tokens that were mandatory only when using the CCI have been standardized when
     building for C99, even if you are not using the CCI. These include the keywords: <span 
class="ec-lmtt-10">near</span>, <span 
class="ec-lmtt-10">far</span>,
     <span 
class="ec-lmtt-10">bank</span><span 
class="ec-lmri-10">x</span>, <span 
class="ec-lmtt-10">eeprom</span>, and <span 
class="ec-lmtt-10">persistent</span>, which should be changed to <span 
class="ec-lmtt-10">__near</span>, <span 
class="ec-lmtt-10">__far</span>, <span 
class="ec-lmtt-10">__bank</span><span 
class="ec-lmri-10">x</span>,
     <span 
class="ec-lmtt-10">__eeprom</span>, and <span 
class="ec-lmtt-10">__persistent</span>, respectively, if you are using C99. The use of <span 
class="ec-lmtt-10">@</span><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmri-10">address </span>to
     specify an absolute variable or function must now be performed using the <span 
class="ec-lmtt-10">__at(</span><span 
class="ec-lmri-10">address</span><span 
class="ec-lmtt-10">)</span>
     syntax. Interrupt functions that used the <span 
class="ec-lmtt-10">interrupt </span>keyword must now be defined using
     <span 
class="ec-lmtt-10">__interrupt() </span>and the appropriate arguments.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">In-line</span><span 
class="ec-lmbx-10">&#x00A0;assembly</span> </dt><dd 
class="description">
     <!--l. 1953--><p class="noindent" >The <span 
class="ec-lmtt-10">#asm</span><span 
class="ec-lmtt-10">&#x00A0;...</span><span 
class="ec-lmtt-10">&#x00A0;#endasm </span>form of inline assembly is no longer accepted when building for
     C99. The <span 
class="ec-lmtt-10">asm() </span>form of inline assembly is now the only way to embed assembly instructions
     inline with C code.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Small</span><span 
class="ec-lmbx-10">&#x00A0;floats</span> </dt><dd 
class="description">
     <!--l. 1957--><p class="noindent" >If you are building for C99, support for 24-bit <span 
class="ec-lmtt-10">float </span>and <span 
class="ec-lmtt-10">double </span>floating-point types is
     no longer provided, and these types will be forced to 32-bits wide. If you need the smaller
     version of these types with C99, use the C90 libraries (<span 
class="ec-lmtt-10">-mc90lib </span>option).
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Default</span><span 
class="ec-lmbx-10">&#x00A0;optimization</span><span 
class="ec-lmbx-10">&#x00A0;level</span> </dt><dd 
class="description">
     <!--l. 1962--><p class="noindent" >If you build on the command line, the default optimization level has changed from the
     highest level to none. Ensure you explicitly state the optimization level you need using the
     <span 
class="ec-lmtt-10">-O </span>option. New projects in the MPLAB X IDE always specify a level and will default to
     level 0 (no optimizations).
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Predefined</span><span 
class="ec-lmbx-10">&#x00A0;macros</span> </dt><dd 
class="description">
     <!--l. 1967--><p class="noindent" >Some macros have been deprecated, such as the <span 
class="ec-lmtt-10">_HTC_VER_</span><span 
class="ec-lmri-10">xxxx</span><span 
class="ec-lmtt-10">_ </span>macros, which define the
     current version. Note also that there are several new macros defined by the compiler, such
     as <span 
class="ec-lmtt-10">__CLANG__</span>, which can be used to conditionally compile code.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Unused</span><span 
class="ec-lmbx-10">&#x00A0;function</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;(XC8E-50)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 1972--><p class="noindent" >A warning with a unique message number is now issued for unused functions that are
     specified as <span 
class="ec-lmtt-10">inline</span>. This allows these warnings to be suppressed but allowing warnings
     for regular unused functions to be emitted as usual.</dd></dl>
<!--l. 1978--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-60000"></a>Versions 1.XX</h4>
<!--l. 1980--><p class="noindent" >For information regarding migration issues relating to version 1.xx compilers, see the release notes of
any compiler version prior to v3.00.
<!--l. 1984--><p class="noindent" >
<h3 class="sectionHead"><span class="titlemark">5   </span> <a 
 id="x1-610005"></a>Fixed Issues</h3>
<!--l. 1986--><p class="noindent" >The following are corrections that have been made to the compiler. These might fix bugs in the
generated code or alter the operation of the compiler to that which was intended or specified
by the user&#8217;s guide. The version number in the subheadings indicates the first compiler
version to contain fixes for the issues that follow. The bracketed label(s) in the title are that
issue<span 
class="ts1-lmr10-">'</span>s identification in the tracking database. These may be useful if you need to contact
support.
<!--l. 1995--><p class="noindent" >Note that some device-specific issues are corrected in the Device Family Pack (DFP) associated with
the device. See the MPLAB Pack Manager for information on changes made to DFPs and to download
the latest packs.
<!--l. 2000--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-62000"></a>Version 3.00</h4>
<!--l. 2001--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">(XC8-3576)</span> </dt><dd 
class="description">
     <!--l. 2002--><p class="noindent" >When  using  the  <span 
class="ec-lmtt-10">-mcodeoffset </span>option  to  link  PIC18  applications  to  addresses  above
     0xFFFF and those applications defined less than 256 bytes of <span 
class="ec-lmtt-10">const </span>data, this data might
     have been incorrectly accessed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Wrong</span><span 
class="ec-lmbx-10">&#x00A0;access</span><span 
class="ec-lmbx-10">&#x00A0;bank</span><span 
class="ec-lmbx-10">&#x00A0;address</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3533)</span> </dt><dd 
class="description">
     <!--l. 2006--><p class="noindent" >When assigning the address of an SFR in the access bank to a pointer, the compiler might
     have assumed that the SFR was in bank 0, resulting in the wrong address being assigned.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can&#8217;t</span><span 
class="ec-lmbx-10">&#x00A0;find</span><span 
class="ec-lmbx-10">&#x00A0;far</span><span 
class="ec-lmbx-10">&#x00A0;space</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3522)</span> </dt><dd 
class="description">
     <!--l. 2010--><p class="noindent" >A <span 
class="ec-lmtt-10">can&#8217;t find space </span>linker error might have occurred for some PIC18 projects that used
     the <span 
class="ec-lmtt-10">__far </span>qualifier, even though the <span 
class="ec-lmtt-10">-maddrqual </span>option was set to ignore the qualifier.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">No</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;offset</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;Baselines</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3521)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 2014--><p class="noindent" >With Baseline devices that did not have interrupts, the <span 
class="ec-lmtt-10">-mcodeoffset </span>option did not shift
     the <span 
class="ec-lmtt-10">reset_vec </span>psect (which contains the code placed at the reset vector) as expected.
     If the targeted Baseline device did implement interrupts, the option correctly shifted the
     <span 
class="ec-lmtt-10">intentry </span>psect (which is used to hold the code executed at the interrupt vector). All
     relevant psects are now shifted if this option is used; however, note that the compiler
     will not generate the runtime startup code to initialize the oscillator from the calibration
     constant in such a case. It is expected that the code linked to the reset location (address
     0x0) will provide this functionality. This option worked as expected for all other device
     families.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Too</span><span 
class="ec-lmbx-10">&#x00A0;much</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;promotion</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3510)</span> </dt><dd 
class="description">
     <!--l. 2026--><p class="noindent" >If  the  compiler  was  invoked  with  a  <span 
class="ec-lmtt-10">-Werror=</span><span 
class="ec-lmtti-10">num </span>option,  the  Cromwell  application
     promoted all warnings it issued to errors, regardless of the warning number specified in
     the option.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;__interrupt()</span><span 
class="ec-lmbx-10">&#x00A0;arguments</span><span 
class="ec-lmbx-10">&#x00A0;accepted</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3493)</span> </dt><dd 
class="description">
     <!--l. 2030--><p class="noindent" >The  compiler  was  allowing  any  prefix  and/or  suffix  with  the  <span 
class="ec-lmtt-10">low_priority </span>and
     <span 
class="ec-lmtt-10">high_priority </span>interrupt arguments, for example <span 
class="ec-lmtt-10">__interrupt(AAhigh_priority) </span>would
     have been an acceptable substitute for <span 
class="ec-lmtt-10">__interrupt(high_priority)</span>. The compiler now
     strictly requires <span 
class="ec-lmtt-10">high_priority</span>, <span 
class="ec-lmtt-10">__high_priority</span>, <span 
class="ec-lmtt-10">low_priority</span>, or <span 
class="ec-lmtt-10">__low_priority</span>
     keywords.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;addresses</span><span 
class="ec-lmbx-10">&#x00A0;accepted</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3492)</span> </dt><dd 
class="description">
     <!--l. 2036--><p class="noindent" >The compiler was interpreting address arguments to the <span 
class="ec-lmtt-10">__at() </span>specifier as signed and
     allowing negative addresses to be passed. The compiler now expects this argument to be
     unsigned and will produce an error if a negative value is given.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bogus</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;const</span><span 
class="ec-lmbx-10">&#x00A0;parameters</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3490)</span> </dt><dd 
class="description">
     <!--l. 2041--><p class="noindent" >When projects defined function parameters as <span 
class="ec-lmtt-10">const </span>and the <span 
class="ec-lmtt-10">-maddrqual </span>option was set
     to <span 
class="ec-lmtt-10">require</span>, the compiler might have issued can&#8217;t find space memory error.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Data</span><span 
class="ec-lmbx-10">&#x00A0;corruption</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;indirect</span><span 
class="ec-lmbx-10">&#x00A0;access</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3482)</span> </dt><dd 
class="description">
     <!--l. 2045--><p class="noindent" >For projects targeting PIC18 devices, assignments that dereferenced a <span 
class="ec-lmtt-10">void </span>pointer cast
     to be a pointer to a 24-bit integer type might have resulted in corrupted data.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Cast</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;shift</span><span 
class="ec-lmbx-10">&#x00A0;operand</span><span 
class="ec-lmbx-10">&#x00A0;ignored</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3423)</span> </dt><dd 
class="description">
     <!--l. 2049--><p class="noindent" >In some circumstances, when the left-hand operand of a bit-wise right shift operator was
     cast to a larger type in order to avoid an undefined result, the compiler would ignore the
     conversion and perform the shift on the smaller type. An <span 
class="ec-lmtt-10">undefined shift </span>warning was
     issued; however, the generated code could potentially produce the undefined result. The
     compiler now correctly performs the type conversion before shifting.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Text</span><span 
class="ec-lmbx-10">&#x00A0;data</span><span 
class="ec-lmbx-10">&#x00A0;clash</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3421)</span> </dt><dd 
class="description">
     <!--l. 2056--><p class="noindent" >Building  XC8  or  PIC-AS  projects  that  linked  in  a  library  containing  more  than  one
     object-code module that defined text-based psects with the same name would incorrectly
     issue a <span 
class="ec-lmtt-10">Clash in psect text data </span>error.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Compiler</span><span 
class="ec-lmbx-10">&#x00A0;crash</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;nested</span><span 
class="ec-lmbx-10">&#x00A0;compound</span><span 
class="ec-lmbx-10">&#x00A0;literal</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3350)</span> </dt><dd 
class="description">
     <!--l. 2060--><p class="noindent" >The Clang application might have crashed when encountering code such as the following
     initialization:</dd></dl>
<!--l. 2064--><p class="noindent" >
     <dl class="list1"><dt class="list">
     </dt><dd 
class="list">
     <!--l. 2064--><p class="noindent" ><span 
class="ec-lmtt-10">struct</span><span 
class="ec-lmtt-10">&#x00A0;S</span><span 
class="ec-lmtt-10">&#x00A0;{int</span><span 
class="ec-lmtt-10">&#x00A0;x;</span><span 
class="ec-lmtt-10">&#x00A0;int</span><span 
class="ec-lmtt-10">&#x00A0;y;};</span>
     <!--l. 2067--><p class="noindent" ><span 
class="ec-lmtt-10">struct</span><span 
class="ec-lmtt-10">&#x00A0;T</span><span 
class="ec-lmtt-10">&#x00A0;{</span><span 
class="ec-lmtt-10">&#x00A0;struct</span><span 
class="ec-lmtt-10">&#x00A0;S</span><span 
class="ec-lmtt-10">&#x00A0;a;</span><span 
class="ec-lmtt-10">&#x00A0;};</span>
     <!--l. 2069--><p class="noindent" ><span 
class="ec-lmtt-10">struct</span><span 
class="ec-lmtt-10">&#x00A0;T</span><span 
class="ec-lmtt-10">&#x00A0;t</span><span 
class="ec-lmtt-10">&#x00A0;=</span><span 
class="ec-lmtt-10">&#x00A0;(struct</span><span 
class="ec-lmtt-10">&#x00A0;T)</span><span 
class="ec-lmtt-10">&#x00A0;{</span><span 
class="ec-lmtt-10">&#x00A0;.a</span><span 
class="ec-lmtt-10">&#x00A0;=</span><span 
class="ec-lmtt-10">&#x00A0;(struct</span><span 
class="ec-lmtt-10">&#x00A0;S){}</span><span 
class="ec-lmtt-10">&#x00A0;};</span></dd></dl>
<!--l. 2071--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Failure</span><span 
class="ec-lmbx-10">&#x00A0;to</span><span 
class="ec-lmbx-10">&#x00A0;open</span><span 
class="ec-lmbx-10">&#x00A0;file</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3294)</span> </dt><dd 
class="description">
     <!--l. 2072--><p class="noindent" >On rare occasions, the compiler was unable to rename some temporary files, resulting is
     errors such as <span 
class="ec-lmtt-10">unable to rename temporary </span>and <span 
class="ec-lmtt-10">(141) can&#8217;t open input file</span>. The
     Clang application has been updated and includes fixes that address issues such as this.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can&#8217;t</span><span 
class="ec-lmbx-10">&#x00A0;initialize</span><span 
class="ec-lmbx-10">&#x00A0;structures</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3280)</span> </dt><dd 
class="description">
     <!--l. 2077--><p class="noindent" >The compiler was issuing a <span 
class="ec-lmtt-10">Can&#8217;t generate code </span>error for the initialization of some
     compound structures specified as <span 
class="ec-lmtt-10">const</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;handling</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;large</span><span 
class="ec-lmbx-10">&#x00A0;enumerated</span><span 
class="ec-lmbx-10">&#x00A0;values</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3233)</span> </dt><dd 
class="description">
     <!--l. 2080--><p class="noindent" >Clang was incorrectly assuming that enumerated values larger than an <span 
class="ec-lmtt-10">int </span>would be
     promoted to a <span 
class="ec-lmtt-10">long </span>type and evaluated some expressions (such as <span 
class="ec-lmtt-10">sizeof()</span>) based on
     that assumption. If large enumerated values are encountered, they are now truncated to
     an <span 
class="ec-lmtt-10">int </span>type and a warning will be issued by the code generator.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Enumerated</span><span 
class="ec-lmbx-10">&#x00A0;values</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;promoted</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2912)</span> </dt><dd 
class="description">
     <!--l. 2086--><p class="noindent" >The  compiler  was  not  applying  the  C  language&#8217;s  default  argument  promotions  to
     enumerated values. Variadic functions, such as <span 
class="ec-lmtt-10">printf()</span>, reading arguments that were
     small enumerated values might have done so in error.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Printing</span><span 
class="ec-lmbx-10">&#x00A0;long</span><span 
class="ec-lmbx-10">&#x00A0;doubles</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2582)</span> </dt><dd 
class="description">
     <!--l. 2090--><p class="noindent" >The <span 
class="ec-lmtt-10">printf()</span>-family length modifier <span 
class="ec-lmtt-10">L </span>applied to a floating-point conversion specifier was
     ignored by the compiler. It can now be used to allow <span 
class="ec-lmtt-10">long double </span>types to be printed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Crash</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;discarding</span><span 
class="ec-lmbx-10">&#x00A0;output</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1858)</span> </dt><dd 
class="description">
     <!--l. 2094--><p class="noindent" >When the output of the compiler was specified as <span 
class="ec-lmtt-10">/dev/null</span>, the compiler issued a generic
     error message and crashed. Now a dedicated error message is issued and the compiler will
     exit gracefully.</dd></dl>
                                                                               
                                                                               
<!--l. 2100--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-63000"></a>Version 2.50</h4>
<!--l. 2101--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;inline</span><span 
class="ec-lmbx-10">&#x00A0;assembly</span><span 
class="ec-lmbx-10">&#x00A0;translations</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3432)</span> </dt><dd 
class="description">
     <!--l. 2102--><p class="noindent" >When targeting enhanced mid-range devices, the use of <span 
class="ec-lmtt-10">bra </span>instructions in inline assembly
     might have resulted in a linker fixup error after the instruction was transformed. Such
     transformations of inline assembly are no longer performed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Read</span><span 
class="ec-lmbx-10">&#x00A0;failure</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;buffers</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3413)</span> </dt><dd 
class="description">
     <!--l. 2107--><p class="noindent" >The  compiler  does  not  include  CAN  and  other  special  buffers  in  the  GPR  (General
     Purpose Register) data RAM available for the allocation of objects. However, if a pointer
     is assigned an integer value, assumed to be the address of such a buffer, dereferencing that
     pointer might read from program memory, not data memory. This issue might have been
     encountered when using <span 
class="ec-lmtt-10">memcpy()</span>, for example, and it only affects PIC18 projects.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Calls</span><span 
class="ec-lmbx-10">&#x00A0;to</span><span 
class="ec-lmbx-10">&#x00A0;NULL</span><span 
class="ec-lmbx-10">&#x00A0;pointers</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3407)</span> </dt><dd 
class="description">
     <!--l. 2114--><p class="noindent" >The improved pointer analysis performed by this release allows the compiler to more
     accurately  determine  when  function  pointers  might  hold  a  <span 
class="ec-lmtt-10">NULL </span>value  and  correctly
     refrain  from  generating  code  for  function  calls  made  using  such  pointers.  However,
     in  very  specific  circumstances  where  the  compiler  previously  issued  the  advisory
     <span 
class="ec-lmtt-10">(2098)</span><span 
class="ec-lmtt-10">&#x00A0;indirect</span><span 
class="ec-lmtt-10">&#x00A0;function</span><span 
class="ec-lmtt-10">&#x00A0;call</span><span 
class="ec-lmtt-10">&#x00A0;via</span><span 
class="ec-lmtt-10">&#x00A0;a</span><span 
class="ec-lmtt-10">&#x00A0;NULL</span><span 
class="ec-lmtt-10">&#x00A0;pointer</span><span 
class="ec-lmtt-10">&#x00A0;ignored </span>and  optimized  away
     the function call, the message will no longer be emitted and the call will be encoded. This
     might mean a slight increase in code size, but with more reliable operation.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Function</span><span 
class="ec-lmbx-10">&#x00A0;duplication</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3408)</span> </dt><dd 
class="description">
     <!--l. 2123--><p class="noindent" >The   improved   pointer   analysis   performed   by   this   release   might   result   in   the
     compiler  now  duplicating  some  compiled-stack  functions  and  issuing  the  advisory
     <span 
class="ec-lmtt-10">(1510)</span><span 
class="ec-lmtt-10">&#x00A0;non-reentrant</span><span 
class="ec-lmtt-10">&#x00A0;function</span><span 
class="ec-lmtt-10">&#x00A0;*</span><span 
class="ec-lmtt-10">&#x00A0;appears</span><span 
class="ec-lmtt-10">&#x00A0;in</span><span 
class="ec-lmtt-10">&#x00A0;multiple</span><span 
class="ec-lmtt-10">&#x00A0;call</span><span 
class="ec-lmtt-10">&#x00A0;graphs</span><span 
class="ec-lmtt-10">&#x00A0;and</span><span 
class="ec-lmtt-10">&#x00A0;has</span><span 
class="ec-lmtt-10">&#x00A0;been</span><span 
class="ec-lmtt-10">&#x00A0;duplicated</span><span 
class="ec-lmtt-10">&#x00A0;by</span><span 
class="ec-lmtt-10">&#x00A0;the</span><span 
class="ec-lmtt-10">&#x00A0;compiler</span>
     where  it  previously  did  not.  In  some  rare  instances,  this  action  might  be  redundant;
     however, the compiler will err on the side of caution.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;pointer</span><span 
class="ec-lmbx-10">&#x00A0;comparison</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3386)</span> </dt><dd 
class="description">
     <!--l. 2128--><p class="noindent" >Some projects targeting PIC18 devices might have produced "can<span 
class="ts1-lmr10-">'</span>t generate code" errors
     for  expressions  comparing  pointers.  In  rarer  instances,  such  comparisons  might  have
     compiled but produced code that corrupted memory.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Data</span><span 
class="ec-lmbx-10">&#x00A0;corruption</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;shifting</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3371)</span> </dt><dd 
class="description">
     <!--l. 2133--><p class="noindent" >For projects targeting enhanced mid-range devices, the compiler might have omitted a
     bank selection instruction when building expressions that shifted SFRs operands. This
     might have caused data corruption of an object at the same address offset in a different
     data bank.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Crash</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;const</span><span 
class="ec-lmbx-10">&#x00A0;members</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3364)</span> </dt><dd 
class="description">
     <!--l. 2138--><p class="noindent" >The use of  <span 
class="ec-lmtt-10">const </span>with structure members where the structure has been initialized via
     compound literal expressions might have caused the Clang frontend to crash.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Omission</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;indirect</span><span 
class="ec-lmbx-10">&#x00A0;call</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3356,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-3155)</span> </dt><dd 
class="description">
     <!--l. 2142--><p class="noindent" >The compiler was omitting some calls made indirectly through a function pointer. The
     message <span 
class="ec-lmtt-10">indirect</span><span 
class="ec-lmtt-10">&#x00A0;function</span><span 
class="ec-lmtt-10">&#x00A0;call</span><span 
class="ec-lmtt-10">&#x00A0;via</span><span 
class="ec-lmtt-10">&#x00A0;a</span><span 
class="ec-lmtt-10">&#x00A0;NULL</span><span 
class="ec-lmtt-10">&#x00A0;pointer</span><span 
class="ec-lmtt-10">&#x00A0;ignored </span>was emitted in this
     situation. The compiler is now correctly generating the function call graph, allowing code
     to be generated for all valid calls.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Crash</span><span 
class="ec-lmbx-10">&#x00A0;on</span><span 
class="ec-lmbx-10">&#x00A0;missing</span><span 
class="ec-lmbx-10">&#x00A0;argument</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3272)</span> </dt><dd 
class="description">
     <!--l. 2148--><p class="noindent" >Where the source code contained a function that had been prototyped with at least one
     parameter, and the function was called according to that prototype but then later called
     without any arguments, the compiler might have issued an internal fatal error.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Looping</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;allocation</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3183)</span> </dt><dd 
class="description">
     <!--l. 2153--><p class="noindent" >In                rare                circumstances,                enhanced                mid-range
     projects that indirectly accessed an object larger than a bank might have triggered an
     <span 
class="ec-lmtt-10">Internal</span><span 
class="ec-lmtt-10">&#x00A0;error</span><span 
class="ec-lmtt-10">&#x00A0;-</span><span 
class="ec-lmtt-10">&#x00A0;Looping</span><span 
class="ec-lmtt-10">&#x00A0;around</span><span 
class="ec-lmtt-10">&#x00A0;allocGlobals() </span>error when being built.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;assignment</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;shifted</span><span 
class="ec-lmbx-10">&#x00A0;value</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3172)</span> </dt><dd 
class="description">
     <!--l. 2157--><p class="noindent" >In  PIC18  projects  that  contained  an  assignment  of  a  multiplication  by  2  (which  the
     compiler optimizer converted to a left bitwise shift), and if the assignment was to an object
     larger than a bank, the result might have been written to the wrong location.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Memory</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;const</span><span 
class="ec-lmbx-10">&#x00A0;caching</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2983)</span> </dt><dd 
class="description">
     <!--l. 2162--><p class="noindent" >When building large projects that contained <span 
class="ec-lmtt-10">const </span>arrays of pointers to <span 
class="ec-lmtt-10">const </span>and the
     cache const feature was active, the compiler might have exited with a <span 
class="ec-lmtt-10">can</span><span 
class="ts1-lmtt10-">'</span><span 
class="ec-lmtt-10">t</span><span 
class="ec-lmtt-10">&#x00A0;find</span><span 
class="ec-lmtt-10">&#x00A0;space</span>
     memory error.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bogus</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;reserving</span><span 
class="ec-lmbx-10">&#x00A0;memory</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2482)</span> </dt><dd 
class="description">
     <!--l. 2167--><p class="noindent" >When an entire region of memory (such as a data bank) was reserved (e.g. using the <span 
class="ec-lmtt-10">-mram</span>
     option) and an externally defined object was located in that reserved region, the compiler
     was always issuing the warning, <span 
class="ec-lmtt-10">2028</span><span 
class="ec-lmtt-10">&#x00A0;external</span><span 
class="ec-lmtt-10">&#x00A0;declaration</span><span 
class="ec-lmtt-10">&#x00A0;for</span><span 
class="ec-lmtt-10">&#x00A0;identifier</span><span 
class="ec-lmtt-10">&#x00A0;"*"</span><span 
class="ec-lmtt-10">&#x00A0;doesn</span><span 
class="ts1-lmtt10-">'</span><span 
class="ec-lmtt-10">t</span><span 
class="ec-lmtt-10">&#x00A0;indicate</span><span 
class="ec-lmtt-10">&#x00A0;storage</span><span 
class="ec-lmtt-10">&#x00A0;location</span>,
     despite the usage of the appropriate storage specifier.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">More</span><span 
class="ec-lmbx-10">&#x00A0;allocation</span><span 
class="ec-lmbx-10">&#x00A0;looping</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2324,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-1964)</span> </dt><dd 
class="description">
     <!--l. 2173--><p class="noindent" >In projects using enhanced mid-range or PIC18 that called functions with a pointer as a
     parameter, the code generator might have encountered an issue and exited, displaying an
     <span 
class="ec-lmtt-10">Internal</span><span 
class="ec-lmtt-10">&#x00A0;error</span><span 
class="ec-lmtt-10">&#x00A0;-</span><span 
class="ec-lmtt-10">&#x00A0;Looping</span><span 
class="ec-lmtt-10">&#x00A0;around</span><span 
class="ec-lmtt-10">&#x00A0;allocGlobals() </span>error message.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Crash</span><span 
class="ec-lmbx-10">&#x00A0;on</span><span 
class="ec-lmbx-10">&#x00A0;recursion</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2309)</span> </dt><dd 
class="description">
     <!--l. 2178--><p class="noindent" >Programs that contained recursion and used the compiled stack might have caused the
     code-generator to crash.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Viewing</span><span 
class="ec-lmbx-10">&#x00A0;pointer</span><span 
class="ec-lmbx-10">&#x00A0;targets</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;the</span><span 
class="ec-lmbx-10">&#x00A0;IDE</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1758)</span> </dt><dd 
class="description">
     <!--l. 2181--><p class="noindent" >When debugging enhanced mid-range projects that included structures with members that
     were pointers, the MPLAB X IDE might have shown incorrect values for the member
     pointer targets in its debugger views.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Corrupted</span><span 
class="ec-lmbx-10">&#x00A0;return</span><span 
class="ec-lmbx-10">&#x00A0;value</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1646)</span> </dt><dd 
class="description">
     <!--l. 2185--><p class="noindent" >In projects targeting enhanced mid-range devices that included a function that took a
     single byte-sized parameter and returned a type larger than a byte, insufficient memory
     might  not  have  been  reserved  for  the  return  value,  which  could  then  have  become
     corrupted.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Yet</span><span 
class="ec-lmbx-10">&#x00A0;more</span><span 
class="ec-lmbx-10">&#x00A0;allocation</span><span 
class="ec-lmbx-10">&#x00A0;looping</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1607)</span> </dt><dd 
class="description">
     <!--l. 2190--><p class="noindent" >PIC18 projects that made heavy use of pointers and that enabled the local optimization
     feature might have triggered an <span 
class="ec-lmtt-10">Internal</span><span 
class="ec-lmtt-10">&#x00A0;error</span><span 
class="ec-lmtt-10">&#x00A0;-</span><span 
class="ec-lmtt-10">&#x00A0;Looping</span><span 
class="ec-lmtt-10">&#x00A0;around</span><span 
class="ec-lmtt-10">&#x00A0;allocGlobals()</span>
     error when being built.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Pointer</span><span 
class="ec-lmbx-10">&#x00A0;made</span><span 
class="ec-lmbx-10">&#x00A0;too</span><span 
class="ec-lmbx-10">&#x00A0;small</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1450,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-1287)</span> </dt><dd 
class="description">
     <!--l. 2194--><p class="noindent" >Projects targeting enhanced mid-range devices with more than 16 banks of RAM and
     that used structure members that were pointers to other structures linked at an address
     requiring a two-byte pointer, might have failed to run correctly due to the structure pointer
     being made one byte in size.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Error</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;interrupt</span><span 
class="ec-lmbx-10">&#x00A0;pragma</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1303)</span> </dt><dd 
class="description">
     <!--l. 2199--><p class="noindent" >Projects  that  targeted  enhanced  mid-range  devices  and  that  made  use  of  the
     <span 
class="ec-lmtt-10">interrupt_level </span>pragma  might  have  triggered  an  internal  error  when  being  built,
     indicating <span 
class="ec-lmtt-10">Internal</span><span 
class="ec-lmtt-10">&#x00A0;error</span><span 
class="ec-lmtt-10">&#x00A0;-</span><span 
class="ec-lmtt-10">&#x00A0;no</span><span 
class="ec-lmtt-10">&#x00A0;stack</span><span 
class="ec-lmtt-10">&#x00A0;allocated</span><span 
class="ec-lmtt-10">&#x00A0;to</span><span 
class="ec-lmtt-10">&#x00A0;function</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Call</span><span 
class="ec-lmbx-10">&#x00A0;expression</span><span 
class="ec-lmbx-10">&#x00A0;as</span><span 
class="ec-lmbx-10">&#x00A0;argument</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1055)</span> </dt><dd 
class="description">
     <!--l. 2203--><p class="noindent" >Projects  targeting  enhanced  mid-range  devices  might  have  encountered  issues  when
     being   built.   Specifically,   if   a   project   contained   function   calls   with   arguments
     that  were  themselves  function  calls  or  calls  to  an  internal  library  routine,  an
     <span 
class="ec-lmtt-10">Internal</span><span 
class="ec-lmtt-10">&#x00A0;error</span><span 
class="ec-lmtt-10">&#x00A0;-</span><span 
class="ec-lmtt-10">&#x00A0;no</span><span 
class="ec-lmtt-10">&#x00A0;stack</span><span 
class="ec-lmtt-10">&#x00A0;allocated</span><span 
class="ec-lmtt-10">&#x00A0;to</span><span 
class="ec-lmtt-10">&#x00A0;function </span>might have been triggered.</dd></dl>
<!--l. 2211--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-64000"></a>Version 2.49 (Functional Safety Release)</h4>
<!--l. 2213--><p class="noindent" >None.
<!--l. 2215--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-65000"></a>Version 2.46</h4>
<!--l. 2216--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Removed</span><span 
class="ec-lmbx-10">&#x00A0;instructions</span><span 
class="ec-lmbx-10">&#x00A0;acting</span><span 
class="ec-lmbx-10">&#x00A0;on</span><span 
class="ec-lmbx-10">&#x00A0;BSR</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3253)</span> </dt><dd 
class="description">
     <!--l. 2217--><p class="noindent" >For  projects  targeting  enhanced  mid-range  devices  that  had  assembly  optimizations
     enabled,  where  there  were  consecutive  instructions  in  hand-written  assembly  modules
     or inline assembly that had BSR as an operand, the assembler optimizer might have
     incorrectly removed one or more of these instructions.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Tris</span><span 
class="ec-lmbx-10">&#x00A0;oversight</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3216)</span> </dt><dd 
class="description">
     <!--l. 2223--><p class="noindent" >The internal compiler assembler and PIC-AS incorrectly reported that the <span 
class="ec-lmtt-10">tris </span>instruction
     was illegal for enhanced mid-range targets. This instruction is now permitted with these
     devices.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Temps</span><span 
class="ec-lmbx-10">&#x00A0;moved</span><span 
class="ec-lmbx-10">&#x00A0;the</span><span 
class="ec-lmbx-10">&#x00A0;long</span><span 
class="ec-lmbx-10">&#x00A0;way</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3217)</span> </dt><dd 
class="description">
     <!--l. 2227--><p class="noindent" >The <span 
class="ec-lmtt-10">lowdata </span>psect flag was missing from the compiler-supplied <span 
class="ec-lmtt-10">temp </span>psect when building
     for PIC18 devices. This meant that any <span 
class="ec-lmtt-10">movff </span>pseudo instructions that operated on any
     temp objects (<span 
class="ec-lmtt-10">btemp </span>symbol) might have been transformed into the long-form <span 
class="ec-lmtt-10">movffl</span>
     instruction, unnecessarily increasing code size.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Headers</span><span 
class="ec-lmbx-10">&#x00A0;removed</span><span 
class="ec-lmbx-10">&#x00A0;from</span><span 
class="ec-lmbx-10">&#x00A0;DFP</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3167)</span> </dt><dd 
class="description">
     <!--l. 2233--><p class="noindent" >The                      <span 
class="ec-lmtt-10">&#x003C;__at.h</span>&#x003E;,                      <span 
class="ec-lmtt-10">&#x003C;builtins.h</span>&#x003E;,                      <span 
class="ec-lmtt-10">&#x003C;cci.h</span>&#x003E;,
     <span 
class="ec-lmtt-10">&#x003C;errata.h</span>&#x003E;, <span 
class="ec-lmtt-10">&#x003C;htc.h</span>&#x003E;, <span 
class="ec-lmtt-10">&#x003C;language_support.h</span>&#x003E;, <span 
class="ec-lmtt-10">&#x003C;xc.h</span>&#x003E;, and <span 
class="ec-lmtt-10">&#x003C;xc.inc&#x003E; </span>header files are
     no longer included in Device Family Packs (DFPs).&#x00A0;&#x00A0;These headers are not relevant at
     the DFP level and are more specific to a compiler version. This change will not affect most
     projects; however, it might correct situations where building with a new compiler but an
     old DFP prevented access to new compiler features.</dd></dl>
<!--l. 2243--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-66000"></a>Version 2.45</h4>
<!--l. 2244--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Roaming</span><span 
class="ec-lmbx-10">&#x00A0;license</span><span 
class="ec-lmbx-10">&#x00A0;failure</span><span 
class="ec-lmbx-10">&#x00A0;(XCLM-235)</span> </dt><dd 
class="description">
     <!--l. 2245--><p class="noindent" >Roamed licenses failed to work correctly on Linux platforms using glibc versions later than
     2.28.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Fixup</span><span 
class="ec-lmbx-10">&#x00A0;on</span><span 
class="ec-lmbx-10">&#x00A0;GOTOs</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3147)</span> </dt><dd 
class="description">
     <!--l. 2248--><p class="noindent" >The  PIC  Assembler  was  not  always  processing  the  operand  to  the  <span 
class="ec-lmtt-10">GOTO </span>instruction
     correctly. This might have resulted in hand-written assembly code for Mid-range and
     Baseline devices that used this instruction triggering fixup errors. One consequence of
     the fix for this issue is that instructions like <span 
class="ec-lmtt-10">GOTO</span><span 
class="ec-lmtt-10">&#x00A0;$+</span><span 
class="ec-lmri-10">offset </span>will trigger a fixup error if
     this instruction is located in any but the lowest page of memory. The operand for this
     instruction would need to be masked to avoid the error. Fixup errors like this can also
     be avoided entirely in hand-written assembly code by using the <span 
class="ec-lmtt-10">-Wl,--fixupoverflow</span>
     option.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Crash</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;generating</span><span 
class="ec-lmbx-10">&#x00A0;SHA</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3146)</span> </dt><dd 
class="description">
     <!--l. 2258--><p class="noindent" >When the compiler was instructed to write summaries to a file and compute a SHA hash
     of the generated HEX-file, it might have resulted in the driver crashing. Now, the compiler
     will write any computed SHA1 or SHA256 to a separate file (using <span 
class="ec-lmtt-10">.sha1 </span>or <span 
class="ec-lmtt-10">.sha256</span>
     extensions respectively).
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Undefined</span><span 
class="ec-lmbx-10">&#x00A0;symbol</span><span 
class="ec-lmbx-10">&#x00A0;on</span><span 
class="ec-lmbx-10">&#x00A0;indirect</span><span 
class="ec-lmbx-10">&#x00A0;call</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3124,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-3085)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 2263--><p class="noindent" >In certain circumstances when using the compiled stack, making an indirect function call
     using an unassigned function pointer that is a member of a structure, might have caused
     a compiler error for an undefined and unrecognizable symbol.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Hexmate</span><span 
class="ec-lmbx-10">&#x00A0;range</span><span 
class="ec-lmbx-10">&#x00A0;restriction</span><span 
class="ec-lmbx-10">&#x00A0;gives</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3123)</span> </dt><dd 
class="description">
     <!--l. 2268--><p class="noindent" >In some cases, an input HEX file range restriction specified with unqualified hexadecimal
     addresses starting at zero (for example, <span 
class="ec-lmtt-10">r0-b,input.hex</span>) could have been misinterpreted
     by Hexmate, resulting in an error, <span 
class="ec-lmtt-10">cannot</span><span 
class="ec-lmtt-10">&#x00A0;determine</span><span 
class="ec-lmtt-10">&#x00A0;start</span><span 
class="ec-lmtt-10">&#x00A0;address</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Limited</span><span 
class="ec-lmbx-10">&#x00A0;irq</span><span 
class="ec-lmbx-10">&#x00A0;arguments</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3122)</span> </dt><dd 
class="description">
     <!--l. 2273--><p class="noindent" >The compiler did not allow all forms of C-style integer radices for values given to the
     <span 
class="ec-lmtt-10">__irq() </span>argument to <span 
class="ec-lmtt-10">__interrupt()</span>, for example 31 was accepted, but 0x1F was not.
     All usual radices can now be used for this argument.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Crash</span><span 
class="ec-lmbx-10">&#x00A0;on</span><span 
class="ec-lmbx-10">&#x00A0;unterminated</span><span 
class="ec-lmbx-10">&#x00A0;macro</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3113)</span> </dt><dd 
class="description">
     <!--l. 2277--><p class="noindent" >The PIC Assembler might have exited with an out of memory error if processing assembly
     source that defined a macro without an <span 
class="ec-lmtt-10">ENDM </span>end macro directive.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Indirect</span><span 
class="ec-lmbx-10">&#x00A0;calls</span><span 
class="ec-lmbx-10">&#x00A0;ignored</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3096)</span> </dt><dd 
class="description">
     <!--l. 2280--><p class="noindent" >For code that involved indirect calls using function pointers defined in structures, the
     compiler might have issued an <span 
class="ec-lmtt-10">indirect</span><span 
class="ec-lmtt-10">&#x00A0;function</span><span 
class="ec-lmtt-10">&#x00A0;call</span><span 
class="ec-lmtt-10">&#x00A0;via</span><span 
class="ec-lmtt-10">&#x00A0;a</span><span 
class="ec-lmtt-10">&#x00A0;NULL</span><span 
class="ec-lmtt-10">&#x00A0;pointer</span><span 
class="ec-lmtt-10">&#x00A0;ignored</span>
     message and erroneously omitted code to perform the function call.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bogus</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;library</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3094)</span> </dt><dd 
class="description">
     <!--l. 2284--><p class="noindent" >In certain circumstances, the compiler unnecessarily warned about indirect function calls
     via a NULL pointer for some standard C library code, such as <span 
class="ec-lmtt-10">atexit()</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Error</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;byte</span><span 
class="ec-lmbx-10">&#x00A0;parameters</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3084)</span> </dt><dd 
class="description">
     <!--l. 2287--><p class="noindent" >When  building  PIC18  projects  that  defined  a  function  with  a  byte-sized  parameter,
     compilation might have stopped with an error 5 (or<span 
class="ec-lmtt-10">(703)</span><span 
class="ec-lmtt-10">&#x00A0;bad</span><span 
class="ec-lmtt-10">&#x00A0;GN </span>error).
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Assembler</span><span 
class="ec-lmbx-10">&#x00A0;errors</span><span 
class="ec-lmbx-10">&#x00A0;badly</span><span 
class="ec-lmbx-10">&#x00A0;handled</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3082)</span> </dt><dd 
class="description">
     <!--l. 2290--><p class="noindent" >When converting the object code of a program to a HEX file and there was a clash in
     text data, the resulting error messages from the PIC Assembler might have been incorrect
     and the driver might not have halted execution of the toolchain. The errors have been
     improved to more accurately describe the cause of the clash, and the assembler will flag
     that it has failed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Error</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;excluding</span><span 
class="ec-lmbx-10">&#x00A0;startup</span><span 
class="ec-lmbx-10">&#x00A0;files</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3065)</span> </dt><dd 
class="description">
     <!--l. 2297--><p class="noindent" >In special cases where no startup files were requested (<span 
class="ec-lmtt-10">-Wl,-nostartfiles</span>), some linker
     options           were           not           being           specified,           resulting           in
     <span 
class="ec-lmtt-10">psect</span><span 
class="ec-lmtt-10">&#x00A0;"*"</span><span 
class="ec-lmtt-10">&#x00A0;was</span><span 
class="ec-lmtt-10">&#x00A0;never</span><span 
class="ec-lmtt-10">&#x00A0;defined,</span><span 
class="ec-lmtt-10">&#x00A0;or</span><span 
class="ec-lmtt-10">&#x00A0;is</span><span 
class="ec-lmtt-10">&#x00A0;local </span>link errors, for example.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Trivial</span><span 
class="ec-lmbx-10">&#x00A0;Clang</span><span 
class="ec-lmbx-10">&#x00A0;inconsistencies</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3058)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 2301--><p class="noindent" >The Clang (C99 parser) generated printf/scanf usage pragmas in a non-deterministic order.
     This did not adversely affect the generated code in any way, but might have resulted in
     inconsistencies across builds.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Errors</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;restricting</span><span 
class="ec-lmbx-10">&#x00A0;RAM</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3052)</span> </dt><dd 
class="description">
     <!--l. 2305--><p class="noindent" >When  restricting  the  amount  of  RAM  available  for  PIC18  devices  that  implement
     special  RAM  memory  at  high  addresses,  such  as  that  memory  used  for  CAN,  the
     compiler might have issued undefined symbol errors for the symbols <span 
class="ec-lmtt-10">__smallconst </span>and/or
     <span 
class="ec-lmtt-10">__mediumconst</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Unaccepted</span><span 
class="ec-lmbx-10">&#x00A0;interrupt</span><span 
class="ec-lmbx-10">&#x00A0;base</span><span 
class="ec-lmbx-10">&#x00A0;addresses</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3051)</span> </dt><dd 
class="description">
     <!--l. 2310--><p class="noindent" >The                              compiler                              issued                              the
     error <span 
class="ec-lmtt-10">(1318)</span><span 
class="ec-lmtt-10">&#x00A0;invalid</span><span 
class="ec-lmtt-10">&#x00A0;argument</span><span 
class="ec-lmtt-10">&#x00A0;to</span><span 
class="ec-lmtt-10">&#x00A0;attribute/specifier</span><span 
class="ec-lmtt-10">&#x00A0;"__interrupt" </span>when using
     a high value of <span 
class="ec-lmtt-10">base </span>address specified in the <span 
class="ec-lmtt-10">__interrupt() </span>construct, which was being
     treated as a signed value. These base addresses are now permitted.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Incomplete</span><span 
class="ec-lmbx-10">&#x00A0;VA</span><span 
class="ec-lmbx-10">&#x00A0;functions</span><span 
class="ec-lmbx-10">&#x00A0;cause</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3028)</span> </dt><dd 
class="description">
     <!--l. 2315--><p class="noindent" >Functions with variable argument lists that did not use <span 
class="ec-lmtt-10">va_start() </span>in the body of the
     function might have caused the compiler to exit with a <span 
class="ec-lmtt-10">looping</span><span 
class="ec-lmtt-10">&#x00A0;around</span><span 
class="ec-lmtt-10">&#x00A0;allocGlobals()</span>
     error.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Cryptic</span><span 
class="ec-lmbx-10">&#x00A0;message</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2922)</span> </dt><dd 
class="description">
     <!--l. 2319--><p class="noindent" >The Clang frontend issued a cryptic <span 
class="ec-lmtt-10">default:</span><span 
class="ec-lmtt-10">&#x00A0;Empty </span>message when encountering a null
     statement located outside a function definition. This message has been suppressed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Clang</span><span 
class="ec-lmbx-10">&#x00A0;crash</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2883)</span> </dt><dd 
class="description">
     <!--l. 2322--><p class="noindent" >The Clang frontend might have crashed when processing expressions where a string was
     placed in brackets, for example, <span 
class="ec-lmtt-10">char</span><span 
class="ec-lmtt-10">&#x00A0;c[100]</span><span 
class="ec-lmtt-10">&#x00A0;=</span><span 
class="ec-lmtt-10">&#x00A0;("Hello</span><span 
class="ec-lmtt-10">&#x00A0;World");</span>
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Advisory</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;option</span><span 
class="ec-lmbx-10">&#x00A0;is</span><span 
class="ec-lmbx-10">&#x00A0;repeated</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2705)</span> </dt><dd 
class="description">
     <!--l. 2325--><p class="noindent" >When more than one instance of some options were issued, the compiler either generated
     an error or silently ignored all but the last instance. For relevant options, the compiler will
     now issue an advisory message (2101), alerting you to the fact that the option has been
     specified multiple times. Note that some options, like the <span 
class="ec-lmtt-10">-mreserve </span>option, were intended
     to be used more than once. Their repeated use does not present conflicting information
     and will not trigger such an advisory.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Array</span><span 
class="ec-lmbx-10">&#x00A0;fails</span><span 
class="ec-lmbx-10">&#x00A0;to</span><span 
class="ec-lmbx-10">&#x00A0;build</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2445)</span> </dt><dd 
class="description">
     <!--l. 2333--><p class="noindent" >A <span 
class="ec-lmtt-10">const </span>array with exactly 0x8000 elements failed to build when using C99, yielding the
     error,&#x00A0;<span 
class="ec-lmtt-10">(740)</span><span 
class="ec-lmtt-10">&#x00A0;array</span><span 
class="ec-lmtt-10">&#x00A0;dimension</span><span 
class="ec-lmtt-10">&#x00A0;must</span><span 
class="ec-lmtt-10">&#x00A0;be</span><span 
class="ec-lmtt-10">&#x00A0;larger</span><span 
class="ec-lmtt-10">&#x00A0;than</span><span 
class="ec-lmtt-10">&#x00A0;zero</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Erroneous</span><span 
class="ec-lmbx-10">&#x00A0;pointer</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2300)</span> </dt><dd 
class="description">
     <!--l. 2336--><p class="noindent" >Mid-range   projects   that   defined   two   structures   that   differed   only   in   name
     and   with   one   structure   qualified   <span 
class="ec-lmtt-10">__eeprom  </span>might   have   triggered   error   (1402)
     <span 
class="ec-lmtt-10">a</span><span 
class="ec-lmtt-10">&#x00A0;pointer</span><span 
class="ec-lmtt-10">&#x00A0;to</span><span 
class="ec-lmtt-10">&#x00A0;eeprom</span><span 
class="ec-lmtt-10">&#x00A0;cannot</span><span 
class="ec-lmtt-10">&#x00A0;also</span><span 
class="ec-lmtt-10">&#x00A0;point</span><span 
class="ec-lmtt-10">&#x00A0;to</span><span 
class="ec-lmtt-10">&#x00A0;other</span><span 
class="ec-lmtt-10">&#x00A0;data</span><span 
class="ec-lmtt-10">&#x00A0;types  </span>if  a  pointer  was
     assigned the address of the structure in EEPROM.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Case</span><span 
class="ec-lmbx-10">&#x00A0;ranges</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;C99</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1855)</span> </dt><dd 
class="description">
     <!--l. 2340--><p class="noindent" >In previous compiler versions, the C99 Clang front end silently ignored <span 
class="ec-lmtt-10">case </span>ranges in a
     <span 
class="ec-lmtt-10">switch() </span>statement. Clang now accepts and generates code for case ranges. If the CCI is
     enabled, a warning is issued, although valid code will be produced.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Truncated</span><span 
class="ec-lmbx-10">&#x00A0;IDLOCx</span><span 
class="ec-lmbx-10">&#x00A0;values</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1570)</span> </dt><dd 
class="description">
     <!--l. 2345--><p class="noindent" >For some PIC18 devices, the <span 
class="ec-lmtt-10">IDLOC</span><span 
class="ec-lmri-10">x </span>values specified using the <span 
class="ec-lmtt-10">#pragma</span><span 
class="ec-lmtt-10">&#x00A0;config </span>directive
     were being truncated from 8 to 4 bits wide. The full <span 
class="ec-lmtt-10">IDLOC</span><span 
class="ec-lmri-10">x </span>value will now be programmed,
     provided you are using the latest DFP.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Incorrect</span><span 
class="ec-lmbx-10">&#x00A0;conflicting</span><span 
class="ec-lmbx-10">&#x00A0;structure</span><span 
class="ec-lmbx-10">&#x00A0;definition</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1407,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-3097)</span> </dt><dd 
class="description">
     <!--l. 2349--><p class="noindent" >Code that defined a structure based on another structure type that was incomplete due
     to it being located in a different module, might have caused the compiler to exit with a
     conflicting declarations error (1098).</dd></dl>
<!--l. 2356--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-67000"></a>Version 2.41</h4>
<!--l. 2357--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Dongle</span><span 
class="ec-lmbx-10">&#x00A0;issues</span><span 
class="ec-lmbx-10">&#x00A0;on</span><span 
class="ec-lmbx-10">&#x00A0;Ventura</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3088)</span> </dt><dd 
class="description">
     <!--l. 2358--><p class="noindent" >Dongles used to license the compiler might not have been properly read on macOS Ventura
     hosts, resulting in licensing failures. Changes to the XCLM license manager correct this
     issue.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Configuration</span><span 
class="ec-lmbx-10">&#x00A0;programming</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;new</span><span 
class="ec-lmbx-10">&#x00A0;devices</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3072)</span> </dt><dd 
class="description">
     <!--l. 2362--><p class="noindent" >The configuration registers for new devices that had these registers located in Data Flash
     Memory were programmed in such a way that an extra byte was located outside the
     configuration memory area. This extra byte will no longer be programmed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Linker</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;unused</span><span 
class="ec-lmbx-10">&#x00A0;absolute</span><span 
class="ec-lmbx-10">&#x00A0;functions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3068)</span> </dt><dd 
class="description">
     <!--l. 2367--><p class="noindent" >The compiler might have issued a linker error indicating that the psect associated with
     an absolute function was never defined when that absolute function was only called from
     a function that itself was never used. The names of such psects consist of the function<span 
class="ts1-lmr10-">'</span>s
     assembly-domain name sufficed with <span 
class="ec-lmtt-10">_text</span>, so for example an absolute function <span 
class="ec-lmtt-10">rv() </span>will
     be placed in a psect called <span 
class="ec-lmtt-10">_rv_text</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;memmove()</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3067)</span> </dt><dd 
class="description">
     <!--l. 2375--><p class="noindent" >For projects targeting PIC18 devices, invalid pointer comparisons between addresses in
     the <span 
class="ec-lmtt-10">memmove() </span>library function might have ignored overlapping source/destination array
     addresses. This code might additionally have triggered a <span 
class="ec-lmtt-10">can</span><span 
class="ts1-lmtt10-">'</span><span 
class="ec-lmtt-10">t</span><span 
class="ec-lmtt-10">&#x00A0;generate</span><span 
class="ec-lmtt-10">&#x00A0;code </span>error. The
     <span 
class="ec-lmtt-10">memmove() </span>library routine has been updated to ensure that memory is correctly copied for
     PIC18 devices.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Linker</span><span 
class="ec-lmbx-10">&#x00A0;crash</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3042)</span> </dt><dd 
class="description">
     <!--l. 2381--><p class="noindent" >The linker might have crashed when the object file it was linking contained linker classes
     that had no name.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;manual</span><span 
class="ec-lmbx-10">&#x00A0;relocation</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;software</span><span 
class="ec-lmbx-10">&#x00A0;stack</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3033)</span> </dt><dd 
class="description">
     <!--l. 2384--><p class="noindent" >The runtime startup code generated for PIC18 programs using a software stack initialized
     the mainline-code stack pointer with a constant literal value (calculated by the compiler)
     instead of a relocatable symbol associated with the <span 
class="ec-lmtt-10">stack </span>psect. As a result, any manual
     relocation of the <span 
class="ec-lmtt-10">stack </span>psect would have reserved memory for the stack in the desired
     location, but the stack-pointer would not have been initialized to point to this memory.
     The runtime startup code has been modified so that any manual relocation of the <span 
class="ec-lmtt-10">stack</span>
     psect is correctly honoured. Note that in normal use, where the <span 
class="ec-lmtt-10">stack </span>psect was linked
     using the default linker options, there was no code failure. Additionally, the stack pointer
     was correctly setup using the appropriate symbols when entering interrupt functions.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Undefined</span><span 
class="ec-lmbx-10">&#x00A0;symbols</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;shrouded</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3032,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-2880)</span> </dt><dd 
class="description">
     <!--l. 2398--><p class="noindent" >When using the <span 
class="ec-lmtt-10">-mshroud </span>option, the compiler might have failed to build the project,
     issuing <span 
class="ts1-lmr10-">'</span>undefined symbol<span 
class="ts1-lmr10-">' </span>errors. This option can now be used for all projects.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Wrong</span><span 
class="ec-lmbx-10">&#x00A0;assembly</span><span 
class="ec-lmbx-10">&#x00A0;debug</span><span 
class="ec-lmbx-10">&#x00A0;lines</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3027)</span> </dt><dd 
class="description">
     <!--l. 2402--><p class="noindent" >The MPLAB X IDE would indicate the incorrect source line when stepping through code
     or stopping at breakpoints set in code contained in absolute, (<span 
class="ec-lmtt-10">abs </span>flag) overlaid (<span 
class="ec-lmtt-10">ovrld</span>
     flag) psects.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Temp</span><span 
class="ec-lmbx-10">&#x00A0;files</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;unique</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3001)</span> </dt><dd 
class="description">
     <!--l. 2406--><p class="noindent" >Windows  versions  of  the  compiler  might  have  created  and  tried  to  simultaneously
     use  temporary  files  with  the  same  name  but  that  were  meant  to  hold  different
     information.  This  would  have  caused  the  build  to  fail,  possibly  with  the  error
     <span 
class="ec-lmtt-10">(398)</span><span 
class="ec-lmtt-10">&#x00A0;output</span><span 
class="ec-lmtt-10">&#x00A0;file</span><span 
class="ec-lmtt-10">&#x00A0;can</span><span 
class="ts1-lmtt10-">'</span><span 
class="ec-lmtt-10">t</span><span 
class="ec-lmtt-10">&#x00A0;be</span><span 
class="ec-lmtt-10">&#x00A0;also</span><span 
class="ec-lmtt-10">&#x00A0;an</span><span 
class="ec-lmtt-10">&#x00A0;input</span><span 
class="ec-lmtt-10">&#x00A0;file</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Watching</span><span 
class="ec-lmbx-10">&#x00A0;what?</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2980,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-2371)</span> </dt><dd 
class="description">
     <!--l. 2411--><p class="noindent" >The type information of  <span 
class="ec-lmtt-10">const-</span>qualified objects was being incorrectly indicated in the
     MPLAB X IDE watch window. This would have impeded project debugging. The code
     being generated was not adversely affected.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Better</span><span 
class="ec-lmbx-10">&#x00A0;clean</span><span 
class="ec-lmbx-10">&#x00A0;up</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2962)</span> </dt><dd 
class="description">
     <!--l. 2415--><p class="noindent" >The compiler might have left behind temporary directories and files after executing. This
     behavior was dependent on the exact host operating system under which the compiler was
     being executed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Assembly</span><span 
class="ec-lmbx-10">&#x00A0;EE</span><span 
class="ec-lmbx-10">&#x00A0;data</span><span 
class="ec-lmbx-10">&#x00A0;misplaced</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2953)</span> </dt><dd 
class="description">
     <!--l. 2419--><p class="noindent" >The <span 
class="ec-lmtt-10">edata </span>psect definition provided in the device-specific assembly include files for PIC18
     devices incorrectly specified a <span 
class="ec-lmtt-10">delta </span>value of 2 instead of 1. This would have resulted in
     any assembly output placed in this psect being located outside the valid address range of
     EEPROM data.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Truncated</span><span 
class="ec-lmbx-10">&#x00A0;vsprintf()</span><span 
class="ec-lmbx-10">&#x00A0;output</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2952)</span> </dt><dd 
class="description">
     <!--l. 2425--><p class="noindent" >In certain circumstances, the C99 <span 
class="ec-lmtt-10">vsprintf() </span>library function would truncate formatted
     output in the supplied buffer to an empty string.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Misleading</span><span 
class="ec-lmbx-10">&#x00A0;diagnostic</span><span 
class="ec-lmbx-10">&#x00A0;messages</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2950)</span> </dt><dd 
class="description">
     <!--l. 2428--><p class="noindent" >In compiler output diagnostic messages that were not associated with any particular file,
     a misleading line number might have been shown. Line number information is no longer
     shown in these situations.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;access</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;absolute</span><span 
class="ec-lmbx-10">&#x00A0;booleans</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2930)</span> </dt><dd 
class="description">
     <!--l. 2432--><p class="noindent" >Access of a <span 
class="ec-lmtt-10">_Bool </span>variable positioned at an absolute address in PIC18 projects might have
     been to the wrong address, resulting in potential code failure.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Missing</span><span 
class="ec-lmbx-10">&#x00A0;errata</span><span 
class="ec-lmbx-10">&#x00A0;indicators</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2929)</span> </dt><dd 
class="description">
     <!--l. 2435--><p class="noindent" >The compiler-supplied header <span 
class="ec-lmtt-10">&#x003C;errata.h&#x003E; </span>was missing definitions for the following PIC18
     errata: <span 
class="ec-lmtt-10">ERRATA_BRKNOP2</span>, <span 
class="ec-lmtt-10">ERRATA_NVMREG</span>, and <span 
class="ec-lmtt-10">ERRATA_BSR63</span>; and the following mid-range
     PIC errata: <span 
class="ec-lmtt-10">ERRATA_CLOCKSW </span>and <span 
class="ec-lmtt-10">ERRATA_BRANCH</span>. These are preprocessor macros that can
     be checked to see if an errata is in effect. The actual code work arounds were implemented
     correctly by the compiler.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Warnings</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;library</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2926)</span> </dt><dd 
class="description">
     <!--l. 2442--><p class="noindent" >When building C99 projects, the compiler parser might have issued warnings relating to
     compiler library code. These warnings have been suppressed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Incorrect</span><span 
class="ec-lmbx-10">&#x00A0;indication</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;memory</span><span 
class="ec-lmbx-10">&#x00A0;allocation</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2925)</span> </dt><dd 
class="description">
     <!--l. 2445--><p class="noindent" >Attempting to allocate <span 
class="ec-lmtt-10">SIZE_MAX </span>bytes (or a value close to this) of memory using the
     standard library memory management functions (<span 
class="ec-lmtt-10">malloc() </span>et al) incorrectly succeeded. It
     did not take into account that extra bytes were needed in addition to the block requested
     when using the simple dynamic memory allocation implementation. A <span 
class="ec-lmtt-10">NULL </span>pointer will
     now be returned and <span 
class="ec-lmtt-10">errno </span>set to <span 
class="ec-lmtt-10">ENOMEM </span>in such situations.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;handling</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;string</span><span 
class="ec-lmbx-10">&#x00A0;conversion</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2921,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-2652)</span> </dt><dd 
class="description">
     <!--l. 2453--><p class="noindent" >When a <span 
class="ts1-lmr10-">'</span>subject sequence<span 
class="ts1-lmr10-">' </span>for conversion by <span 
class="ec-lmtt-10">strtod() </span>contained what appeared to be a
     floating-point number in exponential format and there was an unexpected character after
     the <span 
class="ec-lmtt-10">e</span>/<span 
class="ec-lmtt-10">E </span>character, then where <span 
class="ec-lmtt-10">endptr </span>had been provided, it was assigned an address that
     had it point to the character after the <span 
class="ec-lmtt-10">e</span>/<span 
class="ec-lmtt-10">E</span>, whereas it should have been pointing to the <span 
class="ec-lmtt-10">e</span>/<span 
class="ec-lmtt-10">E</span>
     itself, since that had not been converted. For example, <span 
class="ec-lmtt-10">strtod("100exx",</span><span 
class="ec-lmtt-10">&#x00A0;&amp;ep) </span>should
     return 100.00 and set <span 
class="ec-lmtt-10">ep </span>to point to the <span 
class="ec-lmtt-10">"exx" </span>part of the string, whereas the function
     was returning the correct value but setting <span 
class="ec-lmtt-10">ep </span>to point to the <span 
class="ec-lmtt-10">"xx" </span>part of the string.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Ignore-assignment</span><span 
class="ec-lmbx-10">&#x00A0;flag</span><span 
class="ec-lmbx-10">&#x00A0;ignored</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2915)</span> </dt><dd 
class="description">
     <!--l. 2466--><p class="noindent" >The return value of C99 standard library formatted input functions such as <span 
class="ec-lmtt-10">scanf() </span>etc.,
     ignored the assignment-suppression flag (<span 
class="ec-lmtt-10">*</span>) relating to their return value.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Wrong</span><span 
class="ec-lmbx-10">&#x00A0;values</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;pointer</span><span 
class="ec-lmbx-10">&#x00A0;macros</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2914)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 2470--><p class="noindent" >The values of the standard library macros <span 
class="ec-lmtt-10">PTRDIFF_MAX </span>and <span 
class="ec-lmtt-10">PTRDIFF_MIN </span>(<span 
class="ec-lmtt-10">&#x003C;stdint.h</span>&#x003E;)
     were incorrect.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Inaccurate</span><span 
class="ec-lmbx-10">&#x00A0;fma</span><span 
class="ec-lmbx-10">&#x00A0;functions</span><span 
class="ec-lmbx-10">&#x00A0;removed</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2913)</span> </dt><dd 
class="description">
     <!--l. 2473--><p class="noindent" >The  C99  standard  library  <span 
class="ec-lmtt-10">fma()</span>-family  functions  (<span 
class="ec-lmtt-10">&#x003C;math.h</span>&#x003E;)  did  not  compute  a
     multiply-add with infinite precision to a single rounding but instead accumulated rounding
     errors with each operation. These functions have been removed from the supplied library.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;comparisons</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;NaN</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2911)</span> </dt><dd 
class="description">
     <!--l. 2478--><p class="noindent" >The C99 standard library floating-point comparison macros, for example <span 
class="ec-lmtt-10">isgreater()</span>
     and <span 
class="ec-lmtt-10">isless()</span>, with the exception of <span 
class="ec-lmtt-10">isunordered()</span>, might have given incorrect results
     if one or both of their arguments were <span 
class="ec-lmtt-10">NAN</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;infinite()</span><span 
class="ec-lmbx-10">&#x00A0;results</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2910)</span> </dt><dd 
class="description">
     <!--l. 2483--><p class="noindent" >The  C99  standard  library  floating-point  classification  function,  <span 
class="ec-lmtt-10">isfinite() </span>produced
     incorrect results for most arguments.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Warning</span><span 
class="ec-lmbx-10">&#x00A0;on</span><span 
class="ec-lmbx-10">&#x00A0;nonexistent</span><span 
class="ec-lmbx-10">&#x00A0;construct</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2909)</span> </dt><dd 
class="description">
     <!--l. 2486--><p class="noindent" >The compiler was in some circumstances incorrectly warning about a constant conditional
     branch due to the possible use of "<span 
class="ec-lmtt-10">=</span>" instead of "<span 
class="ec-lmtt-10">==</span>" where it was obvious that no such
     usage was present. In these instances, the warning issued by the compiler was in response
     to an internal representation of the optimized code. These warnings have been suppressed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Read</span><span 
class="ec-lmbx-10">&#x00A0;failure</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;no</span><span 
class="ec-lmbx-10">&#x00A0;white</span><span 
class="ec-lmbx-10">&#x00A0;space</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2906)</span> </dt><dd 
class="description">
     <!--l. 2493--><p class="noindent" >If  a  white-space  directive  (space  character(s))  was  present  in  the  format  string  used
     with the C99 library <span 
class="ec-lmtt-10">scanf() </span>functions and no white-space characters were present in
     the  input  string,  the  input  would  not  be  correctly  read.  For  example,  the  expression
     <span 
class="ec-lmtt-10">sscanf("99",</span><span 
class="ec-lmtt-10">&#x00A0;"</span><span 
class="ec-lmtt-10">&#x00A0;%d",</span><span 
class="ec-lmtt-10">&#x00A0;&amp;val) </span>was incorrectly returning 0 and not assigning the value 99
     to <span 
class="ec-lmtt-10">val</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Error</span><span 
class="ec-lmbx-10">&#x00A0;requesting</span><span 
class="ec-lmbx-10">&#x00A0;byte</span><span 
class="ec-lmbx-10">&#x00A0;hashes</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2904,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-2905)</span> </dt><dd 
class="description">
     <!--l. 2499--><p class="noindent" >When compiling for word-addressed PIC devices (mid-range and baseline) and using the
     driver<span 
class="ts1-lmr10-">'</span>s <span 
class="ec-lmtt-10">-mchecksum </span>option, if the <span 
class="ec-lmtt-10">width </span>suboption was set to 1, for example:</dd></dl>
<!--l. 2504--><p class="noindent" >
     <dl class="list1"><dt class="list">
     </dt><dd 
class="list">
     <!--l. 2504--><p class="noindent" ><span 
class="ec-lmtt-10">-mchecksum=0-7ffd@7ffe,offset=ff,width=1,algorithm=1</span>
     <!--l. 2507--><p class="noindent" >an
     assertion
     error
     might
     have
     been
     triggered.</dd></dl>
<!--l. 2509--><p class="noindent" >
                                                                               
                                                                               
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Not</span><span 
class="ec-lmbx-10">&#x00A0;honouring</span><span 
class="ec-lmbx-10">&#x00A0;zero</span><span 
class="ec-lmbx-10">&#x00A0;precision</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2903)</span> </dt><dd 
class="description">
     <!--l. 2510--><p class="noindent" >The C99 printf-family conversion-specifiers <span 
class="ec-lmtt-10">u</span>, <span 
class="ec-lmtt-10">d</span>, <span 
class="ec-lmtt-10">o</span>, and <span 
class="ec-lmtt-10">x </span>would print one digit instead of
     none when zero precision has been specified in the conversion specifier. For example, the
     expression <span 
class="ec-lmtt-10">sprintf(buf,</span><span 
class="ec-lmtt-10">&#x00A0;"%.0u",</span><span 
class="ec-lmtt-10">&#x00A0;0) </span>should print no characters to the buffer, but was
     instead printing a <span 
class="ec-lmtt-10">0 </span>character.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">No</span><span 
class="ec-lmbx-10">&#x00A0;point</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;output</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2902)</span> </dt><dd 
class="description">
     <!--l. 2517--><p class="noindent" >Some floating-point values printed with the C99 <span 
class="ec-lmtt-10">%a </span>conversion specifier would omit the
     decimal point in the output. For example, printing the value 1.0 using the conversion
     specifier <span 
class="ec-lmtt-10">%.4a </span>should yield the result <span 
class="ec-lmtt-10">0x1.0000p+0 </span>but was instead producing <span 
class="ec-lmtt-10">0x10000p+0</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">References</span><span 
class="ec-lmbx-10">&#x00A0;to</span><span 
class="ec-lmbx-10">&#x00A0;&#x003C;strings.h&#x003E;</span><span 
class="ec-lmbx-10">&#x00A0;removed</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2901)</span> </dt><dd 
class="description">
     <!--l. 2522--><p class="noindent" >The <span 
class="ec-lmtt-10">&#x003C;strings.h&#x003E; </span>header is a non-standard header that is not supported by XC8. Residual
     references to this header have been removed from the C99 standard library.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;assignment</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;NULL</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2895)</span> </dt><dd 
class="description">
     <!--l. 2526--><p class="noindent" >When building PIC18 projects, assigning <span 
class="ec-lmtt-10">NULL </span>to a function pointer might have assigned
     something other than zero in some instances.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Syntax</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;NULL</span><span 
class="ec-lmbx-10">&#x00A0;comparison</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2882)</span> </dt><dd 
class="description">
     <!--l. 2529--><p class="noindent" >The compiler might have generated a syntax error for expressions that compared a function
     pointer with the <span 
class="ec-lmtt-10">NULL </span>value.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Incorrect</span><span 
class="ec-lmbx-10">&#x00A0;integer</span><span 
class="ec-lmbx-10">&#x00A0;addition</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2878)</span> </dt><dd 
class="description">
     <!--l. 2532--><p class="noindent" >When baseline, mid-range or enhanced mid-range projects included an expression with the
     form <span 
class="ec-lmtt-10">A</span><span 
class="ec-lmtt-10">&#x00A0;=</span><span 
class="ec-lmtt-10">&#x00A0;B</span><span 
class="ec-lmtt-10">&#x00A0;+</span><span 
class="ec-lmtt-10">&#x00A0;C</span>, where <span 
class="ec-lmtt-10">A </span>was a 24- or 32-bit integer, and <span 
class="ec-lmtt-10">B </span>and <span 
class="ec-lmtt-10">C </span>were integers, for certain
     values of <span 
class="ec-lmtt-10">B </span>and <span 
class="ec-lmtt-10">C</span>, the result assigned to <span 
class="ec-lmtt-10">A </span>might have been incorrect when compiled at
     optimization levels 0, 1 or 2.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Incorrectly</span><span 
class="ec-lmbx-10">&#x00A0;formatted</span><span 
class="ec-lmbx-10">&#x00A0;zero</span><span 
class="ec-lmbx-10">&#x00A0;output</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2703)</span> </dt><dd 
class="description">
     <!--l. 2538--><p class="noindent" >The C99 standard library formatted printing functions attached a hexadecimal prefix (<span 
class="ec-lmtt-10">0x</span>
     or <span 
class="ec-lmtt-10">0X</span>) when the <span 
class="ec-lmtt-10"># </span>flag was used with hexadecimal format specifiers (<span 
class="ec-lmtt-10">x </span>or <span 
class="ec-lmtt-10">X</span>) and when
     printing a value of zero, for example <span 
class="ec-lmtt-10">%#x </span>should print <span 
class="ec-lmtt-10">0</span>, not <span 
class="ec-lmtt-10">0x0</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;conversion</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;hexadecimal</span><span 
class="ec-lmbx-10">&#x00A0;floats</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2626)</span> </dt><dd 
class="description">
     <!--l. 2544--><p class="noindent" >Functions in the <span 
class="ec-lmtt-10">strtof() </span>family and <span 
class="ec-lmtt-10">scanf() </span>family always converted a hexadecimal
     floating-point  number  missing  an  exponent  part  to  zero.  So  for  the  statement
     <span 
class="ec-lmtt-10">f</span><span 
class="ec-lmtt-10">&#x00A0;=</span><span 
class="ec-lmtt-10">&#x00A0;strtof("0x1.1",</span><span 
class="ec-lmtt-10">&#x00A0;&amp;endptr); </span>instead of assigning  <span 
class="ec-lmtt-10">f </span>the value 1.062500, it would
     assign 0. The floating-point formatted input conversions of <span 
class="ec-lmtt-10">scanf() </span>were similarly affected.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Pointer</span><span 
class="ec-lmbx-10">&#x00A0;mismatch</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;structures</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2444)</span> </dt><dd 
class="description">
     <!--l. 2551--><p class="noindent" >For enhanced mid-range projects, in some rare circumstances that involved pointers to
     structure members or member pointers, there may have been a mis-match in pointer sizes
     resulting in runtime failure.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Errors</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;IO</span><span 
class="ec-lmbx-10">&#x00A0;helpers</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2164)</span> </dt><dd 
class="description">
     <!--l. 2555--><p class="noindent" >When building using the C99 standard, conflicting declaration error messages were emitted
     when attempting to use the <span 
class="ec-lmtt-10">getch() </span>and <span 
class="ec-lmtt-10">putch() </span>IO helper functions. These functions
     are only implemented as stubs by the compiler, but their prototypes are now included by
     <span 
class="ec-lmtt-10">&#x003C;stdio.h</span>&#x003E;.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Response</span><span 
class="ec-lmbx-10">&#x00A0;to</span><span 
class="ec-lmbx-10">&#x00A0;conflicting</span><span 
class="ec-lmbx-10">&#x00A0;static</span><span 
class="ec-lmbx-10">&#x00A0;usage</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1961)</span> </dt><dd 
class="description">
     <!--l. 2560--><p class="noindent" >Functions that were declared as <span 
class="ec-lmtt-10">static </span>but that were defined without using the <span 
class="ec-lmtt-10">static</span>
     qualifier (external linkage) might have caused an undefined symbol error. The compiler
     now builds without error such functions, treating them as having internal linkage.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Undetected</span><span 
class="ec-lmbx-10">&#x00A0;undefined</span><span 
class="ec-lmbx-10">&#x00A0;symbol</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1938)</span> </dt><dd 
class="description">
     <!--l. 2565--><p class="noindent" >Depending on the order of the input C source files, an <span 
class="ec-lmtt-10">undefined</span><span 
class="ec-lmtt-10">&#x00A0;symbol </span>error might or
     might not be generated for situations where a function was defined as <span 
class="ec-lmtt-10">static </span>in one source
     file and another function with the same name was used and declared <span 
class="ec-lmtt-10">extern </span>in another
     file. As the <span 
class="ec-lmtt-10">extern </span>declaration was missing a definition, an undefined symbol error should
     have been issued at link time.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Erroneously</span><span 
class="ec-lmbx-10">&#x00A0;taking</span><span 
class="ec-lmbx-10">&#x00A0;a</span><span 
class="ec-lmbx-10">&#x00A0;pee</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1790)</span> </dt><dd 
class="description">
     <!--l. 2572--><p class="noindent" >The C99 scanf-family conversion specifiers <span 
class="ec-lmtt-10">A</span>, <span 
class="ec-lmtt-10">E</span>, <span 
class="ec-lmtt-10">F</span>, and <span 
class="ec-lmtt-10">G </span>would erroneously consume <span 
class="ec-lmtt-10">p </span>and
     <span 
class="ec-lmtt-10">P </span>characters in decimal number sequences present in the input. This issue did not affect
     the value converted for these specifiers, but subsequent conversions would not process the
     extra input characters already consumed and might assign incorrect values.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Special</span><span 
class="ec-lmbx-10">&#x00A0;numbers</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;recognised</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1789)</span> </dt><dd 
class="description">
     <!--l. 2579--><p class="noindent" >The C99 <span 
class="ec-lmtt-10">scanf()</span>-family functions<span 
class="ts1-lmr10-">' </span><span 
class="ec-lmtt-10">A</span>, <span 
class="ec-lmtt-10">E</span>, <span 
class="ec-lmtt-10">F</span>, and <span 
class="ec-lmtt-10">G </span>conversion specifiers did not recognize
     strings representing infinity or NaN, for example <span 
class="ec-lmtt-10">"inf" </span>or <span 
class="ec-lmtt-10">"nan</span>". These values are now
     correctly interpreted.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Missing</span><span 
class="ec-lmbx-10">&#x00A0;character</span><span 
class="ec-lmbx-10">&#x00A0;set</span><span 
class="ec-lmbx-10">&#x00A0;specifiers</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1785)</span> </dt><dd 
class="description">
     <!--l. 2585--><p class="noindent" >The                         C99                         <span 
class="ec-lmtt-10">scanf()</span>-family                         functions
     did not support the <span 
class="ec-lmtt-10">%[</span><span 
class="ec-lmri-10">c</span><span 
class="ec-lmtt-10">] </span>character-set conversion-specifiers, which allowed matches of a
     nonempty sequence of characters from a set of expected characters. These have now been
     implemented.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Error</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;set</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;string</span><span 
class="ec-lmbx-10">&#x00A0;conversions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1782)</span> </dt><dd 
class="description">
     <!--l. 2590--><p class="noindent" >The C99 <span 
class="ec-lmtt-10">strtod() </span>family of functions (including <span 
class="ec-lmtt-10">strtof() </span>and <span 
class="ec-lmtt-10">strtold()</span>) did not set
     <span 
class="ec-lmtt-10">errno </span>to <span 
class="ec-lmtt-10">ERANGE </span>for values outside the representable range. This action is now performed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;conversion</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;hexadecimal</span><span 
class="ec-lmbx-10">&#x00A0;floating-point</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1781)</span> </dt><dd 
class="description">
     <!--l. 2594--><p class="noindent" >The C99 <span 
class="ec-lmtt-10">scanf()</span>-family functions<span 
class="ts1-lmr10-">' </span><span 
class="ec-lmtt-10">A</span>, <span 
class="ec-lmtt-10">E</span>, <span 
class="ec-lmtt-10">F</span>, and <span 
class="ec-lmtt-10">G </span>conversion specifiers were only converting
     the leading zero of any hexadecimal floating-point constant. This resulted in an assignment
     of zero, and the remainder of the string from the <span 
class="ec-lmtt-10">x</span>/<span 
class="ec-lmtt-10">X </span>character was scanned according to
     the remainder of format string.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Indirect</span><span 
class="ec-lmbx-10">&#x00A0;calls</span><span 
class="ec-lmbx-10">&#x00A0;removed</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1368,</span><span 
class="ec-lmbx-10">&#x00A0;1947,</span><span 
class="ec-lmbx-10">&#x00A0;2658,</span><span 
class="ec-lmbx-10">&#x00A0;2669,</span><span 
class="ec-lmbx-10">&#x00A0;2738,</span><span 
class="ec-lmbx-10">&#x00A0;2782,</span><span 
class="ec-lmbx-10">&#x00A0;2837,</span><span 
class="ec-lmbx-10">&#x00A0;2981)</span> </dt><dd 
class="description">
     <!--l. 2601--><p class="noindent" >The compiler was being overly strict when comparing potential function pointer targets
     with a pointer<span 
class="ts1-lmr10-">'</span>s defined type. In some situations, insignificant albeit mismatching qualifiers
     used with function prototypes resulted in the internal assignment of some pointer targets
     (function addresses) being dismissed. This might have resulted in the compiler treating
     pointers as though they had no targets and contained <span 
class="ec-lmtt-10">NULL</span>. In such cases, indirect calls
     using the pointer might have generated no code. The comparison rules have been refined
     and indirect calls to functions now take place as expected.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">t</span><span 
class="ec-lmbx-10">&#x00A0;generate</span><span 
class="ec-lmbx-10">&#x00A0;bit</span><span 
class="ec-lmbx-10">&#x00A0;operations</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1286)</span> </dt><dd 
class="description">
     <!--l. 2611--><p class="noindent" >When building enhanced mid-range projects, the compiler was occasionally unable to
     generate code that assigned the result of a bitwise operation between 1-bit-wide bitfield
     operands to a 1-bit bitfield destination.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Clearing</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;volatile</span><span 
class="ec-lmbx-10">&#x00A0;objects</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1261)</span> </dt><dd 
class="description">
     <!--l. 2615--><p class="noindent" >Global variables qualified <span 
class="ec-lmtt-10">volatile </span>that were written to before being read were not being
     zeroed by the runtime startup code. Although this did not affect the value read by the
     program, any side effects resulting from the zeroing performed by the startup code were
     not realised. This optimization will no longer occur for <span 
class="ec-lmtt-10">volatile </span>objects.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">ICE</span><span 
class="ec-lmbx-10">&#x00A0;support</span><span 
class="ec-lmbx-10">&#x00A0;macro</span><span 
class="ec-lmbx-10">&#x00A0;clash</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1223)</span> </dt><dd 
class="description">
     <!--l. 2621--><p class="noindent" >When using a Microchip ICE debugger, the compiler might have defined macros with
     names that were in the programmer<span 
class="ts1-lmr10-">'</span>s name space. This might have caused the build to
     fail due to a clash in definition.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bogus</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;on</span><span 
class="ec-lmbx-10">&#x00A0;comparison</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1185)</span> </dt><dd 
class="description">
     <!--l. 2625--><p class="noindent" >In certain expressions that compared a signed integer with a literal value of zero, the
     compiler may have incorrectly issued a degenerate unsigned comparison (765) warning.
     This warning has been suppressed.</dd></dl>
<!--l. 2631--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-68000"></a>Version 2.40</h4>
<!--l. 2632--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;printing</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2861)</span> </dt><dd 
class="description">
     <!--l. 2633--><p class="noindent" >The  compiler  failed  to  detect  usage  of  some  C99  printf  flags  and  length  modifiers  in
     conversion specifiers when the format string passed to the formatting function was not a
     string literal and the types of the arguments to be printed were analysed. This might have
     resulted in incorrectly printed output.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bogus</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;absolute</span><span 
class="ec-lmbx-10">&#x00A0;far</span><span 
class="ec-lmbx-10">&#x00A0;objects</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2839)</span> </dt><dd 
class="description">
     <!--l. 2638--><p class="noindent" >The compiler issued a bogus warning, stating that objects were outside available data
     space, for the definition of  <span 
class="ec-lmtt-10">__far</span>-qualified objects that were made absolute using the
     <span 
class="ec-lmtt-10">__at() </span>construct. The warning will no longer appear.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;access</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;const</span><span 
class="ec-lmbx-10">&#x00A0;array</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2836)</span> </dt><dd 
class="description">
     <!--l. 2643--><p class="noindent" >Access of <span 
class="ec-lmtt-10">const</span>-qualified arrays where the index expression consisted of the subtraction
     of a literal value from a variable might have accessed data memory instead of program
     memory.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Printf-style</span><span 
class="ec-lmbx-10">&#x00A0;space</span><span 
class="ec-lmbx-10">&#x00A0;flag</span><span 
class="ec-lmbx-10">&#x00A0;ignored</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2829)</span> </dt><dd 
class="description">
     <!--l. 2647--><p class="noindent" >The space (<span 
class="ts1-lmtt10-">'</span><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ts1-lmtt10-">'</span>) and zero (<span 
class="ts1-lmtt10-">'</span><span 
class="ec-lmtt-10">0</span><span 
class="ts1-lmtt10-">'</span>) flags were ignored when used with the <span 
class="ec-lmtt-10">%e</span>, <span 
class="ec-lmtt-10">%f</span>, or <span 
class="ec-lmtt-10">%g</span>
     specifiers with printf-style IO functions, and space and zero padding was omitted from the
     output.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Printf-style</span><span 
class="ec-lmbx-10">&#x00A0;space</span><span 
class="ec-lmbx-10">&#x00A0;flag</span><span 
class="ec-lmbx-10">&#x00A0;ignored</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2828)</span> </dt><dd 
class="description">
     <!--l. 2652--><p class="noindent" >The space flag (<span 
class="ts1-lmtt10-">'</span><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ts1-lmtt10-">'</span>) was ignored when used with the <span 
class="ec-lmtt-10">%d </span>or <span 
class="ec-lmtt-10">%i </span>specifiers with printf-style
     IO functions, and space padding was omitted from the output.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Errors</span><span 
class="ec-lmbx-10">&#x00A0;printf</span><span 
class="ec-lmbx-10">&#x00A0;hexadecimal</span><span 
class="ec-lmbx-10">&#x00A0;floating</span><span 
class="ec-lmbx-10">&#x00A0;point</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2827)</span> </dt><dd 
class="description">
     <!--l. 2656--><p class="noindent" >Various issues relating to character counting, field widths, space and zero flags were present
     when using the <span 
class="ec-lmtt-10">%a </span>or <span 
class="ec-lmtt-10">%A </span>floating-point specifiers with printf-style IO functions, resulting
     in incorrect output.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;branch</span><span 
class="ec-lmbx-10">&#x00A0;targets</span><span 
class="ec-lmbx-10">&#x00A0;silently</span><span 
class="ec-lmbx-10">&#x00A0;encoded</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2824)</span> </dt><dd 
class="description">
     <!--l. 2661--><p class="noindent" >For enhanced mid-range projects, the linker did not correctly identify when the operand to
     the <span 
class="ec-lmtt-10">bra </span>instruction was out of range. This situation was most likely to affect hand-written
     assembly code. An error is now issued if erroneous branch code is encountered.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Wrong</span><span 
class="ec-lmbx-10">&#x00A0;interrupt</span><span 
class="ec-lmbx-10">&#x00A0;entry</span><span 
class="ec-lmbx-10">&#x00A0;point</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2823)</span> </dt><dd 
class="description">
     <!--l. 2666--><p class="noindent" >For PIC10/12/14/16 based projects, the <span 
class="ec-lmtt-10">intentry </span>psect, which contains the interrupt
     entry point, might not have been linked at the appropriate address when the interrupt
     function was defined in hand-written assembly code.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Build</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;on</span><span 
class="ec-lmbx-10">&#x00A0;trace</span><span 
class="ec-lmbx-10">&#x00A0;macros</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2795)</span> </dt><dd 
class="description">
     <!--l. 2670--><p class="noindent" >An undefined symbol error might have resulted when attempting debug builds of enhanced
     mid-range device projects that used any of the REALICE/ICE4 <span 
class="ec-lmtt-10">__TRACE() </span>or <span 
class="ec-lmtt-10">__LOG()</span>
     macros. These macros may now be used.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Wrong</span><span 
class="ec-lmbx-10">&#x00A0;memory</span><span 
class="ec-lmbx-10">&#x00A0;access</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;PIC18</span><span 
class="ec-lmbx-10">&#x00A0;pointers</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2781)</span> </dt><dd 
class="description">
     <!--l. 2674--><p class="noindent" >Pointers in PIC18 projects that were assigned the address of objects in program memory
     as well as objects in specialty GPR banks (such as CAN or Buffer RAM areas) when
     dereferenced would incorrectly access those GPR locations from program memory. This
     issue could affect library functions like <span 
class="ec-lmtt-10">memcpy()</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Error</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;compiled</span><span 
class="ec-lmbx-10">&#x00A0;stack</span><span 
class="ec-lmbx-10">&#x00A0;directives</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2759)</span> </dt><dd 
class="description">
     <!--l. 2680--><p class="noindent" >Use of the <span 
class="ec-lmtt-10">FNARG</span>, <span 
class="ec-lmtt-10">FNBREAK</span>, or <span 
class="ec-lmtt-10">FNINDIR </span>assembler directives in hand-written assembly code
     incorrectly caused the error <span 
class="ec-lmtt-10">unknown</span><span 
class="ec-lmtt-10">&#x00A0;FNREC</span><span 
class="ec-lmtt-10">&#x00A0;type </span>to be issued.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;remainders</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2751)</span> </dt><dd 
class="description">
     <!--l. 2684--><p class="noindent" >Certain combinations of floating-point arguments to the <span 
class="ec-lmtt-10">remquof() </span>and <span 
class="ec-lmtt-10">remainderf()</span>
     library functions gave an incorrect result.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Too</span><span 
class="ec-lmbx-10">&#x00A0;many</span><span 
class="ec-lmbx-10">&#x00A0;traces</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2741)</span> </dt><dd 
class="description">
     <!--l. 2687--><p class="noindent" >Using <span 
class="ec-lmtt-10">TRACE() </span>or <span 
class="ec-lmtt-10">LOG() </span>macros in more than one call graph in PIC18 projects resulted
     in the underlying trace functions being unnecessarily duplicated. This did not affect the
     program<span 
class="ts1-lmr10-">'</span>s or debugger<span 
class="ts1-lmr10-">'</span>s functionality, but did waste program memory.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Error</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;structure</span><span 
class="ec-lmbx-10">&#x00A0;initialization</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2736)</span> </dt><dd 
class="description">
     <!--l. 2692--><p class="noindent" >Initializing a pointer to<span 
class="ec-lmtt-10">&#x00A0;uint8_t </span>as part of a designator-list that assigns a static local
     object resulted in a post-compilation error <span 
class="ec-lmtt-10">Unable</span><span 
class="ec-lmtt-10">&#x00A0;to</span><span 
class="ec-lmtt-10">&#x00A0;find</span><span 
class="ec-lmtt-10">&#x00A0;referred</span><span 
class="ec-lmtt-10">&#x00A0;Decl</span><span 
class="ec-lmtt-10">&#x00A0;in</span><span 
class="ec-lmtt-10">&#x00A0;SymTab</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Quote</span><span 
class="ec-lmbx-10">&#x00A0;characters</span><span 
class="ec-lmbx-10">&#x00A0;stripped</span><span 
class="ec-lmbx-10">&#x00A0;from</span><span 
class="ec-lmbx-10">&#x00A0;options</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2708)</span> </dt><dd 
class="description">
     <!--l. 2696--><p class="noindent" >The  compiler  driver  was  removing  quote  characters,  even  if  they  were  escaped,  from
     command line options that might need a quoted string argument, for example, when using
     the <span 
class="ec-lmtt-10">-D </span>option. The user&#8217;s guide has been updated to show how quoted strings can be used
     with this option.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Unwarranted</span><span 
class="ec-lmbx-10">&#x00A0;conflicting</span><span 
class="ec-lmbx-10">&#x00A0;declaration</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2663)</span> </dt><dd 
class="description">
     <!--l. 2701--><p class="noindent" >The compiler might have erroneously produced a <span 
class="ec-lmtt-10">conflicting</span><span 
class="ec-lmtt-10">&#x00A0;declaration </span>error when
     encountering identical structure declarations in seperate modules and where one of these
     declarations was still incomplete.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Indescribable</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;messages</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2656)</span> </dt><dd 
class="description">
     <!--l. 2705--><p class="noindent" >On selecting a new DFP that was released after the compiler version being used, error
     messages  stating  that  an  error/warning  as  been  generated  but  that  no  description  is
     available might have been produced. The message description file is now shipped as part
     of the DFP so that new messages can be emitted in full.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">t</span><span 
class="ec-lmbx-10">&#x00A0;generate</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;structure</span><span 
class="ec-lmbx-10">&#x00A0;copy</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2643)</span> </dt><dd 
class="description">
     <!--l. 2711--><p class="noindent" >For projects targeting Baseline or (non-enhanced) mid-range devices, some expressions
     assigning  one  structure  to  another  might  have  triggered  a,  <span 
class="ec-lmtt-10">can</span><span 
class="ts1-lmtt10-">'</span><span 
class="ec-lmtt-10">t</span><span 
class="ec-lmtt-10">&#x00A0;generate</span><span 
class="ec-lmtt-10">&#x00A0;code </span>or
     <span 
class="ec-lmtt-10">registers</span><span 
class="ec-lmtt-10">&#x00A0;unavailable </span>error message.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Error</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;array</span><span 
class="ec-lmbx-10">&#x00A0;initialization</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2594,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-2595)</span> </dt><dd 
class="description">
     <!--l. 2716--><p class="noindent" >The  compiler  erroneously  issued  a  <span 
class="ec-lmtt-10">too</span><span 
class="ec-lmtt-10">&#x00A0;many</span><span 
class="ec-lmtt-10">&#x00A0;initializers </span>error  then  crashed  when
     encountering an array of structures with static storage duration that was initialized using
     a initializer list that did not initialize all the elements in the array, for example:</dd></dl>
<!--l. 2722--><p class="noindent" >
     <dl class="list1"><dt class="list">
     </dt><dd 
class="list">
                                                                               
                                                                               
     <!--l. 2722--><p class="noindent" ><span 
class="ec-lmtt-10">static</span>
     <span 
class="ec-lmtt-10">const</span>
     <span 
class="ec-lmtt-10">struct</span><span 
class="ec-lmtt-10">&#x00A0;{</span>
     <!--l. 2725--><p class="noindent" ><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmtt-10">&#x00A0;uint8_t</span>
     <span 
class="ec-lmtt-10">id;</span>
     <!--l. 2727--><p class="noindent" ><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmtt-10">&#x00A0;const</span>
     <span 
class="ec-lmtt-10">char</span>
     <span 
class="ec-lmtt-10">*</span>
     <span 
class="ec-lmtt-10">name;</span>
     <!--l. 2729--><p class="noindent" ><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmtt-10">&#x00A0;uint8_t</span>
     <span 
class="ec-lmtt-10">voltage_threshold;</span>
     <!--l. 2731--><p class="noindent" ><span 
class="ec-lmtt-10">}</span>
     <!--l. 2733--><p class="noindent" ><span 
class="ec-lmtt-10">struct_params[]</span>
     <span 
class="ec-lmtt-10">=</span>
     <span 
class="ec-lmtt-10">{</span>
     <!--l. 2735--><p class="noindent" ><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmtt-10">&#x00A0;[1]</span>
     <span 
class="ec-lmtt-10">=</span>
     <span 
class="ec-lmtt-10">{4u,</span>
     <span 
class="ec-lmtt-10">"test",</span>
     <span 
class="ec-lmtt-10">128u}</span>
     <!--l. 2737--><p class="noindent" ><span 
class="ec-lmtt-10">};</span></dd></dl>
<!--l. 2739--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Weird</span><span 
class="ec-lmbx-10">&#x00A0;non-digit</span><span 
class="ec-lmbx-10">&#x00A0;characters</span><span 
class="ec-lmbx-10">&#x00A0;printed</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2586)</span> </dt><dd 
class="description">
     <!--l. 2740--><p class="noindent" >When printing certain floating-point powers of 10 with the <span 
class="ec-lmtt-10">%f </span>specifier and C99 printf-style
     functions, the value might not have been displayed correctly, using non-digit characters
     such as a colon (<span 
class="ec-lmtt-10">:</span>) .
     </dd><dt class="description">
<span 
class="ec-lmbx-10">%F</span><span 
class="ec-lmbx-10">&#x00A0;specifier</span><span 
class="ec-lmbx-10">&#x00A0;ignored</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2583)</span> </dt><dd 
class="description">
     <!--l. 2745--><p class="noindent" >If not used alongside the <span 
class="ec-lmtt-10">%f </span>specifier, the C99 version of the printf-style conversion specifier
     <span 
class="ec-lmtt-10">%F </span>was ignored by the compiler, resulting in output being missing for that specifier.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;structure</span><span 
class="ec-lmbx-10">&#x00A0;copy</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2579)</span> </dt><dd 
class="description">
     <!--l. 2749--><p class="noindent" >For projects targeting PIC18 devices, code that assigned one structure to another via
     pointers was copied in an incorrect order when the size of the structure was between 5
     and 128 bytes, the source structure was located in program memory, and the destination
     structure was stored in RAM.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">False</span><span 
class="ec-lmbx-10">&#x00A0;cant-find-space</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2488)</span> </dt><dd 
class="description">
     <!--l. 2754--><p class="noindent" >The compiler might have incorrectly reported a <span 
class="ec-lmtt-10">can</span><span 
class="ts1-lmtt10-">'</span><span 
class="ec-lmtt-10">t</span><span 
class="ec-lmtt-10">&#x00A0;find</span><span 
class="ec-lmtt-10">&#x00A0;space </span>error relating to psects
     destined for common/Access bank memory for project code that defined one or more
     functions that took a byte-sized argument passed via the W register and where that
     argument did not need to be stored to memory.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Checksum</span><span 
class="ec-lmbx-10">&#x00A0;option</span><span 
class="ec-lmbx-10">&#x00A0;ordering</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2441)</span> </dt><dd 
class="description">
     <!--l. 2760--><p class="noindent" >An error was issued when providing a <span 
class="ec-lmtt-10">code </span>specification to the driver<span 
class="ts1-lmr10-">'</span>s <span 
class="ec-lmtt-10">-mchecksum </span>option
     in any location other than at the end of the option<span 
class="ts1-lmr10-">'</span>s specification list.
     </dd><dt class="description">
                                                                               
                                                                               
<span 
class="ec-lmbx-10">Crash</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;array</span><span 
class="ec-lmbx-10">&#x00A0;access</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2403)</span> </dt><dd 
class="description">
     <!--l. 2764--><p class="noindent" >The compiler might have crashed when encountering code where a <span 
class="ec-lmtt-10">bit </span>type was being
     used as an index to an array.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Warning</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;using</span><span 
class="ec-lmbx-10">&#x00A0;shrouded</span><span 
class="ec-lmbx-10">&#x00A0;libraries</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2375)</span> </dt><dd 
class="description">
     <!--l. 2767--><p class="noindent" >When building projects that linked libraries (*.a) created using the <span 
class="ec-lmtt-10">-mshroud </span>option, the
     warning, <span 
class="ec-lmtt-10">use</span><span 
class="ec-lmtt-10">&#x00A0;of</span><span 
class="ec-lmtt-10">&#x00A0;the</span><span 
class="ec-lmtt-10">&#x00A0;opt</span><span 
class="ec-lmtt-10">&#x00A0;control</span><span 
class="ec-lmtt-10">&#x00A0;"nolist"</span><span 
class="ec-lmtt-10">&#x00A0;is</span><span 
class="ec-lmtt-10">&#x00A0;deprecated;</span><span 
class="ec-lmtt-10">&#x00A0;use</span><span 
class="ec-lmtt-10">&#x00A0;the</span><span 
class="ec-lmtt-10">&#x00A0;corresponding</span><span 
class="ec-lmtt-10">&#x00A0;directive</span>
     was emitted. The compiler front end has been corrected to prevent producing the output
     that triggered this message.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Pointer</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;incorrectly</span><span 
class="ec-lmbx-10">&#x00A0;issued</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2315)</span> </dt><dd 
class="description">
     <!--l. 2772--><p class="noindent" >When indirectly writing to an object via a pointer, the compiler may have incorrectly
     emitted   the   warning,   <span 
class="ec-lmtt-10">pointer</span><span 
class="ec-lmtt-10">&#x00A0;used</span><span 
class="ec-lmtt-10">&#x00A0;for</span><span 
class="ec-lmtt-10">&#x00A0;writes</span><span 
class="ec-lmtt-10">&#x00A0;includes</span><span 
class="ec-lmtt-10">&#x00A0;read-only</span><span 
class="ec-lmtt-10">&#x00A0;target</span><span 
class="ec-lmtt-10">&#x00A0;"*"</span>
     when there was never any address of a read-only target assigned to the pointer.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;array</span><span 
class="ec-lmbx-10">&#x00A0;subtraction</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2286,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-2742)</span> </dt><dd 
class="description">
     <!--l. 2777--><p class="noindent" >For PIC18 projects, an incorrect result might have occurred in expressions where one
     element of an array that spanned more than one bank and is subtracted from another
     element of the same array and where the array indexes were constants.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Errors</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;using</span><span 
class="ec-lmbx-10">&#x00A0;assert()</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2191)</span> </dt><dd 
class="description">
     <!--l. 2782--><p class="noindent" >Use of the C90 implementation of the <span 
class="ec-lmtt-10">assert() </span>macro in compound statements might
     have resulted in <span 
class="ec-lmtt-10">inappropriate</span><span 
class="ec-lmtt-10">&#x00A0;"else" </span>errors being erroneously triggered.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Error</span><span 
class="ec-lmbx-10">&#x00A0;on</span><span 
class="ec-lmbx-10">&#x00A0;absolute</span><span 
class="ec-lmbx-10">&#x00A0;far</span><span 
class="ec-lmbx-10">&#x00A0;access</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2063)</span> </dt><dd 
class="description">
     <!--l. 2786--><p class="noindent" >The  compiler  issued  can<span 
class="ts1-lmr10-">'</span>t-generate-code  type  errors  for  expressions  that  accessed
     <span 
class="ec-lmtt-10">__far</span>-qualified objects that were made absolute using the <span 
class="ec-lmtt-10">__at() </span>construct. Such access
     is now permitted.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Internal</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;disabling</span><span 
class="ec-lmbx-10">&#x00A0;duplication</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1845)</span> </dt><dd 
class="description">
     <!--l. 2790--><p class="noindent" >In programs where the <span 
class="ec-lmtt-10">#pragma</span><span 
class="ec-lmtt-10">&#x00A0;interrupt_level </span>had been used to prevent function
     duplication, an internal error might have been issued.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Stricter</span><span 
class="ec-lmbx-10">&#x00A0;parameter</span><span 
class="ec-lmbx-10">&#x00A0;checking</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1815)</span> </dt><dd 
class="description">
     <!--l. 2793--><p class="noindent" >When the number of arguments passed to a function does not match its prototype, the
     compiler might have output a warning to this effect but might have subsequently output
     a  <span 
class="ec-lmtt-10">looping</span><span 
class="ec-lmtt-10">&#x00A0;around</span><span 
class="ec-lmtt-10">&#x00A0;allocGlobals </span>error.  Except  for  externally  defined  functions,  the
     compiler will now treat a mismatch in argument number as an error and output the message
     <span 
class="ec-lmtt-10">number</span><span 
class="ec-lmtt-10">&#x00A0;of</span><span 
class="ec-lmtt-10">&#x00A0;arguments</span><span 
class="ec-lmtt-10">&#x00A0;passed</span><span 
class="ec-lmtt-10">&#x00A0;to</span><span 
class="ec-lmtt-10">&#x00A0;function</span><span 
class="ec-lmtt-10">&#x00A0;"%s"</span><span 
class="ec-lmtt-10">&#x00A0;does</span><span 
class="ec-lmtt-10">&#x00A0;not</span><span 
class="ec-lmtt-10">&#x00A0;match</span><span 
class="ec-lmtt-10">&#x00A0;function</span><span 
class="ts1-lmtt10-">'</span><span 
class="ec-lmtt-10">s</span><span 
class="ec-lmtt-10">&#x00A0;prototype</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Warning</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;absolute</span><span 
class="ec-lmbx-10">&#x00A0;functions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1808)</span> </dt><dd 
class="description">
     <!--l. 2799--><p class="noindent" >When positioning the __at() construct after a function<span 
class="ts1-lmr10-">'</span>s name for C99 projects, the
     compiler may have given the warning, <span 
class="ec-lmtt-10">GCC</span><span 
class="ec-lmtt-10">&#x00A0;does</span><span 
class="ec-lmtt-10">&#x00A0;not</span><span 
class="ec-lmtt-10">&#x00A0;allow</span><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ts1-lmtt10-">'</span><span 
class="ec-lmtt-10">address</span><span 
class="ts1-lmtt10-">'</span><span 
class="ec-lmtt-10">&#x00A0;attribute</span><span 
class="ec-lmtt-10">&#x00A0;in</span><span 
class="ec-lmtt-10">&#x00A0;this</span><span 
class="ec-lmtt-10">&#x00A0;position</span><span 
class="ec-lmtt-10">&#x00A0;on</span><span 
class="ec-lmtt-10">&#x00A0;a</span><span 
class="ec-lmtt-10">&#x00A0;function</span><span 
class="ec-lmtt-10">&#x00A0;definition</span><span 
class="ec-lmtt-10">&#x00A0;[-Wgcc-compat]</span>.
     This form of absolute function definition was and remains valid, and it is now accepted
     without warning.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;access</span><span 
class="ec-lmbx-10">&#x00A0;config</span><span 
class="ec-lmbx-10">&#x00A0;words</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1592)</span> </dt><dd 
class="description">
     <!--l. 2804--><p class="noindent" >Some expressions in PIC18 projects that involved accessed the configuration words using
     the TBLPTR registers might have resulted in a <span 
class="ec-lmtt-10">truncation</span><span 
class="ec-lmtt-10">&#x00A0;of</span><span 
class="ec-lmtt-10">&#x00A0;operand</span><span 
class="ec-lmtt-10">&#x00A0;value </span>warning
     being issued and incorrect code being generated.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Warning</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;variable</span><span 
class="ec-lmbx-10">&#x00A0;argument</span><span 
class="ec-lmbx-10">&#x00A0;lists</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1535,</span> </dt><dd 
class="description">
     <!--l. 2808--><p class="noindent" >XC8-2139) Use of the <span 
class="ec-lmtt-10">va_start() </span>macro might have incorrectly caused the compiler to
     emit the warning, <span 
class="ec-lmtt-10">arithmetic</span><span 
class="ec-lmtt-10">&#x00A0;on</span><span 
class="ec-lmtt-10">&#x00A0;pointer</span><span 
class="ec-lmtt-10">&#x00A0;to</span><span 
class="ec-lmtt-10">&#x00A0;void</span><span 
class="ec-lmtt-10">&#x00A0;yields</span><span 
class="ec-lmtt-10">&#x00A0;Undefined</span><span 
class="ec-lmtt-10">&#x00A0;Behavior</span>.</dd></dl>
<!--l. 2813--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-69000"></a>Version 2.39 (Functional Safety Release)</h4>
<!--l. 2815--><p class="noindent" >None.
<!--l. 2817--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-70000"></a>Version 2.36</h4>
<!--l. 2819--><p class="noindent" >None.
<!--l. 2821--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-71000"></a>Version 2.35</h4>
<!--l. 2822--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Hexadecimal</span><span 
class="ec-lmbx-10">&#x00A0;stack</span><span 
class="ec-lmbx-10">&#x00A0;size</span><span 
class="ec-lmbx-10">&#x00A0;ignored</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2697)</span> </dt><dd 
class="description">
     <!--l. 2823--><p class="noindent" >The driver silently ignored the <span 
class="ec-lmtt-10">-mstack </span>option when the stack size was specified using the
     hexadecimal prefix <span 
class="ec-lmtt-10">0x</span>. Now, the driver will strictly enforce that the number be a decimal
     format. If it is not, a warning will be issued and the size will default to <span 
class="ec-lmtt-10">auto </span>for the
     relevant stack.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">errno</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;being</span><span 
class="ec-lmbx-10">&#x00A0;set</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2682)</span> </dt><dd 
class="description">
     <!--l. 2829--><p class="noindent" >Several <span 
class="ec-lmtt-10">&#x003C;math.h&#x003E; </span>functions (for example <span 
class="ec-lmtt-10">acos()</span>) were not setting the <span 
class="ec-lmtt-10">errno </span>object when
     required, such as on a domain error. These functions now set <span 
class="ec-lmtt-10">errno </span>when required by the
     C99 language standard.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Automatic</span><span 
class="ec-lmbx-10">&#x00A0;reservations</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2676)</span> </dt><dd 
class="description">
     <!--l. 2833--><p class="noindent" >If a size has not been specified for either the reentrant stacks or the heap, the compiler
     will silently reserve all remaining memory for this purpose. Now an advisory message is
     emitted to indicate that this has taken place.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Software</span><span 
class="ec-lmbx-10">&#x00A0;stack</span><span 
class="ec-lmbx-10">&#x00A0;reservation</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2675)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 2837--><p class="noindent" >For projects targeting enhanced mid-range devices, if there are reentrant functions that
     are called only from an interrupt (not from main-line code), memory will be reserved for
     the software stack using by main-line code but not for the software stack using by interrupt
     code.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Restricted</span><span 
class="ec-lmbx-10">&#x00A0;call</span><span 
class="ec-lmbx-10">&#x00A0;destinations</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2665)</span> </dt><dd 
class="description">
     <!--l. 2842--><p class="noindent" >The PIC Assembler was encoding the <span 
class="ec-lmtt-10">call </span>instruction with its operand XORed in an
     expression that ensured it could not be used to call a destination in a different page. This
     was the intended operation for calls generated from C code, but not for hand-written
     assembly code written for the PIC assembler. The <span 
class="ec-lmtt-10">call </span>instruction is now encoded exactly
     as specified in the assembly source. To call destinations in another page, use the <span 
class="ec-lmtt-10">PAGESEL</span>
     directive and mask the address. A new <span 
class="ec-lmtt-10">PAGEMASK() </span>direction can do this. Alternatively,
     use the <span 
class="ec-lmtt-10">fcall </span>instruction.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bogus</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;corruption</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2659)</span> </dt><dd 
class="description">
     <!--l. 2852--><p class="noindent" >The     compiler     may     have     unnecessarily     issued     warning     message     1481
     (<span 
class="ec-lmtt-10">call</span><span 
class="ec-lmtt-10">&#x00A0;from</span><span 
class="ec-lmtt-10">&#x00A0;non-reentrant</span><span 
class="ec-lmtt-10">&#x00A0;function,</span><span 
class="ec-lmtt-10">&#x00A0;"*",</span><span 
class="ec-lmtt-10">&#x00A0;to</span><span 
class="ec-lmtt-10">&#x00A0;"*"</span><span 
class="ec-lmtt-10">&#x00A0;might</span><span 
class="ec-lmtt-10">&#x00A0;corrupt</span><span 
class="ec-lmtt-10">&#x00A0;parameters</span>) for
     functions that were not be affected by this issue.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">MB_CUR_MAX</span><span 
class="ec-lmbx-10">&#x00A0;macro</span><span 
class="ec-lmbx-10">&#x00A0;undefined</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2657)</span> </dt><dd 
class="description">
     <!--l. 2855--><p class="noindent" >The <span 
class="ec-lmtt-10">MB_CUR_MAX </span>macro (the maximum number of bytes in a multibyte character in the
     current locale) was undefined. It is now defined to be the value 1.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;optimization</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;single</span><span 
class="ec-lmbx-10">&#x00A0;instruction</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2655)</span> </dt><dd 
class="description">
     <!--l. 2858--><p class="noindent" >For projects targeting PIC18 devices and that used optimization level <span 
class="ec-lmtt-10">3 </span>or <span 
class="ec-lmtt-10">s</span>, any functions
     that were called from an interrupt and main-line code and that used the compiled stack and
     contained code that could be compiled to a single instruction (for example, <span 
class="ec-lmtt-10">return</span><span 
class="ec-lmtt-10">&#x00A0;5;</span>), the
     compiler might have performed optimizations that result in the application not functioning
     correctly.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Lack</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;warnings</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2654)</span> </dt><dd 
class="description">
     <!--l. 2865--><p class="noindent" >No preprocessor <span 
class="ec-lmtt-10">#warning </span>warning messages were issued for PIC-AS assembler source files
     using the C preprocessor.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;assembly</span><span 
class="ec-lmbx-10">&#x00A0;debug</span><span 
class="ec-lmbx-10">&#x00A0;information</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2645)</span> </dt><dd 
class="description">
     <!--l. 2868--><p class="noindent" >When  building  assembly  projects  targeting  PIC10/12/16  devices,  the  linker  would
     miscalculate the address associated with some lines of code within a psect that appears
     in more than one module. This would only affect debugging (such as setting breakpoints)
     and not the functionality of the assembled code.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">LIST</span><span 
class="ec-lmbx-10">&#x00A0;lacking</span><span 
class="ec-lmbx-10">&#x00A0;processor</span><span 
class="ec-lmbx-10">&#x00A0;option</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2625)</span> </dt><dd 
class="description">
     <!--l. 2874--><p class="noindent" >The assembler<span 
class="ts1-lmr10-">'</span>s <span 
class="ec-lmtt-10">LIST </span>directive was not allowing the processor to be specified using the
     <span 
class="ec-lmtt-10">p=</span><span 
class="ec-lmri-10">device </span>argument. This is now permitted.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Errors</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;building</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;REALICE</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2623)</span> </dt><dd 
class="description">
     <!--l. 2877--><p class="noindent" >For projects using the C99 language standard and targeting an enhanced mid-range device,
                                                                               
                                                                               
     use of the <span 
class="ec-lmtt-10">-mdebbugger=realice </span>option might have triggered multiple errors relating to
     trace functionality.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Align</span><span 
class="ec-lmbx-10">&#x00A0;directive</span><span 
class="ec-lmbx-10">&#x00A0;breaking</span><span 
class="ec-lmbx-10">&#x00A0;debugging</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2618)</span> </dt><dd 
class="description">
     <!--l. 2881--><p class="noindent" >Usage of the <span 
class="ec-lmtt-10">ALIGN </span>directive in a PIC-AS project might have caused incorrect line number
     information to be included in the ELF/DWARF file. This issue only affected debugging
     and did not result in any runtime failure.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Invalid</span><span 
class="ec-lmbx-10">&#x00A0;instruction</span><span 
class="ec-lmbx-10">&#x00A0;accepted</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2614,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-1956)</span> </dt><dd 
class="description">
     <!--l. 2885--><p class="noindent" >The assembler incorrectly allowed a destination register to be specified with the <span 
class="ec-lmtt-10">movwf</span>
     instruction for all devices, for example <span 
class="ec-lmtt-10">movwf</span><span 
class="ec-lmtt-10">&#x00A0;0x70,w</span>. This is no longer permitted.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Extra</span><span 
class="ec-lmbx-10">&#x00A0;trace</span><span 
class="ec-lmbx-10">&#x00A0;macro</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2610)</span> </dt><dd 
class="description">
     <!--l. 2889--><p class="noindent" >When  compiling  PIC18  projects  and  the  option  <span 
class="ec-lmtt-10">-mdebugger=realice </span>was  used,  the
     compiler defined the <span 
class="ec-lmtt-10">__IT </span>macro. This macro should only be defined by the IDE.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Missed</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;on</span><span 
class="ec-lmbx-10">&#x00A0;extended</span><span 
class="ec-lmbx-10">&#x00A0;instruction</span><span 
class="ec-lmbx-10">&#x00A0;set</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2609)</span> </dt><dd 
class="description">
     <!--l. 2893--><p class="noindent" >The compiler failed to detect and emit an error when the PIC18 extended instruction-set
     bit had been enabled by default configuration register programming. The enabling of
     this  mode  has  always  been  reported  when  it  was  programmed  explicitly  through  the
     configuration bits.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Unnecessary</span><span 
class="ec-lmbx-10">&#x00A0;bank</span><span 
class="ec-lmbx-10">&#x00A0;selection</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2606)</span> </dt><dd 
class="description">
     <!--l. 2898--><p class="noindent" >Code for mid-range devices that directly accessed SFRs located at address 0x0 or 0x1
     (e.g.  <span 
class="ec-lmtt-10">INDF</span><span 
class="ec-lmtt-10">&#x00A0;=</span><span 
class="ec-lmtt-10">&#x00A0;0x44</span>),  might  have  triggered  the  inclusion  of  unnecessary  bank  selection
     instructions.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Incorrect</span><span 
class="ec-lmbx-10">&#x00A0;string</span><span 
class="ec-lmbx-10">&#x00A0;conversions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2598)</span> </dt><dd 
class="description">
     <!--l. 2901--><p class="noindent" >The  standard  C99  library  functions  in  the  strtol  family  incorrectly  converted  strings
     beginning with <span 
class="ec-lmtt-10">0x </span>followed by non-alphanumeric characters.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">In-line</span><span 
class="ec-lmbx-10">&#x00A0;SFR</span><span 
class="ec-lmbx-10">&#x00A0;bit</span><span 
class="ec-lmbx-10">&#x00A0;macros</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2592)</span> </dt><dd 
class="description">
     <!--l. 2904--><p class="noindent" >The SFR bit access macros previously supplied in the device-specific C header files (<span 
class="ec-lmtt-10">.h</span>
     files) were unusable with in-line assembly code. This has now been corrected. For example:</dd></dl>
<!--l. 2909--><p class="noindent" >
     <dl class="list1"><dt class="list">
     </dt><dd 
class="list">
     <!--l. 2909--><p class="noindent" ><span 
class="ec-lmtt-10">#include</span>
     <span 
class="ec-lmtt-10">&#x003C;xc.h&#x003E;</span>
     <!--l. 2912--><p class="noindent" ><span 
class="ec-lmtt-10">asm("bsf</span>
     <span 
class="ec-lmtt-10">"</span>
     <span 
class="ec-lmtt-10">RB4_bit);</span><span 
class="ec-lmtt-10">&#x00A0;</span></dd></dl>
<!--l. 2914--><p class="noindent" >
                                                                               
                                                                               
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Inconsistent</span><span 
class="ec-lmbx-10">&#x00A0;ptrdiff_t</span><span 
class="ec-lmbx-10">&#x00A0;definition</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2585)</span> </dt><dd 
class="description">
     <!--l. 2915--><p class="noindent" >The type represented by <span 
class="ec-lmtt-10">ptrdiff_t </span>for C99 builds has been changed from a <span 
class="ec-lmtt-10">long </span>type to
     an <span 
class="ec-lmtt-10">int</span>. This is then consistent with C90 builds but also with how the compiler performs
     pointer subtraction. The result of any subtraction not representable in an <span 
class="ec-lmtt-10">int </span>object
     constitutes undefined behaviour.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">vsprintf</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;customized</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2581)</span> </dt><dd 
class="description">
     <!--l. 2921--><p class="noindent" >The compiler generates the code for many IO functions, based on how they are used
     in  a  program.  The  compiler  was  not  properly  customising  the  implementation  of  the
     <span 
class="ec-lmtt-10">vsprintf() </span>function, resulting in the excess code being generated for this function. As
     part of this fix, the compiler now calls <span 
class="ec-lmtt-10">vfprintf()</span>, rather than <span 
class="ec-lmtt-10">vsnprintf()</span>, to perform
     the bulk of the printing operation.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">regsused</span><span 
class="ec-lmbx-10">&#x00A0;pragma</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2550)</span> </dt><dd 
class="description">
     <!--l. 2928--><p class="noindent" >In  some  instances,  the  <span 
class="ec-lmtt-10">#pragma</span><span 
class="ec-lmtt-10">&#x00A0;regsused </span>might  not  have  worked  as  expected  when
     building C99 based projects.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Confused</span><span 
class="ec-lmbx-10">&#x00A0;integer</span><span 
class="ec-lmbx-10">&#x00A0;scan</span><span 
class="ec-lmbx-10">&#x00A0;specifier</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2506)</span> </dt><dd 
class="description">
     <!--l. 2930--><p class="noindent" >The <span 
class="ec-lmtt-10">%i </span>conversion specifier when used with the C99 scanf family of functions was being
     incorrectly processed, as if it was <span 
class="ec-lmtt-10">%d</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Incorrect</span><span 
class="ec-lmbx-10">&#x00A0;encoding</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;move</span><span 
class="ec-lmbx-10">&#x00A0;instruction</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2504)</span> </dt><dd 
class="description">
     <!--l. 2933--><p class="noindent" >When  using  the  <span 
class="ec-lmtt-10">,0 </span>or  <span 
class="ec-lmtt-10">,1 </span>syntax  to  specify  access  or  banked  memory  for  a  PIC18
     <span 
class="ec-lmtt-10">movwf </span>instruction (e.g. <span 
class="ec-lmtt-10">movwf</span><span 
class="ec-lmtt-10">&#x00A0;EECON2,0</span>), the assembler might have encoded it as a <span 
class="ec-lmtt-10">movf</span>
     instruction.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Misplaced</span><span 
class="ec-lmbx-10">&#x00A0;absolute</span><span 
class="ec-lmbx-10">&#x00A0;objects</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2502)</span> </dt><dd 
class="description">
     <!--l. 2937--><p class="noindent" >When using the <span 
class="ec-lmtt-10">-nostartfiles </span>option, absolute objects defined in C source might not
     have been linked at the specified address.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bogus</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;using</span><span 
class="ec-lmbx-10">&#x00A0;macro</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2489)</span> </dt><dd 
class="description">
     <!--l. 2940--><p class="noindent" >The assembler might have shown an error for code that used an assembler macro with an
     argument beginning with <span 
class="ec-lmtt-10">SET </span>or <span 
class="ec-lmtt-10">EQU</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Defunct</span><span 
class="ec-lmbx-10">&#x00A0;SFR</span><span 
class="ec-lmbx-10">&#x00A0;aliases</span><span 
class="ec-lmbx-10">&#x00A0;present</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2486)</span> </dt><dd 
class="description">
     <!--l. 2943--><p class="noindent" >The device-specific headers and include files for PIC18FxxK42 devices contained incorrect
     SFR bitfield aliases. These have been removed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Relaxed</span><span 
class="ec-lmbx-10">&#x00A0;parsing</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;config</span><span 
class="ec-lmbx-10">&#x00A0;directives</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2485,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-2599,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-2615)</span> </dt><dd 
class="description">
     <!--l. 2946--><p class="noindent" >To avoid interaction between the arguments of the PIC Assembler<span 
class="ts1-lmr10-">'</span>s <span 
class="ec-lmtt-10">CONFIG </span>directive
     and  definitions  in  device-specific  header  files,  either  the  <span 
class="ec-lmri-10">setting  </span>or  <span 
class="ec-lmri-10">value  </span>tokens  or
     the <span 
class="ec-lmri-10">setting</span><span 
class="ec-lmtt-10">&#x00A0;=</span><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmri-10">value </span>expression can be surrounded by either double or single quotes to
     protect them from any macro substitution performed by the preprocessor, for example,
     <span 
class="ec-lmtt-10">CONFIG</span><span 
class="ec-lmtt-10">&#x00A0;"FOSC</span><span 
class="ec-lmtt-10">&#x00A0;=</span><span 
class="ec-lmtt-10">&#x00A0;ERC</span>". The preprocessor will not alter anything inside the quotes.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Incorrect</span><span 
class="ec-lmbx-10">&#x00A0;configuration</span><span 
class="ec-lmbx-10">&#x00A0;programming</span><span 
class="ec-lmbx-10">&#x00A0;sizes</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2476)</span> </dt><dd 
class="description">
     <!--l. 2954--><p class="noindent" >Some newer PIC18 devices now have their configuration settings located in DFM (Data
     Flash Memory), which are programmed as individual bytes. The compiler assumed that
     all PIC18 configuration settings were programmed in words and so padded or programmed
     with a default value an odd number of configuration bytes. For new devices that had an
     odd number of configuration bytes, a warning was issued when the padded bytes were
     programmed into the device. The new programming characteristics of configuration and
     user-id memory that is programmed using the <span 
class="ec-lmtt-10">#pragma</span><span 
class="ec-lmtt-10">&#x00A0;config </span>directive and the assembler
     <span 
class="ec-lmtt-10">CONFIG </span>directive has been recorded in the device INI files.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;interrupt</span><span 
class="ec-lmbx-10">&#x00A0;context</span><span 
class="ec-lmbx-10">&#x00A0;switch</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2474)</span> </dt><dd 
class="description">
     <!--l. 2965--><p class="noindent" >When  building  enhanced  mid-range  projects  that  called  reentrant  functions  from  an
     interrupt routine, the compiler generated context save/restore code that might have been
     incorrect and could potentially cause data corruption.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Config</span><span 
class="ec-lmbx-10">&#x00A0;values</span><span 
class="ec-lmbx-10">&#x00A0;misinterpreted</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2464)</span> </dt><dd 
class="description">
     <!--l. 2969--><p class="noindent" >When building PIC-AS projects, named configuration values that begin with a digit (e.g.
     <span 
class="ec-lmtt-10">8MHz</span>) would be incorrectly interpreted as a constant literal numeric value. The assembler
     now checks config values against all named values before trying to interpret them as a
     numerical value.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Unimplemented</span><span 
class="ec-lmbx-10">&#x00A0;option</span><span 
class="ec-lmbx-10">&#x00A0;removed</span> </dt><dd 
class="description">
     <!--l. 2974--><p class="noindent" >(XC8-2463) The <span 
class="ec-lmtt-10">-### </span>option was selectable for assembler projects targeting PIC devices
     but generated an error. This option can still be selected for AVR projects, but is no longer
     a valid option for PIC projects.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Errors</span><span 
class="ec-lmbx-10">&#x00A0;where</span><span 
class="ec-lmbx-10">&#x00A0;they</span><span 
class="ec-lmbx-10">&#x00A0;aren</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">t</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2443)</span> </dt><dd 
class="description">
     <!--l. 2978--><p class="noindent" >The use of macros that contained file/line directives (which may result from it containing
     preprocessor directives) may have caused any warning or error messages emitted by the
     assembler to reference the wrong file or line number.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Unimplemented</span><span 
class="ec-lmbx-10">&#x00A0;symbols</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2412)</span> </dt><dd 
class="description">
     <!--l. 2983--><p class="noindent" >The compiler generated <span 
class="ec-lmtt-10">__size_of_</span><span 
class="ec-lmri-10">xxx </span>symbols (shown in the map file) that were assigned
     inaccurate values. These symbols are no longer generated.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Broken</span><span 
class="ec-lmbx-10">&#x00A0;branches</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2378)</span> </dt><dd 
class="description">
     <!--l. 2986--><p class="noindent" >When building PIC-AS projects targeting enhanced mid-range devices, the use of the <span 
class="ec-lmtt-10">bra</span>
     instruction with an operand that was not a constant might have resulted in incorrect
     encoding of that instruction.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Unwelcome</span><span 
class="ec-lmbx-10">&#x00A0;page</span><span 
class="ec-lmbx-10">&#x00A0;selection</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2346,</span> </dt><dd 
class="description">
     <!--l. 2990--><p class="noindent" >XC8-2604) For PIC-AS projects targeting mid-range and Baseline devices, page select
     instruction(s) may have been inserted prior to <span 
class="ec-lmtt-10">call </span>or <span 
class="ec-lmtt-10">goto </span>instructions that were located
     immediately after skip instructions, such as <span 
class="ec-lmtt-10">btfsx</span>.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Missing</span><span 
class="ec-lmbx-10">&#x00A0;watchdog</span><span 
class="ec-lmbx-10">&#x00A0;delay</span><span 
class="ec-lmbx-10">&#x00A0;builtins</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2345,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-2394)</span> </dt><dd 
class="description">
     <!--l. 2994--><p class="noindent" >The   definitions   for   the   watchdog   variants   of   the   timed   delay   builtins,   those
     being&#x00A0;<span 
class="ec-lmtt-10">__delaywdt_us </span>and&#x00A0;<span 
class="ec-lmtt-10">__delaywdt_ms</span>, were missing when building for mid-range
     and Baseline devices.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Redefining</span><span 
class="ec-lmbx-10">&#x00A0;assert</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2325)</span> </dt><dd 
class="description">
     <!--l. 2998--><p class="noindent" >It was not possible to redefine the <span 
class="ec-lmtt-10">assert() </span>macro, which should have been performed
     each time <span 
class="ec-lmtt-10">&#x003C;assert.h&#x003E; </span>was included and based on the current state of the <span 
class="ec-lmtt-10">NDEBUG </span>macro.
     This is now possible.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;branches</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;detected</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2322)</span> </dt><dd 
class="description">
     <!--l. 3002--><p class="noindent" >No error was issued by the assembler when building PIC18 projects that contained branch
     instructions specifying a destination label that was not defined.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Silent</span><span 
class="ec-lmbx-10">&#x00A0;overlap</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;absolute</span><span 
class="ec-lmbx-10">&#x00A0;objects</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2268)</span> </dt><dd 
class="description">
     <!--l. 3005--><p class="noindent" >The compiler did not warn if an absolute object (defined using <span 
class="ec-lmtt-10">__at()</span>) was positioned
     such that it overlapped with any addresses that were used internally by the compiler. A
     warning is now issued in such circumstances.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Unoptimized</span><span 
class="ec-lmbx-10">&#x00A0;interrupt</span><span 
class="ec-lmbx-10">&#x00A0;routines</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2179)</span> </dt><dd 
class="description">
     <!--l. 3009--><p class="noindent" >The interrupt functions defined for projects targeting Baseline devices might not have
     been optimized. Optimization of interrupt functions are now enabled for all devices that
     support interrupts.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Unnecessary</span><span 
class="ec-lmbx-10">&#x00A0;bank</span><span 
class="ec-lmbx-10">&#x00A0;selection</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2159)</span> </dt><dd 
class="description">
     <!--l. 3013--><p class="noindent" >When targeting Baseline and mid-range devices, unnecessary banking instructions may
     have been generated when accessing absolute objects located within unbanked memory.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Wrong</span><span 
class="ec-lmbx-10">&#x00A0;line</span><span 
class="ec-lmbx-10">&#x00A0;information</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;messages</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1962)</span> </dt><dd 
class="description">
     <!--l. 3017--><p class="noindent" >Code-related errors and warnings from the assembler might have indicated an incorrect C
     source line for some code sequences.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">No</span><span 
class="ec-lmbx-10">&#x00A0;members?</span><span 
class="ec-lmbx-10">&#x00A0;No</span><span 
class="ec-lmbx-10">&#x00A0;build</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1924)</span> </dt><dd 
class="description">
     <!--l. 3020--><p class="noindent" >In situations where a structure had been defined with no members, the compiler might
     have crashed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bogus</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;character</span><span 
class="ec-lmbx-10">&#x00A0;classification</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1803)</span> </dt><dd 
class="description">
     <!--l. 3022--><p class="noindent" >Use  of  some  C99-standard  library  character  classification  functions  (viz.  <span 
class="ec-lmtt-10">isalpha()</span>,
     <span 
class="ec-lmtt-10">isdigit()</span>, <span 
class="ec-lmtt-10">isgraph()</span>, <span 
class="ec-lmtt-10">islower()</span>, <span 
class="ec-lmtt-10">isprint()</span>, <span 
class="ec-lmtt-10">isspace() </span>and <span 
class="ec-lmtt-10">isupper()</span>) caused the
     compiler to emit the warning <span 
class="ec-lmtt-10">expression</span><span 
class="ec-lmtt-10">&#x00A0;generates</span><span 
class="ec-lmtt-10">&#x00A0;no</span><span 
class="ec-lmtt-10">&#x00A0;code</span>. This was a side-effect of
     their implementation, and did not affect the code<span 
class="ts1-lmr10-">'</span>s operation. This warning will no longer
     occur.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">FLT_ROUNDS</span><span 
class="ec-lmbx-10">&#x00A0;macro</span><span 
class="ec-lmbx-10">&#x00A0;undefined</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1791)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 3030--><p class="noindent" >The <span 
class="ec-lmtt-10">MB_CUR_MAX </span>macro (the floating-point rounding mode) was undefined. It is now defined
     to be the value 1, which implies rounding to the nearest representable value.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Errno</span><span 
class="ec-lmbx-10">&#x00A0;triggers</span><span 
class="ec-lmbx-10">&#x00A0;scanf</span><span 
class="ec-lmbx-10">&#x00A0;fail</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1786)</span> </dt><dd 
class="description">
     <!--l. 3034--><p class="noindent" >If <span 
class="ec-lmtt-10">errno </span>was non-zero before calling any of the scanf family of functions, then any of the
     <span 
class="ec-lmtt-10">a</span>, <span 
class="ec-lmtt-10">d</span>, <span 
class="ec-lmtt-10">e</span>, <span 
class="ec-lmtt-10">f</span>, <span 
class="ec-lmtt-10">g</span>, <span 
class="ec-lmtt-10">o</span>, <span 
class="ec-lmtt-10">s </span>and <span 
class="ec-lmtt-10">x </span>conversion specifiers would have failed to correctly read in valid
     input.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;config</span><span 
class="ec-lmbx-10">&#x00A0;ignored</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1771)</span> </dt><dd 
class="description">
     <!--l. 3039--><p class="noindent" >The   compiler   was   not   detecting   or   warning   against   situations   where   a   literal
     numerical  value  to  a  <span 
class="ec-lmtt-10">#pragma</span><span 
class="ec-lmtt-10">&#x00A0;config </span>directive  had  trailing  garbage,  for  example
     <span 
class="ec-lmtt-10">#pragma</span><span 
class="ec-lmtt-10">&#x00A0;config</span><span 
class="ec-lmtt-10">&#x00A0;CONFIG2L=0sillybilly</span>. An error will now be issued in such cases.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Undefined</span><span 
class="ec-lmbx-10">&#x00A0;assembly</span><span 
class="ec-lmbx-10">&#x00A0;routines</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1318)</span> </dt><dd 
class="description">
     <!--l. 3044--><p class="noindent" >In some instances, referencing a function that is defined in a separate assembly module in
     C source might result in an undefined symbol error.</dd></dl>
<!--l. 3049--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-72000"></a>Version 2.32</h4>
<!--l. 3050--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Breaking</span><span 
class="ec-lmbx-10">&#x00A0;builtins</span><span 
class="ec-lmbx-10">&#x00A0;broken</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2407)</span> </dt><dd 
class="description">
     <!--l. 3051--><p class="noindent" >The                    <span 
class="ec-lmtt-10">__builtin_software_breakpoint()</span>,                    <span 
class="ec-lmtt-10">_debug_break()</span>
     and <span 
class="ec-lmtt-10">__conditional_software_breakpoint() </span>builtins did not use the correct instruction
     coding for traps when used with K42 and Q PIC18 devices. A <span 
class="ec-lmtt-10">nop </span>instruction has also
     been added after the trap to account for debugger skidding.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Second</span><span 
class="ec-lmbx-10">&#x00A0;access</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;library</span><span 
class="ec-lmbx-10">&#x00A0;fails</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2381)</span> </dt><dd 
class="description">
     <!--l. 3056--><p class="noindent" >Invoking&#x00A0;the Windows version of the <span 
class="ec-lmtt-10">xc8-ar.exe </span>library archiver a second time to access
     an existing library archive may have failed with an <span 
class="ec-lmtt-10">unable</span><span 
class="ec-lmtt-10">&#x00A0;to</span><span 
class="ec-lmtt-10">&#x00A0;rename </span>error message.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Incomplete</span><span 
class="ec-lmbx-10">&#x00A0;expansion</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;assembly</span><span 
class="ec-lmbx-10">&#x00A0;macros</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2334)</span> </dt><dd 
class="description">
     <!--l. 3060--><p class="noindent" >Assembly macros (from either PIC-AS source or in assembly modules when using the C
     compiler) were incompletely rendered in MPLABX<span 
class="ts1-lmr10-">'</span>s disassembly view, showing on the first
     instruction in the sequence. This issue did not affect code operation, and all instructions
     in the macro should now be displayed in the IDE.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Consistency</span><span 
class="ec-lmbx-10">&#x00A0;check</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;target</span><span 
class="ec-lmbx-10">&#x00A0;device</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2327)</span> </dt><dd 
class="description">
     <!--l. 3066--><p class="noindent" >The linker will now check the extended ident record (where present) to ensure that all
     object files passed to it were built for the same device architecture. Extended ident records
     are produced by the Microchip PIC-AS assembler.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Assembly</span><span 
class="ec-lmbx-10">&#x00A0;division</span><span 
class="ec-lmbx-10">&#x00A0;by</span><span 
class="ec-lmbx-10">&#x00A0;zero</span><span 
class="ec-lmbx-10">&#x00A0;failure</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1960)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 3071--><p class="noindent" >The assemblers were not detecting a division by zero in constant assembly expressions,
     which would result in a build failure but no reported error.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Long</span><span 
class="ec-lmbx-10">&#x00A0;built</span><span 
class="ec-lmbx-10">&#x00A0;times</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1930)</span> </dt><dd 
class="description">
     <!--l. 3074--><p class="noindent" >Programs containing recursion could have taken an inordinate amount of time to build.
     Better tracking of the call graph will now decrease the built times for such programs.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bogus</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;absolute</span><span 
class="ec-lmbx-10">&#x00A0;functions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1809)</span> </dt><dd 
class="description">
     <!--l. 3077--><p class="noindent" >Absolute  functions  located  above  the  highest  RAM  address  on  PIC18  devices  that
     implement an interrupt controller module would have caused the compiler to erroneously
     warn that the function <span 
class="ec-lmtt-10">lies</span><span 
class="ec-lmtt-10">&#x00A0;outside</span><span 
class="ec-lmtt-10">&#x00A0;available</span><span 
class="ec-lmtt-10">&#x00A0;data</span><span 
class="ec-lmtt-10">&#x00A0;space</span>. The warning did not affect
     the operation of the code.</dd></dl>
<!--l. 3084--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-73000"></a>Version 2.31</h4>
<!--l. 3085--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Unexplained</span><span 
class="ec-lmbx-10">&#x00A0;compiler</span><span 
class="ec-lmbx-10">&#x00A0;failures</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2367)</span> </dt><dd 
class="description">
     <!--l. 3086--><p class="noindent" >When running on Windows platforms that had the system temporary directory set to a
     path that included a dot <span 
class="ts1-lmr10-">'</span><span 
class="ec-lmtt-10">.</span><span 
class="ts1-lmr10-">' </span>character, the compiler may have failed to execute.</dd></dl>
<!--l. 3092--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-74000"></a>Version 2.30</h4>
<!--l. 3093--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Missing</span><span 
class="ec-lmbx-10">&#x00A0;linker</span><span 
class="ec-lmbx-10">&#x00A0;options</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2333)</span> </dt><dd 
class="description">
     <!--l. 3094--><p class="noindent" >The  PIC  Assembler  driver  was  not  issuing  several  linker  options.  With  these  options
     missing, the delta value of classes contained in program memory on Baseline and mid-range
     devices were not being correctly set, and for devices that implemented EEPROM the
     <span 
class="ec-lmtt-10">EEDATA </span>class  was  missing  entirely.  This  issue  would  not  have  affected  the  generated
     code, but not all of the available memory areas would have been usable, and premature
     <span 
class="ec-lmtt-10">can</span><span 
class="ts1-lmtt10-">'</span><span 
class="ec-lmtt-10">t</span><span 
class="ec-lmtt-10">&#x00A0;find</span><span 
class="ec-lmtt-10">&#x00A0;space </span>or other errors might have resulted. The XC8 C compiler driver was
     not affected by this issue and C programs built as expected.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Debugging</span><span 
class="ec-lmbx-10">&#x00A0;assembly</span><span 
class="ec-lmbx-10">&#x00A0;source</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2319)</span> </dt><dd 
class="description">
     <!--l. 3104--><p class="noindent" >Stepping through assembly source code that included other files might not have worked
     correctly due to the incorrect interpretation of embedded debug information.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Debugging</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;structures</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2303)</span> </dt><dd 
class="description">
     <!--l. 3107--><p class="noindent" >The DWARF debugging information for programs that contained a mixture of complete
     and incomplete structure/union types might have been incorrect. When the MPLAB X
     IDE encountered such errors, it would have stopped reading the remaining debugging
     information, thus affecting the debugability of the program.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Missing</span><span 
class="ec-lmbx-10">&#x00A0;stdint.h</span><span 
class="ec-lmbx-10">&#x00A0;types</span><span 
class="ec-lmbx-10">&#x00A0;and</span><span 
class="ec-lmbx-10">&#x00A0;macros</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2302)</span> </dt><dd 
class="description">
     <!--l. 3112--><p class="noindent" >The  following  24-bit  integer  types  were  unavailable  in  <span 
class="ec-lmtt-10">&#x003C;stdint.h</span>&#x003E;:  <span 
class="ec-lmtt-10">int_least24_t</span>,
     <span 
class="ec-lmtt-10">int_fast24_t</span>, <span 
class="ec-lmtt-10">uint_least24_t</span>, and <span 
class="ec-lmtt-10">uint_fast24_t</span>.
     <!--l. 3116--><p class="noindent" >The following macros related to 24-bit integer types were also unavailable: <span 
class="ec-lmtt-10">INT24_MIN</span>,
     <span 
class="ec-lmtt-10">INT24_MAX</span>,   <span 
class="ec-lmtt-10">UINT24_MAX</span>,   <span 
class="ec-lmtt-10">INT_LEAST24_MIN</span>,   <span 
class="ec-lmtt-10">INT_LEAST24_MAX</span>,   <span 
class="ec-lmtt-10">UINT_LEAST24_MAX</span>,
     <span 
class="ec-lmtt-10">INT_FAST24_MIN</span>, <span 
class="ec-lmtt-10">INT_FAST24_MAX</span>, <span 
class="ec-lmtt-10">UINT_FAST24_MAX</span>, <span 
class="ec-lmtt-10">INT24_C()</span>, and <span 
class="ec-lmtt-10">UINT24_C()</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Wrong</span><span 
class="ec-lmbx-10">&#x00A0;assembler</span><span 
class="ec-lmbx-10">&#x00A0;device</span><span 
class="ec-lmbx-10">&#x00A0;support</span><span 
class="ec-lmbx-10">&#x00A0;list</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2301)</span> </dt><dd 
class="description">
     <!--l. 3121--><p class="noindent" >The PIC Assembler driver option <span 
class="ec-lmtt-10">-mprint-devices </span>incorrectly reported AVR devices as
     being supported, which was not the case.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">No</span><span 
class="ec-lmbx-10">&#x00A0;chip</span><span 
class="ec-lmbx-10">&#x00A0;lists</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;old</span><span 
class="ec-lmbx-10">&#x00A0;driver</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2297)</span> </dt><dd 
class="description">
     <!--l. 3124--><p class="noindent" >Using the <span 
class="ec-lmtt-10">--chipinfo </span>option of the legacy <span 
class="ec-lmtt-10">xc8 </span>driver might not have found the device
     information and issued an error.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Not</span><span 
class="ec-lmbx-10">&#x00A0;so</span><span 
class="ec-lmbx-10">&#x00A0;fast</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2296)</span> </dt><dd 
class="description">
     <!--l. 3127--><p class="noindent" >The fast 16-bit types and macros provided by the C99 version of <span 
class="ec-lmtt-10">&#x003C;stdint.h&#x003E; </span>incorrectly
     used 32-bit types.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Target</span><span 
class="ec-lmbx-10">&#x00A0;option</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;following</span><span 
class="ec-lmbx-10">&#x00A0;GCC</span><span 
class="ec-lmbx-10">&#x00A0;style</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2291)</span> </dt><dd 
class="description">
     <!--l. 3130--><p class="noindent" >The <span 
class="ec-lmtt-10">xc8-ar </span>library archiver utility did not accept an equal sign after the <span 
class="ec-lmtt-10">--target </span>option,
     as with the GCC implementation of this utility. If the option was used in this way, the
     archiver might not have functioned correctly. You may now use either <span 
class="ec-lmtt-10">--target=</span><span 
class="ec-lmri-10">chipname</span>
     or <span 
class="ec-lmtt-10">--target</span><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmri-10">chipname</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Warning,</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2289)</span> </dt><dd 
class="description">
     <!--l. 3135--><p class="noindent" >When the generation of an assembler listing file was enabled for C99 builds, some warning
     messages might have appeared twice.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Nul</span><span 
class="ec-lmbx-10">&#x00A0;characters</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;printed</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2285)</span> </dt><dd 
class="description">
     <!--l. 3138--><p class="noindent" >Formatted printing functions in the C99 standard library would fail to print characters
     using the <span 
class="ec-lmtt-10">%c </span>format-specifier if that character was <span 
class="ts1-lmtt10-">'</span><span 
class="ec-lmtt-10">\0</span><span 
class="ts1-lmtt10-">'</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Wrong</span><span 
class="ec-lmbx-10">&#x00A0;function</span><span 
class="ec-lmbx-10">&#x00A0;sizes</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2284)</span> </dt><dd 
class="description">
     <!--l. 3141--><p class="noindent" >In the generated map file, under module information, the size indicated for functions might
     have been 1 greater than the function<span 
class="ts1-lmr10-">'</span>s actual size.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Missing</span><span 
class="ec-lmbx-10">&#x00A0;SFR</span><span 
class="ec-lmbx-10">&#x00A0;access</span><span 
class="ec-lmbx-10">&#x00A0;bits</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2282)</span> </dt><dd 
class="description">
     <!--l. 3144--><p class="noindent" >Using               the               bit-access               SFR               macros               (for
     example <span 
class="ec-lmtt-10">btfsc TMR0IE</span>) supplied in the device-specific assembler include files resulted in
     the warning <span 
class="ec-lmtt-10">RAM</span><span 
class="ec-lmtt-10">&#x00A0;access</span><span 
class="ec-lmtt-10">&#x00A0;bit</span><span 
class="ec-lmtt-10">&#x00A0;operand</span><span 
class="ec-lmtt-10">&#x00A0;not</span><span 
class="ec-lmtt-10">&#x00A0;specified</span>, when the assembly instruction
     did not specify the access bit. The macros now define the access bit so this does not need
     to be specified in project assembly source code.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Crash</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;GOTO</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;inline</span><span 
class="ec-lmbx-10">&#x00A0;assembly</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2266)</span> </dt><dd 
class="description">
     <!--l. 3150--><p class="noindent" >For PIC18 projects that enabled assembler optimizations and that used a <span 
class="ec-lmtt-10">goto </span>instruction
     without a symbolic destination operand (i.e. it was a constant address) in inline assembly,
     the compiler might have unexpected terminated.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Incorrect</span><span 
class="ec-lmbx-10">&#x00A0;library</span><span 
class="ec-lmbx-10">&#x00A0;macro</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2265)</span> </dt><dd 
class="description">
     <!--l. 3155--><p class="noindent" >The definition of <span 
class="ec-lmtt-10">SIZE_MAX </span>in the C99 <span 
class="ec-lmtt-10">&#x003C;stdint.h&#x003E; </span>standard library header was incorrectly
     defined to be <span 
class="ec-lmtt-10">UINT32_MAX</span>. This has been made coherent with <span 
class="ec-lmtt-10">size_t </span>and is now defined
     to be <span 
class="ec-lmtt-10">UINT16_MAX</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Math</span><span 
class="ec-lmbx-10">&#x00A0;changes</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2017)</span> </dt><dd 
class="description">
     <!--l. 3159--><p class="noindent" >The following fixes have been made to the C99 <span 
class="ec-lmtt-10">&#x003C;math.h&#x003E; </span>functions.
         <ul class="itemize1">
         <li class="itemize">
         <!--l. 3162--><p class="noindent" >The <span 
class="ec-lmtt-10">log10 </span>, <span 
class="ec-lmtt-10">log2</span>, and <span 
class="ec-lmtt-10">log </span>families of functions now generate a domain error should
         their argument be negative.
         </li>
         <li class="itemize">
         <!--l. 3164--><p class="noindent" >The <span 
class="ec-lmtt-10">log1p </span>family of functions now generate a domain error should their argument
         be less than -1.</li></ul>
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Invalid</span><span 
class="ec-lmbx-10">&#x00A0;library</span><span 
class="ec-lmbx-10">&#x00A0;creation</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2015)</span> </dt><dd 
class="description">
     <!--l. 3167--><p class="noindent" >When building a PIC-device library using the <span 
class="ec-lmtt-10">-r </span>option to <span 
class="ec-lmtt-10">xc8-ar</span>, if the named library file did
     not exist, an invalid library was created that would produce errors when it was later
     used.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;address</span><span 
class="ec-lmbx-10">&#x00A0;shifts</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2013)</span> </dt><dd 
class="description">
     <!--l. 3171--><p class="noindent" >For Baseline and mid-range projects, expressions that took the address of an object,
     cast that to an integer, and right shifted the result, might have produced incorrect
     values.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Undetected</span><span 
class="ec-lmbx-10">&#x00A0;fixup</span><span 
class="ec-lmbx-10">&#x00A0;errors</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2009)</span> </dt><dd 
class="description">
     <!--l. 3174--><p class="noindent" >The linker was not detecting that fixup of some assembly operand expressions was overflowing
     and hence did not produce a fixup overflow error. Although this affected all PIC devices and
     could lead to code failure, the expressions that triggered this situation were extremely
     rare.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Unable</span><span 
class="ec-lmbx-10">&#x00A0;to</span><span 
class="ec-lmbx-10">&#x00A0;build</span><span 
class="ec-lmbx-10">&#x00A0;pointer</span><span 
class="ec-lmbx-10">&#x00A0;conversion</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2008)</span> </dt><dd 
class="description">
     <!--l. 3179--><p class="noindent" >The compiler might not have been able to build expressions involving a conversion from a
     1-byte wide <span 
class="ec-lmtt-10">const </span>pointer to a 24-bit integer, in PIC18 projects, failing with the error:
     <span 
class="ec-lmtt-10">registers</span><span 
class="ec-lmtt-10">&#x00A0;unavailable</span><span 
class="ec-lmtt-10">&#x00A0;for</span><span 
class="ec-lmtt-10">&#x00A0;code</span><span 
class="ec-lmtt-10">&#x00A0;generation</span><span 
class="ec-lmtt-10">&#x00A0;of</span><span 
class="ec-lmtt-10">&#x00A0;this</span><span 
class="ec-lmtt-10">&#x00A0;expression</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Fixup</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;large-RAM</span><span 
class="ec-lmbx-10">&#x00A0;devices</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1996)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 3183--><p class="noindent" >For PIC18 devices with more than 4K of data memory, the compiler would in some instances use
     a <span 
class="ec-lmtt-10">movff </span>instruction where a <span 
class="ec-lmtt-10">movffl </span>instruction was needed. This would have resulted in a fixup
     error stopping the build.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;comparisons</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1994)</span> </dt><dd 
class="description">
     <!--l. 3188--><p class="noindent" >For Baseline and mid-range devices, expressions that compared integers that were greater than 2
     bytes in size, were comprised of objects allocated to different banks, and yielded
     certain values, the result might have been incorrect due to a missing banked selection
     instruction.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Incorrect</span><span 
class="ec-lmbx-10">&#x00A0;abstraction</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;non-identical</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1978)</span> </dt><dd 
class="description">
     <!--l. 3193--><p class="noindent" >In PIC18 projects, the assembler optimizer did not correctly recognize that instructions that
     accessed the same file register address but that specified different access bits were different
     instructions. As a result, instruction sequences were being factored out as common, even when
     there was this small discrepancy in their functions.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Floats</span><span 
class="ec-lmbx-10">&#x00A0;printed</span><span 
class="ec-lmbx-10">&#x00A0;badly</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1972)</span> </dt><dd 
class="description">
     <!--l. 3199--><p class="noindent" >Formatted printing functions in the C99 standard library failed to take into account that
     rounding a <span 
class="ec-lmtt-10">float </span>to be printed may increase that value<span 
class="ts1-lmr10-">'</span>s power of 10 and hence the number of
     significant digits to print.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Crash</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;using</span><span 
class="ec-lmbx-10">&#x00A0;hybrid</span><span 
class="ec-lmbx-10">&#x00A0;stack</span><span 
class="ec-lmbx-10">&#x00A0;model</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1955)</span> </dt><dd 
class="description">
     <!--l. 3203--><p class="noindent" >Programs for enhanced mid-range devices that used the hybrid stack model caused the compiler
     to crash if that program contained functions that used the compiled stack and accessed 64-bit
     integer objects.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Looping</span><span 
class="ec-lmbx-10">&#x00A0;around</span><span 
class="ec-lmbx-10">&#x00A0;allocGlobals</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1943)</span> </dt><dd 
class="description">
     <!--l. 3207--><p class="noindent" >Building projects that used a compiled stack and had functions that were called reentrantly and
     that defined pointer parameters or pointer auto objects might have result in a "looping around
     allocGlobals()" error.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Unnecessary</span><span 
class="ec-lmbx-10">&#x00A0;memory</span><span 
class="ec-lmbx-10">&#x00A0;allocation</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;statics</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1942)</span> </dt><dd 
class="description">
     <!--l. 3212--><p class="noindent" >When optimizing PIC projects at level <span 
class="ec-lmtt-10">3 </span>or level <span 
class="ec-lmtt-10">s</span>, in some instances, functions that were never
     called and that defined <span 
class="ec-lmtt-10">static </span>local variables may have had memory allocated for those
     variables even though the function itself was removed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Multi-line</span><span 
class="ec-lmbx-10">&#x00A0;pragmas</span><span 
class="ec-lmbx-10">&#x00A0;failing</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1916)</span> </dt><dd 
class="description">
     <!--l. 3217--><p class="noindent" >Any <span 
class="ec-lmtt-10">#pragma </span>directives in C99 projects that were split across multiple lines using a line
     continuation character might have triggered an error.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Lack</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;no</span><span 
class="ec-lmbx-10">&#x00A0;space</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1865)</span> </dt><dd 
class="description">
     <!--l. 3220--><p class="noindent" >The compiler did not issue an error when a region of memory was entirely consumed by absolute
     objects and a memory-specified object (used in conjunction with <span 
class="ec-lmtt-10">-maddrqual=require</span>) had to
     be located in that same region.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Crash</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;pointers</span><span 
class="ec-lmbx-10">&#x00A0;to</span><span 
class="ec-lmbx-10">&#x00A0;incomplete</span><span 
class="ec-lmbx-10">&#x00A0;type</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1863)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 3224--><p class="noindent" >In certain circumstances where a program used pointers to an incomplete structure type, the
     compiler attempted to generate code for expressions that accessed members from that type
     rather than from the complete type, which was properly defined and available, resulting in a
     compiler crash.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;call</span><span 
class="ec-lmbx-10">&#x00A0;to</span><span 
class="ec-lmbx-10">&#x00A0;subtype</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;indirect</span><span 
class="ec-lmbx-10">&#x00A0;call</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1859)</span> </dt><dd 
class="description">
     <!--l. 3230--><p class="noindent" >Indirect function calls that appear to have been made using a NULL pointer trigger a warning
     and are replaced with a constant expression of zero. However, the compiler did not also convert
     that expression to the return type of the replaced function call and in some cases this resulted in
     the error message <span 
class="ec-lmtt-10">bad</span><span 
class="ec-lmtt-10">&#x00A0;call</span><span 
class="ec-lmtt-10">&#x00A0;to</span><span 
class="ec-lmtt-10">&#x00A0;typeSub</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">t</span><span 
class="ec-lmbx-10">&#x00A0;find</span><span 
class="ec-lmbx-10">&#x00A0;space</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1843)</span> </dt><dd 
class="description">
     <!--l. 3236--><p class="noindent" >For projects targeting PIC10/12/14/16 devices that are using optimizations and have
     <span 
class="ec-lmtt-10">const</span>-qualified absolute objects, the compiler may have issued a can<span 
class="ts1-lmr10-">'</span>t find space error, even
     though there may have be sufficient program memory available.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Too</span><span 
class="ec-lmbx-10">&#x00A0;large</span><span 
class="ec-lmbx-10">&#x00A0;arrays</span><span 
class="ec-lmbx-10">&#x00A0;undetected</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1827)</span> </dt><dd 
class="description">
     <!--l. 3241--><p class="noindent" >The Clang front end (used by C99 projects) was silently truncating the size of very large arrays.
     If the number of array elements now exceeds the maximum allowable, an error will be
     issued.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bogus</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;library</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1814)</span> </dt><dd 
class="description">
     <!--l. 3245--><p class="noindent" >Some C99 programs that used formatted printing elicited the warning
     <span 
class="ec-lmtt-10">pointer</span><span 
class="ec-lmtt-10">&#x00A0;in</span><span 
class="ec-lmtt-10">&#x00A0;expression</span><span 
class="ec-lmtt-10">&#x00A0;may</span><span 
class="ec-lmtt-10">&#x00A0;have</span><span 
class="ec-lmtt-10">&#x00A0;no</span><span 
class="ec-lmtt-10">&#x00A0;targets </span>for files in the standard library. These warnings
     will no longer be issued.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Pointers</span><span 
class="ec-lmbx-10">&#x00A0;truncated</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;printed</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1241)</span> </dt><dd 
class="description">
     <!--l. 3249--><p class="noindent" >Pointers printed using the <span 
class="ec-lmtt-10">%p printf </span>format specifier were truncated to 2-bytes before printing,
     resulting in the upper byte being absent when the pointer was 3 bytes wide.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Arithmetic</span><span 
class="ec-lmbx-10">&#x00A0;overflow</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1429,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-1122)</span> </dt><dd 
class="description">
     <!--l. 3253--><p class="noindent" >When converting a constant expression type to a smaller type as part of an assignment, the code
     generator would emit a warning, even when an appropriate cast was used.</dd></dl>
<!--l. 3259--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-75000"></a>Version 2.29 (Functional Safety Release)</h4>
<!--l. 3260--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;labels</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;powerup</span><span 
class="ec-lmbx-10">&#x00A0;stub</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2011)</span> </dt><dd 
class="description">
     <!--l. 3261--><p class="noindent" >The powerup assembly source provided to customize project startup sequences was missing
     colons on labels, which is now mandatory and which would have led to syntax errors. This
     issue did not affect projects built for PIC18 devices. Note that the C99 powerup source files
     now use a <span 
class="ec-lmtt-10">.S </span>extension, and the C90 source files are present with a <span 
class="ec-lmtt-10">.as </span>and <span 
class="ec-lmtt-10">.S </span>extension.
     Use the <span 
class="ec-lmtt-10">.as </span>version of these files only if you are using the older compiler driver, <span 
class="ec-lmtt-10">xc8</span>.</dd></dl>
                                                                               
                                                                               
<!--l. 3271--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-76000"></a>Version 2.20</h4>
<!--l. 3272--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Undependable</span><span 
class="ec-lmbx-10">&#x00A0;dependency</span><span 
class="ec-lmbx-10">&#x00A0;files</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1991)</span> </dt><dd 
class="description">
     <!--l. 3273--><p class="noindent" >When using the driver<span 
class="ts1-lmr10-">'</span>s <span 
class="ec-lmtt-10">-Mx </span>options, a dependancy file was not being generated in all
     instances.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Preprocess-only</span><span 
class="ec-lmbx-10">&#x00A0;builds</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;stopping</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1989)</span> </dt><dd 
class="description">
     <!--l. 3276--><p class="noindent" >If the <span 
class="ec-lmtt-10">-E </span>option (preprocess only) is used with assembler source files, the compiler or
     assembler may exit with error 141, stating that it is unable to open an object file.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Wrong</span><span 
class="ec-lmbx-10">&#x00A0;destination</span><span 
class="ec-lmbx-10">&#x00A0;assumption</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1986)</span> </dt><dd 
class="description">
     <!--l. 3280--><p class="noindent" >If a <span 
class="ec-lmtt-10">movwf </span>instruction did not specify an addressing mode (banked or the Access bank)
     the assembler assumed the Access bank was to be used if it could determine that the
     address of the file operand was in the SFR portion of the Access bank, or the file operand
     was prefixed with <span 
class="ec-lmtt-10">c:</span>; otherwise, it assumed banked addressing. Now, if the assembler can
     detect that the file operand addresses the GPR portion of the Access bank, it will assume
     the Access bank. It is recommended that you always use the appropriate operand (e.g. <span 
class="ec-lmtt-10">,a</span>
     or <span 
class="ec-lmtt-10">,b</span>) to indicate the desired addressing mode in hand-written assembly code rather than
     reply on defaults.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">File-creation</span><span 
class="ec-lmbx-10">&#x00A0;errors</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1985)</span> </dt><dd 
class="description">
     <!--l. 3291--><p class="noindent" >When building MPLAB X IDE projects that invoke Hexmate to perform non-standard
     operations, such as merging for bootloaders, there might have been file creation errors
     relating to Hexmate temporary files.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Unknown</span><span 
class="ec-lmbx-10">&#x00A0;rfPIC</span><span 
class="ec-lmbx-10">&#x00A0;devices</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1981)</span> </dt><dd 
class="description">
     <!--l. 3295--><p class="noindent" >The  compiler  was  not  able  to  find  the  device  INI  file  when  building  for  any  of
     the rfPIC12C509AF, rfPIC12C509AG, rfPIC12F675F, rfPIC12F675H, or rfPIC12F675K
     devices.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">No</span><span 
class="ec-lmbx-10">&#x00A0;output</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;-dM</span><span 
class="ec-lmbx-10">&#x00A0;option</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1974)</span> </dt><dd 
class="description">
     <!--l. 3298--><p class="noindent" >When a source file was provided on the command line together with the <span 
class="ec-lmtt-10">-dM </span>option, no
     output was produced. This has been corrected, and a list of defined macros is output as
     expected.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Wrong</span><span 
class="ec-lmbx-10">&#x00A0;escaped</span><span 
class="ec-lmbx-10">&#x00A0;character</span><span 
class="ec-lmbx-10">&#x00A0;constants</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1971)</span> </dt><dd 
class="description">
     <!--l. 3302--><p class="noindent" >In  C99  PIC  projects  built  using  the  macOS  compiler,  escaped  hexadecimal  character
     constants greater than 0x7F were being stored as 0xFF.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Extraneous</span><span 
class="ec-lmbx-10">&#x00A0;call</span><span 
class="ec-lmbx-10">&#x00A0;graph</span><span 
class="ec-lmbx-10">&#x00A0;heading</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1968)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 3305--><p class="noindent" >In some instance a call graph heading may have been shown in the map file even though
     no call graph should have been produced.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bank</span><span 
class="ec-lmbx-10">&#x00A0;selection</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;long</span><span 
class="ec-lmbx-10">&#x00A0;objects</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1967)</span> </dt><dd 
class="description">
     <!--l. 3308--><p class="noindent" >In PIC18 projects, the bank of 32-bit wide integer objects that were a member/element
     of an aggregate type larger than a bank might not have been selected prior to that object
     being used in expressions involving basic math operations.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Broken</span><span 
class="ec-lmbx-10">&#x00A0;assembler</span><span 
class="ec-lmbx-10">&#x00A0;LIST</span><span 
class="ec-lmbx-10">&#x00A0;control</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1958)</span> </dt><dd 
class="description">
     <!--l. 3313--><p class="noindent" >Some valid arguments to the <span 
class="ec-lmtt-10">LIST </span>assembler control may have triggered a syntax error.
     Note that assembler controls have now been made directives, see <a 
href="#x1-400004">Migration Issues<!--tex4ht:ref: sec:Migration-Issues --></a> for more
     information.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Looping</span><span 
class="ec-lmbx-10">&#x00A0;around</span><span 
class="ec-lmbx-10">&#x00A0;allocGlobals</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1851)</span> </dt><dd 
class="description">
     <!--l. 3317--><p class="noindent" >PIC18   projects   using   the   C90   standard   and   libraries   might   have   generated   a
     <span 
class="ec-lmtt-10">looping</span><span 
class="ec-lmtt-10">&#x00A0;around</span><span 
class="ec-lmtt-10">&#x00A0;allocGlobals() </span>error message in rare instances.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Library</span><span 
class="ec-lmbx-10">&#x00A0;search</span><span 
class="ec-lmbx-10">&#x00A0;order</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1936)</span> </dt><dd 
class="description">
     <!--l. 3320--><p class="noindent" >When searching for a symbol that was present in more than one library, the linker might
     have linked in the module from the wrong library. The library search order is now followed
     under all circumstances.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Cromwell</span><span 
class="ec-lmbx-10">&#x00A0;crashes</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;F*</span><span 
class="ec-lmbx-10">&#x00A0;filenames</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1933)</span> </dt><dd 
class="description">
     <!--l. 3324--><p class="noindent" >When a project had multiple <span 
class="ec-lmtt-10">static </span>functions with the same name and these functions
     were defined in a source file whose name begins with <span 
class="ts1-lmr10-">'</span>F<span 
class="ts1-lmr10-">'</span>, the cromwell utility might have
     crashed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Missing</span><span 
class="ec-lmbx-10">&#x00A0;keywords</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1921)</span> </dt><dd 
class="description">
     <!--l. 3328--><p class="noindent" >The compiler did not recognize the <span 
class="ec-lmtt-10">__software </span>and <span 
class="ec-lmtt-10">__compiled </span>keywords when building
     for C99 projects.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Code</span><span 
class="ec-lmbx-10">&#x00A0;generator</span><span 
class="ec-lmbx-10">&#x00A0;crash</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1905,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-1806,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-1923,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-1954)</span> </dt><dd 
class="description">
     <!--l. 3331--><p class="noindent" >When compiling for the C99 standard, the compiler<span 
class="ts1-lmr10-">'</span>s parser (Clang) would fail to ensure
     that  the  initializing  expressions  for  <span 
class="ec-lmtt-10">const</span>-qualifed  local  objects  were  a  compile-time
     constant. The compiler<span 
class="ts1-lmr10-">'</span>s code-generators assumed that check has already taken place, and
     might have crashed when encountering erroneous intermediate code from the parser.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Wrong</span><span 
class="ec-lmbx-10">&#x00A0;constant</span><span 
class="ec-lmbx-10">&#x00A0;propagation</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;duplicated</span><span 
class="ec-lmbx-10">&#x00A0;functions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1903)</span> </dt><dd 
class="description">
     <!--l. 3338--><p class="noindent" >In some instances, constant propagation optimizations were being incorrectly applied to
     auto variables in duplicated functions.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Incorrect</span><span 
class="ec-lmbx-10">&#x00A0;initialization</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1887)</span> </dt><dd 
class="description">
     <!--l. 3341--><p class="noindent" >For enhanced mid-range projects, the data used to initialize large objects whose address
     had been taken, might have been incorrect.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Looping</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1876)</span> </dt><dd 
class="description">
     <!--l. 3344--><p class="noindent" >Programs containing calls to unprototyped functions that had not been defined resulted
     in a "looping around globalAllocs" error.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;rotate</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1868)</span> </dt><dd 
class="description">
     <!--l. 3347--><p class="noindent" >At level 2 or higher optimization levels, the compiler would generate erroneous code or be
     unable to generate code for some expressions that implemented a left bit-rotate.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Unnecessary</span><span 
class="ec-lmbx-10">&#x00A0;conversion</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;branch</span><span 
class="ec-lmbx-10">&#x00A0;instruction</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1866)</span> </dt><dd 
class="description">
     <!--l. 3350--><p class="noindent" >The PIC18 assembler might have unnecessarily converted a conditional branch instruction
     to the opposite conditional branch over a branch or a skip instruction over a jump when
     the target of the branch was specified using the location counter, <span 
class="ec-lmtt-10">$</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Unnecessary</span><span 
class="ec-lmbx-10">&#x00A0;use</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;movffl</span><span 
class="ec-lmbx-10">&#x00A0;instruction</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1856)</span> </dt><dd 
class="description">
     <!--l. 3355--><p class="noindent" >For  projects  targeting  PIC18  devices  with  more  than  15  banks  of  data  memory,  the
     compiler used a <span 
class="ec-lmtt-10">movffl </span>instruction to access some objects (e.g. objects with automatic
     storage) allocated to banks 0-15 whereas a smaller <span 
class="ec-lmtt-10">movff </span>instruction would have sufficed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;timer</span><span 
class="ec-lmbx-10">&#x00A0;reads</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1854)</span> </dt><dd 
class="description">
     <!--l. 3360--><p class="noindent" >The  device-specific  headers  of  some  PIC18  devices  (e.g.  PIC18F<span 
class="ts1-lmr10-">'</span>K42)  do  not  provide
     definitions  of  joined  timer  registers  (e.g.  TMR0,  TMR1,  etc.).  In  such  cases,  the
     <span 
class="ec-lmtt-10">READTIMERx() </span>macros expanded into invalid code and potentially with no indication that
     this was the case. In such circumstances, the compiler will now emit a warning message
     that the macro is not supported by the current device.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">No</span><span 
class="ec-lmbx-10">&#x00A0;sign</span><span 
class="ec-lmbx-10">&#x00A0;extension</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;right</span><span 
class="ec-lmbx-10">&#x00A0;shift</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1833)</span> </dt><dd 
class="description">
     <!--l. 3367--><p class="noindent" >The compiler generated incorrect code for some expressions involving a right-shift of <span 
class="ec-lmtt-10">long</span>
     or <span 
class="ec-lmtt-10">long</span><span 
class="ec-lmtt-10">&#x00A0;long </span>integer object by 16 bits.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bank</span><span 
class="ec-lmbx-10">&#x00A0;assumption</span><span 
class="ec-lmbx-10">&#x00A0;disregarded</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;using</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;offset</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1533)</span> </dt><dd 
class="description">
     <!--l. 3370--><p class="noindent" >For PIC10/12/16 devices, the compiler generated runtime startup code might not have
     functioned correctly when the code offset feature (<span 
class="ec-lmtt-10">-mcodeoffset</span>) was used and code
     (typically a bootloader) executed prior to the startup code exited with a bank other than
     0 selected.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Assembler</span><span 
class="ec-lmbx-10">&#x00A0;memory</span><span 
class="ec-lmbx-10">&#x00A0;leaks</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1482)</span> </dt><dd 
class="description">
     <!--l. 3375--><p class="noindent" >A  number  of  substantial  memory  leaks  were  identified  and  closed  in  the  compiler<span 
class="ts1-lmr10-">'</span>s
     assemblers, thereby reducing their memory footprint. These leaks might have triggered
     out of memory errors for large projects.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">t</span><span 
class="ec-lmbx-10">&#x00A0;find</span><span 
class="ec-lmbx-10">&#x00A0;space</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1112)</span> </dt><dd 
class="description">
     <!--l. 3379--><p class="noindent" >When building code for enhanced mid-range devices, the placement of large objects that
     were less than the size of a bank might have triggered can<span 
class="ts1-lmr10-">'</span>t find space errors, even though
     there appeared to be sufficient memory available.</dd></dl>
                                                                               
                                                                               
<!--l. 3386--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-77000"></a>Version 2.19 (Functional Safety Release)</h4>
<!--l. 3388--><p class="noindent" >None.
<!--l. 3390--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-78000"></a>Version 2.10</h4>
<!--l. 3391--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Bogus</span><span 
class="ec-lmbx-10">&#x00A0;warnings</span><span 
class="ec-lmbx-10">&#x00A0;relating</span><span 
class="ec-lmbx-10">&#x00A0;to</span><span 
class="ec-lmbx-10">&#x00A0;structure</span><span 
class="ec-lmbx-10">&#x00A0;sizes</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1900)</span> </dt><dd 
class="description">
     <!--l. 3392--><p class="noindent" >Warnings stating incorrect sizes of structures might have been issued when building C99
     projects. This issue did not affect the generated code, which used the correct sizes and
     which would execute correctly.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Ineffective</span><span 
class="ec-lmbx-10">&#x00A0;switch</span><span 
class="ec-lmbx-10">&#x00A0;pragma</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1893)</span> </dt><dd 
class="description">
     <!--l. 3396--><p class="noindent" ><span 
class="ec-lmtt-10">#pragma</span><span 
class="ec-lmtt-10">&#x00A0;switch </span>directives placed inside a function body did not affect <span 
class="ec-lmtt-10">switch </span>statements
     within that function.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Interrupts</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;linked</span><span 
class="ec-lmbx-10">&#x00A0;from</span><span 
class="ec-lmbx-10">&#x00A0;libraries</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1888)</span> </dt><dd 
class="description">
     <!--l. 3399--><p class="noindent" >In projects where an interrupt function (ISR) was provided in a library and other modules
     in that library located before the ISR module were required by the program, the ISR
     module was not correctly linked into the program.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Unwatchable</span><span 
class="ec-lmbx-10">&#x00A0;reentrant</span><span 
class="ec-lmbx-10">&#x00A0;autos</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1878)</span> </dt><dd 
class="description">
     <!--l. 3403--><p class="noindent" >The ELF/DWARF output for some PIC18 projects (e.g. those for PIC18 K42 devices) had
     the wrong address of the frame-pointer register encoded. This prevented auto variables
     within reentrant functions from being watched in the MPLAB X IDE.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Assertion</span><span 
class="ec-lmbx-10">&#x00A0;failure</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;absolute</span><span 
class="ec-lmbx-10">&#x00A0;objects</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1870)</span> </dt><dd 
class="description">
     <!--l. 3408--><p class="noindent" >When a region of PIC18 memory is entirely consumed by absolute addressed objects and
     a program requires that an object with the corresponding memory-specifier be located in
     that region, the code-generator reported an assertion failure.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Broken</span><span 
class="ec-lmbx-10">&#x00A0;Mirrors</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1862)</span> </dt><dd 
class="description">
     <!--l. 3413--><p class="noindent" >In the device-specific C header files for 18(L)FxxK42 parts, many of the macros that
     describe the address of register-mirrors in the DMA space were incorrect.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Too</span><span 
class="ec-lmbx-10">&#x00A0;much</span><span 
class="ec-lmbx-10">&#x00A0;information</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1861)</span> </dt><dd 
class="description">
     <!--l. 3416--><p class="noindent" >Clang might have produced extraneous log output under Windows 7.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bit-fields</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;promoted</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1832)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 3418--><p class="noindent" >For non-PIC18 devices, operations on a structure bit-field may not have correctly promoted
     the bit-field value to a larger type, resulting in an incorrect result.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">rand()</span><span 
class="ec-lmbx-10">&#x00A0;out</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;range</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1823)</span> </dt><dd 
class="description">
     <!--l. 3421--><p class="noindent" >The C99 standard library function <span 
class="ec-lmtt-10">rand() </span>could have returned a pseudo-random number
     outside of its stipulated range of 0 to <span 
class="ec-lmtt-10">RAND_MAX</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Wrong</span><span 
class="ec-lmbx-10">&#x00A0;serial</span><span 
class="ec-lmbx-10">&#x00A0;values</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;Hexmate</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1820)</span> </dt><dd 
class="description">
     <!--l. 3424--><p class="noindent" >Hexmate serial values that had leading zeros in the <span 
class="ec-lmtt-10">-serial </span>option might not have been
     processed correctly, resulting in the wrong value or wrong number of values being inserted
     into the hex file.base
     </dd><dt class="description">
<span 
class="ec-lmbx-10">32-bit</span><span 
class="ec-lmbx-10">&#x00A0;installer</span><span 
class="ec-lmbx-10">&#x00A0;component</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1794)</span> </dt><dd 
class="description">
     <!--l. 3428--><p class="noindent" >One component of the installer application was not a 64-bit application, resulting in a
     warning message being issued by macOS.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">config</span><span 
class="ec-lmbx-10">&#x00A0;pragma</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;undetected</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1747)</span> </dt><dd 
class="description">
     <!--l. 3431--><p class="noindent" >The compiler failed to detect some syntax errors, such as missing assignment values, in
     the arguments provided to the <span 
class="ec-lmtt-10">#pragma</span><span 
class="ec-lmtt-10">&#x00A0;config </span>directive when more than one setting was
     specified in the one pragma.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bogus</span><span 
class="ec-lmbx-10">&#x00A0;pointer</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1685)</span> </dt><dd 
class="description">
     <!--l. 3435--><p class="noindent" >For          PIC16(L)F          devices          that          support          <span 
class="ec-lmtt-10">eeprom</span>-qualified
     objects, the compiler, in certain circumstances, may have incorrectly issued error 1402,
     <span 
class="ec-lmtt-10">a</span><span 
class="ec-lmtt-10">&#x00A0;pointer</span><span 
class="ec-lmtt-10">&#x00A0;to</span><span 
class="ec-lmtt-10">&#x00A0;eeprom</span><span 
class="ec-lmtt-10">&#x00A0;cannot</span><span 
class="ec-lmtt-10">&#x00A0;also</span><span 
class="ec-lmtt-10">&#x00A0;point</span><span 
class="ec-lmtt-10">&#x00A0;to</span><span 
class="ec-lmtt-10">&#x00A0;other</span><span 
class="ec-lmtt-10">&#x00A0;data</span><span 
class="ec-lmtt-10">&#x00A0;types</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Wrong</span><span 
class="ec-lmbx-10">&#x00A0;file</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;message</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1603)</span> </dt><dd 
class="description">
     <!--l. 3438--><p class="noindent" >If a syntax error was encountered on a preprocessed assembly source file, the compiler may
     have referenced an intermediate source file in its error message rather than the source file.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">No</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;bad</span><span 
class="ec-lmbx-10">&#x00A0;codeoffset</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1571)</span> </dt><dd 
class="description">
     <!--l. 3442--><p class="noindent" >Using an invalid value for the codeoffset feature might have resulted in the compiler exiting
     without an appropriate error message.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Code</span><span 
class="ec-lmbx-10">&#x00A0;size</span><span 
class="ec-lmbx-10">&#x00A0;fluctuations</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;formatted</span><span 
class="ec-lmbx-10">&#x00A0;printing</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1556)</span> </dt><dd 
class="description">
     <!--l. 3445--><p class="noindent" >Standard printing functions (e.g. <span 
class="ec-lmtt-10">sprintf</span>) that were referenced but not ultimately used
     in the project might have influenced the encoding (hence the code size) of other printing
     functions that <span 
class="ec-lmri-10">were </span>linked into the final program output.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">t</span><span 
class="ec-lmbx-10">&#x00A0;find</span><span 
class="ec-lmbx-10">&#x00A0;space</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1553)</span> </dt><dd 
class="description">
     <!--l. 3450--><p class="noindent" >For mid-range devices that have large amounts of common memory, the compiler may
     have produced a can<span 
class="ts1-lmr10-">''</span>t find space error rather than allocating large objects to that space.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bogus</span><span 
class="ec-lmbx-10">&#x00A0;warnings</span><span 
class="ec-lmbx-10">&#x00A0;from</span><span 
class="ec-lmbx-10">&#x00A0;library</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1552)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 3454--><p class="noindent" >In some cases when compiling for C90, library code from formatted output functions, like
     <span 
class="ec-lmtt-10">printf()</span>, would emit warning 373, <span 
class="ec-lmtt-10">implicit</span><span 
class="ec-lmtt-10">&#x00A0;signed</span><span 
class="ec-lmtt-10">&#x00A0;to</span><span 
class="ec-lmtt-10">&#x00A0;unsigned</span><span 
class="ec-lmtt-10">&#x00A0;conversion</span>
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Illegal</span><span 
class="ec-lmbx-10">&#x00A0;instructions</span><span 
class="ec-lmbx-10">&#x00A0;permitted</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1489)</span> </dt><dd 
class="description">
     <!--l. 3457--><p class="noindent" >The mid-range assembler failed to detect illegal instructions if the destination argument
     was supplied with the instruction.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Illegal</span><span 
class="ec-lmbx-10">&#x00A0;initialization</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;detected</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1457)</span> </dt><dd 
class="description">
     <!--l. 3460--><p class="noindent" >The compiler did not detect when absolute-addressed variables located in RAM were
     initialized with zero. Initializing such objects is not permitted and an error message is now
     emitted should such an initilization be found.</dd></dl>
<!--l. 3467--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-79000"></a>Version 2.05</h4>
<!--l. 3468--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Two</span><span 
class="ec-lmbx-10">&#x00A0;too</span><span 
class="ec-lmbx-10">&#x00A0;small</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1816)</span> </dt><dd 
class="description">
     <!--l. 3469--><p class="noindent" >For PIC10/12/16 devices, the size of the used program memory displayed in the memory
     summary might have been 2 words less than the actual usage. This issue only affected the
     memory summary printed by the driver; the linker map file was accurate.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">No</span><span 
class="ec-lmbx-10">&#x00A0;abstraction</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;inlined</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1813)</span> </dt><dd 
class="description">
     <!--l. 3474--><p class="noindent" >When compiling for space, procedural abstraction optimizations might not have been
     applied to code inside functions that had been inlined.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Clang</span><span 
class="ec-lmbx-10">&#x00A0;hanging</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1798)</span> </dt><dd 
class="description">
     <!--l. 3477--><p class="noindent" >The compiler hung when building for C99, it encountered code that declared an incomplete
     array and later redeclared a complete version of the array in the same translation unit.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Multiplication</span><span 
class="ec-lmbx-10">&#x00A0;errors</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1770)</span> </dt><dd 
class="description">
     <!--l. 3481--><p class="noindent" >For PIC18 projects being built for speed, expressions involving multiple instances of 16-bit
     multiplication that used certain operands might have produced an incorrect result due to
     the <span 
class="ec-lmtt-10">PROD </span>register being clobbered mid-calculation.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">int$flags</span><span 
class="ec-lmbx-10">&#x00A0;undefined</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1768)</span> </dt><dd 
class="description">
     <!--l. 3485--><p class="noindent" >The compiler might have issued an undefined symbol error for the symbol <span 
class="ec-lmtt-10">int$flags </span>when
     building small PIC18 projects that used interrupts.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Redefinition</span><span 
class="ec-lmbx-10">&#x00A0;errors</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;library</span><span 
class="ec-lmbx-10">&#x00A0;interrupts</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1766)</span> </dt><dd 
class="description">
     <!--l. 3488--><p class="noindent" >When  linking  libraries  that  contained  interrupt  functions,  a  conflicting  declaration  or
     redefined symbol error might have occurred.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Errors</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;C99</span><span 
class="ec-lmbx-10">&#x00A0;interrupts</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1764)</span> </dt><dd 
class="description">
     <!--l. 3491--><p class="noindent" >Macros passed as arguments to the <span 
class="ec-lmtt-10">__interrupt() </span>specifier might not have been expanded
     when building for C99 PIC18 projects, resulting in a compilation error.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">EI-DI-O</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1719)</span> </dt><dd 
class="description">
     <!--l. 3494--><p class="noindent" >The <span 
class="ec-lmtt-10">ei() </span>and <span 
class="ec-lmtt-10">di() </span>macros, which enable and disable, respectively, the global interrupt
     enable bit, were not defined for some enhanced mid-range device. The affected devices
     have the identification <span 
class="ec-lmtt-10">PIC14EX </span>in the compiler<span 
class="ts1-lmr10-">'</span>s <span 
class="ec-lmtt-10">chipinfo.ini </span>file. In addition, these
     same devices were missing the prototype for the <span 
class="ec-lmtt-10">_delay3() </span>builtin function, which would
     have resulted in a an error if that function had been used in a project. All these macros
     and functions are now available for these devices.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Return</span><span 
class="ec-lmbx-10">&#x00A0;value</span><span 
class="ec-lmbx-10">&#x00A0;clobbers</span><span 
class="ec-lmbx-10">&#x00A0;other</span><span 
class="ec-lmbx-10">&#x00A0;objects</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1709)</span> </dt><dd 
class="description">
     <!--l. 3503--><p class="noindent" >In some cases when a function returned a pointer to a structure type that contains a
     function-pointer member, the compiler may not have allocated space on a compiled stack
     for the return value, resulting in it clobbering other objects.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">t</span><span 
class="ec-lmbx-10">&#x00A0;generate</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;Free</span><span 
class="ec-lmbx-10">&#x00A0;license</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1660)</span> </dt><dd 
class="description">
     <!--l. 3508--><p class="noindent" >Case label values that used expressions involving the conditional (ternary) operator might
     have  triggered  can&#8217;t  generate  code  errors  when  using  an  unlicensed  compiler  or  the
     optimizations were disabled.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">t</span><span 
class="ec-lmbx-10">&#x00A0;generate</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;Free</span><span 
class="ec-lmbx-10">&#x00A0;license</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1600)</span> </dt><dd 
class="description">
     <!--l. 3512--><p class="noindent" >In  some  instances,  initialization  of  <span 
class="ec-lmtt-10">const</span>-qualified  objects  with  a  complex  constant
     expression might have issued a can<span 
class="ts1-lmr10-">'</span>t generate code error when using an unlicensed compiler
     or the optimizations were disabled.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;conversion</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;pointer</span><span 
class="ec-lmbx-10">&#x00A0;return</span><span 
class="ec-lmbx-10">&#x00A0;value</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1590)</span> </dt><dd 
class="description">
     <!--l. 3517--><p class="noindent" >In some enhanced mid-range projects, incorrect code was generated for the conversion of a
     1-byte RAM pointer to a 2-byte pointer. Specifically, in the case where the 1-byte pointer
     contents was a return value that was used immediately by the <span 
class="ec-lmtt-10">return </span>statement of another
     function which returned that pointer.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">t</span><span 
class="ec-lmbx-10">&#x00A0;generate</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;pointer</span><span 
class="ec-lmbx-10">&#x00A0;dereferences</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1579)</span> </dt><dd 
class="description">
     <!--l. 3523--><p class="noindent" >Can&#8217;t generate code errors might have been produced for complex projects that defined
     structures that contained function pointers members.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">t</span><span 
class="ec-lmbx-10">&#x00A0;generate</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;if()</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1384)</span> </dt><dd 
class="description">
     <!--l. 3526--><p class="noindent" >In instances where an <span 
class="ec-lmtt-10">if() </span>statement in a mid-range project had no body statements and
     the controlling expression had <span 
class="ec-lmtt-10">volatile </span>identifiers, a Can<span 
class="ts1-lmr10-">'</span>t Generate Code error might
     have been produced.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Too</span><span 
class="ec-lmbx-10">&#x00A0;positive</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1244)</span> </dt><dd 
class="description">
     <!--l. 3531--><p class="noindent" >Code in PIC18 projects that used a reentrant stack was printing negative floating-point
     values as positive rather than negative values. This only affected those projects using the
                                                                               
                                                                               
     C90 libraries.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Incorrect</span><span 
class="ec-lmbx-10">&#x00A0;stack</span><span 
class="ec-lmbx-10">&#x00A0;allocations</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1105)</span> </dt><dd 
class="description">
     <!--l. 3535--><p class="noindent" >Projects  assigning  incompatible  function  addresses  to  a  function  pointers  might  have
     experienced memory allocation issues with the indirectly referenced functions<span 
class="ts1-lmr10-">' </span>stack-based
     objects.</dd></dl>
<!--l. 3541--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-80000"></a>Version 2.00</h4>
<!--l. 3542--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Timer</span><span 
class="ec-lmbx-10">&#x00A0;values</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1743)</span> </dt><dd 
class="description">
     <!--l. 3543--><p class="noindent" >When comparing timer registers with a constant value, the compiler might have avoided
     reading the lower byte of the timer register, which would result in the entire timer register
     not being updated correctly. This optimization is no longer applied to objects specified as
     <span 
class="ec-lmtt-10">volatile</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Negative</span><span 
class="ec-lmbx-10">&#x00A0;zeros</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1694)</span> </dt><dd 
class="description">
     <!--l. 3548--><p class="noindent" >The compiler had not been capable of generating a negative zero floating-point constant.
     This has been corrected, and the constant <span 
class="ec-lmtt-10">-0.0 </span>will be encoded with the sign bit set.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Unwelcome</span><span 
class="ec-lmbx-10">&#x00A0;degenerates</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1684)</span> </dt><dd 
class="description">
     <!--l. 3552--><p class="noindent" >In expressions where a compiler optimization replaced the use of a variable with a literal
     constant zero, the compiler might have warned about the variable no longer being used or
     being degenerate in comparisons/relational expressions.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Delay</span><span 
class="ec-lmbx-10">&#x00A0;errors</span><span 
class="ec-lmbx-10">&#x00A0;and</span><span 
class="ec-lmbx-10">&#x00A0;inaccuracies</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1677)</span> </dt><dd 
class="description">
     <!--l. 3556--><p class="noindent" >If the parameter to the built-in delay routine was not a constant value (e.g. a constant
     expression), the compiler might have issued undefined symbol errors, or generated an
     inaccurate delay. An error will now be issued if the delay argument is not a constant value.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">pic.h</span><span 
class="ec-lmbx-10">&#x00A0;rejected</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1676)</span> </dt><dd 
class="description">
     <!--l. 3561--><p class="noindent" >When building for non-PIC18 devices, errors might have been produced for code in the
     <span 
class="ec-lmtt-10">pic.h </span>header file when the <span 
class="ec-lmtt-10">--ADDRQUAL=reject </span>option was specified.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Inaccurate</span><span 
class="ec-lmbx-10">&#x00A0;device</span><span 
class="ec-lmbx-10">&#x00A0;memory</span><span 
class="ec-lmbx-10">&#x00A0;report</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1675,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-1650)</span> </dt><dd 
class="description">
     <!--l. 3564--><p class="noindent" >For some devices, the total available program or data memory reported in the memory
     summary after compilation might not have been accurate. This issue did not affect the
     reported amount of memory used.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Function</span><span 
class="ec-lmbx-10">&#x00A0;pointer</span><span 
class="ec-lmbx-10">&#x00A0;holding</span><span 
class="ec-lmbx-10">&#x00A0;data</span><span 
class="ec-lmbx-10">&#x00A0;address</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1672)</span> </dt><dd 
class="description">
     <!--l. 3568--><p class="noindent" >Assigning ((void *)0) to a function pointer might have incorrectly generated a warning
     sating that a function pointer cannot be used to hold the address of data. This issue will
                                                                               
                                                                               
     be corrected when building with the C99 standard and the Clang front end.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bogus</span><span 
class="ec-lmbx-10">&#x00A0;Arithmetic</span><span 
class="ec-lmbx-10">&#x00A0;overflow</span><span 
class="ec-lmbx-10">&#x00A0;warnings</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1671)</span> </dt><dd 
class="description">
     <!--l. 3573--><p class="noindent" >Certain complex constant expressions might have produced arithmetic overflow warnings
     for valid code when compiled with level 0 optimizations.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">t</span><span 
class="ec-lmbx-10">&#x00A0;generator</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;case</span><span 
class="ec-lmbx-10">&#x00A0;label</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1660)</span> </dt><dd 
class="description">
     <!--l. 3576--><p class="noindent" >When compiling with a non-zero level optimization, the compiler might have issued a Can<span 
class="ts1-lmr10-">'</span>t
     generate code error for <span 
class="ec-lmtt-10">case </span>label expressions in <span 
class="ec-lmtt-10">switch() </span>statements involve the <span 
class="ec-lmtt-10">?</span><span 
class="ec-lmtt-10">&#x00A0;:</span>
     operator. This has been corrected; however, the error still exists with level 0 optimizations.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Data</span><span 
class="ec-lmbx-10">&#x00A0;corruption</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;free</span><span 
class="ec-lmbx-10">&#x00A0;mode</span><span 
class="ec-lmbx-10">&#x00A0;context</span><span 
class="ec-lmbx-10">&#x00A0;save</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1638)</span> </dt><dd 
class="description">
     <!--l. 3582--><p class="noindent" >When operating in Free mode, the compiler might have saved context to <span 
class="ec-lmtt-10">btemp </span>registers
     that were never defined. This issue will no longer occur, and additionally, the list of registers
     saved by Free mode more closely matches that of PRO mode.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Librarian</span><span 
class="ec-lmbx-10">&#x00A0;crash</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1634)</span> </dt><dd 
class="description">
     <!--l. 3587--><p class="noindent" >When extracting modules from a library under Windows, the librarian might have crashed
     when creating a directory.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">t</span><span 
class="ec-lmbx-10">&#x00A0;find</span><span 
class="ec-lmbx-10">&#x00A0;space</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1609)</span> </dt><dd 
class="description">
     <!--l. 3589--><p class="noindent" >For PIC10/12/14/16 projects using non-default linker options and where one or more
     regions of program memory were quite small, a can<span 
class="ts1-lmr10-">'</span>t find space error might have occurred,
     even though there was sufficient remaining space.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">No</span><span 
class="ec-lmbx-10">&#x00A0;type</span><span 
class="ec-lmbx-10">&#x00A0;match</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;shifting</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1606)</span> </dt><dd 
class="description">
     <!--l. 3594--><p class="noindent" >When building PIC18 projects with level 2 optimizations, expressions involving right shifts
     by 8 bits and a conversion of the result to a smaller type might have produced a no type
     match error.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Context</span><span 
class="ec-lmbx-10">&#x00A0;save</span><span 
class="ec-lmbx-10">&#x00A0;corruption</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;reentrant</span><span 
class="ec-lmbx-10">&#x00A0;stack</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1604)</span> </dt><dd 
class="description">
     <!--l. 3598--><p class="noindent" >When building for enhanced mid-range devices in Free mode and using the reentrant stack,
     the interrupt context save code was not correctly mirrored by the context restoration code,
     resulting in data corruption. This issue will no longer occur, and additionally, the list of
     registers saved by Free mode more closely matches that of PRO mode.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Unterminated</span><span 
class="ec-lmbx-10">&#x00A0;macro</span><span 
class="ec-lmbx-10">&#x00A0;definitions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1514)</span> </dt><dd 
class="description">
     <!--l. 3604--><p class="noindent" >The parser was compiling without error preprocessor macro definitions which were missing
     closing parentheses. This issue will be corrected when building with the C99 standard and
     the Clang front end.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">t</span><span 
class="ec-lmbx-10">&#x00A0;find</span><span 
class="ec-lmbx-10">&#x00A0;space</span><span 
class="ec-lmbx-10">&#x00A0;errors</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1596,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-1273)</span> </dt><dd 
class="description">
     <!--l. 3608--><p class="noindent" >When building for enhanced mid-range projects, a can<span 
class="ts1-lmr10-">'</span>t find space error might have been
     emitted where an absolute linear-memory object was positioned in the same bank as
     another absolute non-linear memory object, even though their addresses did not overlap.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bogus</span><span 
class="ec-lmbx-10">&#x00A0;signed</span><span 
class="ec-lmbx-10">&#x00A0;to</span><span 
class="ec-lmbx-10">&#x00A0;unsigned</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1586)</span> </dt><dd 
class="description">
     <!--l. 3613--><p class="noindent" >In some instances, when an integer expression used as an array index was promoted to
     an int, the generation of a implicit signed to unsigned conversion warning might have
     occurred. This issue will be corrected when building with the C99 standard and the Clang
     front end.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;intermediate</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1560)</span> </dt><dd 
class="description">
     <!--l. 3618--><p class="noindent" >In some cases, where a member of a structure had a typedef<span 
class="ts1-lmr10-">'</span>d type, that was used in a
     previous definition before the structure, the code generator emitted the error message "bad
     intermediate code". This issue will be corrected when building with the C99 standard and
     the Clang front end, but for legacy projects an error is now emitted and the issue can
     possibly be worked-around by ensuring that the structure is the first definition to use the
     typedef<span 
class="ts1-lmr10-">'</span>d type.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Syntax</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;reported</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;conditional</span><span 
class="ec-lmbx-10">&#x00A0;operator</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1536)</span> </dt><dd 
class="description">
     <!--l. 3626--><p class="noindent" >In complex expressions involving the ternary operator, the compiler might have incorrectly
     issue a expression syntax error. This issue will be corrected when building with the C99
     standard and the Clang front end.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Incorrect</span><span 
class="ec-lmbx-10">&#x00A0;structure</span><span 
class="ec-lmbx-10">&#x00A0;initializer</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;detected</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1530)</span> </dt><dd 
class="description">
     <!--l. 3631--><p class="noindent" >Code which initializes a structures with an integer type was not detected. This issue will
     be corrected when building with the C99 standard and the Clang front end.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Crash</span><span 
class="ec-lmbx-10">&#x00A0;over</span><span 
class="ec-lmbx-10">&#x00A0;include</span><span 
class="ec-lmbx-10">&#x00A0;paths</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1527)</span> </dt><dd 
class="description">
     <!--l. 3635--><p class="noindent" >When compiling for C90 and using relative paths involving forward slashes in include
     statements, the compiler might have experienced a crash on some platforms. This issue
     will be corrected when building with the C99 standard and the Clang front end.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Array</span><span 
class="ec-lmbx-10">&#x00A0;argument</span><span 
class="ec-lmbx-10">&#x00A0;conflict</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1467)</span> </dt><dd 
class="description">
     <!--l. 3640--><p class="noindent" >Some arrays of pointers when passed to a function might have triggered an argument
     conflict with prototype error, even thought the type of the argument appeared to match
     that required by the prototype. This issue will be corrected when building with the C99
     standard and the Clang front end.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Valid</span><span 
class="ec-lmbx-10">&#x00A0;declarations</span><span 
class="ec-lmbx-10">&#x00A0;marks</span><span 
class="ec-lmbx-10">&#x00A0;as</span><span 
class="ec-lmbx-10">&#x00A0;conflicting</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1466)</span> </dt><dd 
class="description">
     <!--l. 3645--><p class="noindent" >Declarations for an object using the <span 
class="ec-lmtt-10">static </span>specifier that were accompanied by definitions
     of the same object but that omitted the <span 
class="ec-lmtt-10">static </span>specifier produced a warning and error,
     stating that there had been a redeclaration of the object with a different storage class.
     This issue will be corrected when building with the C99 standard and the Clang front end.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Incorrect</span><span 
class="ec-lmbx-10">&#x00A0;parsing</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;backslash</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;comments</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1460)</span> </dt><dd 
class="description">
     <!--l. 3652--><p class="noindent" >The handling of the backslash character when compiling for C90 was incorrect when used
     within comments. This issue will be corrected when building with the C99 standard and
     the Clang front end.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Debugging</span><span 
class="ec-lmbx-10">&#x00A0;line</span><span 
class="ec-lmbx-10">&#x00A0;issues</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1438)</span> </dt><dd 
class="description">
     <!--l. 3656--><p class="noindent" >Using a macro to represent the header file of a <span 
class="ec-lmtt-10">#include </span>preprocessor directive resulted in
     incorrect line number information being contained in compiler debug output files (ELF or
     COFF). This issue will be corrected when building with the C99 standard and the Clang
     front end.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Macro</span><span 
class="ec-lmbx-10">&#x00A0;expansion</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1413)</span> </dt><dd 
class="description">
     <!--l. 3661--><p class="noindent" >The preprocessor did not correctly expand preprocessor macros whose replacement text
     required several levels of subsequent macro expansion. This issue will be corrected when
     building with the C99 standard and the Clang front end.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">t</span><span 
class="ec-lmbx-10">&#x00A0;find</span><span 
class="ec-lmbx-10">&#x00A0;space</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;large</span><span 
class="ec-lmbx-10">&#x00A0;const</span><span 
class="ec-lmbx-10">&#x00A0;objects</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1404)</span> </dt><dd 
class="description">
     <!--l. 3665--><p class="noindent" >When building for enhanced mid-range projects, <span 
class="ec-lmtt-10">const </span>objects placed at an absolute
     address (using either <span 
class="ec-lmtt-10">@ </span>or <span 
class="ec-lmtt-10">__at()</span>) had their maximum size incorrectly limited to the size
     of a program memory page.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Malformed</span><span 
class="ec-lmbx-10">&#x00A0;hex</span><span 
class="ec-lmbx-10">&#x00A0;constants</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1393)</span> </dt><dd 
class="description">
     <!--l. 3670--><p class="noindent" >Non-zero digits preceding the <span 
class="ec-lmtt-10">x </span>character in what was intended to be a hexadecimal integer
     constant (e.g. <span 
class="ec-lmtt-10">1xFF</span>) might have been incorrectly accepted by the compiler. This issue will
     be corrected when building with the C99 standard and the Clang front end.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Fixup</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;__IT_INT_MASK</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1382)</span> </dt><dd 
class="description">
     <!--l. 3675--><p class="noindent" >On rare occasions, PIC18 projects building with the REALICE debugger enabled, might
     have experienced fixup errors for the symbol <span 
class="ec-lmtt-10">__IT_INT_MASK</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">t</span><span 
class="ec-lmbx-10">&#x00A0;generate</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;offsetof</span><span 
class="ec-lmbx-10">&#x00A0;macro</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1374)</span> </dt><dd 
class="description">
     <!--l. 3678--><p class="noindent" >mid-range projects might have produced can&#8217;t generate code errors when using the offsetof
     macro.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Undetected</span><span 
class="ec-lmbx-10">&#x00A0;redefinitions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1373)</span> </dt><dd 
class="description">
     <!--l. 3681--><p class="noindent" >In some instances, multiple definitions of the same local variable (which is not permitted
     by the C standard) was not detected by the parser. This issue will be corrected when
     building with the C99 standard and the Clang front end.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Crash</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;processing</span><span 
class="ec-lmbx-10">&#x00A0;assembly</span><span 
class="ec-lmbx-10">&#x00A0;source</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1342)</span> </dt><dd 
class="description">
     <!--l. 3686--><p class="noindent" >If an assembly module contained an empty psect that was positioned via an <span 
class="ec-lmtt-10">ORG </span>directive,
     the driver might have crashed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Code</span><span 
class="ec-lmbx-10">&#x00A0;generator</span><span 
class="ec-lmbx-10">&#x00A0;crash</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1338)</span> </dt><dd 
class="description">
     <!--l. 3689--><p class="noindent" >In PIC18 projects, initialization of arrays of structures containing array members using
     complex macros, might have caused the code generator to crash. This issue will be corrected
     when building with the C99 standard and the Clang front end.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Invalid</span><span 
class="ec-lmbx-10">&#x00A0;array</span><span 
class="ec-lmbx-10">&#x00A0;dimensions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1336)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 3694--><p class="noindent" >The compiler might not have issued an error when the dimension of an array was a constant
     expression with a negative value (e.g. <span 
class="ec-lmtt-10">0</span><span 
class="ec-lmtt-10">&#x00A0;?</span><span 
class="ec-lmtt-10">&#x00A0;1</span><span 
class="ec-lmtt-10">&#x00A0;:</span><span 
class="ec-lmtt-10">&#x00A0;-1</span>). This issue will be corrected when
     building with the C99 standard and the Clang front end.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Unhelpful</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1325)</span> </dt><dd 
class="description">
     <!--l. 3699--><p class="noindent" >An error message resulting from an unterminated <span 
class="ec-lmtt-10">#if[n][def] </span>block might not have
     mentioned the name of the file in which the error was present.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">BASEM</span><span 
class="ec-lmbx-10">&#x00A0;undefined</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;printf</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1296)</span> </dt><dd 
class="description">
     <!--l. 3702--><p class="noindent" >Using the (<span 
class="ec-lmtt-10">s</span>)<span 
class="ec-lmtt-10">printf </span>format specifiers <span 
class="ec-lmtt-10">%#08lx </span>might have resulted in an error for the
     undefined symbol <span 
class="ec-lmtt-10">BASEM</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Error</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;enumeration</span><span 
class="ec-lmbx-10">&#x00A0;value</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1284)</span> </dt><dd 
class="description">
     <!--l. 3705--><p class="noindent" >Setting an enumeration value to be the size of a structure (using the <span 
class="ec-lmtt-10">sizeof </span>operator)
     might have generated an error. This issue will be corrected when building with the C99
     standard and the Clang front end.</dd></dl>
<!--l. 3711--><p class="noindent" >
<h4 class="likesubsectionHead"><a 
 id="x1-81000"></a>Versions 1.XX</h4>
<!--l. 3713--><p class="noindent" >For information regarding fixed issues relating to version 1.xx compilers, see the release notes of any
compiler version prior to v3.00.
<!--l. 3716--><p class="noindent" >
<h3 class="sectionHead"><span class="titlemark">6   </span> <a 
 id="x1-820006"></a>Known Issues</h3>
<!--l. 3718--><p class="noindent" >The following are limitations in the compiler<span 
class="ts1-lmr10-">'</span>s operation. These may be general coding restrictions, or
deviations from information contained in the user&#8217;s manual. The bracketed label(s) in the title are that
issue<span 
class="ts1-lmr10-">'</span>s identification in the tracking database. This may be of benefit if you need to contact support.
Those items which do not have labels are limitations that describe <span 
class="ec-lmri-10">modi operandi </span>and which are likely
to remain in effect permanently.
<!--l. 3726--><p class="noindent" >
<h5 class="subsubsectionHead"><a 
 id="x1-83000"></a>IDE Integration</h5>
<a 
 id="x1-83000doc"></a>
<!--l. 3729--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">MPLAB</span><span 
class="ec-lmbx-10">&#x00A0;X</span><span 
class="ec-lmbx-10">&#x00A0;IDE</span><span 
class="ec-lmbx-10">&#x00A0;update</span> </dt><dd 
class="description">
     <!--l. 3730--><p class="noindent" >If you encounter the MPLAB X IDE error <span 
class="ec-lmtt-10">The</span><span 
class="ec-lmtt-10">&#x00A0;program</span><span 
class="ec-lmtt-10">&#x00A0;file</span><span 
class="ec-lmtt-10">&#x00A0;could</span><span 
class="ec-lmtt-10">&#x00A0;not</span><span 
class="ec-lmtt-10">&#x00A0;be</span><span 
class="ec-lmtt-10">&#x00A0;loaded </span>for
     projects that use the compiler&#8217;s (default) ELF output, please update your IDE to at least
     version 2.30. There was an issue in the ELF loader that triggered this error and prevented
     projects from being debugged, but which has been resolved. If you cannot update the IDE,
     switch your project settings to COFF output.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">MPLAB</span><span 
class="ec-lmbx-10">&#x00A0;IDE</span><span 
class="ec-lmbx-10">&#x00A0;integration</span> </dt><dd 
class="description">
     <!--l. 3737--><p class="noindent" >If Compiler is to be used from MPLAB IDE, then you must install MPLAB IDE prior to
     installing Compiler.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">No</span><span 
class="ec-lmbx-10">&#x00A0;pragma</span><span 
class="ec-lmbx-10">&#x00A0;suggestions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3517)</span> </dt><dd 
class="description">
     <!--l. 3739--><p class="noindent" >The MPLAB Extensions for VS Code are not able to make suggestions for the arguments
     to any <span 
class="ec-lmtt-10">#pragma config </span>directives.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Wrong</span><span 
class="ec-lmbx-10">&#x00A0;parameter</span><span 
class="ec-lmbx-10">&#x00A0;location</span><span 
class="ec-lmbx-10">&#x00A0;shown</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1565)</span> </dt><dd 
class="description">
     <!--l. 3742--><p class="noindent" >In some cases, where the definitions of a function<span 
class="ts1-lmr10-">'</span>s parameters were spread over multiple
     lines and the argument of the first parameter was originally stored in WREG, the debug
     information relating to the location of the parameter might have been incorrect and the
     IDE indicated an address <span 
class="ec-lmtt-10">WREG0</span><span 
class="ec-lmtt-10">&#x00A0;(CPU)</span>, even if the parameter was moved to memory. As
     a workaround, consider placing the name of the function and its first parameter on the
     same source line, or use the option <span 
class="ec-lmtt-10">-Xxc8</span><span 
class="ec-lmtt-10">&#x00A0;-W--dwarf-use-loclists=never</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Debugging</span><span 
class="ec-lmbx-10">&#x00A0;problems</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;using</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;macro</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;header</span><span 
class="ec-lmbx-10">&#x00A0;name</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1438)</span> </dt><dd 
class="description">
     <!--l. 3751--><p class="noindent" >When including a header file whose name is specifier as a preprocessor macro, can result
     in incorrect line number information in the debugging files which would affect the ability
     to set breakpoints and step code. This issue only affects projects using the P1 parser.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">t</span><span 
class="ec-lmbx-10">&#x00A0;find</span><span 
class="ec-lmbx-10">&#x00A0;space</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;absolutes</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1327)</span> </dt><dd 
class="description">
     <!--l. 3756--><p class="noindent" >In projects that used absolute addressed objects in program memory, a "cannot find space"
     error might have occurred, as a result of the assembler<span 
class="ts1-lmr10-">'</span>s psect-merging optimization. In
     such case, the issue can be worked-around by either disabling psect-merging (i.e. using the
     option <span 
class="ec-lmtt-10">-Wa,-no_merge</span>) or by reserving the program memory occupied by those objects
     (using <span 
class="ec-lmtt-10">-mrom </span>or <span 
class="ec-lmtt-10">-mreserve</span>).
     </dd><dt class="description">
<span 
class="ec-lmbx-10">CMF</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;maverick</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1279)</span> </dt><dd 
class="description">
     <!--l. 3764--><p class="noindent" >Code or data that is not explicitly placed into a psect will become part of the default
     (unnamed) psect. Projects containing assembly code that were placed in such a psect
     caused the compiler to emit the error "(1437) CMF error: no psect defined for the line". As
     a workaround, place the assembly code in an appropriate psect. Using the default psect
     at any time is not recommended.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Use</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;XC8</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;MPLAB</span><span 
class="ec-lmbx-10">&#x00A0;IDE</span><span 
class="ec-lmbx-10">&#x00A0;v8</span><span 
class="ec-lmbx-10">&#x00A0;is</span><span 
class="ec-lmbx-10">&#x00A0;now</span><span 
class="ec-lmbx-10">&#x00A0;deprecated</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1228)</span> </dt><dd 
class="description">
     <!--l. 3771--><p class="noindent" >As of MPLAB XC8 v1.34, the use of MPLAB 8 IDE is deprecated, and the installation
     of the DLL files that the IDE used to interface to XC8 are removed from the compiler
     installer.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">ELF</span><span 
class="ec-lmbx-10">&#x00A0;debugging</span><span 
class="ec-lmbx-10">&#x00A0;issues</span> </dt><dd 
class="description">
     <!--l. 3775--><p class="noindent" >Not all aspects of the ELF/DWARF debugging file have been implemented. MPLAB XC8
     version 1.30 implements DWARF version 3 which allows for improved debugging. Only
     MPLAB X IDE supports ELF, but you must ensure that you are using a version of this
     IDE that can process ELF files produced by the compiler. The following are some of the
     issues that may not work as expected with this release of the compiler.</dd></dl>
                                                                               
                                                                               
     <ul class="itemize1">
     <li class="itemize">
     <!--l. 3784--><p class="noindent" ><span 
class="ec-lmbx-10">Unused variables (XC8-747) </span>will not be identified in the ELF file.
     </li>
     <li class="itemize">
     <!--l. 3786--><p class="noindent" ><span 
class="ec-lmbx-10">Constant  propagation  optimizations  (XC8-744) </span>may  affect  which  variables  are
     watchable in the IDE or the values that are indicated in the Watch window.
     </li>
     <li class="itemize">
     <!--l. 3789--><p class="noindent" ><span 
class="ec-lmbx-10">In-line C functions (XC8-748) </span>will not be debuggable.
     </li>
     <li class="itemize">
     <!--l. 3790--><p class="noindent" ><span 
class="ec-lmbx-10">Procedural abstraction (XC8-749) </span>will affect the operation of breakpoints.
     </li>
     <li class="itemize">
     <!--l. 3792--><p class="noindent" ><span 
class="ec-lmbx-10">External memory variables (MPLABX-2004, MPLABX-2255, and others) </span>will
     not be displayed correctly in the Watch window.
     </li>
     <li class="itemize">
     <!--l. 3794--><p class="noindent" >The <span 
class="ec-lmri-10">type </span>name (as opposed to the object<span 
class="ts1-lmr10-">'</span>s name) that appears for an anonymous structure
     or union typedef or an enumerated typedef will be shown as "." in the Watch window.
     </li>
     <li class="itemize">
     <!--l. 3798--><p class="noindent" >The <span 
class="ec-lmri-10">type </span>name displayed for an identifier that was declared using a typedef type will be
     the identifier<span 
class="ts1-lmr10-">'</span>s semantic type rather than its typedef type in the Watch window.</li></ul>
<!--l. 3803--><p class="noindent" >
<h5 class="subsubsectionHead"><a 
 id="x1-84000"></a>Code Generation</h5>
<a 
 id="x1-84000doc"></a>
<!--l. 3806--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Optimization</span><span 
class="ec-lmbx-10">&#x00A0;error</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;hand-written</span><span 
class="ec-lmbx-10">&#x00A0;assembly</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3507)</span> </dt><dd 
class="description">
     <!--l. 3807--><p class="noindent" >In some instances, the optimizer might incorrectly encode flow control instructions, such
     as a <span 
class="ec-lmtt-10">goto</span>, if the <span 
class="ec-lmtt-10">PAGEMASK </span>macro has been used with the operand. This only affects
     hand-written assembly code and only when the <span 
class="ec-lmtt-10">-fasmfile </span>option (<span 
class="ec-lmbx-10">Assembler file </span>control
     in the MPLAB X IDE) has been enabled.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Wrong</span><span 
class="ec-lmbx-10">&#x00A0;source</span><span 
class="ec-lmbx-10">&#x00A0;format</span><span 
class="ec-lmbx-10">&#x00A0;accepted</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3495)</span> </dt><dd 
class="description">
     <!--l. 3813--><p class="noindent" >The compiler is allowing C source files to be processed with the <span 
class="ec-lmtt-10">-xassembler-with-cpp</span>
     option has been issued. This option should dictate that the source file is a pre-processed
     assembly file, regardless of its extension.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Crash</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;unions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3458)</span> </dt><dd 
class="description">
     <!--l. 3817--><p class="noindent" >In  some  instances,  compiling  unions  with  function  pointer  members  might  cause  the
     compiler to crash
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Crash</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;string</span><span 
class="ec-lmbx-10">&#x00A0;address</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3404)</span> </dt><dd 
class="description">
     <!--l. 3819--><p class="noindent" >Taking the address of a string literal, for example <span 
class="ec-lmtt-10">&amp;"oops" </span>can cause the compiler to crash.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Parameter</span><span 
class="ec-lmbx-10">&#x00A0;corruption</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3377)</span> </dt><dd 
class="description">
     <!--l. 3822--><p class="noindent" >In cases where a function takes a byte-sized object as it first parameter and additional
     parameters involve an indirect function call to obtain the argument, the function<span 
class="ts1-lmr10-">'</span>s first
     argument might be incorrectly passed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Simple</span><span 
class="ec-lmbx-10">&#x00A0;configuration</span><span 
class="ec-lmbx-10">&#x00A0;expressions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3310)</span> </dt><dd 
class="description">
     <!--l. 3826--><p class="noindent" >At present, the argument expressions to the <span 
class="ec-lmtt-10">CONFIG </span>assembler directive are not folded,
     meaning that these are limited to symbolic or literal values with no other operators.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Invalid</span><span 
class="ec-lmbx-10">&#x00A0;unlock</span><span 
class="ec-lmbx-10">&#x00A0;sequence</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3284)</span> </dt><dd 
class="description">
     <!--l. 3830--><p class="noindent" >The  compiler  might  generate  redundant  bank  section  instructions  in  the  UNLOCK
     sequence for NVM program flash Memory on some Enhanced mid-range devices. The
     generated  code  is  functionally  correct;  however,  the  presence  of  an  additional  <span 
class="ec-lmtt-10">movlb</span>
     instruction will invalidate the unlock sequence. Entering the require sequence as in-line
     assembly code works fine, as does repeating the first step, as in:</dd></dl>
<!--l. 3838--><p class="noindent" >
     <dl class="list1"><dt class="list">
     </dt><dd 
class="list">
     <!--l. 3838--><p class="noindent" ><span 
class="ec-lmtt-10">NVMCON2</span>
     <span 
class="ec-lmtt-10">=</span>
     <span 
class="ec-lmtt-10">0x55;</span>
     <!--l. 3841--><p class="noindent" ><span 
class="ec-lmtt-10">NVMCON2</span>
     <span 
class="ec-lmtt-10">=</span>
     <span 
class="ec-lmtt-10">0x55;</span>
     <!--l. 3843--><p class="noindent" ><span 
class="ec-lmtt-10">NVMCON2</span>
     <span 
class="ec-lmtt-10">=</span>
     <span 
class="ec-lmtt-10">0xAA;</span>
     <!--l. 3845--><p class="noindent" ><span 
class="ec-lmtt-10">NVMCON1bits.WR</span>
     <span 
class="ec-lmtt-10">=</span>
     <span 
class="ec-lmtt-10">1;</span></dd></dl>
<!--l. 3847--><p class="noindent" >
     <dl class="description"><dt class="description">
<span 
class="ec-lmbx-10">Lack</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;fixup</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;rcall</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3266)</span> </dt><dd 
class="description">
     <!--l. 3848--><p class="noindent" >Fixup overflow messages are not being output in cases where the operand expressions to
     these instructions are evaluated by the linker to be out of range.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Use</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;banned</span><span 
class="ec-lmbx-10">&#x00A0;instruction</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3232)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 3851--><p class="noindent" >Even when employing the BSR63 errata workaround, a PIC18 <span 
class="ec-lmtt-10">movlb</span><span 
class="ec-lmtt-10">&#x00A0;63 </span>instruction might
     appear in the code generated for bitfield access.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Merging</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;different</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;sequences</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3230)</span> </dt><dd 
class="description">
     <!--l. 3854--><p class="noindent" >The compiler might consider assembly sequences that differ only in that one sequence has
     additional trailing instructions as identical. If these sequences were to be merged by the
     assembler optimizer, then the code could fail.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">C90</span><span 
class="ec-lmbx-10">&#x00A0;printf</span><span 
class="ec-lmbx-10">&#x00A0;precision</span><span 
class="ec-lmbx-10">&#x00A0;specifier</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3213)</span> </dt><dd 
class="description">
     <!--l. 3859--><p class="noindent" >When using the C90 library, the precision specifier in a printf-type format string might
     be limited to a maximum value of 6. For example, the precision specifier in the following
     might fail: <span 
class="ec-lmtt-10">sprintf(buf,</span><span 
class="ec-lmtt-10">&#x00A0;"%.8u",</span><span 
class="ec-lmtt-10">&#x00A0;10); </span>This issue does not affect the C99 libraries.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Successive</span><span 
class="ec-lmbx-10">&#x00A0;cast</span><span 
class="ec-lmbx-10">&#x00A0;failure</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3196)</span> </dt><dd 
class="description">
     <!--l. 3864--><p class="noindent" >Code in PIC18 or Enhanced Mid-range devices that performs multiple successive casts
     on the one expression might yield an incorrect result when the reentrant stack model has
     been selected.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">FSR</span><span 
class="ec-lmbx-10">&#x00A0;clobber</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3158)</span> </dt><dd 
class="description">
     <!--l. 3868--><p class="noindent" >When a conditional operator needs to use an FSR register in both the condition expression
     and  the  true/false  expressions,  the  compiler  might  allocate  the  same  FSR  register  in
     both  cases,  resulting  in  the  FSR  being  clobbered  before  it  is  used.  For  example,  in
     <span 
class="ec-lmtt-10">ptr1-&#x003E;select?</span><span 
class="ec-lmtt-10">&#x00A0;ptr2-&#x003E;a</span><span 
class="ec-lmtt-10">&#x00A0;:</span><span 
class="ec-lmtt-10">&#x00A0;ptr2-&#x003E;b </span>loading <span 
class="ec-lmtt-10">ptr2 </span>to an FSR might clobber the previous
     load of <span 
class="ec-lmtt-10">ptr1 </span>to this register. This is most likely to occur when using optimization level 3.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">PIC-AS</span><span 
class="ec-lmbx-10">&#x00A0;move</span><span 
class="ec-lmbx-10">&#x00A0;transformation</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3132)</span> </dt><dd 
class="description">
     <!--l. 3876--><p class="noindent" >The PIC Assembler might change hand-written <span 
class="ec-lmtt-10">MOVFF </span>instructions to <span 
class="ec-lmtt-10">MOVFFL </span>when the
     target addresses are out of range of the smaller instruction. For hand-written assembly
     code built using PIC Assembler, this transformation should not be taking place.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Limited</span><span 
class="ec-lmbx-10">&#x00A0;far</span><span 
class="ec-lmbx-10">&#x00A0;aggregate</span><span 
class="ec-lmbx-10">&#x00A0;access</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3043)</span> </dt><dd 
class="description">
     <!--l. 3881--><p class="noindent" >The compiler will not be able to generate code for statements that either directly or
     indirectly access members within a structure declared as <span 
class="ec-lmtt-10">__far</span>, nor will it accept a pointer
     to <span 
class="ec-lmtt-10">__far</span>-qualified aggregate objects that is also in the far space itself.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Structure</span><span 
class="ec-lmbx-10">&#x00A0;pointer</span><span 
class="ec-lmbx-10">&#x00A0;dereference</span><span 
class="ec-lmbx-10">&#x00A0;failure</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-3041)</span> </dt><dd 
class="description">
     <!--l. 3886--><p class="noindent" >Dereferencing a pointer to a const-qualified structure where the pointer itself is the member
     of a const-qualified structure (<span 
class="ec-lmtt-10">myConstStruct.structPtr-&#x003E; myConstMember</span>) might fail
     when building for PIC18 devices.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Over</span><span 
class="ec-lmbx-10">&#x00A0;optimized</span><span 
class="ec-lmbx-10">&#x00A0;conditional</span><span 
class="ec-lmbx-10">&#x00A0;operator</span><span 
class="ec-lmbx-10">&#x00A0;expressions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2949)</span> </dt><dd 
class="description">
     <!--l. 3890--><p class="noindent" >When the conditional operator (<span 
class="ec-lmtt-10">?</span><span 
class="ec-lmtt-10">&#x00A0;:</span>) is used in complex expressions and both true and false
     expression have a true value, e.g. <span 
class="ec-lmtt-10">((testvar</span><span 
class="ec-lmtt-10">&#x00A0;?</span><span 
class="ec-lmtt-10">&#x00A0;1</span><span 
class="ec-lmtt-10">&#x00A0;:</span><span 
class="ec-lmtt-10">&#x00A0;1)</span><span 
class="ec-lmtt-10">&#x00A0;&amp;&amp;</span><span 
class="ec-lmtt-10">&#x00A0;0)</span><span 
class="ec-lmtt-10">&#x00A0;?</span><span 
class="ec-lmtt-10">&#x00A0;1</span><span 
class="ec-lmtt-10">&#x00A0;:</span><span 
class="ec-lmtt-10">&#x00A0;0</span>, the expression is
     oversimplified, resulting in the wrong result.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Error</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;array</span><span 
class="ec-lmbx-10">&#x00A0;return</span><span 
class="ec-lmbx-10">&#x00A0;type</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2933)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 3894--><p class="noindent" >Functions returning an array type might trigger a <span 
class="ec-lmtt-10">bad</span><span 
class="ec-lmtt-10">&#x00A0;intermediate</span><span 
class="ec-lmtt-10">&#x00A0;type </span>error.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Corruption</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;stack-based</span><span 
class="ec-lmbx-10">&#x00A0;objects</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2874)</span> </dt><dd 
class="description">
     <!--l. 3896--><p class="noindent" >Instances have been seen where the memory allocated to the stack-based variables of one
     function is also used by stack-based objects of another function that is active at the same
     time. The memory for stack-based objects can be reused by other functions only when
     there is no chance of corruption. This issue only affects objects on the compiled stack.
     Specifying that affected functions should use the software stack (<span 
class="ec-lmtt-10">__software </span>specified)
     will avoid any corruption.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Out-of-range</span><span 
class="ec-lmbx-10">&#x00A0;instruction</span><span 
class="ec-lmbx-10">&#x00A0;targets</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;detected</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2867)</span> </dt><dd 
class="description">
     <!--l. 3904--><p class="noindent" >The PIC Assembler is not detecting when any of the targets of conditional branch or call
     instructions (e.g. <span 
class="ec-lmtt-10">bra</span>, <span 
class="ec-lmtt-10">bz</span>, <span 
class="ec-lmtt-10">rcall</span>) are out of range.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bogus</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;absolutes</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2859)</span> </dt><dd 
class="description">
     <!--l. 3908--><p class="noindent" >Placing an absolute object at low data memory address on PIC18 devices might lead to the
     message, <span 
class="ec-lmtt-10">(2084)</span><span 
class="ec-lmtt-10">&#x00A0;absolute</span><span 
class="ec-lmtt-10">&#x00A0;object</span><span 
class="ec-lmtt-10">&#x00A0;"*"</span><span 
class="ec-lmtt-10">&#x00A0;has</span><span 
class="ec-lmtt-10">&#x00A0;an</span><span 
class="ec-lmtt-10">&#x00A0;address</span><span 
class="ec-lmtt-10">&#x00A0;that</span><span 
class="ec-lmtt-10">&#x00A0;lies</span><span 
class="ec-lmtt-10">&#x00A0;within</span><span 
class="ec-lmtt-10">&#x00A0;memory</span><span 
class="ec-lmtt-10">&#x00A0;utilized</span><span 
class="ec-lmtt-10">&#x00A0;by</span><span 
class="ec-lmtt-10">&#x00A0;the</span><span 
class="ec-lmtt-10">&#x00A0;compiler</span><span 
class="ec-lmtt-10">&#x00A0;and</span><span 
class="ec-lmtt-10">&#x00A0;will</span><span 
class="ec-lmtt-10">&#x00A0;likely</span><span 
class="ec-lmtt-10">&#x00A0;lead</span><span 
class="ec-lmtt-10">&#x00A0;to</span><span 
class="ec-lmtt-10">&#x00A0;code</span><span 
class="ec-lmtt-10">&#x00A0;failure.</span>
     This warning is not applicable.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bit-field</span><span 
class="ec-lmbx-10">&#x00A0;casting</span><span 
class="ec-lmbx-10">&#x00A0;ignored</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2754)</span> </dt><dd 
class="description">
     <!--l. 3912--><p class="noindent" >Casting of bit-fields to a signed value is ignored by the compiler.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Char</span><span 
class="ec-lmbx-10">&#x00A0;type</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;flexible</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2668)</span> </dt><dd 
class="description">
     <!--l. 3914--><p class="noindent" >The <span 
class="ec-lmtt-10">-fsigned-char </span>(or <span 
class="ec-lmtt-10">-fno-unsigned-char</span>) options current are silently ignored. The
     type of a plain char is unsigned char. The values for the <span 
class="ec-lmtt-10">CHAR_MAX </span>and <span 
class="ec-lmtt-10">CHAR_MIN </span>macros
     reflect this.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Zero</span><span 
class="ec-lmbx-10">&#x00A0;divide</span><span 
class="ec-lmbx-10">&#x00A0;by</span><span 
class="ec-lmbx-10">&#x00A0;zero</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2602)</span> </dt><dd 
class="description">
     <!--l. 3918--><p class="noindent" >The result of a floating-point expression that uses runtime values of zero divided by zero
     returns Infinity, not NaN.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">IDE</span><span 
class="ec-lmbx-10">&#x00A0;doesn</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">t</span><span 
class="ec-lmbx-10">&#x00A0;show</span><span 
class="ec-lmbx-10">&#x00A0;all</span><span 
class="ec-lmbx-10">&#x00A0;instructions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2597)</span> </dt><dd 
class="description">
     <!--l. 3921--><p class="noindent" >Only the first instruction of a multi-instruction assembly pseudo-instruction (e.g. <span 
class="ec-lmtt-10">BANKSEL</span>)
     might appear in the MPLAB X IDE disassembly view. This does not affect the generates
     code or how it executes.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Recursive</span><span 
class="ec-lmbx-10">&#x00A0;calls</span><span 
class="ec-lmbx-10">&#x00A0;incorrectly</span><span 
class="ec-lmbx-10">&#x00A0;indicated</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2451)</span> </dt><dd 
class="description">
     <!--l. 3925--><p class="noindent" >The compiler might indicate that a function has been recursively called when indirectly
     called via a pointer that is also used to hold other function addresses at other times in
     the program. The compiler considers the targets of a pointer over the entire lifetime of
     the pointer object, which might fool the compiler into believing that recursion has taken
     place.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Read</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;volatile</span><span 
class="ec-lmbx-10">&#x00A0;objects</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;performed</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2273)</span> </dt><dd 
class="description">
                                                                               
                                                                               
     <!--l. 3931--><p class="noindent" >If the true and false statements for an <span 
class="ec-lmtt-10">if() </span>statement are identical, the compiler will try
     to simplify such situations. If the controlling expression inside the <span 
class="ec-lmtt-10">if() </span>accesses seemingly
     redundant <span 
class="ec-lmtt-10">volatile </span>objects, code to access to these objects might be incorrectly removed.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Indirect</span><span 
class="ec-lmbx-10">&#x00A0;function</span><span 
class="ec-lmbx-10">&#x00A0;calls</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;encoded</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-2003)</span> </dt><dd 
class="description">
     <!--l. 3936--><p class="noindent" >In some cases, the compiler is not detecting that function pointers that are members of a
     structure have been initialized, and it will fail to encode subsequent function calls made
     using that pointer. The compiler might or might not issue a warning regarding the missed
     calls.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Wrong</span><span 
class="ec-lmbx-10">&#x00A0;CRC</span><span 
class="ec-lmbx-10">&#x00A0;write</span><span 
class="ec-lmbx-10">&#x00A0;order</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1997)</span> </dt><dd 
class="description">
     <!--l. 3941--><p class="noindent" >The multi-byte CRCDATA register must be written in a specific byte order to ensure that
     the data is latched correctly. There is no guarantee that this will take place for C code that
     writes to this register as a whole. Code should instead write to the individual registers
     within CRCDATA (T, U, H, and L registers) in the intended order.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Right</span><span 
class="ec-lmbx-10">&#x00A0;shift</span><span 
class="ec-lmbx-10">&#x00A0;wrong</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1941)</span> </dt><dd 
class="description">
     <!--l. 3947--><p class="noindent" >Right-shifting a <span 
class="ec-lmtt-10">signed</span><span 
class="ec-lmtt-10">&#x00A0;long </span>variable by 16 bits can omit the sign extension, producing
     an incorrect result.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Incorrect</span><span 
class="ec-lmbx-10">&#x00A0;pointer</span><span 
class="ec-lmbx-10">&#x00A0;arithmetic</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1940)</span> </dt><dd 
class="description">
     <!--l. 3950--><p class="noindent" >Incrementing to a pointer to an array, e.g. <span 
class="ec-lmtt-10">char</span><span 
class="ec-lmtt-10">&#x00A0;(*ptr)</span><span 
class="ec-lmtt-10">&#x00A0;[32]</span>, should add a value being
     the size of the array. Instead, it is adding the size of the array<span 
class="ts1-lmr10-">'</span>s elements.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Incorrect</span><span 
class="ec-lmbx-10">&#x00A0;array</span><span 
class="ec-lmbx-10">&#x00A0;sizes</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1934)</span> </dt><dd 
class="description">
     <!--l. 3954--><p class="noindent" >When compiling C99 programs, the compiler may make incorrect assumptions about the
     size of pointers used to define the size of an auto array.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Inappropriate</span><span 
class="ec-lmbx-10">&#x00A0;and</span><span 
class="ec-lmbx-10">&#x00A0;missing</span><span 
class="ec-lmbx-10">&#x00A0;types</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1886)</span> </dt><dd 
class="description">
     <!--l. 3957--><p class="noindent" >The <span 
class="ec-lmtt-10">&#x003C;stdint.h&#x003E; </span>header used by C99 builds defines (<span 
class="ec-lmtt-10">u</span>)<span 
class="ec-lmtt-10">int_fast16_t </span>as being types with
     a size of 4 bytes, whereas a type with a width of 2 bytes would be the fastest types. The
     (<span 
class="ec-lmtt-10">u</span>)<span 
class="ec-lmtt-10">int_fast24_t </span>types are missing entirely.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Unsupported</span><span 
class="ec-lmbx-10">&#x00A0;directive</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1817)</span> </dt><dd 
class="description">
     <!--l. 3962--><p class="noindent" >The <span 
class="ec-lmtt-10">DDW </span>assembly directive is not supported.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bogus</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;absolute</span><span 
class="ec-lmbx-10">&#x00A0;functions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1809)</span> </dt><dd 
class="description">
     <!--l. 3964--><p class="noindent" >Functions      that      are      made      absolute      might      trigger      the      warning
     <span 
class="ec-lmtt-10">(1262)</span><span 
class="ec-lmtt-10">&#x00A0;object</span><span 
class="ec-lmtt-10">&#x00A0;"*"</span><span 
class="ec-lmtt-10">&#x00A0;lies</span><span 
class="ec-lmtt-10">&#x00A0;outside</span><span 
class="ec-lmtt-10">&#x00A0;available</span><span 
class="ec-lmtt-10">&#x00A0;data</span><span 
class="ec-lmtt-10">&#x00A0;space </span>when compiling for devices
     that have vectored interrupts, e.g. a PIC18F25K42. This warning can be ignored.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">White</span><span 
class="ec-lmbx-10">&#x00A0;space</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;counted</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1784)</span> </dt><dd 
class="description">
     <!--l. 3968--><p class="noindent" >The <span 
class="ec-lmtt-10">%n </span>conversion-specifier in the C99 <span 
class="ec-lmtt-10">scanf() </span>fails to count white-space in the input
     string.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">fmod()</span><span 
class="ec-lmbx-10">&#x00A0;and</span><span 
class="ec-lmbx-10">&#x00A0;zero</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1641)</span> </dt><dd 
class="description">
     <!--l. 3971--><p class="noindent" >The <span 
class="ec-lmtt-10">fmod() </span>library function is non-compliant when second argument is zero. Currently,
     it returns the first argument in this case. It should return either trigger a domain error or
     return zero.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">t</span><span 
class="ec-lmbx-10">&#x00A0;generate</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;for</span><span 
class="ec-lmbx-10">&#x00A0;floating-point</span><span 
class="ec-lmbx-10">&#x00A0;operations</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1613,</span> </dt><dd 
class="description">
     <!--l. 3975--><p class="noindent" >XC8-1614)                                                                                         Expression
     that perform operations on the results of two complex floating-point expression, e.g. use
     of the <span 
class="ec-lmtt-10">|| </span>operator in the following<span 
class="ec-lmtt-10">((</span><span 
class="ec-lmtt-10">&#x00A0;!</span><span 
class="ec-lmtt-10">&#x00A0;*pd2)</span><span 
class="ec-lmtt-10">&#x00A0;-</span><span 
class="ec-lmtt-10">&#x00A0;d2)</span><span 
class="ec-lmtt-10">&#x00A0;||</span><span 
class="ec-lmtt-10">&#x00A0;(((f1)--</span><span 
class="ec-lmtt-10">&#x00A0;)</span><span 
class="ec-lmtt-10">&#x00A0;&#x003E;=</span><span 
class="ec-lmtt-10">&#x00A0;*pf3))</span>, might
     trigger can<span 
class="ts1-lmr10-">'</span>t generate code error messages.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">String</span><span 
class="ec-lmbx-10">&#x00A0;literal</span><span 
class="ec-lmbx-10">&#x00A0;expressions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1610)</span> </dt><dd 
class="description">
     <!--l. 3979--><p class="noindent" >Accessing a character of a string literal might produce an error message when using the
     initialize an object, e.g. <span 
class="ec-lmtt-10">volatile</span><span 
class="ec-lmtt-10">&#x00A0;int</span><span 
class="ec-lmtt-10">&#x00A0;a</span><span 
class="ec-lmtt-10">&#x00A0;=</span><span 
class="ec-lmtt-10">&#x00A0;"abc"[1];</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Corruption</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;auto</span><span 
class="ec-lmbx-10">&#x00A0;objects</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1608)</span> </dt><dd 
class="description">
     <!--l. 3982--><p class="noindent" >For complex projects targeting enhanced mid-range devices and using the compiled stack,
     the auto variables of functions that are concurrently active might be allocated to the same
     address, causing corruption of these objects.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Too</span><span 
class="ec-lmbx-10">&#x00A0;many</span><span 
class="ec-lmbx-10">&#x00A0;side-effects</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1587)</span> </dt><dd 
class="description">
     <!--l. 3986--><p class="noindent" >Incorrect PIC18 code is being generated for expressions involving compound assignment
     operators and where the lefthand side has side-effects. In this cases, the side-effects of the
     lefthand side will occur twice.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Register</span><span 
class="ec-lmbx-10">&#x00A0;over-writes</span><span 
class="ec-lmbx-10">&#x00A0;with</span><span 
class="ec-lmbx-10">&#x00A0;recursive</span><span 
class="ec-lmbx-10">&#x00A0;functions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1563)</span> </dt><dd 
class="description">
     <!--l. 3990--><p class="noindent" >In some binary expressions or sub-expressions located in a recursively-called function,
     the compiler may allocate a static register to one sub-tree that might be clobbered by a
     recursive function call made in the other sub-tree. In this case, the compiler will now emit
     a warning message to indicate that the register might be corrupted.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bad</span><span 
class="ec-lmbx-10">&#x00A0;intermediate</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;from</span><span 
class="ec-lmbx-10">&#x00A0;typedefs</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1560)</span> </dt><dd 
class="description">
     <!--l. 3996--><p class="noindent" >In some cases where a member of a structure has a typedefed type that is used in a
     previous definition before the structure, the code generator will emit the error message "bad
     intermediate code". This can possibly be worked-around by ensuring that the structure is
     the first definition to use the typedef<span 
class="ts1-lmr10-">'</span>d type.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Non-removal</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;unused</span><span 
class="ec-lmbx-10">&#x00A0;variables</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1480)</span> </dt><dd 
class="description">
     <!--l. 4002--><p class="noindent" >If a global variable is defined outside of library code and has had its address taken by a
     non-library function that is not called, the variable has memory allocated, even if it has
     not otherwise been used.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Device</span><span 
class="ec-lmbx-10">&#x00A0;oscillator</span><span 
class="ec-lmbx-10">&#x00A0;calibration</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1280)</span> </dt><dd 
class="description">
     <!--l. 4006--><p class="noindent" >Oscillator  calibration  using  <span 
class="ec-lmtt-10">--RUNTIME=+config </span>will  not  work  with  new  devices  that
     obtain their calibration constant from a calibration word stored in flash program memory,
                                                                               
                                                                               
     such as the MCP19114/5 devices. Disable this runtime sub-option and refer to the device
     data sheet for instructions.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bogus</span><span 
class="ec-lmbx-10">&#x00A0;warning</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;arithmetic</span><span 
class="ec-lmbx-10">&#x00A0;overflow</span><span 
class="ec-lmbx-10">&#x00A0;when</span><span 
class="ec-lmbx-10">&#x00A0;subtracting</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1270,</span><span 
class="ec-lmbx-10">&#x00A0;XC8-1585)</span> </dt><dd 
class="description">
     <!--l. 4011--><p class="noindent" >A  warning  regarding  an  <span 
class="ec-lmtt-10">arithmetic</span><span 
class="ec-lmtt-10">&#x00A0;overflow</span><span 
class="ec-lmtt-10">&#x00A0;in</span><span 
class="ec-lmtt-10">&#x00A0;constant</span><span 
class="ec-lmtt-10">&#x00A0;expression </span>might  be
     issued by the compiler when building using the C90 standard and the expression contains
     a literal subtraction. This warning can usually be ignored. A recent change in the default
     wanting level imposed by the MPLAB X IDE has seen this compiler warning issued more
     frenetically by the compiler. Building the project with the C99 standard selected will
     alleviate the issue entirely.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Inline</span><span 
class="ec-lmbx-10">&#x00A0;assembly</span><span 
class="ec-lmbx-10">&#x00A0;not</span><span 
class="ec-lmbx-10">&#x00A0;output</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;PRO</span><span 
class="ec-lmbx-10">&#x00A0;mode</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1268)</span> </dt><dd 
class="description">
     <!--l. 4019--><p class="noindent" >In PRO mode, inline assembly code enclosed in <span 
class="ec-lmtt-10">#asm </span>- <span 
class="ec-lmtt-10">#endasm </span>is simply not output by
     the code generator. The presence of any instruction in an <span 
class="ec-lmtt-10">asm(""); </span>statement before the
     <span 
class="ec-lmtt-10">#asm </span>assembly results in the correct behaviour. Alternatively, you can place the <span 
class="ec-lmtt-10">#asm </span>block
     inside braces <span 
class="ec-lmtt-10">{</span><span 
class="ec-lmtt-10">&#x00A0;}</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Warning</span><span 
class="ec-lmbx-10">&#x00A0;on</span><span 
class="ec-lmbx-10">&#x00A0;conversion</span><span 
class="ec-lmbx-10">&#x00A0;to</span><span 
class="ec-lmbx-10">&#x00A0;shorter</span><span 
class="ec-lmbx-10">&#x00A0;type</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1246)</span> </dt><dd 
class="description">
     <!--l. 4025--><p class="noindent" >In some instances when building using the C90 standard, the compiler might issue a (752)
     conversion to shorter data type warning where this is not expected. Building using the
     C99 language standard will alleviate this issue entirely.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Printing</span><span 
class="ec-lmbx-10">&#x00A0;spaces</span><span 
class="ec-lmbx-10">&#x00A0;to</span><span 
class="ec-lmbx-10">&#x00A0;width</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1214)</span> </dt><dd 
class="description">
     <!--l. 4030--><p class="noindent" >When using a <span 
class="ec-lmtt-10">%d </span>placeholder and a width specifier, the C90 implementation of <span 
class="ec-lmtt-10">printf()</span>
     function  did  not  print  leading  spaces  in  the  output  when  the  printed  value  had  few
     characters that the specified width, so for example the format string <span 
class="ec-lmtt-10">"%04.2d" </span>might print
     <span 
class="ec-lmtt-10">"77</span>" instead of <span 
class="ec-lmtt-10">"</span><span 
class="ec-lmtt-10">&#x00A0;</span><span 
class="ec-lmtt-10">&#x00A0;77</span>". The C99 <span 
class="ec-lmtt-10">printf() </span>function is not affected by this issue.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Functions</span><span 
class="ec-lmbx-10">&#x00A0;called</span><span 
class="ec-lmbx-10">&#x00A0;from</span><span 
class="ec-lmbx-10">&#x00A0;in-line</span><span 
class="ec-lmbx-10">&#x00A0;assembly</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1180)</span> </dt><dd 
class="description">
     <!--l. 4037--><p class="noindent" >The code generator will not be able to identify a C function called only from in-line
     assembly code if the definition for that C function is placed before the assembly call
     instruction in the source file. Placing the function definition after the call is acceptable. If
     the function cannot be identified, no code will be generated for the function and the linker
     will issue undefined symbol errors.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Printf</span><span 
class="ec-lmbx-10">&#x00A0;modifiers</span><span 
class="ec-lmbx-10">&#x00A0;</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">h</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">&#x00A0;and</span><span 
class="ec-lmbx-10">&#x00A0;</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">L</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">&#x00A0;ignored</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1166)</span> </dt><dd 
class="description">
     <!--l. 4044--><p class="noindent" >A <span 
class="ec-lmtt-10">printf() </span>conversion specification that uses the <span 
class="ec-lmtt-10">h </span>or L modifiers will result in the
     specification itself being printed, e.g. <span 
class="ec-lmtt-10">%hx </span>will print <span 
class="ec-lmtt-10">hx</span>. This does not affect the <span 
class="ec-lmtt-10">printf()</span>
     in the C99 libraries.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Messy</span><span 
class="ec-lmbx-10">&#x00A0;cleanup</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1087)</span> </dt><dd 
class="description">
     <!--l. 4049--><p class="noindent" >Running an XC8 ports-support uninstaller might leave behind several directories in the
     compiler&#8217;s main directory.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Redefinition</span><span 
class="ec-lmbx-10">&#x00A0;of</span><span 
class="ec-lmbx-10">&#x00A0;intrinsic</span><span 
class="ec-lmbx-10">&#x00A0;functions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1061)</span> </dt><dd 
class="description">
     <!--l. 4051--><p class="noindent" >It not possible to replace a standard library function which uses the <span 
class="ec-lmtt-10">intrinsic </span>pragma
                                                                               
                                                                               
     with a user-defined function with the same name. Examples of standard library functions
     that might use this pragma are: all of the inline delay functions (such as <span 
class="ec-lmtt-10">_delay()</span>),
     <span 
class="ec-lmtt-10">memcpy()</span>, and <span 
class="ec-lmtt-10">__va_start()</span>.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Accessing</span><span 
class="ec-lmbx-10">&#x00A0;flash</span><span 
class="ec-lmbx-10">&#x00A0;data</span><span 
class="ec-lmbx-10">&#x00A0;memory</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1047)</span> </dt><dd 
class="description">
     <!--l. 4057--><p class="noindent" >None of the supplied flash library routines or macros associated with flash support those
     devices that utilize flash data memory. Devices without flash data memory are not affected
     by this limitation.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Persistent</span><span 
class="ec-lmbx-10">&#x00A0;memory</span><span 
class="ec-lmbx-10">&#x00A0;check</span><span 
class="ec-lmbx-10">&#x00A0;functions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1029)</span> </dt><dd 
class="description">
     <!--l. 4061--><p class="noindent" >The previously provided functions <span 
class="ec-lmtt-10">persist_check() </span>and <span 
class="ec-lmtt-10">persist_validate() </span>do not
     work with the new memory allocations schemes used by the compiler. These functions
     have been removed from the libraries and are not available for use.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can&#8217;t</span><span 
class="ec-lmbx-10">&#x00A0;generate</span><span 
class="ec-lmbx-10">&#x00A0;code</span><span 
class="ec-lmbx-10">&#x00A0;errors</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1022)</span> </dt><dd 
class="description">
     <!--l. 4066--><p class="noindent" >In Free and PRO modes, code which indirectly accesses nested structure members might
     produce can&#8217;t generate code errors.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Indirect</span><span 
class="ec-lmbx-10">&#x00A0;function</span><span 
class="ec-lmbx-10">&#x00A0;calls</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-1000)</span> </dt><dd 
class="description">
     <!--l. 4069--><p class="noindent" >For mid-range and baseline devices, there is a limit on the number of functions that can
     be called indirectly via a pointer. Typically this will be about 120 functions, but this limit
     is dependent on where the functions are linked. Code might crash if this limit is exceeded.
     This does not affect enhanced mid-range devices.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Multiple-assignment</span><span 
class="ec-lmbx-10">&#x00A0;expressions</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-995)</span> </dt><dd 
class="description">
     <!--l. 4075--><p class="noindent" >The compiler can crash when compiling a statement that involves multiple assignments
     and the assignment operands have side effects (such as referencing <span 
class="ec-lmtt-10">volatile </span>objects), e.g.
     <span 
class="ec-lmtt-10">a</span><span 
class="ec-lmtt-10">&#x00A0;=</span><span 
class="ec-lmtt-10">&#x00A0;b</span><span 
class="ec-lmtt-10">&#x00A0;=</span><span 
class="ec-lmtt-10">&#x00A0;c</span><span 
class="ec-lmtt-10">&#x00A0;=</span><span 
class="ec-lmtt-10">&#x00A0;d</span><span 
class="ec-lmtt-10">&#x00A0;=</span><span 
class="ec-lmtt-10">&#x00A0;e</span><span 
class="ec-lmtt-10">&#x00A0;=... </span>Break up offending statements into many small ones.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Fedora</span><span 
class="ec-lmbx-10">&#x00A0;path</span><span 
class="ec-lmbx-10">&#x00A0;variable</span><span 
class="ec-lmbx-10">&#x00A0;(XC8-474)</span> </dt><dd 
class="description">
     <!--l. 4080--><p class="noindent" >The path variable will not be updated when non-root users install the compiler under
     Fedora. If you wish for the compiler driver to be in your path, update your path variable
     manually after installation of the compiler.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">No</span><span 
class="ec-lmbx-10">&#x00A0;static</span><span 
class="ec-lmbx-10">&#x00A0;local</span><span 
class="ec-lmbx-10">&#x00A0;specifiers</span><span 
class="ec-lmbx-10">&#x00A0;(XC8E-313)</span> </dt><dd 
class="description">
     <!--l. 4084--><p class="noindent" >The <span 
class="ec-lmtt-10">__near </span>and <span 
class="ec-lmtt-10">__far </span>object specifiers cannot be used with <span 
class="ec-lmtt-10">static </span>local objects.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Absolute</span><span 
class="ec-lmbx-10">&#x00A0;variables</span><span 
class="ec-lmbx-10">&#x00A0;in</span><span 
class="ec-lmbx-10">&#x00A0;access</span><span 
class="ec-lmbx-10">&#x00A0;bank</span><span 
class="ec-lmbx-10">&#x00A0;memory</span><span 
class="ec-lmbx-10">&#x00A0;(XC8E-138)</span> </dt><dd 
class="description">
     <!--l. 4087--><p class="noindent" >PIC18 projects that locate absolute variables in the lower addresses of the access bank
     RAM might trigger a <span 
class="ec-lmtt-10">can&#8217;t</span><span 
class="ec-lmtt-10">&#x00A0;find</span><span 
class="ec-lmtt-10">&#x00A0;space</span><span 
class="ec-lmtt-10">&#x00A0;error </span>for the psect <span 
class="ec-lmtt-10">temp </span>in class <span 
class="ec-lmtt-10">COMRAM</span>. If a
     project must define absolute objects, try locating them at a higher address.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Bank</span><span 
class="ec-lmbx-10">&#x00A0;qualifiers</span><span 
class="ec-lmbx-10">&#x00A0;(XC8E-62)</span> </dt><dd 
class="description">
     <!--l. 4092--><p class="noindent" >Only <span 
class="ec-lmtt-10">bankx </span>qualifiers for data banks 0 through 3 are supported by the compiler. (These
     are enabled using the <span 
class="ec-lmtt-10">-maddrqual </span>option). Use absolute variables to place objects in other
                                                                               
                                                                               
     banks, if required.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">In-line</span><span 
class="ec-lmbx-10">&#x00A0;assembly</span><span 
class="ec-lmbx-10">&#x00A0;and</span><span 
class="ec-lmbx-10">&#x00A0;labels</span><span 
class="ec-lmbx-10">&#x00A0;(XC8E-61)</span> </dt><dd 
class="description">
     <!--l. 4096--><p class="noindent" >Functions which are called from both main-line and interrupt code should not contain
     in-line assembly that defines assembly labels. Such labels will not be assigned the usual
     duplication prefix (<span 
class="ec-lmtt-10">i1</span>, <span 
class="ec-lmtt-10">i2 </span>etc) and will result in multiply-defined symbol errors.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Switch</span><span 
class="ec-lmbx-10">&#x00A0;strategies</span><span 
class="ec-lmbx-10">&#x00A0;(XC8E-20)</span> </dt><dd 
class="description">
     <!--l. 4101--><p class="noindent" >There is only one possible switch strategy currently available for PIC18 devices. It uses
     the <span 
class="ec-lmtt-10">space </span>switch type. New strategies will be introduced in future compiler versions so
     that PIC18 devices have similar options to the baseline/mid-range devices.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Stack</span><span 
class="ec-lmbx-10">&#x00A0;overflow</span><span 
class="ec-lmbx-10">&#x00A0;(XC8E-11)</span> </dt><dd 
class="description">
     <!--l. 4106--><p class="noindent" >When the managed stack is used (the <span 
class="ec-lmtt-10">stackcall </span>suboption to the <span 
class="ec-lmtt-10">--RUNTIME </span>option is
     enabled) in some situations the stack may overflow leading to code failure. With this
     option enabled, if a function call would normally overflow the stack, the compiler will
     automatically swap to using a lookup table method of calling the function to avoid the
     overflow. However, if these functions are indirect function calls (made via a pointer) the
     compiler will actually encode them using a regular call instruction and when these calls
     return, the stack will overflow. The managed stack works as expected for all direct function
     calls, and for all indirect calls that do not exceed the stack depth.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Time</span><span 
class="ec-lmbx-10">&#x00A0;zones</span> </dt><dd 
class="description">
     <!--l. 4117--><p class="noindent" >The <span 
class="ec-lmtt-10">&#x003C;time.h&#x003E; </span>library functions assume GMT and do not support local time zones, thus
     <span 
class="ec-lmtt-10">localtime() </span>will return the same time as <span 
class="ec-lmtt-10">gmtime()</span>, for example.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Haven</span><span 
class="ts1-lmbx10-">'</span><span 
class="ec-lmbx-10">t</span><span 
class="ec-lmbx-10">&#x00A0;got</span><span 
class="ec-lmbx-10">&#x00A0;time</span> </dt><dd 
class="description">
     <!--l. 4120--><p class="noindent" >The <span 
class="ec-lmtt-10">time() </span>function is implemented for PIC devices, but always returns -1 (as described
     in the <span 
class="ec-lmri-10">Microchip Unified Standard Library Reference Guide </span>for situations when the target
     environment cannot determine the current time).
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Non-reentrant</span><span 
class="ec-lmbx-10">&#x00A0;library</span><span 
class="ec-lmbx-10">&#x00A0;functions</span> </dt><dd 
class="description">
     <!--l. 4125--><p class="noindent" >Some library functions, for example the <span 
class="ec-lmtt-10">printf() </span>family of functions, are not reentrant
     and may fail if multiple instances of them are active at the same time. This limitation
     exists even if you specify a reentrant stack setting.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Redirecting</span><span 
class="ec-lmbx-10">&#x00A0;bss</span><span 
class="ec-lmbx-10">&#x00A0;variables</span> </dt><dd 
class="description">
     <!--l. 4130--><p class="noindent" >If the <span 
class="ec-lmtt-10">#pragma</span><span 
class="ec-lmtt-10">&#x00A0;psect </span>directive is used to redirect objects that normally reside in any
     of the <span 
class="ec-lmtt-10">bss </span>psects, the runtime startup code will not be aware of this and will clear the
     memory that the variables would have ordinarily be allocated. At such an early stage, this
     should not affect program execution, but if all bss objects are redirected, an undefined
     symbol error will occur with PIC18 devices. Consider using the <span 
class="ec-lmtt-10">__section() </span>specifier.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Installer</span><span 
class="ec-lmbx-10">&#x00A0;execution</span> </dt><dd 
class="description">
     <!--l. 4138--><p class="noindent" >On both macOS and Linux, it is necessary to run the installer as root or with superuser
     privileges (using <span 
class="ec-lmtt-10">sudo</span>, for example). If the installer is started without superuser privileges
                                                                               
                                                                               
     on macOS, it will exit and display an informative message. In the same situation on Linux,
     the installer will fail when it attempts to write to directories for which it does not have
     adequate rights. The messages displayed will relate to these access failures. For correct
     operation, run the installer via <span 
class="ec-lmtt-10">sudo</span>, or as the root user, on these systems.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">PATH</span><span 
class="ec-lmbx-10">&#x00A0;environment</span><span 
class="ec-lmbx-10">&#x00A0;variable</span> </dt><dd 
class="description">
     <!--l. 4147--><p class="noindent" >On Linux systems, the installer, by default, updates the <span 
class="ec-lmtt-10">PATH </span>environment variable to
     include paths to the new executables being installed. If the installer is run via <span 
class="ec-lmtt-10">sudo</span>, the
     default action will update the <span 
class="ec-lmtt-10">PATH </span>variable of the user executing the <span 
class="ec-lmtt-10">sudo </span>command. If
     the installer is run by root, the installer will only update root<span 
class="ts1-lmr10-">'</span>s <span 
class="ec-lmtt-10">PATH </span>variable, and not the
     <span 
class="ec-lmtt-10">PATH </span>variables of ordinary users. If installing the compiler while logged in as root, a better
     choice is to update <span 
class="ec-lmri-10">all </span>user <span 
class="ec-lmtt-10">PATH </span>variables. Alternatively, skip the step to update the <span 
class="ec-lmtt-10">PATH</span>
     variable in the installer, and manually update the <span 
class="ec-lmtt-10">PATH </span>variables of users who will use the
     software.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">PIC12F529T39A/T48A</span><span 
class="ec-lmbx-10">&#x00A0;memory</span><span 
class="ec-lmbx-10">&#x00A0;restrictions</span> </dt><dd 
class="description">
     <!--l. 4159--><p class="noindent" >The previous limitation which restricted memory to the first 4 RAM banks for user-defined
     variables has been lifted. Note, however, that the compiler will not allow you to define
     objects that span multiple banks on these devices.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Psect</span><span 
class="ec-lmbx-10">&#x00A0;pragma</span><span 
class="ec-lmbx-10">&#x00A0;and</span><span 
class="ec-lmbx-10">&#x00A0;data</span><span 
class="ec-lmbx-10">&#x00A0;psects</span> </dt><dd 
class="description">
     <!--l. 4163--><p class="noindent" >As described in the manual, the <span 
class="ec-lmtt-10">#pragma</span><span 
class="ec-lmtt-10">&#x00A0;psect </span>directive should not be used to move
     initialized variables that would normally be located in one of the <span 
class="ts1-lmr10-">'</span>data<span 
class="ts1-lmr10-">' </span>psects. The initial
     values in program memory and space for the variables themselves in RAM must be built
     up in a strict order. Using this pragma will violate this assumption. Consider using the
     <span 
class="ec-lmtt-10">__section() </span>specifier.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Copying</span><span 
class="ec-lmbx-10">&#x00A0;compiler</span><span 
class="ec-lmbx-10">&#x00A0;header</span><span 
class="ec-lmbx-10">&#x00A0;files</span> </dt><dd 
class="description">
     <!--l. 4170--><p class="noindent" >The header files shipped with the compiler are specific to that compiler version. Future
     compiler versions may ship with modified header files. If you copy compiler header files
     into your project, particularly if you modify these files, be aware that they may not be
     compatible with future versions of the compiler.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Can&#8217;t</span><span 
class="ec-lmbx-10">&#x00A0;Generate</span><span 
class="ec-lmbx-10">&#x00A0;Code</span><span 
class="ec-lmbx-10">&#x00A0;messages</span> </dt><dd 
class="description">
     <!--l. 4176--><p class="noindent" >When compiling for baseline devices, some complex expressions may cause compile-time
     errors (712) Can&#8217;t Generate Code for this expression. The expressions should be simplified
     to work around this. This may require the use of additional variables to store intermediate
     results. This is most likely with long integer or floating-point arithmetic and particularly
     those devices with less than 4 bytes of common memory available.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Option</span><span 
class="ec-lmbx-10">&#x00A0;and</span><span 
class="ec-lmbx-10">&#x00A0;tris</span><span 
class="ec-lmbx-10">&#x00A0;register</span><span 
class="ec-lmbx-10">&#x00A0;access</span> </dt><dd 
class="description">
     <!--l. 4183--><p class="noindent" >For baseline devices, the <span 
class="ec-lmtt-10">OPTION </span>and <span 
class="ec-lmtt-10">TRIS </span>registers must be written as a byte. Writing
     individual bits is not supported.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">PIC17</span><span 
class="ec-lmbx-10">&#x00A0;support</span> </dt><dd 
class="description">
     <!--l. 4186--><p class="noindent" >PIC 17 devices (for example, 17C756) are not supported by this compiler.
                                                                               
                                                                               
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Configuration</span><span 
class="ec-lmbx-10">&#x00A0;words</span><span 
class="ec-lmbx-10">&#x00A0;(PIC18</span><span 
class="ec-lmbx-10">&#x00A0;parts</span><span 
class="ec-lmbx-10">&#x00A0;only)</span> </dt><dd 
class="description">
     <!--l. 4188--><p class="noindent" >The new device support introduced in PICC18 v9.80 will not automatically program the
     default values into the configuration words when no value is specified. If your project does
     not program all configuration words explicitly, select the option "Program the device with
     default config words" in the Linker tab.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">Specifying</span><span 
class="ec-lmbx-10">&#x00A0;configuration</span><span 
class="ec-lmbx-10">&#x00A0;words</span><span 
class="ec-lmbx-10">&#x00A0;on</span><span 
class="ec-lmbx-10">&#x00A0;PIC10/12/16</span><span 
class="ec-lmbx-10">&#x00A0;devices</span> </dt><dd 
class="description">
     <!--l. 4194--><p class="noindent" >The <span 
class="ec-lmtt-10">__PROG_CONFIG() </span>and <span 
class="ec-lmtt-10">__CONFIG() </span>macros can be used to specify the configuration
     words on PIC10/12/16 devices as well as PIC18 devices, but only when building for C90.
     The <span 
class="ec-lmtt-10">__PROG_CONFIG() </span>macro must use a literal constant argument; you cannot use the
     configuration setting symbols with this macro. The <span 
class="ec-lmtt-10">__CONFIG() </span>macro must only use the
     predefined configuration setting symbols and you may not not use a literal value with this
     macro.
     </dd><dt class="description">
<span 
class="ec-lmbx-10">rfPIC12</span><span 
class="ec-lmbx-10">&#x00A0;parts</span> </dt><dd 
class="description">
     <!--l. 4202--><p class="noindent" >To use the rfPIC12 parts, for example the rfPIC12C509AF, you will need to specify to
     the compiler a part name in a format similar to RF509AF, for example. You can also use
     an alias like 12C509AF, for example. The full part name is also not appropriate when
     compiling from MPLAB IDE.</dd></dl>
<!--l. 4209--><p class="noindent" >
<h3 class="sectionHead"><span class="titlemark">7   </span> <a 
 id="x1-850007"></a>Device Errata</h3>
<!--l. 4211--><p class="noindent" >For 8-bit PIC devices, this release of the XC8 compiler recognizes the published silicon errata issues
listed in the table below. Some of these issues have been corrected and no longer apply in recent silicon
revisions. Refer to Microchip<span 
class="ts1-lmr10-">'</span>s device errata documents for details on which issues are still
pertinent for your silicon revision. The compiler<span 
class="ts1-lmr10-">'</span>s chip configuration file records which
issues are applicable to each device. Specific errata workarounds can be selectively enabled
or disabled via the driver<span 
class="ts1-lmr10-">'</span>s <span 
class="ec-lmtt-10">-merrata </span>command line option. All these errata are PIC18
specific, except for the <span 
class="ec-lmtt-10">CLOCKSW </span>and <span 
class="ec-lmtt-10">BRANCH </span>errata, which applies to enhanced mid-range
devices.
<!--l. 4223--><p class="noindent" >
<!--l. 4223--><p class="noindent" >
<a 
 id="x1-85001r1"></a><!--l. 4225--><div class="longtable"> <table id="TBL-6" class="longtable" 
 
><colgroup id="TBL-6-1g"><col 
id="TBL-6-1"></colgroup><colgroup id="TBL-6-2g"><col 
id="TBL-6-2"></colgroup><colgroup id="TBL-6-3g"><col 
id="TBL-6-3"></colgroup>
                                                                               
                                                                               
<tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-1-"><td  style="white-space:normal; text-align:left;" id="TBL-6-1-1"  
class="td11">
 <!--l. 4225--><p class="noindent" >Name        </td><td  style="white-space:normal; text-align:left;" id="TBL-6-1-2"  
class="td11">
 <!--l. 4226--><p class="noindent" >Description                                   </td><td  style="white-space:normal; text-align:left;" id="TBL-6-1-3"  
class="td11">
 <!--l. 4227--><p class="noindent" >Workaround
  details                                          </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-2-"><td  style="white-space:normal; text-align:left;" id="TBL-6-2-1"  
class="td11">
 <!--l. 4229--><p class="noindent" >          </td>
</tr><tr  
 style="vertical-align:baseline;" id="TBL-6-3-"><td  style="white-space:normal; text-align:left;" id="TBL-6-3-1"  
class="td11">           </td><td  style="white-space:normal; text-align:left;" id="TBL-6-3-2"  
class="td11">                                 </td><td  style="white-space:normal; text-align:left;" id="TBL-6-3-3"  
class="td11">
</td></tr>
<tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-7-"><td  style="white-space:normal; text-align:left;" id="TBL-6-7-1"  
class="td11">
 <!--l. 4237--><p class="noindent" ><span 
class="ec-lmtt-10">4000</span>      </td><td  style="white-space:normal; text-align:left;" id="TBL-6-7-2"  
class="td11">
 <!--l. 4238--><p class="noindent" >Execution
  of
  some
  flow
  control
  operations
  may
  yield
  unexpected
  results
  when
  instructions
  vector
  code
  execution
  across
  the
  4000h
  address
  boundary.                                     </td><td  style="white-space:normal; text-align:left;" id="TBL-6-7-3"  
class="td11">
 <!--l. 4240--><p class="noindent" >Each
  block
  of
  program
  code
  is
  not
  allowed
  to
  grow
  over
  the
  4000h
  address
  boundary.
  Additional
  NOP
  instructions
  are
  inserted
  at
  prescribed
  locations.                                      </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-8-"><td  style="white-space:normal; text-align:left;" id="TBL-6-8-1"  
class="td11">
 <!--l. 4243--><p class="noindent" ><span 
class="ec-lmtt-10">FASTINTS</span>  </td><td  style="white-space:normal; text-align:left;" id="TBL-6-8-2"  
class="td11">
 <!--l. 4244--><p class="noindent" >If
  a
  high-priority
  interrupt
  occurs
  during
  a
  two-cycle
  instruction
  which
  modifies
  WREG,
  BSR
  or
  STATUS,
  the
  fast-
  interrupt
  return
  mechanism
  (via
  shadow
  registers)
  will
  restore
  the
  value
  held
  by
  the
  register
  before
  the
  instruction.                                   </td><td  style="white-space:normal; text-align:left;" id="TBL-6-8-3"  
class="td11">
 <!--l. 4248--><p class="noindent" >Additional
  code
  reloads
  the
  shadow
  registers
  with
  the
  correct
  values
  of
  WREG,
  STATUS
  and
  BSR.                                            </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-9-"><td  style="white-space:normal; text-align:left;" id="TBL-6-9-1"  
class="td11">
 <!--l. 4251--><p class="noindent" ><span 
class="ec-lmtt-10">LFSR</span>      </td><td  style="white-space:normal; text-align:left;" id="TBL-6-9-2"  
class="td11">
 <!--l. 4252--><p class="noindent" >Using
  the
  <span 
class="ec-lmtt-10">lfsr</span>
 instruction
  to
  load
  a
  value
  into
  a
  specified
  FSR
  register
  may
  also
  corrupt
  a
  RAM
  location.                                       </td><td  style="white-space:normal; text-align:left;" id="TBL-6-9-3"  
class="td11">
 <!--l. 4254--><p class="noindent" >The
  compiler
  will
  load
  FSR
  registers
  without
  using
  the
  <span 
class="ec-lmtt-10">lfsr</span>
 instruction.                                   </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-10-"><td  style="white-space:normal; text-align:left;" id="TBL-6-10-1"  
class="td11">
 <!--l. 4257--><p class="noindent" ><span 
class="ec-lmtt-10">MINUS40</span>   </td><td  style="white-space:normal; text-align:left;" id="TBL-6-10-2"  
class="td11">
 <!--l. 4258--><p class="noindent" >Table
  read
  operations
  above
  the
  user
  program
  space
  (&#x003E;1FFFFFh)
  may
  yield
  erroneous
  results
  at
  the
  extreme
  low
  end
  of
  the
  device&#8217;s
  rated
  temperature
  range
  (-40o
  C).                                              </td><td  style="white-space:normal; text-align:left;" id="TBL-6-10-3"  
class="td11">
 <!--l. 4261--><p class="noindent" >Affected
  library
  sources
  employ
  additional
  <span 
class="ec-lmtt-10">nop</span>
 instructions
  at
  pre-
  scribed
  locations.                                      </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-11-"><td  style="white-space:normal; text-align:left;" id="TBL-6-11-1"  
class="td11">
 <!--l. 4264--><p class="noindent" ><span 
class="ec-lmtt-10">RESET</span>     </td><td  style="white-space:normal; text-align:left;" id="TBL-6-11-2"  
class="td11">
 <!--l. 4265--><p class="noindent" >A
  <span 
class="ec-lmtt-10">goto</span>
 instruction
  placed
  at
  the
  reset
  vector
  may
  not
  execute.                                        </td><td  style="white-space:normal; text-align:left;" id="TBL-6-11-3"  
class="td11">
 <!--l. 4266--><p class="noindent" >Additional
  <span 
class="ec-lmtt-10">nop</span>
 instruction
  inserted
  at
  reset
  vector
  if
  following
  instruction
  is
  <span 
class="ec-lmtt-10">goto</span>                            </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-12-"><td  style="white-space:normal; text-align:left;" id="TBL-6-12-1"  
class="td11">
 <!--l. 4269--><p class="noindent" ><span 
class="ec-lmtt-10">BSR15</span>     </td><td  style="white-space:normal; text-align:left;" id="TBL-6-12-2"  
class="td11">
 <!--l. 4270--><p class="noindent" >Peripheral
  flags
  may
  be
  erroneously
  affected
  if
  the
  BSR
  register
  holds
  the
  value
  15,
  and
  an
  instruction
  is
  executed
  that
  holds
  the
  value
  C9h
  in
  its
  8
  least
  significant
  bits.                                             </td><td  style="white-space:normal; text-align:left;" id="TBL-6-12-3"  
class="td11">
 <!--l. 4273--><p class="noindent" >Compiler
  avoids
  generating
  <span 
class="ec-lmtt-10">movlb</span><span 
class="ec-lmtt-10">&#x00A0;15</span>
 instructions.
  A
  warning
  is
  issued
  if
  this
  instruction
  is
  detected.                                       </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-13-"><td  style="white-space:normal; text-align:left;" id="TBL-6-13-1"  
class="td11">
 <!--l. 4276--><p class="noindent" ><span 
class="ec-lmtt-10">DAW</span>       </td><td  style="white-space:normal; text-align:left;" id="TBL-6-13-2"  
class="td11">
 <!--l. 4277--><p class="noindent" >The
  DAW
  instruction
  may
  improperly
  clear
  the
  CARRY
  bit
  (STATUS&#x003C;0&#x003E;)
  when
  executed.                                      </td><td  style="white-space:normal; text-align:left;" id="TBL-6-13-3"  
class="td11">
 <!--l. 4279--><p class="noindent" >The
  compiler
  is
  not
  affected
  by
  this
  issue.                                           </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-14-"><td  style="white-space:normal; text-align:left;" id="TBL-6-14-1"  
class="td11">
 <!--l. 4281--><p class="noindent" ><span 
class="ec-lmtt-10">EEDATARD</span>  </td><td  style="white-space:normal; text-align:left;" id="TBL-6-14-2"  
class="td11">
 <!--l. 4282--><p class="noindent" >When
  reading
  EEPROM,
  the
  contents
  of
  the
  EEDATA
  register
  may
  become
  corrupted
  in
  the
  second
  instruction
  cycle
  after
  setting
  the
  RD
  bit
  (EECON1&#x003C;0&#x003E;).                             </td><td  style="white-space:normal; text-align:left;" id="TBL-6-14-3"  
class="td11">
 <!--l. 4285--><p class="noindent" >The
  <span 
class="ec-lmtt-10">EEPROM_READ</span>
 macro
  read
  EEDATA
  immediately.                                  </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-15-"><td  style="white-space:normal; text-align:left;" id="TBL-6-15-1"  
class="td11">
 <!--l. 4287--><p class="noindent" ><span 
class="ec-lmtt-10">EEADR</span>     </td><td  style="white-space:normal; text-align:left;" id="TBL-6-15-2"  
class="td11">
 <!--l. 4288--><p class="noindent" >The
  result
  returned
  from
  an
  EEPROM
  read
  operation
  can
  be
  corrupted
  if
  the
  RD
  bit
  is
  set
  immediately
  following
  the
  loading
  of
  the
  EEADR
  register.                                        </td><td  style="white-space:normal; text-align:left;" id="TBL-6-15-3"  
class="td11">
 <!--l. 4291--><p class="noindent" >The
  compiler
  is
  not
  affected
  by
  this
  issue.                                           </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-16-"><td  style="white-space:normal; text-align:left;" id="TBL-6-16-1"  
class="td11">
 <!--l. 4293--><p class="noindent" ><span 
class="ec-lmtt-10">EE_LVD</span>    </td><td  style="white-space:normal; text-align:left;" id="TBL-6-16-2"  
class="td11">
 <!--l. 4294--><p class="noindent" >Writes
  to
  EEPROM
  memory
  may
  not
  succeed
  if
  the
  internal
  voltage
  reference
  is
  not
  set.                                              </td><td  style="white-space:normal; text-align:left;" id="TBL-6-16-3"  
class="td11">
 <!--l. 4296--><p class="noindent" >No
  workaround
  applied                                         </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-17-"><td  style="white-space:normal; text-align:left;" id="TBL-6-17-1"  
class="td11">
 <!--l. 4298--><p class="noindent" ><span 
class="ec-lmtt-10">FL_LVD</span>    </td><td  style="white-space:normal; text-align:left;" id="TBL-6-17-2"  
class="td11">
 <!--l. 4299--><p class="noindent" >Writes
  to
  program
  memory
  may
  not
  succeed
  if
  the
  internal
  voltage
  reference
  is
  not
  set.                                              </td><td  style="white-space:normal; text-align:left;" id="TBL-6-17-3"  
class="td11">
 <!--l. 4301--><p class="noindent" >No
  workaround
  applied                                         </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-18-"><td  style="white-space:normal; text-align:left;" id="TBL-6-18-1"  
class="td11">
 <!--l. 4303--><p class="noindent" ><span 
class="ec-lmtt-10">TBLWTINT</span>  </td><td  style="white-space:normal; text-align:left;" id="TBL-6-18-2"  
class="td11">
 <!--l. 4304--><p class="noindent" >If
  a
  peripheral
  interrupt
  occurs
  during
  a
  <span 
class="ec-lmtt-10">tblwt</span>
 operation,
  data
  can
  be
  corrupted.                                     </td><td  style="white-space:normal; text-align:left;" id="TBL-6-18-3"  
class="td11">
 <!--l. 4306--><p class="noindent" >Library
  routine
  <span 
class="ec-lmtt-10">flash_write()</span><span 
class="ec-lmtt-10">&#x00A0;</span>will
  temporarily
  disable
  all
  applicable
  interrupt-enable
  bits
  before
  execution
  of
  a
  <span 
class="ec-lmtt-10">tblwt</span>
 instruction.                                   </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-19-"><td  style="white-space:normal; text-align:left;" id="TBL-6-19-1"  
class="td11">
 <!--l. 4310--><p class="noindent" ><span 
class="ec-lmtt-10">FW4000</span>    </td><td  style="white-space:normal; text-align:left;" id="TBL-6-19-2"  
class="td11">
 <!--l. 4311--><p class="noindent" >Self
  write
  operations
  initiated
  from
  and
  acting
  upon
  a
  range
  within
  the
  same
  side
  of
  the
  4000h
  boundary
  may
  fail
  based
  on
  sequences
  of
  instructions
  executed
  following
  the
  write.                                           </td><td  style="white-space:normal; text-align:left;" id="TBL-6-19-3"  
class="td11">
 <!--l. 4314--><p class="noindent" >No
  workaround
  applied                                         </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-20-"><td  style="white-space:normal; text-align:left;" id="TBL-6-20-1"  
class="td11">
 <!--l. 4316--><p class="noindent" ><span 
class="ec-lmtt-10">RESETRAM</span>  </td><td  style="white-space:normal; text-align:left;" id="TBL-6-20-2"  
class="td11">
 <!--l. 4317--><p class="noindent" >Data
  in
  a
  RAM
  location
  can
  become
  corrupted
  if
  an
  asynchronous
  reset
  (e.g.
  WDT,
  MCLR
  event)
  occurs
  during
  a
  write
  operation
  to
  that
  location.                                       </td><td  style="white-space:normal; text-align:left;" id="TBL-6-20-3"  
class="td11">
 <!--l. 4319--><p class="noindent" >A
  warning
  will
  be
  issued
  if
  the
  length
  nvram
  psect
  is
  greater
  than
  zero
  bytes
  (persistent
  variables
  populate
  this
  psect).                                          </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-21-"><td  style="white-space:normal; text-align:left;" id="TBL-6-21-1"  
class="td11">
 <!--l. 4322--><p class="noindent" ><span 
class="ec-lmtt-10">FETCH</span>     </td><td  style="white-space:normal; text-align:left;" id="TBL-6-21-2"  
class="td11">
 <!--l. 4323--><p class="noindent" >Instruction
  fetches
  can
  become
  corrupted
  after
  certain
  code
  sequences.                                     </td><td  style="white-space:normal; text-align:left;" id="TBL-6-21-3"  
class="td11">
 <!--l. 4324--><p class="noindent" >A
  <span 
class="ec-lmtt-10">nop</span>
 instruction
  as
  added
  after
  <span 
class="ec-lmtt-10">tblrd</span>
 instructions,
  returns,
  destinations
  of
  calls
  and
  gotos,
  and
  ISR
  vector
  addresses.                                     </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-22-"><td  style="white-space:normal; text-align:left;" id="TBL-6-22-1"  
class="td11">
 <!--l. 4327--><p class="noindent" ><span 
class="ec-lmtt-10">CLOCKSW</span>   </td><td  style="white-space:normal; text-align:left;" id="TBL-6-22-2"  
class="td11">
 <!--l. 4328--><p class="noindent" >An
  instruction
  may
  be
  corrupted
  when
  switching
  from
  INTOSC
  to
  an
  external
  clock
  source.
  (enhanced
  mid-range
  devices)                                        </td><td  style="white-space:normal; text-align:left;" id="TBL-6-22-3"  
class="td11">
 <!--l. 4330--><p class="noindent" >Switch
  to
  high-power
  mode
  immediately
  after
  reset.                                           </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-23-"><td  style="white-space:normal; text-align:left;" id="TBL-6-23-1"  
class="td11">
 <!--l. 4332--><p class="noindent" ><span 
class="ec-lmtt-10">BRANCH</span>    </td><td  style="white-space:normal; text-align:left;" id="TBL-6-23-2"  
class="td11">
 <!--l. 4333--><p class="noindent" >The
  PC
  might
  become
  invalid
  when
  restoring
  from
  an
  interrupt
  during
  a
  BRA
  or
  BRW
  instruction.
  (enhanced
  mid-range
  devices)                                        </td><td  style="white-space:normal; text-align:left;" id="TBL-6-23-3"  
class="td11">
 <!--l. 4335--><p class="noindent" >Branch
  instructions
  are
  avoided.                                        </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-24-"><td  style="white-space:normal; text-align:left;" id="TBL-6-24-1"  
class="td11">
 <!--l. 4337--><p class="noindent" ><span 
class="ec-lmtt-10">BRKNOP2</span>   </td><td  style="white-space:normal; text-align:left;" id="TBL-6-24-2"  
class="td11">
 <!--l. 4338--><p class="noindent" >Hardware
  breakpoints
  might
  be
  affected
  by
  branch
  instruction.                                   </td><td  style="white-space:normal; text-align:left;" id="TBL-6-24-3"  
class="td11">
 <!--l. 4339--><p class="noindent" >Use
  2
  nops
  instead
  of
  <span 
class="ec-lmtt-10">BRA</span><span 
class="ec-lmtt-10">&#x00A0;&#x003C;pc+1&#x003E;</span>.                                  </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-25-"><td  style="white-space:normal; text-align:left;" id="TBL-6-25-1"  
class="td11">
 <!--l. 4341--><p class="noindent" ><span 
class="ec-lmtt-10">NVMREG</span>    </td><td  style="white-space:normal; text-align:left;" id="TBL-6-25-2"  
class="td11">
 <!--l. 4342--><p class="noindent" >The
  program
  will
  access
  data
  flash
  rather
  than
  program
  flash
  memory
  after
  a
  reset,
  affecting
  runtime
  startup
  code.                                            </td><td  style="white-space:normal; text-align:left;" id="TBL-6-25-3"  
class="td11">
 <!--l. 4344--><p class="noindent" >The
  runtime
  startup
  code
  adjusts
  the
  NVMCON
  register
  to
  ensure
  that
  program
  memory
  is
  accessed
  by
  table
  read
  instructions.                                  </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-26-"><td  style="white-space:normal; text-align:left;" id="TBL-6-26-1"  
class="td11">
 <!--l. 4347--><p class="noindent" ><span 
class="ec-lmtt-10">BSR63</span>     </td><td  style="white-space:normal; text-align:left;" id="TBL-6-26-2"  
class="td11">
 <!--l. 4348--><p class="noindent" >Corrupted
  execution
  of
  <span 
class="ec-lmtt-10">movff</span>
 instruction
  when
  the
  BSR
  holds
  63                                               </td><td  style="white-space:normal; text-align:left;" id="TBL-6-26-3"  
class="td11">
 <!--l. 4350--><p class="noindent" >Compiler
  avoids
  generating
  <span 
class="ec-lmtt-10">movlb</span><span 
class="ec-lmtt-10">&#x00A0;63</span>
 instructions.
  A
  warning
  is
  issued
  if
  this
  instruction
  is
  detected.                                       </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td></tr><tr  
 style="vertical-align:baseline;" id="TBL-6-27-"><td  style="white-space:normal; text-align:left;" id="TBL-6-27-1"  
class="td11">           </td>                                                                  
                                                                               
</tr><tr  
 style="vertical-align:baseline;" id="TBL-6-28-"><td  style="white-space:normal; text-align:left;" id="TBL-6-28-1"  
class="td11">           </td>
</tr><tr  
 style="vertical-align:baseline;" id="TBL-6-29-"><td  style="white-space:normal; text-align:left;" id="TBL-6-29-1"  
class="td11">
 <!--l. 4353--><p class="noindent" >          </td>
</tr><tr  
 style="vertical-align:baseline;" id="TBL-6-30-"><td  style="white-space:normal; text-align:left;" id="TBL-6-30-1"  
class="td11">
 <!--l. 4353--><p class="noindent" >          </td>
</tr><tr  
 style="vertical-align:baseline;" id="TBL-6-31-"><td  style="white-space:normal; text-align:left;" id="TBL-6-31-1"  
class="td11">
 <!--l. 4353--><p class="noindent" >          </td>
</tr>
</table></div>
 
</body></html> 

                                                                               


